var __create = Object.create, __defProp = Object.defineProperty, __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty, __getOwnPropNames = Object.getOwnPropertyNames, __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: !0});
var __commonJS = (callback, module) => () => (module || (module = {exports: {}}, callback(module.exports, module)), module.exports), __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: !0});
}, __exportStar = (target, module, desc) => {
  if (module && typeof module == "object" || typeof module == "function")
    for (let key of __getOwnPropNames(module))
      !__hasOwnProp.call(target, key) && key !== "default" && __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  return target;
}, __toModule = (module) => __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: !0} : {value: module, enumerable: !0})), module);

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/Mime.js
var require_Mime = __commonJS((exports, module) => {
  "use strict";
  function Mime3() {
    this._types = Object.create(null), this._extensions = Object.create(null);
    for (let i = 0; i < arguments.length; i++)
      this.define(arguments[i]);
    this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
  }
  Mime3.prototype.define = function(typeMap, force) {
    for (let type in typeMap) {
      let extensions = typeMap[type].map(function(t) {
        return t.toLowerCase();
      });
      type = type.toLowerCase();
      for (let i = 0; i < extensions.length; i++) {
        let ext = extensions[i];
        if (ext[0] !== "*") {
          if (!force && ext in this._types)
            throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
          this._types[ext] = type;
        }
      }
      if (force || !this._extensions[type]) {
        let ext = extensions[0];
        this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
      }
    }
  };
  Mime3.prototype.getType = function(path7) {
    path7 = String(path7);
    let last = path7.replace(/^.*[/\\]/, "").toLowerCase(), ext = last.replace(/^.*\./, "").toLowerCase(), hasPath = last.length < path7.length;
    return (ext.length < last.length - 1 || !hasPath) && this._types[ext] || null;
  };
  Mime3.prototype.getExtension = function(type) {
    return type = /^\s*([^;\s]*)/.test(type) && RegExp.$1, type && this._extensions[type.toLowerCase()] || null;
  };
  module.exports = Mime3;
});

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/types/standard.js
var require_standard = __commonJS((exports, module) => {
  module.exports = {"application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma", "es"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/mrb-consumer+xml": ["*xdf"], "application/mrb-publish+xml": ["*xdf"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["*xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-error+xml": ["xer"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"]};
});

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/lite.js
var require_lite = __commonJS((exports, module) => {
  "use strict";
  var Mime3 = require_Mime();
  module.exports = new Mime3(require_standard());
});

// node_modules/.pnpm/path-browserify@1.0.1/node_modules/path-browserify/index.js
var require_path_browserify = __commonJS((exports, module) => {
  "use strict";
  function assertPath(path7) {
    if (typeof path7 != "string")
      throw new TypeError("Path must be a string. Received " + JSON.stringify(path7));
  }
  function normalizeStringPosix(path7, allowAboveRoot) {
    for (var res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, code, i = 0; i <= path7.length; ++i) {
      if (i < path7.length)
        code = path7.charCodeAt(i);
      else {
        if (code === 47)
          break;
        code = 47;
      }
      if (code === 47) {
        if (!(lastSlash === i - 1 || dots === 1))
          if (lastSlash !== i - 1 && dots === 2) {
            if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
              if (res.length > 2) {
                var lastSlashIndex = res.lastIndexOf("/");
                if (lastSlashIndex !== res.length - 1) {
                  lastSlashIndex === -1 ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = i, dots = 0;
                  continue;
                }
              } else if (res.length === 2 || res.length === 1) {
                res = "", lastSegmentLength = 0, lastSlash = i, dots = 0;
                continue;
              }
            }
            allowAboveRoot && (res.length > 0 ? res += "/.." : res = "..", lastSegmentLength = 2);
          } else
            res.length > 0 ? res += "/" + path7.slice(lastSlash + 1, i) : res = path7.slice(lastSlash + 1, i), lastSegmentLength = i - lastSlash - 1;
        lastSlash = i, dots = 0;
      } else
        code === 46 && dots !== -1 ? ++dots : dots = -1;
    }
    return res;
  }
  function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root, base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    return dir ? dir === pathObject.root ? dir + base : dir + sep + base : base;
  }
  var posix = {
    resolve: function() {
      for (var resolvedPath = "", resolvedAbsolute = !1, cwd, i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path7;
        i >= 0 ? path7 = arguments[i] : (cwd === void 0 && (cwd = process.cwd()), path7 = cwd), assertPath(path7), path7.length !== 0 && (resolvedPath = path7 + "/" + resolvedPath, resolvedAbsolute = path7.charCodeAt(0) === 47);
      }
      return resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute), resolvedAbsolute ? resolvedPath.length > 0 ? "/" + resolvedPath : "/" : resolvedPath.length > 0 ? resolvedPath : ".";
    },
    normalize: function(path7) {
      if (assertPath(path7), path7.length === 0)
        return ".";
      var isAbsolute3 = path7.charCodeAt(0) === 47, trailingSeparator = path7.charCodeAt(path7.length - 1) === 47;
      return path7 = normalizeStringPosix(path7, !isAbsolute3), path7.length === 0 && !isAbsolute3 && (path7 = "."), path7.length > 0 && trailingSeparator && (path7 += "/"), isAbsolute3 ? "/" + path7 : path7;
    },
    isAbsolute: function(path7) {
      return assertPath(path7), path7.length > 0 && path7.charCodeAt(0) === 47;
    },
    join: function() {
      if (arguments.length === 0)
        return ".";
      for (var joined, i = 0; i < arguments.length; ++i) {
        var arg = arguments[i];
        assertPath(arg), arg.length > 0 && (joined === void 0 ? joined = arg : joined += "/" + arg);
      }
      return joined === void 0 ? "." : posix.normalize(joined);
    },
    relative: function(from, to) {
      if (assertPath(from), assertPath(to), from === to || (from = posix.resolve(from), to = posix.resolve(to), from === to))
        return "";
      for (var fromStart = 1; fromStart < from.length && from.charCodeAt(fromStart) === 47; ++fromStart)
        ;
      for (var fromEnd = from.length, fromLen = fromEnd - fromStart, toStart = 1; toStart < to.length && to.charCodeAt(toStart) === 47; ++toStart)
        ;
      for (var toEnd = to.length, toLen = toEnd - toStart, length = fromLen < toLen ? fromLen : toLen, lastCommonSep = -1, i = 0; i <= length; ++i) {
        if (i === length) {
          if (toLen > length) {
            if (to.charCodeAt(toStart + i) === 47)
              return to.slice(toStart + i + 1);
            if (i === 0)
              return to.slice(toStart + i);
          } else
            fromLen > length && (from.charCodeAt(fromStart + i) === 47 ? lastCommonSep = i : i === 0 && (lastCommonSep = 0));
          break;
        }
        var fromCode = from.charCodeAt(fromStart + i), toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode)
          break;
        fromCode === 47 && (lastCommonSep = i);
      }
      var out = "";
      for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i)
        (i === fromEnd || from.charCodeAt(i) === 47) && (out.length === 0 ? out += ".." : out += "/..");
      return out.length > 0 ? out + to.slice(toStart + lastCommonSep) : (toStart += lastCommonSep, to.charCodeAt(toStart) === 47 && ++toStart, to.slice(toStart));
    },
    _makeLong: function(path7) {
      return path7;
    },
    dirname: function(path7) {
      if (assertPath(path7), path7.length === 0)
        return ".";
      for (var code = path7.charCodeAt(0), hasRoot = code === 47, end = -1, matchedSlash = !0, i = path7.length - 1; i >= 1; --i)
        if (code = path7.charCodeAt(i), code === 47) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else
          matchedSlash = !1;
      return end === -1 ? hasRoot ? "/" : "." : hasRoot && end === 1 ? "//" : path7.slice(0, end);
    },
    basename: function(path7, ext) {
      if (ext !== void 0 && typeof ext != "string")
        throw new TypeError('"ext" argument must be a string');
      assertPath(path7);
      var start = 0, end = -1, matchedSlash = !0, i;
      if (ext !== void 0 && ext.length > 0 && ext.length <= path7.length) {
        if (ext.length === path7.length && ext === path7)
          return "";
        var extIdx = ext.length - 1, firstNonSlashEnd = -1;
        for (i = path7.length - 1; i >= 0; --i) {
          var code = path7.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else
            firstNonSlashEnd === -1 && (matchedSlash = !1, firstNonSlashEnd = i + 1), extIdx >= 0 && (code === ext.charCodeAt(extIdx) ? --extIdx == -1 && (end = i) : (extIdx = -1, end = firstNonSlashEnd));
        }
        return start === end ? end = firstNonSlashEnd : end === -1 && (end = path7.length), path7.slice(start, end);
      } else {
        for (i = path7.length - 1; i >= 0; --i)
          if (path7.charCodeAt(i) === 47) {
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else
            end === -1 && (matchedSlash = !1, end = i + 1);
        return end === -1 ? "" : path7.slice(start, end);
      }
    },
    extname: function(path7) {
      assertPath(path7);
      for (var startDot = -1, startPart = 0, end = -1, matchedSlash = !0, preDotState = 0, i = path7.length - 1; i >= 0; --i) {
        var code = path7.charCodeAt(i);
        if (code === 47) {
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
        end === -1 && (matchedSlash = !1, end = i + 1), code === 46 ? startDot === -1 ? startDot = i : preDotState !== 1 && (preDotState = 1) : startDot !== -1 && (preDotState = -1);
      }
      return startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1 ? "" : path7.slice(startDot, end);
    },
    format: function(pathObject) {
      if (pathObject === null || typeof pathObject != "object")
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
      return _format("/", pathObject);
    },
    parse: function(path7) {
      assertPath(path7);
      var ret = {root: "", dir: "", base: "", ext: "", name: ""};
      if (path7.length === 0)
        return ret;
      var code = path7.charCodeAt(0), isAbsolute3 = code === 47, start;
      isAbsolute3 ? (ret.root = "/", start = 1) : start = 0;
      for (var startDot = -1, startPart = 0, end = -1, matchedSlash = !0, i = path7.length - 1, preDotState = 0; i >= start; --i) {
        if (code = path7.charCodeAt(i), code === 47) {
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
        end === -1 && (matchedSlash = !1, end = i + 1), code === 46 ? startDot === -1 ? startDot = i : preDotState !== 1 && (preDotState = 1) : startDot !== -1 && (preDotState = -1);
      }
      return startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1 ? end !== -1 && (startPart === 0 && isAbsolute3 ? ret.base = ret.name = path7.slice(1, end) : ret.base = ret.name = path7.slice(startPart, end)) : (startPart === 0 && isAbsolute3 ? (ret.name = path7.slice(1, startDot), ret.base = path7.slice(1, end)) : (ret.name = path7.slice(startPart, startDot), ret.base = path7.slice(startPart, end)), ret.ext = path7.slice(startDot, end)), startPart > 0 ? ret.dir = path7.slice(0, startPart - 1) : isAbsolute3 && (ret.dir = "/"), ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
  };
  posix.posix = posix;
  module.exports = posix;
});

// node_modules/.pnpm/esbuild-wasm@0.9.0/node_modules/esbuild-wasm/lib/browser.js
var require_browser = __commonJS((exports) => {
  ((exports2) => {
    var __defProp2 = Object.defineProperty, __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: !0}), __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, {get: all[name], enumerable: !0});
    }, __async = (__this, __arguments, generator) => new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }, rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      }, step = (result) => result.done ? resolve(result.value) : Promise.resolve(result.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
    __markAsModule2(exports2), __export2(exports2, {
      build: () => build2,
      buildSync: () => buildSync,
      initialize: () => initialize,
      serve: () => serve,
      transform: () => transform,
      transformSync: () => transformSync,
      version: () => version
    });
    function encodePacket(packet) {
      let visit = (value) => {
        if (value === null)
          bb.write8(0);
        else if (typeof value == "boolean")
          bb.write8(1), bb.write8(+value);
        else if (typeof value == "number")
          bb.write8(2), bb.write32(value | 0);
        else if (typeof value == "string")
          bb.write8(3), bb.write(encodeUTF8(value));
        else if (value instanceof Uint8Array)
          bb.write8(4), bb.write(value);
        else if (value instanceof Array) {
          bb.write8(5), bb.write32(value.length);
          for (let item of value)
            visit(item);
        } else {
          let keys2 = Object.keys(value);
          bb.write8(6), bb.write32(keys2.length);
          for (let key of keys2)
            bb.write(encodeUTF8(key)), visit(value[key]);
        }
      }, bb = new ByteBuffer();
      return bb.write32(0), bb.write32(packet.id << 1 | +!packet.isRequest), visit(packet.value), writeUInt32LE(bb.buf, bb.len - 4, 0), bb.buf.subarray(0, bb.len);
    }
    function decodePacket(bytes) {
      let visit = () => {
        switch (bb.read8()) {
          case 0:
            return null;
          case 1:
            return !!bb.read8();
          case 2:
            return bb.read32();
          case 3:
            return decodeUTF8(bb.read());
          case 4:
            return bb.read();
          case 5: {
            let count = bb.read32(), value2 = [];
            for (let i = 0; i < count; i++)
              value2.push(visit());
            return value2;
          }
          case 6: {
            let count = bb.read32(), value2 = {};
            for (let i = 0; i < count; i++)
              value2[decodeUTF8(bb.read())] = visit();
            return value2;
          }
          default:
            throw new Error("Invalid packet");
        }
      }, bb = new ByteBuffer(bytes), id = bb.read32(), isRequest = (id & 1) == 0;
      id >>>= 1;
      let value = visit();
      if (bb.ptr !== bytes.length)
        throw new Error("Invalid packet");
      return {id, isRequest, value};
    }
    var ByteBuffer = class {
      constructor(buf = new Uint8Array(1024)) {
        this.buf = buf, this.len = 0, this.ptr = 0;
      }
      _write(delta) {
        if (this.len + delta > this.buf.length) {
          let clone = new Uint8Array((this.len + delta) * 2);
          clone.set(this.buf), this.buf = clone;
        }
        return this.len += delta, this.len - delta;
      }
      write8(value) {
        let offset = this._write(1);
        this.buf[offset] = value;
      }
      write32(value) {
        let offset = this._write(4);
        writeUInt32LE(this.buf, value, offset);
      }
      write(bytes) {
        let offset = this._write(4 + bytes.length);
        writeUInt32LE(this.buf, bytes.length, offset), this.buf.set(bytes, offset + 4);
      }
      _read(delta) {
        if (this.ptr + delta > this.buf.length)
          throw new Error("Invalid packet");
        return this.ptr += delta, this.ptr - delta;
      }
      read8() {
        return this.buf[this._read(1)];
      }
      read32() {
        return readUInt32LE(this.buf, this._read(4));
      }
      read() {
        let length = this.read32(), bytes = new Uint8Array(length), ptr = this._read(bytes.length);
        return bytes.set(this.buf.subarray(ptr, ptr + length)), bytes;
      }
    }, encodeUTF8, decodeUTF8;
    if (typeof TextEncoder != "undefined" && typeof TextDecoder != "undefined") {
      let encoder = new TextEncoder(), decoder = new TextDecoder();
      encodeUTF8 = (text) => encoder.encode(text), decodeUTF8 = (bytes) => decoder.decode(bytes);
    } else if (typeof Buffer != "undefined")
      encodeUTF8 = (text) => {
        let buffer = Buffer.from(text);
        return buffer instanceof Uint8Array || (buffer = new Uint8Array(buffer)), buffer;
      }, decodeUTF8 = (bytes) => Buffer.from(bytes).toString();
    else
      throw new Error("No UTF-8 codec found");
    function readUInt32LE(buffer, offset) {
      return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
    }
    function writeUInt32LE(buffer, value, offset) {
      buffer[offset++] = value, buffer[offset++] = value >> 8, buffer[offset++] = value >> 16, buffer[offset++] = value >> 24;
    }
    function validateTarget(target) {
      if (target += "", target.indexOf(",") >= 0)
        throw new Error(`Invalid target: ${target}`);
      return target;
    }
    var canBeAnything = () => null, mustBeBoolean = (value) => typeof value == "boolean" ? null : "a boolean", mustBeBooleanOrObject = (value) => typeof value == "boolean" || typeof value == "object" && !Array.isArray(value) ? null : "a boolean or an object", mustBeString = (value) => typeof value == "string" ? null : "a string", mustBeRegExp = (value) => value instanceof RegExp ? null : "a RegExp object", mustBeInteger = (value) => typeof value == "number" && value === (value | 0) ? null : "an integer", mustBeFunction = (value) => typeof value == "function" ? null : "a function", mustBeArray = (value) => Array.isArray(value) ? null : "an array", mustBeObject = (value) => typeof value == "object" && value !== null && !Array.isArray(value) ? null : "an object", mustBeObjectOrNull = (value) => typeof value == "object" && !Array.isArray(value) ? null : "an object or null", mustBeStringOrBoolean = (value) => typeof value == "string" || typeof value == "boolean" ? null : "a string or a boolean", mustBeStringOrObject = (value) => typeof value == "string" || typeof value == "object" && value !== null && !Array.isArray(value) ? null : "a string or an object", mustBeStringOrArray = (value) => typeof value == "string" || Array.isArray(value) ? null : "a string or an array", mustBeStringOrUint8Array = (value) => typeof value == "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array";
    function getFlag(object, keys2, key, mustBeFn) {
      let value = object[key];
      if (keys2[key + ""] = !0, value === void 0)
        return;
      let mustBe = mustBeFn(value);
      if (mustBe !== null)
        throw new Error(`"${key}" must be ${mustBe}`);
      return value;
    }
    function checkForInvalidFlags(object, keys2, where) {
      for (let key in object)
        if (!(key in keys2))
          throw new Error(`Invalid option ${where}: "${key}"`);
    }
    function validateInitializeOptions(options) {
      let keys2 = Object.create(null), wasmURL = getFlag(options, keys2, "wasmURL", mustBeString), worker = getFlag(options, keys2, "worker", mustBeBoolean);
      return checkForInvalidFlags(options, keys2, "in startService() call"), {
        wasmURL,
        worker
      };
    }
    function pushLogFlags(flags, options, keys2, isTTY, logLevelDefault) {
      let color = getFlag(options, keys2, "color", mustBeBoolean), logLevel = getFlag(options, keys2, "logLevel", mustBeString), logLimit = getFlag(options, keys2, "logLimit", mustBeInteger);
      color ? flags.push(`--color=${color}`) : isTTY && flags.push("--color=true"), flags.push(`--log-level=${logLevel || logLevelDefault}`), flags.push(`--log-limit=${logLimit || 0}`);
    }
    function pushCommonFlags(flags, options, keys2) {
      let sourcesContent = getFlag(options, keys2, "sourcesContent", mustBeBoolean), target = getFlag(options, keys2, "target", mustBeStringOrArray), format = getFlag(options, keys2, "format", mustBeString), globalName = getFlag(options, keys2, "globalName", mustBeString), minify = getFlag(options, keys2, "minify", mustBeBoolean), minifySyntax = getFlag(options, keys2, "minifySyntax", mustBeBoolean), minifyWhitespace = getFlag(options, keys2, "minifyWhitespace", mustBeBoolean), minifyIdentifiers = getFlag(options, keys2, "minifyIdentifiers", mustBeBoolean), charset = getFlag(options, keys2, "charset", mustBeString), treeShaking = getFlag(options, keys2, "treeShaking", mustBeStringOrBoolean), jsxFactory = getFlag(options, keys2, "jsxFactory", mustBeString), jsxFragment = getFlag(options, keys2, "jsxFragment", mustBeString), define = getFlag(options, keys2, "define", mustBeObject), pure = getFlag(options, keys2, "pure", mustBeArray), keepNames = getFlag(options, keys2, "keepNames", mustBeBoolean);
      if (sourcesContent !== void 0 && flags.push(`--sources-content=${sourcesContent}`), target && (Array.isArray(target) ? flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`) : flags.push(`--target=${validateTarget(target)}`)), format && flags.push(`--format=${format}`), globalName && flags.push(`--global-name=${globalName}`), minify && flags.push("--minify"), minifySyntax && flags.push("--minify-syntax"), minifyWhitespace && flags.push("--minify-whitespace"), minifyIdentifiers && flags.push("--minify-identifiers"), charset && flags.push(`--charset=${charset}`), treeShaking !== void 0 && treeShaking !== !0 && flags.push(`--tree-shaking=${treeShaking}`), jsxFactory && flags.push(`--jsx-factory=${jsxFactory}`), jsxFragment && flags.push(`--jsx-fragment=${jsxFragment}`), define)
        for (let key in define) {
          if (key.indexOf("=") >= 0)
            throw new Error(`Invalid define: ${key}`);
          flags.push(`--define:${key}=${define[key]}`);
        }
      if (pure)
        for (let fn of pure)
          flags.push(`--pure:${fn}`);
      keepNames && flags.push("--keep-names");
    }
    function flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault) {
      var _a;
      let flags = [], keys2 = Object.create(null), stdinContents = null, stdinResolveDir = null, watchMode = null;
      pushLogFlags(flags, options, keys2, isTTY, logLevelDefault), pushCommonFlags(flags, options, keys2);
      let sourcemap = getFlag(options, keys2, "sourcemap", mustBeStringOrBoolean), bundle = getFlag(options, keys2, "bundle", mustBeBoolean), watch = getFlag(options, keys2, "watch", mustBeBooleanOrObject), splitting = getFlag(options, keys2, "splitting", mustBeBoolean), preserveSymlinks = getFlag(options, keys2, "preserveSymlinks", mustBeBoolean), metafile = getFlag(options, keys2, "metafile", mustBeBoolean), outfile = getFlag(options, keys2, "outfile", mustBeString), outdir = getFlag(options, keys2, "outdir", mustBeString), outbase = getFlag(options, keys2, "outbase", mustBeString), platform = getFlag(options, keys2, "platform", mustBeString), tsconfig = getFlag(options, keys2, "tsconfig", mustBeString), resolveExtensions = getFlag(options, keys2, "resolveExtensions", mustBeArray), nodePathsInput = getFlag(options, keys2, "nodePaths", mustBeArray), mainFields = getFlag(options, keys2, "mainFields", mustBeArray), conditions = getFlag(options, keys2, "conditions", mustBeArray), external = getFlag(options, keys2, "external", mustBeArray), loader = getFlag(options, keys2, "loader", mustBeObject), outExtension = getFlag(options, keys2, "outExtension", mustBeObject), publicPath = getFlag(options, keys2, "publicPath", mustBeString), chunkNames = getFlag(options, keys2, "chunkNames", mustBeString), assetNames = getFlag(options, keys2, "assetNames", mustBeString), inject = getFlag(options, keys2, "inject", mustBeArray), banner = getFlag(options, keys2, "banner", mustBeObject), footer = getFlag(options, keys2, "footer", mustBeObject), entryPoints = getFlag(options, keys2, "entryPoints", mustBeArray), absWorkingDir = getFlag(options, keys2, "absWorkingDir", mustBeString), stdin = getFlag(options, keys2, "stdin", mustBeObject), write = (_a = getFlag(options, keys2, "write", mustBeBoolean)) != null ? _a : writeDefault, incremental = getFlag(options, keys2, "incremental", mustBeBoolean) === !0, plugins = getFlag(options, keys2, "plugins", mustBeArray);
      if (checkForInvalidFlags(options, keys2, `in ${callName}() call`), sourcemap && flags.push(`--sourcemap${sourcemap === !0 ? "" : `=${sourcemap}`}`), bundle && flags.push("--bundle"), watch)
        if (flags.push("--watch"), typeof watch == "boolean")
          watchMode = {};
        else {
          let watchKeys = Object.create(null), onRebuild = getFlag(watch, watchKeys, "onRebuild", mustBeFunction);
          checkForInvalidFlags(watch, watchKeys, `on "watch" in ${callName}() call`), watchMode = {onRebuild};
        }
      if (splitting && flags.push("--splitting"), preserveSymlinks && flags.push("--preserve-symlinks"), metafile && flags.push("--metafile"), outfile && flags.push(`--outfile=${outfile}`), outdir && flags.push(`--outdir=${outdir}`), outbase && flags.push(`--outbase=${outbase}`), platform && flags.push(`--platform=${platform}`), tsconfig && flags.push(`--tsconfig=${tsconfig}`), resolveExtensions) {
        let values = [];
        for (let value of resolveExtensions) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid resolve extension: ${value}`);
          values.push(value);
        }
        flags.push(`--resolve-extensions=${values.join(",")}`);
      }
      if (publicPath && flags.push(`--public-path=${publicPath}`), chunkNames && flags.push(`--chunk-names=${chunkNames}`), assetNames && flags.push(`--asset-names=${assetNames}`), mainFields) {
        let values = [];
        for (let value of mainFields) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid main field: ${value}`);
          values.push(value);
        }
        flags.push(`--main-fields=${values.join(",")}`);
      }
      if (conditions) {
        let values = [];
        for (let value of conditions) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid condition: ${value}`);
          values.push(value);
        }
        flags.push(`--conditions=${values.join(",")}`);
      }
      if (external)
        for (let name of external)
          flags.push(`--external:${name}`);
      if (banner)
        for (let type in banner) {
          if (type.indexOf("=") >= 0)
            throw new Error(`Invalid banner file type: ${type}`);
          flags.push(`--banner:${type}=${banner[type]}`);
        }
      if (footer)
        for (let type in footer) {
          if (type.indexOf("=") >= 0)
            throw new Error(`Invalid footer file type: ${type}`);
          flags.push(`--footer:${type}=${footer[type]}`);
        }
      if (inject)
        for (let path7 of inject)
          flags.push(`--inject:${path7}`);
      if (loader)
        for (let ext in loader) {
          if (ext.indexOf("=") >= 0)
            throw new Error(`Invalid loader extension: ${ext}`);
          flags.push(`--loader:${ext}=${loader[ext]}`);
        }
      if (outExtension)
        for (let ext in outExtension) {
          if (ext.indexOf("=") >= 0)
            throw new Error(`Invalid out extension: ${ext}`);
          flags.push(`--out-extension:${ext}=${outExtension[ext]}`);
        }
      if (entryPoints)
        for (let entryPoint of entryPoints) {
          if (entryPoint += "", entryPoint.startsWith("-"))
            throw new Error(`Invalid entry point: ${entryPoint}`);
          flags.push(entryPoint);
        }
      if (stdin) {
        let stdinKeys = Object.create(null), contents = getFlag(stdin, stdinKeys, "contents", mustBeString), resolveDir = getFlag(stdin, stdinKeys, "resolveDir", mustBeString), sourcefile = getFlag(stdin, stdinKeys, "sourcefile", mustBeString), loader2 = getFlag(stdin, stdinKeys, "loader", mustBeString);
        checkForInvalidFlags(stdin, stdinKeys, 'in "stdin" object'), sourcefile && flags.push(`--sourcefile=${sourcefile}`), loader2 && flags.push(`--loader=${loader2}`), resolveDir && (stdinResolveDir = resolveDir + ""), stdinContents = contents ? contents + "" : "";
      }
      let nodePaths = [];
      if (nodePathsInput)
        for (let value of nodePathsInput)
          value += "", nodePaths.push(value);
      return {
        flags,
        write,
        plugins,
        stdinContents,
        stdinResolveDir,
        absWorkingDir,
        incremental,
        nodePaths,
        watch: watchMode
      };
    }
    function flagsForTransformOptions(callName, options, isTTY, logLevelDefault) {
      let flags = [], keys2 = Object.create(null);
      pushLogFlags(flags, options, keys2, isTTY, logLevelDefault), pushCommonFlags(flags, options, keys2);
      let sourcemap = getFlag(options, keys2, "sourcemap", mustBeStringOrBoolean), tsconfigRaw = getFlag(options, keys2, "tsconfigRaw", mustBeStringOrObject), sourcefile = getFlag(options, keys2, "sourcefile", mustBeString), loader = getFlag(options, keys2, "loader", mustBeString), banner = getFlag(options, keys2, "banner", mustBeString), footer = getFlag(options, keys2, "footer", mustBeString);
      return checkForInvalidFlags(options, keys2, `in ${callName}() call`), sourcemap && flags.push(`--sourcemap=${sourcemap === !0 ? "external" : sourcemap}`), tsconfigRaw && flags.push(`--tsconfig-raw=${typeof tsconfigRaw == "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`), sourcefile && flags.push(`--sourcefile=${sourcefile}`), loader && flags.push(`--loader=${loader}`), banner && flags.push(`--banner=${banner}`), footer && flags.push(`--footer=${footer}`), flags;
    }
    function createChannel(streamIn) {
      let responseCallbacks = new Map(), pluginCallbacks = new Map(), watchCallbacks = new Map(), serveCallbacks = new Map(), nextServeID = 0, isClosed = !1, nextRequestID = 0, nextBuildKey = 0, stdout = new Uint8Array(16 * 1024), stdoutUsed = 0, readFromStdout = (chunk) => {
        let limit = stdoutUsed + chunk.length;
        if (limit > stdout.length) {
          let swap = new Uint8Array(limit * 2);
          swap.set(stdout), stdout = swap;
        }
        stdout.set(chunk, stdoutUsed), stdoutUsed += chunk.length;
        let offset = 0;
        for (; offset + 4 <= stdoutUsed; ) {
          let length = readUInt32LE(stdout, offset);
          if (offset + 4 + length > stdoutUsed)
            break;
          offset += 4, handleIncomingPacket(stdout.slice(offset, offset + length)), offset += length;
        }
        offset > 0 && (stdout.set(stdout.slice(offset)), stdoutUsed -= offset);
      }, afterClose = () => {
        isClosed = !0;
        for (let callback of responseCallbacks.values())
          callback("The service was stopped", null);
        responseCallbacks.clear();
        for (let callbacks of serveCallbacks.values())
          callbacks.onWait("The service was stopped");
        serveCallbacks.clear();
        for (let callback of watchCallbacks.values())
          try {
            callback(new Error("The service was stopped"), null);
          } catch (e) {
            console.error(e);
          }
        watchCallbacks.clear();
      }, sendRequest = (refs, value, callback) => {
        if (isClosed)
          return callback("The service is no longer running", null);
        let id = nextRequestID++;
        responseCallbacks.set(id, (error, response) => {
          try {
            callback(error, response);
          } finally {
            refs && refs.unref();
          }
        }), refs && refs.ref(), streamIn.writeToStdin(encodePacket({id, isRequest: !0, value}));
      }, sendResponse = (id, value) => {
        if (isClosed)
          throw new Error("The service is no longer running");
        streamIn.writeToStdin(encodePacket({id, isRequest: !1, value}));
      }, handleRequest = (id, request) => __async(this, null, function* () {
        try {
          switch (request.command) {
            case "ping": {
              sendResponse(id, {});
              break;
            }
            case "resolve": {
              let callback = pluginCallbacks.get(request.key);
              callback ? sendResponse(id, yield callback(request)) : sendResponse(id, {});
              break;
            }
            case "load": {
              let callback = pluginCallbacks.get(request.key);
              callback ? sendResponse(id, yield callback(request)) : sendResponse(id, {});
              break;
            }
            case "serve-request": {
              let callbacks = serveCallbacks.get(request.serveID);
              callbacks && callbacks.onRequest && callbacks.onRequest(request.args), sendResponse(id, {});
              break;
            }
            case "serve-wait": {
              let callbacks = serveCallbacks.get(request.serveID);
              callbacks && callbacks.onWait(request.error), sendResponse(id, {});
              break;
            }
            case "watch-rebuild": {
              let callback = watchCallbacks.get(request.watchID);
              try {
                callback && callback(null, request.args);
              } catch (err) {
                console.error(err);
              }
              sendResponse(id, {});
              break;
            }
            default:
              throw new Error("Invalid command: " + request.command);
          }
        } catch (e) {
          sendResponse(id, {errors: [extractErrorMessageV8(e, streamIn, null, void 0)]});
        }
      }), isFirstPacket = !0, handleIncomingPacket = (bytes) => {
        if (isFirstPacket) {
          isFirstPacket = !1;
          let binaryVersion = String.fromCharCode(...bytes);
          if (binaryVersion !== "0.9.0")
            throw new Error(`Cannot start service: Host version "0.9.0" does not match binary version ${JSON.stringify(binaryVersion)}`);
          return;
        }
        let packet = decodePacket(bytes);
        if (packet.isRequest)
          handleRequest(packet.id, packet.value);
        else {
          let callback = responseCallbacks.get(packet.id);
          responseCallbacks.delete(packet.id), packet.value.error ? callback(packet.value.error, {}) : callback(null, packet.value);
        }
      }, handlePlugins = (plugins, request, buildKey, stash) => {
        if (streamIn.isSync)
          throw new Error("Cannot use plugins in synchronous API calls");
        let onResolveCallbacks = {}, onLoadCallbacks = {}, nextCallbackID = 0, i = 0;
        request.plugins = [];
        for (let item of plugins) {
          let keys2 = {};
          if (typeof item != "object")
            throw new Error(`Plugin at index ${i} must be an object`);
          let name = getFlag(item, keys2, "name", mustBeString), setup = getFlag(item, keys2, "setup", mustBeFunction);
          if (typeof name != "string" || name === "")
            throw new Error(`Plugin at index ${i} is missing a name`);
          if (typeof setup != "function")
            throw new Error(`[${name}] Plugin is missing a setup function`);
          checkForInvalidFlags(item, keys2, `on plugin ${JSON.stringify(name)}`);
          let plugin = {
            name,
            onResolve: [],
            onLoad: []
          };
          i++, setup({
            onResolve(options, callback2) {
              let registeredText = 'This error came from the "onResolve" callback registered here', registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onResolve"), keys22 = {}, filter = getFlag(options, keys22, "filter", mustBeRegExp), namespace = getFlag(options, keys22, "namespace", mustBeString);
              if (checkForInvalidFlags(options, keys22, `in onResolve() call for plugin ${JSON.stringify(name)}`), filter == null)
                throw new Error(`[${plugin.name}] onResolve() call is missing a filter`);
              let id = nextCallbackID++;
              onResolveCallbacks[id] = {name, callback: callback2, note: registeredNote}, plugin.onResolve.push({id, filter: filter.source, namespace: namespace || ""});
            },
            onLoad(options, callback2) {
              let registeredText = 'This error came from the "onLoad" callback registered here', registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onLoad"), keys22 = {}, filter = getFlag(options, keys22, "filter", mustBeRegExp), namespace = getFlag(options, keys22, "namespace", mustBeString);
              if (checkForInvalidFlags(options, keys22, `in onLoad() call for plugin ${JSON.stringify(name)}`), filter == null)
                throw new Error(`[${plugin.name}] onLoad() call is missing a filter`);
              let id = nextCallbackID++;
              onLoadCallbacks[id] = {name, callback: callback2, note: registeredNote}, plugin.onLoad.push({id, filter: filter.source, namespace: namespace || ""});
            }
          }), request.plugins.push(plugin);
        }
        let callback = (request2) => __async(this, null, function* () {
          switch (request2.command) {
            case "resolve": {
              let response = {}, name, callback2, note;
              for (let id of request2.ids)
                try {
                  ({name, callback: callback2, note} = onResolveCallbacks[id]);
                  let result = yield callback2({
                    path: request2.path,
                    importer: request2.importer,
                    namespace: request2.namespace,
                    resolveDir: request2.resolveDir,
                    kind: request2.kind,
                    pluginData: stash.load(request2.pluginData)
                  });
                  if (result != null) {
                    if (typeof result != "object")
                      throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);
                    let keys2 = {}, pluginName = getFlag(result, keys2, "pluginName", mustBeString), path7 = getFlag(result, keys2, "path", mustBeString), namespace = getFlag(result, keys2, "namespace", mustBeString), external = getFlag(result, keys2, "external", mustBeBoolean), pluginData = getFlag(result, keys2, "pluginData", canBeAnything), errors = getFlag(result, keys2, "errors", mustBeArray), warnings = getFlag(result, keys2, "warnings", mustBeArray);
                    checkForInvalidFlags(result, keys2, `from onResolve() callback in plugin ${JSON.stringify(name)}`), response.id = id, pluginName != null && (response.pluginName = pluginName), path7 != null && (response.path = path7), namespace != null && (response.namespace = namespace), external != null && (response.external = external), pluginData != null && (response.pluginData = stash.store(pluginData)), errors != null && (response.errors = sanitizeMessages(errors, "errors", stash)), warnings != null && (response.warnings = sanitizeMessages(warnings, "warnings", stash));
                    break;
                  }
                } catch (e) {
                  return {id, errors: [extractErrorMessageV8(e, streamIn, stash, note)]};
                }
              return response;
            }
            case "load": {
              let response = {}, name, callback2, note;
              for (let id of request2.ids)
                try {
                  ({name, callback: callback2, note} = onLoadCallbacks[id]);
                  let result = yield callback2({
                    path: request2.path,
                    namespace: request2.namespace,
                    pluginData: stash.load(request2.pluginData)
                  });
                  if (result != null) {
                    if (typeof result != "object")
                      throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);
                    let keys2 = {}, pluginName = getFlag(result, keys2, "pluginName", mustBeString), contents = getFlag(result, keys2, "contents", mustBeStringOrUint8Array), resolveDir = getFlag(result, keys2, "resolveDir", mustBeString), pluginData = getFlag(result, keys2, "pluginData", canBeAnything), loader = getFlag(result, keys2, "loader", mustBeString), errors = getFlag(result, keys2, "errors", mustBeArray), warnings = getFlag(result, keys2, "warnings", mustBeArray);
                    checkForInvalidFlags(result, keys2, `from onLoad() callback in plugin ${JSON.stringify(name)}`), response.id = id, pluginName != null && (response.pluginName = pluginName), contents instanceof Uint8Array ? response.contents = contents : contents != null && (response.contents = encodeUTF8(contents)), resolveDir != null && (response.resolveDir = resolveDir), pluginData != null && (response.pluginData = stash.store(pluginData)), loader != null && (response.loader = loader), errors != null && (response.errors = sanitizeMessages(errors, "errors", stash)), warnings != null && (response.warnings = sanitizeMessages(warnings, "warnings", stash));
                    break;
                  }
                } catch (e) {
                  return {id, errors: [extractErrorMessageV8(e, streamIn, stash, note)]};
                }
              return response;
            }
            default:
              throw new Error("Invalid command: " + request2.command);
          }
        }), refCount = 0;
        return {
          ref() {
            ++refCount == 1 && pluginCallbacks.set(buildKey, callback);
          },
          unref() {
            --refCount == 0 && pluginCallbacks.delete(buildKey);
          }
        };
      }, buildServeData = (refs, options, request) => {
        let keys2 = {}, port = getFlag(options, keys2, "port", mustBeInteger), host = getFlag(options, keys2, "host", mustBeString), servedir = getFlag(options, keys2, "servedir", mustBeString), onRequest = getFlag(options, keys2, "onRequest", mustBeFunction), serveID = nextServeID++, onWait, wait = new Promise((resolve, reject) => {
          onWait = (error) => {
            serveCallbacks.delete(serveID), error !== null ? reject(new Error(error)) : resolve();
          };
        });
        return request.serve = {serveID}, checkForInvalidFlags(options, keys2, "in serve() call"), port !== void 0 && (request.serve.port = port), host !== void 0 && (request.serve.host = host), servedir !== void 0 && (request.serve.servedir = servedir), serveCallbacks.set(serveID, {
          onRequest,
          onWait
        }), {
          wait,
          stop() {
            sendRequest(refs, {command: "serve-stop", serveID}, () => {
            });
          }
        };
      };
      return {
        readFromStdout,
        afterClose,
        service: {
          buildOrServe(callName, callerRefs, serveOptions, options, isTTY, defaultWD, callback) {
            let pluginRefs, details = createObjectStash(), logLevelDefault = "warning", refs = {
              ref() {
                pluginRefs && pluginRefs.ref(), callerRefs && callerRefs.ref();
              },
              unref() {
                pluginRefs && pluginRefs.unref(), callerRefs && callerRefs.unref();
              }
            };
            try {
              let key = nextBuildKey++, writeDefault = !streamIn.isBrowser, {
                flags,
                write,
                plugins,
                stdinContents,
                stdinResolveDir,
                absWorkingDir,
                incremental,
                nodePaths,
                watch
              } = flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault), request = {
                command: "build",
                key,
                flags,
                write,
                stdinContents,
                stdinResolveDir,
                absWorkingDir: absWorkingDir || defaultWD,
                incremental,
                nodePaths,
                hasOnRebuild: !!(watch && watch.onRebuild)
              }, serve2 = serveOptions && buildServeData(refs, serveOptions, request);
              plugins && plugins.length > 0 && (pluginRefs = handlePlugins(plugins, request, key, details));
              let rebuild, stop, buildResponseToResult = (response, callback2) => {
                let errors = replaceDetailsInMessages(response.errors, details), warnings = replaceDetailsInMessages(response.warnings, details);
                if (errors.length > 0)
                  return callback2(failureErrorWithLog("Build failed", errors, warnings), null);
                let result = {warnings};
                if (response.outputFiles && (result.outputFiles = response.outputFiles.map(convertOutputFiles)), response.metafile && (result.metafile = JSON.parse(response.metafile)), response.writeToStdout !== void 0 && console.log(decodeUTF8(response.writeToStdout).replace(/\n$/, "")), response.rebuildID !== void 0) {
                  if (!rebuild) {
                    let isDisposed = !1;
                    rebuild = () => new Promise((resolve, reject) => {
                      if (isDisposed || isClosed)
                        throw new Error("Cannot rebuild");
                      sendRequest(refs, {command: "rebuild", rebuildID: response.rebuildID}, (error2, response2) => {
                        if (error2)
                          return callback2(new Error(error2), null);
                        buildResponseToResult(response2, (error3, result3) => {
                          error3 ? reject(error3) : resolve(result3);
                        });
                      });
                    }), refs.ref(), rebuild.dispose = () => {
                      isDisposed || (isDisposed = !0, sendRequest(refs, {command: "rebuild-dispose", rebuildID: response.rebuildID}, () => {
                      }), refs.unref());
                    };
                  }
                  result.rebuild = rebuild;
                }
                if (response.watchID !== void 0) {
                  if (!stop) {
                    let isStopped = !1;
                    refs.ref(), stop = () => {
                      isStopped || (isStopped = !0, watchCallbacks.delete(response.watchID), sendRequest(refs, {command: "watch-stop", watchID: response.watchID}, () => {
                      }), refs.unref());
                    }, watch && watch.onRebuild && watchCallbacks.set(response.watchID, (serviceStopError, watchResponse) => {
                      if (serviceStopError)
                        return watch.onRebuild(serviceStopError, null);
                      let errors2 = replaceDetailsInMessages(watchResponse.errors, details), warnings2 = replaceDetailsInMessages(watchResponse.warnings, details);
                      if (errors2.length > 0)
                        return watch.onRebuild(failureErrorWithLog("Build failed", errors2, warnings2), null);
                      let result2 = {warnings: warnings2};
                      watchResponse.outputFiles && (result2.outputFiles = watchResponse.outputFiles.map(convertOutputFiles)), watchResponse.rebuildID !== void 0 && (result2.rebuild = rebuild), result2.stop = stop, watch.onRebuild(null, result2);
                    });
                  }
                  result.stop = stop;
                }
                return callback2(null, result);
              };
              if (write && streamIn.isBrowser)
                throw new Error('Cannot enable "write" in the browser');
              if (incremental && streamIn.isSync)
                throw new Error('Cannot use "incremental" with a synchronous build');
              sendRequest(refs, request, (error, response) => {
                if (error)
                  return callback(new Error(error), null);
                if (serve2) {
                  let serveResponse = response, isStopped = !1;
                  refs.ref();
                  let result = {
                    port: serveResponse.port,
                    host: serveResponse.host,
                    wait: serve2.wait,
                    stop() {
                      isStopped || (isStopped = !0, serve2.stop(), refs.unref());
                    }
                  };
                  return refs.ref(), serve2.wait.then(refs.unref, refs.unref), callback(null, result);
                }
                return buildResponseToResult(response, callback);
              });
            } catch (e) {
              let flags = [];
              try {
                pushLogFlags(flags, options, {}, isTTY, logLevelDefault);
              } catch (e2) {
              }
              let error = extractErrorMessageV8(e, streamIn, details, void 0);
              sendRequest(refs, {command: "error", flags, error}, () => {
                error.detail = details.load(error.detail), callback(failureErrorWithLog("Build failed", [error], []), null);
              });
            }
          },
          transform(callName, refs, input, options, isTTY, fs, callback) {
            let details = createObjectStash(), logLevelDefault = "silent", start = (inputPath) => {
              try {
                if (typeof input != "string")
                  throw new Error('The input to "transform" must be a string');
                let flags = flagsForTransformOptions(callName, options, isTTY, logLevelDefault);
                sendRequest(refs, {
                  command: "transform",
                  flags,
                  inputFS: inputPath !== null,
                  input: inputPath !== null ? inputPath : input
                }, (error, response) => {
                  if (error)
                    return callback(new Error(error), null);
                  let errors = replaceDetailsInMessages(response.errors, details), warnings = replaceDetailsInMessages(response.warnings, details), outstanding = 1, next = () => --outstanding == 0 && callback(null, {warnings, code: response.code, map: response.map});
                  if (errors.length > 0)
                    return callback(failureErrorWithLog("Transform failed", errors, warnings), null);
                  response.codeFS && (outstanding++, fs.readFile(response.code, (err, contents) => {
                    err !== null ? callback(err, null) : (response.code = contents, next());
                  })), response.mapFS && (outstanding++, fs.readFile(response.map, (err, contents) => {
                    err !== null ? callback(err, null) : (response.map = contents, next());
                  })), next();
                });
              } catch (e) {
                let flags = [];
                try {
                  pushLogFlags(flags, options, {}, isTTY, logLevelDefault);
                } catch (e2) {
                }
                let error = extractErrorMessageV8(e, streamIn, details, void 0);
                sendRequest(refs, {command: "error", flags, error}, () => {
                  error.detail = details.load(error.detail), callback(failureErrorWithLog("Transform failed", [error], []), null);
                });
              }
            };
            if (typeof input == "string" && input.length > 1024 * 1024) {
              let next = start;
              start = () => fs.writeFile(input, next);
            }
            start(null);
          }
        }
      };
    }
    function createObjectStash() {
      let map = new Map(), nextID = 0;
      return {
        load(id) {
          return map.get(id);
        },
        store(value) {
          if (value === void 0)
            return -1;
          let id = nextID++;
          return map.set(id, value), id;
        }
      };
    }
    function extractCallerV8(e, streamIn, ident) {
      try {
        let lines = (e.stack + "").split(`
`);
        lines.splice(1, 1);
        let location2 = parseStackLinesV8(streamIn, lines, ident);
        if (location2)
          return {text: e.message, location: location2};
      } catch (e2) {
      }
    }
    function extractErrorMessageV8(e, streamIn, stash, note) {
      let text = "Internal error", location2 = null;
      try {
        text = (e && e.message || e) + "";
      } catch (e2) {
      }
      try {
        location2 = parseStackLinesV8(streamIn, (e.stack + "").split(`
`), "");
      } catch (e2) {
      }
      return {text, location: location2, notes: note ? [note] : [], detail: stash ? stash.store(e) : -1};
    }
    function parseStackLinesV8(streamIn, lines, ident) {
      let at = "    at ";
      if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at))
        for (let i = 1; i < lines.length; i++) {
          let line = lines[i];
          if (!!line.startsWith(at))
            for (line = line.slice(at.length); ; ) {
              let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
              if (match) {
                line = match[1];
                continue;
              }
              if (match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line), match) {
                line = match[1];
                continue;
              }
              if (match = /^(\S+):(\d+):(\d+)$/.exec(line), match) {
                let lineText = streamIn.readFileSync(match[1], "utf8").split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "", column = +match[3] - 1, length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
                return {
                  file: match[1],
                  namespace: "file",
                  line: +match[2],
                  column: encodeUTF8(lineText.slice(0, column)).length,
                  length: encodeUTF8(lineText.slice(column, column + length)).length,
                  lineText: lineText + `
` + lines.slice(1).join(`
`)
                };
              }
              break;
            }
        }
      return null;
    }
    function failureErrorWithLog(text, errors, warnings) {
      let limit = 5, summary = errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e, i) => {
        if (i === limit)
          return `
...`;
        if (!e.location)
          return `
error: ${e.text}`;
        let {file, line, column} = e.location;
        return `
${file}:${line}:${column}: error: ${e.text}`;
      }).join(""), error = new Error(`${text}${summary}`);
      return error.errors = errors, error.warnings = warnings, error;
    }
    function replaceDetailsInMessages(messages, stash) {
      for (let message of messages)
        message.detail = stash.load(message.detail);
      return messages;
    }
    function sanitizeLocation(location2, where) {
      if (location2 == null)
        return null;
      let keys2 = {}, file = getFlag(location2, keys2, "file", mustBeString), namespace = getFlag(location2, keys2, "namespace", mustBeString), line = getFlag(location2, keys2, "line", mustBeInteger), column = getFlag(location2, keys2, "column", mustBeInteger), length = getFlag(location2, keys2, "length", mustBeInteger), lineText = getFlag(location2, keys2, "lineText", mustBeString);
      return checkForInvalidFlags(location2, keys2, where), {
        file: file || "",
        namespace: namespace || "",
        line: line || 0,
        column: column || 0,
        length: length || 0,
        lineText: lineText || ""
      };
    }
    function sanitizeMessages(messages, property, stash) {
      let messagesClone = [], index = 0;
      for (let message of messages) {
        let keys2 = {}, text = getFlag(message, keys2, "text", mustBeString), location2 = getFlag(message, keys2, "location", mustBeObjectOrNull), notes = getFlag(message, keys2, "notes", mustBeArray), detail = getFlag(message, keys2, "detail", canBeAnything), where = `in element ${index} of "${property}"`;
        checkForInvalidFlags(message, keys2, where);
        let notesClone = [];
        if (notes)
          for (let note of notes) {
            let noteKeys = {}, noteText = getFlag(note, noteKeys, "text", mustBeString), noteLocation = getFlag(note, noteKeys, "location", mustBeObjectOrNull);
            checkForInvalidFlags(note, noteKeys, where), notesClone.push({
              text: noteText || "",
              location: sanitizeLocation(noteLocation, where)
            });
          }
        messagesClone.push({
          text: text || "",
          location: sanitizeLocation(location2, where),
          notes: notesClone,
          detail: stash.store(detail)
        }), index++;
      }
      return messagesClone;
    }
    function convertOutputFiles({path: path7, contents}) {
      let text = null;
      return {
        path: path7,
        contents,
        get text() {
          return text === null && (text = decodeUTF8(contents)), text;
        }
      };
    }
    var version = "0.9.0", build2 = (options) => ensureServiceIsRunning().build(options), serve = () => {
      throw new Error('The "serve" API only works in node');
    }, transform = (input, options) => ensureServiceIsRunning().transform(input, options), buildSync = () => {
      throw new Error('The "buildSync" API only works in node');
    }, transformSync = () => {
      throw new Error('The "transformSync" API only works in node');
    }, initializePromise, longLivedService, ensureServiceIsRunning = () => {
      if (longLivedService)
        return longLivedService;
      throw initializePromise ? new Error('You need to wait for the promise returned from "initialize" to be resolved before calling this') : new Error('You need to call "initialize" before calling this');
    }, initialize = (options) => {
      options = validateInitializeOptions(options || {});
      let wasmURL = options.wasmURL, useWorker = options.worker !== !1;
      if (!wasmURL)
        throw new Error('Must provide the "wasmURL" option');
      if (wasmURL += "", initializePromise)
        throw new Error('Cannot call "initialize" more than once');
      return initializePromise = startRunningService(wasmURL, useWorker), initializePromise.catch(() => {
        initializePromise = void 0;
      }), initializePromise;
    }, startRunningService = (wasmURL, useWorker) => __async(void 0, null, function* () {
      let res = yield fetch(wasmURL);
      if (!res.ok)
        throw new Error(`Failed to download ${JSON.stringify(wasmURL)}`);
      let wasm = yield res.arrayBuffer(), code = `{let global={};for(let o=self;o;o=Object.getPrototypeOf(o))for(let k of Object.getOwnPropertyNames(o))if(!(k in global))Object.defineProperty(global,k,{get:()=>self[k]});// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

(() => {
	// Map multiple JavaScript environments to a single common API,
	// preferring web standards over Node.js API.
	//
	// Environments considered:
	// - Browsers
	// - Node.js
	// - Electron
	// - Parcel
	// - Webpack

	if (typeof global !== "undefined") {
		// global already exists
	} else if (typeof window !== "undefined") {
		window.global = window;
	} else if (typeof self !== "undefined") {
		self.global = self;
	} else {
		throw new Error("cannot export Go (neither global, window nor self is defined)");
	}

	if (!global.require && typeof require !== "undefined") {
		global.require = require;
	}

	if (!global.fs && global.require) {
		const fs = require("fs");
		if (typeof fs === "object" && fs !== null && Object.keys(fs).length !== 0) {
			
    global.fs = Object.assign({}, fs, {
      // Hack around a Unicode bug in node: https://github.com/nodejs/node/issues/24550
      write(fd, buf, offset, length, position, callback) {
        if (offset === 0 && length === buf.length && position === null) {
          if (fd === process.stdout.fd) {
            try {
              process.stdout.write(buf, err => err ? callback(err, 0, null) : callback(null, length, buf));
            } catch (err) {
              callback(err, 0, null);
            }
            return;
          }
          if (fd === process.stderr.fd) {
            try {
              process.stderr.write(buf, err => err ? callback(err, 0, null) : callback(null, length, buf));
            } catch (err) {
              callback(err, 0, null);
            }
            return;
          }
        }
        fs.write(fd, buf, offset, length, position, callback);
      },
    });
  
		}
	}

	const enosys = () => {
		const err = new Error("not implemented");
		err.code = "ENOSYS";
		return err;
	};

	if (!global.fs) {
		let outputBuf = "";
		global.fs = {
			constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused
			writeSync(fd, buf) {
				outputBuf += decoder.decode(buf);
				const nl = outputBuf.lastIndexOf("\\n");
				if (nl != -1) {
					console.log(outputBuf.substr(0, nl));
					outputBuf = outputBuf.substr(nl + 1);
				}
				return buf.length;
			},
			write(fd, buf, offset, length, position, callback) {
				if (offset !== 0 || length !== buf.length || position !== null) {
					callback(enosys());
					return;
				}
				const n = this.writeSync(fd, buf);
				callback(null, n);
			},
			chmod(path, mode, callback) { callback(enosys()); },
			chown(path, uid, gid, callback) { callback(enosys()); },
			close(fd, callback) { callback(enosys()); },
			fchmod(fd, mode, callback) { callback(enosys()); },
			fchown(fd, uid, gid, callback) { callback(enosys()); },
			fstat(fd, callback) { callback(enosys()); },
			fsync(fd, callback) { callback(null); },
			ftruncate(fd, length, callback) { callback(enosys()); },
			lchown(path, uid, gid, callback) { callback(enosys()); },
			link(path, link, callback) { callback(enosys()); },
			lstat(path, callback) { callback(enosys()); },
			mkdir(path, perm, callback) { callback(enosys()); },
			open(path, flags, mode, callback) { callback(enosys()); },
			read(fd, buffer, offset, length, position, callback) { callback(enosys()); },
			readdir(path, callback) { callback(enosys()); },
			readlink(path, callback) { callback(enosys()); },
			rename(from, to, callback) { callback(enosys()); },
			rmdir(path, callback) { callback(enosys()); },
			stat(path, callback) { callback(enosys()); },
			symlink(path, link, callback) { callback(enosys()); },
			truncate(path, length, callback) { callback(enosys()); },
			unlink(path, callback) { callback(enosys()); },
			utimes(path, atime, mtime, callback) { callback(enosys()); },
		};
	}

	if (!global.process) {
		global.process = {
			getuid() { return -1; },
			getgid() { return -1; },
			geteuid() { return -1; },
			getegid() { return -1; },
			getgroups() { throw enosys(); },
			pid: -1,
			ppid: -1,
			umask() { throw enosys(); },
			cwd() { throw enosys(); },
			chdir() { throw enosys(); },
		}
	}

	if (!global.crypto && global.require) {
		const nodeCrypto = require("crypto");
		global.crypto = {
			getRandomValues(b) {
				nodeCrypto.randomFillSync(b);
			},
		};
	}
	if (!global.crypto) {
		throw new Error("global.crypto is not available, polyfill required (getRandomValues only)");
	}

	if (!global.performance) {
		global.performance = {
			now() {
				const [sec, nsec] = process.hrtime();
				return sec * 1000 + nsec / 1000000;
			},
		};
	}

	if (!global.TextEncoder && global.require) {
		global.TextEncoder = require("util").TextEncoder;
	}
	if (!global.TextEncoder) {
		throw new Error("global.TextEncoder is not available, polyfill required");
	}

	if (!global.TextDecoder && global.require) {
		global.TextDecoder = require("util").TextDecoder;
	}
	if (!global.TextDecoder) {
		throw new Error("global.TextDecoder is not available, polyfill required");
	}

	// End of polyfills for common API.

	const encoder = new TextEncoder("utf-8");
	const decoder = new TextDecoder("utf-8");

	global.Go = class {
		constructor() {
			this.argv = ["js"];
			this.env = {};
			this.exit = (code) => {
				if (code !== 0) {
					console.warn("exit code:", code);
				}
			};
			this._exitPromise = new Promise((resolve) => {
				this._resolveExitPromise = resolve;
			});
			this._pendingEvent = null;
			this._scheduledTimeouts = new Map();
			this._nextCallbackTimeoutID = 1;

			const setInt64 = (addr, v) => {
				this.mem.setUint32(addr + 0, v, true);
				this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);
			}

			const getInt64 = (addr) => {
				const low = this.mem.getUint32(addr + 0, true);
				const high = this.mem.getInt32(addr + 4, true);
				return low + high * 4294967296;
			}

			const loadValue = (addr) => {
				const f = this.mem.getFloat64(addr, true);
				if (f === 0) {
					return undefined;
				}
				if (!isNaN(f)) {
					return f;
				}

				const id = this.mem.getUint32(addr, true);
				return this._values[id];
			}

			const storeValue = (addr, v) => {
				const nanHead = 0x7FF80000;

				if (typeof v === "number" && v !== 0) {
					if (isNaN(v)) {
						this.mem.setUint32(addr + 4, nanHead, true);
						this.mem.setUint32(addr, 0, true);
						return;
					}
					this.mem.setFloat64(addr, v, true);
					return;
				}

				if (v === undefined) {
					this.mem.setFloat64(addr, 0, true);
					return;
				}

				let id = this._ids.get(v);
				if (id === undefined) {
					id = this._idPool.pop();
					if (id === undefined) {
						id = this._values.length;
					}
					this._values[id] = v;
					this._goRefCounts[id] = 0;
					this._ids.set(v, id);
				}
				this._goRefCounts[id]++;
				let typeFlag = 0;
				switch (typeof v) {
					case "object":
						if (v !== null) {
							typeFlag = 1;
						}
						break;
					case "string":
						typeFlag = 2;
						break;
					case "symbol":
						typeFlag = 3;
						break;
					case "function":
						typeFlag = 4;
						break;
				}
				this.mem.setUint32(addr + 4, nanHead | typeFlag, true);
				this.mem.setUint32(addr, id, true);
			}

			const loadSlice = (addr) => {
				const array = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				return new Uint8Array(this._inst.exports.mem.buffer, array, len);
			}

			const loadSliceOfValues = (addr) => {
				const array = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				const a = new Array(len);
				for (let i = 0; i < len; i++) {
					a[i] = loadValue(array + i * 8);
				}
				return a;
			}

			const loadString = (addr) => {
				const saddr = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));
			}

			const timeOrigin = Date.now() - performance.now();
			this.importObject = {
				go: {
					// Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)
					// may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported
					// function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).
					// This changes the SP, thus we have to update the SP used by the imported function.

					// func wasmExit(code int32)
					"runtime.wasmExit": (sp) => {
						sp >>>= 0;
						const code = this.mem.getInt32(sp + 8, true);
						this.exited = true;
						delete this._inst;
						delete this._values;
						delete this._goRefCounts;
						delete this._ids;
						delete this._idPool;
						this.exit(code);
					},

					// func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)
					"runtime.wasmWrite": (sp) => {
						sp >>>= 0;
						const fd = getInt64(sp + 8);
						const p = getInt64(sp + 16);
						const n = this.mem.getInt32(sp + 24, true);
						fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));
					},

					// func resetMemoryDataView()
					"runtime.resetMemoryDataView": (sp) => {
						sp >>>= 0;
						this.mem = new DataView(this._inst.exports.mem.buffer);
					},

					// func nanotime1() int64
					"runtime.nanotime1": (sp) => {
						sp >>>= 0;
						setInt64(sp + 8, (timeOrigin + performance.now()) * 1000000);
					},

					// func walltime1() (sec int64, nsec int32)
					"runtime.walltime1": (sp) => {
						sp >>>= 0;
						const msec = (new Date).getTime();
						setInt64(sp + 8, msec / 1000);
						this.mem.setInt32(sp + 16, (msec % 1000) * 1000000, true);
					},

					// func scheduleTimeoutEvent(delay int64) int32
					"runtime.scheduleTimeoutEvent": (sp) => {
						sp >>>= 0;
						const id = this._nextCallbackTimeoutID;
						this._nextCallbackTimeoutID++;
						this._scheduledTimeouts.set(id, setTimeout(
							() => {
								this._resume();
								while (this._scheduledTimeouts.has(id)) {
									// for some reason Go failed to register the timeout event, log and try again
									// (temporary workaround for https://github.com/golang/go/issues/28975)
									console.warn("scheduleTimeoutEvent: missed timeout event");
									this._resume();
								}
							},
							getInt64(sp + 8) + 1, // setTimeout has been seen to fire up to 1 millisecond early
						));
						this.mem.setInt32(sp + 16, id, true);
					},

					// func clearTimeoutEvent(id int32)
					"runtime.clearTimeoutEvent": (sp) => {
						sp >>>= 0;
						const id = this.mem.getInt32(sp + 8, true);
						clearTimeout(this._scheduledTimeouts.get(id));
						this._scheduledTimeouts.delete(id);
					},

					// func getRandomData(r []byte)
					"runtime.getRandomData": (sp) => {
						sp >>>= 0;
						crypto.getRandomValues(loadSlice(sp + 8));
					},

					// func finalizeRef(v ref)
					"syscall/js.finalizeRef": (sp) => {
						sp >>>= 0;
						const id = this.mem.getUint32(sp + 8, true);
						this._goRefCounts[id]--;
						if (this._goRefCounts[id] === 0) {
							const v = this._values[id];
							this._values[id] = null;
							this._ids.delete(v);
							this._idPool.push(id);
						}
					},

					// func stringVal(value string) ref
					"syscall/js.stringVal": (sp) => {
						sp >>>= 0;
						storeValue(sp + 24, loadString(sp + 8));
					},

					// func valueGet(v ref, p string) ref
					"syscall/js.valueGet": (sp) => {
						sp >>>= 0;
						const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));
						sp = this._inst.exports.getsp() >>> 0; // see comment above
						storeValue(sp + 32, result);
					},

					// func valueSet(v ref, p string, x ref)
					"syscall/js.valueSet": (sp) => {
						sp >>>= 0;
						Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));
					},

					// func valueDelete(v ref, p string)
					"syscall/js.valueDelete": (sp) => {
						sp >>>= 0;
						Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));
					},

					// func valueIndex(v ref, i int) ref
					"syscall/js.valueIndex": (sp) => {
						sp >>>= 0;
						storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));
					},

					// valueSetIndex(v ref, i int, x ref)
					"syscall/js.valueSetIndex": (sp) => {
						sp >>>= 0;
						Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));
					},

					// func valueCall(v ref, m string, args []ref) (ref, bool)
					"syscall/js.valueCall": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const m = Reflect.get(v, loadString(sp + 16));
							const args = loadSliceOfValues(sp + 32);
							const result = Reflect.apply(m, v, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 56, result);
							this.mem.setUint8(sp + 64, 1);
						} catch (err) {
							storeValue(sp + 56, err);
							this.mem.setUint8(sp + 64, 0);
						}
					},

					// func valueInvoke(v ref, args []ref) (ref, bool)
					"syscall/js.valueInvoke": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const args = loadSliceOfValues(sp + 16);
							const result = Reflect.apply(v, undefined, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, result);
							this.mem.setUint8(sp + 48, 1);
						} catch (err) {
							storeValue(sp + 40, err);
							this.mem.setUint8(sp + 48, 0);
						}
					},

					// func valueNew(v ref, args []ref) (ref, bool)
					"syscall/js.valueNew": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const args = loadSliceOfValues(sp + 16);
							const result = Reflect.construct(v, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, result);
							this.mem.setUint8(sp + 48, 1);
						} catch (err) {
							storeValue(sp + 40, err);
							this.mem.setUint8(sp + 48, 0);
						}
					},

					// func valueLength(v ref) int
					"syscall/js.valueLength": (sp) => {
						sp >>>= 0;
						setInt64(sp + 16, parseInt(loadValue(sp + 8).length));
					},

					// valuePrepareString(v ref) (ref, int)
					"syscall/js.valuePrepareString": (sp) => {
						sp >>>= 0;
						const str = encoder.encode(String(loadValue(sp + 8)));
						storeValue(sp + 16, str);
						setInt64(sp + 24, str.length);
					},

					// valueLoadString(v ref, b []byte)
					"syscall/js.valueLoadString": (sp) => {
						sp >>>= 0;
						const str = loadValue(sp + 8);
						loadSlice(sp + 16).set(str);
					},

					// func valueInstanceOf(v ref, t ref) bool
					"syscall/js.valueInstanceOf": (sp) => {
						sp >>>= 0;
						this.mem.setUint8(sp + 24, (loadValue(sp + 8) instanceof loadValue(sp + 16)) ? 1 : 0);
					},

					// func copyBytesToGo(dst []byte, src ref) (int, bool)
					"syscall/js.copyBytesToGo": (sp) => {
						sp >>>= 0;
						const dst = loadSlice(sp + 8);
						const src = loadValue(sp + 32);
						if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {
							this.mem.setUint8(sp + 48, 0);
							return;
						}
						const toCopy = src.subarray(0, dst.length);
						dst.set(toCopy);
						setInt64(sp + 40, toCopy.length);
						this.mem.setUint8(sp + 48, 1);
					},

					// func copyBytesToJS(dst ref, src []byte) (int, bool)
					"syscall/js.copyBytesToJS": (sp) => {
						sp >>>= 0;
						const dst = loadValue(sp + 8);
						const src = loadSlice(sp + 16);
						if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {
							this.mem.setUint8(sp + 48, 0);
							return;
						}
						const toCopy = src.subarray(0, dst.length);
						dst.set(toCopy);
						setInt64(sp + 40, toCopy.length);
						this.mem.setUint8(sp + 48, 1);
					},

					"debug": (value) => {
						console.log(value);
					},
				}
			};
		}

		async run(instance) {
			if (!(instance instanceof WebAssembly.Instance)) {
				throw new Error("Go.run: WebAssembly.Instance expected");
			}
			this._inst = instance;
			this.mem = new DataView(this._inst.exports.mem.buffer);
			this._values = [ // JS values that Go currently has references to, indexed by reference id
				NaN,
				0,
				null,
				true,
				false,
				global,
				this,
			];
			this._goRefCounts = new Array(this._values.length).fill(Infinity); // number of references that Go has to a JS value, indexed by reference id
			this._ids = new Map([ // mapping from JS values to reference ids
				[0, 1],
				[null, 2],
				[true, 3],
				[false, 4],
				[global, 5],
				[this, 6],
			]);
			this._idPool = [];   // unused ids that have been garbage collected
			this.exited = false; // whether the Go program has exited

			// Pass command line arguments and environment variables to WebAssembly by writing them to the linear memory.
			let offset = 4096;

			const strPtr = (str) => {
				const ptr = offset;
				const bytes = encoder.encode(str + "\\0");
				new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);
				offset += bytes.length;
				if (offset % 8 !== 0) {
					offset += 8 - (offset % 8);
				}
				return ptr;
			};

			const argc = this.argv.length;

			const argvPtrs = [];
			this.argv.forEach((arg) => {
				argvPtrs.push(strPtr(arg));
			});
			argvPtrs.push(0);

			const keys = Object.keys(this.env).sort();
			keys.forEach((key) => {
				argvPtrs.push(strPtr(\`\${key}=\${this.env[key]}\`));
			});
			argvPtrs.push(0);

			const argv = offset;
			argvPtrs.forEach((ptr) => {
				this.mem.setUint32(offset, ptr, true);
				this.mem.setUint32(offset + 4, 0, true);
				offset += 8;
			});

			this._inst.exports.run(argc, argv);
			if (this.exited) {
				this._resolveExitPromise();
			}
			await this._exitPromise;
		}

		_resume() {
			if (this.exited) {
				throw new Error("Go program has already exited");
			}
			this._inst.exports.resume();
			if (this.exited) {
				this._resolveExitPromise();
			}
		}

		_makeFuncWrapper(id) {
			const go = this;
			return function () {
				const event = { id: id, this: this, args: arguments };
				go._pendingEvent = event;
				go._resume();
				return event.result;
			};
		}
	}

	if (
		typeof module !== "undefined" &&
		global.require &&
		global.require.main === module &&
		global.process &&
		global.process.versions &&
		!global.process.versions.electron
	) {
		if (process.argv.length < 3) {
			console.error("usage: go_js_wasm_exec [wasm binary] [arguments]");
			process.exit(1);
		}

		const go = new Go();
		go.argv = process.argv.slice(2);
		go.env = Object.assign({ TMPDIR: require("os").tmpdir() }, process.env);
		go.exit = process.exit;
		WebAssembly.instantiate(fs.readFileSync(process.argv[2]), go.importObject).then((result) => {
			process.on("exit", (code) => { // Node.js exits if no event handler is pending
				if (code === 0 && !go.exited) {
					// deadlock, make Go print error and stack traces
					go._pendingEvent = { id: 0 };
					go._resume();
				}
			});
			return go.run(result.instance);
		}).catch((err) => {
			console.error(err);
			process.exit(1);
		});
	}
})();
onmessage = ({data: wasm}) => {
  let decoder = new TextDecoder();
  let fs = global.fs;
  let stderr = "";
  fs.writeSync = (fd, buffer) => {
    if (fd === 1) {
      postMessage(buffer);
    } else if (fd === 2) {
      stderr += decoder.decode(buffer);
      let parts = stderr.split("\\n");
      if (parts.length > 1)
        console.log(parts.slice(0, -1).join("\\n"));
      stderr = parts[parts.length - 1];
    } else {
      throw new Error("Bad write");
    }
    return buffer.length;
  };
  let stdin = [];
  let resumeStdin;
  let stdinPos = 0;
  onmessage = ({data}) => {
    if (data.length > 0) {
      stdin.push(data);
      if (resumeStdin)
        resumeStdin();
    }
  };
  fs.read = (fd, buffer, offset, length, position, callback) => {
    if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {
      throw new Error("Bad read");
    }
    if (stdin.length === 0) {
      resumeStdin = () => fs.read(fd, buffer, offset, length, position, callback);
      return;
    }
    let first = stdin[0];
    let count = Math.max(0, Math.min(length, first.length - stdinPos));
    buffer.set(first.subarray(stdinPos, stdinPos + count), offset);
    stdinPos += count;
    if (stdinPos === first.length) {
      stdin.shift();
      stdinPos = 0;
    }
    callback(null, count);
  };
  let go = new global.Go();
  go.argv = ["", \`--service=\${"0.9.0"}\`];
  WebAssembly.instantiate(wasm, go.importObject).then(({instance}) => go.run(instance));
};}`, worker;
      if (useWorker) {
        let blob = new Blob([code], {type: "text/javascript"});
        worker = new Worker(URL.createObjectURL(blob));
      } else {
        let onmessage = new Function("postMessage", code + "var onmessage; return m => onmessage(m)")((data) => worker.onmessage({data}));
        worker = {
          onmessage: null,
          postMessage: (data) => onmessage({data}),
          terminate() {
          }
        };
      }
      worker.postMessage(wasm), worker.onmessage = ({data}) => readFromStdout(data);
      let {readFromStdout, service} = createChannel({
        writeToStdin(bytes) {
          worker.postMessage(bytes);
        },
        isSync: !1,
        isBrowser: !0
      });
      longLivedService = {
        build: (options) => new Promise((resolve, reject) => service.buildOrServe("build", null, null, options, !1, "/", (err, res2) => err ? reject(err) : resolve(res2))),
        transform: (input, options) => new Promise((resolve, reject) => service.transform("transform", null, input, options || {}, !1, {
          readFile(_, callback) {
            callback(new Error("Internal error"), null);
          },
          writeFile(_, callback) {
            callback(null);
          }
        }, (err, res2) => err ? reject(err) : resolve(res2)))
      };
    });
  })(typeof exports == "object" ? exports : (typeof self != "undefined" ? self : exports).esbuild = {});
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS((exports, module) => {
  module.exports = `{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
`;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var decode_json_1 = __importDefault(require_decode()), fromCodePoint = String.fromCodePoint || function(codePoint) {
    var output = "";
    return codePoint > 65535 && (codePoint -= 65536, output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296), codePoint = 56320 | codePoint & 1023), output += String.fromCharCode(codePoint), output;
  };
  function decodeCodePoint(codePoint) {
    return codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111 ? "\uFFFD" : (codePoint in decode_json_1.default && (codePoint = decode_json_1.default[codePoint]), fromCodePoint(codePoint));
  }
  exports.default = decodeCodePoint;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS((exports, module) => {
  module.exports = '{"Aacute":"\xC1","aacute":"\xE1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\xC2","acirc":"\xE2","acute":"\xB4","Acy":"\u0410","acy":"\u0430","AElig":"\xC6","aelig":"\xE6","af":"\u2061","Afr":"\u{1D504}","afr":"\u{1D51E}","Agrave":"\xC0","agrave":"\xE0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\xC5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\u{1D538}","aopf":"\u{1D552}","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"\'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\xC5","aring":"\xE5","Ascr":"\u{1D49C}","ascr":"\u{1D4B6}","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\xC3","atilde":"\xE3","Auml":"\xC4","auml":"\xE4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\u{1D505}","bfr":"\u{1D51F}","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\u{1D539}","bopf":"\u{1D553}","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\xA6","bscr":"\u{1D4B7}","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\xC7","ccedil":"\xE7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\xB8","Cedilla":"\xB8","cemptyv":"\u29B2","cent":"\xA2","centerdot":"\xB7","CenterDot":"\xB7","cfr":"\u{1D520}","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\xAE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\u{1D554}","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\xA9","COPY":"\xA9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\u{1D49E}","cscr":"\u{1D4B8}","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\xA4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\xB0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\u{1D507}","dfr":"\u{1D521}","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\xB4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\xA8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\xF7","divide":"\xF7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\u{1D53B}","dopf":"\u{1D555}","Dot":"\xA8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\xA8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\u{1D49F}","dscr":"\u{1D4B9}","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\xC9","eacute":"\xE9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\xCA","ecirc":"\xEA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\u{1D508}","efr":"\u{1D522}","eg":"\u2A9A","Egrave":"\xC8","egrave":"\xE8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\u{1D53C}","eopf":"\u{1D556}","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\xD0","eth":"\xF0","Euml":"\xCB","euml":"\xEB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\u{1D509}","ffr":"\u{1D523}","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\u{1D53D}","fopf":"\u{1D557}","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\xBD","frac13":"\u2153","frac14":"\xBC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\xBE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\u{1D4BB}","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\u{1D50A}","gfr":"\u{1D524}","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\u{1D53E}","gopf":"\u{1D558}","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\u{1D4A2}","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\xBD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\u{1D525}","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\u{1D559}","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\u{1D4BD}","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\xCD","iacute":"\xED","ic":"\u2063","Icirc":"\xCE","icirc":"\xEE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\xA1","iff":"\u21D4","ifr":"\u{1D526}","Ifr":"\u2111","Igrave":"\xCC","igrave":"\xEC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\u{1D540}","iopf":"\u{1D55A}","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\xBF","iscr":"\u{1D4BE}","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\xCF","iuml":"\xEF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\u{1D50D}","jfr":"\u{1D527}","jmath":"\u0237","Jopf":"\u{1D541}","jopf":"\u{1D55B}","Jscr":"\u{1D4A5}","jscr":"\u{1D4BF}","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\u{1D50E}","kfr":"\u{1D528}","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\u{1D542}","kopf":"\u{1D55C}","Kscr":"\u{1D4A6}","kscr":"\u{1D4C0}","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\xAB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\u{1D50F}","lfr":"\u{1D529}","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\u{1D543}","lopf":"\u{1D55D}","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\u{1D4C1}","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\xAF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\u{1D510}","mfr":"\u{1D52A}","mho":"\u2127","micro":"\xB5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\xB7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\u{1D544}","mopf":"\u{1D55E}","mp":"\u2213","mscr":"\u{1D4C2}","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\xA0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\u{1D511}","nfr":"\u{1D52B}","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\xA0","nopf":"\u{1D55F}","Nopf":"\u2115","Not":"\u2AEC","not":"\xAC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\u{1D4A9}","nscr":"\u{1D4C3}","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\xD1","ntilde":"\xF1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\xD3","oacute":"\xF3","oast":"\u229B","Ocirc":"\xD4","ocirc":"\xF4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\u{1D512}","ofr":"\u{1D52C}","ogon":"\u02DB","Ograve":"\xD2","ograve":"\xF2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\u{1D546}","oopf":"\u{1D560}","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\xAA","ordm":"\xBA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\u{1D4AA}","oscr":"\u2134","Oslash":"\xD8","oslash":"\xF8","osol":"\u2298","Otilde":"\xD5","otilde":"\xF5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\xD6","ouml":"\xF6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\xB6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\u{1D513}","pfr":"\u{1D52D}","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\xB1","plusmn":"\xB1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\xB1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\u{1D561}","Popf":"\u2119","pound":"\xA3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\u{1D4AB}","pscr":"\u{1D4C5}","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\u{1D514}","qfr":"\u{1D52E}","qint":"\u2A0C","qopf":"\u{1D562}","Qopf":"\u211A","qprime":"\u2057","Qscr":"\u{1D4AC}","qscr":"\u{1D4C6}","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\\"","QUOT":"\\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\xBB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\xAE","REG":"\xAE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\u{1D52F}","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\u{1D563}","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\u{1D4C7}","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\xA7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\u{1D516}","sfr":"\u{1D530}","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\xAD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\u{1D54A}","sopf":"\u{1D564}","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\u{1D4AE}","sscr":"\u{1D4C8}","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\xAF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\xB9","sup2":"\xB2","sup3":"\xB3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\xDF","Tab":"\\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\u{1D517}","tfr":"\u{1D531}","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\xDE","thorn":"\xFE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\xD7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\u{1D54B}","topf":"\u{1D565}","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\u{1D4AF}","tscr":"\u{1D4C9}","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\xDA","uacute":"\xFA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\xDB","ucirc":"\xFB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\u{1D518}","ufr":"\u{1D532}","Ugrave":"\xD9","ugrave":"\xF9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\xA8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\u{1D54C}","uopf":"\u{1D566}","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\u{1D4B0}","uscr":"\u{1D4CA}","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\xDC","uuml":"\xFC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\u{1D519}","vfr":"\u{1D533}","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\u{1D54D}","vopf":"\u{1D567}","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\u{1D4B1}","vscr":"\u{1D4CB}","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\u{1D51A}","wfr":"\u{1D534}","Wopf":"\u{1D54E}","wopf":"\u{1D568}","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\u{1D4B2}","wscr":"\u{1D4CC}","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\u{1D51B}","xfr":"\u{1D535}","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\u{1D54F}","xopf":"\u{1D569}","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\u{1D4B3}","xscr":"\u{1D4CD}","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\xDD","yacute":"\xFD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\xA5","Yfr":"\u{1D51C}","yfr":"\u{1D536}","YIcy":"\u0407","yicy":"\u0457","Yopf":"\u{1D550}","yopf":"\u{1D56A}","Yscr":"\u{1D4B4}","yscr":"\u{1D4CE}","YUcy":"\u042E","yucy":"\u044E","yuml":"\xFF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\u{1D537}","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\u{1D56B}","Zopf":"\u2124","Zscr":"\u{1D4B5}","zscr":"\u{1D4CF}","zwj":"\u200D","zwnj":"\u200C"}\n';
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS((exports, module) => {
  module.exports = `{"Aacute":"\xC1","aacute":"\xE1","Acirc":"\xC2","acirc":"\xE2","acute":"\xB4","AElig":"\xC6","aelig":"\xE6","Agrave":"\xC0","agrave":"\xE0","amp":"&","AMP":"&","Aring":"\xC5","aring":"\xE5","Atilde":"\xC3","atilde":"\xE3","Auml":"\xC4","auml":"\xE4","brvbar":"\xA6","Ccedil":"\xC7","ccedil":"\xE7","cedil":"\xB8","cent":"\xA2","copy":"\xA9","COPY":"\xA9","curren":"\xA4","deg":"\xB0","divide":"\xF7","Eacute":"\xC9","eacute":"\xE9","Ecirc":"\xCA","ecirc":"\xEA","Egrave":"\xC8","egrave":"\xE8","ETH":"\xD0","eth":"\xF0","Euml":"\xCB","euml":"\xEB","frac12":"\xBD","frac14":"\xBC","frac34":"\xBE","gt":">","GT":">","Iacute":"\xCD","iacute":"\xED","Icirc":"\xCE","icirc":"\xEE","iexcl":"\xA1","Igrave":"\xCC","igrave":"\xEC","iquest":"\xBF","Iuml":"\xCF","iuml":"\xEF","laquo":"\xAB","lt":"<","LT":"<","macr":"\xAF","micro":"\xB5","middot":"\xB7","nbsp":"\xA0","not":"\xAC","Ntilde":"\xD1","ntilde":"\xF1","Oacute":"\xD3","oacute":"\xF3","Ocirc":"\xD4","ocirc":"\xF4","Ograve":"\xD2","ograve":"\xF2","ordf":"\xAA","ordm":"\xBA","Oslash":"\xD8","oslash":"\xF8","Otilde":"\xD5","otilde":"\xF5","Ouml":"\xD6","ouml":"\xF6","para":"\xB6","plusmn":"\xB1","pound":"\xA3","quot":"\\"","QUOT":"\\"","raquo":"\xBB","reg":"\xAE","REG":"\xAE","sect":"\xA7","shy":"\xAD","sup1":"\xB9","sup2":"\xB2","sup3":"\xB3","szlig":"\xDF","THORN":"\xDE","thorn":"\xFE","times":"\xD7","Uacute":"\xDA","uacute":"\xFA","Ucirc":"\xDB","ucirc":"\xFB","Ugrave":"\xD9","ugrave":"\xF9","uml":"\xA8","Uuml":"\xDC","uuml":"\xFC","Yacute":"\xDD","yacute":"\xFD","yen":"\xA5","yuml":"\xFF"}
`;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS((exports, module) => {
  module.exports = `{"amp":"&","apos":"'","gt":">","lt":"<","quot":"\\""}
`;
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/Tokenizer.js
var require_Tokenizer = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var decode_codepoint_1 = __importDefault(require_decode_codepoint()), entities_json_1 = __importDefault(require_entities()), legacy_json_1 = __importDefault(require_legacy()), xml_json_1 = __importDefault(require_xml());
  function whitespace(c) {
    return c === " " || c === `
` || c === "	" || c === "\f" || c === "\r";
  }
  function isASCIIAlpha(c) {
    return c >= "a" && c <= "z" || c >= "A" && c <= "Z";
  }
  function ifElseState(upper, SUCCESS, FAILURE) {
    var lower = upper.toLowerCase();
    return upper === lower ? function(t, c) {
      c === lower ? t._state = SUCCESS : (t._state = FAILURE, t._index--);
    } : function(t, c) {
      c === lower || c === upper ? t._state = SUCCESS : (t._state = FAILURE, t._index--);
    };
  }
  function consumeSpecialNameChar(upper, NEXT_STATE) {
    var lower = upper.toLowerCase();
    return function(t, c) {
      c === lower || c === upper ? t._state = NEXT_STATE : (t._state = 3, t._index--);
    };
  }
  var stateBeforeCdata1 = ifElseState("C", 24, 16), stateBeforeCdata2 = ifElseState("D", 25, 16), stateBeforeCdata3 = ifElseState("A", 26, 16), stateBeforeCdata4 = ifElseState("T", 27, 16), stateBeforeCdata5 = ifElseState("A", 28, 16), stateBeforeScript1 = consumeSpecialNameChar("R", 35), stateBeforeScript2 = consumeSpecialNameChar("I", 36), stateBeforeScript3 = consumeSpecialNameChar("P", 37), stateBeforeScript4 = consumeSpecialNameChar("T", 38), stateAfterScript1 = ifElseState("R", 40, 1), stateAfterScript2 = ifElseState("I", 41, 1), stateAfterScript3 = ifElseState("P", 42, 1), stateAfterScript4 = ifElseState("T", 43, 1), stateBeforeStyle1 = consumeSpecialNameChar("Y", 45), stateBeforeStyle2 = consumeSpecialNameChar("L", 46), stateBeforeStyle3 = consumeSpecialNameChar("E", 47), stateAfterStyle1 = ifElseState("Y", 49, 1), stateAfterStyle2 = ifElseState("L", 50, 1), stateAfterStyle3 = ifElseState("E", 51, 1), stateBeforeSpecialT = consumeSpecialNameChar("I", 54), stateBeforeTitle1 = consumeSpecialNameChar("T", 55), stateBeforeTitle2 = consumeSpecialNameChar("L", 56), stateBeforeTitle3 = consumeSpecialNameChar("E", 57), stateAfterSpecialTEnd = ifElseState("I", 58, 1), stateAfterTitle1 = ifElseState("T", 59, 1), stateAfterTitle2 = ifElseState("L", 60, 1), stateAfterTitle3 = ifElseState("E", 61, 1), stateBeforeEntity = ifElseState("#", 63, 64), stateBeforeNumericEntity = ifElseState("X", 66, 65), Tokenizer = function() {
    function Tokenizer2(options, cbs) {
      var _a;
      this._state = 1, this.buffer = "", this.sectionStart = 0, this._index = 0, this.bufferOffset = 0, this.baseState = 1, this.special = 1, this.running = !0, this.ended = !1, this.cbs = cbs, this.xmlMode = !!(options == null ? void 0 : options.xmlMode), this.decodeEntities = (_a = options == null ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : !0;
    }
    return Tokenizer2.prototype.reset = function() {
      this._state = 1, this.buffer = "", this.sectionStart = 0, this._index = 0, this.bufferOffset = 0, this.baseState = 1, this.special = 1, this.running = !0, this.ended = !1;
    }, Tokenizer2.prototype.write = function(chunk) {
      this.ended && this.cbs.onerror(Error(".write() after done!")), this.buffer += chunk, this.parse();
    }, Tokenizer2.prototype.end = function(chunk) {
      this.ended && this.cbs.onerror(Error(".end() after done!")), chunk && this.write(chunk), this.ended = !0, this.running && this.finish();
    }, Tokenizer2.prototype.pause = function() {
      this.running = !1;
    }, Tokenizer2.prototype.resume = function() {
      this.running = !0, this._index < this.buffer.length && this.parse(), this.ended && this.finish();
    }, Tokenizer2.prototype.getAbsoluteIndex = function() {
      return this.bufferOffset + this._index;
    }, Tokenizer2.prototype.stateText = function(c) {
      c === "<" ? (this._index > this.sectionStart && this.cbs.ontext(this.getSection()), this._state = 2, this.sectionStart = this._index) : this.decodeEntities && c === "&" && (this.special === 1 || this.special === 4) && (this._index > this.sectionStart && this.cbs.ontext(this.getSection()), this.baseState = 1, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeTagName = function(c) {
      c === "/" ? this._state = 5 : c === "<" ? (this.cbs.ontext(this.getSection()), this.sectionStart = this._index) : c === ">" || this.special !== 1 || whitespace(c) ? this._state = 1 : c === "!" ? (this._state = 15, this.sectionStart = this._index + 1) : c === "?" ? (this._state = 17, this.sectionStart = this._index + 1) : isASCIIAlpha(c) ? (this._state = !this.xmlMode && (c === "s" || c === "S") ? 32 : !this.xmlMode && (c === "t" || c === "T") ? 52 : 3, this.sectionStart = this._index) : this._state = 1;
    }, Tokenizer2.prototype.stateInTagName = function(c) {
      (c === "/" || c === ">" || whitespace(c)) && (this.emitToken("onopentagname"), this._state = 8, this._index--);
    }, Tokenizer2.prototype.stateBeforeClosingTagName = function(c) {
      whitespace(c) || (c === ">" ? this._state = 1 : this.special !== 1 ? this.special !== 4 && (c === "s" || c === "S") ? this._state = 33 : this.special === 4 && (c === "t" || c === "T") ? this._state = 53 : (this._state = 1, this._index--) : isASCIIAlpha(c) ? (this._state = 6, this.sectionStart = this._index) : (this._state = 20, this.sectionStart = this._index));
    }, Tokenizer2.prototype.stateInClosingTagName = function(c) {
      (c === ">" || whitespace(c)) && (this.emitToken("onclosetag"), this._state = 7, this._index--);
    }, Tokenizer2.prototype.stateAfterClosingTagName = function(c) {
      c === ">" && (this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateBeforeAttributeName = function(c) {
      c === ">" ? (this.cbs.onopentagend(), this._state = 1, this.sectionStart = this._index + 1) : c === "/" ? this._state = 4 : whitespace(c) || (this._state = 9, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateInSelfClosingTag = function(c) {
      c === ">" ? (this.cbs.onselfclosingtag(), this._state = 1, this.sectionStart = this._index + 1, this.special = 1) : whitespace(c) || (this._state = 8, this._index--);
    }, Tokenizer2.prototype.stateInAttributeName = function(c) {
      (c === "=" || c === "/" || c === ">" || whitespace(c)) && (this.cbs.onattribname(this.getSection()), this.sectionStart = -1, this._state = 10, this._index--);
    }, Tokenizer2.prototype.stateAfterAttributeName = function(c) {
      c === "=" ? this._state = 11 : c === "/" || c === ">" ? (this.cbs.onattribend(void 0), this._state = 8, this._index--) : whitespace(c) || (this.cbs.onattribend(void 0), this._state = 9, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeAttributeValue = function(c) {
      c === '"' ? (this._state = 12, this.sectionStart = this._index + 1) : c === "'" ? (this._state = 13, this.sectionStart = this._index + 1) : whitespace(c) || (this._state = 14, this.sectionStart = this._index, this._index--);
    }, Tokenizer2.prototype.handleInAttributeValue = function(c, quote) {
      c === quote ? (this.emitToken("onattribdata"), this.cbs.onattribend(quote), this._state = 8) : this.decodeEntities && c === "&" && (this.emitToken("onattribdata"), this.baseState = this._state, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c) {
      this.handleInAttributeValue(c, '"');
    }, Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c) {
      this.handleInAttributeValue(c, "'");
    }, Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c) {
      whitespace(c) || c === ">" ? (this.emitToken("onattribdata"), this.cbs.onattribend(null), this._state = 8, this._index--) : this.decodeEntities && c === "&" && (this.emitToken("onattribdata"), this.baseState = this._state, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeDeclaration = function(c) {
      this._state = c === "[" ? 23 : c === "-" ? 18 : 16;
    }, Tokenizer2.prototype.stateInDeclaration = function(c) {
      c === ">" && (this.cbs.ondeclaration(this.getSection()), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateInProcessingInstruction = function(c) {
      c === ">" && (this.cbs.onprocessinginstruction(this.getSection()), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateBeforeComment = function(c) {
      c === "-" ? (this._state = 19, this.sectionStart = this._index + 1) : this._state = 16;
    }, Tokenizer2.prototype.stateInComment = function(c) {
      c === "-" && (this._state = 21);
    }, Tokenizer2.prototype.stateInSpecialComment = function(c) {
      c === ">" && (this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index)), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateAfterComment1 = function(c) {
      c === "-" ? this._state = 22 : this._state = 19;
    }, Tokenizer2.prototype.stateAfterComment2 = function(c) {
      c === ">" ? (this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2)), this._state = 1, this.sectionStart = this._index + 1) : c !== "-" && (this._state = 19);
    }, Tokenizer2.prototype.stateBeforeCdata6 = function(c) {
      c === "[" ? (this._state = 29, this.sectionStart = this._index + 1) : (this._state = 16, this._index--);
    }, Tokenizer2.prototype.stateInCdata = function(c) {
      c === "]" && (this._state = 30);
    }, Tokenizer2.prototype.stateAfterCdata1 = function(c) {
      c === "]" ? this._state = 31 : this._state = 29;
    }, Tokenizer2.prototype.stateAfterCdata2 = function(c) {
      c === ">" ? (this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2)), this._state = 1, this.sectionStart = this._index + 1) : c !== "]" && (this._state = 29);
    }, Tokenizer2.prototype.stateBeforeSpecialS = function(c) {
      c === "c" || c === "C" ? this._state = 34 : c === "t" || c === "T" ? this._state = 44 : (this._state = 3, this._index--);
    }, Tokenizer2.prototype.stateBeforeSpecialSEnd = function(c) {
      this.special === 2 && (c === "c" || c === "C") ? this._state = 39 : this.special === 3 && (c === "t" || c === "T") ? this._state = 48 : this._state = 1;
    }, Tokenizer2.prototype.stateBeforeSpecialLast = function(c, special) {
      (c === "/" || c === ">" || whitespace(c)) && (this.special = special), this._state = 3, this._index--;
    }, Tokenizer2.prototype.stateAfterSpecialLast = function(c, sectionStartOffset) {
      c === ">" || whitespace(c) ? (this.special = 1, this._state = 6, this.sectionStart = this._index - sectionStartOffset, this._index--) : this._state = 1;
    }, Tokenizer2.prototype.parseFixedEntity = function(map) {
      if (map === void 0 && (map = this.xmlMode ? xml_json_1.default : entities_json_1.default), this.sectionStart + 1 < this._index) {
        var entity = this.buffer.substring(this.sectionStart + 1, this._index);
        Object.prototype.hasOwnProperty.call(map, entity) && (this.emitPartial(map[entity]), this.sectionStart = this._index + 1);
      }
    }, Tokenizer2.prototype.parseLegacyEntity = function() {
      for (var start = this.sectionStart + 1, limit = Math.min(this._index - start, 6); limit >= 2; ) {
        var entity = this.buffer.substr(start, limit);
        if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {
          this.emitPartial(legacy_json_1.default[entity]), this.sectionStart += limit + 1;
          return;
        }
        limit--;
      }
    }, Tokenizer2.prototype.stateInNamedEntity = function(c) {
      c === ";" ? (this.parseFixedEntity(), this.baseState === 1 && this.sectionStart + 1 < this._index && !this.xmlMode && this.parseLegacyEntity(), this._state = this.baseState) : (c < "0" || c > "9") && !isASCIIAlpha(c) && (this.xmlMode || this.sectionStart + 1 === this._index || (this.baseState !== 1 ? c !== "=" && this.parseFixedEntity(legacy_json_1.default) : this.parseLegacyEntity()), this._state = this.baseState, this._index--);
    }, Tokenizer2.prototype.decodeNumericEntity = function(offset, base, strict) {
      var sectionStart = this.sectionStart + offset;
      if (sectionStart !== this._index) {
        var entity = this.buffer.substring(sectionStart, this._index), parsed = parseInt(entity, base);
        this.emitPartial(decode_codepoint_1.default(parsed)), this.sectionStart = strict ? this._index + 1 : this._index;
      }
      this._state = this.baseState;
    }, Tokenizer2.prototype.stateInNumericEntity = function(c) {
      c === ";" ? this.decodeNumericEntity(2, 10, !0) : (c < "0" || c > "9") && (this.xmlMode ? this._state = this.baseState : this.decodeNumericEntity(2, 10, !1), this._index--);
    }, Tokenizer2.prototype.stateInHexEntity = function(c) {
      c === ";" ? this.decodeNumericEntity(3, 16, !0) : (c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9") && (this.xmlMode ? this._state = this.baseState : this.decodeNumericEntity(3, 16, !1), this._index--);
    }, Tokenizer2.prototype.cleanup = function() {
      this.sectionStart < 0 ? (this.buffer = "", this.bufferOffset += this._index, this._index = 0) : this.running && (this._state === 1 ? (this.sectionStart !== this._index && this.cbs.ontext(this.buffer.substr(this.sectionStart)), this.buffer = "", this.bufferOffset += this._index, this._index = 0) : this.sectionStart === this._index ? (this.buffer = "", this.bufferOffset += this._index, this._index = 0) : (this.buffer = this.buffer.substr(this.sectionStart), this._index -= this.sectionStart, this.bufferOffset += this.sectionStart), this.sectionStart = 0);
    }, Tokenizer2.prototype.parse = function() {
      for (; this._index < this.buffer.length && this.running; ) {
        var c = this.buffer.charAt(this._index);
        this._state === 1 ? this.stateText(c) : this._state === 12 ? this.stateInAttributeValueDoubleQuotes(c) : this._state === 9 ? this.stateInAttributeName(c) : this._state === 19 ? this.stateInComment(c) : this._state === 20 ? this.stateInSpecialComment(c) : this._state === 8 ? this.stateBeforeAttributeName(c) : this._state === 3 ? this.stateInTagName(c) : this._state === 6 ? this.stateInClosingTagName(c) : this._state === 2 ? this.stateBeforeTagName(c) : this._state === 10 ? this.stateAfterAttributeName(c) : this._state === 13 ? this.stateInAttributeValueSingleQuotes(c) : this._state === 11 ? this.stateBeforeAttributeValue(c) : this._state === 5 ? this.stateBeforeClosingTagName(c) : this._state === 7 ? this.stateAfterClosingTagName(c) : this._state === 32 ? this.stateBeforeSpecialS(c) : this._state === 21 ? this.stateAfterComment1(c) : this._state === 14 ? this.stateInAttributeValueNoQuotes(c) : this._state === 4 ? this.stateInSelfClosingTag(c) : this._state === 16 ? this.stateInDeclaration(c) : this._state === 15 ? this.stateBeforeDeclaration(c) : this._state === 22 ? this.stateAfterComment2(c) : this._state === 18 ? this.stateBeforeComment(c) : this._state === 33 ? this.stateBeforeSpecialSEnd(c) : this._state === 53 ? stateAfterSpecialTEnd(this, c) : this._state === 39 ? stateAfterScript1(this, c) : this._state === 40 ? stateAfterScript2(this, c) : this._state === 41 ? stateAfterScript3(this, c) : this._state === 34 ? stateBeforeScript1(this, c) : this._state === 35 ? stateBeforeScript2(this, c) : this._state === 36 ? stateBeforeScript3(this, c) : this._state === 37 ? stateBeforeScript4(this, c) : this._state === 38 ? this.stateBeforeSpecialLast(c, 2) : this._state === 42 ? stateAfterScript4(this, c) : this._state === 43 ? this.stateAfterSpecialLast(c, 6) : this._state === 44 ? stateBeforeStyle1(this, c) : this._state === 29 ? this.stateInCdata(c) : this._state === 45 ? stateBeforeStyle2(this, c) : this._state === 46 ? stateBeforeStyle3(this, c) : this._state === 47 ? this.stateBeforeSpecialLast(c, 3) : this._state === 48 ? stateAfterStyle1(this, c) : this._state === 49 ? stateAfterStyle2(this, c) : this._state === 50 ? stateAfterStyle3(this, c) : this._state === 51 ? this.stateAfterSpecialLast(c, 5) : this._state === 52 ? stateBeforeSpecialT(this, c) : this._state === 54 ? stateBeforeTitle1(this, c) : this._state === 55 ? stateBeforeTitle2(this, c) : this._state === 56 ? stateBeforeTitle3(this, c) : this._state === 57 ? this.stateBeforeSpecialLast(c, 4) : this._state === 58 ? stateAfterTitle1(this, c) : this._state === 59 ? stateAfterTitle2(this, c) : this._state === 60 ? stateAfterTitle3(this, c) : this._state === 61 ? this.stateAfterSpecialLast(c, 5) : this._state === 17 ? this.stateInProcessingInstruction(c) : this._state === 64 ? this.stateInNamedEntity(c) : this._state === 23 ? stateBeforeCdata1(this, c) : this._state === 62 ? stateBeforeEntity(this, c) : this._state === 24 ? stateBeforeCdata2(this, c) : this._state === 25 ? stateBeforeCdata3(this, c) : this._state === 30 ? this.stateAfterCdata1(c) : this._state === 31 ? this.stateAfterCdata2(c) : this._state === 26 ? stateBeforeCdata4(this, c) : this._state === 27 ? stateBeforeCdata5(this, c) : this._state === 28 ? this.stateBeforeCdata6(c) : this._state === 66 ? this.stateInHexEntity(c) : this._state === 65 ? this.stateInNumericEntity(c) : this._state === 63 ? stateBeforeNumericEntity(this, c) : this.cbs.onerror(Error("unknown _state"), this._state), this._index++;
      }
      this.cleanup();
    }, Tokenizer2.prototype.finish = function() {
      this.sectionStart < this._index && this.handleTrailingData(), this.cbs.onend();
    }, Tokenizer2.prototype.handleTrailingData = function() {
      var data = this.buffer.substr(this.sectionStart);
      this._state === 29 || this._state === 30 || this._state === 31 ? this.cbs.oncdata(data) : this._state === 19 || this._state === 21 || this._state === 22 ? this.cbs.oncomment(data) : this._state === 64 && !this.xmlMode ? (this.parseLegacyEntity(), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state === 65 && !this.xmlMode ? (this.decodeNumericEntity(2, 10, !1), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state === 66 && !this.xmlMode ? (this.decodeNumericEntity(3, 16, !1), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state !== 3 && this._state !== 8 && this._state !== 11 && this._state !== 10 && this._state !== 9 && this._state !== 13 && this._state !== 12 && this._state !== 14 && this._state !== 6 && this.cbs.ontext(data);
    }, Tokenizer2.prototype.getSection = function() {
      return this.buffer.substring(this.sectionStart, this._index);
    }, Tokenizer2.prototype.emitToken = function(name) {
      this.cbs[name](this.getSection()), this.sectionStart = -1;
    }, Tokenizer2.prototype.emitPartial = function(value) {
      this.baseState !== 1 ? this.cbs.onattribdata(value) : this.cbs.ontext(value);
    }, Tokenizer2;
  }();
  exports.default = Tokenizer;
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/Parser.js
var require_Parser = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.Parser = void 0;
  var Tokenizer_1 = __importDefault(require_Tokenizer()), formTags = new Set([
    "input",
    "option",
    "optgroup",
    "select",
    "button",
    "datalist",
    "textarea"
  ]), pTag = new Set(["p"]), openImpliesClose = {
    tr: new Set(["tr", "th", "td"]),
    th: new Set(["th"]),
    td: new Set(["thead", "th", "td"]),
    body: new Set(["head", "link", "script"]),
    li: new Set(["li"]),
    p: pTag,
    h1: pTag,
    h2: pTag,
    h3: pTag,
    h4: pTag,
    h5: pTag,
    h6: pTag,
    select: formTags,
    input: formTags,
    output: formTags,
    button: formTags,
    datalist: formTags,
    textarea: formTags,
    option: new Set(["option"]),
    optgroup: new Set(["optgroup", "option"]),
    dd: new Set(["dt", "dd"]),
    dt: new Set(["dt", "dd"]),
    address: pTag,
    article: pTag,
    aside: pTag,
    blockquote: pTag,
    details: pTag,
    div: pTag,
    dl: pTag,
    fieldset: pTag,
    figcaption: pTag,
    figure: pTag,
    footer: pTag,
    form: pTag,
    header: pTag,
    hr: pTag,
    main: pTag,
    nav: pTag,
    ol: pTag,
    pre: pTag,
    section: pTag,
    table: pTag,
    ul: pTag,
    rt: new Set(["rt", "rp"]),
    rp: new Set(["rt", "rp"]),
    tbody: new Set(["thead", "tbody"]),
    tfoot: new Set(["thead", "tbody"])
  }, voidElements = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]), foreignContextElements = new Set(["math", "svg"]), htmlIntegrationElements = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
  ]), reNameEnd = /\s|\//, Parser3 = function() {
    function Parser4(cbs, options) {
      options === void 0 && (options = {});
      var _a, _b, _c, _d, _e;
      this.startIndex = 0, this.endIndex = null, this.tagname = "", this.attribname = "", this.attribvalue = "", this.attribs = null, this.stack = [], this.foreignContext = [], this.options = options, this.cbs = cbs ?? {}, this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode, this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode, this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this), (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 || _e.call(_d, this);
    }
    return Parser4.prototype.updatePosition = function(initialOffset) {
      this.endIndex === null ? this.tokenizer.sectionStart <= initialOffset ? this.startIndex = 0 : this.startIndex = this.tokenizer.sectionStart - initialOffset : this.startIndex = this.endIndex + 1, this.endIndex = this.tokenizer.getAbsoluteIndex();
    }, Parser4.prototype.ontext = function(data) {
      var _a, _b;
      this.updatePosition(1), this.endIndex--, (_b = (_a = this.cbs).ontext) === null || _b === void 0 || _b.call(_a, data);
    }, Parser4.prototype.onopentagname = function(name) {
      var _a, _b;
      if (this.lowerCaseTagNames && (name = name.toLowerCase()), this.tagname = name, !this.options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name))
        for (var el = void 0; this.stack.length > 0 && openImpliesClose[name].has(el = this.stack[this.stack.length - 1]); )
          this.onclosetag(el);
      (this.options.xmlMode || !voidElements.has(name)) && (this.stack.push(name), foreignContextElements.has(name) ? this.foreignContext.push(!0) : htmlIntegrationElements.has(name) && this.foreignContext.push(!1)), (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 || _b.call(_a, name), this.cbs.onopentag && (this.attribs = {});
    }, Parser4.prototype.onopentagend = function() {
      var _a, _b;
      this.updatePosition(1), this.attribs && ((_b = (_a = this.cbs).onopentag) === null || _b === void 0 || _b.call(_a, this.tagname, this.attribs), this.attribs = null), !this.options.xmlMode && this.cbs.onclosetag && voidElements.has(this.tagname) && this.cbs.onclosetag(this.tagname), this.tagname = "";
    }, Parser4.prototype.onclosetag = function(name) {
      if (this.updatePosition(1), this.lowerCaseTagNames && (name = name.toLowerCase()), (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) && this.foreignContext.pop(), this.stack.length && (this.options.xmlMode || !voidElements.has(name))) {
        var pos = this.stack.lastIndexOf(name);
        if (pos !== -1)
          if (this.cbs.onclosetag)
            for (pos = this.stack.length - pos; pos--; )
              this.cbs.onclosetag(this.stack.pop());
          else
            this.stack.length = pos;
        else
          name === "p" && !this.options.xmlMode && (this.onopentagname(name), this.closeCurrentTag());
      } else
        !this.options.xmlMode && (name === "br" || name === "p") && (this.onopentagname(name), this.closeCurrentTag());
    }, Parser4.prototype.onselfclosingtag = function() {
      this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1] ? this.closeCurrentTag() : this.onopentagend();
    }, Parser4.prototype.closeCurrentTag = function() {
      var _a, _b, name = this.tagname;
      this.onopentagend(), this.stack[this.stack.length - 1] === name && ((_b = (_a = this.cbs).onclosetag) === null || _b === void 0 || _b.call(_a, name), this.stack.pop());
    }, Parser4.prototype.onattribname = function(name) {
      this.lowerCaseAttributeNames && (name = name.toLowerCase()), this.attribname = name;
    }, Parser4.prototype.onattribdata = function(value) {
      this.attribvalue += value;
    }, Parser4.prototype.onattribend = function(quote) {
      var _a, _b;
      (_b = (_a = this.cbs).onattribute) === null || _b === void 0 || _b.call(_a, this.attribname, this.attribvalue, quote), this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname) && (this.attribs[this.attribname] = this.attribvalue), this.attribname = "", this.attribvalue = "";
    }, Parser4.prototype.getInstructionName = function(value) {
      var idx = value.search(reNameEnd), name = idx < 0 ? value : value.substr(0, idx);
      return this.lowerCaseTagNames && (name = name.toLowerCase()), name;
    }, Parser4.prototype.ondeclaration = function(value) {
      if (this.cbs.onprocessinginstruction) {
        var name_1 = this.getInstructionName(value);
        this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
      }
    }, Parser4.prototype.onprocessinginstruction = function(value) {
      if (this.cbs.onprocessinginstruction) {
        var name_2 = this.getInstructionName(value);
        this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
      }
    }, Parser4.prototype.oncomment = function(value) {
      var _a, _b, _c, _d;
      this.updatePosition(4), (_b = (_a = this.cbs).oncomment) === null || _b === void 0 || _b.call(_a, value), (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 || _d.call(_c);
    }, Parser4.prototype.oncdata = function(value) {
      var _a, _b, _c, _d, _e, _f;
      this.updatePosition(1), this.options.xmlMode || this.options.recognizeCDATA ? ((_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 || _b.call(_a), (_d = (_c = this.cbs).ontext) === null || _d === void 0 || _d.call(_c, value), (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 || _f.call(_e)) : this.oncomment("[CDATA[" + value + "]]");
    }, Parser4.prototype.onerror = function(err) {
      var _a, _b;
      (_b = (_a = this.cbs).onerror) === null || _b === void 0 || _b.call(_a, err);
    }, Parser4.prototype.onend = function() {
      var _a, _b;
      if (this.cbs.onclosetag)
        for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))
          ;
      (_b = (_a = this.cbs).onend) === null || _b === void 0 || _b.call(_a);
    }, Parser4.prototype.reset = function() {
      var _a, _b, _c, _d;
      (_b = (_a = this.cbs).onreset) === null || _b === void 0 || _b.call(_a), this.tokenizer.reset(), this.tagname = "", this.attribname = "", this.attribs = null, this.stack = [], (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 || _d.call(_c, this);
    }, Parser4.prototype.parseComplete = function(data) {
      this.reset(), this.end(data);
    }, Parser4.prototype.write = function(chunk) {
      this.tokenizer.write(chunk);
    }, Parser4.prototype.end = function(chunk) {
      this.tokenizer.end(chunk);
    }, Parser4.prototype.pause = function() {
      this.tokenizer.pause();
    }, Parser4.prototype.resume = function() {
      this.tokenizer.resume();
    }, Parser4.prototype.parseChunk = function(chunk) {
      this.write(chunk);
    }, Parser4.prototype.done = function(chunk) {
      this.end(chunk);
    }, Parser4;
  }();
  exports.Parser = Parser3;
});

// node_modules/.pnpm/domhandler@4.0.0/node_modules/domhandler/lib/node.js
var require_node = __commonJS((exports) => {
  "use strict";
  var __extends = exports && exports.__extends || function() {
    var extendStatics = function(d, b) {
      return extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          Object.prototype.hasOwnProperty.call(b2, p) && (d2[p] = b2[p]);
      }, extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }(), __assign = exports && exports.__assign || function() {
    return __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
      }
      return t;
    }, __assign.apply(this, arguments);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.cloneNode = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
  var nodeTypes = new Map([
    ["tag", 1],
    ["script", 1],
    ["style", 1],
    ["directive", 1],
    ["text", 3],
    ["cdata", 4],
    ["comment", 8],
    ["root", 9]
  ]), Node = function() {
    function Node2(type) {
      this.type = type, this.parent = null, this.prev = null, this.next = null, this.startIndex = null, this.endIndex = null;
    }
    return Object.defineProperty(Node2.prototype, "nodeType", {
      get: function() {
        var _a;
        return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "parentNode", {
      get: function() {
        return this.parent;
      },
      set: function(parent) {
        this.parent = parent;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "previousSibling", {
      get: function() {
        return this.prev;
      },
      set: function(prev) {
        this.prev = prev;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "nextSibling", {
      get: function() {
        return this.next;
      },
      set: function(next) {
        this.next = next;
      },
      enumerable: !1,
      configurable: !0
    }), Node2.prototype.cloneNode = function(recursive) {
      return recursive === void 0 && (recursive = !1), cloneNode(this, recursive);
    }, Node2;
  }();
  exports.Node = Node;
  var DataNode = function(_super) {
    __extends(DataNode2, _super);
    function DataNode2(type, data) {
      var _this = _super.call(this, type) || this;
      return _this.data = data, _this;
    }
    return Object.defineProperty(DataNode2.prototype, "nodeValue", {
      get: function() {
        return this.data;
      },
      set: function(data) {
        this.data = data;
      },
      enumerable: !1,
      configurable: !0
    }), DataNode2;
  }(Node);
  exports.DataNode = DataNode;
  var Text2 = function(_super) {
    __extends(Text3, _super);
    function Text3(data) {
      return _super.call(this, "text", data) || this;
    }
    return Text3;
  }(DataNode);
  exports.Text = Text2;
  var Comment = function(_super) {
    __extends(Comment2, _super);
    function Comment2(data) {
      return _super.call(this, "comment", data) || this;
    }
    return Comment2;
  }(DataNode);
  exports.Comment = Comment;
  var ProcessingInstruction = function(_super) {
    __extends(ProcessingInstruction2, _super);
    function ProcessingInstruction2(name, data) {
      var _this = _super.call(this, "directive", data) || this;
      return _this.name = name, _this;
    }
    return ProcessingInstruction2;
  }(DataNode);
  exports.ProcessingInstruction = ProcessingInstruction;
  var NodeWithChildren = function(_super) {
    __extends(NodeWithChildren2, _super);
    function NodeWithChildren2(type, children) {
      var _this = _super.call(this, type) || this;
      return _this.children = children, _this;
    }
    return Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
      get: function() {
        var _a;
        return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
      get: function() {
        return this.children.length > 0 ? this.children[this.children.length - 1] : null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
      get: function() {
        return this.children;
      },
      set: function(children) {
        this.children = children;
      },
      enumerable: !1,
      configurable: !0
    }), NodeWithChildren2;
  }(Node);
  exports.NodeWithChildren = NodeWithChildren;
  var Document = function(_super) {
    __extends(Document2, _super);
    function Document2(children) {
      return _super.call(this, "root", children) || this;
    }
    return Document2;
  }(NodeWithChildren);
  exports.Document = Document;
  var Element = function(_super) {
    __extends(Element2, _super);
    function Element2(name, attribs, children) {
      children === void 0 && (children = []);
      var _this = _super.call(this, name === "script" ? "script" : name === "style" ? "style" : "tag", children) || this;
      return _this.name = name, _this.attribs = attribs, _this.attribs = attribs, _this;
    }
    return Object.defineProperty(Element2.prototype, "tagName", {
      get: function() {
        return this.name;
      },
      set: function(name) {
        this.name = name;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Element2.prototype, "attributes", {
      get: function() {
        var _this = this;
        return Object.keys(this.attribs).map(function(name) {
          var _a, _b;
          return {
            name,
            value: _this.attribs[name],
            namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
            prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
          };
        });
      },
      enumerable: !1,
      configurable: !0
    }), Element2;
  }(NodeWithChildren);
  exports.Element = Element;
  function cloneNode(node, recursive) {
    recursive === void 0 && (recursive = !1);
    var result;
    switch (node.type) {
      case "text":
        result = new Text2(node.data);
        break;
      case "directive": {
        var instr = node;
        result = new ProcessingInstruction(instr.name, instr.data), instr["x-name"] != null && (result["x-name"] = instr["x-name"], result["x-publicId"] = instr["x-publicId"], result["x-systemId"] = instr["x-systemId"]);
        break;
      }
      case "comment":
        result = new Comment(node.data);
        break;
      case "tag":
      case "script":
      case "style": {
        var elem = node, children = recursive ? cloneChildren(elem.children) : [], clone_1 = new Element(elem.name, __assign({}, elem.attribs), children);
        children.forEach(function(child) {
          return child.parent = clone_1;
        }), elem["x-attribsNamespace"] && (clone_1["x-attribsNamespace"] = __assign({}, elem["x-attribsNamespace"])), elem["x-attribsPrefix"] && (clone_1["x-attribsPrefix"] = __assign({}, elem["x-attribsPrefix"])), result = clone_1;
        break;
      }
      case "cdata": {
        var cdata = node, children = recursive ? cloneChildren(cdata.children) : [], clone_2 = new NodeWithChildren(node.type, children);
        children.forEach(function(child) {
          return child.parent = clone_2;
        }), result = clone_2;
        break;
      }
      case "root": {
        var doc = node, children = recursive ? cloneChildren(doc.children) : [], clone_3 = new Document(children);
        children.forEach(function(child) {
          return child.parent = clone_3;
        }), doc["x-mode"] && (clone_3["x-mode"] = doc["x-mode"]), result = clone_3;
        break;
      }
      case "doctype":
        throw new Error("Not implemented yet: ElementType.Doctype case");
    }
    return result.startIndex = node.startIndex, result.endIndex = node.endIndex, result;
  }
  exports.cloneNode = cloneNode;
  function cloneChildren(childs) {
    for (var children = childs.map(function(child) {
      return cloneNode(child, !0);
    }), i = 1; i < children.length; i++)
      children[i].prev = children[i - 1], children[i - 1].next = children[i];
    return children;
  }
});

// node_modules/.pnpm/domhandler@4.0.0/node_modules/domhandler/lib/index.js
var require_lib = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.DomHandler = void 0;
  var node_1 = require_node();
  __exportStar2(require_node(), exports);
  var reWhitespace = /\s+/g, defaultOpts = {
    normalizeWhitespace: !1,
    withStartIndices: !1,
    withEndIndices: !1
  }, DomHandler2 = function() {
    function DomHandler3(callback, options, elementCB) {
      this.dom = [], this.root = new node_1.Document(this.dom), this.done = !1, this.tagStack = [this.root], this.lastNode = null, this.parser = null, typeof options == "function" && (elementCB = options, options = defaultOpts), typeof callback == "object" && (options = callback, callback = void 0), this.callback = callback ?? null, this.options = options ?? defaultOpts, this.elementCB = elementCB ?? null;
    }
    return DomHandler3.prototype.onparserinit = function(parser) {
      this.parser = parser;
    }, DomHandler3.prototype.onreset = function() {
      var _a;
      this.dom = [], this.root = new node_1.Document(this.dom), this.done = !1, this.tagStack = [this.root], this.lastNode = null, this.parser = (_a = this.parser) !== null && _a !== void 0 ? _a : null;
    }, DomHandler3.prototype.onend = function() {
      this.done || (this.done = !0, this.parser = null, this.handleCallback(null));
    }, DomHandler3.prototype.onerror = function(error) {
      this.handleCallback(error);
    }, DomHandler3.prototype.onclosetag = function() {
      this.lastNode = null;
      var elem = this.tagStack.pop();
      this.options.withEndIndices && (elem.endIndex = this.parser.endIndex), this.elementCB && this.elementCB(elem);
    }, DomHandler3.prototype.onopentag = function(name, attribs) {
      var element = new node_1.Element(name, attribs);
      this.addNode(element), this.tagStack.push(element);
    }, DomHandler3.prototype.ontext = function(data) {
      var normalizeWhitespace = this.options.normalizeWhitespace, lastNode = this.lastNode;
      if (lastNode && lastNode.type === "text")
        normalizeWhitespace ? lastNode.data = (lastNode.data + data).replace(reWhitespace, " ") : lastNode.data += data;
      else {
        normalizeWhitespace && (data = data.replace(reWhitespace, " "));
        var node = new node_1.Text(data);
        this.addNode(node), this.lastNode = node;
      }
    }, DomHandler3.prototype.oncomment = function(data) {
      if (this.lastNode && this.lastNode.type === "comment") {
        this.lastNode.data += data;
        return;
      }
      var node = new node_1.Comment(data);
      this.addNode(node), this.lastNode = node;
    }, DomHandler3.prototype.oncommentend = function() {
      this.lastNode = null;
    }, DomHandler3.prototype.oncdatastart = function() {
      var text = new node_1.Text(""), node = new node_1.NodeWithChildren("cdata", [text]);
      this.addNode(node), text.parent = node, this.lastNode = text;
    }, DomHandler3.prototype.oncdataend = function() {
      this.lastNode = null;
    }, DomHandler3.prototype.onprocessinginstruction = function(name, data) {
      var node = new node_1.ProcessingInstruction(name, data);
      this.addNode(node);
    }, DomHandler3.prototype.handleCallback = function(error) {
      if (typeof this.callback == "function")
        this.callback(error, this.dom);
      else if (error)
        throw error;
    }, DomHandler3.prototype.addNode = function(node) {
      var parent = this.tagStack[this.tagStack.length - 1], previousSibling = parent.children[parent.children.length - 1];
      this.options.withStartIndices && (node.startIndex = this.parser.startIndex), this.options.withEndIndices && (node.endIndex = this.parser.endIndex), parent.children.push(node), previousSibling && (node.prev = previousSibling, previousSibling.next = node), node.parent = parent, this.lastNode = null;
    }, DomHandler3.prototype.addDataNode = function(node) {
      this.addNode(node), this.lastNode = node;
    }, DomHandler3;
  }();
  exports.DomHandler = DomHandler2;
  exports.default = DomHandler2;
});

// node_modules/.pnpm/domelementtype@2.1.0/node_modules/domelementtype/lib/index.js
var require_lib2 = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = void 0;
  function isTag(elem) {
    return elem.type === "tag" || elem.type === "script" || elem.type === "style";
  }
  exports.isTag = isTag;
  exports.Root = "root";
  exports.Text = "text";
  exports.Directive = "directive";
  exports.Comment = "comment";
  exports.Script = "script";
  exports.Style = "style";
  exports.Tag = "tag";
  exports.CDATA = "cdata";
  exports.Doctype = "doctype";
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/tagtypes.js
var require_tagtypes = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.hasChildren = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
  var domelementtype_1 = require_lib2();
  function isTag(node) {
    return domelementtype_1.isTag(node);
  }
  exports.isTag = isTag;
  function isCDATA(node) {
    return node.type === "cdata";
  }
  exports.isCDATA = isCDATA;
  function isText(node) {
    return node.type === "text";
  }
  exports.isText = isText;
  function isComment(node) {
    return node.type === "comment";
  }
  exports.isComment = isComment;
  function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
  }
  exports.hasChildren = hasChildren;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode.js
var require_decode2 = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
  var entities_json_1 = __importDefault(require_entities()), legacy_json_1 = __importDefault(require_legacy()), xml_json_1 = __importDefault(require_xml()), decode_codepoint_1 = __importDefault(require_decode_codepoint()), strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
  exports.decodeXML = getStrictDecoder(xml_json_1.default);
  exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
  function getStrictDecoder(map) {
    var replace = getReplacer(map);
    return function(str) {
      return String(str).replace(strictEntityRe, replace);
    };
  }
  var sorter = function(a, b) {
    return a < b ? 1 : -1;
  };
  exports.decodeHTML = function() {
    for (var legacy = Object.keys(legacy_json_1.default).sort(sorter), keys2 = Object.keys(entities_json_1.default).sort(sorter), i = 0, j = 0; i < keys2.length; i++)
      legacy[j] === keys2[i] ? (keys2[i] += ";?", j++) : keys2[i] += ";";
    var re = new RegExp("&(?:" + keys2.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"), replace = getReplacer(entities_json_1.default);
    function replacer(str) {
      return str.substr(-1) !== ";" && (str += ";"), replace(str);
    }
    return function(str) {
      return String(str).replace(re, replacer);
    };
  }();
  function getReplacer(map) {
    return function(str) {
      if (str.charAt(1) === "#") {
        var secondChar = str.charAt(2);
        return secondChar === "X" || secondChar === "x" ? decode_codepoint_1.default(parseInt(str.substr(3), 16)) : decode_codepoint_1.default(parseInt(str.substr(2), 10));
      }
      return map[str.slice(1, -1)] || str;
    };
  }
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/encode.js
var require_encode = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
  var xml_json_1 = __importDefault(require_xml()), inverseXML = getInverseObj(xml_json_1.default), xmlReplacer = getInverseReplacer(inverseXML);
  exports.encodeXML = getASCIIEncoder(inverseXML);
  var entities_json_1 = __importDefault(require_entities()), inverseHTML = getInverseObj(entities_json_1.default), htmlReplacer = getInverseReplacer(inverseHTML);
  exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
  exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
  function getInverseObj(obj) {
    return Object.keys(obj).sort().reduce(function(inverse, name) {
      return inverse[obj[name]] = "&" + name + ";", inverse;
    }, {});
  }
  function getInverseReplacer(inverse) {
    for (var single = [], multiple = [], _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
      var k = _a[_i];
      k.length === 1 ? single.push("\\" + k) : multiple.push(k);
    }
    single.sort();
    for (var start = 0; start < single.length - 1; start++) {
      for (var end = start; end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1); )
        end += 1;
      var count = 1 + end - start;
      count < 3 || single.splice(start, count, single[start] + "-" + single[end]);
    }
    return multiple.unshift("[" + single.join("") + "]"), new RegExp(multiple.join("|"), "g");
  }
  var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g, getCodePoint = String.prototype.codePointAt != null ? function(str) {
    return str.codePointAt(0);
  } : function(c) {
    return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
  };
  function singleCharReplacer(c) {
    return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
  }
  function getInverse(inverse, re) {
    return function(data) {
      return data.replace(re, function(name) {
        return inverse[name];
      }).replace(reNonASCII, singleCharReplacer);
    };
  }
  var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
  function escape(data) {
    return data.replace(reEscapeChars, singleCharReplacer);
  }
  exports.escape = escape;
  function escapeUTF8(data) {
    return data.replace(xmlReplacer, singleCharReplacer);
  }
  exports.escapeUTF8 = escapeUTF8;
  function getASCIIEncoder(obj) {
    return function(data) {
      return data.replace(reEscapeChars, function(c) {
        return obj[c] || singleCharReplacer(c);
      });
    };
  }
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/index.js
var require_lib3 = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
  var decode_1 = require_decode2(), encode_1 = require_encode();
  function decode(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
  }
  exports.decode = decode;
  function decodeStrict(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
  }
  exports.decodeStrict = decodeStrict;
  function encode(data, level) {
    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
  }
  exports.encode = encode;
  var encode_2 = require_encode();
  Object.defineProperty(exports, "encodeXML", {enumerable: !0, get: function() {
    return encode_2.encodeXML;
  }});
  Object.defineProperty(exports, "encodeHTML", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  Object.defineProperty(exports, "encodeNonAsciiHTML", {enumerable: !0, get: function() {
    return encode_2.encodeNonAsciiHTML;
  }});
  Object.defineProperty(exports, "escape", {enumerable: !0, get: function() {
    return encode_2.escape;
  }});
  Object.defineProperty(exports, "escapeUTF8", {enumerable: !0, get: function() {
    return encode_2.escapeUTF8;
  }});
  Object.defineProperty(exports, "encodeHTML4", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  Object.defineProperty(exports, "encodeHTML5", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  var decode_2 = require_decode2();
  Object.defineProperty(exports, "decodeXML", {enumerable: !0, get: function() {
    return decode_2.decodeXML;
  }});
  Object.defineProperty(exports, "decodeHTML", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTMLStrict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeHTML4", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTML5", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTML4Strict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeHTML5Strict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeXMLStrict", {enumerable: !0, get: function() {
    return decode_2.decodeXML;
  }});
});

// node_modules/.pnpm/dom-serializer@1.2.0/node_modules/dom-serializer/lib/foreignNames.js
var require_foreignNames = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.attributeNames = exports.elementNames = void 0;
  exports.elementNames = new Map([
    ["altglyph", "altGlyph"],
    ["altglyphdef", "altGlyphDef"],
    ["altglyphitem", "altGlyphItem"],
    ["animatecolor", "animateColor"],
    ["animatemotion", "animateMotion"],
    ["animatetransform", "animateTransform"],
    ["clippath", "clipPath"],
    ["feblend", "feBlend"],
    ["fecolormatrix", "feColorMatrix"],
    ["fecomponenttransfer", "feComponentTransfer"],
    ["fecomposite", "feComposite"],
    ["feconvolvematrix", "feConvolveMatrix"],
    ["fediffuselighting", "feDiffuseLighting"],
    ["fedisplacementmap", "feDisplacementMap"],
    ["fedistantlight", "feDistantLight"],
    ["fedropshadow", "feDropShadow"],
    ["feflood", "feFlood"],
    ["fefunca", "feFuncA"],
    ["fefuncb", "feFuncB"],
    ["fefuncg", "feFuncG"],
    ["fefuncr", "feFuncR"],
    ["fegaussianblur", "feGaussianBlur"],
    ["feimage", "feImage"],
    ["femerge", "feMerge"],
    ["femergenode", "feMergeNode"],
    ["femorphology", "feMorphology"],
    ["feoffset", "feOffset"],
    ["fepointlight", "fePointLight"],
    ["fespecularlighting", "feSpecularLighting"],
    ["fespotlight", "feSpotLight"],
    ["fetile", "feTile"],
    ["feturbulence", "feTurbulence"],
    ["foreignobject", "foreignObject"],
    ["glyphref", "glyphRef"],
    ["lineargradient", "linearGradient"],
    ["radialgradient", "radialGradient"],
    ["textpath", "textPath"]
  ]);
  exports.attributeNames = new Map([
    ["definitionurl", "definitionURL"],
    ["attributename", "attributeName"],
    ["attributetype", "attributeType"],
    ["basefrequency", "baseFrequency"],
    ["baseprofile", "baseProfile"],
    ["calcmode", "calcMode"],
    ["clippathunits", "clipPathUnits"],
    ["diffuseconstant", "diffuseConstant"],
    ["edgemode", "edgeMode"],
    ["filterunits", "filterUnits"],
    ["glyphref", "glyphRef"],
    ["gradienttransform", "gradientTransform"],
    ["gradientunits", "gradientUnits"],
    ["kernelmatrix", "kernelMatrix"],
    ["kernelunitlength", "kernelUnitLength"],
    ["keypoints", "keyPoints"],
    ["keysplines", "keySplines"],
    ["keytimes", "keyTimes"],
    ["lengthadjust", "lengthAdjust"],
    ["limitingconeangle", "limitingConeAngle"],
    ["markerheight", "markerHeight"],
    ["markerunits", "markerUnits"],
    ["markerwidth", "markerWidth"],
    ["maskcontentunits", "maskContentUnits"],
    ["maskunits", "maskUnits"],
    ["numoctaves", "numOctaves"],
    ["pathlength", "pathLength"],
    ["patterncontentunits", "patternContentUnits"],
    ["patterntransform", "patternTransform"],
    ["patternunits", "patternUnits"],
    ["pointsatx", "pointsAtX"],
    ["pointsaty", "pointsAtY"],
    ["pointsatz", "pointsAtZ"],
    ["preservealpha", "preserveAlpha"],
    ["preserveaspectratio", "preserveAspectRatio"],
    ["primitiveunits", "primitiveUnits"],
    ["refx", "refX"],
    ["refy", "refY"],
    ["repeatcount", "repeatCount"],
    ["repeatdur", "repeatDur"],
    ["requiredextensions", "requiredExtensions"],
    ["requiredfeatures", "requiredFeatures"],
    ["specularconstant", "specularConstant"],
    ["specularexponent", "specularExponent"],
    ["spreadmethod", "spreadMethod"],
    ["startoffset", "startOffset"],
    ["stddeviation", "stdDeviation"],
    ["stitchtiles", "stitchTiles"],
    ["surfacescale", "surfaceScale"],
    ["systemlanguage", "systemLanguage"],
    ["tablevalues", "tableValues"],
    ["targetx", "targetX"],
    ["targety", "targetY"],
    ["textlength", "textLength"],
    ["viewbox", "viewBox"],
    ["viewtarget", "viewTarget"],
    ["xchannelselector", "xChannelSelector"],
    ["ychannelselector", "yChannelSelector"],
    ["zoomandpan", "zoomAndPan"]
  ]);
});

// node_modules/.pnpm/dom-serializer@1.2.0/node_modules/dom-serializer/lib/index.js
var require_lib4 = __commonJS((exports) => {
  "use strict";
  var __assign = exports && exports.__assign || function() {
    return __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
      }
      return t;
    }, __assign.apply(this, arguments);
  }, __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: !0, value: v});
  } : function(o, v) {
    o.default = v;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var ElementType = __importStar(require_lib2()), entities_1 = require_lib3(), foreignNames_1 = require_foreignNames(), unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript"
  ]);
  function formatAttributes(attributes, opts) {
    if (!!attributes)
      return Object.keys(attributes).map(function(key) {
        var _a, _b, value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        return opts.xmlMode === "foreign" && (key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key), !opts.emptyAttrs && !opts.xmlMode && value === "" ? key : key + '="' + (opts.decodeEntities ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + '"';
      }).join(" ");
  }
  var singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]);
  function render(node, options) {
    options === void 0 && (options = {});
    for (var nodes = Array.isArray(node) || node.cheerio ? node : [node], output = "", i = 0; i < nodes.length; i++)
      output += renderNode(nodes[i], options);
    return output;
  }
  exports.default = render;
  function renderNode(node, options) {
    switch (node.type) {
      case ElementType.Root:
        return render(node.children, options);
      case ElementType.Directive:
      case ElementType.Doctype:
        return renderDirective(node);
      case ElementType.Comment:
        return renderComment(node);
      case ElementType.CDATA:
        return renderCdata(node);
      case ElementType.Script:
      case ElementType.Style:
      case ElementType.Tag:
        return renderTag(node, options);
      case ElementType.Text:
        return renderText(node, options);
    }
  }
  var foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
  ]), foreignElements = new Set(["svg", "math"]);
  function renderTag(elem, opts) {
    var _a;
    opts.xmlMode === "foreign" && (elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name, elem.parent && foreignModeIntegrationPoints.has(elem.parent.name) && (opts = __assign(__assign({}, opts), {xmlMode: !1}))), !opts.xmlMode && foreignElements.has(elem.name) && (opts = __assign(__assign({}, opts), {xmlMode: "foreign"}));
    var tag = "<" + elem.name, attribs = formatAttributes(elem.attribs, opts);
    return attribs && (tag += " " + attribs), elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== !1 : opts.selfClosingTags && singleTag.has(elem.name)) ? (opts.xmlMode || (tag += " "), tag += "/>") : (tag += ">", elem.children.length > 0 && (tag += render(elem.children, opts)), (opts.xmlMode || !singleTag.has(elem.name)) && (tag += "</" + elem.name + ">")), tag;
  }
  function renderDirective(elem) {
    return "<" + elem.data + ">";
  }
  function renderText(elem, opts) {
    var data = elem.data || "";
    return opts.decodeEntities && !(elem.parent && unencodedElements.has(elem.parent.name)) && (data = entities_1.encodeXML(data)), data;
  }
  function renderCdata(elem) {
    return "<![CDATA[" + elem.children[0].data + "]]>";
  }
  function renderComment(elem) {
    return "<!--" + elem.data + "-->";
  }
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/stringify.js
var require_stringify = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
  var tagtypes_1 = require_tagtypes(), dom_serializer_1 = __importDefault(require_lib4());
  function getOuterHTML(node, options) {
    return dom_serializer_1.default(node, options);
  }
  exports.getOuterHTML = getOuterHTML;
  function getInnerHTML(node, options) {
    return tagtypes_1.hasChildren(node) ? node.children.map(function(node2) {
      return getOuterHTML(node2, options);
    }).join("") : "";
  }
  exports.getInnerHTML = getInnerHTML;
  function getText(node) {
    return Array.isArray(node) ? node.map(getText).join("") : tagtypes_1.isTag(node) ? node.name === "br" ? `
` : getText(node.children) : tagtypes_1.isCDATA(node) ? getText(node.children) : tagtypes_1.isText(node) ? node.data : "";
  }
  exports.getText = getText;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/traversal.js
var require_traversal = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
  var tagtypes_1 = require_tagtypes(), emptyArray = [];
  function getChildren(elem) {
    var _a;
    return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
  }
  exports.getChildren = getChildren;
  function getParent(elem) {
    return elem.parent || null;
  }
  exports.getParent = getParent;
  function getSiblings(elem) {
    var _a, _b, parent = getParent(elem);
    if (parent != null)
      return getChildren(parent);
    for (var siblings = [elem], prev = elem.prev, next = elem.next; prev != null; )
      siblings.unshift(prev), _a = prev, prev = _a.prev;
    for (; next != null; )
      siblings.push(next), _b = next, next = _b.next;
    return siblings;
  }
  exports.getSiblings = getSiblings;
  function getAttributeValue(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
  }
  exports.getAttributeValue = getAttributeValue;
  function hasAttrib(elem, name) {
    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
  }
  exports.hasAttrib = hasAttrib;
  function getName(elem) {
    return elem.name;
  }
  exports.getName = getName;
  function nextElementSibling(elem) {
    for (var _a, next = elem.next; next !== null && !tagtypes_1.isTag(next); )
      _a = next, next = _a.next;
    return next;
  }
  exports.nextElementSibling = nextElementSibling;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/manipulation.js
var require_manipulation = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
  function removeElement(elem) {
    if (elem.prev && (elem.prev.next = elem.next), elem.next && (elem.next.prev = elem.prev), elem.parent) {
      var childs = elem.parent.children;
      childs.splice(childs.lastIndexOf(elem), 1);
    }
  }
  exports.removeElement = removeElement;
  function replaceElement(elem, replacement) {
    var prev = replacement.prev = elem.prev;
    prev && (prev.next = replacement);
    var next = replacement.next = elem.next;
    next && (next.prev = replacement);
    var parent = replacement.parent = elem.parent;
    if (parent) {
      var childs = parent.children;
      childs[childs.lastIndexOf(elem)] = replacement;
    }
  }
  exports.replaceElement = replaceElement;
  function appendChild(elem, child) {
    if (removeElement(child), child.next = null, child.parent = elem, elem.children.push(child) > 1) {
      var sibling = elem.children[elem.children.length - 2];
      sibling.next = child, child.prev = sibling;
    } else
      child.prev = null;
  }
  exports.appendChild = appendChild;
  function append(elem, next) {
    removeElement(next);
    var parent = elem.parent, currNext = elem.next;
    if (next.next = currNext, next.prev = elem, elem.next = next, next.parent = parent, currNext) {
      if (currNext.prev = next, parent) {
        var childs = parent.children;
        childs.splice(childs.lastIndexOf(currNext), 0, next);
      }
    } else
      parent && parent.children.push(next);
  }
  exports.append = append;
  function prependChild(elem, child) {
    if (removeElement(child), child.parent = elem, child.prev = null, elem.children.unshift(child) !== 1) {
      var sibling = elem.children[1];
      sibling.prev = child, child.next = sibling;
    } else
      child.next = null;
  }
  exports.prependChild = prependChild;
  function prepend(elem, prev) {
    removeElement(prev);
    var parent = elem.parent;
    if (parent) {
      var childs = parent.children;
      childs.splice(childs.indexOf(elem), 0, prev);
    }
    elem.prev && (elem.prev.next = prev), prev.parent = parent, prev.prev = elem.prev, prev.next = elem, elem.prev = prev;
  }
  exports.prepend = prepend;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/querying.js
var require_querying = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
  var tagtypes_1 = require_tagtypes();
  function filter(test, node, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), Array.isArray(node) || (node = [node]), find(test, node, recurse, limit);
  }
  exports.filter = filter;
  function find(test, nodes, recurse, limit) {
    for (var result = [], _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
      var elem = nodes_1[_i];
      if (test(elem) && (result.push(elem), --limit <= 0))
        break;
      if (recurse && tagtypes_1.hasChildren(elem) && elem.children.length > 0) {
        var children = find(test, elem.children, recurse, limit);
        if (result.push.apply(result, children), limit -= children.length, limit <= 0)
          break;
      }
    }
    return result;
  }
  exports.find = find;
  function findOneChild(test, nodes) {
    return nodes.find(test);
  }
  exports.findOneChild = findOneChild;
  function findOne(test, nodes, recurse) {
    recurse === void 0 && (recurse = !0);
    for (var elem = null, i = 0; i < nodes.length && !elem; i++) {
      var checked = nodes[i];
      if (tagtypes_1.isTag(checked))
        test(checked) ? elem = checked : recurse && checked.children.length > 0 && (elem = findOne(test, checked.children));
      else
        continue;
    }
    return elem;
  }
  exports.findOne = findOne;
  function existsOne(test, nodes) {
    return nodes.some(function(checked) {
      return tagtypes_1.isTag(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));
    });
  }
  exports.existsOne = existsOne;
  function findAll(test, nodes) {
    for (var _a, result = [], stack = nodes.filter(tagtypes_1.isTag), elem; elem = stack.shift(); ) {
      var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(tagtypes_1.isTag);
      children && children.length > 0 && stack.unshift.apply(stack, children), test(elem) && result.push(elem);
    }
    return result;
  }
  exports.findAll = findAll;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/legacy.js
var require_legacy2 = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
  var querying_1 = require_querying(), tagtypes_1 = require_tagtypes(), Checks = {
    tag_name: function(name) {
      return typeof name == "function" ? function(elem) {
        return tagtypes_1.isTag(elem) && name(elem.name);
      } : name === "*" ? tagtypes_1.isTag : function(elem) {
        return tagtypes_1.isTag(elem) && elem.name === name;
      };
    },
    tag_type: function(type) {
      return typeof type == "function" ? function(elem) {
        return type(elem.type);
      } : function(elem) {
        return elem.type === type;
      };
    },
    tag_contains: function(data) {
      return typeof data == "function" ? function(elem) {
        return tagtypes_1.isText(elem) && data(elem.data);
      } : function(elem) {
        return tagtypes_1.isText(elem) && elem.data === data;
      };
    }
  };
  function getAttribCheck(attrib, value) {
    return typeof value == "function" ? function(elem) {
      return tagtypes_1.isTag(elem) && value(elem.attribs[attrib]);
    } : function(elem) {
      return tagtypes_1.isTag(elem) && elem.attribs[attrib] === value;
    };
  }
  function combineFuncs(a, b) {
    return function(elem) {
      return a(elem) || b(elem);
    };
  }
  function compileTest(options) {
    var funcs = Object.keys(options).map(function(key) {
      var value = options[key];
      return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
  }
  function testElement(options, node) {
    var test = compileTest(options);
    return test ? test(node) : !0;
  }
  exports.testElement = testElement;
  function getElements(options, nodes, recurse, limit) {
    limit === void 0 && (limit = Infinity);
    var test = compileTest(options);
    return test ? querying_1.filter(test, nodes, recurse, limit) : [];
  }
  exports.getElements = getElements;
  function getElementById(id, nodes, recurse) {
    return recurse === void 0 && (recurse = !0), Array.isArray(nodes) || (nodes = [nodes]), querying_1.findOne(getAttribCheck("id", id), nodes, recurse);
  }
  exports.getElementById = getElementById;
  function getElementsByTagName(tagName, nodes, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), querying_1.filter(Checks.tag_name(tagName), nodes, recurse, limit);
  }
  exports.getElementsByTagName = getElementsByTagName;
  function getElementsByTagType(type, nodes, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), querying_1.filter(Checks.tag_type(type), nodes, recurse, limit);
  }
  exports.getElementsByTagType = getElementsByTagType;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/helpers.js
var require_helpers = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;
  var tagtypes_1 = require_tagtypes();
  function removeSubsets(nodes) {
    for (var idx = nodes.length; --idx >= 0; ) {
      var node = nodes[idx];
      if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
        nodes.splice(idx, 1);
        continue;
      }
      for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent)
        if (nodes.includes(ancestor)) {
          nodes.splice(idx, 1);
          break;
        }
    }
    return nodes;
  }
  exports.removeSubsets = removeSubsets;
  function compareDocumentPosition(nodeA, nodeB) {
    var aParents = [], bParents = [];
    if (nodeA === nodeB)
      return 0;
    for (var current = tagtypes_1.hasChildren(nodeA) ? nodeA : nodeA.parent; current; )
      aParents.unshift(current), current = current.parent;
    for (current = tagtypes_1.hasChildren(nodeB) ? nodeB : nodeB.parent; current; )
      bParents.unshift(current), current = current.parent;
    for (var maxIdx = Math.min(aParents.length, bParents.length), idx = 0; idx < maxIdx && aParents[idx] === bParents[idx]; )
      idx++;
    if (idx === 0)
      return 1;
    var sharedParent = aParents[idx - 1], siblings = sharedParent.children, aSibling = aParents[idx], bSibling = bParents[idx];
    return siblings.indexOf(aSibling) > siblings.indexOf(bSibling) ? sharedParent === nodeB ? 4 | 16 : 4 : sharedParent === nodeA ? 2 | 8 : 2;
  }
  exports.compareDocumentPosition = compareDocumentPosition;
  function uniqueSort(nodes) {
    return nodes = nodes.filter(function(node, i, arr) {
      return !arr.includes(node, i + 1);
    }), nodes.sort(function(a, b) {
      var relative = compareDocumentPosition(a, b);
      return relative & 2 ? -1 : relative & 4 ? 1 : 0;
    }), nodes;
  }
  exports.uniqueSort = uniqueSort;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/index.js
var require_lib5 = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  __exportStar2(require_stringify(), exports);
  __exportStar2(require_traversal(), exports);
  __exportStar2(require_manipulation(), exports);
  __exportStar2(require_querying(), exports);
  __exportStar2(require_legacy2(), exports);
  __exportStar2(require_helpers(), exports);
  __exportStar2(require_tagtypes(), exports);
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/FeedHandler.js
var require_FeedHandler = __commonJS((exports) => {
  "use strict";
  var __extends = exports && exports.__extends || function() {
    var extendStatics = function(d, b) {
      return extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          Object.prototype.hasOwnProperty.call(b2, p) && (d2[p] = b2[p]);
      }, extendStatics(d, b);
    };
    return function(d, b) {
      if (typeof b != "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }(), __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: !0, value: v});
  } : function(o, v) {
    o.default = v;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
  }, __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.parseFeed = exports.FeedHandler = void 0;
  var domhandler_1 = __importDefault(require_lib()), DomUtils3 = __importStar(require_lib5()), Parser_1 = require_Parser(), FeedItemMediaMedium;
  (function(FeedItemMediaMedium2) {
    FeedItemMediaMedium2[FeedItemMediaMedium2.image = 0] = "image", FeedItemMediaMedium2[FeedItemMediaMedium2.audio = 1] = "audio", FeedItemMediaMedium2[FeedItemMediaMedium2.video = 2] = "video", FeedItemMediaMedium2[FeedItemMediaMedium2.document = 3] = "document", FeedItemMediaMedium2[FeedItemMediaMedium2.executable = 4] = "executable";
  })(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
  var FeedItemMediaExpression;
  (function(FeedItemMediaExpression2) {
    FeedItemMediaExpression2[FeedItemMediaExpression2.sample = 0] = "sample", FeedItemMediaExpression2[FeedItemMediaExpression2.full = 1] = "full", FeedItemMediaExpression2[FeedItemMediaExpression2.nonstop = 2] = "nonstop";
  })(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
  var FeedHandler = function(_super) {
    __extends(FeedHandler2, _super);
    function FeedHandler2(callback, options) {
      var _this = this;
      return typeof callback == "object" && (callback = void 0, options = callback), _this = _super.call(this, callback, options) || this, _this;
    }
    return FeedHandler2.prototype.onend = function() {
      var _a, _b, feedRoot = getOneElement(isValidFeed, this.dom);
      if (!feedRoot) {
        this.handleCallback(new Error("couldn't find root of feed"));
        return;
      }
      var feed = {};
      if (feedRoot.name === "feed") {
        var childs = feedRoot.children;
        feed.type = "atom", addConditionally(feed, "id", "id", childs), addConditionally(feed, "title", "title", childs);
        var href = getAttribute("href", getOneElement("link", childs));
        href && (feed.link = href), addConditionally(feed, "description", "subtitle", childs);
        var updated = fetch2("updated", childs);
        updated && (feed.updated = new Date(updated)), addConditionally(feed, "author", "email", childs, !0), feed.items = getElements("entry", childs).map(function(item) {
          var entry = {}, children = item.children;
          addConditionally(entry, "id", "id", children), addConditionally(entry, "title", "title", children);
          var href2 = getAttribute("href", getOneElement("link", children));
          href2 && (entry.link = href2);
          var description = fetch2("summary", children) || fetch2("content", children);
          description && (entry.description = description);
          var pubDate = fetch2("updated", children);
          return pubDate && (entry.pubDate = new Date(pubDate)), entry.media = getMediaElements(children), entry;
        });
      } else {
        var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
        feed.type = feedRoot.name.substr(0, 3), feed.id = "", addConditionally(feed, "title", "title", childs), addConditionally(feed, "link", "link", childs), addConditionally(feed, "description", "description", childs);
        var updated = fetch2("lastBuildDate", childs);
        updated && (feed.updated = new Date(updated)), addConditionally(feed, "author", "managingEditor", childs, !0), feed.items = getElements("item", feedRoot.children).map(function(item) {
          var entry = {}, children = item.children;
          addConditionally(entry, "id", "guid", children), addConditionally(entry, "title", "title", children), addConditionally(entry, "link", "link", children), addConditionally(entry, "description", "description", children);
          var pubDate = fetch2("pubDate", children);
          return pubDate && (entry.pubDate = new Date(pubDate)), entry.media = getMediaElements(children), entry;
        });
      }
      this.feed = feed, this.handleCallback(null);
    }, FeedHandler2;
  }(domhandler_1.default);
  exports.FeedHandler = FeedHandler;
  function getMediaElements(where) {
    return getElements("media:content", where).map(function(elem) {
      var media = {
        medium: elem.attribs.medium,
        isDefault: !!elem.attribs.isDefault
      };
      return elem.attribs.url && (media.url = elem.attribs.url), elem.attribs.fileSize && (media.fileSize = parseInt(elem.attribs.fileSize, 10)), elem.attribs.type && (media.type = elem.attribs.type), elem.attribs.expression && (media.expression = elem.attribs.expression), elem.attribs.bitrate && (media.bitrate = parseInt(elem.attribs.bitrate, 10)), elem.attribs.framerate && (media.framerate = parseInt(elem.attribs.framerate, 10)), elem.attribs.samplingrate && (media.samplingrate = parseInt(elem.attribs.samplingrate, 10)), elem.attribs.channels && (media.channels = parseInt(elem.attribs.channels, 10)), elem.attribs.duration && (media.duration = parseInt(elem.attribs.duration, 10)), elem.attribs.height && (media.height = parseInt(elem.attribs.height, 10)), elem.attribs.width && (media.width = parseInt(elem.attribs.width, 10)), elem.attribs.lang && (media.lang = elem.attribs.lang), media;
    });
  }
  function getElements(tagName, where) {
    return DomUtils3.getElementsByTagName(tagName, where, !0);
  }
  function getOneElement(tagName, node) {
    return DomUtils3.getElementsByTagName(tagName, node, !0, 1)[0];
  }
  function fetch2(tagName, where, recurse) {
    return recurse === void 0 && (recurse = !1), DomUtils3.getText(DomUtils3.getElementsByTagName(tagName, where, recurse, 1)).trim();
  }
  function getAttribute(name, elem) {
    if (!elem)
      return null;
    var attribs = elem.attribs;
    return attribs[name];
  }
  function addConditionally(obj, prop, what, where, recurse) {
    recurse === void 0 && (recurse = !1);
    var tmp = fetch2(what, where, recurse);
    tmp && (obj[prop] = tmp);
  }
  function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
  }
  function parseFeed(feed, options) {
    options === void 0 && (options = {xmlMode: !0});
    var handler = new FeedHandler(options);
    return new Parser_1.Parser(handler, options).end(feed), handler.feed;
  }
  exports.parseFeed = parseFeed;
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/index.js
var require_lib6 = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: !0, value: v});
  } : function(o, v) {
    o.default = v;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
  }, __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
  }, __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
  var Parser_1 = require_Parser();
  Object.defineProperty(exports, "Parser", {enumerable: !0, get: function() {
    return Parser_1.Parser;
  }});
  var domhandler_1 = require_lib();
  Object.defineProperty(exports, "DomHandler", {enumerable: !0, get: function() {
    return domhandler_1.DomHandler;
  }});
  Object.defineProperty(exports, "DefaultHandler", {enumerable: !0, get: function() {
    return domhandler_1.DomHandler;
  }});
  function parseDocument2(data, options) {
    var handler = new domhandler_1.DomHandler(void 0, options);
    return new Parser_1.Parser(handler, options).end(data), handler.root;
  }
  exports.parseDocument = parseDocument2;
  function parseDOM(data, options) {
    return parseDocument2(data, options).children;
  }
  exports.parseDOM = parseDOM;
  function createDomStream(cb, options, elementCb) {
    var handler = new domhandler_1.DomHandler(cb, options, elementCb);
    return new Parser_1.Parser(handler, options);
  }
  exports.createDomStream = createDomStream;
  var Tokenizer_1 = require_Tokenizer();
  Object.defineProperty(exports, "Tokenizer", {enumerable: !0, get: function() {
    return __importDefault(Tokenizer_1).default;
  }});
  var ElementType = __importStar(require_lib2());
  exports.ElementType = ElementType;
  __exportStar2(require_FeedHandler(), exports);
  exports.DomUtils = __importStar(require_lib5());
  var FeedHandler_1 = require_FeedHandler();
  Object.defineProperty(exports, "RssHandler", {enumerable: !0, get: function() {
    return FeedHandler_1.FeedHandler;
  }});
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isBuffer.js
var require_isBuffer = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => isBuffer_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, Buffer2 = moduleExports ? root_default.Buffer : void 0, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, isBuffer3 = nativeIsBuffer || stubFalse_default, isBuffer_default = isBuffer3;
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nodeUtil.js
var require_nodeUtil = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => nodeUtil_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, freeProcess = moduleExports && freeGlobal_default.process, nodeUtil4 = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      return types || freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }(), nodeUtil_default = nodeUtil4;
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneBuffer.js
var require_cloneBuffer = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => cloneBuffer_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, Buffer2 = moduleExports ? root_default.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
  function cloneBuffer2(buffer, isDeep) {
    if (isDeep)
      return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    return buffer.copy(result), result;
  }
  var cloneBuffer_default = cloneBuffer2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/constants.js
var require_constants = __commonJS((exports, module) => {
  var SEMVER_SPEC_VERSION = "2.0.0", MAX_LENGTH = 256, MAX_SAFE_INTEGER3 = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_COMPONENT_LENGTH = 16;
  module.exports = {
    SEMVER_SPEC_VERSION,
    MAX_LENGTH,
    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER3,
    MAX_SAFE_COMPONENT_LENGTH
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/debug.js
var require_debug = __commonJS((exports, module) => {
  var debug = typeof process == "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  module.exports = debug;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/re.js
var require_re = __commonJS((exports, module) => {
  var {MAX_SAFE_COMPONENT_LENGTH} = require_constants(), debug = require_debug();
  exports = module.exports = {};
  var re = exports.re = [], src = exports.src = [], t = exports.t = {}, R = 0, createToken = (name, value, isGlobal) => {
    let index = R++;
    debug(index, value), t[name] = index, src[index] = value, re[index] = new RegExp(value, isGlobal ? "g" : void 0);
  };
  createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
  createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
  createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
  createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
  createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
  createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
  createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
  createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
  createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
  createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
  createToken("FULL", `^${src[t.FULLPLAIN]}$`);
  createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
  createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
  createToken("GTLT", "((?:<|>)?=?)");
  createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
  createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
  createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
  createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
  createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
  createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
  createToken("COERCERTL", src[t.COERCE], !0);
  createToken("LONETILDE", "(?:~>?)");
  createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, !0);
  exports.tildeTrimReplace = "$1~";
  createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
  createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("LONECARET", "(?:\\^)");
  createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, !0);
  exports.caretTrimReplace = "$1^";
  createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
  createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
  createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
  createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, !0);
  exports.comparatorTrimReplace = "$1$2$3";
  createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
  createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
  createToken("STAR", "(<|>)?=?\\s*\\*");
  createToken("GTE0", "^\\s*>=\\s*0.0.0\\s*$");
  createToken("GTE0PRE", "^\\s*>=\\s*0.0.0-0\\s*$");
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS((exports, module) => {
  var opts = ["includePrerelease", "loose", "rtl"], parseOptions = (options) => options ? typeof options != "object" ? {loose: !0} : opts.filter((k) => options[k]).reduce((options2, k) => (options2[k] = !0, options2), {}) : {};
  module.exports = parseOptions;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS((exports, module) => {
  var numeric = /^[0-9]+$/, compareIdentifiers = (a, b) => {
    let anum = numeric.test(a), bnum = numeric.test(b);
    return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }, rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
  module.exports = {
    compareIdentifiers,
    rcompareIdentifiers
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/semver.js
var require_semver = __commonJS((exports, module) => {
  var debug = require_debug(), {MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER3} = require_constants(), {re, t} = require_re(), parseOptions = require_parse_options(), {compareIdentifiers} = require_identifiers(), SemVer = class {
    constructor(version, options) {
      if (options = parseOptions(options), version instanceof SemVer) {
        if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease)
          return version;
        version = version.version;
      } else if (typeof version != "string")
        throw new TypeError(`Invalid Version: ${version}`);
      if (version.length > MAX_LENGTH)
        throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
      debug("SemVer", version, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
      let m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m)
        throw new TypeError(`Invalid Version: ${version}`);
      if (this.raw = version, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER3 || this.major < 0)
        throw new TypeError("Invalid major version");
      if (this.minor > MAX_SAFE_INTEGER3 || this.minor < 0)
        throw new TypeError("Invalid minor version");
      if (this.patch > MAX_SAFE_INTEGER3 || this.patch < 0)
        throw new TypeError("Invalid patch version");
      m[4] ? this.prerelease = m[4].split(".").map((id) => {
        if (/^[0-9]+$/.test(id)) {
          let num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER3)
            return num;
        }
        return id;
      }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
    }
    format() {
      return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer)) {
        if (typeof other == "string" && other === this.version)
          return 0;
        other = new SemVer(other, this.options);
      }
      return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
      if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
        return -1;
      if (!this.prerelease.length && other.prerelease.length)
        return 1;
      if (!this.prerelease.length && !other.prerelease.length)
        return 0;
      let i = 0;
      do {
        let a = this.prerelease[i], b = other.prerelease[i];
        if (debug("prerelease compare", i, a, b), a === void 0 && b === void 0)
          return 0;
        if (b === void 0)
          return 1;
        if (a === void 0)
          return -1;
        if (a === b)
          continue;
        return compareIdentifiers(a, b);
      } while (++i);
    }
    compareBuild(other) {
      other instanceof SemVer || (other = new SemVer(other, this.options));
      let i = 0;
      do {
        let a = this.build[i], b = other.build[i];
        if (debug("prerelease compare", i, a, b), a === void 0 && b === void 0)
          return 0;
        if (b === void 0)
          return 1;
        if (a === void 0)
          return -1;
        if (a === b)
          continue;
        return compareIdentifiers(a, b);
      } while (++i);
    }
    inc(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
          break;
        case "prerelease":
          this.prerelease.length === 0 && this.inc("patch", identifier), this.inc("pre", identifier);
          break;
        case "major":
          (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
          break;
        case "minor":
          (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
          break;
        case "patch":
          this.prerelease.length === 0 && this.patch++, this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0)
            this.prerelease = [0];
          else {
            let i = this.prerelease.length;
            for (; --i >= 0; )
              typeof this.prerelease[i] == "number" && (this.prerelease[i]++, i = -2);
            i === -1 && this.prerelease.push(0);
          }
          identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
          break;
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      return this.format(), this.raw = this.version, this;
    }
  };
  module.exports = SemVer;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/parse.js
var require_parse = __commonJS((exports, module) => {
  var {MAX_LENGTH} = require_constants(), {re, t} = require_re(), SemVer = require_semver(), parseOptions = require_parse_options(), parse = (version, options) => {
    if (options = parseOptions(options), version instanceof SemVer)
      return version;
    if (typeof version != "string" || version.length > MAX_LENGTH || !(options.loose ? re[t.LOOSE] : re[t.FULL]).test(version))
      return null;
    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  };
  module.exports = parse;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/valid.js
var require_valid = __commonJS((exports, module) => {
  var parse = require_parse(), valid = (version, options) => {
    let v = parse(version, options);
    return v ? v.version : null;
  };
  module.exports = valid;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/clean.js
var require_clean = __commonJS((exports, module) => {
  var parse = require_parse(), clean2 = (version, options) => {
    let s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
  };
  module.exports = clean2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/inc.js
var require_inc = __commonJS((exports, module) => {
  var SemVer = require_semver(), inc = (version, release, options, identifier) => {
    typeof options == "string" && (identifier = options, options = void 0);
    try {
      return new SemVer(version, options).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  };
  module.exports = inc;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare.js
var require_compare = __commonJS((exports, module) => {
  var SemVer = require_semver(), compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
  module.exports = compare;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/eq.js
var require_eq = __commonJS((exports, module) => {
  var compare = require_compare(), eq2 = (a, b, loose) => compare(a, b, loose) === 0;
  module.exports = eq2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/diff.js
var require_diff = __commonJS((exports, module) => {
  var parse = require_parse(), eq2 = require_eq(), diff = (version1, version2) => {
    if (eq2(version1, version2))
      return null;
    {
      let v1 = parse(version1), v2 = parse(version2), hasPre = v1.prerelease.length || v2.prerelease.length, prefix = hasPre ? "pre" : "", defaultResult = hasPre ? "prerelease" : "";
      for (let key in v1)
        if ((key === "major" || key === "minor" || key === "patch") && v1[key] !== v2[key])
          return prefix + key;
      return defaultResult;
    }
  };
  module.exports = diff;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/major.js
var require_major = __commonJS((exports, module) => {
  var SemVer = require_semver(), major = (a, loose) => new SemVer(a, loose).major;
  module.exports = major;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/minor.js
var require_minor = __commonJS((exports, module) => {
  var SemVer = require_semver(), minor = (a, loose) => new SemVer(a, loose).minor;
  module.exports = minor;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/patch.js
var require_patch = __commonJS((exports, module) => {
  var SemVer = require_semver(), patch = (a, loose) => new SemVer(a, loose).patch;
  module.exports = patch;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS((exports, module) => {
  var parse = require_parse(), prerelease = (version, options) => {
    let parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  module.exports = prerelease;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS((exports, module) => {
  var compare = require_compare(), rcompare = (a, b, loose) => compare(b, a, loose);
  module.exports = rcompare;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS((exports, module) => {
  var compare = require_compare(), compareLoose = (a, b) => compare(a, b, !0);
  module.exports = compareLoose;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS((exports, module) => {
  var SemVer = require_semver(), compareBuild = (a, b, loose) => {
    let versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  module.exports = compareBuild;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/sort.js
var require_sort = __commonJS((exports, module) => {
  var compareBuild = require_compare_build(), sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
  module.exports = sort;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS((exports, module) => {
  var compareBuild = require_compare_build(), rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
  module.exports = rsort;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/gt.js
var require_gt = __commonJS((exports, module) => {
  var compare = require_compare(), gt = (a, b, loose) => compare(a, b, loose) > 0;
  module.exports = gt;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/lt.js
var require_lt = __commonJS((exports, module) => {
  var compare = require_compare(), lt = (a, b, loose) => compare(a, b, loose) < 0;
  module.exports = lt;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/neq.js
var require_neq = __commonJS((exports, module) => {
  var compare = require_compare(), neq = (a, b, loose) => compare(a, b, loose) !== 0;
  module.exports = neq;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/gte.js
var require_gte = __commonJS((exports, module) => {
  var compare = require_compare(), gte = (a, b, loose) => compare(a, b, loose) >= 0;
  module.exports = gte;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/lte.js
var require_lte = __commonJS((exports, module) => {
  var compare = require_compare(), lte = (a, b, loose) => compare(a, b, loose) <= 0;
  module.exports = lte;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS((exports, module) => {
  var eq2 = require_eq(), neq = require_neq(), gt = require_gt(), gte = require_gte(), lt = require_lt(), lte = require_lte(), cmp = (a, op, b, loose) => {
    switch (op) {
      case "===":
        return typeof a == "object" && (a = a.version), typeof b == "object" && (b = b.version), a === b;
      case "!==":
        return typeof a == "object" && (a = a.version), typeof b == "object" && (b = b.version), a !== b;
      case "":
      case "=":
      case "==":
        return eq2(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  module.exports = cmp;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS((exports, module) => {
  var SemVer = require_semver(), parse = require_parse(), {re, t} = require_re(), coerce = (version, options) => {
    if (version instanceof SemVer)
      return version;
    if (typeof version == "number" && (version = String(version)), typeof version != "string")
      return null;
    options = options || {};
    let match = null;
    if (!options.rtl)
      match = version.match(re[t.COERCE]);
    else {
      let next;
      for (; (next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); )
        (!match || next.index + next[0].length !== match.index + match[0].length) && (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
      re[t.COERCERTL].lastIndex = -1;
    }
    return match === null ? null : parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
  };
  module.exports = coerce;
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js
var require_iterator = __commonJS((exports, module) => {
  "use strict";
  module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next)
        yield walker.value;
    };
  };
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js
var require_yallist = __commonJS((exports, module) => {
  "use strict";
  module.exports = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self2 = this;
    if (self2 instanceof Yallist || (self2 = new Yallist()), self2.tail = null, self2.head = null, self2.length = 0, list && typeof list.forEach == "function")
      list.forEach(function(item) {
        self2.push(item);
      });
    else if (arguments.length > 0)
      for (var i = 0, l = arguments.length; i < l; i++)
        self2.push(arguments[i]);
    return self2;
  }
  Yallist.prototype.removeNode = function(node) {
    if (node.list !== this)
      throw new Error("removing node which does not belong to this list");
    var next = node.next, prev = node.prev;
    return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
  };
  Yallist.prototype.unshiftNode = function(node) {
    if (node !== this.head) {
      node.list && node.list.removeNode(node);
      var head = this.head;
      node.list = this, node.next = head, head && (head.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
    }
  };
  Yallist.prototype.pushNode = function(node) {
    if (node !== this.tail) {
      node.list && node.list.removeNode(node);
      var tail = this.tail;
      node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
    }
  };
  Yallist.prototype.push = function() {
    for (var i = 0, l = arguments.length; i < l; i++)
      push(this, arguments[i]);
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0, l = arguments.length; i < l; i++)
      unshift(this, arguments[i]);
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!!this.tail) {
      var res = this.tail.value;
      return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
    }
  };
  Yallist.prototype.shift = function() {
    if (!!this.head) {
      var res = this.head.value;
      return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
    }
  };
  Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++)
      fn.call(thisp, walker.value, i, this), walker = walker.next;
  };
  Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--)
      fn.call(thisp, walker.value, i, this), walker = walker.prev;
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++)
      walker = walker.next;
    if (i === n && walker !== null)
      return walker.value;
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++)
      walker = walker.prev;
    if (i === n && walker !== null)
      return walker.value;
  };
  Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    for (var res = new Yallist(), walker = this.head; walker !== null; )
      res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
    return res;
  };
  Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var res = new Yallist(), walker = this.tail; walker !== null; )
      res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
    return res;
  };
  Yallist.prototype.reduce = function(fn, initial) {
    var acc, walker = this.head;
    if (arguments.length > 1)
      acc = initial;
    else if (this.head)
      walker = this.head.next, acc = this.head.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var i = 0; walker !== null; i++)
      acc = fn(acc, walker.value, i), walker = walker.next;
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc, walker = this.tail;
    if (arguments.length > 1)
      acc = initial;
    else if (this.tail)
      walker = this.tail.prev, acc = this.tail.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var i = this.length - 1; walker !== null; i--)
      acc = fn(acc, walker.value, i), walker = walker.prev;
    return acc;
  };
  Yallist.prototype.toArray = function() {
    for (var arr = new Array(this.length), i = 0, walker = this.head; walker !== null; i++)
      arr[i] = walker.value, walker = walker.next;
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    for (var arr = new Array(this.length), i = 0, walker = this.tail; walker !== null; i++)
      arr[i] = walker.value, walker = walker.prev;
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length, to < 0 && (to += this.length), from = from || 0, from < 0 && (from += this.length);
    var ret = new Yallist();
    if (to < from || to < 0)
      return ret;
    from < 0 && (from = 0), to > this.length && (to = this.length);
    for (var i = 0, walker = this.head; walker !== null && i < from; i++)
      walker = walker.next;
    for (; walker !== null && i < to; i++, walker = walker.next)
      ret.push(walker.value);
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length, to < 0 && (to += this.length), from = from || 0, from < 0 && (from += this.length);
    var ret = new Yallist();
    if (to < from || to < 0)
      return ret;
    from < 0 && (from = 0), to > this.length && (to = this.length);
    for (var i = this.length, walker = this.tail; walker !== null && i > to; i--)
      walker = walker.prev;
    for (; walker !== null && i > from; i--, walker = walker.prev)
      ret.push(walker.value);
    return ret;
  };
  Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
    for (var i = 0, walker = this.head; walker !== null && i < start; i++)
      walker = walker.next;
    for (var ret = [], i = 0; walker && i < deleteCount; i++)
      ret.push(walker.value), walker = this.removeNode(walker);
    walker === null && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
    for (var i = 0; i < nodes.length; i++)
      walker = insert(this, walker, nodes[i]);
    return ret;
  };
  Yallist.prototype.reverse = function() {
    for (var head = this.head, tail = this.tail, walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next, walker.next = p;
    }
    return this.head = tail, this.tail = head, this;
  };
  function insert(self2, node, value) {
    var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
    return inserted.next === null && (self2.tail = inserted), inserted.prev === null && (self2.head = inserted), self2.length++, inserted;
  }
  function push(self2, item) {
    self2.tail = new Node(item, self2.tail, null, self2), self2.head || (self2.head = self2.tail), self2.length++;
  }
  function unshift(self2, item) {
    self2.head = new Node(item, null, self2.head, self2), self2.tail || (self2.tail = self2.head), self2.length++;
  }
  function Node(value, prev, next, list) {
    if (!(this instanceof Node))
      return new Node(value, prev, next, list);
    this.list = list, this.value = value, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
  }
  try {
    require_iterator()(Yallist);
  } catch (er) {
  }
});

// node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS((exports, module) => {
  "use strict";
  var Yallist = require_yallist(), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1, LRUCache = class {
    constructor(options) {
      if (typeof options == "number" && (options = {max: options}), options || (options = {}), options.max && (typeof options.max != "number" || options.max < 0))
        throw new TypeError("max must be a non-negative number");
      let max = this[MAX] = options.max || Infinity, lc = options.length || naiveLength;
      if (this[LENGTH_CALCULATOR] = typeof lc != "function" ? naiveLength : lc, this[ALLOW_STALE] = options.stale || !1, options.maxAge && typeof options.maxAge != "number")
        throw new TypeError("maxAge must be a number");
      this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || !1, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || !1, this.reset();
    }
    set max(mL) {
      if (typeof mL != "number" || mL < 0)
        throw new TypeError("max must be a non-negative number");
      this[MAX] = mL || Infinity, trim(this);
    }
    get max() {
      return this[MAX];
    }
    set allowStale(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
      return this[ALLOW_STALE];
    }
    set maxAge(mA) {
      if (typeof mA != "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[MAX_AGE] = mA, trim(this);
    }
    get maxAge() {
      return this[MAX_AGE];
    }
    set lengthCalculator(lC) {
      typeof lC != "function" && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
      })), trim(this);
    }
    get lengthCalculator() {
      return this[LENGTH_CALCULATOR];
    }
    get length() {
      return this[LENGTH];
    }
    get itemCount() {
      return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].tail; walker !== null; ) {
        let prev = walker.prev;
        forEachStep(this, fn, walker, thisp), walker = prev;
      }
    }
    forEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].head; walker !== null; ) {
        let next = walker.next;
        forEachStep(this, fn, walker, thisp), walker = next;
      }
    }
    keys() {
      return this[LRU_LIST].toArray().map((k) => k.key);
    }
    values() {
      return this[LRU_LIST].toArray().map((k) => k.value);
    }
    reset() {
      this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
    }
    dump() {
      return this[LRU_LIST].map((hit) => isStale(this, hit) ? !1 : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter((h) => h);
    }
    dumpLru() {
      return this[LRU_LIST];
    }
    set(key, value, maxAge) {
      if (maxAge = maxAge || this[MAX_AGE], maxAge && typeof maxAge != "number")
        throw new TypeError("maxAge must be a number");
      let now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value, key);
      if (this[CACHE].has(key)) {
        if (len > this[MAX])
          return del(this, this[CACHE].get(key)), !1;
        let item = this[CACHE].get(key).value;
        return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), !0;
      }
      let hit = new Entry(key, value, len, now, maxAge);
      return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value), !1) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), !0);
    }
    has(key) {
      if (!this[CACHE].has(key))
        return !1;
      let hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
    get(key) {
      return get(this, key, !0);
    }
    peek(key) {
      return get(this, key, !1);
    }
    pop() {
      let node = this[LRU_LIST].tail;
      return node ? (del(this, node), node.value) : null;
    }
    del(key) {
      del(this, this[CACHE].get(key));
    }
    load(arr) {
      this.reset();
      let now = Date.now();
      for (let l = arr.length - 1; l >= 0; l--) {
        let hit = arr[l], expiresAt = hit.e || 0;
        if (expiresAt === 0)
          this.set(hit.k, hit.v);
        else {
          let maxAge = expiresAt - now;
          maxAge > 0 && this.set(hit.k, hit.v, maxAge);
        }
      }
    }
    prune() {
      this[CACHE].forEach((value, key) => get(this, key, !1));
    }
  }, get = (self2, key, doUse) => {
    let node = self2[CACHE].get(key);
    if (node) {
      let hit = node.value;
      if (isStale(self2, hit)) {
        if (del(self2, node), !self2[ALLOW_STALE])
          return;
      } else
        doUse && (self2[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self2[LRU_LIST].unshiftNode(node));
      return hit.value;
    }
  }, isStale = (self2, hit) => {
    if (!hit || !hit.maxAge && !self2[MAX_AGE])
      return !1;
    let diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
  }, trim = (self2) => {
    if (self2[LENGTH] > self2[MAX])
      for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
        let prev = walker.prev;
        del(self2, walker), walker = prev;
      }
  }, del = (self2, node) => {
    if (node) {
      let hit = node.value;
      self2[DISPOSE] && self2[DISPOSE](hit.key, hit.value), self2[LENGTH] -= hit.length, self2[CACHE].delete(hit.key), self2[LRU_LIST].removeNode(node);
    }
  }, Entry = class {
    constructor(key, value, length, now, maxAge) {
      this.key = key, this.value = value, this.length = length, this.now = now, this.maxAge = maxAge || 0;
    }
  }, forEachStep = (self2, fn, node, thisp) => {
    let hit = node.value;
    isStale(self2, hit) && (del(self2, node), self2[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self2);
  };
  module.exports = LRUCache;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/range.js
var require_range = __commonJS((exports, module) => {
  var Range = class {
    constructor(range, options) {
      if (options = parseOptions(options), range instanceof Range)
        return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
      if (range instanceof Comparator)
        return this.raw = range.value, this.set = [[range]], this.format(), this;
      if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range, this.set = range.split(/\s*\|\|\s*/).map((range2) => this.parseRange(range2.trim())).filter((c) => c.length), !this.set.length)
        throw new TypeError(`Invalid SemVer Range: ${range}`);
      if (this.set.length > 1) {
        let first = this.set[0];
        if (this.set = this.set.filter((c) => !isNullSet(c[0])), this.set.length === 0)
          this.set = [first];
        else if (this.set.length > 1) {
          for (let c of this.set)
            if (c.length === 1 && isAny(c[0])) {
              this.set = [c];
              break;
            }
        }
      }
      this.format();
    }
    format() {
      return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
    }
    toString() {
      return this.range;
    }
    parseRange(range) {
      range = range.trim();
      let memoKey = `parseRange:${Object.keys(this.options).join(",")}:${range}`, cached = cache.get(memoKey);
      if (cached)
        return cached;
      let loose = this.options.loose, hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace(this.options.includePrerelease)), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace), debug("comparator trim", range, re[t.COMPARATORTRIM]), range = range.replace(re[t.TILDETRIM], tildeTrimReplace), range = range.replace(re[t.CARETTRIM], caretTrimReplace), range = range.split(/\s+/).join(" ");
      let compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options)).filter(this.options.loose ? (comp) => !!comp.match(compRe) : () => !0).map((comp) => new Comparator(comp, this.options)), l = rangeList.length, rangeMap = new Map();
      for (let comp of rangeList) {
        if (isNullSet(comp))
          return [comp];
        rangeMap.set(comp.value, comp);
      }
      rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
      let result = [...rangeMap.values()];
      return cache.set(memoKey, result), result;
    }
    intersects(range, options) {
      if (!(range instanceof Range))
        throw new TypeError("a Range is required");
      return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
    }
    test(version) {
      if (!version)
        return !1;
      if (typeof version == "string")
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return !1;
        }
      for (let i = 0; i < this.set.length; i++)
        if (testSet(this.set[i], version, this.options))
          return !0;
      return !1;
    }
  };
  module.exports = Range;
  var LRU = require_lru_cache(), cache = new LRU({max: 1e3}), parseOptions = require_parse_options(), Comparator = require_comparator(), debug = require_debug(), SemVer = require_semver(), {
    re,
    t,
    comparatorTrimReplace,
    tildeTrimReplace,
    caretTrimReplace
  } = require_re(), isNullSet = (c) => c.value === "<0.0.0-0", isAny = (c) => c.value === "", isSatisfiable = (comparators, options) => {
    let result = !0, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop();
    for (; result && remainingComparators.length; )
      result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
    return result;
  }, parseComparator = (comp, options) => (debug("comp", comp, options), comp = replaceCarets(comp, options), debug("caret", comp), comp = replaceTildes(comp, options), debug("tildes", comp), comp = replaceXRanges(comp, options), debug("xrange", comp), comp = replaceStars(comp, options), debug("stars", comp), comp), isX = (id) => !id || id.toLowerCase() === "x" || id === "*", replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((comp2) => replaceTilde(comp2, options)).join(" "), replaceTilde = (comp, options) => {
    let r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M, m, p, pr) => {
      debug("tilde", comp, _, M, m, p, pr);
      let ret;
      return isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0` : pr ? (debug("replaceTilde pr", pr), ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`) : ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`, debug("tilde return", ret), ret;
    });
  }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((comp2) => replaceCaret(comp2, options)).join(" "), replaceCaret = (comp, options) => {
    debug("caret", comp, options);
    let r = options.loose ? re[t.CARETLOOSE] : re[t.CARET], z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr) => {
      debug("caret", comp, _, M, m, p, pr);
      let ret;
      return isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? M === "0" ? ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0` : pr ? (debug("replaceCaret pr", pr), M === "0" ? m === "0" ? ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0` : ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug("no pr"), M === "0" ? m === "0" ? ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0` : ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`), debug("caret return", ret), ret;
    });
  }, replaceXRanges = (comp, options) => (debug("replaceXRanges", comp, options), comp.split(/\s+/).map((comp2) => replaceXRange(comp2, options)).join(" ")), replaceXRange = (comp, options) => {
    comp = comp.trim();
    let r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
      debug("xRange", comp, ret, gtlt, M, m, p, pr);
      let xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
      return gtlt === "=" && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? gtlt === ">" || gtlt === "<" ? ret = "<0.0.0-0" : ret = "*" : gtlt && anyX ? (xm && (m = 0), p = 0, gtlt === ">" ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : gtlt === "<=" && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), gtlt === "<" && (pr = "-0"), ret = `${gtlt + M}.${m}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`), debug("xRange return", ret), ret;
    });
  }, replaceStars = (comp, options) => (debug("replaceStars", comp, options), comp.trim().replace(re[t.STAR], "")), replaceGTE0 = (comp, options) => (debug("replaceGTE0", comp, options), comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => (isX(fM) ? from = "" : isX(fm) ? from = `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? from = `>=${from}` : from = `>=${from}${incPr ? "-0" : ""}`, isX(tM) ? to = "" : isX(tm) ? to = `<${+tM + 1}.0.0-0` : isX(tp) ? to = `<${tM}.${+tm + 1}.0-0` : tpr ? to = `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? to = `<${tM}.${tm}.${+tp + 1}-0` : to = `<=${to}`, `${from} ${to}`.trim()), testSet = (set, version, options) => {
    for (let i = 0; i < set.length; i++)
      if (!set[i].test(version))
        return !1;
    if (version.prerelease.length && !options.includePrerelease) {
      for (let i = 0; i < set.length; i++)
        if (debug(set[i].semver), set[i].semver !== Comparator.ANY && set[i].semver.prerelease.length > 0) {
          let allowed = set[i].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch)
            return !0;
        }
      return !1;
    }
    return !0;
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS((exports, module) => {
  var ANY = Symbol("SemVer ANY"), Comparator = class {
    static get ANY() {
      return ANY;
    }
    constructor(comp, options) {
      if (options = parseOptions(options), comp instanceof Comparator) {
        if (comp.loose === !!options.loose)
          return comp;
        comp = comp.value;
      }
      debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
    }
    parse(comp) {
      let r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m = comp.match(r);
      if (!m)
        throw new TypeError(`Invalid comparator: ${comp}`);
      this.operator = m[1] !== void 0 ? m[1] : "", this.operator === "=" && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
    }
    toString() {
      return this.value;
    }
    test(version) {
      if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY)
        return !0;
      if (typeof version == "string")
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return !1;
        }
      return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
      if (!(comp instanceof Comparator))
        throw new TypeError("a Comparator is required");
      if ((!options || typeof options != "object") && (options = {
        loose: !!options,
        includePrerelease: !1
      }), this.operator === "")
        return this.value === "" ? !0 : new Range(comp.value, options).test(this.value);
      if (comp.operator === "")
        return comp.value === "" ? !0 : new Range(this.value, options).test(comp.semver);
      let sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">"), sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<"), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<="), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    }
  };
  module.exports = Comparator;
  var parseOptions = require_parse_options(), {re, t} = require_re(), cmp = require_cmp(), debug = require_debug(), SemVer = require_semver(), Range = require_range();
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS((exports, module) => {
  var Range = require_range(), satisfies = (version, range, options) => {
    try {
      range = new Range(range, options);
    } catch (er) {
      return !1;
    }
    return range.test(version);
  };
  module.exports = satisfies;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS((exports, module) => {
  var Range = require_range(), toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
  module.exports = toComparators;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), maxSatisfying = (versions, range, options) => {
    let max = null, maxSV = null, rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    return versions.forEach((v) => {
      rangeObj.test(v) && (!max || maxSV.compare(v) === -1) && (max = v, maxSV = new SemVer(max, options));
    }), max;
  };
  module.exports = maxSatisfying;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), minSatisfying = (versions, range, options) => {
    let min = null, minSV = null, rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    return versions.forEach((v) => {
      rangeObj.test(v) && (!min || minSV.compare(v) === 1) && (min = v, minSV = new SemVer(min, options));
    }), min;
  };
  module.exports = minSatisfying;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), gt = require_gt(), minVersion = (range, loose) => {
    range = new Range(range, loose);
    let minver = new SemVer("0.0.0");
    if (range.test(minver) || (minver = new SemVer("0.0.0-0"), range.test(minver)))
      return minver;
    minver = null;
    for (let i = 0; i < range.set.length; ++i) {
      let comparators = range.set[i], setMin = null;
      comparators.forEach((comparator) => {
        let compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            compver.prerelease.length === 0 ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
          case "":
          case ">=":
            (!setMin || gt(compver, setMin)) && (setMin = compver);
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator.operator}`);
        }
      }), setMin && (!minver || gt(minver, setMin)) && (minver = setMin);
    }
    return minver && range.test(minver) ? minver : null;
  };
  module.exports = minVersion;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS((exports, module) => {
  var Range = require_range(), validRange = (range, options) => {
    try {
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  module.exports = validRange;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/outside.js
var require_outside = __commonJS((exports, module) => {
  var SemVer = require_semver(), Comparator = require_comparator(), {ANY} = Comparator, Range = require_range(), satisfies = require_satisfies(), gt = require_gt(), lt = require_lt(), lte = require_lte(), gte = require_gte(), outside = (version, range, hilo, options) => {
    version = new SemVer(version, options), range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
        break;
      case "<":
        gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options))
      return !1;
    for (let i = 0; i < range.set.length; ++i) {
      let comparators = range.set[i], high = null, low = null;
      if (comparators.forEach((comparator) => {
        comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
      }), high.operator === comp || high.operator === ecomp || (!low.operator || low.operator === comp) && ltefn(version, low.semver))
        return !1;
      if (low.operator === ecomp && ltfn(version, low.semver))
        return !1;
    }
    return !0;
  };
  module.exports = outside;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS((exports, module) => {
  var outside = require_outside(), gtr = (version, range, options) => outside(version, range, ">", options);
  module.exports = gtr;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS((exports, module) => {
  var outside = require_outside(), ltr = (version, range, options) => outside(version, range, "<", options);
  module.exports = ltr;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS((exports, module) => {
  var Range = require_range(), intersects = (r1, r2, options) => (r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2));
  module.exports = intersects;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS((exports, module) => {
  var satisfies = require_satisfies(), compare = require_compare();
  module.exports = (versions, range, options) => {
    let set = [], min = null, prev = null, v = versions.sort((a, b) => compare(a, b, options));
    for (let version of v)
      satisfies(version, range, options) ? (prev = version, min || (min = version)) : (prev && set.push([min, prev]), prev = null, min = null);
    min && set.push([min, null]);
    let ranges = [];
    for (let [min2, max] of set)
      min2 === max ? ranges.push(min2) : !max && min2 === v[0] ? ranges.push("*") : max ? min2 === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min2} - ${max}`) : ranges.push(`>=${min2}`);
    let simplified = ranges.join(" || "), original = typeof range.raw == "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/subset.js
var require_subset = __commonJS((exports, module) => {
  var Range = require_range(), {ANY} = require_comparator(), satisfies = require_satisfies(), compare = require_compare(), subset = (sub, dom2, options) => {
    if (sub === dom2)
      return !0;
    sub = new Range(sub, options), dom2 = new Range(dom2, options);
    let sawNonNull = !1;
    OUTER:
      for (let simpleSub of sub.set) {
        for (let simpleDom of dom2.set) {
          let isSub = simpleSubset(simpleSub, simpleDom, options);
          if (sawNonNull = sawNonNull || isSub !== null, isSub)
            continue OUTER;
        }
        if (sawNonNull)
          return !1;
      }
    return !0;
  }, simpleSubset = (sub, dom2, options) => {
    if (sub === dom2)
      return !0;
    if (sub.length === 1 && sub[0].semver === ANY)
      return dom2.length === 1 && dom2[0].semver === ANY;
    let eqSet = new Set(), gt, lt;
    for (let c of sub)
      c.operator === ">" || c.operator === ">=" ? gt = higherGT(gt, c, options) : c.operator === "<" || c.operator === "<=" ? lt = lowerLT(lt, c, options) : eqSet.add(c.semver);
    if (eqSet.size > 1)
      return null;
    let gtltComp;
    if (gt && lt) {
      if (gtltComp = compare(gt.semver, lt.semver, options), gtltComp > 0)
        return null;
      if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<="))
        return null;
    }
    for (let eq2 of eqSet) {
      if (gt && !satisfies(eq2, String(gt), options) || lt && !satisfies(eq2, String(lt), options))
        return null;
      for (let c of dom2)
        if (!satisfies(eq2, String(c), options))
          return !1;
      return !0;
    }
    let higher, lower, hasDomLT, hasDomGT;
    for (let c of dom2) {
      if (hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=", hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=", gt) {
        if (c.operator === ">" || c.operator === ">=") {
          if (higher = higherGT(gt, c, options), higher === c && higher !== gt)
            return !1;
        } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options))
          return !1;
      }
      if (lt) {
        if (c.operator === "<" || c.operator === "<=") {
          if (lower = lowerLT(lt, c, options), lower === c && lower !== lt)
            return !1;
        } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options))
          return !1;
      }
      if (!c.operator && (lt || gt) && gtltComp !== 0)
        return !1;
    }
    return !(gt && hasDomLT && !lt && gtltComp !== 0 || lt && hasDomGT && !gt && gtltComp !== 0);
  }, higherGT = (a, b, options) => {
    if (!a)
      return b;
    let comp = compare(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 || b.operator === ">" && a.operator === ">=" ? b : a;
  }, lowerLT = (a, b, options) => {
    if (!a)
      return b;
    let comp = compare(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 || b.operator === "<" && a.operator === "<=" ? b : a;
  };
  module.exports = subset;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/index.js
var require_semver2 = __commonJS((exports, module) => {
  var internalRe = require_re();
  module.exports = {
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: require_constants().SEMVER_SPEC_VERSION,
    SemVer: require_semver(),
    compareIdentifiers: require_identifiers().compareIdentifiers,
    rcompareIdentifiers: require_identifiers().rcompareIdentifiers,
    parse: require_parse(),
    valid: require_valid(),
    clean: require_clean(),
    inc: require_inc(),
    diff: require_diff(),
    major: require_major(),
    minor: require_minor(),
    patch: require_patch(),
    prerelease: require_prerelease(),
    compare: require_compare(),
    rcompare: require_rcompare(),
    compareLoose: require_compare_loose(),
    compareBuild: require_compare_build(),
    sort: require_sort(),
    rsort: require_rsort(),
    gt: require_gt(),
    lt: require_lt(),
    eq: require_eq(),
    neq: require_neq(),
    gte: require_gte(),
    lte: require_lte(),
    cmp: require_cmp(),
    coerce: require_coerce(),
    Comparator: require_comparator(),
    Range: require_range(),
    satisfies: require_satisfies(),
    toComparators: require_to_comparators(),
    maxSatisfying: require_max_satisfying(),
    minSatisfying: require_min_satisfying(),
    minVersion: require_min_version(),
    validRange: require_valid2(),
    outside: require_outside(),
    gtr: require_gtr(),
    ltr: require_ltr(),
    intersects: require_intersects(),
    simplifyRange: require_simplify(),
    subset: require_subset()
  };
});

// src/lib/launchIdleWorker.ts
typeof SharedWorker != "undefined" && !globalThis.IDLE_WORKER;

// node_modules/.pnpm/idb@6.0.0/node_modules/idb/build/esm/wrap-idb-value.js
var instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c), idbProxyableTypes, cursorAdvanceMethods;
function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
var cursorRequestMap = new WeakMap(), transactionDoneMap = new WeakMap(), transactionStoreNamesMap = new WeakMap(), transformCache = new WeakMap(), reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
  let promise = new Promise((resolve, reject) => {
    let unlisten = () => {
      request.removeEventListener("success", success), request.removeEventListener("error", error);
    }, success = () => {
      resolve(wrap(request.result)), unlisten();
    }, error = () => {
      reject(request.error), unlisten();
    };
    request.addEventListener("success", success), request.addEventListener("error", error);
  });
  return promise.then((value) => {
    value instanceof IDBCursor && cursorRequestMap.set(value, request);
  }).catch(() => {
  }), reverseTransformCache.set(promise, request), promise;
}
function cacheDonePromiseForTransaction(tx) {
  if (transactionDoneMap.has(tx))
    return;
  let done = new Promise((resolve, reject) => {
    let unlisten = () => {
      tx.removeEventListener("complete", complete), tx.removeEventListener("error", error), tx.removeEventListener("abort", error);
    }, complete = () => {
      resolve(), unlisten();
    }, error = () => {
      reject(tx.error || new DOMException("AbortError", "AbortError")), unlisten();
    };
    tx.addEventListener("complete", complete), tx.addEventListener("error", error), tx.addEventListener("abort", error);
  });
  transactionDoneMap.set(tx, done);
}
var idbProxyTraps = {
  get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      if (prop === "done")
        return transactionDoneMap.get(target);
      if (prop === "objectStoreNames")
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      if (prop === "store")
        return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
    }
    return wrap(target[prop]);
  },
  set(target, prop, value) {
    return target[prop] = value, !0;
  },
  has(target, prop) {
    return target instanceof IDBTransaction && (prop === "done" || prop === "store") ? !0 : prop in target;
  }
};
function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
  return func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype) ? function(storeNames, ...args) {
    let tx = func.call(unwrap(this), storeNames, ...args);
    return transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]), wrap(tx);
  } : getCursorAdvanceMethods().includes(func) ? function(...args) {
    return func.apply(unwrap(this), args), wrap(cursorRequestMap.get(this));
  } : function(...args) {
    return wrap(func.apply(unwrap(this), args));
  };
}
function transformCachableValue(value) {
  return typeof value == "function" ? wrapFunction(value) : (value instanceof IDBTransaction && cacheDonePromiseForTransaction(value), instanceOfAny(value, getIdbProxyableTypes()) ? new Proxy(value, idbProxyTraps) : value);
}
function wrap(value) {
  if (value instanceof IDBRequest)
    return promisifyRequest(value);
  if (transformCache.has(value))
    return transformCache.get(value);
  let newValue = transformCachableValue(value);
  return newValue !== value && (transformCache.set(value, newValue), reverseTransformCache.set(newValue, value)), newValue;
}
var unwrap = (value) => reverseTransformCache.get(value);

// node_modules/.pnpm/idb@6.0.0/node_modules/idb/build/esm/index.js
function openDB(name, version, {blocked, upgrade, blocking, terminated} = {}) {
  let request = indexedDB.open(name, version), openPromise = wrap(request);
  return upgrade && request.addEventListener("upgradeneeded", (event) => {
    upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));
  }), blocked && request.addEventListener("blocked", () => blocked()), openPromise.then((db) => {
    terminated && db.addEventListener("close", () => terminated()), blocking && db.addEventListener("versionchange", () => blocking());
  }).catch(() => {
  }), openPromise;
}
var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"], writeMethods = ["put", "add", "delete", "clear"], cachedMethods = new Map();
function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop == "string"))
    return;
  if (cachedMethods.get(prop))
    return cachedMethods.get(prop);
  let targetFuncName = prop.replace(/FromIndex$/, ""), useIndex = prop !== targetFuncName, isWrite = writeMethods.includes(targetFuncName);
  if (!(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName)))
    return;
  let method = async function(storeName, ...args) {
    let tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly"), target2 = tx.store;
    return useIndex && (target2 = target2.index(args.shift())), (await Promise.all([
      target2[targetFuncName](...args),
      isWrite && tx.done
    ]))[0];
  };
  return cachedMethods.set(prop, method), method;
}
replaceTraps((oldTraps) => ({
  ...oldTraps,
  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
}));

// src/_dev_/getPackageID.tsx
function getPackageID() {
  return location.origin.substring(location.protocol.length + "//".length, location.origin.indexOf("."));
}

// src/lib/StoredPackage.ts
var import_lite2 = __toModule(require_lite()), path6 = __toModule(require_path_browserify());

// src/lib/ErrorCode.tsx
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2[ErrorCode2.invalidPackageJSON = 0] = "invalidPackageJSON", ErrorCode2[ErrorCode2.emptyDir = 1] = "emptyDir", ErrorCode2[ErrorCode2.missingEntryFiles = 2] = "missingEntryFiles", ErrorCode2[ErrorCode2.missing = 3] = "missing", ErrorCode2[ErrorCode2.genericError = 4] = "genericError", ErrorCode2[ErrorCode2.errorFetchingPackageJSON = 5] = "errorFetchingPackageJSON", ErrorCode2[ErrorCode2.errorGettingPackageJSONFile = 6] = "errorGettingPackageJSONFile", ErrorCode2[ErrorCode2.parsingPackageJSON = 7] = "parsingPackageJSON", ErrorCode2[ErrorCode2.requirePermission = 8] = "requirePermission", ErrorCode2[ErrorCode2.noEntryPoints = 9] = "noEntryPoints", ErrorCode2[ErrorCode2.resolveFile = 10] = "resolveFile", ErrorCode2[ErrorCode2.fileNotFound = 11] = "fileNotFound", ErrorCode2[ErrorCode2.fileAccessDenied = 12] = "fileAccessDenied", ErrorCode2[ErrorCode2.buildFailed = 13] = "buildFailed", ErrorCode2[ErrorCode2.invalidTSConfig = 14] = "invalidTSConfig", ErrorCode2[ErrorCode2.routeNotFound = 15] = "routeNotFound", ErrorCode2[ErrorCode2.needsConfig = 16] = "needsConfig", ErrorCode2[ErrorCode2.failedToResolveNPMPackage = 17] = "failedToResolveNPMPackage";
})(ErrorCode || (ErrorCode = {}));

// src/lib/ESBuildPackage.tsx
var import_esbuild_wasm = __toModule(require_browser()), import_lite = __toModule(require_lite()), import_path_browserify = __toModule(require_path_browserify());

// src/lib/getCache.tsx
var _cache;
async function getCache() {
  return _cache || (_cache = await globalThis.caches.open("bundles")), _cache;
}

// src/lib/ESBuildPackage.tsx
var import_htmlparser2 = __toModule(require_lib6());

// src/_dev_/IdleWorker.jsurl
var IdleWorker_default = "/_dev_/IdleWorker.JFAF2W5Y.jsurl";

// src/htmlGenerator.ts
var IDLE_WORKER_CODE = `
  if (typeof SharedWorker !== "undefined" && !globalThis["IDLE_WORKER"]) {
    globalThis["IDLE_WORKER"] = new SharedWorker("${IdleWorker_default}", {
      type: "module",
      name: "IdleWorker",
    });
  }

  if (globalThis.navigator.serviceWorker && !globalThis["REGISTERED_SERVICE_WORKER"]) {
    globalThis
      .navigator
      .serviceWorker
      .register("/service-worker.js", {scope: '/'})
      .then(function (registration) {})
      .catch(function (err) {});
    globalThis["REGISTERED_SERVICE_WORKER"] = true;
  }
`;

// src/lib/bootstrapper.ts
function bootstrap(sourceUrl) {
  return `
${IDLE_WORKER_CODE}

async function start() {
  try {
    const _exports = await import("${sourceUrl}");
    Object.assign(globalThis, _exports);
  } catch(exception) {
    const orig = exception;
    setTimeout(() => {

    }, 1);
    throw exception;
  }
}

await start();
  `;
}

// src/lib/ESBuildPackage.tsx
var import_node = __toModule(require_node());
var verbose = (...a) => {
};
var PackagerError = class extends Error {
  constructor(code, ...args) {
    super(...args);
    this.code = code;
  }
  static with(code, error) {
    let packager = new PackagerError(code);
    return Object.assign(packager, error), packager;
  }
}, PackagerPermissionError = class extends PackagerError {
}, _ESBuildPackage = class {
  constructor(root2, pkg) {
    this.extensionsToTry = [
      ".js",
      ".ts",
      ".tsx",
      ".jsx",
      ".css",
      ".png",
      ".jpg",
      ".webp"
    ];
    this.textExtensionsToTry = [".js", ".ts", ".tsx", ".jsx", ".css"];
    this.binaryExtensionsToTry = [".png", ".jpg", ".webp"];
    this.alwaysRequestPermissions = !1;
    this.resolveFile = async (opts) => {
      verbose("[Resolve]", opts);
      let components = opts.path.split("/"), pkgName = components[0];
      if (this.pkg.allDependencies.has(pkgName)) {
        let file = components.length > 1 ? `/${components.slice(1).join("/")}` : "";
        return {
          path: `https://jspm.dev/${this.pkg.allDependencies.get(pkgName)}${file}`,
          external: !0
        };
      }
      let resolvedPath = import_path_browserify.default.join(opts.resolveDir, import_path_browserify.default.normalize(opts.path));
      !import_path_browserify.default.isAbsolute(resolvedPath) && opts.importer ? resolvedPath = import_path_browserify.default.join(resolvedPath, opts.importer) : !import_path_browserify.default.isAbsolute(resolvedPath) && !opts.importer && (resolvedPath = import_path_browserify.default.join(resolvedPath, opts.importer));
      let doesExist = await this.root.exists(resolvedPath);
      if (!doesExist && import_path_browserify.default.extname(resolvedPath) === "") {
        let origPath = resolvedPath;
        for (let extension of this.textExtensionsToTry)
          if (resolvedPath = origPath + extension, await this.root.exists(resolvedPath))
            return {
              path: resolvedPath,
              external: !1
            };
      }
      return doesExist ? {
        path: resolvedPath,
        external: !1
      } : {
        errors: [
          {
            text: `404 - File not found: ${opts.path}`
          }
        ]
      };
    };
    this.loadFile = async (opts) => (verbose("[Load]", opts), opts.namespace === "file" || import_lite.default.getType(import_path_browserify.default.extname(opts.path))?.includes("image") ? {
      contents: new Uint8Array(await this.root.readFileBinary(opts.path)),
      loader: "default"
    } : {
      contents: await this.root.readFileText(opts.path),
      loader: "default"
    });
    this.root = root2, this.pkg = pkg;
  }
  async resolve(_path, importer, resolveDir, canRetry = !0) {
    _path.includes("//") && (_path = _path.replace(/\/+/gm, "/"));
    let fs = this.root;
    if (await fs.exists(_path) || importer && !_path.startsWith("/") && (_path = import_path_browserify.default.normalize(import_path_browserify.default.join(import_path_browserify.default.dirname(importer), "../", _path)), await fs.exists(_path)))
      return _path;
    let newPath = "";
    for (let ext of this.extensionsToTry)
      if (newPath = _path + ext, await fs.exists(newPath))
        return newPath;
    if (importer && importer.startsWith("/") && canRetry)
      return this.resolve(import_path_browserify.default.join(resolveDir, _path), importer, resolveDir, !1);
  }
  emitResolveError({
    message,
    location: location2,
    code,
    path: path7,
    exception,
    namespace,
    external
  }) {
    return {
      pluginName: _ESBuildPackage.pluginName,
      errors: [
        {
          text: message || exception?.toString() || "",
          detail: message && exception ? exception.toString() : "",
          location: location2 || void 0
        }
      ],
      path: path7,
      external,
      namespace,
      pluginData: {code}
    };
  }
  async saveResultToCache(result, route) {
    let outResults = new Array(result.outputFiles.length), i = 0, cache = await getCache();
    for (let file of result.outputFiles) {
      let dest = globalThis.location.origin + file.path, headers = new Headers();
      headers.set("Content-Length", file.contents.byteLength.toString(10)), headers.set("Content-Type", import_lite.default.getType(file.path).toString()), await cache.put(dest, new Response(new Blob([file.text], {
        type: import_lite.default.getType(file.path)
      }), {headers})), outResults[i++] = dest;
    }
    return {entryPoints: outResults};
  }
  generateRelativePath() {
    return "/";
  }
  async build(route) {
    this.relativePath = route.absWorkingDirectory;
    let tsconfigFile = await this.root.nativeFile("tsconfig.json"), tsconfig;
    if (tsconfigFile)
      try {
        tsconfig = await tsconfigFile.text();
      } catch (exception) {
        let err = PackagerError.with(ErrorCode.invalidTSConfig, exception);
        throw err.build = this, err;
      }
    let entryPoints = route.entryPoints, result, config = {
      ...this.pkg.esbuild,
      format: "esm",
      tsconfig,
      metafile: !0,
      entryPoints,
      publicPath: _ESBuildPackage.origin + this.relativePath,
      plugins: [this.asPlugin()],
      write: !1,
      splitting: !0,
      loader: this.pkg.esbuild.loader ? this.pkg.esbuild.loader : {
        ".js": "jsx",
        ".ts": "tsx",
        ".tsx": "tsx"
      },
      absWorkingDir: this.relativePath,
      nodePaths: ["/node_modules"],
      outdir: this.relativePath,
      bundle: !0
    };
    try {
      result = await (0, import_esbuild_wasm.build)(config);
    } catch (e) {
      let err = PackagerError.with(ErrorCode.buildFailed, e);
      throw err.build = this, err;
    }
    let scripts = route.builder.scripts;
    for (let outputFile in result.metafile.outputs) {
      let file = result.metafile.outputs[outputFile];
      if (!result.metafile.outputs[outputFile].entryPoint || import_path_browserify.default.extname(outputFile) !== ".js")
        continue;
      let entryPoint = route.resolveFrom(file.entryPoint);
      if (scripts.has(entryPoint)) {
        let script = scripts.get(entryPoint), src = route.resolveEntryPoint(outputFile), text = new import_node.Text(bootstrap(src));
        script.attribs["data-src"] = src, script.attribs.type = "module", delete script.attribs.src;
        for (let i = 0; i < script.attributes.length; i++)
          if (script.attributes[i].name === "src") {
            script.attributes.splice(i, 1);
            continue;
          }
        import_htmlparser2.DomUtils.appendChild(script, text);
      }
    }
    let html = route.renderToString(result, config);
    return {
      warnings: result.warnings,
      ...await this.saveResultToCache(result, route),
      html
    };
  }
  async getFileForLocation(location2) {
    return await this.root.nativeFile(location2.file);
  }
  asPlugin() {
    let resolveFile = this.resolveFile, loadFile = this.loadFile;
    return {
      name: _ESBuildPackage.pluginName,
      setup(build2) {
        build2.onResolve({filter: /.*/}, resolveFile), build2.onLoad({filter: /.*/}, loadFile);
      }
    };
  }
}, ESBuildPackage = _ESBuildPackage;
ESBuildPackage.pluginName = "devserverless", ESBuildPackage.permissionMode = {mode: "read"};

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global, freeGlobal_default = freeGlobal;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self, root = freeGlobal_default || freeSelf || Function("return this")(), root_default = root;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol, Symbol_default = Symbol2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty, nativeObjectToString = objectProto.toString, symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = !0;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value);
  return unmasked && (isOwn ? value[symToStringTag] = tag : delete value[symToStringTag]), result;
}
var getRawTag_default = getRawTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype, nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]", undefinedTag = "[object Undefined]", symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  return value == null ? value === void 0 ? undefinedTag : nullTag : symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArray.js
var isArray = Array.isArray, isArray_default = isArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value))
    return !1;
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"], coreJsData_default = coreJsData;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype, funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reIsHostCtor = /^\[object .+?Constructor\]$/, funcProto2 = Function.prototype, objectProto3 = Object.prototype, funcToString2 = funcProto2.toString, hasOwnProperty2 = objectProto3.hasOwnProperty, reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value))
    return !1;
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_WeakMap.js
var WeakMap2 = getNative_default(root_default, "WeakMap"), WeakMap_default = WeakMap2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseCreate.js
var objectCreate = Object.create, baseCreate = function() {
  function object() {
  }
  return function(proto) {
    if (!isObject_default(proto))
      return {};
    if (objectCreate)
      return objectCreate(proto);
    object.prototype = proto;
    var result = new object();
    return object.prototype = void 0, result;
  };
}(), baseCreate_default = baseCreate;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copyArray.js
function copyArray(source, array) {
  var index = -1, length = source.length;
  for (array || (array = Array(length)); ++index < length; )
    array[index] = source[index];
  return array;
}
var copyArray_default = copyArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_defineProperty.js
var defineProperty = function() {
  try {
    var func = getNative_default(Object, "defineProperty");
    return func({}, "", {}), func;
  } catch (e) {
  }
}(), defineProperty_default = defineProperty;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayEach.js
function arrayEach(array, iteratee) {
  for (var index = -1, length = array == null ? 0 : array.length; ++index < length && iteratee(array[index], index, array) !== !1; )
    ;
  return array;
}
var arrayEach_default = arrayEach;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isIndex.js
var MAX_SAFE_INTEGER = 9007199254740991, reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  return length = length ?? MAX_SAFE_INTEGER, !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
var isIndex_default = isIndex;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssignValue.js
function baseAssignValue(object, key, value) {
  key == "__proto__" && defineProperty_default ? defineProperty_default(object, key, {
    configurable: !0,
    enumerable: !0,
    value,
    writable: !0
  }) : object[key] = value;
}
var baseAssignValue_default = baseAssignValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_assignValue.js
var objectProto4 = Object.prototype, hasOwnProperty3 = objectProto4.hasOwnProperty;
function assignValue(object, key, value) {
  var objValue = object[key];
  (!(hasOwnProperty3.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) && baseAssignValue_default(object, key, value);
}
var assignValue_default = assignValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copyObject.js
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  for (var index = -1, length = props.length; ++index < length; ) {
    var key = props[index], newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
    newValue === void 0 && (newValue = source[key]), isNew ? baseAssignValue_default(object, key, newValue) : assignValue_default(object, key, newValue);
  }
  return object;
}
var copyObject_default = copyObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isLength.js
var MAX_SAFE_INTEGER2 = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
}
var isLength_default = isLength;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArrayLike.js
function isArrayLike(value) {
  return value != null && isLength_default(value.length) && !isFunction_default(value);
}
var isArrayLike_default = isArrayLike;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isPrototype.js
var objectProto5 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto5;
  return value === proto;
}
var isPrototype_default = isPrototype;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseTimes.js
function baseTimes(n, iteratee) {
  for (var index = -1, result = Array(n); ++index < n; )
    result[index] = iteratee(index);
  return result;
}
var baseTimes_default = baseTimes;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsArguments.js
var argsTag = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
}
var baseIsArguments_default = baseIsArguments;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArguments.js
var objectProto6 = Object.prototype, hasOwnProperty4 = objectProto6.hasOwnProperty, propertyIsEnumerable = objectProto6.propertyIsEnumerable, isArguments = baseIsArguments_default(function() {
  return arguments;
}()) ? baseIsArguments_default : function(value) {
  return isObjectLike_default(value) && hasOwnProperty4.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
}, isArguments_default = isArguments;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/stubFalse.js
function stubFalse() {
  return !1;
}
var stubFalse_default = stubFalse;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayLikeKeys.js
var import_isBuffer = __toModule(require_isBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsTypedArray.js
var argsTag2 = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]", typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = !0;
typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = !1;
function baseIsTypedArray(value) {
  return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
}
var baseIsTypedArray_default = baseIsTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isTypedArray.js
var import_nodeUtil = __toModule(require_nodeUtil()), nodeIsTypedArray = import_nodeUtil.default && import_nodeUtil.default.isTypedArray, isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default, isTypedArray_default = isTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayLikeKeys.js
var objectProto7 = Object.prototype, hasOwnProperty5 = objectProto7.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && (0, import_isBuffer.default)(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
  for (var key in value)
    (inherited || hasOwnProperty5.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex_default(key, length))) && result.push(key);
  return result;
}
var arrayLikeKeys_default = arrayLikeKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_overArg.js
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var overArg_default = overArg;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeKeys.js
var nativeKeys = overArg_default(Object.keys, Object), nativeKeys_default = nativeKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseKeys.js
var objectProto8 = Object.prototype, hasOwnProperty6 = objectProto8.hasOwnProperty;
function baseKeys(object) {
  if (!isPrototype_default(object))
    return nativeKeys_default(object);
  var result = [];
  for (var key in Object(object))
    hasOwnProperty6.call(object, key) && key != "constructor" && result.push(key);
  return result;
}
var baseKeys_default = baseKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/keys.js
function keys(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
}
var keys_default = keys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeKeysIn.js
function nativeKeysIn(object) {
  var result = [];
  if (object != null)
    for (var key in Object(object))
      result.push(key);
  return result;
}
var nativeKeysIn_default = nativeKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseKeysIn.js
var objectProto9 = Object.prototype, hasOwnProperty7 = objectProto9.hasOwnProperty;
function baseKeysIn(object) {
  if (!isObject_default(object))
    return nativeKeysIn_default(object);
  var isProto = isPrototype_default(object), result = [];
  for (var key in object)
    key == "constructor" && (isProto || !hasOwnProperty7.call(object, key)) || result.push(key);
  return result;
}
var baseKeysIn_default = baseKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/keysIn.js
function keysIn(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object, !0) : baseKeysIn_default(object);
}
var keysIn_default = keysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create"), nativeCreate_default = nativeCreate;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {}, this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  return this.size -= result ? 1 : 0, result;
}
var hashDelete_default = hashDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__", objectProto10 = Object.prototype, hasOwnProperty8 = objectProto10.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty8.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashHas.js
var objectProto11 = Object.prototype, hasOwnProperty9 = objectProto11.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty9.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  return this.size += this.has(key) ? 0 : 1, data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value, this;
}
var hashSet_default = hashSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype.delete = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [], this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  for (var length = array.length; length--; )
    if (eq_default(array[length][0], key))
      return length;
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype, splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0)
    return !1;
  var lastIndex = data.length - 1;
  return index == lastIndex ? data.pop() : splice.call(data, index, 1), --this.size, !0;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? (++this.size, data.push([key, value])) : data[index][1] = value, this;
}
var listCacheSet_default = listCacheSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype.delete = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map"), Map_default = Map2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0, this.__data__ = {
    hash: new Hash_default(),
    map: new (Map_default || ListCache_default)(),
    string: new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getMapData.js
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key).delete(key);
  return this.size -= result ? 1 : 0, result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  return data.set(key, value), this.size += data.size == size ? 0 : 1, this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype.delete = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayPush.js
function arrayPush(array, values) {
  for (var index = -1, length = values.length, offset = array.length; ++index < length; )
    array[offset + index] = values[index];
  return array;
}
var arrayPush_default = arrayPush;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getPrototype.js
var getPrototype = overArg_default(Object.getPrototypeOf, Object), getPrototype_default = getPrototype;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackClear.js
function stackClear() {
  this.__data__ = new ListCache_default(), this.size = 0;
}
var stackClear_default = stackClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackDelete.js
function stackDelete(key) {
  var data = this.__data__, result = data.delete(key);
  return this.size = data.size, result;
}
var stackDelete_default = stackDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackGet.js
function stackGet(key) {
  return this.__data__.get(key);
}
var stackGet_default = stackGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackHas.js
function stackHas(key) {
  return this.__data__.has(key);
}
var stackHas_default = stackHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackSet.js
var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache_default) {
    var pairs = data.__data__;
    if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1)
      return pairs.push([key, value]), this.size = ++data.size, this;
    data = this.__data__ = new MapCache_default(pairs);
  }
  return data.set(key, value), this.size = data.size, this;
}
var stackSet_default = stackSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Stack.js
function Stack(entries) {
  var data = this.__data__ = new ListCache_default(entries);
  this.size = data.size;
}
Stack.prototype.clear = stackClear_default;
Stack.prototype.delete = stackDelete_default;
Stack.prototype.get = stackGet_default;
Stack.prototype.has = stackHas_default;
Stack.prototype.set = stackSet_default;
var Stack_default = Stack;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssign.js
function baseAssign(object, source) {
  return object && copyObject_default(source, keys_default(source), object);
}
var baseAssign_default = baseAssign;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssignIn.js
function baseAssignIn(object, source) {
  return object && copyObject_default(source, keysIn_default(source), object);
}
var baseAssignIn_default = baseAssignIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var import_cloneBuffer = __toModule(require_cloneBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayFilter.js
function arrayFilter(array, predicate) {
  for (var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = []; ++index < length; ) {
    var value = array[index];
    predicate(value, index, array) && (result[resIndex++] = value);
  }
  return result;
}
var arrayFilter_default = arrayFilter;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/stubArray.js
function stubArray() {
  return [];
}
var stubArray_default = stubArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getSymbols.js
var objectProto12 = Object.prototype, propertyIsEnumerable2 = objectProto12.propertyIsEnumerable, nativeGetSymbols = Object.getOwnPropertySymbols, getSymbols = nativeGetSymbols ? function(object) {
  return object == null ? [] : (object = Object(object), arrayFilter_default(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable2.call(object, symbol);
  }));
} : stubArray_default, getSymbols_default = getSymbols;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copySymbols.js
function copySymbols(source, object) {
  return copyObject_default(source, getSymbols_default(source), object);
}
var copySymbols_default = copySymbols;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getSymbolsIn.js
var nativeGetSymbols2 = Object.getOwnPropertySymbols, getSymbolsIn = nativeGetSymbols2 ? function(object) {
  for (var result = []; object; )
    arrayPush_default(result, getSymbols_default(object)), object = getPrototype_default(object);
  return result;
} : stubArray_default, getSymbolsIn_default = getSymbolsIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copySymbolsIn.js
function copySymbolsIn(source, object) {
  return copyObject_default(source, getSymbolsIn_default(source), object);
}
var copySymbolsIn_default = copySymbolsIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseGetAllKeys.js
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
}
var baseGetAllKeys_default = baseGetAllKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getAllKeys.js
function getAllKeys(object) {
  return baseGetAllKeys_default(object, keys_default, getSymbols_default);
}
var getAllKeys_default = getAllKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getAllKeysIn.js
function getAllKeysIn(object) {
  return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
}
var getAllKeysIn_default = getAllKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_DataView.js
var DataView = getNative_default(root_default, "DataView"), DataView_default = DataView;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Promise.js
var Promise2 = getNative_default(root_default, "Promise"), Promise_default = Promise2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Set.js
var Set2 = getNative_default(root_default, "Set"), Set_default = Set2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getTag.js
var mapTag2 = "[object Map]", objectTag2 = "[object Object]", promiseTag = "[object Promise]", setTag2 = "[object Set]", weakMapTag2 = "[object WeakMap]", dataViewTag2 = "[object DataView]", dataViewCtorString = toSource_default(DataView_default), mapCtorString = toSource_default(Map_default), promiseCtorString = toSource_default(Promise_default), setCtorString = toSource_default(Set_default), weakMapCtorString = toSource_default(WeakMap_default), getTag = baseGetTag_default;
(DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag2 || Map_default && getTag(new Map_default()) != mapTag2 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag2 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) && (getTag = function(value) {
  var result = baseGetTag_default(value), Ctor = result == objectTag2 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
  if (ctorString)
    switch (ctorString) {
      case dataViewCtorString:
        return dataViewTag2;
      case mapCtorString:
        return mapTag2;
      case promiseCtorString:
        return promiseTag;
      case setCtorString:
        return setTag2;
      case weakMapCtorString:
        return weakMapTag2;
    }
  return result;
});
var getTag_default = getTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneArray.js
var objectProto13 = Object.prototype, hasOwnProperty10 = objectProto13.hasOwnProperty;
function initCloneArray(array) {
  var length = array.length, result = new array.constructor(length);
  return length && typeof array[0] == "string" && hasOwnProperty10.call(array, "index") && (result.index = array.index, result.input = array.input), result;
}
var initCloneArray_default = initCloneArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Uint8Array.js
var Uint8Array2 = root_default.Uint8Array, Uint8Array_default = Uint8Array2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneArrayBuffer.js
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  return new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer)), result;
}
var cloneArrayBuffer_default = cloneArrayBuffer;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneDataView.js
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var cloneDataView_default = cloneDataView;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneRegExp.js
var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  return result.lastIndex = regexp.lastIndex, result;
}
var cloneRegExp_default = cloneRegExp;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneSymbol.js
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
var cloneSymbol_default = cloneSymbol;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneTypedArray.js
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var cloneTypedArray_default = cloneTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneByTag.js
var boolTag2 = "[object Boolean]", dateTag2 = "[object Date]", mapTag3 = "[object Map]", numberTag2 = "[object Number]", regexpTag2 = "[object RegExp]", setTag3 = "[object Set]", stringTag2 = "[object String]", symbolTag = "[object Symbol]", arrayBufferTag2 = "[object ArrayBuffer]", dataViewTag3 = "[object DataView]", float32Tag2 = "[object Float32Array]", float64Tag2 = "[object Float64Array]", int8Tag2 = "[object Int8Array]", int16Tag2 = "[object Int16Array]", int32Tag2 = "[object Int32Array]", uint8Tag2 = "[object Uint8Array]", uint8ClampedTag2 = "[object Uint8ClampedArray]", uint16Tag2 = "[object Uint16Array]", uint32Tag2 = "[object Uint32Array]";
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag2:
      return cloneArrayBuffer_default(object);
    case boolTag2:
    case dateTag2:
      return new Ctor(+object);
    case dataViewTag3:
      return cloneDataView_default(object, isDeep);
    case float32Tag2:
    case float64Tag2:
    case int8Tag2:
    case int16Tag2:
    case int32Tag2:
    case uint8Tag2:
    case uint8ClampedTag2:
    case uint16Tag2:
    case uint32Tag2:
      return cloneTypedArray_default(object, isDeep);
    case mapTag3:
      return new Ctor();
    case numberTag2:
    case stringTag2:
      return new Ctor(object);
    case regexpTag2:
      return cloneRegExp_default(object);
    case setTag3:
      return new Ctor();
    case symbolTag:
      return cloneSymbol_default(object);
  }
}
var initCloneByTag_default = initCloneByTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneObject.js
function initCloneObject(object) {
  return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
}
var initCloneObject_default = initCloneObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var import_isBuffer2 = __toModule(require_isBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsMap.js
var mapTag4 = "[object Map]";
function baseIsMap(value) {
  return isObjectLike_default(value) && getTag_default(value) == mapTag4;
}
var baseIsMap_default = baseIsMap;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isMap.js
var import_nodeUtil2 = __toModule(require_nodeUtil()), nodeIsMap = import_nodeUtil2.default && import_nodeUtil2.default.isMap, isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default, isMap_default = isMap;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsSet.js
var setTag4 = "[object Set]";
function baseIsSet(value) {
  return isObjectLike_default(value) && getTag_default(value) == setTag4;
}
var baseIsSet_default = baseIsSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isSet.js
var import_nodeUtil3 = __toModule(require_nodeUtil()), nodeIsSet = import_nodeUtil3.default && import_nodeUtil3.default.isSet, isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default, isSet_default = isSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4, argsTag3 = "[object Arguments]", arrayTag2 = "[object Array]", boolTag3 = "[object Boolean]", dateTag3 = "[object Date]", errorTag2 = "[object Error]", funcTag3 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag5 = "[object Map]", numberTag3 = "[object Number]", objectTag3 = "[object Object]", regexpTag3 = "[object RegExp]", setTag5 = "[object Set]", stringTag3 = "[object String]", symbolTag2 = "[object Symbol]", weakMapTag3 = "[object WeakMap]", arrayBufferTag3 = "[object ArrayBuffer]", dataViewTag4 = "[object DataView]", float32Tag3 = "[object Float32Array]", float64Tag3 = "[object Float64Array]", int8Tag3 = "[object Int8Array]", int16Tag3 = "[object Int16Array]", int32Tag3 = "[object Int32Array]", uint8Tag3 = "[object Uint8Array]", uint8ClampedTag3 = "[object Uint8ClampedArray]", uint16Tag3 = "[object Uint16Array]", uint32Tag3 = "[object Uint32Array]", cloneableTags = {};
cloneableTags[argsTag3] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag5] = cloneableTags[numberTag3] = cloneableTags[objectTag3] = cloneableTags[regexpTag3] = cloneableTags[setTag5] = cloneableTags[stringTag3] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = !0;
cloneableTags[errorTag2] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = !1;
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
  if (customizer && (result = object ? customizer(value, key, object, stack) : customizer(value)), result !== void 0)
    return result;
  if (!isObject_default(value))
    return value;
  var isArr = isArray_default(value);
  if (isArr) {
    if (result = initCloneArray_default(value), !isDeep)
      return copyArray_default(value, result);
  } else {
    var tag = getTag_default(value), isFunc = tag == funcTag3 || tag == genTag2;
    if ((0, import_isBuffer2.default)(value))
      return (0, import_cloneBuffer.default)(value, isDeep);
    if (tag == objectTag3 || tag == argsTag3 || isFunc && !object) {
      if (result = isFlat || isFunc ? {} : initCloneObject_default(value), !isDeep)
        return isFlat ? copySymbolsIn_default(value, baseAssignIn_default(result, value)) : copySymbols_default(value, baseAssign_default(result, value));
    } else {
      if (!cloneableTags[tag])
        return object ? value : {};
      result = initCloneByTag_default(value, tag, isDeep);
    }
  }
  stack || (stack = new Stack_default());
  var stacked = stack.get(value);
  if (stacked)
    return stacked;
  stack.set(value, result), isSet_default(value) ? value.forEach(function(subValue) {
    result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
  }) : isMap_default(value) && value.forEach(function(subValue, key2) {
    result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  });
  var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default, props = isArr ? void 0 : keysFunc(value);
  return arrayEach_default(props || value, function(subValue, key2) {
    props && (key2 = subValue, subValue = value[key2]), assignValue_default(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  }), result;
}
var baseClone_default = baseClone;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/cloneDeep.js
var CLONE_DEEP_FLAG2 = 1, CLONE_SYMBOLS_FLAG2 = 4;
function cloneDeep(value) {
  return baseClone_default(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
}
var cloneDeep_default = cloneDeep;

// src/lib/PackageJSON.ts
var semver = __toModule(require_semver2()), path2 = __toModule(require_path_browserify()), AUTO_DEPENDENCIES = ["react", "react-dom", "prop-types", "object-assign"], dependencyKeys = [
  "dependencies",
  "optionalDependencies",
  "peerDependencies",
  "devDependencies"
], eachIteratorValue = ["", ""], PackageJSON = class {
  constructor() {
    this.allDependencies = new Map();
  }
  *eachDependency() {
    for (let depKey of dependencyKeys) {
      let deps = this[depKey];
      if (deps)
        for (let key in deps)
          eachIteratorValue[0] = key, eachIteratorValue[1] = deps[key], yield eachIteratorValue;
    }
  }
  normalizeDependencies() {
    for (let depKey of dependencyKeys) {
      let deps = this[depKey];
      if (deps)
        for (let moduleId in deps) {
          let version = deps[moduleId];
          version = version.replace(/\^/gm, ""), semver.clean(version, !1) ? this.allDependencies.set(moduleId, `${moduleId}@${semver.clean(version, !1)}`) : this.allDependencies.set(moduleId, moduleId);
        }
    }
    for (let autodep of AUTO_DEPENDENCIES)
      this.allDependencies.has(autodep) || this.allDependencies.set(autodep, autodep);
  }
  static parse(json, ClassName = PackageJSON) {
    let pkg = new ClassName();
    return pkg.process(json, ClassName), pkg;
  }
  process(json, ClassName = PackageJSON) {
    let parsed = JSON.parse(json);
    return typeof parsed.handle != "undefined" && delete parsed.handle, parsed.run = ClassName.normalizeRun(parsed.run || {}), parsed.esbuild = ClassName.normalizeESBuild(parsed.esbuild || {}), Object.assign(this, parsed), this.normalizeDependencies(), this;
  }
  static normalizeRun(run) {
    return typeof run.router == "string" && run.router ? (run.router = run.router.toLowerCase().trim(), run.isRouterUnset = !1) : (run.isRouterUnset = !0, run.router = ""), run;
  }
  toJSON() {
    let json = cloneDeep_default(this);
    return delete json.run.isRouterUnset, delete json.allDependencies, json;
  }
  static normalizeESBuild(esbuild) {
    return {};
  }
}, PackageJSONFile = class extends PackageJSON {
  constructor() {
    super();
  }
  static async fromHandle(handle) {
    let pkg = PackageJSONFile.parse(await (await handle.getFile()).text());
    return pkg.handle = handle, pkg;
  }
  get staticPath() {
    return path2.extname(this.run.router) ? path2.join(this.run.router, "../") : this.run.router;
  }
  async save() {
    let perm = await this.handle.createWritable({
      keepExistingData: !1
    }), json = this.toJSON();
    console.log(json);
    let text = JSON.stringify(json, null, 2), writer = perm.getWriter();
    await writer.write(text), await writer.close();
  }
  process(json, ClassName = PackageJSON) {
    return super.process(json, PackageJSONFile);
  }
  async reload() {
    this.process(await (await this.handle.getFile()).text(), PackageJSONFile);
  }
  static parse(json) {
    return super.parse(json, PackageJSONFile);
  }
  toJSON() {
    let json = super.toJSON();
    return delete json.handle, json;
  }
};

// node_modules/.pnpm/@jarred/htmlbuild@1.0.3/node_modules/@jarred/htmlbuild/index.mjs
var serializer = __toModule(require_lib4()), import_htmlparser22 = __toModule(require_lib6()), path3 = __toModule(require_path_browserify()), HTML2ESBuild = class {
  constructor() {
    this.scripts = new Map(), this.links = new Map();
  }
  generate(source, resolve) {
    let dom2 = (0, import_htmlparser22.parseDocument)(source);
    this.dom = dom2;
    let config = {
      bundle: !0,
      metafile: !0,
      entryPoints: []
    }, src = "";
    for (let script of import_htmlparser22.DomUtils.getElementsByTagName("script", dom2))
      src = script.attribs.src, src && !src.includes("://") && (src = resolve(src), this.scripts.set(src, script), config.entryPoints.push(src));
    for (let link of import_htmlparser22.DomUtils.getElementsByTagName("link", dom2))
      (!link.attribs.rel || link.attribs.rel === "stylesheet") && link.attribs.href && !link.attribs.href.includes("://") && (src = resolve(link.attribs.href), this.links.set(src, link), config.entryPoints.push(src));
    return this.config = config, config;
  }
  renderToString(build2, config = this.config, resolveFrom, resolveTo) {
    if (!build2.metafile)
      throw "Build is missing metafile.";
    let {links, scripts} = this, meta = build2.metafile, cssOutputs = new Map(), file;
    for (let output in meta.outputs)
      file = meta.outputs[output], path3.extname(output) === ".css" && cssOutputs.set(output, file);
    let stylesheetsToInsert = new Map(), prefix = config.publicPath ? config.publicPath : "";
    for (let output in meta.outputs) {
      if (file = meta.outputs[output], !file.entryPoint)
        continue;
      let entryPoint = resolveFrom(file.entryPoint);
      if (scripts.has(entryPoint)) {
        let ext = path3.extname(output), cssName = output.substring(0, output.length - ext.length) + ".css", script = scripts.get(entryPoint);
        cssOutputs.has(cssName) && (!cssOutputs.get(cssName).entryPoint || !links.has(cssOutputs.get(cssName).entryPoint)) && stylesheetsToInsert.set(cssName, script);
        let _output = resolveTo(output, script);
        _output && (script.attribs.src = _output);
      } else
        links.has(entryPoint) && (links.get(entryPoint).attribs.href = resolveTo(output));
    }
    for (let [stylesheetName, above] of stylesheetsToInsert.entries()) {
      var parser = new import_htmlparser22.Parser(new import_htmlparser22.DomHandler((err, elems) => {
        import_htmlparser22.DomUtils.prepend(above, elems[0]);
      }));
      parser.write(`<link rel="stylesheet" href="${resolveTo(stylesheetName)}" />`), parser.end();
    }
    return serializer.default(this.dom, {});
  }
};

// src/lib/Route.ts
var path4 = __toModule(require_path_browserify()), Route = class {
  constructor() {
    this.entryPoints = [];
    this.absWorkingDirectory = "";
    this.builder = new HTML2ESBuild();
    this.outDestination = "/";
    this.resolvedEntryPoints = new Map();
    this.resolveFrom = (..._path) => path4.join(this.absWorkingDirectory, ..._path);
    this.resolveTo = (_path, node) => {
      let out = path4.join(this.outDestination, _path);
      return path4.extname(out) === ".js" ? null : out;
    };
    this.resolveEntryPoint = (_path) => path4.join(this.outDestination, _path);
  }
  static from(root2, pathname) {
    let route = new Route();
    return route.root = root2, route.absWorkingDirectory = pathname.endsWith(".html") ? path4.join(pathname, "../") : pathname, route;
  }
  async generateConfig(file) {
    let {entryPoints} = this.builder.generate(await file.text(), this.resolveFrom);
    this.entryPoints = entryPoints;
  }
  renderToString(result, config) {
    return this.builder.renderToString(result, config, this.resolveFrom, this.resolveTo);
  }
}, FilesystemRouter = class {
  constructor(packageRoot, pagesRoot) {
    this.packageRoot = packageRoot, this.pagesRoot = pagesRoot;
  }
  async routeFor(file, pathname) {
    let route = Route.from(this.packageRoot, pathname);
    return await route.generateConfig(file), route;
  }
  async resolve(pathname) {
    let {pagesRoot: fs} = this, target = pathname, file;
    if (pathname.indexOf("//") > -1 && (pathname = pathname.replace(/\/+/g, "/")), pathname.endsWith("/"))
      return target = pathname.slice(0, -1) + ".html", file = await fs.nativeFile(target), file ? await this.routeFor(file, target) : (target = pathname + "index.html", file = await fs.nativeFile(target), file ? await this.routeFor(file, target) : null);
    if (pathname.endsWith(".html") || (target = pathname + ".html"), file = await fs.nativeFile(target), file)
      return await this.routeFor(file, target);
    if (target = path4.normalize(path4.join(pathname, "../")), target.startsWith(".."))
      return null;
    for (let _result of await fs.readdir(target)) {
      let result = _result;
      if (result.kind === "file" && result.name.startsWith("[") && result.name.endsWith("].html")) {
        file = result;
        break;
      }
    }
    return file ? await this.routeFor(file, target) : null;
  }
}, SinglePageAppRouter = class extends FilesystemRouter {
  constructor() {
    super(...arguments);
    this.destination = "";
  }
  async resolve(pathname) {
    let {pagesRoot: fs} = this;
    return await this.routeFor(await fs.nativeFile(this.destination), "/");
  }
}, RouterType;
(function(RouterType2) {
  RouterType2.unknown = "", RouterType2.spa = "spa", RouterType2.filesystem = "filesystem";
})(RouterType || (RouterType = {}));

// src/lib/router/fs-native.ts
var path5 = __toModule(require_path_browserify()), NativeFS = class {
  constructor(root2) {
    this.relativePath = "/";
    this.handleCache = new Map();
    if (!root2 || !(root2 instanceof FileSystemDirectoryHandle))
      throw new TypeError("root must be a FileSystemDirectoryHandle");
    this.root = root2;
  }
  async nativeFile(_path) {
    if (this.handleCache.has(_path))
      return await this.handleCache.get(_path).getFile();
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), await handle.getFile()) : null;
  }
  async fileHandleFor(_path) {
    if (this.handleCache.has(_path))
      return this.handleCache.get(_path);
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), handle) : null;
  }
  async exists(_path) {
    if (this.handleCache.has(_path))
      return !0;
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), !0) : !1;
  }
  async resolveFileHandle(__path, from = this.root) {
    let _path = __path;
    (!path5.isAbsolute(_path) || !_path.startsWith("/")) && (_path = path5.join("/", _path)), _path = path5.normalize(_path);
    let component = _path;
    for (; _path.includes("/") && _path.length > 1 && from; )
      try {
        if (_path = _path.startsWith("/") ? _path.substring(1) : _path, component = _path.substring(0, _path.indexOf("/")), _path.length - component.length > 0) {
          if (_path = _path.substring(component.length), !_path.includes("/")) {
            let hasMatch = !1;
            for await (let filename of from.keys())
              if (filename === _path) {
                hasMatch = !0;
                break;
              }
            return hasMatch ? await from.getFileHandle(_path) : null;
          }
          from = await from.getDirectoryHandle(component);
        } else {
          let hasMatch = !1;
          for await (let filename of from.keys())
            if (filename === component) {
              hasMatch = !0;
              break;
            }
          return hasMatch ? await from.getFileHandle(component) : null;
        }
      } catch (exception) {
        return console.error(__path, exception), null;
      }
    return null;
  }
  async resolveDirectoryHandle(_path, from = this.root) {
    (!path5.isAbsolute(_path) || !_path.startsWith("/")) && (_path = path5.join("/", _path));
    let parts = _path.split("/");
    for (let i = 0; i < parts.length; i++)
      !parts[i] || (from = await from.getDirectoryHandle(parts[i]));
    return from;
  }
  async *readdir(_path) {
    let dir = await this.resolveDirectoryHandle(_path);
    !dir || (yield* dir.values());
  }
  async readFile(_path, encoding = "binary") {
    switch (encoding) {
      case "utf8":
        return this.readFileText(_path);
      case "binary":
        return this.readFileBinary(_path);
    }
  }
  async readFileBinary(_path) {
    return await (await this.nativeFile(_path)).arrayBuffer();
  }
  async readFileText(_path) {
    return await (await this.nativeFile(_path)).text();
  }
  async createReadStream(_path) {
    return (await this.nativeFile(_path)).stream();
  }
  realpath(_path) {
    return path5.normalize(_path);
  }
};

// src/lib/StoredPackage.ts
var permissionMode = {mode: "read"}, StoredPackage = class {
  constructor() {
    this.routerType = RouterType.unknown;
  }
  toRecord() {
    return {
      id: this.id,
      lastBuild: this.lastBuild || null,
      handle: this.handle,
      staticHandle: this.staticHandle,
      routerType: this.routerType
    };
  }
  static fromRecord(record) {
    let stored = new StoredPackage();
    return Object.assign(stored, record), stored.root = record.handle ? new NativeFS(record.handle) : null, stored.static = record.staticHandle ? new NativeFS(record.staticHandle) : null, stored;
  }
  static async fromJSON(opts) {
    let pkg = new StoredPackage();
    return Object.assign(pkg, opts), pkg.root = opts.handle ? new NativeFS(opts.handle) : null, pkg.static = opts.staticHandle ? new NativeFS(opts.staticHandle) : null, pkg;
  }
  async resolveStaticHandle() {
    if (!this.pkg.run?.router)
      return;
    let staticPath = path6.extname(this.pkg.run.router) ? path6.join(this.pkg.run.router, "../") : this.pkg.run.router;
    this.staticHandle = await this.root.resolveDirectoryHandle(staticPath, this.root.root), this.static = new NativeFS(this.staticHandle);
  }
  async load() {
    await this.loadPackageJSON(), (!this.staticHandle || !this.static) && await this.resolveStaticHandle(), this.loadRouter();
  }
  loadRouter() {
    path6.extname(this.pkg.run?.router) === ".html" ? (this.routerType = RouterType.spa, this.router = new SinglePageAppRouter(this.root, this.static), this.router.destination = path6.basename(this.pkg.run.router)) : (this.routerType = RouterType.filesystem, this.router = new FilesystemRouter(this.root, this.static));
  }
  async loadPackageJSON() {
    let dir = this.root;
    if (await dir.root.queryPermission(permissionMode) !== "granted") {
      let error = new PackagerPermissionError(ErrorCode.requirePermission);
      throw error.directoryName = dir.root.name, error;
    }
    let packageJSONFileHandle;
    try {
      packageJSONFileHandle = await dir.fileHandleFor("package.json");
    } catch (exception) {
      throw PackagerError.with(ErrorCode.errorFetchingPackageJSON, exception);
    }
    this.pkg = await PackageJSONFile.fromHandle(packageJSONFileHandle);
  }
  loadConfig() {
  }
  normalizeURL(url) {
    return !url.startsWith("/") || !path6.isAbsolute(url) ? path6.normalize(path6.join("/" + url)) : path6.normalize(url);
  }
  async resolveStaticFile(url) {
    let file;
    if (file = await this.static.nativeFile(url), console.log(url), !file) {
      let headers2 = new Headers();
      return headers2.set("Cache-Control", "private"), headers2.set("Content-Type", "text/plain"), new Response(new Blob([`404 Not Found \u2013 ${url}
`]), {
        status: 404,
        headers: headers2
      });
    }
    let headers = new Headers();
    return headers.set("Content-Type", import_lite2.default.getType(file.name).toString()), typeof file.size == "number" && headers.set("Content-Length", file.size.toString()), new Response(file, {headers, status: 200});
  }
};

// src/lib/Database.ts
var Database = class {
  async load() {
    this.db || (this.db = await openDB("handles", 8, {
      upgrade(database2, oldVersion, newVersion, transaction) {
        database2.objectStoreNames.contains("packages") || database2.createObjectStore("packages"), database2.objectStoreNames.contains("dirs") || database2.createObjectStore("dirs");
      }
    }));
  }
  async savePackage(pkg) {
    await this.load(), await this.db.put("packages", pkg.toRecord(), pkg.id);
  }
  async saveDir(directory, pkgHandle) {
    await this.load(), await this.db.put("dirs", {directory, id: getPackageID(), pkgHandle}, getPackageID());
  }
  async loadDir() {
    return await this.load(), await this.db.get("dirs", getPackageID());
  }
  async loadPackage(id) {
    await this.load();
    let rec = await this.db.get("packages", id);
    return rec ? StoredPackage.fromRecord(rec) : null;
  }
};

// src/lib/requestPermission.tsx
var database = new Database();
database.load();
async function requestPermission(id) {
  await database.load(), await (await database.loadPackage(id)).handle.requestPermission({mode: "read"});
}

// src/_dev_/requestPermissionRunner.ts
window.addEventListener("DOMContentLoaded", () => {
  document.querySelector("#button").addEventListener("click", async () => {
    await requestPermission(getPackageID()), location.pathname = location.pathname;
  });
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pbWVAMi41LjIvbm9kZV9tb2R1bGVzL21pbWUvTWltZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWltZUAyLjUuMi9ub2RlX21vZHVsZXMvbWltZS90eXBlcy9zdGFuZGFyZC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWltZUAyLjUuMi9ub2RlX21vZHVsZXMvbWltZS9saXRlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9wYXRoLWJyb3dzZXJpZnlAMS4wLjEvbm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZXNidWlsZC13YXNtQDAuOS4wL25vZGVfbW9kdWxlcy9lc2J1aWxkLXdhc20vbGliL2Jyb3dzZXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2VudGl0aWVzQDIuMi4wL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlX2NvZGVwb2ludC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHRtbHBhcnNlcjJANi4wLjEvbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9Ub2tlbml6ZXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2h0bWxwYXJzZXIyQDYuMC4xL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvUGFyc2VyLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb21oYW5kbGVyQDQuMC4wL25vZGVfbW9kdWxlcy9kb21oYW5kbGVyL2xpYi9ub2RlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb21oYW5kbGVyQDQuMC4wL25vZGVfbW9kdWxlcy9kb21oYW5kbGVyL2xpYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tZWxlbWVudHR5cGVAMi4xLjAvbm9kZV9tb2R1bGVzL2RvbWVsZW1lbnR0eXBlL2xpYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tdXRpbHNAMi40LjQvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi90YWd0eXBlcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZW50aXRpZXNAMi4yLjAvbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9kZWNvZGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2VudGl0aWVzQDIuMi4wL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZW5jb2RlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9lbnRpdGllc0AyLjIuMC9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb20tc2VyaWFsaXplckAxLjIuMC9ub2RlX21vZHVsZXMvZG9tLXNlcmlhbGl6ZXIvbGliL2ZvcmVpZ25OYW1lcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tLXNlcmlhbGl6ZXJAMS4yLjAvbm9kZV9tb2R1bGVzL2RvbS1zZXJpYWxpemVyL2xpYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tdXRpbHNAMi40LjQvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9zdHJpbmdpZnkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RvbXV0aWxzQDIuNC40L25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvdHJhdmVyc2FsLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb211dGlsc0AyLjQuNC9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL21hbmlwdWxhdGlvbi5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tdXRpbHNAMi40LjQvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9xdWVyeWluZy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tdXRpbHNAMi40LjQvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9sZWdhY3kuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RvbXV0aWxzQDIuNC40L25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvaGVscGVycy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tdXRpbHNAMi40LjQvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHRtbHBhcnNlcjJANi4wLjEvbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9GZWVkSGFuZGxlci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHRtbHBhcnNlcjJANi4wLjEvbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0J1ZmZlci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lQnVmZmVyLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9jb25zdGFudHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL2RlYnVnLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9yZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvcGFyc2Utb3B0aW9ucy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvaWRlbnRpZmllcnMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2NsYXNzZXMvc2VtdmVyLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcGFyc2UuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy92YWxpZC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NsZWFuLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvaW5jLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29tcGFyZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2VxLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZGlmZi5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL21ham9yLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbWlub3IuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9wYXRjaC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3ByZXJlbGVhc2UuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9yY29tcGFyZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUtbG9vc2UuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jb21wYXJlLWJ1aWxkLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvc29ydC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3Jzb3J0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvZ3QuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9sdC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL25lcS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2d0ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2x0ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NtcC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvZXJjZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0veWFsbGlzdEA0LjAuMC9ub2RlX21vZHVsZXMveWFsbGlzdC9pdGVyYXRvci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0veWFsbGlzdEA0LjAuMC9ub2RlX21vZHVsZXMveWFsbGlzdC95YWxsaXN0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9scnUtY2FjaGVANi4wLjAvbm9kZV9tb2R1bGVzL2xydS1jYWNoZS9pbmRleC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvY2xhc3Nlcy9yYW5nZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvY2xhc3Nlcy9jb21wYXJhdG9yLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvc2F0aXNmaWVzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvdG8tY29tcGFyYXRvcnMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9tYXgtc2F0aXNmeWluZy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi1zYXRpc2Z5aW5nLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbWluLXZlcnNpb24uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy92YWxpZC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL291dHNpZGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9ndHIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9sdHIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9pbnRlcnNlY3RzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvc2ltcGxpZnkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9zdWJzZXQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2luZGV4LmpzIiwgIi4uLy4uL2xpYi9sYXVuY2hJZGxlV29ya2VyLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pZGJANi4wLjAvbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9lc20vd3JhcC1pZGItdmFsdWUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2lkYkA2LjAuMC9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2VzbS9pbmRleC5qcyIsICIuLi9nZXRQYWNrYWdlSUQudHN4IiwgIi4uLy4uL2xpYi9TdG9yZWRQYWNrYWdlLnRzIiwgIi4uLy4uL2xpYi9FcnJvckNvZGUudHN4IiwgIi4uLy4uL2xpYi9FU0J1aWxkUGFja2FnZS50c3giLCAiLi4vLi4vbGliL2dldENhY2hlLnRzeCIsICIuLi8uLi9odG1sR2VuZXJhdG9yLnRzIiwgIi4uLy4uL2xpYi9ib290c3RyYXBwZXIudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UmF3VGFnLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdExpa2UuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc09iamVjdC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0Z1bmN0aW9uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3JlSnNEYXRhLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc01hc2tlZC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc05hdGl2ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VmFsdWUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE5hdGl2ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fV2Vha01hcC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUNyZWF0ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weUFycmF5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19kZWZpbmVQcm9wZXJ0eS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlFYWNoLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQXNzaWduVmFsdWUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXEuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc2lnblZhbHVlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3B5T2JqZWN0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzTGVuZ3RoLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXlMaWtlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc1Byb3RvdHlwZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRpbWVzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNBcmd1bWVudHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcmd1bWVudHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvc3R1YkZhbHNlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUxpa2VLZXlzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNUeXBlZEFycmF5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNUeXBlZEFycmF5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyQXJnLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzSW4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMva2V5c0luLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVDcmVhdGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hDbGVhci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaERlbGV0ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEdldC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEhhcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaFNldC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fSGFzaC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlQ2xlYXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc29jSW5kZXhPZi5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVHZXQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUhhcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlU2V0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19MaXN0Q2FjaGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVDbGVhci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNLZXlhYmxlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRNYXBEYXRhLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZURlbGV0ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVHZXQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlSGFzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZVNldC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTWFwQ2FjaGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5UHVzaC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0UHJvdG90eXBlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0NsZWFyLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0RlbGV0ZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tHZXQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrSGFzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja1NldC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3RhY2suanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VBc3NpZ24uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VBc3NpZ25Jbi5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUNsb25lLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUZpbHRlci5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zdHViQXJyYXkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFN5bWJvbHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlTeW1ib2xzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzSW4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlTeW1ib2xzSW4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRBbGxLZXlzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRBbGxLZXlzLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRBbGxLZXlzSW4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0RhdGFWaWV3LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19Qcm9taXNlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TZXQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFRhZy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lQXJyYXkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1VpbnQ4QXJyYXkuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lQXJyYXlCdWZmZXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lRGF0YVZpZXcuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lUmVnRXhwLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVN5bWJvbC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVUeXBlZEFycmF5LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVCeVRhZy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lT2JqZWN0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNNYXAuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNNYXAuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc1NldC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1NldC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jbG9uZURlZXAuanMiLCAiLi4vLi4vbGliL1BhY2thZ2VKU09OLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9AamFycmVkL2h0bWxidWlsZEAxLjAuMy9ub2RlX21vZHVsZXMvQGphcnJlZC9odG1sYnVpbGQvaW5kZXgubWpzIiwgIi4uLy4uL2xpYi9Sb3V0ZS50cyIsICIuLi8uLi9saWIvcm91dGVyL2ZzLW5hdGl2ZS50cyIsICIuLi8uLi9saWIvRGF0YWJhc2UudHMiLCAiLi4vLi4vbGliL3JlcXVlc3RQZXJtaXNzaW9uLnRzeCIsICIuLi9yZXF1ZXN0UGVybWlzc2lvblJ1bm5lci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB0eXBlTWFwIFtPYmplY3RdIE1hcCBvZiBNSU1FIHR5cGUgLT4gQXJyYXlbZXh0ZW5zaW9uc11cbiAqIEBwYXJhbSAuLi5cbiAqL1xuZnVuY3Rpb24gTWltZSgpIHtcbiAgdGhpcy5fdHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9leHRlbnNpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuZGVmaW5lKGFyZ3VtZW50c1tpXSk7XG4gIH1cblxuICB0aGlzLmRlZmluZSA9IHRoaXMuZGVmaW5lLmJpbmQodGhpcyk7XG4gIHRoaXMuZ2V0VHlwZSA9IHRoaXMuZ2V0VHlwZS5iaW5kKHRoaXMpO1xuICB0aGlzLmdldEV4dGVuc2lvbiA9IHRoaXMuZ2V0RXh0ZW5zaW9uLmJpbmQodGhpcyk7XG59XG5cbi8qKlxuICogRGVmaW5lIG1pbWV0eXBlIC0+IGV4dGVuc2lvbiBtYXBwaW5ncy4gIEVhY2gga2V5IGlzIGEgbWltZS10eXBlIHRoYXQgbWFwc1xuICogdG8gYW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIHR5cGUuICBUaGUgZmlyc3QgZXh0ZW5zaW9uIGlzXG4gKiB1c2VkIGFzIHRoZSBkZWZhdWx0IGV4dGVuc2lvbiBmb3IgdGhlIHR5cGUuXG4gKlxuICogZS5nLiBtaW1lLmRlZmluZSh7J2F1ZGlvL29nZycsIFsnb2dhJywgJ29nZycsICdzcHgnXX0pO1xuICpcbiAqIElmIGEgdHlwZSBkZWNsYXJlcyBhbiBleHRlbnNpb24gdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQsIGFuIGVycm9yIHdpbGxcbiAqIGJlIHRocm93bi4gIFRvIHN1cHByZXNzIHRoaXMgZXJyb3IgYW5kIGZvcmNlIHRoZSBleHRlbnNpb24gdG8gYmUgYXNzb2NpYXRlZFxuICogd2l0aCB0aGUgbmV3IHR5cGUsIHBhc3MgYGZvcmNlYD10cnVlLiAgQWx0ZXJuYXRpdmVseSwgeW91IG1heSBwcmVmaXggdGhlXG4gKiBleHRlbnNpb24gd2l0aCBcIipcIiB0byBtYXAgdGhlIHR5cGUgdG8gZXh0ZW5zaW9uLCB3aXRob3V0IG1hcHBpbmcgdGhlXG4gKiBleHRlbnNpb24gdG8gdGhlIHR5cGUuXG4gKlxuICogZS5nLiBtaW1lLmRlZmluZSh7J2F1ZGlvL3dhdicsIFsnd2F2J119LCB7J2F1ZGlvL3gtd2F2JywgWycqd2F2J119KTtcbiAqXG4gKlxuICogQHBhcmFtIG1hcCAoT2JqZWN0KSB0eXBlIGRlZmluaXRpb25zXG4gKiBAcGFyYW0gZm9yY2UgKEJvb2xlYW4pIGlmIHRydWUsIGZvcmNlIG92ZXJyaWRpbmcgb2YgZXhpc3RpbmcgZGVmaW5pdGlvbnNcbiAqL1xuTWltZS5wcm90b3R5cGUuZGVmaW5lID0gZnVuY3Rpb24odHlwZU1hcCwgZm9yY2UpIHtcbiAgZm9yIChsZXQgdHlwZSBpbiB0eXBlTWFwKSB7XG4gICAgbGV0IGV4dGVuc2lvbnMgPSB0eXBlTWFwW3R5cGVdLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4dGVuc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGV4dCA9IGV4dGVuc2lvbnNbaV07XG5cbiAgICAgIC8vICcqJyBwcmVmaXggPSBub3QgdGhlIHByZWZlcnJlZCB0eXBlIGZvciB0aGlzIGV4dGVuc2lvbi4gIFNvIGZpeHVwIHRoZVxuICAgICAgLy8gZXh0ZW5zaW9uLCBhbmQgc2tpcCBpdC5cbiAgICAgIGlmIChleHRbMF0gPT09ICcqJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmb3JjZSAmJiAoZXh0IGluIHRoaXMuX3R5cGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0F0dGVtcHQgdG8gY2hhbmdlIG1hcHBpbmcgZm9yIFwiJyArIGV4dCArXG4gICAgICAgICAgJ1wiIGV4dGVuc2lvbiBmcm9tIFwiJyArIHRoaXMuX3R5cGVzW2V4dF0gKyAnXCIgdG8gXCInICsgdHlwZSArXG4gICAgICAgICAgJ1wiLiBQYXNzIGBmb3JjZT10cnVlYCB0byBhbGxvdyB0aGlzLCBvdGhlcndpc2UgcmVtb3ZlIFwiJyArIGV4dCArXG4gICAgICAgICAgJ1wiIGZyb20gdGhlIGxpc3Qgb2YgZXh0ZW5zaW9ucyBmb3IgXCInICsgdHlwZSArICdcIi4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3R5cGVzW2V4dF0gPSB0eXBlO1xuICAgIH1cblxuICAgIC8vIFVzZSBmaXJzdCBleHRlbnNpb24gYXMgZGVmYXVsdFxuICAgIGlmIChmb3JjZSB8fCAhdGhpcy5fZXh0ZW5zaW9uc1t0eXBlXSkge1xuICAgICAgY29uc3QgZXh0ID0gZXh0ZW5zaW9uc1swXTtcbiAgICAgIHRoaXMuX2V4dGVuc2lvbnNbdHlwZV0gPSAoZXh0WzBdICE9PSAnKicpID8gZXh0IDogZXh0LnN1YnN0cigxKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTG9va3VwIGEgbWltZSB0eXBlIGJhc2VkIG9uIGV4dGVuc2lvblxuICovXG5NaW1lLnByb3RvdHlwZS5nZXRUeXBlID0gZnVuY3Rpb24ocGF0aCkge1xuICBwYXRoID0gU3RyaW5nKHBhdGgpO1xuICBsZXQgbGFzdCA9IHBhdGgucmVwbGFjZSgvXi4qWy9cXFxcXS8sICcnKS50b0xvd2VyQ2FzZSgpO1xuICBsZXQgZXh0ID0gbGFzdC5yZXBsYWNlKC9eLipcXC4vLCAnJykudG9Mb3dlckNhc2UoKTtcblxuICBsZXQgaGFzUGF0aCA9IGxhc3QubGVuZ3RoIDwgcGF0aC5sZW5ndGg7XG4gIGxldCBoYXNEb3QgPSBleHQubGVuZ3RoIDwgbGFzdC5sZW5ndGggLSAxO1xuXG4gIHJldHVybiAoaGFzRG90IHx8ICFoYXNQYXRoKSAmJiB0aGlzLl90eXBlc1tleHRdIHx8IG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybiBmaWxlIGV4dGVuc2lvbiBhc3NvY2lhdGVkIHdpdGggYSBtaW1lIHR5cGVcbiAqL1xuTWltZS5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uID0gZnVuY3Rpb24odHlwZSkge1xuICB0eXBlID0gL15cXHMqKFteO1xcc10qKS8udGVzdCh0eXBlKSAmJiBSZWdFeHAuJDE7XG4gIHJldHVybiB0eXBlICYmIHRoaXMuX2V4dGVuc2lvbnNbdHlwZS50b0xvd2VyQ2FzZSgpXSB8fCBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNaW1lO1xuIiwgIm1vZHVsZS5leHBvcnRzID0ge1wiYXBwbGljYXRpb24vYW5kcmV3LWluc2V0XCI6W1wiZXpcIl0sXCJhcHBsaWNhdGlvbi9hcHBsaXh3YXJlXCI6W1wiYXdcIl0sXCJhcHBsaWNhdGlvbi9hdG9tK3htbFwiOltcImF0b21cIl0sXCJhcHBsaWNhdGlvbi9hdG9tY2F0K3htbFwiOltcImF0b21jYXRcIl0sXCJhcHBsaWNhdGlvbi9hdG9tZGVsZXRlZCt4bWxcIjpbXCJhdG9tZGVsZXRlZFwiXSxcImFwcGxpY2F0aW9uL2F0b21zdmMreG1sXCI6W1wiYXRvbXN2Y1wiXSxcImFwcGxpY2F0aW9uL2F0c2MtZHdkK3htbFwiOltcImR3ZFwiXSxcImFwcGxpY2F0aW9uL2F0c2MtaGVsZCt4bWxcIjpbXCJoZWxkXCJdLFwiYXBwbGljYXRpb24vYXRzYy1yc2F0K3htbFwiOltcInJzYXRcIl0sXCJhcHBsaWNhdGlvbi9iZG9jXCI6W1wiYmRvY1wiXSxcImFwcGxpY2F0aW9uL2NhbGVuZGFyK3htbFwiOltcInhjc1wiXSxcImFwcGxpY2F0aW9uL2NjeG1sK3htbFwiOltcImNjeG1sXCJdLFwiYXBwbGljYXRpb24vY2RmeCt4bWxcIjpbXCJjZGZ4XCJdLFwiYXBwbGljYXRpb24vY2RtaS1jYXBhYmlsaXR5XCI6W1wiY2RtaWFcIl0sXCJhcHBsaWNhdGlvbi9jZG1pLWNvbnRhaW5lclwiOltcImNkbWljXCJdLFwiYXBwbGljYXRpb24vY2RtaS1kb21haW5cIjpbXCJjZG1pZFwiXSxcImFwcGxpY2F0aW9uL2NkbWktb2JqZWN0XCI6W1wiY2RtaW9cIl0sXCJhcHBsaWNhdGlvbi9jZG1pLXF1ZXVlXCI6W1wiY2RtaXFcIl0sXCJhcHBsaWNhdGlvbi9jdS1zZWVtZVwiOltcImN1XCJdLFwiYXBwbGljYXRpb24vZGFzaCt4bWxcIjpbXCJtcGRcIl0sXCJhcHBsaWNhdGlvbi9kYXZtb3VudCt4bWxcIjpbXCJkYXZtb3VudFwiXSxcImFwcGxpY2F0aW9uL2RvY2Jvb2sreG1sXCI6W1wiZGJrXCJdLFwiYXBwbGljYXRpb24vZHNzYytkZXJcIjpbXCJkc3NjXCJdLFwiYXBwbGljYXRpb24vZHNzYyt4bWxcIjpbXCJ4ZHNzY1wiXSxcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHRcIjpbXCJlY21hXCIsXCJlc1wiXSxcImFwcGxpY2F0aW9uL2VtbWEreG1sXCI6W1wiZW1tYVwiXSxcImFwcGxpY2F0aW9uL2Vtb3Rpb25tbCt4bWxcIjpbXCJlbW90aW9ubWxcIl0sXCJhcHBsaWNhdGlvbi9lcHViK3ppcFwiOltcImVwdWJcIl0sXCJhcHBsaWNhdGlvbi9leGlcIjpbXCJleGlcIl0sXCJhcHBsaWNhdGlvbi9mZHQreG1sXCI6W1wiZmR0XCJdLFwiYXBwbGljYXRpb24vZm9udC10ZHBmclwiOltcInBmclwiXSxcImFwcGxpY2F0aW9uL2dlbytqc29uXCI6W1wiZ2VvanNvblwiXSxcImFwcGxpY2F0aW9uL2dtbCt4bWxcIjpbXCJnbWxcIl0sXCJhcHBsaWNhdGlvbi9ncHgreG1sXCI6W1wiZ3B4XCJdLFwiYXBwbGljYXRpb24vZ3hmXCI6W1wiZ3hmXCJdLFwiYXBwbGljYXRpb24vZ3ppcFwiOltcImd6XCJdLFwiYXBwbGljYXRpb24vaGpzb25cIjpbXCJoanNvblwiXSxcImFwcGxpY2F0aW9uL2h5cGVyc3R1ZGlvXCI6W1wic3RrXCJdLFwiYXBwbGljYXRpb24vaW5rbWwreG1sXCI6W1wiaW5rXCIsXCJpbmttbFwiXSxcImFwcGxpY2F0aW9uL2lwZml4XCI6W1wiaXBmaXhcIl0sXCJhcHBsaWNhdGlvbi9pdHMreG1sXCI6W1wiaXRzXCJdLFwiYXBwbGljYXRpb24vamF2YS1hcmNoaXZlXCI6W1wiamFyXCIsXCJ3YXJcIixcImVhclwiXSxcImFwcGxpY2F0aW9uL2phdmEtc2VyaWFsaXplZC1vYmplY3RcIjpbXCJzZXJcIl0sXCJhcHBsaWNhdGlvbi9qYXZhLXZtXCI6W1wiY2xhc3NcIl0sXCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCI6W1wianNcIixcIm1qc1wiXSxcImFwcGxpY2F0aW9uL2pzb25cIjpbXCJqc29uXCIsXCJtYXBcIl0sXCJhcHBsaWNhdGlvbi9qc29uNVwiOltcImpzb241XCJdLFwiYXBwbGljYXRpb24vanNvbm1sK2pzb25cIjpbXCJqc29ubWxcIl0sXCJhcHBsaWNhdGlvbi9sZCtqc29uXCI6W1wianNvbmxkXCJdLFwiYXBwbGljYXRpb24vbGdyK3htbFwiOltcImxnclwiXSxcImFwcGxpY2F0aW9uL2xvc3QreG1sXCI6W1wibG9zdHhtbFwiXSxcImFwcGxpY2F0aW9uL21hYy1iaW5oZXg0MFwiOltcImhxeFwiXSxcImFwcGxpY2F0aW9uL21hYy1jb21wYWN0cHJvXCI6W1wiY3B0XCJdLFwiYXBwbGljYXRpb24vbWFkcyt4bWxcIjpbXCJtYWRzXCJdLFwiYXBwbGljYXRpb24vbWFuaWZlc3QranNvblwiOltcIndlYm1hbmlmZXN0XCJdLFwiYXBwbGljYXRpb24vbWFyY1wiOltcIm1yY1wiXSxcImFwcGxpY2F0aW9uL21hcmN4bWwreG1sXCI6W1wibXJjeFwiXSxcImFwcGxpY2F0aW9uL21hdGhlbWF0aWNhXCI6W1wibWFcIixcIm5iXCIsXCJtYlwiXSxcImFwcGxpY2F0aW9uL21hdGhtbCt4bWxcIjpbXCJtYXRobWxcIl0sXCJhcHBsaWNhdGlvbi9tYm94XCI6W1wibWJveFwiXSxcImFwcGxpY2F0aW9uL21lZGlhc2VydmVyY29udHJvbCt4bWxcIjpbXCJtc2NtbFwiXSxcImFwcGxpY2F0aW9uL21ldGFsaW5rK3htbFwiOltcIm1ldGFsaW5rXCJdLFwiYXBwbGljYXRpb24vbWV0YWxpbms0K3htbFwiOltcIm1ldGE0XCJdLFwiYXBwbGljYXRpb24vbWV0cyt4bWxcIjpbXCJtZXRzXCJdLFwiYXBwbGljYXRpb24vbW10LWFlaSt4bWxcIjpbXCJtYWVpXCJdLFwiYXBwbGljYXRpb24vbW10LXVzZCt4bWxcIjpbXCJtdXNkXCJdLFwiYXBwbGljYXRpb24vbW9kcyt4bWxcIjpbXCJtb2RzXCJdLFwiYXBwbGljYXRpb24vbXAyMVwiOltcIm0yMVwiLFwibXAyMVwiXSxcImFwcGxpY2F0aW9uL21wNFwiOltcIm1wNHNcIixcIm00cFwiXSxcImFwcGxpY2F0aW9uL21yYi1jb25zdW1lcit4bWxcIjpbXCIqeGRmXCJdLFwiYXBwbGljYXRpb24vbXJiLXB1Ymxpc2greG1sXCI6W1wiKnhkZlwiXSxcImFwcGxpY2F0aW9uL21zd29yZFwiOltcImRvY1wiLFwiZG90XCJdLFwiYXBwbGljYXRpb24vbXhmXCI6W1wibXhmXCJdLFwiYXBwbGljYXRpb24vbi1xdWFkc1wiOltcIm5xXCJdLFwiYXBwbGljYXRpb24vbi10cmlwbGVzXCI6W1wibnRcIl0sXCJhcHBsaWNhdGlvbi9ub2RlXCI6W1wiY2pzXCJdLFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI6W1wiYmluXCIsXCJkbXNcIixcImxyZlwiLFwibWFyXCIsXCJzb1wiLFwiZGlzdFwiLFwiZGlzdHpcIixcInBrZ1wiLFwiYnBrXCIsXCJkdW1wXCIsXCJlbGNcIixcImRlcGxveVwiLFwiZXhlXCIsXCJkbGxcIixcImRlYlwiLFwiZG1nXCIsXCJpc29cIixcImltZ1wiLFwibXNpXCIsXCJtc3BcIixcIm1zbVwiLFwiYnVmZmVyXCJdLFwiYXBwbGljYXRpb24vb2RhXCI6W1wib2RhXCJdLFwiYXBwbGljYXRpb24vb2VicHMtcGFja2FnZSt4bWxcIjpbXCJvcGZcIl0sXCJhcHBsaWNhdGlvbi9vZ2dcIjpbXCJvZ3hcIl0sXCJhcHBsaWNhdGlvbi9vbWRvYyt4bWxcIjpbXCJvbWRvY1wiXSxcImFwcGxpY2F0aW9uL29uZW5vdGVcIjpbXCJvbmV0b2NcIixcIm9uZXRvYzJcIixcIm9uZXRtcFwiLFwib25lcGtnXCJdLFwiYXBwbGljYXRpb24vb3hwc1wiOltcIm94cHNcIl0sXCJhcHBsaWNhdGlvbi9wMnAtb3ZlcmxheSt4bWxcIjpbXCJyZWxvXCJdLFwiYXBwbGljYXRpb24vcGF0Y2gtb3BzLWVycm9yK3htbFwiOltcIip4ZXJcIl0sXCJhcHBsaWNhdGlvbi9wZGZcIjpbXCJwZGZcIl0sXCJhcHBsaWNhdGlvbi9wZ3AtZW5jcnlwdGVkXCI6W1wicGdwXCJdLFwiYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZVwiOltcImFzY1wiLFwic2lnXCJdLFwiYXBwbGljYXRpb24vcGljcy1ydWxlc1wiOltcInByZlwiXSxcImFwcGxpY2F0aW9uL3BrY3MxMFwiOltcInAxMFwiXSxcImFwcGxpY2F0aW9uL3BrY3M3LW1pbWVcIjpbXCJwN21cIixcInA3Y1wiXSxcImFwcGxpY2F0aW9uL3BrY3M3LXNpZ25hdHVyZVwiOltcInA3c1wiXSxcImFwcGxpY2F0aW9uL3BrY3M4XCI6W1wicDhcIl0sXCJhcHBsaWNhdGlvbi9wa2l4LWF0dHItY2VydFwiOltcImFjXCJdLFwiYXBwbGljYXRpb24vcGtpeC1jZXJ0XCI6W1wiY2VyXCJdLFwiYXBwbGljYXRpb24vcGtpeC1jcmxcIjpbXCJjcmxcIl0sXCJhcHBsaWNhdGlvbi9wa2l4LXBraXBhdGhcIjpbXCJwa2lwYXRoXCJdLFwiYXBwbGljYXRpb24vcGtpeGNtcFwiOltcInBraVwiXSxcImFwcGxpY2F0aW9uL3Bscyt4bWxcIjpbXCJwbHNcIl0sXCJhcHBsaWNhdGlvbi9wb3N0c2NyaXB0XCI6W1wiYWlcIixcImVwc1wiLFwicHNcIl0sXCJhcHBsaWNhdGlvbi9wcm92ZW5hbmNlK3htbFwiOltcInByb3Z4XCJdLFwiYXBwbGljYXRpb24vcHNrYyt4bWxcIjpbXCJwc2tjeG1sXCJdLFwiYXBwbGljYXRpb24vcmFtbCt5YW1sXCI6W1wicmFtbFwiXSxcImFwcGxpY2F0aW9uL3JkZit4bWxcIjpbXCJyZGZcIixcIm93bFwiXSxcImFwcGxpY2F0aW9uL3JlZ2luZm8reG1sXCI6W1wicmlmXCJdLFwiYXBwbGljYXRpb24vcmVsYXgtbmctY29tcGFjdC1zeW50YXhcIjpbXCJybmNcIl0sXCJhcHBsaWNhdGlvbi9yZXNvdXJjZS1saXN0cyt4bWxcIjpbXCJybFwiXSxcImFwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzLWRpZmYreG1sXCI6W1wicmxkXCJdLFwiYXBwbGljYXRpb24vcmxzLXNlcnZpY2VzK3htbFwiOltcInJzXCJdLFwiYXBwbGljYXRpb24vcm91dGUtYXBkK3htbFwiOltcInJhcGRcIl0sXCJhcHBsaWNhdGlvbi9yb3V0ZS1zLXRzaWQreG1sXCI6W1wic2xzXCJdLFwiYXBwbGljYXRpb24vcm91dGUtdXNkK3htbFwiOltcInJ1c2RcIl0sXCJhcHBsaWNhdGlvbi9ycGtpLWdob3N0YnVzdGVyc1wiOltcImdiclwiXSxcImFwcGxpY2F0aW9uL3Jwa2ktbWFuaWZlc3RcIjpbXCJtZnRcIl0sXCJhcHBsaWNhdGlvbi9ycGtpLXJvYVwiOltcInJvYVwiXSxcImFwcGxpY2F0aW9uL3JzZCt4bWxcIjpbXCJyc2RcIl0sXCJhcHBsaWNhdGlvbi9yc3MreG1sXCI6W1wicnNzXCJdLFwiYXBwbGljYXRpb24vcnRmXCI6W1wicnRmXCJdLFwiYXBwbGljYXRpb24vc2JtbCt4bWxcIjpbXCJzYm1sXCJdLFwiYXBwbGljYXRpb24vc2N2cC1jdi1yZXF1ZXN0XCI6W1wic2NxXCJdLFwiYXBwbGljYXRpb24vc2N2cC1jdi1yZXNwb25zZVwiOltcInNjc1wiXSxcImFwcGxpY2F0aW9uL3NjdnAtdnAtcmVxdWVzdFwiOltcInNwcVwiXSxcImFwcGxpY2F0aW9uL3NjdnAtdnAtcmVzcG9uc2VcIjpbXCJzcHBcIl0sXCJhcHBsaWNhdGlvbi9zZHBcIjpbXCJzZHBcIl0sXCJhcHBsaWNhdGlvbi9zZW5tbCt4bWxcIjpbXCJzZW5tbHhcIl0sXCJhcHBsaWNhdGlvbi9zZW5zbWwreG1sXCI6W1wic2Vuc21seFwiXSxcImFwcGxpY2F0aW9uL3NldC1wYXltZW50LWluaXRpYXRpb25cIjpbXCJzZXRwYXlcIl0sXCJhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb25cIjpbXCJzZXRyZWdcIl0sXCJhcHBsaWNhdGlvbi9zaGYreG1sXCI6W1wic2hmXCJdLFwiYXBwbGljYXRpb24vc2lldmVcIjpbXCJzaXZcIixcInNpZXZlXCJdLFwiYXBwbGljYXRpb24vc21pbCt4bWxcIjpbXCJzbWlcIixcInNtaWxcIl0sXCJhcHBsaWNhdGlvbi9zcGFycWwtcXVlcnlcIjpbXCJycVwiXSxcImFwcGxpY2F0aW9uL3NwYXJxbC1yZXN1bHRzK3htbFwiOltcInNyeFwiXSxcImFwcGxpY2F0aW9uL3NyZ3NcIjpbXCJncmFtXCJdLFwiYXBwbGljYXRpb24vc3Jncyt4bWxcIjpbXCJncnhtbFwiXSxcImFwcGxpY2F0aW9uL3NydSt4bWxcIjpbXCJzcnVcIl0sXCJhcHBsaWNhdGlvbi9zc2RsK3htbFwiOltcInNzZGxcIl0sXCJhcHBsaWNhdGlvbi9zc21sK3htbFwiOltcInNzbWxcIl0sXCJhcHBsaWNhdGlvbi9zd2lkK3htbFwiOltcInN3aWR0YWdcIl0sXCJhcHBsaWNhdGlvbi90ZWkreG1sXCI6W1widGVpXCIsXCJ0ZWljb3JwdXNcIl0sXCJhcHBsaWNhdGlvbi90aHJhdWQreG1sXCI6W1widGZpXCJdLFwiYXBwbGljYXRpb24vdGltZXN0YW1wZWQtZGF0YVwiOltcInRzZFwiXSxcImFwcGxpY2F0aW9uL3RvbWxcIjpbXCJ0b21sXCJdLFwiYXBwbGljYXRpb24vdHRtbCt4bWxcIjpbXCJ0dG1sXCJdLFwiYXBwbGljYXRpb24vdWJqc29uXCI6W1widWJqXCJdLFwiYXBwbGljYXRpb24vdXJjLXJlc3NoZWV0K3htbFwiOltcInJzaGVldFwiXSxcImFwcGxpY2F0aW9uL3VyYy10YXJnZXRkZXNjK3htbFwiOltcInRkXCJdLFwiYXBwbGljYXRpb24vdm9pY2V4bWwreG1sXCI6W1widnhtbFwiXSxcImFwcGxpY2F0aW9uL3dhc21cIjpbXCJ3YXNtXCJdLFwiYXBwbGljYXRpb24vd2lkZ2V0XCI6W1wid2d0XCJdLFwiYXBwbGljYXRpb24vd2luaGxwXCI6W1wiaGxwXCJdLFwiYXBwbGljYXRpb24vd3NkbCt4bWxcIjpbXCJ3c2RsXCJdLFwiYXBwbGljYXRpb24vd3Nwb2xpY3kreG1sXCI6W1wid3Nwb2xpY3lcIl0sXCJhcHBsaWNhdGlvbi94YW1sK3htbFwiOltcInhhbWxcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLWF0dCt4bWxcIjpbXCJ4YXZcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLWNhcHMreG1sXCI6W1wieGNhXCJdLFwiYXBwbGljYXRpb24veGNhcC1kaWZmK3htbFwiOltcInhkZlwiXSxcImFwcGxpY2F0aW9uL3hjYXAtZWwreG1sXCI6W1wieGVsXCJdLFwiYXBwbGljYXRpb24veGNhcC1lcnJvcit4bWxcIjpbXCJ4ZXJcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLW5zK3htbFwiOltcInhuc1wiXSxcImFwcGxpY2F0aW9uL3hlbmMreG1sXCI6W1wieGVuY1wiXSxcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiOltcInhodG1sXCIsXCJ4aHRcIl0sXCJhcHBsaWNhdGlvbi94bGlmZit4bWxcIjpbXCJ4bGZcIl0sXCJhcHBsaWNhdGlvbi94bWxcIjpbXCJ4bWxcIixcInhzbFwiLFwieHNkXCIsXCJybmdcIl0sXCJhcHBsaWNhdGlvbi94bWwtZHRkXCI6W1wiZHRkXCJdLFwiYXBwbGljYXRpb24veG9wK3htbFwiOltcInhvcFwiXSxcImFwcGxpY2F0aW9uL3hwcm9jK3htbFwiOltcInhwbFwiXSxcImFwcGxpY2F0aW9uL3hzbHQreG1sXCI6W1wiKnhzbFwiLFwieHNsdFwiXSxcImFwcGxpY2F0aW9uL3hzcGYreG1sXCI6W1wieHNwZlwiXSxcImFwcGxpY2F0aW9uL3h2K3htbFwiOltcIm14bWxcIixcInhodm1sXCIsXCJ4dm1sXCIsXCJ4dm1cIl0sXCJhcHBsaWNhdGlvbi95YW5nXCI6W1wieWFuZ1wiXSxcImFwcGxpY2F0aW9uL3lpbit4bWxcIjpbXCJ5aW5cIl0sXCJhcHBsaWNhdGlvbi96aXBcIjpbXCJ6aXBcIl0sXCJhdWRpby8zZ3BwXCI6W1wiKjNncHBcIl0sXCJhdWRpby9hZHBjbVwiOltcImFkcFwiXSxcImF1ZGlvL2FtclwiOltcImFtclwiXSxcImF1ZGlvL2Jhc2ljXCI6W1wiYXVcIixcInNuZFwiXSxcImF1ZGlvL21pZGlcIjpbXCJtaWRcIixcIm1pZGlcIixcImthclwiLFwicm1pXCJdLFwiYXVkaW8vbW9iaWxlLXhtZlwiOltcIm14bWZcIl0sXCJhdWRpby9tcDNcIjpbXCIqbXAzXCJdLFwiYXVkaW8vbXA0XCI6W1wibTRhXCIsXCJtcDRhXCJdLFwiYXVkaW8vbXBlZ1wiOltcIm1wZ2FcIixcIm1wMlwiLFwibXAyYVwiLFwibXAzXCIsXCJtMmFcIixcIm0zYVwiXSxcImF1ZGlvL29nZ1wiOltcIm9nYVwiLFwib2dnXCIsXCJzcHhcIixcIm9wdXNcIl0sXCJhdWRpby9zM21cIjpbXCJzM21cIl0sXCJhdWRpby9zaWxrXCI6W1wic2lsXCJdLFwiYXVkaW8vd2F2XCI6W1wid2F2XCJdLFwiYXVkaW8vd2F2ZVwiOltcIip3YXZcIl0sXCJhdWRpby93ZWJtXCI6W1wid2ViYVwiXSxcImF1ZGlvL3htXCI6W1wieG1cIl0sXCJmb250L2NvbGxlY3Rpb25cIjpbXCJ0dGNcIl0sXCJmb250L290ZlwiOltcIm90ZlwiXSxcImZvbnQvdHRmXCI6W1widHRmXCJdLFwiZm9udC93b2ZmXCI6W1wid29mZlwiXSxcImZvbnQvd29mZjJcIjpbXCJ3b2ZmMlwiXSxcImltYWdlL2FjZXNcIjpbXCJleHJcIl0sXCJpbWFnZS9hcG5nXCI6W1wiYXBuZ1wiXSxcImltYWdlL2F2aWZcIjpbXCJhdmlmXCJdLFwiaW1hZ2UvYm1wXCI6W1wiYm1wXCJdLFwiaW1hZ2UvY2dtXCI6W1wiY2dtXCJdLFwiaW1hZ2UvZGljb20tcmxlXCI6W1wiZHJsZVwiXSxcImltYWdlL2VtZlwiOltcImVtZlwiXSxcImltYWdlL2ZpdHNcIjpbXCJmaXRzXCJdLFwiaW1hZ2UvZzNmYXhcIjpbXCJnM1wiXSxcImltYWdlL2dpZlwiOltcImdpZlwiXSxcImltYWdlL2hlaWNcIjpbXCJoZWljXCJdLFwiaW1hZ2UvaGVpYy1zZXF1ZW5jZVwiOltcImhlaWNzXCJdLFwiaW1hZ2UvaGVpZlwiOltcImhlaWZcIl0sXCJpbWFnZS9oZWlmLXNlcXVlbmNlXCI6W1wiaGVpZnNcIl0sXCJpbWFnZS9oZWoya1wiOltcImhlajJcIl0sXCJpbWFnZS9oc2oyXCI6W1wiaHNqMlwiXSxcImltYWdlL2llZlwiOltcImllZlwiXSxcImltYWdlL2psc1wiOltcImpsc1wiXSxcImltYWdlL2pwMlwiOltcImpwMlwiLFwianBnMlwiXSxcImltYWdlL2pwZWdcIjpbXCJqcGVnXCIsXCJqcGdcIixcImpwZVwiXSxcImltYWdlL2pwaFwiOltcImpwaFwiXSxcImltYWdlL2pwaGNcIjpbXCJqaGNcIl0sXCJpbWFnZS9qcG1cIjpbXCJqcG1cIl0sXCJpbWFnZS9qcHhcIjpbXCJqcHhcIixcImpwZlwiXSxcImltYWdlL2p4clwiOltcImp4clwiXSxcImltYWdlL2p4cmFcIjpbXCJqeHJhXCJdLFwiaW1hZ2Uvanhyc1wiOltcImp4cnNcIl0sXCJpbWFnZS9qeHNcIjpbXCJqeHNcIl0sXCJpbWFnZS9qeHNjXCI6W1wianhzY1wiXSxcImltYWdlL2p4c2lcIjpbXCJqeHNpXCJdLFwiaW1hZ2Uvanhzc1wiOltcImp4c3NcIl0sXCJpbWFnZS9rdHhcIjpbXCJrdHhcIl0sXCJpbWFnZS9rdHgyXCI6W1wia3R4MlwiXSxcImltYWdlL3BuZ1wiOltcInBuZ1wiXSxcImltYWdlL3NnaVwiOltcInNnaVwiXSxcImltYWdlL3N2Zyt4bWxcIjpbXCJzdmdcIixcInN2Z3pcIl0sXCJpbWFnZS90MzhcIjpbXCJ0MzhcIl0sXCJpbWFnZS90aWZmXCI6W1widGlmXCIsXCJ0aWZmXCJdLFwiaW1hZ2UvdGlmZi1meFwiOltcInRmeFwiXSxcImltYWdlL3dlYnBcIjpbXCJ3ZWJwXCJdLFwiaW1hZ2Uvd21mXCI6W1wid21mXCJdLFwibWVzc2FnZS9kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjpbXCJkaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIl0sXCJtZXNzYWdlL2dsb2JhbFwiOltcInU4bXNnXCJdLFwibWVzc2FnZS9nbG9iYWwtZGVsaXZlcnktc3RhdHVzXCI6W1widThkc25cIl0sXCJtZXNzYWdlL2dsb2JhbC1kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjpbXCJ1OG1kblwiXSxcIm1lc3NhZ2UvZ2xvYmFsLWhlYWRlcnNcIjpbXCJ1OGhkclwiXSxcIm1lc3NhZ2UvcmZjODIyXCI6W1wiZW1sXCIsXCJtaW1lXCJdLFwibW9kZWwvM21mXCI6W1wiM21mXCJdLFwibW9kZWwvZ2x0Zitqc29uXCI6W1wiZ2x0ZlwiXSxcIm1vZGVsL2dsdGYtYmluYXJ5XCI6W1wiZ2xiXCJdLFwibW9kZWwvaWdlc1wiOltcImlnc1wiLFwiaWdlc1wiXSxcIm1vZGVsL21lc2hcIjpbXCJtc2hcIixcIm1lc2hcIixcInNpbG9cIl0sXCJtb2RlbC9tdGxcIjpbXCJtdGxcIl0sXCJtb2RlbC9vYmpcIjpbXCJvYmpcIl0sXCJtb2RlbC9zdGxcIjpbXCJzdGxcIl0sXCJtb2RlbC92cm1sXCI6W1wid3JsXCIsXCJ2cm1sXCJdLFwibW9kZWwveDNkK2JpbmFyeVwiOltcIip4M2RiXCIsXCJ4M2RielwiXSxcIm1vZGVsL3gzZCtmYXN0aW5mb3NldFwiOltcIngzZGJcIl0sXCJtb2RlbC94M2QrdnJtbFwiOltcIip4M2R2XCIsXCJ4M2R2elwiXSxcIm1vZGVsL3gzZCt4bWxcIjpbXCJ4M2RcIixcIngzZHpcIl0sXCJtb2RlbC94M2QtdnJtbFwiOltcIngzZHZcIl0sXCJ0ZXh0L2NhY2hlLW1hbmlmZXN0XCI6W1wiYXBwY2FjaGVcIixcIm1hbmlmZXN0XCJdLFwidGV4dC9jYWxlbmRhclwiOltcImljc1wiLFwiaWZiXCJdLFwidGV4dC9jb2ZmZWVzY3JpcHRcIjpbXCJjb2ZmZWVcIixcImxpdGNvZmZlZVwiXSxcInRleHQvY3NzXCI6W1wiY3NzXCJdLFwidGV4dC9jc3ZcIjpbXCJjc3ZcIl0sXCJ0ZXh0L2h0bWxcIjpbXCJodG1sXCIsXCJodG1cIixcInNodG1sXCJdLFwidGV4dC9qYWRlXCI6W1wiamFkZVwiXSxcInRleHQvanN4XCI6W1wianN4XCJdLFwidGV4dC9sZXNzXCI6W1wibGVzc1wiXSxcInRleHQvbWFya2Rvd25cIjpbXCJtYXJrZG93blwiLFwibWRcIl0sXCJ0ZXh0L21hdGhtbFwiOltcIm1tbFwiXSxcInRleHQvbWR4XCI6W1wibWR4XCJdLFwidGV4dC9uM1wiOltcIm4zXCJdLFwidGV4dC9wbGFpblwiOltcInR4dFwiLFwidGV4dFwiLFwiY29uZlwiLFwiZGVmXCIsXCJsaXN0XCIsXCJsb2dcIixcImluXCIsXCJpbmlcIl0sXCJ0ZXh0L3JpY2h0ZXh0XCI6W1wicnR4XCJdLFwidGV4dC9ydGZcIjpbXCIqcnRmXCJdLFwidGV4dC9zZ21sXCI6W1wic2dtbFwiLFwic2dtXCJdLFwidGV4dC9zaGV4XCI6W1wic2hleFwiXSxcInRleHQvc2xpbVwiOltcInNsaW1cIixcInNsbVwiXSxcInRleHQvc3BkeFwiOltcInNwZHhcIl0sXCJ0ZXh0L3N0eWx1c1wiOltcInN0eWx1c1wiLFwic3R5bFwiXSxcInRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXNcIjpbXCJ0c3ZcIl0sXCJ0ZXh0L3Ryb2ZmXCI6W1widFwiLFwidHJcIixcInJvZmZcIixcIm1hblwiLFwibWVcIixcIm1zXCJdLFwidGV4dC90dXJ0bGVcIjpbXCJ0dGxcIl0sXCJ0ZXh0L3VyaS1saXN0XCI6W1widXJpXCIsXCJ1cmlzXCIsXCJ1cmxzXCJdLFwidGV4dC92Y2FyZFwiOltcInZjYXJkXCJdLFwidGV4dC92dHRcIjpbXCJ2dHRcIl0sXCJ0ZXh0L3htbFwiOltcIip4bWxcIl0sXCJ0ZXh0L3lhbWxcIjpbXCJ5YW1sXCIsXCJ5bWxcIl0sXCJ2aWRlby8zZ3BwXCI6W1wiM2dwXCIsXCIzZ3BwXCJdLFwidmlkZW8vM2dwcDJcIjpbXCIzZzJcIl0sXCJ2aWRlby9oMjYxXCI6W1wiaDI2MVwiXSxcInZpZGVvL2gyNjNcIjpbXCJoMjYzXCJdLFwidmlkZW8vaDI2NFwiOltcImgyNjRcIl0sXCJ2aWRlby9pc28uc2VnbWVudFwiOltcIm00c1wiXSxcInZpZGVvL2pwZWdcIjpbXCJqcGd2XCJdLFwidmlkZW8vanBtXCI6W1wiKmpwbVwiLFwianBnbVwiXSxcInZpZGVvL21qMlwiOltcIm1qMlwiLFwibWpwMlwiXSxcInZpZGVvL21wMnRcIjpbXCJ0c1wiXSxcInZpZGVvL21wNFwiOltcIm1wNFwiLFwibXA0dlwiLFwibXBnNFwiXSxcInZpZGVvL21wZWdcIjpbXCJtcGVnXCIsXCJtcGdcIixcIm1wZVwiLFwibTF2XCIsXCJtMnZcIl0sXCJ2aWRlby9vZ2dcIjpbXCJvZ3ZcIl0sXCJ2aWRlby9xdWlja3RpbWVcIjpbXCJxdFwiLFwibW92XCJdLFwidmlkZW8vd2VibVwiOltcIndlYm1cIl19OyIsICIndXNlIHN0cmljdCc7XG5cbmxldCBNaW1lID0gcmVxdWlyZSgnLi9NaW1lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNaW1lKHJlcXVpcmUoJy4vdHlwZXMvc3RhbmRhcmQnKSk7XG4iLCAiLy8gJ3BhdGgnIG1vZHVsZSBleHRyYWN0ZWQgZnJvbSBOb2RlLmpzIHY4LjExLjEgKG9ubHkgdGhlIHBvc2l4IHBhcnQpXG4vLyB0cmFuc3BsaXRlZCB3aXRoIEJhYmVsXG5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzc2VydFBhdGgocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGF0aCBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkocGF0aCkpO1xuICB9XG59XG5cbi8vIFJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCB3aXRoIGRpcmVjdG9yeSBuYW1lc1xuZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5nUG9zaXgocGF0aCwgYWxsb3dBYm92ZVJvb3QpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbGFzdFNlZ21lbnRMZW5ndGggPSAwO1xuICB2YXIgbGFzdFNsYXNoID0gLTE7XG4gIHZhciBkb3RzID0gMDtcbiAgdmFyIGNvZGU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IHBhdGgubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoaSA8IHBhdGgubGVuZ3RoKVxuICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICBlbHNlIGlmIChjb2RlID09PSA0NyAvKi8qLylcbiAgICAgIGJyZWFrO1xuICAgIGVsc2VcbiAgICAgIGNvZGUgPSA0NyAvKi8qLztcbiAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgIGlmIChsYXN0U2xhc2ggPT09IGkgLSAxIHx8IGRvdHMgPT09IDEpIHtcbiAgICAgICAgLy8gTk9PUFxuICAgICAgfSBlbHNlIGlmIChsYXN0U2xhc2ggIT09IGkgLSAxICYmIGRvdHMgPT09IDIpIHtcbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPCAyIHx8IGxhc3RTZWdtZW50TGVuZ3RoICE9PSAyIHx8IHJlcy5jaGFyQ29kZUF0KHJlcy5sZW5ndGggLSAxKSAhPT0gNDYgLyouKi8gfHwgcmVzLmNoYXJDb2RlQXQocmVzLmxlbmd0aCAtIDIpICE9PSA0NiAvKi4qLykge1xuICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgdmFyIGxhc3RTbGFzaEluZGV4ID0gcmVzLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggIT09IHJlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzID0gcmVzLnNsaWNlKDAsIGxhc3RTbGFzaEluZGV4KTtcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IHJlcy5sZW5ndGggLSAxIC0gcmVzLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcbiAgICAgICAgICAgICAgZG90cyA9IDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocmVzLmxlbmd0aCA9PT0gMiB8fCByZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICAgICAgICBkb3RzID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXMgKz0gJy8uLic7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmVzID0gJy4uJztcbiAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZXMubGVuZ3RoID4gMClcbiAgICAgICAgICByZXMgKz0gJy8nICsgcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlcyA9IHBhdGguc2xpY2UobGFzdFNsYXNoICsgMSwgaSk7XG4gICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gaSAtIGxhc3RTbGFzaCAtIDE7XG4gICAgICB9XG4gICAgICBsYXN0U2xhc2ggPSBpO1xuICAgICAgZG90cyA9IDA7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSA0NiAvKi4qLyAmJiBkb3RzICE9PSAtMSkge1xuICAgICAgKytkb3RzO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb3RzID0gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIF9mb3JtYXQoc2VwLCBwYXRoT2JqZWN0KSB7XG4gIHZhciBkaXIgPSBwYXRoT2JqZWN0LmRpciB8fCBwYXRoT2JqZWN0LnJvb3Q7XG4gIHZhciBiYXNlID0gcGF0aE9iamVjdC5iYXNlIHx8IChwYXRoT2JqZWN0Lm5hbWUgfHwgJycpICsgKHBhdGhPYmplY3QuZXh0IHx8ICcnKTtcbiAgaWYgKCFkaXIpIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICBpZiAoZGlyID09PSBwYXRoT2JqZWN0LnJvb3QpIHtcbiAgICByZXR1cm4gZGlyICsgYmFzZTtcbiAgfVxuICByZXR1cm4gZGlyICsgc2VwICsgYmFzZTtcbn1cblxudmFyIHBvc2l4ID0ge1xuICAvLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgdmFyIHJlc29sdmVkUGF0aCA9ICcnO1xuICAgIHZhciByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG4gICAgdmFyIGN3ZDtcblxuICAgIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgICB2YXIgcGF0aDtcbiAgICAgIGlmIChpID49IDApXG4gICAgICAgIHBhdGggPSBhcmd1bWVudHNbaV07XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGN3ZCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgIGN3ZCA9IHByb2Nlc3MuY3dkKCk7XG4gICAgICAgIHBhdGggPSBjd2Q7XG4gICAgICB9XG5cbiAgICAgIGFzc2VydFBhdGgocGF0aCk7XG5cbiAgICAgIC8vIFNraXAgZW1wdHkgZW50cmllc1xuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyovKi87XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAgIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gICAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplU3RyaW5nUG9zaXgocmVzb2x2ZWRQYXRoLCAhcmVzb2x2ZWRBYnNvbHV0ZSk7XG5cbiAgICBpZiAocmVzb2x2ZWRBYnNvbHV0ZSkge1xuICAgICAgaWYgKHJlc29sdmVkUGF0aC5sZW5ndGggPiAwKVxuICAgICAgICByZXR1cm4gJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gJy8nO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiByZXNvbHZlZFBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnLic7XG4gICAgfVxuICB9LFxuXG4gIG5vcm1hbGl6ZTogZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gJy4nO1xuXG4gICAgdmFyIGlzQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IDQ3IC8qLyovO1xuICAgIHZhciB0cmFpbGluZ1NlcGFyYXRvciA9IHBhdGguY2hhckNvZGVBdChwYXRoLmxlbmd0aCAtIDEpID09PSA0NyAvKi8qLztcblxuICAgIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICAgIHBhdGggPSBub3JtYWxpemVTdHJpbmdQb3NpeChwYXRoLCAhaXNBYnNvbHV0ZSk7XG5cbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDAgJiYgIWlzQWJzb2x1dGUpIHBhdGggPSAnLic7XG4gICAgaWYgKHBhdGgubGVuZ3RoID4gMCAmJiB0cmFpbGluZ1NlcGFyYXRvcikgcGF0aCArPSAnLyc7XG5cbiAgICBpZiAoaXNBYnNvbHV0ZSkgcmV0dXJuICcvJyArIHBhdGg7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0sXG5cbiAgaXNBYnNvbHV0ZTogZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICByZXR1cm4gcGF0aC5sZW5ndGggPiAwICYmIHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyovKi87XG4gIH0sXG5cbiAgam9pbjogZnVuY3Rpb24gam9pbigpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiAnLic7XG4gICAgdmFyIGpvaW5lZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGFzc2VydFBhdGgoYXJnKTtcbiAgICAgIGlmIChhcmcubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgam9pbmVkID0gYXJnO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgam9pbmVkICs9ICcvJyArIGFyZztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuICcuJztcbiAgICByZXR1cm4gcG9zaXgubm9ybWFsaXplKGpvaW5lZCk7XG4gIH0sXG5cbiAgcmVsYXRpdmU6IGZ1bmN0aW9uIHJlbGF0aXZlKGZyb20sIHRvKSB7XG4gICAgYXNzZXJ0UGF0aChmcm9tKTtcbiAgICBhc3NlcnRQYXRoKHRvKTtcblxuICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuICcnO1xuXG4gICAgZnJvbSA9IHBvc2l4LnJlc29sdmUoZnJvbSk7XG4gICAgdG8gPSBwb3NpeC5yZXNvbHZlKHRvKTtcblxuICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuICcnO1xuXG4gICAgLy8gVHJpbSBhbnkgbGVhZGluZyBiYWNrc2xhc2hlc1xuICAgIHZhciBmcm9tU3RhcnQgPSAxO1xuICAgIGZvciAoOyBmcm9tU3RhcnQgPCBmcm9tLmxlbmd0aDsgKytmcm9tU3RhcnQpIHtcbiAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0KSAhPT0gNDcgLyovKi8pXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZnJvbUVuZCA9IGZyb20ubGVuZ3RoO1xuICAgIHZhciBmcm9tTGVuID0gZnJvbUVuZCAtIGZyb21TdGFydDtcblxuICAgIC8vIFRyaW0gYW55IGxlYWRpbmcgYmFja3NsYXNoZXNcbiAgICB2YXIgdG9TdGFydCA9IDE7XG4gICAgZm9yICg7IHRvU3RhcnQgPCB0by5sZW5ndGg7ICsrdG9TdGFydCkge1xuICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCkgIT09IDQ3IC8qLyovKVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIHRvRW5kID0gdG8ubGVuZ3RoO1xuICAgIHZhciB0b0xlbiA9IHRvRW5kIC0gdG9TdGFydDtcblxuICAgIC8vIENvbXBhcmUgcGF0aHMgdG8gZmluZCB0aGUgbG9uZ2VzdCBjb21tb24gcGF0aCBmcm9tIHJvb3RcbiAgICB2YXIgbGVuZ3RoID0gZnJvbUxlbiA8IHRvTGVuID8gZnJvbUxlbiA6IHRvTGVuO1xuICAgIHZhciBsYXN0Q29tbW9uU2VwID0gLTE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDw9IGxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoaSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgIGlmICh0b0xlbiA+IGxlbmd0aCkge1xuICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGBmcm9tYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgdG9gLlxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy9mb28vYmFyJzsgdG89Jy9mb28vYmFyL2JheidcbiAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSArIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSByb290XG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nLyc7IHRvPScvZm9vJ1xuICAgICAgICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQgKyBpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZnJvbUxlbiA+IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgdG9gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGBmcm9tYC5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvZm9vL2Jhci9iYXonOyB0bz0nL2Zvby9iYXInXG4gICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIHJvb3QuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvbyc7IHRvPScvJ1xuICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFyIGZyb21Db2RlID0gZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpO1xuICAgICAgdmFyIHRvQ29kZSA9IHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpO1xuICAgICAgaWYgKGZyb21Db2RlICE9PSB0b0NvZGUpXG4gICAgICAgIGJyZWFrO1xuICAgICAgZWxzZSBpZiAoZnJvbUNvZGUgPT09IDQ3IC8qLyovKVxuICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgLy8gR2VuZXJhdGUgdGhlIHJlbGF0aXZlIHBhdGggYmFzZWQgb24gdGhlIHBhdGggZGlmZmVyZW5jZSBiZXR3ZWVuIGB0b2BcbiAgICAvLyBhbmQgYGZyb21gXG4gICAgZm9yIChpID0gZnJvbVN0YXJ0ICsgbGFzdENvbW1vblNlcCArIDE7IGkgPD0gZnJvbUVuZDsgKytpKSB7XG4gICAgICBpZiAoaSA9PT0gZnJvbUVuZCB8fCBmcm9tLmNoYXJDb2RlQXQoaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIGlmIChvdXQubGVuZ3RoID09PSAwKVxuICAgICAgICAgIG91dCArPSAnLi4nO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgb3V0ICs9ICcvLi4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIExhc3RseSwgYXBwZW5kIHRoZSByZXN0IG9mIHRoZSBkZXN0aW5hdGlvbiAoYHRvYCkgcGF0aCB0aGF0IGNvbWVzIGFmdGVyXG4gICAgLy8gdGhlIGNvbW1vbiBwYXRoIHBhcnRzXG4gICAgaWYgKG91dC5sZW5ndGggPiAwKVxuICAgICAgcmV0dXJuIG91dCArIHRvLnNsaWNlKHRvU3RhcnQgKyBsYXN0Q29tbW9uU2VwKTtcbiAgICBlbHNlIHtcbiAgICAgIHRvU3RhcnQgKz0gbGFzdENvbW1vblNlcDtcbiAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQpID09PSA0NyAvKi8qLylcbiAgICAgICAgKyt0b1N0YXJ0O1xuICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQpO1xuICAgIH1cbiAgfSxcblxuICBfbWFrZUxvbmc6IGZ1bmN0aW9uIF9tYWtlTG9uZyhwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0sXG5cbiAgZGlybmFtZTogZnVuY3Rpb24gZGlybmFtZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIGhhc1Jvb3QgPSBjb2RlID09PSA0NyAvKi8qLztcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyAtLWkpIHtcbiAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiBoYXNSb290ID8gJy8nIDogJy4nO1xuICAgIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkgcmV0dXJuICcvLyc7XG4gICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbiAgfSxcblxuICBiYXNlbmFtZTogZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBleHQgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImV4dFwiIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuXG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAoZXh0ICE9PSB1bmRlZmluZWQgJiYgZXh0Lmxlbmd0aCA+IDAgJiYgZXh0Lmxlbmd0aCA8PSBwYXRoLmxlbmd0aCkge1xuICAgICAgaWYgKGV4dC5sZW5ndGggPT09IHBhdGgubGVuZ3RoICYmIGV4dCA9PT0gcGF0aCkgcmV0dXJuICcnO1xuICAgICAgdmFyIGV4dElkeCA9IGV4dC5sZW5ndGggLSAxO1xuICAgICAgdmFyIGZpcnN0Tm9uU2xhc2hFbmQgPSAtMTtcbiAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZmlyc3ROb25TbGFzaEVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCByZW1lbWJlciB0aGlzIGluZGV4IGluIGNhc2VcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgaXQgaWYgdGhlIGV4dGVuc2lvbiBlbmRzIHVwIG5vdCBtYXRjaGluZ1xuICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChleHRJZHggPj0gMCkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIHRoZSBleHBsaWNpdCBleHRlbnNpb25cbiAgICAgICAgICAgIGlmIChjb2RlID09PSBleHQuY2hhckNvZGVBdChleHRJZHgpKSB7XG4gICAgICAgICAgICAgIGlmICgtLWV4dElkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBleHRlbnNpb24sIHNvIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91ciBwYXRoXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRXh0ZW5zaW9uIGRvZXMgbm90IG1hdGNoLCBzbyBvdXIgcmVzdWx0IGlzIHRoZSBlbnRpcmUgcGF0aFxuICAgICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgICAgZXh0SWR4ID0gLTE7XG4gICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydCA9PT0gZW5kKSBlbmQgPSBmaXJzdE5vblNsYXNoRW5kO2Vsc2UgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IHBhdGgubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmQgPT09IC0xKSByZXR1cm4gJyc7XG4gICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICB9XG4gIH0sXG5cbiAgZXh0bmFtZTogZnVuY3Rpb24gZXh0bmFtZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICB2YXIgc3RhcnREb3QgPSAtMTtcbiAgICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAgIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gICAgdmFyIHByZURvdFN0YXRlID0gMDtcbiAgICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAvLyBleHRlbnNpb25cbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IDQ2IC8qLiovKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSlcbiAgICAgICAgICAgIHN0YXJ0RG90ID0gaTtcbiAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSlcbiAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XG4gICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICAgICAgcHJlRG90U3RhdGUgPT09IDEgJiYgc3RhcnREb3QgPT09IGVuZCAtIDEgJiYgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG4gIH0sXG5cbiAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQocGF0aE9iamVjdCkge1xuICAgIGlmIChwYXRoT2JqZWN0ID09PSBudWxsIHx8IHR5cGVvZiBwYXRoT2JqZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwicGF0aE9iamVjdFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBwYXRoT2JqZWN0KTtcbiAgICB9XG4gICAgcmV0dXJuIF9mb3JtYXQoJy8nLCBwYXRoT2JqZWN0KTtcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24gcGFyc2UocGF0aCkge1xuICAgIGFzc2VydFBhdGgocGF0aCk7XG5cbiAgICB2YXIgcmV0ID0geyByb290OiAnJywgZGlyOiAnJywgYmFzZTogJycsIGV4dDogJycsIG5hbWU6ICcnIH07XG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gcmV0O1xuICAgIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBpc0Fic29sdXRlID0gY29kZSA9PT0gNDcgLyovKi87XG4gICAgdmFyIHN0YXJ0O1xuICAgIGlmIChpc0Fic29sdXRlKSB7XG4gICAgICByZXQucm9vdCA9ICcvJztcbiAgICAgIHN0YXJ0ID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICB2YXIgc3RhcnREb3QgPSAtMTtcbiAgICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgdmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7XG5cbiAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgICB2YXIgcHJlRG90U3RhdGUgPSAwO1xuXG4gICAgLy8gR2V0IG5vbi1kaXIgaW5mb1xuICAgIGZvciAoOyBpID49IHN0YXJ0OyAtLWkpIHtcbiAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAvLyBleHRlbnNpb25cbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IDQ2IC8qLiovKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkgc3RhcnREb3QgPSBpO2Vsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSBwcmVEb3RTdGF0ZSA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8XG4gICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgICAgaWYgKGVuZCAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHN0YXJ0UGFydCA9PT0gMCAmJiBpc0Fic29sdXRlKSByZXQuYmFzZSA9IHJldC5uYW1lID0gcGF0aC5zbGljZSgxLCBlbmQpO2Vsc2UgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhcnRQYXJ0ID09PSAwICYmIGlzQWJzb2x1dGUpIHtcbiAgICAgICAgcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKDEsIHN0YXJ0RG90KTtcbiAgICAgICAgcmV0LmJhc2UgPSBwYXRoLnNsaWNlKDEsIGVuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBzdGFydERvdCk7XG4gICAgICAgIHJldC5iYXNlID0gcGF0aC5zbGljZShzdGFydFBhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgICByZXQuZXh0ID0gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRQYXJ0ID4gMCkgcmV0LmRpciA9IHBhdGguc2xpY2UoMCwgc3RhcnRQYXJ0IC0gMSk7ZWxzZSBpZiAoaXNBYnNvbHV0ZSkgcmV0LmRpciA9ICcvJztcblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgc2VwOiAnLycsXG4gIGRlbGltaXRlcjogJzonLFxuICB3aW4zMjogbnVsbCxcbiAgcG9zaXg6IG51bGxcbn07XG5cbnBvc2l4LnBvc2l4ID0gcG9zaXg7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9zaXg7XG4iLCAiKGV4cG9ydHM9PntcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19tYXJrQXNNb2R1bGUgPSAodGFyZ2V0KSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwge2dldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlfSk7XG59O1xudmFyIF9fYXN5bmMgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGZ1bGZpbGxlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVqZWN0ZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGVwID0gKHJlc3VsdCkgPT4ge1xuICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICB9O1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xuXG4vLyBsaWIvYnJvd3Nlci50c1xuX19tYXJrQXNNb2R1bGUoZXhwb3J0cyk7XG5fX2V4cG9ydChleHBvcnRzLCB7XG4gIGJ1aWxkOiAoKSA9PiBidWlsZCxcbiAgYnVpbGRTeW5jOiAoKSA9PiBidWlsZFN5bmMsXG4gIGluaXRpYWxpemU6ICgpID0+IGluaXRpYWxpemUsXG4gIHNlcnZlOiAoKSA9PiBzZXJ2ZSxcbiAgdHJhbnNmb3JtOiAoKSA9PiB0cmFuc2Zvcm0sXG4gIHRyYW5zZm9ybVN5bmM6ICgpID0+IHRyYW5zZm9ybVN5bmMsXG4gIHZlcnNpb246ICgpID0+IHZlcnNpb25cbn0pO1xuXG4vLyBsaWIvc3RkaW9fcHJvdG9jb2wudHNcbmZ1bmN0aW9uIGVuY29kZVBhY2tldChwYWNrZXQpIHtcbiAgbGV0IHZpc2l0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICBiYi53cml0ZTgoMCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBiYi53cml0ZTgoMSk7XG4gICAgICBiYi53cml0ZTgoK3ZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgYmIud3JpdGU4KDIpO1xuICAgICAgYmIud3JpdGUzMih2YWx1ZSB8IDApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBiYi53cml0ZTgoMyk7XG4gICAgICBiYi53cml0ZShlbmNvZGVVVEY4KHZhbHVlKSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgIGJiLndyaXRlOCg0KTtcbiAgICAgIGJiLndyaXRlKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGJiLndyaXRlOCg1KTtcbiAgICAgIGJiLndyaXRlMzIodmFsdWUubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgdmlzaXQoaXRlbSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgICAgYmIud3JpdGU4KDYpO1xuICAgICAgYmIud3JpdGUzMihrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgICAgICBiYi53cml0ZShlbmNvZGVVVEY4KGtleSkpO1xuICAgICAgICB2aXNpdCh2YWx1ZVtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGxldCBiYiA9IG5ldyBCeXRlQnVmZmVyKCk7XG4gIGJiLndyaXRlMzIoMCk7XG4gIGJiLndyaXRlMzIocGFja2V0LmlkIDw8IDEgfCArIXBhY2tldC5pc1JlcXVlc3QpO1xuICB2aXNpdChwYWNrZXQudmFsdWUpO1xuICB3cml0ZVVJbnQzMkxFKGJiLmJ1ZiwgYmIubGVuIC0gNCwgMCk7XG4gIHJldHVybiBiYi5idWYuc3ViYXJyYXkoMCwgYmIubGVuKTtcbn1cbmZ1bmN0aW9uIGRlY29kZVBhY2tldChieXRlcykge1xuICBsZXQgdmlzaXQgPSAoKSA9PiB7XG4gICAgc3dpdGNoIChiYi5yZWFkOCgpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gISFiYi5yZWFkOCgpO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gYmIucmVhZDMyKCk7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBkZWNvZGVVVEY4KGJiLnJlYWQoKSk7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiBiYi5yZWFkKCk7XG4gICAgICBjYXNlIDU6IHtcbiAgICAgICAgbGV0IGNvdW50ID0gYmIucmVhZDMyKCk7XG4gICAgICAgIGxldCB2YWx1ZTIgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgdmFsdWUyLnB1c2godmlzaXQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlMjtcbiAgICAgIH1cbiAgICAgIGNhc2UgNjoge1xuICAgICAgICBsZXQgY291bnQgPSBiYi5yZWFkMzIoKTtcbiAgICAgICAgbGV0IHZhbHVlMiA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICB2YWx1ZTJbZGVjb2RlVVRGOChiYi5yZWFkKCkpXSA9IHZpc2l0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlMjtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0XCIpO1xuICAgIH1cbiAgfTtcbiAgbGV0IGJiID0gbmV3IEJ5dGVCdWZmZXIoYnl0ZXMpO1xuICBsZXQgaWQgPSBiYi5yZWFkMzIoKTtcbiAgbGV0IGlzUmVxdWVzdCA9IChpZCAmIDEpID09PSAwO1xuICBpZCA+Pj49IDE7XG4gIGxldCB2YWx1ZSA9IHZpc2l0KCk7XG4gIGlmIChiYi5wdHIgIT09IGJ5dGVzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0XCIpO1xuICB9XG4gIHJldHVybiB7aWQsIGlzUmVxdWVzdCwgdmFsdWV9O1xufVxudmFyIEJ5dGVCdWZmZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGJ1ZiA9IG5ldyBVaW50OEFycmF5KDEwMjQpKSB7XG4gICAgdGhpcy5idWYgPSBidWY7XG4gICAgdGhpcy5sZW4gPSAwO1xuICAgIHRoaXMucHRyID0gMDtcbiAgfVxuICBfd3JpdGUoZGVsdGEpIHtcbiAgICBpZiAodGhpcy5sZW4gKyBkZWx0YSA+IHRoaXMuYnVmLmxlbmd0aCkge1xuICAgICAgbGV0IGNsb25lID0gbmV3IFVpbnQ4QXJyYXkoKHRoaXMubGVuICsgZGVsdGEpICogMik7XG4gICAgICBjbG9uZS5zZXQodGhpcy5idWYpO1xuICAgICAgdGhpcy5idWYgPSBjbG9uZTtcbiAgICB9XG4gICAgdGhpcy5sZW4gKz0gZGVsdGE7XG4gICAgcmV0dXJuIHRoaXMubGVuIC0gZGVsdGE7XG4gIH1cbiAgd3JpdGU4KHZhbHVlKSB7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMuX3dyaXRlKDEpO1xuICAgIHRoaXMuYnVmW29mZnNldF0gPSB2YWx1ZTtcbiAgfVxuICB3cml0ZTMyKHZhbHVlKSB7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMuX3dyaXRlKDQpO1xuICAgIHdyaXRlVUludDMyTEUodGhpcy5idWYsIHZhbHVlLCBvZmZzZXQpO1xuICB9XG4gIHdyaXRlKGJ5dGVzKSB7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMuX3dyaXRlKDQgKyBieXRlcy5sZW5ndGgpO1xuICAgIHdyaXRlVUludDMyTEUodGhpcy5idWYsIGJ5dGVzLmxlbmd0aCwgb2Zmc2V0KTtcbiAgICB0aGlzLmJ1Zi5zZXQoYnl0ZXMsIG9mZnNldCArIDQpO1xuICB9XG4gIF9yZWFkKGRlbHRhKSB7XG4gICAgaWYgKHRoaXMucHRyICsgZGVsdGEgPiB0aGlzLmJ1Zi5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0XCIpO1xuICAgIH1cbiAgICB0aGlzLnB0ciArPSBkZWx0YTtcbiAgICByZXR1cm4gdGhpcy5wdHIgLSBkZWx0YTtcbiAgfVxuICByZWFkOCgpIHtcbiAgICByZXR1cm4gdGhpcy5idWZbdGhpcy5fcmVhZCgxKV07XG4gIH1cbiAgcmVhZDMyKCkge1xuICAgIHJldHVybiByZWFkVUludDMyTEUodGhpcy5idWYsIHRoaXMuX3JlYWQoNCkpO1xuICB9XG4gIHJlYWQoKSB7XG4gICAgbGV0IGxlbmd0aCA9IHRoaXMucmVhZDMyKCk7XG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBsZXQgcHRyID0gdGhpcy5fcmVhZChieXRlcy5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldCh0aGlzLmJ1Zi5zdWJhcnJheShwdHIsIHB0ciArIGxlbmd0aCkpO1xuICAgIHJldHVybiBieXRlcztcbiAgfVxufTtcbnZhciBlbmNvZGVVVEY4O1xudmFyIGRlY29kZVVURjg7XG5pZiAodHlwZW9mIFRleHRFbmNvZGVyICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBsZXQgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICBsZXQgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICBlbmNvZGVVVEY4ID0gKHRleHQpID0+IGVuY29kZXIuZW5jb2RlKHRleHQpO1xuICBkZWNvZGVVVEY4ID0gKGJ5dGVzKSA9PiBkZWNvZGVyLmRlY29kZShieXRlcyk7XG59IGVsc2UgaWYgKHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZW5jb2RlVVRGOCA9ICh0ZXh0KSA9PiB7XG4gICAgbGV0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHRleHQpO1xuICAgIGlmICghKGJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9O1xuICBkZWNvZGVVVEY4ID0gKGJ5dGVzKSA9PiBCdWZmZXIuZnJvbShieXRlcykudG9TdHJpbmcoKTtcbn0gZWxzZSB7XG4gIHRocm93IG5ldyBFcnJvcihcIk5vIFVURi04IGNvZGVjIGZvdW5kXCIpO1xufVxuZnVuY3Rpb24gcmVhZFVJbnQzMkxFKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gIHJldHVybiBidWZmZXJbb2Zmc2V0KytdIHwgYnVmZmVyW29mZnNldCsrXSA8PCA4IHwgYnVmZmVyW29mZnNldCsrXSA8PCAxNiB8IGJ1ZmZlcltvZmZzZXQrK10gPDwgMjQ7XG59XG5mdW5jdGlvbiB3cml0ZVVJbnQzMkxFKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCkge1xuICBidWZmZXJbb2Zmc2V0KytdID0gdmFsdWU7XG4gIGJ1ZmZlcltvZmZzZXQrK10gPSB2YWx1ZSA+PiA4O1xuICBidWZmZXJbb2Zmc2V0KytdID0gdmFsdWUgPj4gMTY7XG4gIGJ1ZmZlcltvZmZzZXQrK10gPSB2YWx1ZSA+PiAyNDtcbn1cblxuLy8gbGliL2NvbW1vbi50c1xuZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXQodGFyZ2V0KSB7XG4gIHRhcmdldCArPSBcIlwiO1xuICBpZiAodGFyZ2V0LmluZGV4T2YoXCIsXCIpID49IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRhcmdldDogJHt0YXJnZXR9YCk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG52YXIgY2FuQmVBbnl0aGluZyA9ICgpID0+IG51bGw7XG52YXIgbXVzdEJlQm9vbGVhbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiA/IG51bGwgOiBcImEgYm9vbGVhblwiO1xudmFyIG11c3RCZUJvb2xlYW5Pck9iamVjdCA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpID8gbnVsbCA6IFwiYSBib29sZWFuIG9yIGFuIG9iamVjdFwiO1xudmFyIG11c3RCZVN0cmluZyA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gbnVsbCA6IFwiYSBzdHJpbmdcIjtcbnZhciBtdXN0QmVSZWdFeHAgPSAodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwID8gbnVsbCA6IFwiYSBSZWdFeHAgb2JqZWN0XCI7XG52YXIgbXVzdEJlSW50ZWdlciA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIHZhbHVlID09PSAodmFsdWUgfCAwKSA/IG51bGwgOiBcImFuIGludGVnZXJcIjtcbnZhciBtdXN0QmVGdW5jdGlvbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBudWxsIDogXCJhIGZ1bmN0aW9uXCI7XG52YXIgbXVzdEJlQXJyYXkgPSAodmFsdWUpID0+IEFycmF5LmlzQXJyYXkodmFsdWUpID8gbnVsbCA6IFwiYW4gYXJyYXlcIjtcbnZhciBtdXN0QmVPYmplY3QgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBudWxsIDogXCJhbiBvYmplY3RcIjtcbnZhciBtdXN0QmVPYmplY3RPck51bGwgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBudWxsIDogXCJhbiBvYmplY3Qgb3IgbnVsbFwiO1xudmFyIG11c3RCZVN0cmluZ09yQm9vbGVhbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgPyBudWxsIDogXCJhIHN0cmluZyBvciBhIGJvb2xlYW5cIjtcbnZhciBtdXN0QmVTdHJpbmdPck9iamVjdCA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBudWxsIDogXCJhIHN0cmluZyBvciBhbiBvYmplY3RcIjtcbnZhciBtdXN0QmVTdHJpbmdPckFycmF5ID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBudWxsIDogXCJhIHN0cmluZyBvciBhbiBhcnJheVwiO1xudmFyIG11c3RCZVN0cmluZ09yVWludDhBcnJheSA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSA/IG51bGwgOiBcImEgc3RyaW5nIG9yIGEgVWludDhBcnJheVwiO1xuZnVuY3Rpb24gZ2V0RmxhZyhvYmplY3QsIGtleXMsIGtleSwgbXVzdEJlRm4pIHtcbiAgbGV0IHZhbHVlID0gb2JqZWN0W2tleV07XG4gIGtleXNba2V5ICsgXCJcIl0gPSB0cnVlO1xuICBpZiAodmFsdWUgPT09IHZvaWQgMClcbiAgICByZXR1cm4gdm9pZCAwO1xuICBsZXQgbXVzdEJlID0gbXVzdEJlRm4odmFsdWUpO1xuICBpZiAobXVzdEJlICE9PSBudWxsKVxuICAgIHRocm93IG5ldyBFcnJvcihgXCIke2tleX1cIiBtdXN0IGJlICR7bXVzdEJlfWApO1xuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja0ZvckludmFsaWRGbGFncyhvYmplY3QsIGtleXMsIHdoZXJlKSB7XG4gIGZvciAobGV0IGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgaW4ga2V5cykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBvcHRpb24gJHt3aGVyZX06IFwiJHtrZXl9XCJgKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlSW5pdGlhbGl6ZU9wdGlvbnMob3B0aW9ucykge1xuICBsZXQga2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGxldCB3YXNtVVJMID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIndhc21VUkxcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IHdvcmtlciA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJ3b3JrZXJcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGNoZWNrRm9ySW52YWxpZEZsYWdzKG9wdGlvbnMsIGtleXMsIFwiaW4gc3RhcnRTZXJ2aWNlKCkgY2FsbFwiKTtcbiAgcmV0dXJuIHtcbiAgICB3YXNtVVJMLFxuICAgIHdvcmtlclxuICB9O1xufVxuZnVuY3Rpb24gcHVzaExvZ0ZsYWdzKGZsYWdzLCBvcHRpb25zLCBrZXlzLCBpc1RUWSwgbG9nTGV2ZWxEZWZhdWx0KSB7XG4gIGxldCBjb2xvciA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJjb2xvclwiLCBtdXN0QmVCb29sZWFuKTtcbiAgbGV0IGxvZ0xldmVsID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImxvZ0xldmVsXCIsIG11c3RCZVN0cmluZyk7XG4gIGxldCBsb2dMaW1pdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJsb2dMaW1pdFwiLCBtdXN0QmVJbnRlZ2VyKTtcbiAgaWYgKGNvbG9yKVxuICAgIGZsYWdzLnB1c2goYC0tY29sb3I9JHtjb2xvcn1gKTtcbiAgZWxzZSBpZiAoaXNUVFkpXG4gICAgZmxhZ3MucHVzaChgLS1jb2xvcj10cnVlYCk7XG4gIGZsYWdzLnB1c2goYC0tbG9nLWxldmVsPSR7bG9nTGV2ZWwgfHwgbG9nTGV2ZWxEZWZhdWx0fWApO1xuICBmbGFncy5wdXNoKGAtLWxvZy1saW1pdD0ke2xvZ0xpbWl0IHx8IDB9YCk7XG59XG5mdW5jdGlvbiBwdXNoQ29tbW9uRmxhZ3MoZmxhZ3MsIG9wdGlvbnMsIGtleXMpIHtcbiAgbGV0IHNvdXJjZXNDb250ZW50ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInNvdXJjZXNDb250ZW50XCIsIG11c3RCZUJvb2xlYW4pO1xuICBsZXQgdGFyZ2V0ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInRhcmdldFwiLCBtdXN0QmVTdHJpbmdPckFycmF5KTtcbiAgbGV0IGZvcm1hdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJmb3JtYXRcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IGdsb2JhbE5hbWUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwiZ2xvYmFsTmFtZVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgbWluaWZ5ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm1pbmlmeVwiLCBtdXN0QmVCb29sZWFuKTtcbiAgbGV0IG1pbmlmeVN5bnRheCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJtaW5pZnlTeW50YXhcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGxldCBtaW5pZnlXaGl0ZXNwYWNlID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm1pbmlmeVdoaXRlc3BhY2VcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGxldCBtaW5pZnlJZGVudGlmaWVycyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJtaW5pZnlJZGVudGlmaWVyc1wiLCBtdXN0QmVCb29sZWFuKTtcbiAgbGV0IGNoYXJzZXQgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwiY2hhcnNldFwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgdHJlZVNoYWtpbmcgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwidHJlZVNoYWtpbmdcIiwgbXVzdEJlU3RyaW5nT3JCb29sZWFuKTtcbiAgbGV0IGpzeEZhY3RvcnkgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwianN4RmFjdG9yeVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQganN4RnJhZ21lbnQgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwianN4RnJhZ21lbnRcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IGRlZmluZSA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJkZWZpbmVcIiwgbXVzdEJlT2JqZWN0KTtcbiAgbGV0IHB1cmUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwicHVyZVwiLCBtdXN0QmVBcnJheSk7XG4gIGxldCBrZWVwTmFtZXMgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwia2VlcE5hbWVzXCIsIG11c3RCZUJvb2xlYW4pO1xuICBpZiAoc291cmNlc0NvbnRlbnQgIT09IHZvaWQgMClcbiAgICBmbGFncy5wdXNoKGAtLXNvdXJjZXMtY29udGVudD0ke3NvdXJjZXNDb250ZW50fWApO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSlcbiAgICAgIGZsYWdzLnB1c2goYC0tdGFyZ2V0PSR7QXJyYXkuZnJvbSh0YXJnZXQpLm1hcCh2YWxpZGF0ZVRhcmdldCkuam9pbihcIixcIil9YCk7XG4gICAgZWxzZVxuICAgICAgZmxhZ3MucHVzaChgLS10YXJnZXQ9JHt2YWxpZGF0ZVRhcmdldCh0YXJnZXQpfWApO1xuICB9XG4gIGlmIChmb3JtYXQpXG4gICAgZmxhZ3MucHVzaChgLS1mb3JtYXQ9JHtmb3JtYXR9YCk7XG4gIGlmIChnbG9iYWxOYW1lKVxuICAgIGZsYWdzLnB1c2goYC0tZ2xvYmFsLW5hbWU9JHtnbG9iYWxOYW1lfWApO1xuICBpZiAobWluaWZ5KVxuICAgIGZsYWdzLnB1c2goXCItLW1pbmlmeVwiKTtcbiAgaWYgKG1pbmlmeVN5bnRheClcbiAgICBmbGFncy5wdXNoKFwiLS1taW5pZnktc3ludGF4XCIpO1xuICBpZiAobWluaWZ5V2hpdGVzcGFjZSlcbiAgICBmbGFncy5wdXNoKFwiLS1taW5pZnktd2hpdGVzcGFjZVwiKTtcbiAgaWYgKG1pbmlmeUlkZW50aWZpZXJzKVxuICAgIGZsYWdzLnB1c2goXCItLW1pbmlmeS1pZGVudGlmaWVyc1wiKTtcbiAgaWYgKGNoYXJzZXQpXG4gICAgZmxhZ3MucHVzaChgLS1jaGFyc2V0PSR7Y2hhcnNldH1gKTtcbiAgaWYgKHRyZWVTaGFraW5nICE9PSB2b2lkIDAgJiYgdHJlZVNoYWtpbmcgIT09IHRydWUpXG4gICAgZmxhZ3MucHVzaChgLS10cmVlLXNoYWtpbmc9JHt0cmVlU2hha2luZ31gKTtcbiAgaWYgKGpzeEZhY3RvcnkpXG4gICAgZmxhZ3MucHVzaChgLS1qc3gtZmFjdG9yeT0ke2pzeEZhY3Rvcnl9YCk7XG4gIGlmIChqc3hGcmFnbWVudClcbiAgICBmbGFncy5wdXNoKGAtLWpzeC1mcmFnbWVudD0ke2pzeEZyYWdtZW50fWApO1xuICBpZiAoZGVmaW5lKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGRlZmluZSkge1xuICAgICAgaWYgKGtleS5pbmRleE9mKFwiPVwiKSA+PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGVmaW5lOiAke2tleX1gKTtcbiAgICAgIGZsYWdzLnB1c2goYC0tZGVmaW5lOiR7a2V5fT0ke2RlZmluZVtrZXldfWApO1xuICAgIH1cbiAgfVxuICBpZiAocHVyZSlcbiAgICBmb3IgKGxldCBmbiBvZiBwdXJlKVxuICAgICAgZmxhZ3MucHVzaChgLS1wdXJlOiR7Zm59YCk7XG4gIGlmIChrZWVwTmFtZXMpXG4gICAgZmxhZ3MucHVzaChgLS1rZWVwLW5hbWVzYCk7XG59XG5mdW5jdGlvbiBmbGFnc0ZvckJ1aWxkT3B0aW9ucyhjYWxsTmFtZSwgb3B0aW9ucywgaXNUVFksIGxvZ0xldmVsRGVmYXVsdCwgd3JpdGVEZWZhdWx0KSB7XG4gIHZhciBfYTtcbiAgbGV0IGZsYWdzID0gW107XG4gIGxldCBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgbGV0IHN0ZGluQ29udGVudHMgPSBudWxsO1xuICBsZXQgc3RkaW5SZXNvbHZlRGlyID0gbnVsbDtcbiAgbGV0IHdhdGNoTW9kZSA9IG51bGw7XG4gIHB1c2hMb2dGbGFncyhmbGFncywgb3B0aW9ucywga2V5cywgaXNUVFksIGxvZ0xldmVsRGVmYXVsdCk7XG4gIHB1c2hDb21tb25GbGFncyhmbGFncywgb3B0aW9ucywga2V5cyk7XG4gIGxldCBzb3VyY2VtYXAgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwic291cmNlbWFwXCIsIG11c3RCZVN0cmluZ09yQm9vbGVhbik7XG4gIGxldCBidW5kbGUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwiYnVuZGxlXCIsIG11c3RCZUJvb2xlYW4pO1xuICBsZXQgd2F0Y2ggPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwid2F0Y2hcIiwgbXVzdEJlQm9vbGVhbk9yT2JqZWN0KTtcbiAgbGV0IHNwbGl0dGluZyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJzcGxpdHRpbmdcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGxldCBwcmVzZXJ2ZVN5bWxpbmtzID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInByZXNlcnZlU3ltbGlua3NcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGxldCBtZXRhZmlsZSA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJtZXRhZmlsZVwiLCBtdXN0QmVCb29sZWFuKTtcbiAgbGV0IG91dGZpbGUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwib3V0ZmlsZVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgb3V0ZGlyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm91dGRpclwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgb3V0YmFzZSA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJvdXRiYXNlXCIsIG11c3RCZVN0cmluZyk7XG4gIGxldCBwbGF0Zm9ybSA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJwbGF0Zm9ybVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgdHNjb25maWcgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwidHNjb25maWdcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IHJlc29sdmVFeHRlbnNpb25zID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInJlc29sdmVFeHRlbnNpb25zXCIsIG11c3RCZUFycmF5KTtcbiAgbGV0IG5vZGVQYXRoc0lucHV0ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm5vZGVQYXRoc1wiLCBtdXN0QmVBcnJheSk7XG4gIGxldCBtYWluRmllbGRzID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm1haW5GaWVsZHNcIiwgbXVzdEJlQXJyYXkpO1xuICBsZXQgY29uZGl0aW9ucyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJjb25kaXRpb25zXCIsIG11c3RCZUFycmF5KTtcbiAgbGV0IGV4dGVybmFsID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImV4dGVybmFsXCIsIG11c3RCZUFycmF5KTtcbiAgbGV0IGxvYWRlciA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJsb2FkZXJcIiwgbXVzdEJlT2JqZWN0KTtcbiAgbGV0IG91dEV4dGVuc2lvbiA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJvdXRFeHRlbnNpb25cIiwgbXVzdEJlT2JqZWN0KTtcbiAgbGV0IHB1YmxpY1BhdGggPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwicHVibGljUGF0aFwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgY2h1bmtOYW1lcyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJjaHVua05hbWVzXCIsIG11c3RCZVN0cmluZyk7XG4gIGxldCBhc3NldE5hbWVzID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImFzc2V0TmFtZXNcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IGluamVjdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJpbmplY3RcIiwgbXVzdEJlQXJyYXkpO1xuICBsZXQgYmFubmVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImJhbm5lclwiLCBtdXN0QmVPYmplY3QpO1xuICBsZXQgZm9vdGVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImZvb3RlclwiLCBtdXN0QmVPYmplY3QpO1xuICBsZXQgZW50cnlQb2ludHMgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwiZW50cnlQb2ludHNcIiwgbXVzdEJlQXJyYXkpO1xuICBsZXQgYWJzV29ya2luZ0RpciA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJhYnNXb3JraW5nRGlyXCIsIG11c3RCZVN0cmluZyk7XG4gIGxldCBzdGRpbiA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJzdGRpblwiLCBtdXN0QmVPYmplY3QpO1xuICBsZXQgd3JpdGUgPSAoX2EgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwid3JpdGVcIiwgbXVzdEJlQm9vbGVhbikpICE9IG51bGwgPyBfYSA6IHdyaXRlRGVmYXVsdDtcbiAgbGV0IGluY3JlbWVudGFsID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImluY3JlbWVudGFsXCIsIG11c3RCZUJvb2xlYW4pID09PSB0cnVlO1xuICBsZXQgcGx1Z2lucyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJwbHVnaW5zXCIsIG11c3RCZUFycmF5KTtcbiAgY2hlY2tGb3JJbnZhbGlkRmxhZ3Mob3B0aW9ucywga2V5cywgYGluICR7Y2FsbE5hbWV9KCkgY2FsbGApO1xuICBpZiAoc291cmNlbWFwKVxuICAgIGZsYWdzLnB1c2goYC0tc291cmNlbWFwJHtzb3VyY2VtYXAgPT09IHRydWUgPyBcIlwiIDogYD0ke3NvdXJjZW1hcH1gfWApO1xuICBpZiAoYnVuZGxlKVxuICAgIGZsYWdzLnB1c2goXCItLWJ1bmRsZVwiKTtcbiAgaWYgKHdhdGNoKSB7XG4gICAgZmxhZ3MucHVzaChcIi0td2F0Y2hcIik7XG4gICAgaWYgKHR5cGVvZiB3YXRjaCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHdhdGNoTW9kZSA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgd2F0Y2hLZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGxldCBvblJlYnVpbGQgPSBnZXRGbGFnKHdhdGNoLCB3YXRjaEtleXMsIFwib25SZWJ1aWxkXCIsIG11c3RCZUZ1bmN0aW9uKTtcbiAgICAgIGNoZWNrRm9ySW52YWxpZEZsYWdzKHdhdGNoLCB3YXRjaEtleXMsIGBvbiBcIndhdGNoXCIgaW4gJHtjYWxsTmFtZX0oKSBjYWxsYCk7XG4gICAgICB3YXRjaE1vZGUgPSB7b25SZWJ1aWxkfTtcbiAgICB9XG4gIH1cbiAgaWYgKHNwbGl0dGluZylcbiAgICBmbGFncy5wdXNoKFwiLS1zcGxpdHRpbmdcIik7XG4gIGlmIChwcmVzZXJ2ZVN5bWxpbmtzKVxuICAgIGZsYWdzLnB1c2goXCItLXByZXNlcnZlLXN5bWxpbmtzXCIpO1xuICBpZiAobWV0YWZpbGUpXG4gICAgZmxhZ3MucHVzaChgLS1tZXRhZmlsZWApO1xuICBpZiAob3V0ZmlsZSlcbiAgICBmbGFncy5wdXNoKGAtLW91dGZpbGU9JHtvdXRmaWxlfWApO1xuICBpZiAob3V0ZGlyKVxuICAgIGZsYWdzLnB1c2goYC0tb3V0ZGlyPSR7b3V0ZGlyfWApO1xuICBpZiAob3V0YmFzZSlcbiAgICBmbGFncy5wdXNoKGAtLW91dGJhc2U9JHtvdXRiYXNlfWApO1xuICBpZiAocGxhdGZvcm0pXG4gICAgZmxhZ3MucHVzaChgLS1wbGF0Zm9ybT0ke3BsYXRmb3JtfWApO1xuICBpZiAodHNjb25maWcpXG4gICAgZmxhZ3MucHVzaChgLS10c2NvbmZpZz0ke3RzY29uZmlnfWApO1xuICBpZiAocmVzb2x2ZUV4dGVuc2lvbnMpIHtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgcmVzb2x2ZUV4dGVuc2lvbnMpIHtcbiAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICBpZiAodmFsdWUuaW5kZXhPZihcIixcIikgPj0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJlc29sdmUgZXh0ZW5zaW9uOiAke3ZhbHVlfWApO1xuICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBmbGFncy5wdXNoKGAtLXJlc29sdmUtZXh0ZW5zaW9ucz0ke3ZhbHVlcy5qb2luKFwiLFwiKX1gKTtcbiAgfVxuICBpZiAocHVibGljUGF0aClcbiAgICBmbGFncy5wdXNoKGAtLXB1YmxpYy1wYXRoPSR7cHVibGljUGF0aH1gKTtcbiAgaWYgKGNodW5rTmFtZXMpXG4gICAgZmxhZ3MucHVzaChgLS1jaHVuay1uYW1lcz0ke2NodW5rTmFtZXN9YCk7XG4gIGlmIChhc3NldE5hbWVzKVxuICAgIGZsYWdzLnB1c2goYC0tYXNzZXQtbmFtZXM9JHthc3NldE5hbWVzfWApO1xuICBpZiAobWFpbkZpZWxkcykge1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiBtYWluRmllbGRzKSB7XG4gICAgICB2YWx1ZSArPSBcIlwiO1xuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoXCIsXCIpID49IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtYWluIGZpZWxkOiAke3ZhbHVlfWApO1xuICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBmbGFncy5wdXNoKGAtLW1haW4tZmllbGRzPSR7dmFsdWVzLmpvaW4oXCIsXCIpfWApO1xuICB9XG4gIGlmIChjb25kaXRpb25zKSB7XG4gICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIGNvbmRpdGlvbnMpIHtcbiAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICBpZiAodmFsdWUuaW5kZXhPZihcIixcIikgPj0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbmRpdGlvbjogJHt2YWx1ZX1gKTtcbiAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZmxhZ3MucHVzaChgLS1jb25kaXRpb25zPSR7dmFsdWVzLmpvaW4oXCIsXCIpfWApO1xuICB9XG4gIGlmIChleHRlcm5hbClcbiAgICBmb3IgKGxldCBuYW1lIG9mIGV4dGVybmFsKVxuICAgICAgZmxhZ3MucHVzaChgLS1leHRlcm5hbDoke25hbWV9YCk7XG4gIGlmIChiYW5uZXIpIHtcbiAgICBmb3IgKGxldCB0eXBlIGluIGJhbm5lcikge1xuICAgICAgaWYgKHR5cGUuaW5kZXhPZihcIj1cIikgPj0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGJhbm5lciBmaWxlIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgIGZsYWdzLnB1c2goYC0tYmFubmVyOiR7dHlwZX09JHtiYW5uZXJbdHlwZV19YCk7XG4gICAgfVxuICB9XG4gIGlmIChmb290ZXIpIHtcbiAgICBmb3IgKGxldCB0eXBlIGluIGZvb3Rlcikge1xuICAgICAgaWYgKHR5cGUuaW5kZXhPZihcIj1cIikgPj0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZvb3RlciBmaWxlIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgIGZsYWdzLnB1c2goYC0tZm9vdGVyOiR7dHlwZX09JHtmb290ZXJbdHlwZV19YCk7XG4gICAgfVxuICB9XG4gIGlmIChpbmplY3QpXG4gICAgZm9yIChsZXQgcGF0aCBvZiBpbmplY3QpXG4gICAgICBmbGFncy5wdXNoKGAtLWluamVjdDoke3BhdGh9YCk7XG4gIGlmIChsb2FkZXIpIHtcbiAgICBmb3IgKGxldCBleHQgaW4gbG9hZGVyKSB7XG4gICAgICBpZiAoZXh0LmluZGV4T2YoXCI9XCIpID49IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBsb2FkZXIgZXh0ZW5zaW9uOiAke2V4dH1gKTtcbiAgICAgIGZsYWdzLnB1c2goYC0tbG9hZGVyOiR7ZXh0fT0ke2xvYWRlcltleHRdfWApO1xuICAgIH1cbiAgfVxuICBpZiAob3V0RXh0ZW5zaW9uKSB7XG4gICAgZm9yIChsZXQgZXh0IGluIG91dEV4dGVuc2lvbikge1xuICAgICAgaWYgKGV4dC5pbmRleE9mKFwiPVwiKSA+PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb3V0IGV4dGVuc2lvbjogJHtleHR9YCk7XG4gICAgICBmbGFncy5wdXNoKGAtLW91dC1leHRlbnNpb246JHtleHR9PSR7b3V0RXh0ZW5zaW9uW2V4dF19YCk7XG4gICAgfVxuICB9XG4gIGlmIChlbnRyeVBvaW50cykge1xuICAgIGZvciAobGV0IGVudHJ5UG9pbnQgb2YgZW50cnlQb2ludHMpIHtcbiAgICAgIGVudHJ5UG9pbnQgKz0gXCJcIjtcbiAgICAgIGlmIChlbnRyeVBvaW50LnN0YXJ0c1dpdGgoXCItXCIpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZW50cnkgcG9pbnQ6ICR7ZW50cnlQb2ludH1gKTtcbiAgICAgIGZsYWdzLnB1c2goZW50cnlQb2ludCk7XG4gICAgfVxuICB9XG4gIGlmIChzdGRpbikge1xuICAgIGxldCBzdGRpbktleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGxldCBjb250ZW50cyA9IGdldEZsYWcoc3RkaW4sIHN0ZGluS2V5cywgXCJjb250ZW50c1wiLCBtdXN0QmVTdHJpbmcpO1xuICAgIGxldCByZXNvbHZlRGlyID0gZ2V0RmxhZyhzdGRpbiwgc3RkaW5LZXlzLCBcInJlc29sdmVEaXJcIiwgbXVzdEJlU3RyaW5nKTtcbiAgICBsZXQgc291cmNlZmlsZSA9IGdldEZsYWcoc3RkaW4sIHN0ZGluS2V5cywgXCJzb3VyY2VmaWxlXCIsIG11c3RCZVN0cmluZyk7XG4gICAgbGV0IGxvYWRlcjIgPSBnZXRGbGFnKHN0ZGluLCBzdGRpbktleXMsIFwibG9hZGVyXCIsIG11c3RCZVN0cmluZyk7XG4gICAgY2hlY2tGb3JJbnZhbGlkRmxhZ3Moc3RkaW4sIHN0ZGluS2V5cywgJ2luIFwic3RkaW5cIiBvYmplY3QnKTtcbiAgICBpZiAoc291cmNlZmlsZSlcbiAgICAgIGZsYWdzLnB1c2goYC0tc291cmNlZmlsZT0ke3NvdXJjZWZpbGV9YCk7XG4gICAgaWYgKGxvYWRlcjIpXG4gICAgICBmbGFncy5wdXNoKGAtLWxvYWRlcj0ke2xvYWRlcjJ9YCk7XG4gICAgaWYgKHJlc29sdmVEaXIpXG4gICAgICBzdGRpblJlc29sdmVEaXIgPSByZXNvbHZlRGlyICsgXCJcIjtcbiAgICBzdGRpbkNvbnRlbnRzID0gY29udGVudHMgPyBjb250ZW50cyArIFwiXCIgOiBcIlwiO1xuICB9XG4gIGxldCBub2RlUGF0aHMgPSBbXTtcbiAgaWYgKG5vZGVQYXRoc0lucHV0KSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2Ygbm9kZVBhdGhzSW5wdXQpIHtcbiAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICBub2RlUGF0aHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgZmxhZ3MsXG4gICAgd3JpdGUsXG4gICAgcGx1Z2lucyxcbiAgICBzdGRpbkNvbnRlbnRzLFxuICAgIHN0ZGluUmVzb2x2ZURpcixcbiAgICBhYnNXb3JraW5nRGlyLFxuICAgIGluY3JlbWVudGFsLFxuICAgIG5vZGVQYXRocyxcbiAgICB3YXRjaDogd2F0Y2hNb2RlXG4gIH07XG59XG5mdW5jdGlvbiBmbGFnc0ZvclRyYW5zZm9ybU9wdGlvbnMoY2FsbE5hbWUsIG9wdGlvbnMsIGlzVFRZLCBsb2dMZXZlbERlZmF1bHQpIHtcbiAgbGV0IGZsYWdzID0gW107XG4gIGxldCBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcHVzaExvZ0ZsYWdzKGZsYWdzLCBvcHRpb25zLCBrZXlzLCBpc1RUWSwgbG9nTGV2ZWxEZWZhdWx0KTtcbiAgcHVzaENvbW1vbkZsYWdzKGZsYWdzLCBvcHRpb25zLCBrZXlzKTtcbiAgbGV0IHNvdXJjZW1hcCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJzb3VyY2VtYXBcIiwgbXVzdEJlU3RyaW5nT3JCb29sZWFuKTtcbiAgbGV0IHRzY29uZmlnUmF3ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInRzY29uZmlnUmF3XCIsIG11c3RCZVN0cmluZ09yT2JqZWN0KTtcbiAgbGV0IHNvdXJjZWZpbGUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwic291cmNlZmlsZVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgbG9hZGVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImxvYWRlclwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgYmFubmVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImJhbm5lclwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgZm9vdGVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImZvb3RlclwiLCBtdXN0QmVTdHJpbmcpO1xuICBjaGVja0ZvckludmFsaWRGbGFncyhvcHRpb25zLCBrZXlzLCBgaW4gJHtjYWxsTmFtZX0oKSBjYWxsYCk7XG4gIGlmIChzb3VyY2VtYXApXG4gICAgZmxhZ3MucHVzaChgLS1zb3VyY2VtYXA9JHtzb3VyY2VtYXAgPT09IHRydWUgPyBcImV4dGVybmFsXCIgOiBzb3VyY2VtYXB9YCk7XG4gIGlmICh0c2NvbmZpZ1JhdylcbiAgICBmbGFncy5wdXNoKGAtLXRzY29uZmlnLXJhdz0ke3R5cGVvZiB0c2NvbmZpZ1JhdyA9PT0gXCJzdHJpbmdcIiA/IHRzY29uZmlnUmF3IDogSlNPTi5zdHJpbmdpZnkodHNjb25maWdSYXcpfWApO1xuICBpZiAoc291cmNlZmlsZSlcbiAgICBmbGFncy5wdXNoKGAtLXNvdXJjZWZpbGU9JHtzb3VyY2VmaWxlfWApO1xuICBpZiAobG9hZGVyKVxuICAgIGZsYWdzLnB1c2goYC0tbG9hZGVyPSR7bG9hZGVyfWApO1xuICBpZiAoYmFubmVyKVxuICAgIGZsYWdzLnB1c2goYC0tYmFubmVyPSR7YmFubmVyfWApO1xuICBpZiAoZm9vdGVyKVxuICAgIGZsYWdzLnB1c2goYC0tZm9vdGVyPSR7Zm9vdGVyfWApO1xuICByZXR1cm4gZmxhZ3M7XG59XG5mdW5jdGlvbiBjcmVhdGVDaGFubmVsKHN0cmVhbUluKSB7XG4gIGxldCByZXNwb25zZUNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbiAgbGV0IHBsdWdpbkNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbiAgbGV0IHdhdGNoQ2FsbGJhY2tzID0gbmV3IE1hcCgpO1xuICBsZXQgc2VydmVDYWxsYmFja3MgPSBuZXcgTWFwKCk7XG4gIGxldCBuZXh0U2VydmVJRCA9IDA7XG4gIGxldCBpc0Nsb3NlZCA9IGZhbHNlO1xuICBsZXQgbmV4dFJlcXVlc3RJRCA9IDA7XG4gIGxldCBuZXh0QnVpbGRLZXkgPSAwO1xuICBsZXQgc3Rkb3V0ID0gbmV3IFVpbnQ4QXJyYXkoMTYgKiAxMDI0KTtcbiAgbGV0IHN0ZG91dFVzZWQgPSAwO1xuICBsZXQgcmVhZEZyb21TdGRvdXQgPSAoY2h1bmspID0+IHtcbiAgICBsZXQgbGltaXQgPSBzdGRvdXRVc2VkICsgY2h1bmsubGVuZ3RoO1xuICAgIGlmIChsaW1pdCA+IHN0ZG91dC5sZW5ndGgpIHtcbiAgICAgIGxldCBzd2FwID0gbmV3IFVpbnQ4QXJyYXkobGltaXQgKiAyKTtcbiAgICAgIHN3YXAuc2V0KHN0ZG91dCk7XG4gICAgICBzdGRvdXQgPSBzd2FwO1xuICAgIH1cbiAgICBzdGRvdXQuc2V0KGNodW5rLCBzdGRvdXRVc2VkKTtcbiAgICBzdGRvdXRVc2VkICs9IGNodW5rLmxlbmd0aDtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAob2Zmc2V0ICsgNCA8PSBzdGRvdXRVc2VkKSB7XG4gICAgICBsZXQgbGVuZ3RoID0gcmVhZFVJbnQzMkxFKHN0ZG91dCwgb2Zmc2V0KTtcbiAgICAgIGlmIChvZmZzZXQgKyA0ICsgbGVuZ3RoID4gc3Rkb3V0VXNlZCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSA0O1xuICAgICAgaGFuZGxlSW5jb21pbmdQYWNrZXQoc3Rkb3V0LnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKSk7XG4gICAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgc3Rkb3V0LnNldChzdGRvdXQuc2xpY2Uob2Zmc2V0KSk7XG4gICAgICBzdGRvdXRVc2VkIC09IG9mZnNldDtcbiAgICB9XG4gIH07XG4gIGxldCBhZnRlckNsb3NlID0gKCkgPT4ge1xuICAgIGlzQ2xvc2VkID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBjYWxsYmFjayBvZiByZXNwb25zZUNhbGxiYWNrcy52YWx1ZXMoKSkge1xuICAgICAgY2FsbGJhY2soXCJUaGUgc2VydmljZSB3YXMgc3RvcHBlZFwiLCBudWxsKTtcbiAgICB9XG4gICAgcmVzcG9uc2VDYWxsYmFja3MuY2xlYXIoKTtcbiAgICBmb3IgKGxldCBjYWxsYmFja3Mgb2Ygc2VydmVDYWxsYmFja3MudmFsdWVzKCkpIHtcbiAgICAgIGNhbGxiYWNrcy5vbldhaXQoXCJUaGUgc2VydmljZSB3YXMgc3RvcHBlZFwiKTtcbiAgICB9XG4gICAgc2VydmVDYWxsYmFja3MuY2xlYXIoKTtcbiAgICBmb3IgKGxldCBjYWxsYmFjayBvZiB3YXRjaENhbGxiYWNrcy52YWx1ZXMoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKFwiVGhlIHNlcnZpY2Ugd2FzIHN0b3BwZWRcIiksIG51bGwpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICB3YXRjaENhbGxiYWNrcy5jbGVhcigpO1xuICB9O1xuICBsZXQgc2VuZFJlcXVlc3QgPSAocmVmcywgdmFsdWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKGlzQ2xvc2VkKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKFwiVGhlIHNlcnZpY2UgaXMgbm8gbG9uZ2VyIHJ1bm5pbmdcIiwgbnVsbCk7XG4gICAgbGV0IGlkID0gbmV4dFJlcXVlc3RJRCsrO1xuICAgIHJlc3BvbnNlQ2FsbGJhY2tzLnNldChpZCwgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3BvbnNlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChyZWZzKVxuICAgICAgICAgIHJlZnMudW5yZWYoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAocmVmcylcbiAgICAgIHJlZnMucmVmKCk7XG4gICAgc3RyZWFtSW4ud3JpdGVUb1N0ZGluKGVuY29kZVBhY2tldCh7aWQsIGlzUmVxdWVzdDogdHJ1ZSwgdmFsdWV9KSk7XG4gIH07XG4gIGxldCBzZW5kUmVzcG9uc2UgPSAoaWQsIHZhbHVlKSA9PiB7XG4gICAgaWYgKGlzQ2xvc2VkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHNlcnZpY2UgaXMgbm8gbG9uZ2VyIHJ1bm5pbmdcIik7XG4gICAgc3RyZWFtSW4ud3JpdGVUb1N0ZGluKGVuY29kZVBhY2tldCh7aWQsIGlzUmVxdWVzdDogZmFsc2UsIHZhbHVlfSkpO1xuICB9O1xuICBsZXQgaGFuZGxlUmVxdWVzdCA9IChpZCwgcmVxdWVzdCkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIHRyeSB7XG4gICAgICBzd2l0Y2ggKHJlcXVlc3QuY29tbWFuZCkge1xuICAgICAgICBjYXNlIFwicGluZ1wiOiB7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKGlkLCB7fSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJlc29sdmVcIjoge1xuICAgICAgICAgIGxldCBjYWxsYmFjayA9IHBsdWdpbkNhbGxiYWNrcy5nZXQocmVxdWVzdC5rZXkpO1xuICAgICAgICAgIGlmICghY2FsbGJhY2spXG4gICAgICAgICAgICBzZW5kUmVzcG9uc2UoaWQsIHt9KTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBzZW5kUmVzcG9uc2UoaWQsIHlpZWxkIGNhbGxiYWNrKHJlcXVlc3QpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwibG9hZFwiOiB7XG4gICAgICAgICAgbGV0IGNhbGxiYWNrID0gcGx1Z2luQ2FsbGJhY2tzLmdldChyZXF1ZXN0LmtleSk7XG4gICAgICAgICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgICAgIHNlbmRSZXNwb25zZShpZCwge30pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHNlbmRSZXNwb25zZShpZCwgeWllbGQgY2FsbGJhY2socmVxdWVzdCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzZXJ2ZS1yZXF1ZXN0XCI6IHtcbiAgICAgICAgICBsZXQgY2FsbGJhY2tzID0gc2VydmVDYWxsYmFja3MuZ2V0KHJlcXVlc3Quc2VydmVJRCk7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrcyAmJiBjYWxsYmFja3Mub25SZXF1ZXN0KVxuICAgICAgICAgICAgY2FsbGJhY2tzLm9uUmVxdWVzdChyZXF1ZXN0LmFyZ3MpO1xuICAgICAgICAgIHNlbmRSZXNwb25zZShpZCwge30pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzZXJ2ZS13YWl0XCI6IHtcbiAgICAgICAgICBsZXQgY2FsbGJhY2tzID0gc2VydmVDYWxsYmFja3MuZ2V0KHJlcXVlc3Quc2VydmVJRCk7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrcylcbiAgICAgICAgICAgIGNhbGxiYWNrcy5vbldhaXQocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKGlkLCB7fSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIndhdGNoLXJlYnVpbGRcIjoge1xuICAgICAgICAgIGxldCBjYWxsYmFjayA9IHdhdGNoQ2FsbGJhY2tzLmdldChyZXF1ZXN0LndhdGNoSUQpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spXG4gICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcXVlc3QuYXJncyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbmRSZXNwb25zZShpZCwge30pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbW1hbmQ6IGAgKyByZXF1ZXN0LmNvbW1hbmQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNlbmRSZXNwb25zZShpZCwge2Vycm9yczogW2V4dHJhY3RFcnJvck1lc3NhZ2VWOChlLCBzdHJlYW1JbiwgbnVsbCwgdm9pZCAwKV19KTtcbiAgICB9XG4gIH0pO1xuICBsZXQgaXNGaXJzdFBhY2tldCA9IHRydWU7XG4gIGxldCBoYW5kbGVJbmNvbWluZ1BhY2tldCA9IChieXRlcykgPT4ge1xuICAgIGlmIChpc0ZpcnN0UGFja2V0KSB7XG4gICAgICBpc0ZpcnN0UGFja2V0ID0gZmFsc2U7XG4gICAgICBsZXQgYmluYXJ5VmVyc2lvbiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uYnl0ZXMpO1xuICAgICAgaWYgKGJpbmFyeVZlcnNpb24gIT09IFwiMC45LjBcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBzdGFydCBzZXJ2aWNlOiBIb3N0IHZlcnNpb24gXCIke1wiMC45LjBcIn1cIiBkb2VzIG5vdCBtYXRjaCBiaW5hcnkgdmVyc2lvbiAke0pTT04uc3RyaW5naWZ5KGJpbmFyeVZlcnNpb24pfWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGFja2V0ID0gZGVjb2RlUGFja2V0KGJ5dGVzKTtcbiAgICBpZiAocGFja2V0LmlzUmVxdWVzdCkge1xuICAgICAgaGFuZGxlUmVxdWVzdChwYWNrZXQuaWQsIHBhY2tldC52YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBjYWxsYmFjayA9IHJlc3BvbnNlQ2FsbGJhY2tzLmdldChwYWNrZXQuaWQpO1xuICAgICAgcmVzcG9uc2VDYWxsYmFja3MuZGVsZXRlKHBhY2tldC5pZCk7XG4gICAgICBpZiAocGFja2V0LnZhbHVlLmVycm9yKVxuICAgICAgICBjYWxsYmFjayhwYWNrZXQudmFsdWUuZXJyb3IsIHt9KTtcbiAgICAgIGVsc2VcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcGFja2V0LnZhbHVlKTtcbiAgICB9XG4gIH07XG4gIGxldCBoYW5kbGVQbHVnaW5zID0gKHBsdWdpbnMsIHJlcXVlc3QsIGJ1aWxkS2V5LCBzdGFzaCkgPT4ge1xuICAgIGlmIChzdHJlYW1Jbi5pc1N5bmMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgdXNlIHBsdWdpbnMgaW4gc3luY2hyb25vdXMgQVBJIGNhbGxzXCIpO1xuICAgIGxldCBvblJlc29sdmVDYWxsYmFja3MgPSB7fTtcbiAgICBsZXQgb25Mb2FkQ2FsbGJhY2tzID0ge307XG4gICAgbGV0IG5leHRDYWxsYmFja0lEID0gMDtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmVxdWVzdC5wbHVnaW5zID0gW107XG4gICAgZm9yIChsZXQgaXRlbSBvZiBwbHVnaW5zKSB7XG4gICAgICBsZXQga2V5cyA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiBpdGVtICE9PSBcIm9iamVjdFwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBsdWdpbiBhdCBpbmRleCAke2l9IG11c3QgYmUgYW4gb2JqZWN0YCk7XG4gICAgICBsZXQgbmFtZSA9IGdldEZsYWcoaXRlbSwga2V5cywgXCJuYW1lXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICBsZXQgc2V0dXAgPSBnZXRGbGFnKGl0ZW0sIGtleXMsIFwic2V0dXBcIiwgbXVzdEJlRnVuY3Rpb24pO1xuICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUgPT09IFwiXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUGx1Z2luIGF0IGluZGV4ICR7aX0gaXMgbWlzc2luZyBhIG5hbWVgKTtcbiAgICAgIGlmICh0eXBlb2Ygc2V0dXAgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbJHtuYW1lfV0gUGx1Z2luIGlzIG1pc3NpbmcgYSBzZXR1cCBmdW5jdGlvbmApO1xuICAgICAgY2hlY2tGb3JJbnZhbGlkRmxhZ3MoaXRlbSwga2V5cywgYG9uIHBsdWdpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWApO1xuICAgICAgbGV0IHBsdWdpbiA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgb25SZXNvbHZlOiBbXSxcbiAgICAgICAgb25Mb2FkOiBbXVxuICAgICAgfTtcbiAgICAgIGkrKztcbiAgICAgIHNldHVwKHtcbiAgICAgICAgb25SZXNvbHZlKG9wdGlvbnMsIGNhbGxiYWNrMikge1xuICAgICAgICAgIGxldCByZWdpc3RlcmVkVGV4dCA9IGBUaGlzIGVycm9yIGNhbWUgZnJvbSB0aGUgXCJvblJlc29sdmVcIiBjYWxsYmFjayByZWdpc3RlcmVkIGhlcmVgO1xuICAgICAgICAgIGxldCByZWdpc3RlcmVkTm90ZSA9IGV4dHJhY3RDYWxsZXJWOChuZXcgRXJyb3IocmVnaXN0ZXJlZFRleHQpLCBzdHJlYW1JbiwgXCJvblJlc29sdmVcIik7XG4gICAgICAgICAgbGV0IGtleXMyID0ge307XG4gICAgICAgICAgbGV0IGZpbHRlciA9IGdldEZsYWcob3B0aW9ucywga2V5czIsIFwiZmlsdGVyXCIsIG11c3RCZVJlZ0V4cCk7XG4gICAgICAgICAgbGV0IG5hbWVzcGFjZSA9IGdldEZsYWcob3B0aW9ucywga2V5czIsIFwibmFtZXNwYWNlXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgICAgY2hlY2tGb3JJbnZhbGlkRmxhZ3Mob3B0aW9ucywga2V5czIsIGBpbiBvblJlc29sdmUoKSBjYWxsIGZvciBwbHVnaW4gJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gKTtcbiAgICAgICAgICBpZiAoZmlsdGVyID09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske3BsdWdpbi5uYW1lfV0gb25SZXNvbHZlKCkgY2FsbCBpcyBtaXNzaW5nIGEgZmlsdGVyYCk7XG4gICAgICAgICAgbGV0IGlkID0gbmV4dENhbGxiYWNrSUQrKztcbiAgICAgICAgICBvblJlc29sdmVDYWxsYmFja3NbaWRdID0ge25hbWUsIGNhbGxiYWNrOiBjYWxsYmFjazIsIG5vdGU6IHJlZ2lzdGVyZWROb3RlfTtcbiAgICAgICAgICBwbHVnaW4ub25SZXNvbHZlLnB1c2goe2lkLCBmaWx0ZXI6IGZpbHRlci5zb3VyY2UsIG5hbWVzcGFjZTogbmFtZXNwYWNlIHx8IFwiXCJ9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Mb2FkKG9wdGlvbnMsIGNhbGxiYWNrMikge1xuICAgICAgICAgIGxldCByZWdpc3RlcmVkVGV4dCA9IGBUaGlzIGVycm9yIGNhbWUgZnJvbSB0aGUgXCJvbkxvYWRcIiBjYWxsYmFjayByZWdpc3RlcmVkIGhlcmVgO1xuICAgICAgICAgIGxldCByZWdpc3RlcmVkTm90ZSA9IGV4dHJhY3RDYWxsZXJWOChuZXcgRXJyb3IocmVnaXN0ZXJlZFRleHQpLCBzdHJlYW1JbiwgXCJvbkxvYWRcIik7XG4gICAgICAgICAgbGV0IGtleXMyID0ge307XG4gICAgICAgICAgbGV0IGZpbHRlciA9IGdldEZsYWcob3B0aW9ucywga2V5czIsIFwiZmlsdGVyXCIsIG11c3RCZVJlZ0V4cCk7XG4gICAgICAgICAgbGV0IG5hbWVzcGFjZSA9IGdldEZsYWcob3B0aW9ucywga2V5czIsIFwibmFtZXNwYWNlXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgICAgY2hlY2tGb3JJbnZhbGlkRmxhZ3Mob3B0aW9ucywga2V5czIsIGBpbiBvbkxvYWQoKSBjYWxsIGZvciBwbHVnaW4gJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gKTtcbiAgICAgICAgICBpZiAoZmlsdGVyID09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske3BsdWdpbi5uYW1lfV0gb25Mb2FkKCkgY2FsbCBpcyBtaXNzaW5nIGEgZmlsdGVyYCk7XG4gICAgICAgICAgbGV0IGlkID0gbmV4dENhbGxiYWNrSUQrKztcbiAgICAgICAgICBvbkxvYWRDYWxsYmFja3NbaWRdID0ge25hbWUsIGNhbGxiYWNrOiBjYWxsYmFjazIsIG5vdGU6IHJlZ2lzdGVyZWROb3RlfTtcbiAgICAgICAgICBwbHVnaW4ub25Mb2FkLnB1c2goe2lkLCBmaWx0ZXI6IGZpbHRlci5zb3VyY2UsIG5hbWVzcGFjZTogbmFtZXNwYWNlIHx8IFwiXCJ9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXF1ZXN0LnBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIH1cbiAgICBjb25zdCBjYWxsYmFjayA9IChyZXF1ZXN0MikgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgc3dpdGNoIChyZXF1ZXN0Mi5jb21tYW5kKSB7XG4gICAgICAgIGNhc2UgXCJyZXNvbHZlXCI6IHtcbiAgICAgICAgICBsZXQgcmVzcG9uc2UgPSB7fSwgbmFtZSwgY2FsbGJhY2syLCBub3RlO1xuICAgICAgICAgIGZvciAobGV0IGlkIG9mIHJlcXVlc3QyLmlkcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgKHtuYW1lLCBjYWxsYmFjazogY2FsbGJhY2syLCBub3RlfSA9IG9uUmVzb2x2ZUNhbGxiYWNrc1tpZF0pO1xuICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgY2FsbGJhY2syKHtcbiAgICAgICAgICAgICAgICBwYXRoOiByZXF1ZXN0Mi5wYXRoLFxuICAgICAgICAgICAgICAgIGltcG9ydGVyOiByZXF1ZXN0Mi5pbXBvcnRlcixcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IHJlcXVlc3QyLm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICByZXNvbHZlRGlyOiByZXF1ZXN0Mi5yZXNvbHZlRGlyLFxuICAgICAgICAgICAgICAgIGtpbmQ6IHJlcXVlc3QyLmtpbmQsXG4gICAgICAgICAgICAgICAgcGx1Z2luRGF0YTogc3Rhc2gubG9hZChyZXF1ZXN0Mi5wbHVnaW5EYXRhKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIG9uUmVzb2x2ZSgpIGNhbGxiYWNrIGluIHBsdWdpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfSB0byByZXR1cm4gYW4gb2JqZWN0YCk7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSB7fTtcbiAgICAgICAgICAgICAgICBsZXQgcGx1Z2luTmFtZSA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcInBsdWdpbk5hbWVcIiwgbXVzdEJlU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcInBhdGhcIiwgbXVzdEJlU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZXNwYWNlID0gZ2V0RmxhZyhyZXN1bHQsIGtleXMsIFwibmFtZXNwYWNlXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgbGV0IGV4dGVybmFsID0gZ2V0RmxhZyhyZXN1bHQsIGtleXMsIFwiZXh0ZXJuYWxcIiwgbXVzdEJlQm9vbGVhbik7XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpbkRhdGEgPSBnZXRGbGFnKHJlc3VsdCwga2V5cywgXCJwbHVnaW5EYXRhXCIsIGNhbkJlQW55dGhpbmcpO1xuICAgICAgICAgICAgICAgIGxldCBlcnJvcnMgPSBnZXRGbGFnKHJlc3VsdCwga2V5cywgXCJlcnJvcnNcIiwgbXVzdEJlQXJyYXkpO1xuICAgICAgICAgICAgICAgIGxldCB3YXJuaW5ncyA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcIndhcm5pbmdzXCIsIG11c3RCZUFycmF5KTtcbiAgICAgICAgICAgICAgICBjaGVja0ZvckludmFsaWRGbGFncyhyZXN1bHQsIGtleXMsIGBmcm9tIG9uUmVzb2x2ZSgpIGNhbGxiYWNrIGluIHBsdWdpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWApO1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlkID0gaWQ7XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbk5hbWUgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnBsdWdpbk5hbWUgPSBwbHVnaW5OYW1lO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5wYXRoID0gcGF0aDtcbiAgICAgICAgICAgICAgICBpZiAobmFtZXNwYWNlICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgICAgICAgICAgICAgaWYgKGV4dGVybmFsICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5leHRlcm5hbCA9IGV4dGVybmFsO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5EYXRhICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5wbHVnaW5EYXRhID0gc3Rhc2guc3RvcmUocGx1Z2luRGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycyAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3JzID0gc2FuaXRpemVNZXNzYWdlcyhlcnJvcnMsIFwiZXJyb3JzXCIsIHN0YXNoKTtcbiAgICAgICAgICAgICAgICBpZiAod2FybmluZ3MgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLndhcm5pbmdzID0gc2FuaXRpemVNZXNzYWdlcyh3YXJuaW5ncywgXCJ3YXJuaW5nc1wiLCBzdGFzaCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtpZCwgZXJyb3JzOiBbZXh0cmFjdEVycm9yTWVzc2FnZVY4KGUsIHN0cmVhbUluLCBzdGFzaCwgbm90ZSldfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJsb2FkXCI6IHtcbiAgICAgICAgICBsZXQgcmVzcG9uc2UgPSB7fSwgbmFtZSwgY2FsbGJhY2syLCBub3RlO1xuICAgICAgICAgIGZvciAobGV0IGlkIG9mIHJlcXVlc3QyLmlkcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgKHtuYW1lLCBjYWxsYmFjazogY2FsbGJhY2syLCBub3RlfSA9IG9uTG9hZENhbGxiYWNrc1tpZF0pO1xuICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgY2FsbGJhY2syKHtcbiAgICAgICAgICAgICAgICBwYXRoOiByZXF1ZXN0Mi5wYXRoLFxuICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogcmVxdWVzdDIubmFtZXNwYWNlLFxuICAgICAgICAgICAgICAgIHBsdWdpbkRhdGE6IHN0YXNoLmxvYWQocmVxdWVzdDIucGx1Z2luRGF0YSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBvbkxvYWQoKSBjYWxsYmFjayBpbiBwbHVnaW4gJHtKU09OLnN0cmluZ2lmeShuYW1lKX0gdG8gcmV0dXJuIGFuIG9iamVjdGApO1xuICAgICAgICAgICAgICAgIGxldCBrZXlzID0ge307XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpbk5hbWUgPSBnZXRGbGFnKHJlc3VsdCwga2V5cywgXCJwbHVnaW5OYW1lXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnRzID0gZ2V0RmxhZyhyZXN1bHQsIGtleXMsIFwiY29udGVudHNcIiwgbXVzdEJlU3RyaW5nT3JVaW50OEFycmF5KTtcbiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZURpciA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcInJlc29sdmVEaXJcIiwgbXVzdEJlU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBsZXQgcGx1Z2luRGF0YSA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcInBsdWdpbkRhdGFcIiwgY2FuQmVBbnl0aGluZyk7XG4gICAgICAgICAgICAgICAgbGV0IGxvYWRlciA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcImxvYWRlclwiLCBtdXN0QmVTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGxldCBlcnJvcnMgPSBnZXRGbGFnKHJlc3VsdCwga2V5cywgXCJlcnJvcnNcIiwgbXVzdEJlQXJyYXkpO1xuICAgICAgICAgICAgICAgIGxldCB3YXJuaW5ncyA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcIndhcm5pbmdzXCIsIG11c3RCZUFycmF5KTtcbiAgICAgICAgICAgICAgICBjaGVja0ZvckludmFsaWRGbGFncyhyZXN1bHQsIGtleXMsIGBmcm9tIG9uTG9hZCgpIGNhbGxiYWNrIGluIHBsdWdpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWApO1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlkID0gaWQ7XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbk5hbWUgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnBsdWdpbk5hbWUgPSBwbHVnaW5OYW1lO1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50cyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5jb250ZW50cyA9IGNvbnRlbnRzO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRlbnRzICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5jb250ZW50cyA9IGVuY29kZVVURjgoY29udGVudHMpO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlRGlyICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5yZXNvbHZlRGlyID0gcmVzb2x2ZURpcjtcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luRGF0YSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucGx1Z2luRGF0YSA9IHN0YXNoLnN0b3JlKHBsdWdpbkRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChsb2FkZXIgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmxvYWRlciA9IGxvYWRlcjtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5lcnJvcnMgPSBzYW5pdGl6ZU1lc3NhZ2VzKGVycm9ycywgXCJlcnJvcnNcIiwgc3Rhc2gpO1xuICAgICAgICAgICAgICAgIGlmICh3YXJuaW5ncyAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2Uud2FybmluZ3MgPSBzYW5pdGl6ZU1lc3NhZ2VzKHdhcm5pbmdzLCBcIndhcm5pbmdzXCIsIHN0YXNoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICByZXR1cm4ge2lkLCBlcnJvcnM6IFtleHRyYWN0RXJyb3JNZXNzYWdlVjgoZSwgc3RyZWFtSW4sIHN0YXNoLCBub3RlKV19O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY29tbWFuZDogYCArIHJlcXVlc3QyLmNvbW1hbmQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZWZDb3VudCA9IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZigpIHtcbiAgICAgICAgaWYgKCsrcmVmQ291bnQgPT09IDEpXG4gICAgICAgICAgcGx1Z2luQ2FsbGJhY2tzLnNldChidWlsZEtleSwgY2FsbGJhY2spO1xuICAgICAgfSxcbiAgICAgIHVucmVmKCkge1xuICAgICAgICBpZiAoLS1yZWZDb3VudCA9PT0gMClcbiAgICAgICAgICBwbHVnaW5DYWxsYmFja3MuZGVsZXRlKGJ1aWxkS2V5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBsZXQgYnVpbGRTZXJ2ZURhdGEgPSAocmVmcywgb3B0aW9ucywgcmVxdWVzdCkgPT4ge1xuICAgIGxldCBrZXlzID0ge307XG4gICAgbGV0IHBvcnQgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwicG9ydFwiLCBtdXN0QmVJbnRlZ2VyKTtcbiAgICBsZXQgaG9zdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJob3N0XCIsIG11c3RCZVN0cmluZyk7XG4gICAgbGV0IHNlcnZlZGlyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInNlcnZlZGlyXCIsIG11c3RCZVN0cmluZyk7XG4gICAgbGV0IG9uUmVxdWVzdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJvblJlcXVlc3RcIiwgbXVzdEJlRnVuY3Rpb24pO1xuICAgIGxldCBzZXJ2ZUlEID0gbmV4dFNlcnZlSUQrKztcbiAgICBsZXQgb25XYWl0O1xuICAgIGxldCB3YWl0ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgb25XYWl0ID0gKGVycm9yKSA9PiB7XG4gICAgICAgIHNlcnZlQ2FsbGJhY2tzLmRlbGV0ZShzZXJ2ZUlEKTtcbiAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKVxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXJyb3IpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmVxdWVzdC5zZXJ2ZSA9IHtzZXJ2ZUlEfTtcbiAgICBjaGVja0ZvckludmFsaWRGbGFncyhvcHRpb25zLCBrZXlzLCBgaW4gc2VydmUoKSBjYWxsYCk7XG4gICAgaWYgKHBvcnQgIT09IHZvaWQgMClcbiAgICAgIHJlcXVlc3Quc2VydmUucG9ydCA9IHBvcnQ7XG4gICAgaWYgKGhvc3QgIT09IHZvaWQgMClcbiAgICAgIHJlcXVlc3Quc2VydmUuaG9zdCA9IGhvc3Q7XG4gICAgaWYgKHNlcnZlZGlyICE9PSB2b2lkIDApXG4gICAgICByZXF1ZXN0LnNlcnZlLnNlcnZlZGlyID0gc2VydmVkaXI7XG4gICAgc2VydmVDYWxsYmFja3Muc2V0KHNlcnZlSUQsIHtcbiAgICAgIG9uUmVxdWVzdCxcbiAgICAgIG9uV2FpdFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB3YWl0LFxuICAgICAgc3RvcCgpIHtcbiAgICAgICAgc2VuZFJlcXVlc3QocmVmcywge2NvbW1hbmQ6IFwic2VydmUtc3RvcFwiLCBzZXJ2ZUlEfSwgKCkgPT4ge1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICByZXR1cm4ge1xuICAgIHJlYWRGcm9tU3Rkb3V0LFxuICAgIGFmdGVyQ2xvc2UsXG4gICAgc2VydmljZToge1xuICAgICAgYnVpbGRPclNlcnZlKGNhbGxOYW1lLCBjYWxsZXJSZWZzLCBzZXJ2ZU9wdGlvbnMsIG9wdGlvbnMsIGlzVFRZLCBkZWZhdWx0V0QsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBwbHVnaW5SZWZzO1xuICAgICAgICBjb25zdCBkZXRhaWxzID0gY3JlYXRlT2JqZWN0U3Rhc2goKTtcbiAgICAgICAgY29uc3QgbG9nTGV2ZWxEZWZhdWx0ID0gXCJ3YXJuaW5nXCI7XG4gICAgICAgIGNvbnN0IHJlZnMgPSB7XG4gICAgICAgICAgcmVmKCkge1xuICAgICAgICAgICAgaWYgKHBsdWdpblJlZnMpXG4gICAgICAgICAgICAgIHBsdWdpblJlZnMucmVmKCk7XG4gICAgICAgICAgICBpZiAoY2FsbGVyUmVmcylcbiAgICAgICAgICAgICAgY2FsbGVyUmVmcy5yZWYoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVucmVmKCkge1xuICAgICAgICAgICAgaWYgKHBsdWdpblJlZnMpXG4gICAgICAgICAgICAgIHBsdWdpblJlZnMudW5yZWYoKTtcbiAgICAgICAgICAgIGlmIChjYWxsZXJSZWZzKVxuICAgICAgICAgICAgICBjYWxsZXJSZWZzLnVucmVmKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCBrZXkgPSBuZXh0QnVpbGRLZXkrKztcbiAgICAgICAgICBsZXQgd3JpdGVEZWZhdWx0ID0gIXN0cmVhbUluLmlzQnJvd3NlcjtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICB3cml0ZSxcbiAgICAgICAgICAgIHBsdWdpbnMsXG4gICAgICAgICAgICBzdGRpbkNvbnRlbnRzLFxuICAgICAgICAgICAgc3RkaW5SZXNvbHZlRGlyLFxuICAgICAgICAgICAgYWJzV29ya2luZ0RpcixcbiAgICAgICAgICAgIGluY3JlbWVudGFsLFxuICAgICAgICAgICAgbm9kZVBhdGhzLFxuICAgICAgICAgICAgd2F0Y2hcbiAgICAgICAgICB9ID0gZmxhZ3NGb3JCdWlsZE9wdGlvbnMoY2FsbE5hbWUsIG9wdGlvbnMsIGlzVFRZLCBsb2dMZXZlbERlZmF1bHQsIHdyaXRlRGVmYXVsdCk7XG4gICAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBjb21tYW5kOiBcImJ1aWxkXCIsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBmbGFncyxcbiAgICAgICAgICAgIHdyaXRlLFxuICAgICAgICAgICAgc3RkaW5Db250ZW50cyxcbiAgICAgICAgICAgIHN0ZGluUmVzb2x2ZURpcixcbiAgICAgICAgICAgIGFic1dvcmtpbmdEaXI6IGFic1dvcmtpbmdEaXIgfHwgZGVmYXVsdFdELFxuICAgICAgICAgICAgaW5jcmVtZW50YWwsXG4gICAgICAgICAgICBub2RlUGF0aHMsXG4gICAgICAgICAgICBoYXNPblJlYnVpbGQ6ICEhKHdhdGNoICYmIHdhdGNoLm9uUmVidWlsZClcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxldCBzZXJ2ZTIgPSBzZXJ2ZU9wdGlvbnMgJiYgYnVpbGRTZXJ2ZURhdGEocmVmcywgc2VydmVPcHRpb25zLCByZXF1ZXN0KTtcbiAgICAgICAgICBpZiAocGx1Z2lucyAmJiBwbHVnaW5zLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBwbHVnaW5SZWZzID0gaGFuZGxlUGx1Z2lucyhwbHVnaW5zLCByZXF1ZXN0LCBrZXksIGRldGFpbHMpO1xuICAgICAgICAgIGxldCByZWJ1aWxkO1xuICAgICAgICAgIGxldCBzdG9wO1xuICAgICAgICAgIGxldCBidWlsZFJlc3BvbnNlVG9SZXN1bHQgPSAocmVzcG9uc2UsIGNhbGxiYWNrMikgPT4ge1xuICAgICAgICAgICAgbGV0IGVycm9ycyA9IHJlcGxhY2VEZXRhaWxzSW5NZXNzYWdlcyhyZXNwb25zZS5lcnJvcnMsIGRldGFpbHMpO1xuICAgICAgICAgICAgbGV0IHdhcm5pbmdzID0gcmVwbGFjZURldGFpbHNJbk1lc3NhZ2VzKHJlc3BvbnNlLndhcm5pbmdzLCBkZXRhaWxzKTtcbiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrMihmYWlsdXJlRXJyb3JXaXRoTG9nKFwiQnVpbGQgZmFpbGVkXCIsIGVycm9ycywgd2FybmluZ3MpLCBudWxsKTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB7d2FybmluZ3N9O1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm91dHB1dEZpbGVzKVxuICAgICAgICAgICAgICByZXN1bHQub3V0cHV0RmlsZXMgPSByZXNwb25zZS5vdXRwdXRGaWxlcy5tYXAoY29udmVydE91dHB1dEZpbGVzKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5tZXRhZmlsZSlcbiAgICAgICAgICAgICAgcmVzdWx0Lm1ldGFmaWxlID0gSlNPTi5wYXJzZShyZXNwb25zZS5tZXRhZmlsZSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uud3JpdGVUb1N0ZG91dCAhPT0gdm9pZCAwKVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkZWNvZGVVVEY4KHJlc3BvbnNlLndyaXRlVG9TdGRvdXQpLnJlcGxhY2UoL1xcbiQvLCBcIlwiKSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UucmVidWlsZElEICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgaWYgKCFyZWJ1aWxkKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZWJ1aWxkID0gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGlzRGlzcG9zZWQgfHwgaXNDbG9zZWQpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZWJ1aWxkXCIpO1xuICAgICAgICAgICAgICAgICAgc2VuZFJlcXVlc3QocmVmcywge2NvbW1hbmQ6IFwicmVidWlsZFwiLCByZWJ1aWxkSUQ6IHJlc3BvbnNlLnJlYnVpbGRJRH0sIChlcnJvcjIsIHJlc3BvbnNlMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IyKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjazIobmV3IEVycm9yKGVycm9yMiksIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBidWlsZFJlc3BvbnNlVG9SZXN1bHQocmVzcG9uc2UyLCAoZXJyb3IzLCByZXN1bHQzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yMylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcjMpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0Myk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5yZWYoKTtcbiAgICAgICAgICAgICAgICByZWJ1aWxkLmRpc3Bvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoaXNEaXNwb3NlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdChyZWZzLCB7Y29tbWFuZDogXCJyZWJ1aWxkLWRpc3Bvc2VcIiwgcmVidWlsZElEOiByZXNwb25zZS5yZWJ1aWxkSUR9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJlZnMudW5yZWYoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdC5yZWJ1aWxkID0gcmVidWlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS53YXRjaElEICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgaWYgKCFzdG9wKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlZnMucmVmKCk7XG4gICAgICAgICAgICAgICAgc3RvcCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChpc1N0b3BwZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIGlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB3YXRjaENhbGxiYWNrcy5kZWxldGUocmVzcG9uc2Uud2F0Y2hJRCk7XG4gICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdChyZWZzLCB7Y29tbWFuZDogXCJ3YXRjaC1zdG9wXCIsIHdhdGNoSUQ6IHJlc3BvbnNlLndhdGNoSUR9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJlZnMudW5yZWYoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh3YXRjaCAmJiB3YXRjaC5vblJlYnVpbGQpIHtcbiAgICAgICAgICAgICAgICAgIHdhdGNoQ2FsbGJhY2tzLnNldChyZXNwb25zZS53YXRjaElELCAoc2VydmljZVN0b3BFcnJvciwgd2F0Y2hSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VydmljZVN0b3BFcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2F0Y2gub25SZWJ1aWxkKHNlcnZpY2VTdG9wRXJyb3IsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JzMiA9IHJlcGxhY2VEZXRhaWxzSW5NZXNzYWdlcyh3YXRjaFJlc3BvbnNlLmVycm9ycywgZGV0YWlscyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB3YXJuaW5nczIgPSByZXBsYWNlRGV0YWlsc0luTWVzc2FnZXMod2F0Y2hSZXNwb25zZS53YXJuaW5ncywgZGV0YWlscyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcnMyLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdhdGNoLm9uUmVidWlsZChmYWlsdXJlRXJyb3JXaXRoTG9nKFwiQnVpbGQgZmFpbGVkXCIsIGVycm9yczIsIHdhcm5pbmdzMiksIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0MiA9IHt3YXJuaW5nczogd2FybmluZ3MyfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGNoUmVzcG9uc2Uub3V0cHV0RmlsZXMpXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Mi5vdXRwdXRGaWxlcyA9IHdhdGNoUmVzcG9uc2Uub3V0cHV0RmlsZXMubWFwKGNvbnZlcnRPdXRwdXRGaWxlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaFJlc3BvbnNlLnJlYnVpbGRJRCAhPT0gdm9pZCAwKVxuICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDIucmVidWlsZCA9IHJlYnVpbGQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDIuc3RvcCA9IHN0b3A7XG4gICAgICAgICAgICAgICAgICAgIHdhdGNoLm9uUmVidWlsZChudWxsLCByZXN1bHQyKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQuc3RvcCA9IHN0b3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2syKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAod3JpdGUgJiYgc3RyZWFtSW4uaXNCcm93c2VyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZW5hYmxlIFwid3JpdGVcIiBpbiB0aGUgYnJvd3NlcmApO1xuICAgICAgICAgIGlmIChpbmNyZW1lbnRhbCAmJiBzdHJlYW1Jbi5pc1N5bmMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB1c2UgXCJpbmNyZW1lbnRhbFwiIHdpdGggYSBzeW5jaHJvbm91cyBidWlsZGApO1xuICAgICAgICAgIHNlbmRSZXF1ZXN0KHJlZnMsIHJlcXVlc3QsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihlcnJvciksIG51bGwpO1xuICAgICAgICAgICAgaWYgKHNlcnZlMikge1xuICAgICAgICAgICAgICBsZXQgc2VydmVSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICBsZXQgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJlZnMucmVmKCk7XG4gICAgICAgICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgcG9ydDogc2VydmVSZXNwb25zZS5wb3J0LFxuICAgICAgICAgICAgICAgIGhvc3Q6IHNlcnZlUmVzcG9uc2UuaG9zdCxcbiAgICAgICAgICAgICAgICB3YWl0OiBzZXJ2ZTIud2FpdCxcbiAgICAgICAgICAgICAgICBzdG9wKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGlzU3RvcHBlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHNlcnZlMi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICByZWZzLnVucmVmKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZWZzLnJlZigpO1xuICAgICAgICAgICAgICBzZXJ2ZTIud2FpdC50aGVuKHJlZnMudW5yZWYsIHJlZnMudW5yZWYpO1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBidWlsZFJlc3BvbnNlVG9SZXN1bHQocmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxldCBmbGFncyA9IFtdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwdXNoTG9nRmxhZ3MoZmxhZ3MsIG9wdGlvbnMsIHt9LCBpc1RUWSwgbG9nTGV2ZWxEZWZhdWx0KTtcbiAgICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBlcnJvciA9IGV4dHJhY3RFcnJvck1lc3NhZ2VWOChlLCBzdHJlYW1JbiwgZGV0YWlscywgdm9pZCAwKTtcbiAgICAgICAgICBzZW5kUmVxdWVzdChyZWZzLCB7Y29tbWFuZDogXCJlcnJvclwiLCBmbGFncywgZXJyb3J9LCAoKSA9PiB7XG4gICAgICAgICAgICBlcnJvci5kZXRhaWwgPSBkZXRhaWxzLmxvYWQoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGZhaWx1cmVFcnJvcldpdGhMb2coXCJCdWlsZCBmYWlsZWRcIiwgW2Vycm9yXSwgW10pLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zZm9ybShjYWxsTmFtZSwgcmVmcywgaW5wdXQsIG9wdGlvbnMsIGlzVFRZLCBmcywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgZGV0YWlscyA9IGNyZWF0ZU9iamVjdFN0YXNoKCk7XG4gICAgICAgIGNvbnN0IGxvZ0xldmVsRGVmYXVsdCA9IFwic2lsZW50XCI7XG4gICAgICAgIGxldCBzdGFydCA9IChpbnB1dFBhdGgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5wdXQgdG8gXCJ0cmFuc2Zvcm1cIiBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSBmbGFnc0ZvclRyYW5zZm9ybU9wdGlvbnMoY2FsbE5hbWUsIG9wdGlvbnMsIGlzVFRZLCBsb2dMZXZlbERlZmF1bHQpO1xuICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgIGNvbW1hbmQ6IFwidHJhbnNmb3JtXCIsXG4gICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICBpbnB1dEZTOiBpbnB1dFBhdGggIT09IG51bGwsXG4gICAgICAgICAgICAgIGlucHV0OiBpbnB1dFBhdGggIT09IG51bGwgPyBpbnB1dFBhdGggOiBpbnB1dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbmRSZXF1ZXN0KHJlZnMsIHJlcXVlc3QsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoZXJyb3IpLCBudWxsKTtcbiAgICAgICAgICAgICAgbGV0IGVycm9ycyA9IHJlcGxhY2VEZXRhaWxzSW5NZXNzYWdlcyhyZXNwb25zZS5lcnJvcnMsIGRldGFpbHMpO1xuICAgICAgICAgICAgICBsZXQgd2FybmluZ3MgPSByZXBsYWNlRGV0YWlsc0luTWVzc2FnZXMocmVzcG9uc2Uud2FybmluZ3MsIGRldGFpbHMpO1xuICAgICAgICAgICAgICBsZXQgb3V0c3RhbmRpbmcgPSAxO1xuICAgICAgICAgICAgICBsZXQgbmV4dCA9ICgpID0+IC0tb3V0c3RhbmRpbmcgPT09IDAgJiYgY2FsbGJhY2sobnVsbCwge3dhcm5pbmdzLCBjb2RlOiByZXNwb25zZS5jb2RlLCBtYXA6IHJlc3BvbnNlLm1hcH0pO1xuICAgICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGZhaWx1cmVFcnJvcldpdGhMb2coXCJUcmFuc2Zvcm0gZmFpbGVkXCIsIGVycm9ycywgd2FybmluZ3MpLCBudWxsKTtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmNvZGVGUykge1xuICAgICAgICAgICAgICAgIG91dHN0YW5kaW5nKys7XG4gICAgICAgICAgICAgICAgZnMucmVhZEZpbGUocmVzcG9uc2UuY29kZSwgKGVyciwgY29udGVudHMpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmNvZGUgPSBjb250ZW50cztcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZS5tYXBGUykge1xuICAgICAgICAgICAgICAgIG91dHN0YW5kaW5nKys7XG4gICAgICAgICAgICAgICAgZnMucmVhZEZpbGUocmVzcG9uc2UubWFwLCAoZXJyLCBjb250ZW50cykgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVyciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UubWFwID0gY29udGVudHM7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHB1c2hMb2dGbGFncyhmbGFncywgb3B0aW9ucywge30sIGlzVFRZLCBsb2dMZXZlbERlZmF1bHQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZXh0cmFjdEVycm9yTWVzc2FnZVY4KGUsIHN0cmVhbUluLCBkZXRhaWxzLCB2b2lkIDApO1xuICAgICAgICAgICAgc2VuZFJlcXVlc3QocmVmcywge2NvbW1hbmQ6IFwiZXJyb3JcIiwgZmxhZ3MsIGVycm9yfSwgKCkgPT4ge1xuICAgICAgICAgICAgICBlcnJvci5kZXRhaWwgPSBkZXRhaWxzLmxvYWQoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZmFpbHVyZUVycm9yV2l0aExvZyhcIlRyYW5zZm9ybSBmYWlsZWRcIiwgW2Vycm9yXSwgW10pLCBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIiAmJiBpbnB1dC5sZW5ndGggPiAxMDI0ICogMTAyNCkge1xuICAgICAgICAgIGxldCBuZXh0ID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAoKSA9PiBmcy53cml0ZUZpbGUoaW5wdXQsIG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0KG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdFN0YXNoKCkge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gIGxldCBuZXh0SUQgPSAwO1xuICByZXR1cm4ge1xuICAgIGxvYWQoaWQpIHtcbiAgICAgIHJldHVybiBtYXAuZ2V0KGlkKTtcbiAgICB9LFxuICAgIHN0b3JlKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMClcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgY29uc3QgaWQgPSBuZXh0SUQrKztcbiAgICAgIG1hcC5zZXQoaWQsIHZhbHVlKTtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBleHRyYWN0Q2FsbGVyVjgoZSwgc3RyZWFtSW4sIGlkZW50KSB7XG4gIHRyeSB7XG4gICAgbGV0IGxpbmVzID0gKGUuc3RhY2sgKyBcIlwiKS5zcGxpdChcIlxcblwiKTtcbiAgICBsaW5lcy5zcGxpY2UoMSwgMSk7XG4gICAgbGV0IGxvY2F0aW9uID0gcGFyc2VTdGFja0xpbmVzVjgoc3RyZWFtSW4sIGxpbmVzLCBpZGVudCk7XG4gICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4ge3RleHQ6IGUubWVzc2FnZSwgbG9jYXRpb259O1xuICAgIH1cbiAgfSBjYXRjaCAoZTIpIHtcbiAgfVxufVxuZnVuY3Rpb24gZXh0cmFjdEVycm9yTWVzc2FnZVY4KGUsIHN0cmVhbUluLCBzdGFzaCwgbm90ZSkge1xuICBsZXQgdGV4dCA9IFwiSW50ZXJuYWwgZXJyb3JcIjtcbiAgbGV0IGxvY2F0aW9uID0gbnVsbDtcbiAgdHJ5IHtcbiAgICB0ZXh0ID0gKGUgJiYgZS5tZXNzYWdlIHx8IGUpICsgXCJcIjtcbiAgfSBjYXRjaCAoZTIpIHtcbiAgfVxuICB0cnkge1xuICAgIGxvY2F0aW9uID0gcGFyc2VTdGFja0xpbmVzVjgoc3RyZWFtSW4sIChlLnN0YWNrICsgXCJcIikuc3BsaXQoXCJcXG5cIiksIFwiXCIpO1xuICB9IGNhdGNoIChlMikge1xuICB9XG4gIHJldHVybiB7dGV4dCwgbG9jYXRpb24sIG5vdGVzOiBub3RlID8gW25vdGVdIDogW10sIGRldGFpbDogc3Rhc2ggPyBzdGFzaC5zdG9yZShlKSA6IC0xfTtcbn1cbmZ1bmN0aW9uIHBhcnNlU3RhY2tMaW5lc1Y4KHN0cmVhbUluLCBsaW5lcywgaWRlbnQpIHtcbiAgbGV0IGF0ID0gXCIgICAgYXQgXCI7XG4gIGlmIChzdHJlYW1Jbi5yZWFkRmlsZVN5bmMgJiYgIWxpbmVzWzBdLnN0YXJ0c1dpdGgoYXQpICYmIGxpbmVzWzFdLnN0YXJ0c1dpdGgoYXQpKSB7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgIGlmICghbGluZS5zdGFydHNXaXRoKGF0KSlcbiAgICAgICAgY29udGludWU7XG4gICAgICBsaW5lID0gbGluZS5zbGljZShhdC5sZW5ndGgpO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gL14oPzpuZXcgfGFzeW5jICk/XFxTKyBcXCgoLiopXFwpJC8uZXhlYyhsaW5lKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgbGluZSA9IG1hdGNoWzFdO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoID0gL15ldmFsIGF0IFxcUysgXFwoKC4qKVxcKSg/OiwgXFxTKzpcXGQrOlxcZCspPyQvLmV4ZWMobGluZSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGxpbmUgPSBtYXRjaFsxXTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaCA9IC9eKFxcUyspOihcXGQrKTooXFxkKykkLy5leGVjKGxpbmUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBsZXQgY29udGVudHMgPSBzdHJlYW1Jbi5yZWFkRmlsZVN5bmMobWF0Y2hbMV0sIFwidXRmOFwiKTtcbiAgICAgICAgICBsZXQgbGluZVRleHQgPSBjb250ZW50cy5zcGxpdCgvXFxyXFxufFxccnxcXG58XFx1MjAyOHxcXHUyMDI5LylbK21hdGNoWzJdIC0gMV0gfHwgXCJcIjtcbiAgICAgICAgICBsZXQgY29sdW1uID0gK21hdGNoWzNdIC0gMTtcbiAgICAgICAgICBsZXQgbGVuZ3RoID0gbGluZVRleHQuc2xpY2UoY29sdW1uLCBjb2x1bW4gKyBpZGVudC5sZW5ndGgpID09PSBpZGVudCA/IGlkZW50Lmxlbmd0aCA6IDA7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGU6IG1hdGNoWzFdLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiBcImZpbGVcIixcbiAgICAgICAgICAgIGxpbmU6ICttYXRjaFsyXSxcbiAgICAgICAgICAgIGNvbHVtbjogZW5jb2RlVVRGOChsaW5lVGV4dC5zbGljZSgwLCBjb2x1bW4pKS5sZW5ndGgsXG4gICAgICAgICAgICBsZW5ndGg6IGVuY29kZVVURjgobGluZVRleHQuc2xpY2UoY29sdW1uLCBjb2x1bW4gKyBsZW5ndGgpKS5sZW5ndGgsXG4gICAgICAgICAgICBsaW5lVGV4dDogbGluZVRleHQgKyBcIlxcblwiICsgbGluZXMuc2xpY2UoMSkuam9pbihcIlxcblwiKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZmFpbHVyZUVycm9yV2l0aExvZyh0ZXh0LCBlcnJvcnMsIHdhcm5pbmdzKSB7XG4gIGxldCBsaW1pdCA9IDU7XG4gIGxldCBzdW1tYXJ5ID0gZXJyb3JzLmxlbmd0aCA8IDEgPyBcIlwiIDogYCB3aXRoICR7ZXJyb3JzLmxlbmd0aH0gZXJyb3Ike2Vycm9ycy5sZW5ndGggPCAyID8gXCJcIiA6IFwic1wifTpgICsgZXJyb3JzLnNsaWNlKDAsIGxpbWl0ICsgMSkubWFwKChlLCBpKSA9PiB7XG4gICAgaWYgKGkgPT09IGxpbWl0KVxuICAgICAgcmV0dXJuIFwiXFxuLi4uXCI7XG4gICAgaWYgKCFlLmxvY2F0aW9uKVxuICAgICAgcmV0dXJuIGBcbmVycm9yOiAke2UudGV4dH1gO1xuICAgIGxldCB7ZmlsZSwgbGluZSwgY29sdW1ufSA9IGUubG9jYXRpb247XG4gICAgcmV0dXJuIGBcbiR7ZmlsZX06JHtsaW5lfToke2NvbHVtbn06IGVycm9yOiAke2UudGV4dH1gO1xuICB9KS5qb2luKFwiXCIpO1xuICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoYCR7dGV4dH0ke3N1bW1hcnl9YCk7XG4gIGVycm9yLmVycm9ycyA9IGVycm9ycztcbiAgZXJyb3Iud2FybmluZ3MgPSB3YXJuaW5ncztcbiAgcmV0dXJuIGVycm9yO1xufVxuZnVuY3Rpb24gcmVwbGFjZURldGFpbHNJbk1lc3NhZ2VzKG1lc3NhZ2VzLCBzdGFzaCkge1xuICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICBtZXNzYWdlLmRldGFpbCA9IHN0YXNoLmxvYWQobWVzc2FnZS5kZXRhaWwpO1xuICB9XG4gIHJldHVybiBtZXNzYWdlcztcbn1cbmZ1bmN0aW9uIHNhbml0aXplTG9jYXRpb24obG9jYXRpb24sIHdoZXJlKSB7XG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuICBsZXQga2V5cyA9IHt9O1xuICBsZXQgZmlsZSA9IGdldEZsYWcobG9jYXRpb24sIGtleXMsIFwiZmlsZVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgbmFtZXNwYWNlID0gZ2V0RmxhZyhsb2NhdGlvbiwga2V5cywgXCJuYW1lc3BhY2VcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IGxpbmUgPSBnZXRGbGFnKGxvY2F0aW9uLCBrZXlzLCBcImxpbmVcIiwgbXVzdEJlSW50ZWdlcik7XG4gIGxldCBjb2x1bW4gPSBnZXRGbGFnKGxvY2F0aW9uLCBrZXlzLCBcImNvbHVtblwiLCBtdXN0QmVJbnRlZ2VyKTtcbiAgbGV0IGxlbmd0aCA9IGdldEZsYWcobG9jYXRpb24sIGtleXMsIFwibGVuZ3RoXCIsIG11c3RCZUludGVnZXIpO1xuICBsZXQgbGluZVRleHQgPSBnZXRGbGFnKGxvY2F0aW9uLCBrZXlzLCBcImxpbmVUZXh0XCIsIG11c3RCZVN0cmluZyk7XG4gIGNoZWNrRm9ySW52YWxpZEZsYWdzKGxvY2F0aW9uLCBrZXlzLCB3aGVyZSk7XG4gIHJldHVybiB7XG4gICAgZmlsZTogZmlsZSB8fCBcIlwiLFxuICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlIHx8IFwiXCIsXG4gICAgbGluZTogbGluZSB8fCAwLFxuICAgIGNvbHVtbjogY29sdW1uIHx8IDAsXG4gICAgbGVuZ3RoOiBsZW5ndGggfHwgMCxcbiAgICBsaW5lVGV4dDogbGluZVRleHQgfHwgXCJcIlxuICB9O1xufVxuZnVuY3Rpb24gc2FuaXRpemVNZXNzYWdlcyhtZXNzYWdlcywgcHJvcGVydHksIHN0YXNoKSB7XG4gIGxldCBtZXNzYWdlc0Nsb25lID0gW107XG4gIGxldCBpbmRleCA9IDA7XG4gIGZvciAoY29uc3QgbWVzc2FnZSBvZiBtZXNzYWdlcykge1xuICAgIGxldCBrZXlzID0ge307XG4gICAgbGV0IHRleHQgPSBnZXRGbGFnKG1lc3NhZ2UsIGtleXMsIFwidGV4dFwiLCBtdXN0QmVTdHJpbmcpO1xuICAgIGxldCBsb2NhdGlvbiA9IGdldEZsYWcobWVzc2FnZSwga2V5cywgXCJsb2NhdGlvblwiLCBtdXN0QmVPYmplY3RPck51bGwpO1xuICAgIGxldCBub3RlcyA9IGdldEZsYWcobWVzc2FnZSwga2V5cywgXCJub3Rlc1wiLCBtdXN0QmVBcnJheSk7XG4gICAgbGV0IGRldGFpbCA9IGdldEZsYWcobWVzc2FnZSwga2V5cywgXCJkZXRhaWxcIiwgY2FuQmVBbnl0aGluZyk7XG4gICAgbGV0IHdoZXJlID0gYGluIGVsZW1lbnQgJHtpbmRleH0gb2YgXCIke3Byb3BlcnR5fVwiYDtcbiAgICBjaGVja0ZvckludmFsaWRGbGFncyhtZXNzYWdlLCBrZXlzLCB3aGVyZSk7XG4gICAgbGV0IG5vdGVzQ2xvbmUgPSBbXTtcbiAgICBpZiAobm90ZXMpIHtcbiAgICAgIGZvciAoY29uc3Qgbm90ZSBvZiBub3Rlcykge1xuICAgICAgICBsZXQgbm90ZUtleXMgPSB7fTtcbiAgICAgICAgbGV0IG5vdGVUZXh0ID0gZ2V0RmxhZyhub3RlLCBub3RlS2V5cywgXCJ0ZXh0XCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgIGxldCBub3RlTG9jYXRpb24gPSBnZXRGbGFnKG5vdGUsIG5vdGVLZXlzLCBcImxvY2F0aW9uXCIsIG11c3RCZU9iamVjdE9yTnVsbCk7XG4gICAgICAgIGNoZWNrRm9ySW52YWxpZEZsYWdzKG5vdGUsIG5vdGVLZXlzLCB3aGVyZSk7XG4gICAgICAgIG5vdGVzQ2xvbmUucHVzaCh7XG4gICAgICAgICAgdGV4dDogbm90ZVRleHQgfHwgXCJcIixcbiAgICAgICAgICBsb2NhdGlvbjogc2FuaXRpemVMb2NhdGlvbihub3RlTG9jYXRpb24sIHdoZXJlKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVzc2FnZXNDbG9uZS5wdXNoKHtcbiAgICAgIHRleHQ6IHRleHQgfHwgXCJcIixcbiAgICAgIGxvY2F0aW9uOiBzYW5pdGl6ZUxvY2F0aW9uKGxvY2F0aW9uLCB3aGVyZSksXG4gICAgICBub3Rlczogbm90ZXNDbG9uZSxcbiAgICAgIGRldGFpbDogc3Rhc2guc3RvcmUoZGV0YWlsKVxuICAgIH0pO1xuICAgIGluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2VzQ2xvbmU7XG59XG5mdW5jdGlvbiBjb252ZXJ0T3V0cHV0RmlsZXMoe3BhdGgsIGNvbnRlbnRzfSkge1xuICBsZXQgdGV4dCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgcGF0aCxcbiAgICBjb250ZW50cyxcbiAgICBnZXQgdGV4dCgpIHtcbiAgICAgIGlmICh0ZXh0ID09PSBudWxsKVxuICAgICAgICB0ZXh0ID0gZGVjb2RlVVRGOChjb250ZW50cyk7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gIH07XG59XG5cbi8vIGxpYi9icm93c2VyLnRzXG52YXIgdmVyc2lvbiA9IFwiMC45LjBcIjtcbnZhciBidWlsZCA9IChvcHRpb25zKSA9PiBlbnN1cmVTZXJ2aWNlSXNSdW5uaW5nKCkuYnVpbGQob3B0aW9ucyk7XG52YXIgc2VydmUgPSAoKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcihgVGhlIFwic2VydmVcIiBBUEkgb25seSB3b3JrcyBpbiBub2RlYCk7XG59O1xudmFyIHRyYW5zZm9ybSA9IChpbnB1dCwgb3B0aW9ucykgPT4gZW5zdXJlU2VydmljZUlzUnVubmluZygpLnRyYW5zZm9ybShpbnB1dCwgb3B0aW9ucyk7XG52YXIgYnVpbGRTeW5jID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBcImJ1aWxkU3luY1wiIEFQSSBvbmx5IHdvcmtzIGluIG5vZGVgKTtcbn07XG52YXIgdHJhbnNmb3JtU3luYyA9ICgpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKGBUaGUgXCJ0cmFuc2Zvcm1TeW5jXCIgQVBJIG9ubHkgd29ya3MgaW4gbm9kZWApO1xufTtcbnZhciBpbml0aWFsaXplUHJvbWlzZTtcbnZhciBsb25nTGl2ZWRTZXJ2aWNlO1xudmFyIGVuc3VyZVNlcnZpY2VJc1J1bm5pbmcgPSAoKSA9PiB7XG4gIGlmIChsb25nTGl2ZWRTZXJ2aWNlKVxuICAgIHJldHVybiBsb25nTGl2ZWRTZXJ2aWNlO1xuICBpZiAoaW5pdGlhbGl6ZVByb21pc2UpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byB3YWl0IGZvciB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tIFwiaW5pdGlhbGl6ZVwiIHRvIGJlIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIHRoaXMnKTtcbiAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBjYWxsIFwiaW5pdGlhbGl6ZVwiIGJlZm9yZSBjYWxsaW5nIHRoaXMnKTtcbn07XG52YXIgaW5pdGlhbGl6ZSA9IChvcHRpb25zKSA9PiB7XG4gIG9wdGlvbnMgPSB2YWxpZGF0ZUluaXRpYWxpemVPcHRpb25zKG9wdGlvbnMgfHwge30pO1xuICBsZXQgd2FzbVVSTCA9IG9wdGlvbnMud2FzbVVSTDtcbiAgbGV0IHVzZVdvcmtlciA9IG9wdGlvbnMud29ya2VyICE9PSBmYWxzZTtcbiAgaWYgKCF3YXNtVVJMKVxuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIHRoZSBcIndhc21VUkxcIiBvcHRpb24nKTtcbiAgd2FzbVVSTCArPSBcIlwiO1xuICBpZiAoaW5pdGlhbGl6ZVByb21pc2UpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2FsbCBcImluaXRpYWxpemVcIiBtb3JlIHRoYW4gb25jZScpO1xuICBpbml0aWFsaXplUHJvbWlzZSA9IHN0YXJ0UnVubmluZ1NlcnZpY2Uod2FzbVVSTCwgdXNlV29ya2VyKTtcbiAgaW5pdGlhbGl6ZVByb21pc2UuY2F0Y2goKCkgPT4ge1xuICAgIGluaXRpYWxpemVQcm9taXNlID0gdm9pZCAwO1xuICB9KTtcbiAgcmV0dXJuIGluaXRpYWxpemVQcm9taXNlO1xufTtcbnZhciBzdGFydFJ1bm5pbmdTZXJ2aWNlID0gKHdhc21VUkwsIHVzZVdvcmtlcikgPT4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gIGxldCByZXMgPSB5aWVsZCBmZXRjaCh3YXNtVVJMKTtcbiAgaWYgKCFyZXMub2spXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZG93bmxvYWQgJHtKU09OLnN0cmluZ2lmeSh3YXNtVVJMKX1gKTtcbiAgbGV0IHdhc20gPSB5aWVsZCByZXMuYXJyYXlCdWZmZXIoKTtcbiAgbGV0IGNvZGUgPSBge2xldCBnbG9iYWw9e307Zm9yKGxldCBvPXNlbGY7bztvPU9iamVjdC5nZXRQcm90b3R5cGVPZihvKSlmb3IobGV0IGsgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobykpaWYoIShrIGluIGdsb2JhbCkpT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbCxrLHtnZXQ6KCk9PnNlbGZba119KTsvLyBDb3B5cmlnaHQgMjAxOCBUaGUgR28gQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlXG4vLyBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbigoKSA9PiB7XG5cdC8vIE1hcCBtdWx0aXBsZSBKYXZhU2NyaXB0IGVudmlyb25tZW50cyB0byBhIHNpbmdsZSBjb21tb24gQVBJLFxuXHQvLyBwcmVmZXJyaW5nIHdlYiBzdGFuZGFyZHMgb3ZlciBOb2RlLmpzIEFQSS5cblx0Ly9cblx0Ly8gRW52aXJvbm1lbnRzIGNvbnNpZGVyZWQ6XG5cdC8vIC0gQnJvd3NlcnNcblx0Ly8gLSBOb2RlLmpzXG5cdC8vIC0gRWxlY3Ryb25cblx0Ly8gLSBQYXJjZWxcblx0Ly8gLSBXZWJwYWNrXG5cblx0aWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHQvLyBnbG9iYWwgYWxyZWFkeSBleGlzdHNcblx0fSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0d2luZG93Lmdsb2JhbCA9IHdpbmRvdztcblx0fSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdHNlbGYuZ2xvYmFsID0gc2VsZjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZXhwb3J0IEdvIChuZWl0aGVyIGdsb2JhbCwgd2luZG93IG5vciBzZWxmIGlzIGRlZmluZWQpXCIpO1xuXHR9XG5cblx0aWYgKCFnbG9iYWwucmVxdWlyZSAmJiB0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdGdsb2JhbC5yZXF1aXJlID0gcmVxdWlyZTtcblx0fVxuXG5cdGlmICghZ2xvYmFsLmZzICYmIGdsb2JhbC5yZXF1aXJlKSB7XG5cdFx0Y29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5cdFx0aWYgKHR5cGVvZiBmcyA9PT0gXCJvYmplY3RcIiAmJiBmcyAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyhmcykubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRcbiAgICBnbG9iYWwuZnMgPSBPYmplY3QuYXNzaWduKHt9LCBmcywge1xuICAgICAgLy8gSGFjayBhcm91bmQgYSBVbmljb2RlIGJ1ZyBpbiBub2RlOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzI0NTUwXG4gICAgICB3cml0ZShmZCwgYnVmLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChvZmZzZXQgPT09IDAgJiYgbGVuZ3RoID09PSBidWYubGVuZ3RoICYmIHBvc2l0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgaWYgKGZkID09PSBwcm9jZXNzLnN0ZG91dC5mZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYnVmLCBlcnIgPT4gZXJyID8gY2FsbGJhY2soZXJyLCAwLCBudWxsKSA6IGNhbGxiYWNrKG51bGwsIGxlbmd0aCwgYnVmKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCAwLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZkID09PSBwcm9jZXNzLnN0ZGVyci5mZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUoYnVmLCBlcnIgPT4gZXJyID8gY2FsbGJhY2soZXJyLCAwLCBudWxsKSA6IGNhbGxiYWNrKG51bGwsIGxlbmd0aCwgYnVmKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCAwLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnMud3JpdGUoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjayk7XG4gICAgICB9LFxuICAgIH0pO1xuICBcblx0XHR9XG5cdH1cblxuXHRjb25zdCBlbm9zeXMgPSAoKSA9PiB7XG5cdFx0Y29uc3QgZXJyID0gbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpO1xuXHRcdGVyci5jb2RlID0gXCJFTk9TWVNcIjtcblx0XHRyZXR1cm4gZXJyO1xuXHR9O1xuXG5cdGlmICghZ2xvYmFsLmZzKSB7XG5cdFx0bGV0IG91dHB1dEJ1ZiA9IFwiXCI7XG5cdFx0Z2xvYmFsLmZzID0ge1xuXHRcdFx0Y29uc3RhbnRzOiB7IE9fV1JPTkxZOiAtMSwgT19SRFdSOiAtMSwgT19DUkVBVDogLTEsIE9fVFJVTkM6IC0xLCBPX0FQUEVORDogLTEsIE9fRVhDTDogLTEgfSwgLy8gdW51c2VkXG5cdFx0XHR3cml0ZVN5bmMoZmQsIGJ1Zikge1xuXHRcdFx0XHRvdXRwdXRCdWYgKz0gZGVjb2Rlci5kZWNvZGUoYnVmKTtcblx0XHRcdFx0Y29uc3QgbmwgPSBvdXRwdXRCdWYubGFzdEluZGV4T2YoXCJcXFxcblwiKTtcblx0XHRcdFx0aWYgKG5sICE9IC0xKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2cob3V0cHV0QnVmLnN1YnN0cigwLCBubCkpO1xuXHRcdFx0XHRcdG91dHB1dEJ1ZiA9IG91dHB1dEJ1Zi5zdWJzdHIobmwgKyAxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYnVmLmxlbmd0aDtcblx0XHRcdH0sXG5cdFx0XHR3cml0ZShmZCwgYnVmLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIGNhbGxiYWNrKSB7XG5cdFx0XHRcdGlmIChvZmZzZXQgIT09IDAgfHwgbGVuZ3RoICE9PSBidWYubGVuZ3RoIHx8IHBvc2l0aW9uICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soZW5vc3lzKCkpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBuID0gdGhpcy53cml0ZVN5bmMoZmQsIGJ1Zik7XG5cdFx0XHRcdGNhbGxiYWNrKG51bGwsIG4pO1xuXHRcdFx0fSxcblx0XHRcdGNobW9kKHBhdGgsIG1vZGUsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdGNob3duKHBhdGgsIHVpZCwgZ2lkLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRjbG9zZShmZCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0ZmNobW9kKGZkLCBtb2RlLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRmY2hvd24oZmQsIHVpZCwgZ2lkLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRmc3RhdChmZCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0ZnN5bmMoZmQsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKG51bGwpOyB9LFxuXHRcdFx0ZnRydW5jYXRlKGZkLCBsZW5ndGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdGxjaG93bihwYXRoLCB1aWQsIGdpZCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0bGluayhwYXRoLCBsaW5rLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRsc3RhdChwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRta2RpcihwYXRoLCBwZXJtLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRvcGVuKHBhdGgsIGZsYWdzLCBtb2RlLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRyZWFkKGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0cmVhZGRpcihwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRyZWFkbGluayhwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRyZW5hbWUoZnJvbSwgdG8sIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHJtZGlyKHBhdGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHN0YXQocGF0aCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0c3ltbGluayhwYXRoLCBsaW5rLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHR0cnVuY2F0ZShwYXRoLCBsZW5ndGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHVubGluayhwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHR1dGltZXMocGF0aCwgYXRpbWUsIG10aW1lLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0fTtcblx0fVxuXG5cdGlmICghZ2xvYmFsLnByb2Nlc3MpIHtcblx0XHRnbG9iYWwucHJvY2VzcyA9IHtcblx0XHRcdGdldHVpZCgpIHsgcmV0dXJuIC0xOyB9LFxuXHRcdFx0Z2V0Z2lkKCkgeyByZXR1cm4gLTE7IH0sXG5cdFx0XHRnZXRldWlkKCkgeyByZXR1cm4gLTE7IH0sXG5cdFx0XHRnZXRlZ2lkKCkgeyByZXR1cm4gLTE7IH0sXG5cdFx0XHRnZXRncm91cHMoKSB7IHRocm93IGVub3N5cygpOyB9LFxuXHRcdFx0cGlkOiAtMSxcblx0XHRcdHBwaWQ6IC0xLFxuXHRcdFx0dW1hc2soKSB7IHRocm93IGVub3N5cygpOyB9LFxuXHRcdFx0Y3dkKCkgeyB0aHJvdyBlbm9zeXMoKTsgfSxcblx0XHRcdGNoZGlyKCkgeyB0aHJvdyBlbm9zeXMoKTsgfSxcblx0XHR9XG5cdH1cblxuXHRpZiAoIWdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLnJlcXVpcmUpIHtcblx0XHRjb25zdCBub2RlQ3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcblx0XHRnbG9iYWwuY3J5cHRvID0ge1xuXHRcdFx0Z2V0UmFuZG9tVmFsdWVzKGIpIHtcblx0XHRcdFx0bm9kZUNyeXB0by5yYW5kb21GaWxsU3luYyhiKTtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXHRpZiAoIWdsb2JhbC5jcnlwdG8pIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJnbG9iYWwuY3J5cHRvIGlzIG5vdCBhdmFpbGFibGUsIHBvbHlmaWxsIHJlcXVpcmVkIChnZXRSYW5kb21WYWx1ZXMgb25seSlcIik7XG5cdH1cblxuXHRpZiAoIWdsb2JhbC5wZXJmb3JtYW5jZSkge1xuXHRcdGdsb2JhbC5wZXJmb3JtYW5jZSA9IHtcblx0XHRcdG5vdygpIHtcblx0XHRcdFx0Y29uc3QgW3NlYywgbnNlY10gPSBwcm9jZXNzLmhydGltZSgpO1xuXHRcdFx0XHRyZXR1cm4gc2VjICogMTAwMCArIG5zZWMgLyAxMDAwMDAwO1xuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG5cblx0aWYgKCFnbG9iYWwuVGV4dEVuY29kZXIgJiYgZ2xvYmFsLnJlcXVpcmUpIHtcblx0XHRnbG9iYWwuVGV4dEVuY29kZXIgPSByZXF1aXJlKFwidXRpbFwiKS5UZXh0RW5jb2Rlcjtcblx0fVxuXHRpZiAoIWdsb2JhbC5UZXh0RW5jb2Rlcikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImdsb2JhbC5UZXh0RW5jb2RlciBpcyBub3QgYXZhaWxhYmxlLCBwb2x5ZmlsbCByZXF1aXJlZFwiKTtcblx0fVxuXG5cdGlmICghZ2xvYmFsLlRleHREZWNvZGVyICYmIGdsb2JhbC5yZXF1aXJlKSB7XG5cdFx0Z2xvYmFsLlRleHREZWNvZGVyID0gcmVxdWlyZShcInV0aWxcIikuVGV4dERlY29kZXI7XG5cdH1cblx0aWYgKCFnbG9iYWwuVGV4dERlY29kZXIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJnbG9iYWwuVGV4dERlY29kZXIgaXMgbm90IGF2YWlsYWJsZSwgcG9seWZpbGwgcmVxdWlyZWRcIik7XG5cdH1cblxuXHQvLyBFbmQgb2YgcG9seWZpbGxzIGZvciBjb21tb24gQVBJLlxuXG5cdGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoXCJ1dGYtOFwiKTtcblx0Y29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpO1xuXG5cdGdsb2JhbC5HbyA9IGNsYXNzIHtcblx0XHRjb25zdHJ1Y3RvcigpIHtcblx0XHRcdHRoaXMuYXJndiA9IFtcImpzXCJdO1xuXHRcdFx0dGhpcy5lbnYgPSB7fTtcblx0XHRcdHRoaXMuZXhpdCA9IChjb2RlKSA9PiB7XG5cdFx0XHRcdGlmIChjb2RlICE9PSAwKSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiZXhpdCBjb2RlOlwiLCBjb2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHRoaXMuX2V4aXRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRcdFx0dGhpcy5fcmVzb2x2ZUV4aXRQcm9taXNlID0gcmVzb2x2ZTtcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5fcGVuZGluZ0V2ZW50ID0gbnVsbDtcblx0XHRcdHRoaXMuX3NjaGVkdWxlZFRpbWVvdXRzID0gbmV3IE1hcCgpO1xuXHRcdFx0dGhpcy5fbmV4dENhbGxiYWNrVGltZW91dElEID0gMTtcblxuXHRcdFx0Y29uc3Qgc2V0SW50NjQgPSAoYWRkciwgdikgPT4ge1xuXHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50MzIoYWRkciArIDAsIHYsIHRydWUpO1xuXHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50MzIoYWRkciArIDQsIE1hdGguZmxvb3IodiAvIDQyOTQ5NjcyOTYpLCB0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZ2V0SW50NjQgPSAoYWRkcikgPT4ge1xuXHRcdFx0XHRjb25zdCBsb3cgPSB0aGlzLm1lbS5nZXRVaW50MzIoYWRkciArIDAsIHRydWUpO1xuXHRcdFx0XHRjb25zdCBoaWdoID0gdGhpcy5tZW0uZ2V0SW50MzIoYWRkciArIDQsIHRydWUpO1xuXHRcdFx0XHRyZXR1cm4gbG93ICsgaGlnaCAqIDQyOTQ5NjcyOTY7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvYWRWYWx1ZSA9IChhZGRyKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGYgPSB0aGlzLm1lbS5nZXRGbG9hdDY0KGFkZHIsIHRydWUpO1xuXHRcdFx0XHRpZiAoZiA9PT0gMCkge1xuXHRcdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFpc05hTihmKSkge1xuXHRcdFx0XHRcdHJldHVybiBmO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgaWQgPSB0aGlzLm1lbS5nZXRVaW50MzIoYWRkciwgdHJ1ZSk7XG5cdFx0XHRcdHJldHVybiB0aGlzLl92YWx1ZXNbaWRdO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzdG9yZVZhbHVlID0gKGFkZHIsIHYpID0+IHtcblx0XHRcdFx0Y29uc3QgbmFuSGVhZCA9IDB4N0ZGODAwMDA7XG5cblx0XHRcdFx0aWYgKHR5cGVvZiB2ID09PSBcIm51bWJlclwiICYmIHYgIT09IDApIHtcblx0XHRcdFx0XHRpZiAoaXNOYU4odikpIHtcblx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihhZGRyICsgNCwgbmFuSGVhZCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50MzIoYWRkciwgMCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMubWVtLnNldEZsb2F0NjQoYWRkciwgdiwgdHJ1ZSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHRoaXMubWVtLnNldEZsb2F0NjQoYWRkciwgMCwgdHJ1ZSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IGlkID0gdGhpcy5faWRzLmdldCh2KTtcblx0XHRcdFx0aWYgKGlkID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRpZCA9IHRoaXMuX2lkUG9vbC5wb3AoKTtcblx0XHRcdFx0XHRpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0aWQgPSB0aGlzLl92YWx1ZXMubGVuZ3RoO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl92YWx1ZXNbaWRdID0gdjtcblx0XHRcdFx0XHR0aGlzLl9nb1JlZkNvdW50c1tpZF0gPSAwO1xuXHRcdFx0XHRcdHRoaXMuX2lkcy5zZXQodiwgaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2dvUmVmQ291bnRzW2lkXSsrO1xuXHRcdFx0XHRsZXQgdHlwZUZsYWcgPSAwO1xuXHRcdFx0XHRzd2l0Y2ggKHR5cGVvZiB2KSB7XG5cdFx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdFx0aWYgKHYgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0dHlwZUZsYWcgPSAxO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdFx0dHlwZUZsYWcgPSAyO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInN5bWJvbFwiOlxuXHRcdFx0XHRcdFx0dHlwZUZsYWcgPSAzO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0XHR0eXBlRmxhZyA9IDQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50MzIoYWRkciArIDQsIG5hbkhlYWQgfCB0eXBlRmxhZywgdHJ1ZSk7XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihhZGRyLCBpZCwgdHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvYWRTbGljZSA9IChhZGRyKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGFycmF5ID0gZ2V0SW50NjQoYWRkciArIDApO1xuXHRcdFx0XHRjb25zdCBsZW4gPSBnZXRJbnQ2NChhZGRyICsgOCk7XG5cdFx0XHRcdHJldHVybiBuZXcgVWludDhBcnJheSh0aGlzLl9pbnN0LmV4cG9ydHMubWVtLmJ1ZmZlciwgYXJyYXksIGxlbik7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvYWRTbGljZU9mVmFsdWVzID0gKGFkZHIpID0+IHtcblx0XHRcdFx0Y29uc3QgYXJyYXkgPSBnZXRJbnQ2NChhZGRyICsgMCk7XG5cdFx0XHRcdGNvbnN0IGxlbiA9IGdldEludDY0KGFkZHIgKyA4KTtcblx0XHRcdFx0Y29uc3QgYSA9IG5ldyBBcnJheShsZW4pO1xuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0YVtpXSA9IGxvYWRWYWx1ZShhcnJheSArIGkgKiA4KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbG9hZFN0cmluZyA9IChhZGRyKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHNhZGRyID0gZ2V0SW50NjQoYWRkciArIDApO1xuXHRcdFx0XHRjb25zdCBsZW4gPSBnZXRJbnQ2NChhZGRyICsgOCk7XG5cdFx0XHRcdHJldHVybiBkZWNvZGVyLmRlY29kZShuZXcgRGF0YVZpZXcodGhpcy5faW5zdC5leHBvcnRzLm1lbS5idWZmZXIsIHNhZGRyLCBsZW4pKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdGltZU9yaWdpbiA9IERhdGUubm93KCkgLSBwZXJmb3JtYW5jZS5ub3coKTtcblx0XHRcdHRoaXMuaW1wb3J0T2JqZWN0ID0ge1xuXHRcdFx0XHRnbzoge1xuXHRcdFx0XHRcdC8vIEdvJ3MgU1AgZG9lcyBub3QgY2hhbmdlIGFzIGxvbmcgYXMgbm8gR28gY29kZSBpcyBydW5uaW5nLiBTb21lIG9wZXJhdGlvbnMgKGUuZy4gY2FsbHMsIGdldHRlcnMgYW5kIHNldHRlcnMpXG5cdFx0XHRcdFx0Ly8gbWF5IHN5bmNocm9ub3VzbHkgdHJpZ2dlciBhIEdvIGV2ZW50IGhhbmRsZXIuIFRoaXMgbWFrZXMgR28gY29kZSBnZXQgZXhlY3V0ZWQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgaW1wb3J0ZWRcblx0XHRcdFx0XHQvLyBmdW5jdGlvbi4gQSBnb3JvdXRpbmUgY2FuIHN3aXRjaCB0byBhIG5ldyBzdGFjayBpZiB0aGUgY3VycmVudCBzdGFjayBpcyB0b28gc21hbGwgKHNlZSBtb3Jlc3RhY2sgZnVuY3Rpb24pLlxuXHRcdFx0XHRcdC8vIFRoaXMgY2hhbmdlcyB0aGUgU1AsIHRodXMgd2UgaGF2ZSB0byB1cGRhdGUgdGhlIFNQIHVzZWQgYnkgdGhlIGltcG9ydGVkIGZ1bmN0aW9uLlxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB3YXNtRXhpdChjb2RlIGludDMyKVxuXHRcdFx0XHRcdFwicnVudGltZS53YXNtRXhpdFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGNvZGUgPSB0aGlzLm1lbS5nZXRJbnQzMihzcCArIDgsIHRydWUpO1xuXHRcdFx0XHRcdFx0dGhpcy5leGl0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2luc3Q7XG5cdFx0XHRcdFx0XHRkZWxldGUgdGhpcy5fdmFsdWVzO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2dvUmVmQ291bnRzO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2lkcztcblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLl9pZFBvb2w7XG5cdFx0XHRcdFx0XHR0aGlzLmV4aXQoY29kZSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgd2FzbVdyaXRlKGZkIHVpbnRwdHIsIHAgdW5zYWZlLlBvaW50ZXIsIG4gaW50MzIpXG5cdFx0XHRcdFx0XCJydW50aW1lLndhc21Xcml0ZVwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGZkID0gZ2V0SW50NjQoc3AgKyA4KTtcblx0XHRcdFx0XHRcdGNvbnN0IHAgPSBnZXRJbnQ2NChzcCArIDE2KTtcblx0XHRcdFx0XHRcdGNvbnN0IG4gPSB0aGlzLm1lbS5nZXRJbnQzMihzcCArIDI0LCB0cnVlKTtcblx0XHRcdFx0XHRcdGZzLndyaXRlU3luYyhmZCwgbmV3IFVpbnQ4QXJyYXkodGhpcy5faW5zdC5leHBvcnRzLm1lbS5idWZmZXIsIHAsIG4pKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyByZXNldE1lbW9yeURhdGFWaWV3KClcblx0XHRcdFx0XHRcInJ1bnRpbWUucmVzZXRNZW1vcnlEYXRhVmlld1wiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHRoaXMubWVtID0gbmV3IERhdGFWaWV3KHRoaXMuX2luc3QuZXhwb3J0cy5tZW0uYnVmZmVyKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyBuYW5vdGltZTEoKSBpbnQ2NFxuXHRcdFx0XHRcdFwicnVudGltZS5uYW5vdGltZTFcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHRzZXRJbnQ2NChzcCArIDgsICh0aW1lT3JpZ2luICsgcGVyZm9ybWFuY2Uubm93KCkpICogMTAwMDAwMCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgd2FsbHRpbWUxKCkgKHNlYyBpbnQ2NCwgbnNlYyBpbnQzMilcblx0XHRcdFx0XHRcInJ1bnRpbWUud2FsbHRpbWUxXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgbXNlYyA9IChuZXcgRGF0ZSkuZ2V0VGltZSgpO1xuXHRcdFx0XHRcdFx0c2V0SW50NjQoc3AgKyA4LCBtc2VjIC8gMTAwMCk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRJbnQzMihzcCArIDE2LCAobXNlYyAlIDEwMDApICogMTAwMDAwMCwgdHJ1ZSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgc2NoZWR1bGVUaW1lb3V0RXZlbnQoZGVsYXkgaW50NjQpIGludDMyXG5cdFx0XHRcdFx0XCJydW50aW1lLnNjaGVkdWxlVGltZW91dEV2ZW50XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgaWQgPSB0aGlzLl9uZXh0Q2FsbGJhY2tUaW1lb3V0SUQ7XG5cdFx0XHRcdFx0XHR0aGlzLl9uZXh0Q2FsbGJhY2tUaW1lb3V0SUQrKztcblx0XHRcdFx0XHRcdHRoaXMuX3NjaGVkdWxlZFRpbWVvdXRzLnNldChpZCwgc2V0VGltZW91dChcblx0XHRcdFx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3Jlc3VtZSgpO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICh0aGlzLl9zY2hlZHVsZWRUaW1lb3V0cy5oYXMoaWQpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBmb3Igc29tZSByZWFzb24gR28gZmFpbGVkIHRvIHJlZ2lzdGVyIHRoZSB0aW1lb3V0IGV2ZW50LCBsb2cgYW5kIHRyeSBhZ2FpblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKHRlbXBvcmFyeSB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL2lzc3Vlcy8yODk3NSlcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcInNjaGVkdWxlVGltZW91dEV2ZW50OiBtaXNzZWQgdGltZW91dCBldmVudFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3Jlc3VtZSgpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0Z2V0SW50NjQoc3AgKyA4KSArIDEsIC8vIHNldFRpbWVvdXQgaGFzIGJlZW4gc2VlbiB0byBmaXJlIHVwIHRvIDEgbWlsbGlzZWNvbmQgZWFybHlcblx0XHRcdFx0XHRcdCkpO1xuXHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0SW50MzIoc3AgKyAxNiwgaWQsIHRydWUpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGNsZWFyVGltZW91dEV2ZW50KGlkIGludDMyKVxuXHRcdFx0XHRcdFwicnVudGltZS5jbGVhclRpbWVvdXRFdmVudFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGlkID0gdGhpcy5tZW0uZ2V0SW50MzIoc3AgKyA4LCB0cnVlKTtcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9zY2hlZHVsZWRUaW1lb3V0cy5nZXQoaWQpKTtcblx0XHRcdFx0XHRcdHRoaXMuX3NjaGVkdWxlZFRpbWVvdXRzLmRlbGV0ZShpZCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgZ2V0UmFuZG9tRGF0YShyIFtdYnl0ZSlcblx0XHRcdFx0XHRcInJ1bnRpbWUuZ2V0UmFuZG9tRGF0YVwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobG9hZFNsaWNlKHNwICsgOCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGZpbmFsaXplUmVmKHYgcmVmKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy5maW5hbGl6ZVJlZlwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGlkID0gdGhpcy5tZW0uZ2V0VWludDMyKHNwICsgOCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR0aGlzLl9nb1JlZkNvdW50c1tpZF0tLTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9nb1JlZkNvdW50c1tpZF0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdiA9IHRoaXMuX3ZhbHVlc1tpZF07XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3ZhbHVlc1tpZF0gPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9pZHMuZGVsZXRlKHYpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9pZFBvb2wucHVzaChpZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgc3RyaW5nVmFsKHZhbHVlIHN0cmluZykgcmVmXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnN0cmluZ1ZhbFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyAyNCwgbG9hZFN0cmluZyhzcCArIDgpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZUdldCh2IHJlZiwgcCBzdHJpbmcpIHJlZlxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUdldFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZ2V0KGxvYWRWYWx1ZShzcCArIDgpLCBsb2FkU3RyaW5nKHNwICsgMTYpKTtcblx0XHRcdFx0XHRcdHNwID0gdGhpcy5faW5zdC5leHBvcnRzLmdldHNwKCkgPj4+IDA7IC8vIHNlZSBjb21tZW50IGFib3ZlXG5cdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgMzIsIHJlc3VsdCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVTZXQodiByZWYsIHAgc3RyaW5nLCB4IHJlZilcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVTZXRcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHRSZWZsZWN0LnNldChsb2FkVmFsdWUoc3AgKyA4KSwgbG9hZFN0cmluZyhzcCArIDE2KSwgbG9hZFZhbHVlKHNwICsgMzIpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZURlbGV0ZSh2IHJlZiwgcCBzdHJpbmcpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlRGVsZXRlXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0UmVmbGVjdC5kZWxldGVQcm9wZXJ0eShsb2FkVmFsdWUoc3AgKyA4KSwgbG9hZFN0cmluZyhzcCArIDE2KSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVJbmRleCh2IHJlZiwgaSBpbnQpIHJlZlxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUluZGV4XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0c3RvcmVWYWx1ZShzcCArIDI0LCBSZWZsZWN0LmdldChsb2FkVmFsdWUoc3AgKyA4KSwgZ2V0SW50NjQoc3AgKyAxNikpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gdmFsdWVTZXRJbmRleCh2IHJlZiwgaSBpbnQsIHggcmVmKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZVNldEluZGV4XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0UmVmbGVjdC5zZXQobG9hZFZhbHVlKHNwICsgOCksIGdldEludDY0KHNwICsgMTYpLCBsb2FkVmFsdWUoc3AgKyAyNCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIHZhbHVlQ2FsbCh2IHJlZiwgbSBzdHJpbmcsIGFyZ3MgW11yZWYpIChyZWYsIGJvb2wpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlQ2FsbFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHYgPSBsb2FkVmFsdWUoc3AgKyA4KTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbSA9IFJlZmxlY3QuZ2V0KHYsIGxvYWRTdHJpbmcoc3AgKyAxNikpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBhcmdzID0gbG9hZFNsaWNlT2ZWYWx1ZXMoc3AgKyAzMik7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuYXBwbHkobSwgdiwgYXJncyk7XG5cdFx0XHRcdFx0XHRcdHNwID0gdGhpcy5faW5zdC5leHBvcnRzLmdldHNwKCkgPj4+IDA7IC8vIHNlZSBjb21tZW50IGFib3ZlXG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA1NiwgcmVzdWx0KTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA2NCwgMSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0c3RvcmVWYWx1ZShzcCArIDU2LCBlcnIpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDY0LCAwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZUludm9rZSh2IHJlZiwgYXJncyBbXXJlZikgKHJlZiwgYm9vbClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVJbnZva2VcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB2ID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGFyZ3MgPSBsb2FkU2xpY2VPZlZhbHVlcyhzcCArIDE2KTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gUmVmbGVjdC5hcHBseSh2LCB1bmRlZmluZWQsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRzcCA9IHRoaXMuX2luc3QuZXhwb3J0cy5nZXRzcCgpID4+PiAwOyAvLyBzZWUgY29tbWVudCBhYm92ZVxuXHRcdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgNDAsIHJlc3VsdCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQ4KHNwICsgNDgsIDEpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA0MCwgZXJyKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVOZXcodiByZWYsIGFyZ3MgW11yZWYpIChyZWYsIGJvb2wpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlTmV3XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdiA9IGxvYWRWYWx1ZShzcCArIDgpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBhcmdzID0gbG9hZFNsaWNlT2ZWYWx1ZXMoc3AgKyAxNik7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KHYsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRzcCA9IHRoaXMuX2luc3QuZXhwb3J0cy5nZXRzcCgpID4+PiAwOyAvLyBzZWUgY29tbWVudCBhYm92ZVxuXHRcdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgNDAsIHJlc3VsdCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQ4KHNwICsgNDgsIDEpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA0MCwgZXJyKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVMZW5ndGgodiByZWYpIGludFxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUxlbmd0aFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHNldEludDY0KHNwICsgMTYsIHBhcnNlSW50KGxvYWRWYWx1ZShzcCArIDgpLmxlbmd0aCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyB2YWx1ZVByZXBhcmVTdHJpbmcodiByZWYpIChyZWYsIGludClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVQcmVwYXJlU3RyaW5nXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyID0gZW5jb2Rlci5lbmNvZGUoU3RyaW5nKGxvYWRWYWx1ZShzcCArIDgpKSk7XG5cdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgMTYsIHN0cik7XG5cdFx0XHRcdFx0XHRzZXRJbnQ2NChzcCArIDI0LCBzdHIubGVuZ3RoKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gdmFsdWVMb2FkU3RyaW5nKHYgcmVmLCBiIFtdYnl0ZSlcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVMb2FkU3RyaW5nXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRsb2FkU2xpY2Uoc3AgKyAxNikuc2V0KHN0cik7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVJbnN0YW5jZU9mKHYgcmVmLCB0IHJlZikgYm9vbFxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUluc3RhbmNlT2ZcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDI0LCAobG9hZFZhbHVlKHNwICsgOCkgaW5zdGFuY2VvZiBsb2FkVmFsdWUoc3AgKyAxNikpID8gMSA6IDApO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGNvcHlCeXRlc1RvR28oZHN0IFtdYnl0ZSwgc3JjIHJlZikgKGludCwgYm9vbClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMuY29weUJ5dGVzVG9Hb1wiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGRzdCA9IGxvYWRTbGljZShzcCArIDgpO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3JjID0gbG9hZFZhbHVlKHNwICsgMzIpO1xuXHRcdFx0XHRcdFx0aWYgKCEoc3JjIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBzcmMgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbnN0IHRvQ29weSA9IHNyYy5zdWJhcnJheSgwLCBkc3QubGVuZ3RoKTtcblx0XHRcdFx0XHRcdGRzdC5zZXQodG9Db3B5KTtcblx0XHRcdFx0XHRcdHNldEludDY0KHNwICsgNDAsIHRvQ29weS5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgY29weUJ5dGVzVG9KUyhkc3QgcmVmLCBzcmMgW11ieXRlKSAoaW50LCBib29sKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy5jb3B5Qnl0ZXNUb0pTXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgZHN0ID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRjb25zdCBzcmMgPSBsb2FkU2xpY2Uoc3AgKyAxNik7XG5cdFx0XHRcdFx0XHRpZiAoIShkc3QgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGRzdCBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDQ4LCAwKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y29uc3QgdG9Db3B5ID0gc3JjLnN1YmFycmF5KDAsIGRzdC5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0ZHN0LnNldCh0b0NvcHkpO1xuXHRcdFx0XHRcdFx0c2V0SW50NjQoc3AgKyA0MCwgdG9Db3B5Lmxlbmd0aCk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDQ4LCAxKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XCJkZWJ1Z1wiOiAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHZhbHVlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGFzeW5jIHJ1bihpbnN0YW5jZSkge1xuXHRcdFx0aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5JbnN0YW5jZSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiR28ucnVuOiBXZWJBc3NlbWJseS5JbnN0YW5jZSBleHBlY3RlZFwiKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2luc3QgPSBpbnN0YW5jZTtcblx0XHRcdHRoaXMubWVtID0gbmV3IERhdGFWaWV3KHRoaXMuX2luc3QuZXhwb3J0cy5tZW0uYnVmZmVyKTtcblx0XHRcdHRoaXMuX3ZhbHVlcyA9IFsgLy8gSlMgdmFsdWVzIHRoYXQgR28gY3VycmVudGx5IGhhcyByZWZlcmVuY2VzIHRvLCBpbmRleGVkIGJ5IHJlZmVyZW5jZSBpZFxuXHRcdFx0XHROYU4sXG5cdFx0XHRcdDAsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdHRydWUsXG5cdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRnbG9iYWwsXG5cdFx0XHRcdHRoaXMsXG5cdFx0XHRdO1xuXHRcdFx0dGhpcy5fZ29SZWZDb3VudHMgPSBuZXcgQXJyYXkodGhpcy5fdmFsdWVzLmxlbmd0aCkuZmlsbChJbmZpbml0eSk7IC8vIG51bWJlciBvZiByZWZlcmVuY2VzIHRoYXQgR28gaGFzIHRvIGEgSlMgdmFsdWUsIGluZGV4ZWQgYnkgcmVmZXJlbmNlIGlkXG5cdFx0XHR0aGlzLl9pZHMgPSBuZXcgTWFwKFsgLy8gbWFwcGluZyBmcm9tIEpTIHZhbHVlcyB0byByZWZlcmVuY2UgaWRzXG5cdFx0XHRcdFswLCAxXSxcblx0XHRcdFx0W251bGwsIDJdLFxuXHRcdFx0XHRbdHJ1ZSwgM10sXG5cdFx0XHRcdFtmYWxzZSwgNF0sXG5cdFx0XHRcdFtnbG9iYWwsIDVdLFxuXHRcdFx0XHRbdGhpcywgNl0sXG5cdFx0XHRdKTtcblx0XHRcdHRoaXMuX2lkUG9vbCA9IFtdOyAgIC8vIHVudXNlZCBpZHMgdGhhdCBoYXZlIGJlZW4gZ2FyYmFnZSBjb2xsZWN0ZWRcblx0XHRcdHRoaXMuZXhpdGVkID0gZmFsc2U7IC8vIHdoZXRoZXIgdGhlIEdvIHByb2dyYW0gaGFzIGV4aXRlZFxuXG5cdFx0XHQvLyBQYXNzIGNvbW1hbmQgbGluZSBhcmd1bWVudHMgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBXZWJBc3NlbWJseSBieSB3cml0aW5nIHRoZW0gdG8gdGhlIGxpbmVhciBtZW1vcnkuXG5cdFx0XHRsZXQgb2Zmc2V0ID0gNDA5NjtcblxuXHRcdFx0Y29uc3Qgc3RyUHRyID0gKHN0cikgPT4ge1xuXHRcdFx0XHRjb25zdCBwdHIgPSBvZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IGJ5dGVzID0gZW5jb2Rlci5lbmNvZGUoc3RyICsgXCJcXFxcMFwiKTtcblx0XHRcdFx0bmV3IFVpbnQ4QXJyYXkodGhpcy5tZW0uYnVmZmVyLCBvZmZzZXQsIGJ5dGVzLmxlbmd0aCkuc2V0KGJ5dGVzKTtcblx0XHRcdFx0b2Zmc2V0ICs9IGJ5dGVzLmxlbmd0aDtcblx0XHRcdFx0aWYgKG9mZnNldCAlIDggIT09IDApIHtcblx0XHRcdFx0XHRvZmZzZXQgKz0gOCAtIChvZmZzZXQgJSA4KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHRyO1xuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3QgYXJnYyA9IHRoaXMuYXJndi5sZW5ndGg7XG5cblx0XHRcdGNvbnN0IGFyZ3ZQdHJzID0gW107XG5cdFx0XHR0aGlzLmFyZ3YuZm9yRWFjaCgoYXJnKSA9PiB7XG5cdFx0XHRcdGFyZ3ZQdHJzLnB1c2goc3RyUHRyKGFyZykpO1xuXHRcdFx0fSk7XG5cdFx0XHRhcmd2UHRycy5wdXNoKDApO1xuXG5cdFx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5lbnYpLnNvcnQoKTtcblx0XHRcdGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHRcdGFyZ3ZQdHJzLnB1c2goc3RyUHRyKFxcYFxcJHtrZXl9PVxcJHt0aGlzLmVudltrZXldfVxcYCkpO1xuXHRcdFx0fSk7XG5cdFx0XHRhcmd2UHRycy5wdXNoKDApO1xuXG5cdFx0XHRjb25zdCBhcmd2ID0gb2Zmc2V0O1xuXHRcdFx0YXJndlB0cnMuZm9yRWFjaCgocHRyKSA9PiB7XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihvZmZzZXQsIHB0ciwgdHJ1ZSk7XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihvZmZzZXQgKyA0LCAwLCB0cnVlKTtcblx0XHRcdFx0b2Zmc2V0ICs9IDg7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5faW5zdC5leHBvcnRzLnJ1bihhcmdjLCBhcmd2KTtcblx0XHRcdGlmICh0aGlzLmV4aXRlZCkge1xuXHRcdFx0XHR0aGlzLl9yZXNvbHZlRXhpdFByb21pc2UoKTtcblx0XHRcdH1cblx0XHRcdGF3YWl0IHRoaXMuX2V4aXRQcm9taXNlO1xuXHRcdH1cblxuXHRcdF9yZXN1bWUoKSB7XG5cdFx0XHRpZiAodGhpcy5leGl0ZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiR28gcHJvZ3JhbSBoYXMgYWxyZWFkeSBleGl0ZWRcIik7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9pbnN0LmV4cG9ydHMucmVzdW1lKCk7XG5cdFx0XHRpZiAodGhpcy5leGl0ZWQpIHtcblx0XHRcdFx0dGhpcy5fcmVzb2x2ZUV4aXRQcm9taXNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0X21ha2VGdW5jV3JhcHBlcihpZCkge1xuXHRcdFx0Y29uc3QgZ28gPSB0aGlzO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0Y29uc3QgZXZlbnQgPSB7IGlkOiBpZCwgdGhpczogdGhpcywgYXJnczogYXJndW1lbnRzIH07XG5cdFx0XHRcdGdvLl9wZW5kaW5nRXZlbnQgPSBldmVudDtcblx0XHRcdFx0Z28uX3Jlc3VtZSgpO1xuXHRcdFx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHRpZiAoXG5cdFx0dHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdGdsb2JhbC5yZXF1aXJlICYmXG5cdFx0Z2xvYmFsLnJlcXVpcmUubWFpbiA9PT0gbW9kdWxlICYmXG5cdFx0Z2xvYmFsLnByb2Nlc3MgJiZcblx0XHRnbG9iYWwucHJvY2Vzcy52ZXJzaW9ucyAmJlxuXHRcdCFnbG9iYWwucHJvY2Vzcy52ZXJzaW9ucy5lbGVjdHJvblxuXHQpIHtcblx0XHRpZiAocHJvY2Vzcy5hcmd2Lmxlbmd0aCA8IDMpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJ1c2FnZTogZ29fanNfd2FzbV9leGVjIFt3YXNtIGJpbmFyeV0gW2FyZ3VtZW50c11cIik7XG5cdFx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZ28gPSBuZXcgR28oKTtcblx0XHRnby5hcmd2ID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXHRcdGdvLmVudiA9IE9iamVjdC5hc3NpZ24oeyBUTVBESVI6IHJlcXVpcmUoXCJvc1wiKS50bXBkaXIoKSB9LCBwcm9jZXNzLmVudik7XG5cdFx0Z28uZXhpdCA9IHByb2Nlc3MuZXhpdDtcblx0XHRXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShmcy5yZWFkRmlsZVN5bmMocHJvY2Vzcy5hcmd2WzJdKSwgZ28uaW1wb3J0T2JqZWN0KS50aGVuKChyZXN1bHQpID0+IHtcblx0XHRcdHByb2Nlc3Mub24oXCJleGl0XCIsIChjb2RlKSA9PiB7IC8vIE5vZGUuanMgZXhpdHMgaWYgbm8gZXZlbnQgaGFuZGxlciBpcyBwZW5kaW5nXG5cdFx0XHRcdGlmIChjb2RlID09PSAwICYmICFnby5leGl0ZWQpIHtcblx0XHRcdFx0XHQvLyBkZWFkbG9jaywgbWFrZSBHbyBwcmludCBlcnJvciBhbmQgc3RhY2sgdHJhY2VzXG5cdFx0XHRcdFx0Z28uX3BlbmRpbmdFdmVudCA9IHsgaWQ6IDAgfTtcblx0XHRcdFx0XHRnby5fcmVzdW1lKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGdvLnJ1bihyZXN1bHQuaW5zdGFuY2UpO1xuXHRcdH0pLmNhdGNoKChlcnIpID0+IHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRcdHByb2Nlc3MuZXhpdCgxKTtcblx0XHR9KTtcblx0fVxufSkoKTtcbm9ubWVzc2FnZSA9ICh7ZGF0YTogd2FzbX0pID0+IHtcbiAgbGV0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgbGV0IGZzID0gZ2xvYmFsLmZzO1xuICBsZXQgc3RkZXJyID0gXCJcIjtcbiAgZnMud3JpdGVTeW5jID0gKGZkLCBidWZmZXIpID0+IHtcbiAgICBpZiAoZmQgPT09IDEpIHtcbiAgICAgIHBvc3RNZXNzYWdlKGJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmIChmZCA9PT0gMikge1xuICAgICAgc3RkZXJyICs9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlcik7XG4gICAgICBsZXQgcGFydHMgPSBzdGRlcnIuc3BsaXQoXCJcXFxcblwiKTtcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKVxuICAgICAgICBjb25zb2xlLmxvZyhwYXJ0cy5zbGljZSgwLCAtMSkuam9pbihcIlxcXFxuXCIpKTtcbiAgICAgIHN0ZGVyciA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgd3JpdGVcIik7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXIubGVuZ3RoO1xuICB9O1xuICBsZXQgc3RkaW4gPSBbXTtcbiAgbGV0IHJlc3VtZVN0ZGluO1xuICBsZXQgc3RkaW5Qb3MgPSAwO1xuICBvbm1lc3NhZ2UgPSAoe2RhdGF9KSA9PiB7XG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgc3RkaW4ucHVzaChkYXRhKTtcbiAgICAgIGlmIChyZXN1bWVTdGRpbilcbiAgICAgICAgcmVzdW1lU3RkaW4oKTtcbiAgICB9XG4gIH07XG4gIGZzLnJlYWQgPSAoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgIGlmIChmZCAhPT0gMCB8fCBvZmZzZXQgIT09IDAgfHwgbGVuZ3RoICE9PSBidWZmZXIubGVuZ3RoIHx8IHBvc2l0aW9uICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcmVhZFwiKTtcbiAgICB9XG4gICAgaWYgKHN0ZGluLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzdW1lU3RkaW4gPSAoKSA9PiBmcy5yZWFkKGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZmlyc3QgPSBzdGRpblswXTtcbiAgICBsZXQgY291bnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsZW5ndGgsIGZpcnN0Lmxlbmd0aCAtIHN0ZGluUG9zKSk7XG4gICAgYnVmZmVyLnNldChmaXJzdC5zdWJhcnJheShzdGRpblBvcywgc3RkaW5Qb3MgKyBjb3VudCksIG9mZnNldCk7XG4gICAgc3RkaW5Qb3MgKz0gY291bnQ7XG4gICAgaWYgKHN0ZGluUG9zID09PSBmaXJzdC5sZW5ndGgpIHtcbiAgICAgIHN0ZGluLnNoaWZ0KCk7XG4gICAgICBzdGRpblBvcyA9IDA7XG4gICAgfVxuICAgIGNhbGxiYWNrKG51bGwsIGNvdW50KTtcbiAgfTtcbiAgbGV0IGdvID0gbmV3IGdsb2JhbC5HbygpO1xuICBnby5hcmd2ID0gW1wiXCIsIFxcYC0tc2VydmljZT1cXCR7XCIwLjkuMFwifVxcYF07XG4gIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKHdhc20sIGdvLmltcG9ydE9iamVjdCkudGhlbigoe2luc3RhbmNlfSkgPT4gZ28ucnVuKGluc3RhbmNlKSk7XG59O31gO1xuICBsZXQgd29ya2VyO1xuICBpZiAodXNlV29ya2VyKSB7XG4gICAgbGV0IGJsb2IgPSBuZXcgQmxvYihbY29kZV0sIHt0eXBlOiBcInRleHQvamF2YXNjcmlwdFwifSk7XG4gICAgd29ya2VyID0gbmV3IFdvcmtlcihVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZm4gPSBuZXcgRnVuY3Rpb24oXCJwb3N0TWVzc2FnZVwiLCBjb2RlICsgYHZhciBvbm1lc3NhZ2U7IHJldHVybiBtID0+IG9ubWVzc2FnZShtKWApO1xuICAgIGxldCBvbm1lc3NhZ2UgPSBmbigoZGF0YSkgPT4gd29ya2VyLm9ubWVzc2FnZSh7ZGF0YX0pKTtcbiAgICB3b3JrZXIgPSB7XG4gICAgICBvbm1lc3NhZ2U6IG51bGwsXG4gICAgICBwb3N0TWVzc2FnZTogKGRhdGEpID0+IG9ubWVzc2FnZSh7ZGF0YX0pLFxuICAgICAgdGVybWluYXRlKCkge1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgd29ya2VyLnBvc3RNZXNzYWdlKHdhc20pO1xuICB3b3JrZXIub25tZXNzYWdlID0gKHtkYXRhfSkgPT4gcmVhZEZyb21TdGRvdXQoZGF0YSk7XG4gIGxldCB7cmVhZEZyb21TdGRvdXQsIHNlcnZpY2V9ID0gY3JlYXRlQ2hhbm5lbCh7XG4gICAgd3JpdGVUb1N0ZGluKGJ5dGVzKSB7XG4gICAgICB3b3JrZXIucG9zdE1lc3NhZ2UoYnl0ZXMpO1xuICAgIH0sXG4gICAgaXNTeW5jOiBmYWxzZSxcbiAgICBpc0Jyb3dzZXI6IHRydWVcbiAgfSk7XG4gIGxvbmdMaXZlZFNlcnZpY2UgPSB7XG4gICAgYnVpbGQ6IChvcHRpb25zKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBzZXJ2aWNlLmJ1aWxkT3JTZXJ2ZShcImJ1aWxkXCIsIG51bGwsIG51bGwsIG9wdGlvbnMsIGZhbHNlLCBcIi9cIiwgKGVyciwgcmVzMikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlczIpKSksXG4gICAgdHJhbnNmb3JtOiAoaW5wdXQsIG9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBzZXJ2aWNlLnRyYW5zZm9ybShcInRyYW5zZm9ybVwiLCBudWxsLCBpbnB1dCwgb3B0aW9ucyB8fCB7fSwgZmFsc2UsIHtcbiAgICAgICAgcmVhZEZpbGUoXywgY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoXCJJbnRlcm5hbCBlcnJvclwiKSwgbnVsbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHdyaXRlRmlsZShfLCBjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9LCAoZXJyLCByZXMyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUocmVzMikpKTtcbiAgICB9XG4gIH07XG59KTtcbn0pKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIj9leHBvcnRzOih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0aGlzKS5lc2J1aWxkPXt9KTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZGVjb2RlLmpzb25cIikpO1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL2hlL2Jsb2IvbWFzdGVyL3NyYy9oZS5qcyNMOTQtTDExOVxudmFyIGZyb21Db2RlUG9pbnQgPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG5TdHJpbmcuZnJvbUNvZGVQb2ludCB8fFxuICAgIGZ1bmN0aW9uIChjb2RlUG9pbnQpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweGZmZmYpIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4+IDEwKSAmIDB4M2ZmKSB8IDB4ZDgwMCk7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSAweGRjMDAgfCAoY29kZVBvaW50ICYgMHgzZmYpO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICBpZiAoKGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZikgfHwgY29kZVBvaW50ID4gMHgxMGZmZmYpIHtcbiAgICAgICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xuICAgIH1cbiAgICBpZiAoY29kZVBvaW50IGluIGRlY29kZV9qc29uXzEuZGVmYXVsdCkge1xuICAgICAgICBjb2RlUG9pbnQgPSBkZWNvZGVfanNvbl8xLmRlZmF1bHRbY29kZVBvaW50XTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGRlY29kZUNvZGVQb2ludDtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfY29kZXBvaW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVudGl0aWVzL2xpYi9kZWNvZGVfY29kZXBvaW50XCIpKTtcbnZhciBlbnRpdGllc19qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVudGl0aWVzL2xpYi9tYXBzL2VudGl0aWVzLmpzb25cIikpO1xudmFyIGxlZ2FjeV9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVudGl0aWVzL2xpYi9tYXBzL2xlZ2FjeS5qc29uXCIpKTtcbnZhciB4bWxfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJlbnRpdGllcy9saWIvbWFwcy94bWwuanNvblwiKSk7XG5mdW5jdGlvbiB3aGl0ZXNwYWNlKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gXCIgXCIgfHwgYyA9PT0gXCJcXG5cIiB8fCBjID09PSBcIlxcdFwiIHx8IGMgPT09IFwiXFxmXCIgfHwgYyA9PT0gXCJcXHJcIjtcbn1cbmZ1bmN0aW9uIGlzQVNDSUlBbHBoYShjKSB7XG4gICAgcmV0dXJuIChjID49IFwiYVwiICYmIGMgPD0gXCJ6XCIpIHx8IChjID49IFwiQVwiICYmIGMgPD0gXCJaXCIpO1xufVxuZnVuY3Rpb24gaWZFbHNlU3RhdGUodXBwZXIsIFNVQ0NFU1MsIEZBSUxVUkUpIHtcbiAgICB2YXIgbG93ZXIgPSB1cHBlci50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICh1cHBlciA9PT0gbG93ZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0LCBjKSB7XG4gICAgICAgICAgICBpZiAoYyA9PT0gbG93ZXIpIHtcbiAgICAgICAgICAgICAgICB0Ll9zdGF0ZSA9IFNVQ0NFU1M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0Ll9zdGF0ZSA9IEZBSUxVUkU7XG4gICAgICAgICAgICAgICAgdC5faW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0LCBjKSB7XG4gICAgICAgIGlmIChjID09PSBsb3dlciB8fCBjID09PSB1cHBlcikge1xuICAgICAgICAgICAgdC5fc3RhdGUgPSBTVUNDRVNTO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdC5fc3RhdGUgPSBGQUlMVVJFO1xuICAgICAgICAgICAgdC5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKHVwcGVyLCBORVhUX1NUQVRFKSB7XG4gICAgdmFyIGxvd2VyID0gdXBwZXIudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHQsIGMpIHtcbiAgICAgICAgaWYgKGMgPT09IGxvd2VyIHx8IGMgPT09IHVwcGVyKSB7XG4gICAgICAgICAgICB0Ll9zdGF0ZSA9IE5FWFRfU1RBVEU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0Ll9zdGF0ZSA9IDMgLyogSW5UYWdOYW1lICovO1xuICAgICAgICAgICAgdC5faW5kZXgtLTsgLy8gQ29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgc3RhdGVCZWZvcmVDZGF0YTEgPSBpZkVsc2VTdGF0ZShcIkNcIiwgMjQgLyogQmVmb3JlQ2RhdGEyICovLCAxNiAvKiBJbkRlY2xhcmF0aW9uICovKTtcbnZhciBzdGF0ZUJlZm9yZUNkYXRhMiA9IGlmRWxzZVN0YXRlKFwiRFwiLCAyNSAvKiBCZWZvcmVDZGF0YTMgKi8sIDE2IC8qIEluRGVjbGFyYXRpb24gKi8pO1xudmFyIHN0YXRlQmVmb3JlQ2RhdGEzID0gaWZFbHNlU3RhdGUoXCJBXCIsIDI2IC8qIEJlZm9yZUNkYXRhNCAqLywgMTYgLyogSW5EZWNsYXJhdGlvbiAqLyk7XG52YXIgc3RhdGVCZWZvcmVDZGF0YTQgPSBpZkVsc2VTdGF0ZShcIlRcIiwgMjcgLyogQmVmb3JlQ2RhdGE1ICovLCAxNiAvKiBJbkRlY2xhcmF0aW9uICovKTtcbnZhciBzdGF0ZUJlZm9yZUNkYXRhNSA9IGlmRWxzZVN0YXRlKFwiQVwiLCAyOCAvKiBCZWZvcmVDZGF0YTYgKi8sIDE2IC8qIEluRGVjbGFyYXRpb24gKi8pO1xudmFyIHN0YXRlQmVmb3JlU2NyaXB0MSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJSXCIsIDM1IC8qIEJlZm9yZVNjcmlwdDIgKi8pO1xudmFyIHN0YXRlQmVmb3JlU2NyaXB0MiA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJJXCIsIDM2IC8qIEJlZm9yZVNjcmlwdDMgKi8pO1xudmFyIHN0YXRlQmVmb3JlU2NyaXB0MyA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJQXCIsIDM3IC8qIEJlZm9yZVNjcmlwdDQgKi8pO1xudmFyIHN0YXRlQmVmb3JlU2NyaXB0NCA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJUXCIsIDM4IC8qIEJlZm9yZVNjcmlwdDUgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTY3JpcHQxID0gaWZFbHNlU3RhdGUoXCJSXCIsIDQwIC8qIEFmdGVyU2NyaXB0MiAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUFmdGVyU2NyaXB0MiA9IGlmRWxzZVN0YXRlKFwiSVwiLCA0MSAvKiBBZnRlclNjcmlwdDMgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclNjcmlwdDMgPSBpZkVsc2VTdGF0ZShcIlBcIiwgNDIgLyogQWZ0ZXJTY3JpcHQ0ICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTY3JpcHQ0ID0gaWZFbHNlU3RhdGUoXCJUXCIsIDQzIC8qIEFmdGVyU2NyaXB0NSAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUJlZm9yZVN0eWxlMSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJZXCIsIDQ1IC8qIEJlZm9yZVN0eWxlMiAqLyk7XG52YXIgc3RhdGVCZWZvcmVTdHlsZTIgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFwiTFwiLCA0NiAvKiBCZWZvcmVTdHlsZTMgKi8pO1xudmFyIHN0YXRlQmVmb3JlU3R5bGUzID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIkVcIiwgNDcgLyogQmVmb3JlU3R5bGU0ICovKTtcbnZhciBzdGF0ZUFmdGVyU3R5bGUxID0gaWZFbHNlU3RhdGUoXCJZXCIsIDQ5IC8qIEFmdGVyU3R5bGUyICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTdHlsZTIgPSBpZkVsc2VTdGF0ZShcIkxcIiwgNTAgLyogQWZ0ZXJTdHlsZTMgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclN0eWxlMyA9IGlmRWxzZVN0YXRlKFwiRVwiLCA1MSAvKiBBZnRlclN0eWxlNCAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUJlZm9yZVNwZWNpYWxUID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIklcIiwgNTQgLyogQmVmb3JlVGl0bGUxICovKTtcbnZhciBzdGF0ZUJlZm9yZVRpdGxlMSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJUXCIsIDU1IC8qIEJlZm9yZVRpdGxlMiAqLyk7XG52YXIgc3RhdGVCZWZvcmVUaXRsZTIgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFwiTFwiLCA1NiAvKiBCZWZvcmVUaXRsZTMgKi8pO1xudmFyIHN0YXRlQmVmb3JlVGl0bGUzID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIkVcIiwgNTcgLyogQmVmb3JlVGl0bGU0ICovKTtcbnZhciBzdGF0ZUFmdGVyU3BlY2lhbFRFbmQgPSBpZkVsc2VTdGF0ZShcIklcIiwgNTggLyogQWZ0ZXJUaXRsZTEgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclRpdGxlMSA9IGlmRWxzZVN0YXRlKFwiVFwiLCA1OSAvKiBBZnRlclRpdGxlMiAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUFmdGVyVGl0bGUyID0gaWZFbHNlU3RhdGUoXCJMXCIsIDYwIC8qIEFmdGVyVGl0bGUzICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJUaXRsZTMgPSBpZkVsc2VTdGF0ZShcIkVcIiwgNjEgLyogQWZ0ZXJUaXRsZTQgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVCZWZvcmVFbnRpdHkgPSBpZkVsc2VTdGF0ZShcIiNcIiwgNjMgLyogQmVmb3JlTnVtZXJpY0VudGl0eSAqLywgNjQgLyogSW5OYW1lZEVudGl0eSAqLyk7XG52YXIgc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5ID0gaWZFbHNlU3RhdGUoXCJYXCIsIDY2IC8qIEluSGV4RW50aXR5ICovLCA2NSAvKiBJbk51bWVyaWNFbnRpdHkgKi8pO1xudmFyIFRva2VuaXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb2tlbml6ZXIob3B0aW9ucywgY2JzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLyoqIFRoZSBjdXJyZW50IHN0YXRlIHRoZSB0b2tlbml6ZXIgaXMgaW4uICovXG4gICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAvKiogVGhlIHJlYWQgYnVmZmVyLiAqL1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XG4gICAgICAgIC8qKiBUaGUgYmVnaW5uaW5nIG9mIHRoZSBzZWN0aW9uIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHJlYWQuICovXG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgLyoqIFRoZSBpbmRleCB3aXRoaW4gdGhlIGJ1ZmZlciB0aGF0IHdlIGFyZSBjdXJyZW50bHkgbG9va2luZyBhdC4gKi9cbiAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGF0YSB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBidWZmZXIgb2NjYXNpb25hbGx5LlxuICAgICAgICAgKiBgX2J1ZmZlck9mZnNldGAga2VlcHMgdHJhY2sgb2YgaG93IG1hbnkgY2hhcmFjdGVycyBoYXZlIGJlZW4gcmVtb3ZlZCwgdG8gbWFrZSBzdXJlIHBvc2l0aW9uIGluZm9ybWF0aW9uIGlzIGFjY3VyYXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5idWZmZXJPZmZzZXQgPSAwO1xuICAgICAgICAvKiogU29tZSBiZWhhdmlvciwgZWcuIHdoZW4gZGVjb2RpbmcgZW50aXRpZXMsIGlzIGRvbmUgd2hpbGUgd2UgYXJlIGluIGFub3RoZXIgc3RhdGUuIFRoaXMga2VlcHMgdHJhY2sgb2YgdGhlIG90aGVyIHN0YXRlIHR5cGUuICovXG4gICAgICAgIHRoaXMuYmFzZVN0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAvKiogRm9yIHNwZWNpYWwgcGFyc2luZyBiZWhhdmlvciBpbnNpZGUgb2Ygc2NyaXB0IGFuZCBzdHlsZSB0YWdzLiAqL1xuICAgICAgICB0aGlzLnNwZWNpYWwgPSAxIC8qIE5vbmUgKi87XG4gICAgICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdG9rZW5pemVyIGhhcyBiZWVuIHBhdXNlZC4gKi9cbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSB0b2tlbml6ZXIgaGFzIGZpbmlzaGVkIHJ1bm5pbmcgLyBgLmVuZGAgaGFzIGJlZW4gY2FsbGVkLiAqL1xuICAgICAgICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2JzID0gY2JzO1xuICAgICAgICB0aGlzLnhtbE1vZGUgPSAhIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMueG1sTW9kZSk7XG4gICAgICAgIHRoaXMuZGVjb2RlRW50aXRpZXMgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVjb2RlRW50aXRpZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWU7XG4gICAgfVxuICAgIFRva2VuaXplci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuYmFzZVN0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICB0aGlzLnNwZWNpYWwgPSAxIC8qIE5vbmUgKi87XG4gICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kZWQpXG4gICAgICAgICAgICB0aGlzLmNicy5vbmVycm9yKEVycm9yKFwiLndyaXRlKCkgYWZ0ZXIgZG9uZSFcIikpO1xuICAgICAgICB0aGlzLmJ1ZmZlciArPSBjaHVuaztcbiAgICAgICAgdGhpcy5wYXJzZSgpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kZWQpXG4gICAgICAgICAgICB0aGlzLmNicy5vbmVycm9yKEVycm9yKFwiLmVuZCgpIGFmdGVyIGRvbmUhXCIpKTtcbiAgICAgICAgaWYgKGNodW5rKVxuICAgICAgICAgICAgdGhpcy53cml0ZShjaHVuayk7XG4gICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5ydW5uaW5nKVxuICAgICAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl9pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBpbmRleCB3aXRoaW4gYWxsIG9mIHRoZSB3cml0dGVuIGRhdGEuXG4gICAgICovXG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5nZXRBYnNvbHV0ZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJPZmZzZXQgKyB0aGlzLl9pbmRleDtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVUZXh0ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPFwiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPiB0aGlzLnNlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh0aGlzLmdldFNlY3Rpb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDIgLyogQmVmb3JlVGFnTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWNvZGVFbnRpdGllcyAmJlxuICAgICAgICAgICAgYyA9PT0gXCImXCIgJiZcbiAgICAgICAgICAgICh0aGlzLnNwZWNpYWwgPT09IDEgLyogTm9uZSAqLyB8fCB0aGlzLnNwZWNpYWwgPT09IDQgLyogVGl0bGUgKi8pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPiB0aGlzLnNlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh0aGlzLmdldFNlY3Rpb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNjIgLyogQmVmb3JlRW50aXR5ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZVRhZ05hbWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNSAvKiBCZWZvcmVDbG9zaW5nVGFnTmFtZSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gXCI+XCIgfHxcbiAgICAgICAgICAgIHRoaXMuc3BlY2lhbCAhPT0gMSAvKiBOb25lICovIHx8XG4gICAgICAgICAgICB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIiFcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxNSAvKiBCZWZvcmVEZWNsYXJhdGlvbiAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE3IC8qIEluUHJvY2Vzc2luZ0luc3RydWN0aW9uICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzQVNDSUlBbHBoYShjKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9XG4gICAgICAgICAgICAgICAgIXRoaXMueG1sTW9kZSAmJiAoYyA9PT0gXCJzXCIgfHwgYyA9PT0gXCJTXCIpXG4gICAgICAgICAgICAgICAgICAgID8gMzIgLyogQmVmb3JlU3BlY2lhbFMgKi9cbiAgICAgICAgICAgICAgICAgICAgOiAhdGhpcy54bWxNb2RlICYmIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gNTIgLyogQmVmb3JlU3BlY2lhbFQgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIDogMyAvKiBJblRhZ05hbWUgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5UYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFRva2VuKFwib25vcGVudGFnbmFtZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUNsb3NpbmdUYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNwZWNpYWwgIT09IDEgLyogTm9uZSAqLykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3BlY2lhbCAhPT0gNCAvKiBUaXRsZSAqLyAmJiAoYyA9PT0gXCJzXCIgfHwgYyA9PT0gXCJTXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAzMyAvKiBCZWZvcmVTcGVjaWFsU0VuZCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3BlY2lhbCA9PT0gNCAvKiBUaXRsZSAqLyAmJlxuICAgICAgICAgICAgICAgIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDUzIC8qIEJlZm9yZVNwZWNpYWxURW5kICovO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNBU0NJSUFscGhhKGMpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDIwIC8qIEluU3BlY2lhbENvbW1lbnQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA2IC8qIEluQ2xvc2luZ1RhZ05hbWUgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5DbG9zaW5nVGFnTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRUb2tlbihcIm9uY2xvc2V0YWdcIik7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDcgLyogQWZ0ZXJDbG9zaW5nVGFnTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgLy8gU2tpcCBldmVyeXRoaW5nIHVudGlsIFwiPlwiXG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ub3BlbnRhZ2VuZCgpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIi9cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA0IC8qIEluU2VsZkNsb3NpbmdUYWcgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOSAvKiBJbkF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5TZWxmQ2xvc2luZ1RhZyA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25zZWxmY2xvc2luZ3RhZygpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgICAgIHRoaXMuc3BlY2lhbCA9IDEgLyogTm9uZSAqLzsgLy8gUmVzZXQgc3BlY2lhbCBzdGF0ZSwgaW4gY2FzZSBvZiBzZWxmLWNsb3Npbmcgc3BlY2lhbCB0YWdzXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj1cIiB8fCBjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYm5hbWUodGhpcy5nZXRTZWN0aW9uKCkpO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMTAgLyogQWZ0ZXJBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUFmdGVyQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj1cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxMSAvKiBCZWZvcmVBdHRyaWJ1dGVWYWx1ZSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOSAvKiBJbkF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxMiAvKiBJbkF0dHJpYnV0ZVZhbHVlRHEgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIidcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxMyAvKiBJbkF0dHJpYnV0ZVZhbHVlU3EgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxNCAvKiBJbkF0dHJpYnV0ZVZhbHVlTnEgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTsgLy8gUmVjb25zdW1lIHRva2VuXG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuaGFuZGxlSW5BdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIChjLCBxdW90ZSkge1xuICAgICAgICBpZiAoYyA9PT0gcXVvdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQocXVvdGUpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA4IC8qIEJlZm9yZUF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWNvZGVFbnRpdGllcyAmJiBjID09PSBcIiZcIikge1xuICAgICAgICAgICAgdGhpcy5lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA2MiAvKiBCZWZvcmVFbnRpdHkgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5BdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlcyA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlSW5BdHRyaWJ1dGVWYWx1ZShjLCAnXCInKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJbkF0dHJpYnV0ZVZhbHVlKGMsIFwiJ1wiKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlTm9RdW90ZXMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAod2hpdGVzcGFjZShjKSB8fCBjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZChudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRlY29kZUVudGl0aWVzICYmIGMgPT09IFwiJlwiKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDYyIC8qIEJlZm9yZUVudGl0eSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID1cbiAgICAgICAgICAgIGMgPT09IFwiW1wiXG4gICAgICAgICAgICAgICAgPyAyMyAvKiBCZWZvcmVDZGF0YTEgKi9cbiAgICAgICAgICAgICAgICA6IGMgPT09IFwiLVwiXG4gICAgICAgICAgICAgICAgICAgID8gMTggLyogQmVmb3JlQ29tbWVudCAqL1xuICAgICAgICAgICAgICAgICAgICA6IDE2IC8qIEluRGVjbGFyYXRpb24gKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5EZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25kZWNsYXJhdGlvbih0aGlzLmdldFNlY3Rpb24oKSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVDb21tZW50ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE5IC8qIEluQ29tbWVudCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxNiAvKiBJbkRlY2xhcmF0aW9uICovO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5Db21tZW50ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiLVwiKVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAyMSAvKiBBZnRlckNvbW1lbnQxICovO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluU3BlY2lhbENvbW1lbnQgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY29tbWVudCh0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4KSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJDb21tZW50MSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIi1cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAyMiAvKiBBZnRlckNvbW1lbnQyICovO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxOSAvKiBJbkNvbW1lbnQgKi87XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVBZnRlckNvbW1lbnQyID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgMiB0cmFpbGluZyBjaGFyc1xuICAgICAgICAgICAgdGhpcy5jYnMub25jb21tZW50KHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5faW5kZXggLSAyKSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE5IC8qIEluQ29tbWVudCAqLztcbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlOiBzdGF5IGluIEFGVEVSX0NPTU1FTlRfMiAoYC0tLT5gKVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUNkYXRhNiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIltcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAyOSAvKiBJbkNkYXRhICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE2IC8qIEluRGVjbGFyYXRpb24gKi87XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5DZGF0YSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIl1cIilcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMzAgLyogQWZ0ZXJDZGF0YTEgKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJDZGF0YTEgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCJdXCIpXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDMxIC8qIEFmdGVyQ2RhdGEyICovO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDI5IC8qIEluQ2RhdGEgKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJDZGF0YTIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSAyIHRyYWlsaW5nIGNoYXJzXG4gICAgICAgICAgICB0aGlzLmNicy5vbmNkYXRhKHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5faW5kZXggLSAyKSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IFwiXVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDI5IC8qIEluQ2RhdGEgKi87XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZTogc3RheSBpbiBBRlRFUl9DREFUQV8yIChgXV1dPmApXG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlU3BlY2lhbFMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCJjXCIgfHwgYyA9PT0gXCJDXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMzQgLyogQmVmb3JlU2NyaXB0MSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA0NCAvKiBCZWZvcmVTdHlsZTEgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDMgLyogSW5UYWdOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTsgLy8gQ29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZVNwZWNpYWxTRW5kID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKHRoaXMuc3BlY2lhbCA9PT0gMiAvKiBTY3JpcHQgKi8gJiYgKGMgPT09IFwiY1wiIHx8IGMgPT09IFwiQ1wiKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAzOSAvKiBBZnRlclNjcmlwdDEgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zcGVjaWFsID09PSAzIC8qIFN0eWxlICovICYmIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIikpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNDggLyogQWZ0ZXJTdHlsZTEgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlU3BlY2lhbExhc3QgPSBmdW5jdGlvbiAoYywgc3BlY2lhbCkge1xuICAgICAgICBpZiAoYyA9PT0gXCIvXCIgfHwgYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5zcGVjaWFsID0gc3BlY2lhbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZSA9IDMgLyogSW5UYWdOYW1lICovO1xuICAgICAgICB0aGlzLl9pbmRleC0tOyAvLyBDb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUFmdGVyU3BlY2lhbExhc3QgPSBmdW5jdGlvbiAoYywgc2VjdGlvblN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnNwZWNpYWwgPSAxIC8qIE5vbmUgKi87XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDYgLyogSW5DbG9zaW5nVGFnTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggLSBzZWN0aW9uU3RhcnRPZmZzZXQ7XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tOyAvLyBSZWNvbnN1bWUgdGhlIHRva2VuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgfTtcbiAgICAvLyBGb3IgZW50aXRpZXMgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uXG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5wYXJzZUZpeGVkRW50aXR5ID0gZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICBpZiAobWFwID09PSB2b2lkIDApIHsgbWFwID0gdGhpcy54bWxNb2RlID8geG1sX2pzb25fMS5kZWZhdWx0IDogZW50aXRpZXNfanNvbl8xLmRlZmF1bHQ7IH1cbiAgICAgICAgLy8gT2Zmc2V0ID0gMVxuICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgKyAxIDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5zZWN0aW9uU3RhcnQgKyAxLCB0aGlzLl9pbmRleCk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgZW50aXR5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFBhcnRpYWwobWFwW2VudGl0eV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBQYXJzZXMgbGVnYWN5IGVudGl0aWVzICh3aXRob3V0IHRyYWlsaW5nIHNlbWljb2xvbilcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnBhcnNlTGVnYWN5RW50aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNlY3Rpb25TdGFydCArIDE7XG4gICAgICAgIC8vIFRoZSBtYXggbGVuZ3RoIG9mIGxlZ2FjeSBlbnRpdGllcyBpcyA2XG4gICAgICAgIHZhciBsaW1pdCA9IE1hdGgubWluKHRoaXMuX2luZGV4IC0gc3RhcnQsIDYpO1xuICAgICAgICB3aGlsZSAobGltaXQgPj0gMikge1xuICAgICAgICAgICAgLy8gVGhlIG1pbiBsZW5ndGggb2YgbGVnYWN5IGVudGl0aWVzIGlzIDJcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLmJ1ZmZlci5zdWJzdHIoc3RhcnQsIGxpbWl0KTtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobGVnYWN5X2pzb25fMS5kZWZhdWx0LCBlbnRpdHkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UGFydGlhbChsZWdhY3lfanNvbl8xLmRlZmF1bHRbZW50aXR5XSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgKz0gbGltaXQgKyAxO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbWl0LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbk5hbWVkRW50aXR5ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiO1wiKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlRml4ZWRFbnRpdHkoKTtcbiAgICAgICAgICAgIC8vIFJldHJ5IGFzIGxlZ2FjeSBlbnRpdHkgaWYgZW50aXR5IHdhc24ndCBwYXJzZWRcbiAgICAgICAgICAgIGlmICh0aGlzLmJhc2VTdGF0ZSA9PT0gMSAvKiBUZXh0ICovICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgKyAxIDwgdGhpcy5faW5kZXggJiZcbiAgICAgICAgICAgICAgICAhdGhpcy54bWxNb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUxlZ2FjeUVudGl0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIikgJiYgIWlzQVNDSUlBbHBoYShjKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMueG1sTW9kZSB8fCB0aGlzLnNlY3Rpb25TdGFydCArIDEgPT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmJhc2VTdGF0ZSAhPT0gMSAvKiBUZXh0ICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgIT09IFwiPVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIGFzIGxlZ2FjeSBlbnRpdHksIHdpdGhvdXQgYWxsb3dpbmcgYWRkaXRpb25hbCBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlRml4ZWRFbnRpdHkobGVnYWN5X2pzb25fMS5kZWZhdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlTGVnYWN5RW50aXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuYmFzZVN0YXRlO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5kZWNvZGVOdW1lcmljRW50aXR5ID0gZnVuY3Rpb24gKG9mZnNldCwgYmFzZSwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBzZWN0aW9uU3RhcnQgPSB0aGlzLnNlY3Rpb25TdGFydCArIG9mZnNldDtcbiAgICAgICAgaWYgKHNlY3Rpb25TdGFydCAhPT0gdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIC8vIFBhcnNlIGVudGl0eVxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZyhzZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4KTtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChlbnRpdHksIGJhc2UpO1xuICAgICAgICAgICAgdGhpcy5lbWl0UGFydGlhbChkZWNvZGVfY29kZXBvaW50XzEuZGVmYXVsdChwYXJzZWQpKTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gc3RyaWN0ID8gdGhpcy5faW5kZXggKyAxIDogdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbk51bWVyaWNFbnRpdHkgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI7XCIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlTnVtZXJpY0VudGl0eSgyLCAxMCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnhtbE1vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29kZU51bWVyaWNFbnRpdHkoMiwgMTAsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5IZXhFbnRpdHkgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI7XCIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlTnVtZXJpY0VudGl0eSgzLCAxNiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgPCBcImFcIiB8fCBjID4gXCJmXCIpICYmXG4gICAgICAgICAgICAoYyA8IFwiQVwiIHx8IGMgPiBcIkZcIikgJiZcbiAgICAgICAgICAgIChjIDwgXCIwXCIgfHwgYyA+IFwiOVwiKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnhtbE1vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29kZU51bWVyaWNFbnRpdHkoMywgMTYsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucnVubmluZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSAxIC8qIFRleHQgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgIT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5zZWN0aW9uU3RhcnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2VjdGlvblN0YXJ0ID09PSB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBzZWN0aW9uIGp1c3Qgc3RhcnRlZFxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCArPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZXZlcnl0aGluZyB1bm5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMuc2VjdGlvblN0YXJ0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCAtPSB0aGlzLnNlY3Rpb25TdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCArPSB0aGlzLnNlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgdGhyb3VnaCB0aGUgYnVmZmVyLCBjYWxsaW5nIHRoZSBmdW5jdGlvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgICAqXG4gICAgICogU3RhdGVzIHRoYXQgYXJlIG1vcmUgbGlrZWx5IHRvIGJlIGhpdCBhcmUgaGlnaGVyIHVwLCBhcyBhIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LlxuICAgICAqL1xuICAgIFRva2VuaXplci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCAmJiB0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHZhciBjID0gdGhpcy5idWZmZXIuY2hhckF0KHRoaXMuX2luZGV4KTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gMSAvKiBUZXh0ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVRleHQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTIgLyogSW5BdHRyaWJ1dGVWYWx1ZURxICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gOSAvKiBJbkF0dHJpYnV0ZU5hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE5IC8qIEluQ29tbWVudCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkNvbW1lbnQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMjAgLyogSW5TcGVjaWFsQ29tbWVudCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJblNwZWNpYWxDb21tZW50KGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDggLyogQmVmb3JlQXR0cmlidXRlTmFtZSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDMgLyogSW5UYWdOYW1lICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluVGFnTmFtZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2IC8qIEluQ2xvc2luZ1RhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5DbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyIC8qIEJlZm9yZVRhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlVGFnTmFtZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAxMCAvKiBBZnRlckF0dHJpYnV0ZU5hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDEzIC8qIEluQXR0cmlidXRlVmFsdWVTcSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDExIC8qIEJlZm9yZUF0dHJpYnV0ZVZhbHVlICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJpYnV0ZVZhbHVlKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDUgLyogQmVmb3JlQ2xvc2luZ1RhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNyAvKiBBZnRlckNsb3NpbmdUYWdOYW1lICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzIgLyogQmVmb3JlU3BlY2lhbFMgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlU3BlY2lhbFMoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMjEgLyogQWZ0ZXJDb21tZW50MSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckNvbW1lbnQxKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE0IC8qIEluQXR0cmlidXRlVmFsdWVOcSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlTm9RdW90ZXMoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNCAvKiBJblNlbGZDbG9zaW5nVGFnICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluU2VsZkNsb3NpbmdUYWcoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTYgLyogSW5EZWNsYXJhdGlvbiAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkRlY2xhcmF0aW9uKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE1IC8qIEJlZm9yZURlY2xhcmF0aW9uICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZURlY2xhcmF0aW9uKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDIyIC8qIEFmdGVyQ29tbWVudDIgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJDb21tZW50MihjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAxOCAvKiBCZWZvcmVDb21tZW50ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUNvbW1lbnQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzMgLyogQmVmb3JlU3BlY2lhbFNFbmQgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlU3BlY2lhbFNFbmQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTMgLyogQmVmb3JlU3BlY2lhbFRFbmQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU3BlY2lhbFRFbmQodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzkgLyogQWZ0ZXJTY3JpcHQxICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclNjcmlwdDEodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDAgLyogQWZ0ZXJTY3JpcHQyICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclNjcmlwdDIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDEgLyogQWZ0ZXJTY3JpcHQzICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclNjcmlwdDModGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzQgLyogQmVmb3JlU2NyaXB0MSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlU2NyaXB0MSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzNSAvKiBCZWZvcmVTY3JpcHQyICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVTY3JpcHQyKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDM2IC8qIEJlZm9yZVNjcmlwdDMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVNjcmlwdDModGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzcgLyogQmVmb3JlU2NyaXB0NCAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlU2NyaXB0NCh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzOCAvKiBCZWZvcmVTY3JpcHQ1ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxMYXN0KGMsIDIgLyogU2NyaXB0ICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0MiAvKiBBZnRlclNjcmlwdDQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU2NyaXB0NCh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0MyAvKiBBZnRlclNjcmlwdDUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJTcGVjaWFsTGFzdChjLCA2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0NCAvKiBCZWZvcmVTdHlsZTEgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVN0eWxlMSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyOSAvKiBJbkNkYXRhICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQ2RhdGEoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDUgLyogQmVmb3JlU3R5bGUyICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVTdHlsZTIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDYgLyogQmVmb3JlU3R5bGUzICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVTdHlsZTModGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDcgLyogQmVmb3JlU3R5bGU0ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxMYXN0KGMsIDMgLyogU3R5bGUgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDQ4IC8qIEFmdGVyU3R5bGUxICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclN0eWxlMSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0OSAvKiBBZnRlclN0eWxlMiAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQWZ0ZXJTdHlsZTIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTAgLyogQWZ0ZXJTdHlsZTMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU3R5bGUzKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDUxIC8qIEFmdGVyU3R5bGU0ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyU3BlY2lhbExhc3QoYywgNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTIgLyogQmVmb3JlU3BlY2lhbFQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVNwZWNpYWxUKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU0IC8qIEJlZm9yZVRpdGxlMSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlVGl0bGUxKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU1IC8qIEJlZm9yZVRpdGxlMiAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlVGl0bGUyKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU2IC8qIEJlZm9yZVRpdGxlMyAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlVGl0bGUzKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU3IC8qIEJlZm9yZVRpdGxlNCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVTcGVjaWFsTGFzdChjLCA0IC8qIFRpdGxlICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA1OCAvKiBBZnRlclRpdGxlMSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQWZ0ZXJUaXRsZTEodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTkgLyogQWZ0ZXJUaXRsZTIgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyVGl0bGUyKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDYwIC8qIEFmdGVyVGl0bGUzICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclRpdGxlMyh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2MSAvKiBBZnRlclRpdGxlNCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlclNwZWNpYWxMYXN0KGMsIDUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE3IC8qIEluUHJvY2Vzc2luZ0luc3RydWN0aW9uICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY0IC8qIEluTmFtZWRFbnRpdHkgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5OYW1lZEVudGl0eShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyMyAvKiBCZWZvcmVDZGF0YTEgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhMSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2MiAvKiBCZWZvcmVFbnRpdHkgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUVudGl0eSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyNCAvKiBCZWZvcmVDZGF0YTIgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhMih0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyNSAvKiBCZWZvcmVDZGF0YTMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhMyh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzMCAvKiBBZnRlckNkYXRhMSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckNkYXRhMShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzMSAvKiBBZnRlckNkYXRhMiAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckNkYXRhMihjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyNiAvKiBCZWZvcmVDZGF0YTQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhNCh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyNyAvKiBCZWZvcmVDZGF0YTUgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhNSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyOCAvKiBCZWZvcmVDZGF0YTYgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQ2RhdGE2KGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY2IC8qIEluSGV4RW50aXR5ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluSGV4RW50aXR5KGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY1IC8qIEluTnVtZXJpY0VudGl0eSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbk51bWVyaWNFbnRpdHkoYyk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2MyAvKiBCZWZvcmVOdW1lcmljRW50aXR5ICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5KHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub25lcnJvcihFcnJvcihcInVua25vd24gX3N0YXRlXCIpLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIHJlbWFpbmluZyBkYXRhLCBlbWl0IGl0IGluIGEgcmVhc29uYWJsZSB3YXlcbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYnMub25lbmQoKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuaGFuZGxlVHJhaWxpbmdEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnNlY3Rpb25TdGFydCk7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gMjkgLyogSW5DZGF0YSAqLyB8fFxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPT09IDMwIC8qIEFmdGVyQ2RhdGExICovIHx8XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gMzEgLyogQWZ0ZXJDZGF0YTIgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY2RhdGEoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE5IC8qIEluQ29tbWVudCAqLyB8fFxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPT09IDIxIC8qIEFmdGVyQ29tbWVudDEgKi8gfHxcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID09PSAyMiAvKiBBZnRlckNvbW1lbnQyICovKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmNvbW1lbnQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY0IC8qIEluTmFtZWRFbnRpdHkgKi8gJiYgIXRoaXMueG1sTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZUxlZ2FjeUVudGl0eSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuYmFzZVN0YXRlO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY1IC8qIEluTnVtZXJpY0VudGl0eSAqLyAmJiAhdGhpcy54bWxNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29kZU51bWVyaWNFbnRpdHkoMiwgMTAsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA8IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRyYWlsaW5nRGF0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2NiAvKiBJbkhleEVudGl0eSAqLyAmJiAhdGhpcy54bWxNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29kZU51bWVyaWNFbnRpdHkoMywgMTYsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA8IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRyYWlsaW5nRGF0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlICE9PSAzIC8qIEluVGFnTmFtZSAqLyAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgIT09IDggLyogQmVmb3JlQXR0cmlidXRlTmFtZSAqLyAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgIT09IDExIC8qIEJlZm9yZUF0dHJpYnV0ZVZhbHVlICovICYmXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gMTAgLyogQWZ0ZXJBdHRyaWJ1dGVOYW1lICovICYmXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gOSAvKiBJbkF0dHJpYnV0ZU5hbWUgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSAxMyAvKiBJbkF0dHJpYnV0ZVZhbHVlU3EgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSAxMiAvKiBJbkF0dHJpYnV0ZVZhbHVlRHEgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSAxNCAvKiBJbkF0dHJpYnV0ZVZhbHVlTnEgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSA2IC8qIEluQ2xvc2luZ1RhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICAgKiBFbHNlLCBpZ25vcmUgcmVtYWluaW5nIGRhdGFcbiAgICAgICAgICogVE9ETyBhZGQgYSB3YXkgdG8gcmVtb3ZlIGN1cnJlbnQgdGFnXG4gICAgICAgICAqL1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5nZXRTZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLl9pbmRleCk7XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmVtaXRUb2tlbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHRoaXMuY2JzW25hbWVdKHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuZW1pdFBhcnRpYWwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVN0YXRlICE9PSAxIC8qIFRleHQgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZGF0YSh2YWx1ZSk7IC8vIFRPRE8gaW1wbGVtZW50IHRoZSBuZXcgZXZlbnRcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUb2tlbml6ZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVG9rZW5pemVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJzZXIgPSB2b2lkIDA7XG52YXIgVG9rZW5pemVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVG9rZW5pemVyXCIpKTtcbnZhciBmb3JtVGFncyA9IG5ldyBTZXQoW1xuICAgIFwiaW5wdXRcIixcbiAgICBcIm9wdGlvblwiLFxuICAgIFwib3B0Z3JvdXBcIixcbiAgICBcInNlbGVjdFwiLFxuICAgIFwiYnV0dG9uXCIsXG4gICAgXCJkYXRhbGlzdFwiLFxuICAgIFwidGV4dGFyZWFcIixcbl0pO1xudmFyIHBUYWcgPSBuZXcgU2V0KFtcInBcIl0pO1xudmFyIG9wZW5JbXBsaWVzQ2xvc2UgPSB7XG4gICAgdHI6IG5ldyBTZXQoW1widHJcIiwgXCJ0aFwiLCBcInRkXCJdKSxcbiAgICB0aDogbmV3IFNldChbXCJ0aFwiXSksXG4gICAgdGQ6IG5ldyBTZXQoW1widGhlYWRcIiwgXCJ0aFwiLCBcInRkXCJdKSxcbiAgICBib2R5OiBuZXcgU2V0KFtcImhlYWRcIiwgXCJsaW5rXCIsIFwic2NyaXB0XCJdKSxcbiAgICBsaTogbmV3IFNldChbXCJsaVwiXSksXG4gICAgcDogcFRhZyxcbiAgICBoMTogcFRhZyxcbiAgICBoMjogcFRhZyxcbiAgICBoMzogcFRhZyxcbiAgICBoNDogcFRhZyxcbiAgICBoNTogcFRhZyxcbiAgICBoNjogcFRhZyxcbiAgICBzZWxlY3Q6IGZvcm1UYWdzLFxuICAgIGlucHV0OiBmb3JtVGFncyxcbiAgICBvdXRwdXQ6IGZvcm1UYWdzLFxuICAgIGJ1dHRvbjogZm9ybVRhZ3MsXG4gICAgZGF0YWxpc3Q6IGZvcm1UYWdzLFxuICAgIHRleHRhcmVhOiBmb3JtVGFncyxcbiAgICBvcHRpb246IG5ldyBTZXQoW1wib3B0aW9uXCJdKSxcbiAgICBvcHRncm91cDogbmV3IFNldChbXCJvcHRncm91cFwiLCBcIm9wdGlvblwiXSksXG4gICAgZGQ6IG5ldyBTZXQoW1wiZHRcIiwgXCJkZFwiXSksXG4gICAgZHQ6IG5ldyBTZXQoW1wiZHRcIiwgXCJkZFwiXSksXG4gICAgYWRkcmVzczogcFRhZyxcbiAgICBhcnRpY2xlOiBwVGFnLFxuICAgIGFzaWRlOiBwVGFnLFxuICAgIGJsb2NrcXVvdGU6IHBUYWcsXG4gICAgZGV0YWlsczogcFRhZyxcbiAgICBkaXY6IHBUYWcsXG4gICAgZGw6IHBUYWcsXG4gICAgZmllbGRzZXQ6IHBUYWcsXG4gICAgZmlnY2FwdGlvbjogcFRhZyxcbiAgICBmaWd1cmU6IHBUYWcsXG4gICAgZm9vdGVyOiBwVGFnLFxuICAgIGZvcm06IHBUYWcsXG4gICAgaGVhZGVyOiBwVGFnLFxuICAgIGhyOiBwVGFnLFxuICAgIG1haW46IHBUYWcsXG4gICAgbmF2OiBwVGFnLFxuICAgIG9sOiBwVGFnLFxuICAgIHByZTogcFRhZyxcbiAgICBzZWN0aW9uOiBwVGFnLFxuICAgIHRhYmxlOiBwVGFnLFxuICAgIHVsOiBwVGFnLFxuICAgIHJ0OiBuZXcgU2V0KFtcInJ0XCIsIFwicnBcIl0pLFxuICAgIHJwOiBuZXcgU2V0KFtcInJ0XCIsIFwicnBcIl0pLFxuICAgIHRib2R5OiBuZXcgU2V0KFtcInRoZWFkXCIsIFwidGJvZHlcIl0pLFxuICAgIHRmb290OiBuZXcgU2V0KFtcInRoZWFkXCIsIFwidGJvZHlcIl0pLFxufTtcbnZhciB2b2lkRWxlbWVudHMgPSBuZXcgU2V0KFtcbiAgICBcImFyZWFcIixcbiAgICBcImJhc2VcIixcbiAgICBcImJhc2Vmb250XCIsXG4gICAgXCJiclwiLFxuICAgIFwiY29sXCIsXG4gICAgXCJjb21tYW5kXCIsXG4gICAgXCJlbWJlZFwiLFxuICAgIFwiZnJhbWVcIixcbiAgICBcImhyXCIsXG4gICAgXCJpbWdcIixcbiAgICBcImlucHV0XCIsXG4gICAgXCJpc2luZGV4XCIsXG4gICAgXCJrZXlnZW5cIixcbiAgICBcImxpbmtcIixcbiAgICBcIm1ldGFcIixcbiAgICBcInBhcmFtXCIsXG4gICAgXCJzb3VyY2VcIixcbiAgICBcInRyYWNrXCIsXG4gICAgXCJ3YnJcIixcbl0pO1xudmFyIGZvcmVpZ25Db250ZXh0RWxlbWVudHMgPSBuZXcgU2V0KFtcIm1hdGhcIiwgXCJzdmdcIl0pO1xudmFyIGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzID0gbmV3IFNldChbXG4gICAgXCJtaVwiLFxuICAgIFwibW9cIixcbiAgICBcIm1uXCIsXG4gICAgXCJtc1wiLFxuICAgIFwibXRleHRcIixcbiAgICBcImFubm90YXRpb24teG1sXCIsXG4gICAgXCJmb3JlaWduT2JqZWN0XCIsXG4gICAgXCJkZXNjXCIsXG4gICAgXCJ0aXRsZVwiLFxuXSk7XG52YXIgcmVOYW1lRW5kID0gL1xcc3xcXC8vO1xudmFyIFBhcnNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXJzZXIoY2JzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIC8qKiBUaGUgc3RhcnQgaW5kZXggb2YgdGhlIGxhc3QgZXZlbnQuICovXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIC8qKiBUaGUgZW5kIGluZGV4IG9mIHRoZSBsYXN0IGV2ZW50LiAqL1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gbnVsbDtcbiAgICAgICAgdGhpcy50YWduYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuYXR0cmlicyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dCA9IFtdO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNicyA9IGNicyAhPT0gbnVsbCAmJiBjYnMgIT09IHZvaWQgMCA/IGNicyA6IHt9O1xuICAgICAgICB0aGlzLmxvd2VyQ2FzZVRhZ05hbWVzID0gKF9hID0gb3B0aW9ucy5sb3dlckNhc2VUYWdzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAhb3B0aW9ucy54bWxNb2RlO1xuICAgICAgICB0aGlzLmxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzID1cbiAgICAgICAgICAgIChfYiA9IG9wdGlvbnMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICFvcHRpb25zLnhtbE1vZGU7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gbmV3ICgoX2MgPSBvcHRpb25zLlRva2VuaXplcikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogVG9rZW5pemVyXzEuZGVmYXVsdCkodGhpcy5vcHRpb25zLCB0aGlzKTtcbiAgICAgICAgKF9lID0gKF9kID0gdGhpcy5jYnMpLm9ucGFyc2VyaW5pdCkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmNhbGwoX2QsIHRoaXMpO1xuICAgIH1cbiAgICBQYXJzZXIucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKGluaXRpYWxPZmZzZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRva2VuaXplci5zZWN0aW9uU3RhcnQgPD0gaW5pdGlhbE9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLnRva2VuaXplci5zZWN0aW9uU3RhcnQgLSBpbml0aWFsT2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gdGhpcy5lbmRJbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IHRoaXMudG9rZW5pemVyLmdldEFic29sdXRlSW5kZXgoKTtcbiAgICB9O1xuICAgIC8vIFRva2VuaXplciBldmVudCBoYW5kbGVyc1xuICAgIFBhcnNlci5wcm90b3R5cGUub250ZXh0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbigxKTtcbiAgICAgICAgdGhpcy5lbmRJbmRleC0tO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub250ZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZGF0YSk7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9ub3BlbnRhZ25hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhZ25hbWUgPSBuYW1lO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy54bWxNb2RlICYmXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3BlbkltcGxpZXNDbG9zZSwgbmFtZSkpIHtcbiAgICAgICAgICAgIHZhciBlbCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICBvcGVuSW1wbGllc0Nsb3NlW25hbWVdLmhhcygoZWwgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0pKSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZXRhZyhlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy54bWxNb2RlIHx8ICF2b2lkRWxlbWVudHMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2gobmFtZSk7XG4gICAgICAgICAgICBpZiAoZm9yZWlnbkNvbnRleHRFbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0LnB1c2godHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChodG1sSW50ZWdyYXRpb25FbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0LnB1c2goZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbm9wZW50YWduYW1lKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgbmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbm9wZW50YWcpXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnMgPSB7fTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25vcGVudGFnZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKDEpO1xuICAgICAgICBpZiAodGhpcy5hdHRyaWJzKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25vcGVudGFnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcy50YWduYW1lLCB0aGlzLmF0dHJpYnMpO1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy54bWxNb2RlICYmXG4gICAgICAgICAgICB0aGlzLmNicy5vbmNsb3NldGFnICYmXG4gICAgICAgICAgICB2b2lkRWxlbWVudHMuaGFzKHRoaXMudGFnbmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY2xvc2V0YWcodGhpcy50YWduYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhZ25hbWUgPSBcIlwiO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmNsb3NldGFnID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbigxKTtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcmVpZ25Db250ZXh0RWxlbWVudHMuaGFzKG5hbWUpIHx8XG4gICAgICAgICAgICBodG1sSW50ZWdyYXRpb25FbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoICYmXG4gICAgICAgICAgICAodGhpcy5vcHRpb25zLnhtbE1vZGUgfHwgIXZvaWRFbGVtZW50cy5oYXMobmFtZSkpKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5zdGFjay5sYXN0SW5kZXhPZihuYW1lKTtcbiAgICAgICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2JzLm9uY2xvc2V0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zID0gdGhpcy5zdGFjay5sZW5ndGggLSBwb3M7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwb3MtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Uga25vdyB0aGUgc3RhY2sgaGFzIHN1ZmZpY2llbnQgZWxlbWVudHMuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNicy5vbmNsb3NldGFnKHRoaXMuc3RhY2sucG9wKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuYW1lID09PSBcInBcIiAmJiAhdGhpcy5vcHRpb25zLnhtbE1vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ub3BlbnRhZ25hbWUobmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRUYWcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5vcHRpb25zLnhtbE1vZGUgJiYgKG5hbWUgPT09IFwiYnJcIiB8fCBuYW1lID09PSBcInBcIikpIHtcbiAgICAgICAgICAgIHRoaXMub25vcGVudGFnbmFtZShuYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VDdXJyZW50VGFnKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25zZWxmY2xvc2luZ3RhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy54bWxNb2RlIHx8XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucmVjb2duaXplU2VsZkNsb3NpbmcgfHxcbiAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHRbdGhpcy5mb3JlaWduQ29udGV4dC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRUYWcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25vcGVudGFnZW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuY2xvc2VDdXJyZW50VGFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMudGFnbmFtZTtcbiAgICAgICAgdGhpcy5vbm9wZW50YWdlbmQoKTtcbiAgICAgICAgLypcbiAgICAgICAgICogU2VsZi1jbG9zaW5nIHRhZ3Mgd2lsbCBiZSBvbiB0aGUgdG9wIG9mIHRoZSBzdGFja1xuICAgICAgICAgKiAoY2hlYXBlciBjaGVjayB0aGFuIGluIG9uY2xvc2V0YWcpXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdID09PSBuYW1lKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jbG9zZXRhZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYm5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYm5hbWUgPSBuYW1lO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYmRhdGEgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSArPSB2YWx1ZTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25hdHRyaWJlbmQgPSBmdW5jdGlvbiAocXVvdGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uYXR0cmlidXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcy5hdHRyaWJuYW1lLCB0aGlzLmF0dHJpYnZhbHVlLCBxdW90ZSk7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnMgJiZcbiAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJzLCB0aGlzLmF0dHJpYm5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnNbdGhpcy5hdHRyaWJuYW1lXSA9IHRoaXMuYXR0cmlidmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSA9IFwiXCI7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLmdldEluc3RydWN0aW9uTmFtZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaWR4ID0gdmFsdWUuc2VhcmNoKHJlTmFtZUVuZCk7XG4gICAgICAgIHZhciBuYW1lID0gaWR4IDwgMCA/IHZhbHVlIDogdmFsdWUuc3Vic3RyKDAsIGlkeCk7XG4gICAgICAgIGlmICh0aGlzLmxvd2VyQ2FzZVRhZ05hbWVzKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmRlY2xhcmF0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgdmFyIG5hbWVfMSA9IHRoaXMuZ2V0SW5zdHJ1Y3Rpb25OYW1lKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKFwiIVwiICsgbmFtZV8xLCBcIiFcIiArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBuYW1lXzIgPSB0aGlzLmdldEluc3RydWN0aW9uTmFtZSh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbihcIj9cIiArIG5hbWVfMiwgXCI/XCIgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25jb21tZW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbig0KTtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY29tbWVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHZhbHVlKTtcbiAgICAgICAgKF9kID0gKF9jID0gdGhpcy5jYnMpLm9uY29tbWVudGVuZCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MpO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmNkYXRhID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKDEpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnhtbE1vZGUgfHwgdGhpcy5vcHRpb25zLnJlY29nbml6ZUNEQVRBKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jZGF0YXN0YXJ0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub250ZXh0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgdmFsdWUpO1xuICAgICAgICAgICAgKF9mID0gKF9lID0gdGhpcy5jYnMpLm9uY2RhdGFlbmQpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsKF9lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25jb21tZW50KFwiW0NEQVRBW1wiICsgdmFsdWUgKyBcIl1dXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZXJyKTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbmNsb3NldGFnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5zdGFjay5sZW5ndGg7IGkgPiAwOyB0aGlzLmNicy5vbmNsb3NldGFnKHRoaXMuc3RhY2tbLS1pXSkpXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICB9XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmVuZCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBwYXJzZXIgdG8gYSBibGFuayBzdGF0ZSwgcmVhZHkgdG8gcGFyc2UgYSBuZXcgSFRNTCBkb2N1bWVudFxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9ucmVzZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIucmVzZXQoKTtcbiAgICAgICAgdGhpcy50YWduYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub25wYXJzZXJpbml0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgdGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHBhcnNlciwgdGhlbiBwYXJzZXMgYSBjb21wbGV0ZSBkb2N1bWVudCBhbmRcbiAgICAgKiBwdXNoZXMgaXQgdG8gdGhlIGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSBEb2N1bWVudCB0byBwYXJzZS5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ29tcGxldGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZW5kKGRhdGEpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgY2h1bmsgb2YgZGF0YSBhbmQgY2FsbHMgdGhlIGNvcnJlc3BvbmRpbmcgY2FsbGJhY2tzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIENodW5rIHRvIHBhcnNlLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIud3JpdGUoY2h1bmspO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciBhbmQgY2xlYXJzIHRoZSBzdGFjaywgY2FsbHMgb25lbmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgT3B0aW9uYWwgZmluYWwgY2h1bmsgdG8gcGFyc2UuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIuZW5kKGNodW5rKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhdXNlcyBwYXJzaW5nLiBUaGUgcGFyc2VyIHdvbid0IGVtaXQgZXZlbnRzIHVudGlsIGByZXN1bWVgIGlzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRva2VuaXplci5wYXVzZSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzdW1lcyBwYXJzaW5nIGFmdGVyIGBwYXVzZWAgd2FzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIucmVzdW1lKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBgd3JpdGVgLCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgQ2h1bmsgdG8gcGFyc2UuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy53cml0ZShjaHVuayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBgZW5kYCwgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIE9wdGlvbmFsIGZpbmFsIGNodW5rIHRvIHBhcnNlLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5kb25lID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHRoaXMuZW5kKGNodW5rKTtcbiAgICB9O1xuICAgIHJldHVybiBQYXJzZXI7XG59KCkpO1xuZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2xvbmVOb2RlID0gZXhwb3J0cy5FbGVtZW50ID0gZXhwb3J0cy5Eb2N1bWVudCA9IGV4cG9ydHMuTm9kZVdpdGhDaGlsZHJlbiA9IGV4cG9ydHMuUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gZXhwb3J0cy5Db21tZW50ID0gZXhwb3J0cy5UZXh0ID0gZXhwb3J0cy5EYXRhTm9kZSA9IGV4cG9ydHMuTm9kZSA9IHZvaWQgMDtcbnZhciBub2RlVHlwZXMgPSBuZXcgTWFwKFtcbiAgICBbXCJ0YWdcIiAvKiBUYWcgKi8sIDFdLFxuICAgIFtcInNjcmlwdFwiIC8qIFNjcmlwdCAqLywgMV0sXG4gICAgW1wic3R5bGVcIiAvKiBTdHlsZSAqLywgMV0sXG4gICAgW1wiZGlyZWN0aXZlXCIgLyogRGlyZWN0aXZlICovLCAxXSxcbiAgICBbXCJ0ZXh0XCIgLyogVGV4dCAqLywgM10sXG4gICAgW1wiY2RhdGFcIiAvKiBDREFUQSAqLywgNF0sXG4gICAgW1wiY29tbWVudFwiIC8qIENvbW1lbnQgKi8sIDhdLFxuICAgIFtcInJvb3RcIiAvKiBSb290ICovLCA5XSxcbl0pO1xuLyoqXG4gKiBUaGlzIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgdGhlIHByb3RvdHlwZSBmb3IgTm9kZXMgd2hlbiBjcmVhdGluZyBhXG4gKiBET00tTGV2ZWwtMS1jb21wbGlhbnQgc3RydWN0dXJlLlxuICovXG52YXIgTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE5vZGUodHlwZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAvKiogUGFyZW50IG9mIHRoZSBub2RlICovXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgLyoqIFByZXZpb3VzIHNpYmxpbmcgKi9cbiAgICAgICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICAgICAgLyoqIE5leHQgc2libGluZyAqL1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aFN0YXJ0SW5kaWNlc2Agb24gdGhlIGhhbmRsZXIgdG8gYmUgYHRydWUuICovXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IG51bGw7XG4gICAgICAgIC8qKiBUaGUgZW5kIGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aEVuZEluZGljZXNgIG9uIHRoZSBoYW5kbGVyIHRvIGJlIGB0cnVlLiAqL1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcIm5vZGVUeXBlXCIsIHtcbiAgICAgICAgLy8gUmVhZC1vbmx5IGFsaWFzZXNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gbm9kZVR5cGVzLmdldCh0aGlzLnR5cGUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInBhcmVudE5vZGVcIiwge1xuICAgICAgICAvLyBSZWFkLXdyaXRlIGFsaWFzZXMgZm9yIHByb3BlcnRpZXNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwicHJldmlvdXNTaWJsaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICAgICAgICB0aGlzLnByZXYgPSBwcmV2O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcIm5leHRTaWJsaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQ2xvbmUgdGhpcyBub2RlLCBhbmQgb3B0aW9uYWxseSBpdHMgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVjdXJzaXZlIENsb25lIGNoaWxkIG5vZGVzIGFzIHdlbGwuXG4gICAgICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGUgbm9kZS5cbiAgICAgKi9cbiAgICBOb2RlLnByb3RvdHlwZS5jbG9uZU5vZGUgPSBmdW5jdGlvbiAocmVjdXJzaXZlKSB7XG4gICAgICAgIGlmIChyZWN1cnNpdmUgPT09IHZvaWQgMCkgeyByZWN1cnNpdmUgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gY2xvbmVOb2RlKHRoaXMsIHJlY3Vyc2l2ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gTm9kZTtcbn0oKSk7XG5leHBvcnRzLk5vZGUgPSBOb2RlO1xudmFyIERhdGFOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXRhTm9kZSwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSBvZiB0aGUgbm9kZVxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSBjb250ZW50IG9mIHRoZSBkYXRhIG5vZGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBEYXRhTm9kZSh0eXBlLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHR5cGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhTm9kZS5wcm90b3R5cGUsIFwibm9kZVZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIERhdGFOb2RlO1xufShOb2RlKSk7XG5leHBvcnRzLkRhdGFOb2RlID0gRGF0YU5vZGU7XG52YXIgVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwidGV4dFwiIC8qIFRleHQgKi8sIGRhdGEpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBUZXh0O1xufShEYXRhTm9kZSkpO1xuZXhwb3J0cy5UZXh0ID0gVGV4dDtcbnZhciBDb21tZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb21tZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbW1lbnQoZGF0YSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJjb21tZW50XCIgLyogQ29tbWVudCAqLywgZGF0YSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIENvbW1lbnQ7XG59KERhdGFOb2RlKSk7XG5leHBvcnRzLkNvbW1lbnQgPSBDb21tZW50O1xudmFyIFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByb2Nlc3NpbmdJbnN0cnVjdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFwiZGlyZWN0aXZlXCIgLyogRGlyZWN0aXZlICovLCBkYXRhKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xufShEYXRhTm9kZSkpO1xuZXhwb3J0cy5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG4vKipcbiAqIEEgYE5vZGVgIHRoYXQgY2FuIGhhdmUgY2hpbGRyZW4uXG4gKi9cbnZhciBOb2RlV2l0aENoaWxkcmVuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOb2RlV2l0aENoaWxkcmVuLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB0eXBlIFR5cGUgb2YgdGhlIG5vZGUuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIENoaWxkcmVuIG9mIHRoZSBub2RlLiBPbmx5IGNlcnRhaW4gbm9kZSB0eXBlcyBjYW4gaGF2ZSBjaGlsZHJlbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBOb2RlV2l0aENoaWxkcmVuKHR5cGUsIGNoaWxkcmVuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHR5cGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVXaXRoQ2hpbGRyZW4ucHJvdG90eXBlLCBcImZpcnN0Q2hpbGRcIiwge1xuICAgICAgICAvLyBBbGlhc2VzXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuY2hpbGRyZW5bMF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZVdpdGhDaGlsZHJlbi5wcm90b3R5cGUsIFwibGFzdENoaWxkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZVdpdGhDaGlsZHJlbi5wcm90b3R5cGUsIFwiY2hpbGROb2Rlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW47XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gTm9kZVdpdGhDaGlsZHJlbjtcbn0oTm9kZSkpO1xuZXhwb3J0cy5Ob2RlV2l0aENoaWxkcmVuID0gTm9kZVdpdGhDaGlsZHJlbjtcbnZhciBEb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRG9jdW1lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnQoY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwicm9vdFwiIC8qIFJvb3QgKi8sIGNoaWxkcmVuKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRG9jdW1lbnQ7XG59KE5vZGVXaXRoQ2hpbGRyZW4pKTtcbmV4cG9ydHMuRG9jdW1lbnQgPSBEb2N1bWVudDtcbnZhciBFbGVtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbGVtZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHRhZywgZWcuIGBkaXZgLCBgc3BhbmAuXG4gICAgICogQHBhcmFtIGF0dHJpYnMgT2JqZWN0IG1hcHBpbmcgYXR0cmlidXRlIG5hbWVzIHRvIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIENoaWxkcmVuIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEVsZW1lbnQobmFtZSwgYXR0cmlicywgY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuID09PSB2b2lkIDApIHsgY2hpbGRyZW4gPSBbXTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBuYW1lID09PSBcInNjcmlwdFwiXG4gICAgICAgICAgICA/IFwic2NyaXB0XCIgLyogU2NyaXB0ICovXG4gICAgICAgICAgICA6IG5hbWUgPT09IFwic3R5bGVcIlxuICAgICAgICAgICAgICAgID8gXCJzdHlsZVwiIC8qIFN0eWxlICovXG4gICAgICAgICAgICAgICAgOiBcInRhZ1wiIC8qIFRhZyAqLywgY2hpbGRyZW4pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5hdHRyaWJzID0gYXR0cmlicztcbiAgICAgICAgX3RoaXMuYXR0cmlicyA9IGF0dHJpYnM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVsZW1lbnQucHJvdG90eXBlLCBcInRhZ05hbWVcIiwge1xuICAgICAgICAvLyBET00gTGV2ZWwgMSBhbGlhc2VzXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbGVtZW50LnByb3RvdHlwZSwgXCJhdHRyaWJ1dGVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYXR0cmlicykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmF0dHJpYnNbbmFtZV0sXG4gICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogKF9hID0gX3RoaXNbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAoX2IgPSBfdGhpc1tcIngtYXR0cmlic1ByZWZpeFwiXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW25hbWVdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRWxlbWVudDtcbn0oTm9kZVdpdGhDaGlsZHJlbikpO1xuZXhwb3J0cy5FbGVtZW50ID0gRWxlbWVudDtcbi8qKlxuICogQ2xvbmUgYSBub2RlLCBhbmQgb3B0aW9uYWxseSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHJlY3Vyc2l2ZSBDbG9uZSBjaGlsZCBub2RlcyBhcyB3ZWxsLlxuICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGUgbm9kZS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVOb2RlKG5vZGUsIHJlY3Vyc2l2ZSkge1xuICAgIGlmIChyZWN1cnNpdmUgPT09IHZvaWQgMCkgeyByZWN1cnNpdmUgPSBmYWxzZTsgfVxuICAgIHZhciByZXN1bHQ7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcInRleHRcIiAvKiBUZXh0ICovOlxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFRleHQobm9kZS5kYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGlyZWN0aXZlXCIgLyogRGlyZWN0aXZlICovOiB7XG4gICAgICAgICAgICB2YXIgaW5zdHIgPSBub2RlO1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbihpbnN0ci5uYW1lLCBpbnN0ci5kYXRhKTtcbiAgICAgICAgICAgIGlmIChpbnN0cltcIngtbmFtZVwiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W1wieC1uYW1lXCJdID0gaW5zdHJbXCJ4LW5hbWVcIl07XG4gICAgICAgICAgICAgICAgcmVzdWx0W1wieC1wdWJsaWNJZFwiXSA9IGluc3RyW1wieC1wdWJsaWNJZFwiXTtcbiAgICAgICAgICAgICAgICByZXN1bHRbXCJ4LXN5c3RlbUlkXCJdID0gaW5zdHJbXCJ4LXN5c3RlbUlkXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvbW1lbnRcIiAvKiBDb21tZW50ICovOlxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IENvbW1lbnQobm9kZS5kYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidGFnXCIgLyogVGFnICovOlxuICAgICAgICBjYXNlIFwic2NyaXB0XCIgLyogU2NyaXB0ICovOlxuICAgICAgICBjYXNlIFwic3R5bGVcIiAvKiBTdHlsZSAqLzoge1xuICAgICAgICAgICAgdmFyIGVsZW0gPSBub2RlO1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVjdXJzaXZlID8gY2xvbmVDaGlsZHJlbihlbGVtLmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICAgICAgdmFyIGNsb25lXzEgPSBuZXcgRWxlbWVudChlbGVtLm5hbWUsIF9fYXNzaWduKHt9LCBlbGVtLmF0dHJpYnMpLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gKGNoaWxkLnBhcmVudCA9IGNsb25lXzEpOyB9KTtcbiAgICAgICAgICAgIGlmIChlbGVtW1wieC1hdHRyaWJzTmFtZXNwYWNlXCJdKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVfMVtcIngtYXR0cmlic05hbWVzcGFjZVwiXSA9IF9fYXNzaWduKHt9LCBlbGVtW1wieC1hdHRyaWJzTmFtZXNwYWNlXCJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbGVtW1wieC1hdHRyaWJzUHJlZml4XCJdKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVfMVtcIngtYXR0cmlic1ByZWZpeFwiXSA9IF9fYXNzaWduKHt9LCBlbGVtW1wieC1hdHRyaWJzUHJlZml4XCJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGNsb25lXzE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY2RhdGFcIiAvKiBDREFUQSAqLzoge1xuICAgICAgICAgICAgdmFyIGNkYXRhID0gbm9kZTtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHJlY3Vyc2l2ZSA/IGNsb25lQ2hpbGRyZW4oY2RhdGEuY2hpbGRyZW4pIDogW107XG4gICAgICAgICAgICB2YXIgY2xvbmVfMiA9IG5ldyBOb2RlV2l0aENoaWxkcmVuKG5vZGUudHlwZSwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChjaGlsZC5wYXJlbnQgPSBjbG9uZV8yKTsgfSk7XG4gICAgICAgICAgICByZXN1bHQgPSBjbG9uZV8yO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJvb3RcIiAvKiBSb290ICovOiB7XG4gICAgICAgICAgICB2YXIgZG9jID0gbm9kZTtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHJlY3Vyc2l2ZSA/IGNsb25lQ2hpbGRyZW4oZG9jLmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICAgICAgdmFyIGNsb25lXzMgPSBuZXcgRG9jdW1lbnQoY2hpbGRyZW4pO1xuICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChjaGlsZC5wYXJlbnQgPSBjbG9uZV8zKTsgfSk7XG4gICAgICAgICAgICBpZiAoZG9jW1wieC1tb2RlXCJdKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVfM1tcIngtbW9kZVwiXSA9IGRvY1tcIngtbW9kZVwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGNsb25lXzM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZG9jdHlwZVwiIC8qIERvY3R5cGUgKi86IHtcbiAgICAgICAgICAgIC8vIFRoaXMgdHlwZSBpc24ndCB1c2VkIHlldC5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCB5ZXQ6IEVsZW1lbnRUeXBlLkRvY3R5cGUgY2FzZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuc3RhcnRJbmRleCA9IG5vZGUuc3RhcnRJbmRleDtcbiAgICByZXN1bHQuZW5kSW5kZXggPSBub2RlLmVuZEluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmNsb25lTm9kZSA9IGNsb25lTm9kZTtcbmZ1bmN0aW9uIGNsb25lQ2hpbGRyZW4oY2hpbGRzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gY2hpbGRzLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNsb25lTm9kZShjaGlsZCwgdHJ1ZSk7IH0pO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hpbGRyZW5baV0ucHJldiA9IGNoaWxkcmVuW2kgLSAxXTtcbiAgICAgICAgY2hpbGRyZW5baSAtIDFdLm5leHQgPSBjaGlsZHJlbltpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRvbUhhbmRsZXIgPSB2b2lkIDA7XG52YXIgbm9kZV8xID0gcmVxdWlyZShcIi4vbm9kZVwiKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ub2RlXCIpLCBleHBvcnRzKTtcbnZhciByZVdoaXRlc3BhY2UgPSAvXFxzKy9nO1xuLy8gRGVmYXVsdCBvcHRpb25zXG52YXIgZGVmYXVsdE9wdHMgPSB7XG4gICAgbm9ybWFsaXplV2hpdGVzcGFjZTogZmFsc2UsXG4gICAgd2l0aFN0YXJ0SW5kaWNlczogZmFsc2UsXG4gICAgd2l0aEVuZEluZGljZXM6IGZhbHNlLFxufTtcbnZhciBEb21IYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBDYWxsZWQgb25jZSBwYXJzaW5nIGhhcyBjb21wbGV0ZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgU2V0dGluZ3MgZm9yIHRoZSBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBlbGVtZW50Q0IgQ2FsbGJhY2sgd2hlbmV2ZXIgYSB0YWcgaXMgY2xvc2VkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIERvbUhhbmRsZXIoY2FsbGJhY2ssIG9wdGlvbnMsIGVsZW1lbnRDQikge1xuICAgICAgICAvKiogVGhlIGVsZW1lbnRzIG9mIHRoZSBET00gKi9cbiAgICAgICAgdGhpcy5kb20gPSBbXTtcbiAgICAgICAgLyoqIFRoZSByb290IGVsZW1lbnQgZm9yIHRoZSBET00gKi9cbiAgICAgICAgdGhpcy5yb290ID0gbmV3IG5vZGVfMS5Eb2N1bWVudCh0aGlzLmRvbSk7XG4gICAgICAgIC8qKiBJbmRpY2F0ZWQgd2hldGhlciBwYXJzaW5nIGhhcyBiZWVuIGNvbXBsZXRlZC4gKi9cbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIC8qKiBTdGFjayBvZiBvcGVuIHRhZ3MuICovXG4gICAgICAgIHRoaXMudGFnU3RhY2sgPSBbdGhpcy5yb290XTtcbiAgICAgICAgLyoqIEEgZGF0YSBub2RlIHRoYXQgaXMgc3RpbGwgYmVpbmcgd3JpdHRlbiB0by4gKi9cbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIHBhcnNlciBpbnN0YW5jZS4gVXNlZCBmb3IgbG9jYXRpb24gaW5mb3JtYXRpb24uICovXG4gICAgICAgIHRoaXMucGFyc2VyID0gbnVsbDtcbiAgICAgICAgLy8gTWFrZSBpdCBwb3NzaWJsZSB0byBza2lwIGFyZ3VtZW50cywgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBlbGVtZW50Q0IgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjYWxsYmFjaztcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjayAhPT0gbnVsbCAmJiBjYWxsYmFjayAhPT0gdm9pZCAwID8gY2FsbGJhY2sgOiBudWxsO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiBkZWZhdWx0T3B0cztcbiAgICAgICAgdGhpcy5lbGVtZW50Q0IgPSBlbGVtZW50Q0IgIT09IG51bGwgJiYgZWxlbWVudENCICE9PSB2b2lkIDAgPyBlbGVtZW50Q0IgOiBudWxsO1xuICAgIH1cbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnBhcnNlcmluaXQgPSBmdW5jdGlvbiAocGFyc2VyKSB7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIH07XG4gICAgLy8gUmVzZXRzIHRoZSBoYW5kbGVyIGJhY2sgdG8gc3RhcnRpbmcgc3RhdGVcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuZG9tID0gW107XG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBub2RlXzEuRG9jdW1lbnQodGhpcy5kb20pO1xuICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50YWdTdGFjayA9IFt0aGlzLnJvb3RdO1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSAoX2EgPSB0aGlzLnBhcnNlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICB9O1xuICAgIC8vIFNpZ25hbHMgdGhlIGhhbmRsZXIgdGhhdCBwYXJzaW5nIGlzIGRvbmVcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKG51bGwpO1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKGVycm9yKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9uY2xvc2V0YWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBudWxsO1xuICAgICAgICB2YXIgZWxlbSA9IHRoaXMudGFnU3RhY2sucG9wKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aEVuZEluZGljZXMpIHtcbiAgICAgICAgICAgIGVsZW0uZW5kSW5kZXggPSB0aGlzLnBhcnNlci5lbmRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Q0IpXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRDQihlbGVtKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9ub3BlbnRhZyA9IGZ1bmN0aW9uIChuYW1lLCBhdHRyaWJzKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gbmV3IG5vZGVfMS5FbGVtZW50KG5hbWUsIGF0dHJpYnMpO1xuICAgICAgICB0aGlzLmFkZE5vZGUoZWxlbWVudCk7XG4gICAgICAgIHRoaXMudGFnU3RhY2sucHVzaChlbGVtZW50KTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9udGV4dCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVXaGl0ZXNwYWNlID0gdGhpcy5vcHRpb25zLm5vcm1hbGl6ZVdoaXRlc3BhY2U7XG4gICAgICAgIHZhciBsYXN0Tm9kZSA9IHRoaXMubGFzdE5vZGU7XG4gICAgICAgIGlmIChsYXN0Tm9kZSAmJiBsYXN0Tm9kZS50eXBlID09PSBcInRleHRcIiAvKiBUZXh0ICovKSB7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplV2hpdGVzcGFjZSkge1xuICAgICAgICAgICAgICAgIGxhc3ROb2RlLmRhdGEgPSAobGFzdE5vZGUuZGF0YSArIGRhdGEpLnJlcGxhY2UocmVXaGl0ZXNwYWNlLCBcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYXN0Tm9kZS5kYXRhICs9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplV2hpdGVzcGFjZSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UocmVXaGl0ZXNwYWNlLCBcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5ldyBub2RlXzEuVGV4dChkYXRhKTtcbiAgICAgICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmNvbW1lbnQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5sYXN0Tm9kZSAmJiB0aGlzLmxhc3ROb2RlLnR5cGUgPT09IFwiY29tbWVudFwiIC8qIENvbW1lbnQgKi8pIHtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGUuZGF0YSArPSBkYXRhO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfMS5Db21tZW50KGRhdGEpO1xuICAgICAgICB0aGlzLmFkZE5vZGUobm9kZSk7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBub2RlO1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25jb21tZW50ZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gbnVsbDtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9uY2RhdGFzdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRleHQgPSBuZXcgbm9kZV8xLlRleHQoXCJcIik7XG4gICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfMS5Ob2RlV2l0aENoaWxkcmVuKFwiY2RhdGFcIiAvKiBDREFUQSAqLywgW3RleHRdKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKG5vZGUpO1xuICAgICAgICB0ZXh0LnBhcmVudCA9IG5vZGU7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSB0ZXh0O1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25jZGF0YWVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfMS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24obmFtZSwgZGF0YSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUNhbGxiYWNrID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKGVycm9yLCB0aGlzLmRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5hZGROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMudGFnU3RhY2tbdGhpcy50YWdTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIHByZXZpb3VzU2libGluZyA9IHBhcmVudC5jaGlsZHJlbltwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aFN0YXJ0SW5kaWNlcykge1xuICAgICAgICAgICAgbm9kZS5zdGFydEluZGV4ID0gdGhpcy5wYXJzZXIuc3RhcnRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLndpdGhFbmRJbmRpY2VzKSB7XG4gICAgICAgICAgICBub2RlLmVuZEluZGV4ID0gdGhpcy5wYXJzZXIuZW5kSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgIGlmIChwcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgICAgIG5vZGUucHJldiA9IHByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgIHByZXZpb3VzU2libGluZy5uZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5hZGREYXRhTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGU7XG4gICAgfTtcbiAgICByZXR1cm4gRG9tSGFuZGxlcjtcbn0oKSk7XG5leHBvcnRzLkRvbUhhbmRsZXIgPSBEb21IYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gRG9tSGFuZGxlcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRG9jdHlwZSA9IGV4cG9ydHMuQ0RBVEEgPSBleHBvcnRzLlRhZyA9IGV4cG9ydHMuU3R5bGUgPSBleHBvcnRzLlNjcmlwdCA9IGV4cG9ydHMuQ29tbWVudCA9IGV4cG9ydHMuRGlyZWN0aXZlID0gZXhwb3J0cy5UZXh0ID0gZXhwb3J0cy5Sb290ID0gZXhwb3J0cy5pc1RhZyA9IHZvaWQgMDtcbi8qKlxuICogVGVzdHMgd2hldGhlciBhbiBlbGVtZW50IGlzIGEgdGFnIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIHRlc3RcbiAqL1xuZnVuY3Rpb24gaXNUYWcoZWxlbSkge1xuICAgIHJldHVybiAoZWxlbS50eXBlID09PSBcInRhZ1wiIC8qIFRhZyAqLyB8fFxuICAgICAgICBlbGVtLnR5cGUgPT09IFwic2NyaXB0XCIgLyogU2NyaXB0ICovIHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gXCJzdHlsZVwiIC8qIFN0eWxlICovKTtcbn1cbmV4cG9ydHMuaXNUYWcgPSBpc1RhZztcbi8vIEV4cG9ydHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4vKiogVHlwZSBmb3IgdGhlIHJvb3QgZWxlbWVudCBvZiBhIGRvY3VtZW50ICovXG5leHBvcnRzLlJvb3QgPSBcInJvb3RcIiAvKiBSb290ICovO1xuLyoqIFR5cGUgZm9yIFRleHQgKi9cbmV4cG9ydHMuVGV4dCA9IFwidGV4dFwiIC8qIFRleHQgKi87XG4vKiogVHlwZSBmb3IgPD8gLi4uID8+ICovXG5leHBvcnRzLkRpcmVjdGl2ZSA9IFwiZGlyZWN0aXZlXCIgLyogRGlyZWN0aXZlICovO1xuLyoqIFR5cGUgZm9yIDwhLS0gLi4uIC0tPiAqL1xuZXhwb3J0cy5Db21tZW50ID0gXCJjb21tZW50XCIgLyogQ29tbWVudCAqLztcbi8qKiBUeXBlIGZvciA8c2NyaXB0PiB0YWdzICovXG5leHBvcnRzLlNjcmlwdCA9IFwic2NyaXB0XCIgLyogU2NyaXB0ICovO1xuLyoqIFR5cGUgZm9yIDxzdHlsZT4gdGFncyAqL1xuZXhwb3J0cy5TdHlsZSA9IFwic3R5bGVcIiAvKiBTdHlsZSAqLztcbi8qKiBUeXBlIGZvciBBbnkgdGFnICovXG5leHBvcnRzLlRhZyA9IFwidGFnXCIgLyogVGFnICovO1xuLyoqIFR5cGUgZm9yIDwhW0NEQVRBWyAuLi4gXV0+ICovXG5leHBvcnRzLkNEQVRBID0gXCJjZGF0YVwiIC8qIENEQVRBICovO1xuLyoqIFR5cGUgZm9yIDwhZG9jdHlwZSAuLi4+ICovXG5leHBvcnRzLkRvY3R5cGUgPSBcImRvY3R5cGVcIiAvKiBEb2N0eXBlICovO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNDaGlsZHJlbiA9IGV4cG9ydHMuaXNDb21tZW50ID0gZXhwb3J0cy5pc1RleHQgPSBleHBvcnRzLmlzQ0RBVEEgPSBleHBvcnRzLmlzVGFnID0gdm9pZCAwO1xudmFyIGRvbWVsZW1lbnR0eXBlXzEgPSByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIik7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaXMgYSBgRWxlbWVudGAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1RhZyhub2RlKSB7XG4gICAgcmV0dXJuIGRvbWVsZW1lbnR0eXBlXzEuaXNUYWcobm9kZSk7XG59XG5leHBvcnRzLmlzVGFnID0gaXNUYWc7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaXMgYSBgTm9kZVdpdGhDaGlsZHJlbmAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc0NEQVRBKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSBcImNkYXRhXCIgLyogQ0RBVEEgKi87XG59XG5leHBvcnRzLmlzQ0RBVEEgPSBpc0NEQVRBO1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGlzIGEgYERhdGFOb2RlYCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gXCJ0ZXh0XCIgLyogVGV4dCAqLztcbn1cbmV4cG9ydHMuaXNUZXh0ID0gaXNUZXh0O1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGlzIGEgYERhdGFOb2RlYCwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzQ29tbWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gXCJjb21tZW50XCIgLyogQ29tbWVudCAqLztcbn1cbmV4cG9ydHMuaXNDb21tZW50ID0gaXNDb21tZW50O1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGlzIGEgYE5vZGVXaXRoQ2hpbGRyZW5gIChoYXMgY2hpbGRyZW4pLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaGFzQ2hpbGRyZW4obm9kZSkge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobm9kZSwgXCJjaGlsZHJlblwiKTtcbn1cbmV4cG9ydHMuaGFzQ2hpbGRyZW4gPSBoYXNDaGlsZHJlbjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlSFRNTCA9IGV4cG9ydHMuZGVjb2RlSFRNTFN0cmljdCA9IGV4cG9ydHMuZGVjb2RlWE1MID0gdm9pZCAwO1xudmFyIGVudGl0aWVzX2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL2VudGl0aWVzLmpzb25cIikpO1xudmFyIGxlZ2FjeV9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy9sZWdhY3kuanNvblwiKSk7XG52YXIgeG1sX2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL3htbC5qc29uXCIpKTtcbnZhciBkZWNvZGVfY29kZXBvaW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZGVjb2RlX2NvZGVwb2ludFwiKSk7XG52YXIgc3RyaWN0RW50aXR5UmUgPSAvJig/OlthLXpBLVowLTldK3wjW3hYXVtcXGRhLWZBLUZdK3wjXFxkKyk7L2c7XG5leHBvcnRzLmRlY29kZVhNTCA9IGdldFN0cmljdERlY29kZXIoeG1sX2pzb25fMS5kZWZhdWx0KTtcbmV4cG9ydHMuZGVjb2RlSFRNTFN0cmljdCA9IGdldFN0cmljdERlY29kZXIoZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpO1xuZnVuY3Rpb24gZ2V0U3RyaWN0RGVjb2RlcihtYXApIHtcbiAgICB2YXIgcmVwbGFjZSA9IGdldFJlcGxhY2VyKG1hcCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIFN0cmluZyhzdHIpLnJlcGxhY2Uoc3RyaWN0RW50aXR5UmUsIHJlcGxhY2UpOyB9O1xufVxudmFyIHNvcnRlciA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiAoYSA8IGIgPyAxIDogLTEpOyB9O1xuZXhwb3J0cy5kZWNvZGVIVE1MID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGVnYWN5ID0gT2JqZWN0LmtleXMobGVnYWN5X2pzb25fMS5kZWZhdWx0KS5zb3J0KHNvcnRlcik7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlbnRpdGllc19qc29uXzEuZGVmYXVsdCkuc29ydChzb3J0ZXIpO1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGxlZ2FjeVtqXSA9PT0ga2V5c1tpXSkge1xuICAgICAgICAgICAga2V5c1tpXSArPSBcIjs/XCI7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBrZXlzW2ldICs9IFwiO1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCImKD86XCIgKyBrZXlzLmpvaW4oXCJ8XCIpICsgXCJ8I1t4WF1bXFxcXGRhLWZBLUZdKzs/fCNcXFxcZCs7PylcIiwgXCJnXCIpO1xuICAgIHZhciByZXBsYWNlID0gZ2V0UmVwbGFjZXIoZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpO1xuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKHN0cikge1xuICAgICAgICBpZiAoc3RyLnN1YnN0cigtMSkgIT09IFwiO1wiKVxuICAgICAgICAgICAgc3RyICs9IFwiO1wiO1xuICAgICAgICByZXR1cm4gcmVwbGFjZShzdHIpO1xuICAgIH1cbiAgICAvLyBUT0RPIGNvbnNpZGVyIGNyZWF0aW5nIGEgbWVyZ2VkIG1hcFxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKHJlLCByZXBsYWNlcik7IH07XG59KSgpO1xuZnVuY3Rpb24gZ2V0UmVwbGFjZXIobWFwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuY2hhckF0KDEpID09PSBcIiNcIikge1xuICAgICAgICAgICAgdmFyIHNlY29uZENoYXIgPSBzdHIuY2hhckF0KDIpO1xuICAgICAgICAgICAgaWYgKHNlY29uZENoYXIgPT09IFwiWFwiIHx8IHNlY29uZENoYXIgPT09IFwieFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZV9jb2RlcG9pbnRfMS5kZWZhdWx0KHBhcnNlSW50KHN0ci5zdWJzdHIoMyksIDE2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlX2NvZGVwb2ludF8xLmRlZmF1bHQocGFyc2VJbnQoc3RyLnN1YnN0cigyKSwgMTApKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAgICAgcmV0dXJuIG1hcFtzdHIuc2xpY2UoMSwgLTEpXSB8fCBzdHI7XG4gICAgfTtcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXNjYXBlVVRGOCA9IGV4cG9ydHMuZXNjYXBlID0gZXhwb3J0cy5lbmNvZGVOb25Bc2NpaUhUTUwgPSBleHBvcnRzLmVuY29kZUhUTUwgPSBleHBvcnRzLmVuY29kZVhNTCA9IHZvaWQgMDtcbnZhciB4bWxfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMveG1sLmpzb25cIikpO1xudmFyIGludmVyc2VYTUwgPSBnZXRJbnZlcnNlT2JqKHhtbF9qc29uXzEuZGVmYXVsdCk7XG52YXIgeG1sUmVwbGFjZXIgPSBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZVhNTCk7XG4vKipcbiAqIEVuY29kZXMgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBhcyB3ZWxsIGFzIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIFhNTFxuICogZG9jdW1lbnRzIHVzaW5nIFhNTCBlbnRpdGllcy5cbiAqXG4gKiBJZiBhIGNoYXJhY3RlciBoYXMgbm8gZXF1aXZhbGVudCBlbnRpdHksIGFcbiAqIG51bWVyaWMgaGV4YWRlY2ltYWwgcmVmZXJlbmNlIChlZy4gYCYjeGZjO2ApIHdpbGwgYmUgdXNlZC5cbiAqL1xuZXhwb3J0cy5lbmNvZGVYTUwgPSBnZXRBU0NJSUVuY29kZXIoaW52ZXJzZVhNTCk7XG52YXIgZW50aXRpZXNfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZW50aXRpZXMuanNvblwiKSk7XG52YXIgaW52ZXJzZUhUTUwgPSBnZXRJbnZlcnNlT2JqKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KTtcbnZhciBodG1sUmVwbGFjZXIgPSBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZUhUTUwpO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBlbnRpdGllcyBhbmQgbm9uLUFTQ0lJIGNoYXJhY3RlcnMgaW4gdGhlIGlucHV0LlxuICpcbiAqIFRoaXMgaW5jbHVkZXMgY2hhcmFjdGVycyB0aGF0IGFyZSB2YWxpZCBBU0NJSSBjaGFyYWN0ZXJzIGluIEhUTUwgZG9jdW1lbnRzLlxuICogRm9yIGV4YW1wbGUgYCNgIHdpbGwgYmUgZW5jb2RlZCBhcyBgJm51bTtgLiBUbyBnZXQgYSBtb3JlIGNvbXBhY3Qgb3V0cHV0LFxuICogY29uc2lkZXIgdXNpbmcgdGhlIGBlbmNvZGVOb25Bc2NpaUhUTUxgIGZ1bmN0aW9uLlxuICpcbiAqIElmIGEgY2hhcmFjdGVyIGhhcyBubyBlcXVpdmFsZW50IGVudGl0eSwgYVxuICogbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2UgKGVnLiBgJiN4ZmM7YCkgd2lsbCBiZSB1c2VkLlxuICovXG5leHBvcnRzLmVuY29kZUhUTUwgPSBnZXRJbnZlcnNlKGludmVyc2VIVE1MLCBodG1sUmVwbGFjZXIpO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBub24tQVNDSUkgY2hhcmFjdGVycywgYXMgd2VsbCBhcyBjaGFyYWN0ZXJzIG5vdCB2YWxpZCBpbiBIVE1MXG4gKiBkb2N1bWVudHMgdXNpbmcgSFRNTCBlbnRpdGllcy5cbiAqXG4gKiBJZiBhIGNoYXJhY3RlciBoYXMgbm8gZXF1aXZhbGVudCBlbnRpdHksIGFcbiAqIG51bWVyaWMgaGV4YWRlY2ltYWwgcmVmZXJlbmNlIChlZy4gYCYjeGZjO2ApIHdpbGwgYmUgdXNlZC5cbiAqL1xuZXhwb3J0cy5lbmNvZGVOb25Bc2NpaUhUTUwgPSBnZXRBU0NJSUVuY29kZXIoaW52ZXJzZUhUTUwpO1xuZnVuY3Rpb24gZ2V0SW52ZXJzZU9iaihvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKVxuICAgICAgICAuc29ydCgpXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGludmVyc2UsIG5hbWUpIHtcbiAgICAgICAgaW52ZXJzZVtvYmpbbmFtZV1dID0gXCImXCIgKyBuYW1lICsgXCI7XCI7XG4gICAgICAgIHJldHVybiBpbnZlcnNlO1xuICAgIH0sIHt9KTtcbn1cbmZ1bmN0aW9uIGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlKSB7XG4gICAgdmFyIHNpbmdsZSA9IFtdO1xuICAgIHZhciBtdWx0aXBsZSA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBPYmplY3Qua2V5cyhpbnZlcnNlKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGsgPSBfYVtfaV07XG4gICAgICAgIGlmIChrLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gQWRkIHZhbHVlIHRvIHNpbmdsZSBhcnJheVxuICAgICAgICAgICAgc2luZ2xlLnB1c2goXCJcXFxcXCIgKyBrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEFkZCB2YWx1ZSB0byBtdWx0aXBsZSBhcnJheVxuICAgICAgICAgICAgbXVsdGlwbGUucHVzaChrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBZGQgcmFuZ2VzIHRvIHNpbmdsZSBjaGFyYWN0ZXJzLlxuICAgIHNpbmdsZS5zb3J0KCk7XG4gICAgZm9yICh2YXIgc3RhcnQgPSAwOyBzdGFydCA8IHNpbmdsZS5sZW5ndGggLSAxOyBzdGFydCsrKSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIGVuZCBvZiBhIHJ1biBvZiBjaGFyYWN0ZXJzXG4gICAgICAgIHZhciBlbmQgPSBzdGFydDtcbiAgICAgICAgd2hpbGUgKGVuZCA8IHNpbmdsZS5sZW5ndGggLSAxICYmXG4gICAgICAgICAgICBzaW5nbGVbZW5kXS5jaGFyQ29kZUF0KDEpICsgMSA9PT0gc2luZ2xlW2VuZCArIDFdLmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgICAgIGVuZCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb3VudCA9IDEgKyBlbmQgLSBzdGFydDtcbiAgICAgICAgLy8gV2Ugd2FudCB0byByZXBsYWNlIGF0IGxlYXN0IHRocmVlIGNoYXJhY3RlcnNcbiAgICAgICAgaWYgKGNvdW50IDwgMylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBzaW5nbGUuc3BsaWNlKHN0YXJ0LCBjb3VudCwgc2luZ2xlW3N0YXJ0XSArIFwiLVwiICsgc2luZ2xlW2VuZF0pO1xuICAgIH1cbiAgICBtdWx0aXBsZS51bnNoaWZ0KFwiW1wiICsgc2luZ2xlLmpvaW4oXCJcIikgKyBcIl1cIik7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAobXVsdGlwbGUuam9pbihcInxcIiksIFwiZ1wiKTtcbn1cbi8vIC9bXlxcMC1cXHg3Rl0vZ3VcbnZhciByZU5vbkFTQ0lJID0gLyg/OltcXHg4MC1cXHVEN0ZGXFx1RTAwMC1cXHVGRkZGXXxbXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdfFtcXHVEODAwLVxcdURCRkZdKD8hW1xcdURDMDAtXFx1REZGRl0pfCg/OlteXFx1RDgwMC1cXHVEQkZGXXxeKVtcXHVEQzAwLVxcdURGRkZdKS9nO1xudmFyIGdldENvZGVQb2ludCA9IFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cblN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQgIT0gbnVsbFxuICAgID8gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyLmNvZGVQb2ludEF0KDApOyB9XG4gICAgOiAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgICBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIChjLmNoYXJDb2RlQXQoMCkgLSAweGQ4MDApICogMHg0MDAgK1xuICAgICAgICAgICAgICAgIGMuY2hhckNvZGVBdCgxKSAtXG4gICAgICAgICAgICAgICAgMHhkYzAwICtcbiAgICAgICAgICAgICAgICAweDEwMDAwO1xuICAgICAgICB9O1xuZnVuY3Rpb24gc2luZ2xlQ2hhclJlcGxhY2VyKGMpIHtcbiAgICByZXR1cm4gXCImI3hcIiArIChjLmxlbmd0aCA+IDEgPyBnZXRDb2RlUG9pbnQoYykgOiBjLmNoYXJDb2RlQXQoMCkpXG4gICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgLnRvVXBwZXJDYXNlKCkgKyBcIjtcIjtcbn1cbmZ1bmN0aW9uIGdldEludmVyc2UoaW52ZXJzZSwgcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFcbiAgICAgICAgICAgIC5yZXBsYWNlKHJlLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gaW52ZXJzZVtuYW1lXTsgfSlcbiAgICAgICAgICAgIC5yZXBsYWNlKHJlTm9uQVNDSUksIHNpbmdsZUNoYXJSZXBsYWNlcik7XG4gICAgfTtcbn1cbnZhciByZUVzY2FwZUNoYXJzID0gbmV3IFJlZ0V4cCh4bWxSZXBsYWNlci5zb3VyY2UgKyBcInxcIiArIHJlTm9uQVNDSUkuc291cmNlLCBcImdcIik7XG4vKipcbiAqIEVuY29kZXMgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBhcyB3ZWxsIGFzIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIFhNTFxuICogZG9jdW1lbnRzIHVzaW5nIG51bWVyaWMgaGV4YWRlY2ltYWwgcmVmZXJlbmNlIChlZy4gYCYjeGZjO2ApLlxuICpcbiAqIEhhdmUgYSBsb29rIGF0IGBlc2NhcGVVVEY4YCBpZiB5b3Ugd2FudCBhIG1vcmUgY29uY2lzZSBvdXRwdXQgYXQgdGhlIGV4cGVuc2VcbiAqIG9mIHJlZHVjZWQgdHJhbnNwb3J0YWJpbGl0eS5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZXNjYXBlLlxuICovXG5mdW5jdGlvbiBlc2NhcGUoZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnJlcGxhY2UocmVFc2NhcGVDaGFycywgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbn1cbmV4cG9ydHMuZXNjYXBlID0gZXNjYXBlO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBjaGFyYWN0ZXJzIG5vdCB2YWxpZCBpbiBYTUwgZG9jdW1lbnRzIHVzaW5nIG51bWVyaWMgaGV4YWRlY2ltYWxcbiAqIHJlZmVyZW5jZSAoZWcuIGAmI3hmYztgKS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIG91dHB1dCB3aWxsIGJlIGNoYXJhY3Rlci1zZXQgZGVwZW5kZW50LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVVURjgoZGF0YSkge1xuICAgIHJldHVybiBkYXRhLnJlcGxhY2UoeG1sUmVwbGFjZXIsIHNpbmdsZUNoYXJSZXBsYWNlcik7XG59XG5leHBvcnRzLmVzY2FwZVVURjggPSBlc2NhcGVVVEY4O1xuZnVuY3Rpb24gZ2V0QVNDSUlFbmNvZGVyKG9iaikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YS5yZXBsYWNlKHJlRXNjYXBlQ2hhcnMsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBvYmpbY10gfHwgc2luZ2xlQ2hhclJlcGxhY2VyKGMpOyB9KTtcbiAgICB9O1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVYTUxTdHJpY3QgPSBleHBvcnRzLmRlY29kZUhUTUw1U3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVIVE1MNFN0cmljdCA9IGV4cG9ydHMuZGVjb2RlSFRNTDUgPSBleHBvcnRzLmRlY29kZUhUTUw0ID0gZXhwb3J0cy5kZWNvZGVIVE1MU3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVIVE1MID0gZXhwb3J0cy5kZWNvZGVYTUwgPSBleHBvcnRzLmVuY29kZUhUTUw1ID0gZXhwb3J0cy5lbmNvZGVIVE1MNCA9IGV4cG9ydHMuZXNjYXBlVVRGOCA9IGV4cG9ydHMuZXNjYXBlID0gZXhwb3J0cy5lbmNvZGVOb25Bc2NpaUhUTUwgPSBleHBvcnRzLmVuY29kZUhUTUwgPSBleHBvcnRzLmVuY29kZVhNTCA9IGV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5kZWNvZGVTdHJpY3QgPSBleHBvcnRzLmRlY29kZSA9IHZvaWQgMDtcbnZhciBkZWNvZGVfMSA9IHJlcXVpcmUoXCIuL2RlY29kZVwiKTtcbnZhciBlbmNvZGVfMSA9IHJlcXVpcmUoXCIuL2VuY29kZVwiKTtcbi8qKlxuICogRGVjb2RlcyBhIHN0cmluZyB3aXRoIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBkZWNvZGUuXG4gKiBAcGFyYW0gbGV2ZWwgT3B0aW9uYWwgbGV2ZWwgdG8gZGVjb2RlIGF0LiAwID0gWE1MLCAxID0gSFRNTC4gRGVmYXVsdCBpcyAwLlxuICogQGRlcHJlY2F0ZWQgVXNlIGBkZWNvZGVYTUxgIG9yIGBkZWNvZGVIVE1MYCBkaXJlY3RseS5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlKGRhdGEsIGxldmVsKSB7XG4gICAgcmV0dXJuICghbGV2ZWwgfHwgbGV2ZWwgPD0gMCA/IGRlY29kZV8xLmRlY29kZVhNTCA6IGRlY29kZV8xLmRlY29kZUhUTUwpKGRhdGEpO1xufVxuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4vKipcbiAqIERlY29kZXMgYSBzdHJpbmcgd2l0aCBlbnRpdGllcy4gRG9lcyBub3QgYWxsb3cgbWlzc2luZyB0cmFpbGluZyBzZW1pY29sb25zIGZvciBlbnRpdGllcy5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZGVjb2RlLlxuICogQHBhcmFtIGxldmVsIE9wdGlvbmFsIGxldmVsIHRvIGRlY29kZSBhdC4gMCA9IFhNTCwgMSA9IEhUTUwuIERlZmF1bHQgaXMgMC5cbiAqIEBkZXByZWNhdGVkIFVzZSBgZGVjb2RlSFRNTFN0cmljdGAgb3IgYGRlY29kZVhNTGAgZGlyZWN0bHkuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZVN0cmljdChkYXRhLCBsZXZlbCkge1xuICAgIHJldHVybiAoIWxldmVsIHx8IGxldmVsIDw9IDAgPyBkZWNvZGVfMS5kZWNvZGVYTUwgOiBkZWNvZGVfMS5kZWNvZGVIVE1MU3RyaWN0KShkYXRhKTtcbn1cbmV4cG9ydHMuZGVjb2RlU3RyaWN0ID0gZGVjb2RlU3RyaWN0O1xuLyoqXG4gKiBFbmNvZGVzIGEgc3RyaW5nIHdpdGggZW50aXRpZXMuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVuY29kZS5cbiAqIEBwYXJhbSBsZXZlbCBPcHRpb25hbCBsZXZlbCB0byBlbmNvZGUgYXQuIDAgPSBYTUwsIDEgPSBIVE1MLiBEZWZhdWx0IGlzIDAuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGVuY29kZUhUTUxgLCBgZW5jb2RlWE1MYCBvciBgZW5jb2RlTm9uQXNjaWlIVE1MYCBkaXJlY3RseS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGRhdGEsIGxldmVsKSB7XG4gICAgcmV0dXJuICghbGV2ZWwgfHwgbGV2ZWwgPD0gMCA/IGVuY29kZV8xLmVuY29kZVhNTCA6IGVuY29kZV8xLmVuY29kZUhUTUwpKGRhdGEpO1xufVxuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG52YXIgZW5jb2RlXzIgPSByZXF1aXJlKFwiLi9lbmNvZGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVYTUxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV8yLmVuY29kZVhNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZUhUTUxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV8yLmVuY29kZUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVOb25Bc2NpaUhUTUxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV8yLmVuY29kZU5vbkFzY2lpSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVzY2FwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlXzIuZXNjYXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlVVRGOFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlXzIuZXNjYXBlVVRGODsgfSB9KTtcbi8vIExlZ2FjeSBhbGlhc2VzIChkZXByZWNhdGVkKVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlSFRNTDRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV8yLmVuY29kZUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVIVE1MNVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlXzIuZW5jb2RlSFRNTDsgfSB9KTtcbnZhciBkZWNvZGVfMiA9IHJlcXVpcmUoXCIuL2RlY29kZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZVhNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlXzIuZGVjb2RlWE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlXzIuZGVjb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUxTdHJpY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8yLmRlY29kZUhUTUxTdHJpY3Q7IH0gfSk7XG4vLyBMZWdhY3kgYWxpYXNlcyAoZGVwcmVjYXRlZClcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUw0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMi5kZWNvZGVIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTDVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8yLmRlY29kZUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MNFN0cmljdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlXzIuZGVjb2RlSFRNTFN0cmljdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUw1U3RyaWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMi5kZWNvZGVIVE1MU3RyaWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlWE1MU3RyaWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMi5kZWNvZGVYTUw7IH0gfSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5lbGVtZW50TmFtZXMgPSB2b2lkIDA7XG5leHBvcnRzLmVsZW1lbnROYW1lcyA9IG5ldyBNYXAoW1xuICAgIFtcImFsdGdseXBoXCIsIFwiYWx0R2x5cGhcIl0sXG4gICAgW1wiYWx0Z2x5cGhkZWZcIiwgXCJhbHRHbHlwaERlZlwiXSxcbiAgICBbXCJhbHRnbHlwaGl0ZW1cIiwgXCJhbHRHbHlwaEl0ZW1cIl0sXG4gICAgW1wiYW5pbWF0ZWNvbG9yXCIsIFwiYW5pbWF0ZUNvbG9yXCJdLFxuICAgIFtcImFuaW1hdGVtb3Rpb25cIiwgXCJhbmltYXRlTW90aW9uXCJdLFxuICAgIFtcImFuaW1hdGV0cmFuc2Zvcm1cIiwgXCJhbmltYXRlVHJhbnNmb3JtXCJdLFxuICAgIFtcImNsaXBwYXRoXCIsIFwiY2xpcFBhdGhcIl0sXG4gICAgW1wiZmVibGVuZFwiLCBcImZlQmxlbmRcIl0sXG4gICAgW1wiZmVjb2xvcm1hdHJpeFwiLCBcImZlQ29sb3JNYXRyaXhcIl0sXG4gICAgW1wiZmVjb21wb25lbnR0cmFuc2ZlclwiLCBcImZlQ29tcG9uZW50VHJhbnNmZXJcIl0sXG4gICAgW1wiZmVjb21wb3NpdGVcIiwgXCJmZUNvbXBvc2l0ZVwiXSxcbiAgICBbXCJmZWNvbnZvbHZlbWF0cml4XCIsIFwiZmVDb252b2x2ZU1hdHJpeFwiXSxcbiAgICBbXCJmZWRpZmZ1c2VsaWdodGluZ1wiLCBcImZlRGlmZnVzZUxpZ2h0aW5nXCJdLFxuICAgIFtcImZlZGlzcGxhY2VtZW50bWFwXCIsIFwiZmVEaXNwbGFjZW1lbnRNYXBcIl0sXG4gICAgW1wiZmVkaXN0YW50bGlnaHRcIiwgXCJmZURpc3RhbnRMaWdodFwiXSxcbiAgICBbXCJmZWRyb3BzaGFkb3dcIiwgXCJmZURyb3BTaGFkb3dcIl0sXG4gICAgW1wiZmVmbG9vZFwiLCBcImZlRmxvb2RcIl0sXG4gICAgW1wiZmVmdW5jYVwiLCBcImZlRnVuY0FcIl0sXG4gICAgW1wiZmVmdW5jYlwiLCBcImZlRnVuY0JcIl0sXG4gICAgW1wiZmVmdW5jZ1wiLCBcImZlRnVuY0dcIl0sXG4gICAgW1wiZmVmdW5jclwiLCBcImZlRnVuY1JcIl0sXG4gICAgW1wiZmVnYXVzc2lhbmJsdXJcIiwgXCJmZUdhdXNzaWFuQmx1clwiXSxcbiAgICBbXCJmZWltYWdlXCIsIFwiZmVJbWFnZVwiXSxcbiAgICBbXCJmZW1lcmdlXCIsIFwiZmVNZXJnZVwiXSxcbiAgICBbXCJmZW1lcmdlbm9kZVwiLCBcImZlTWVyZ2VOb2RlXCJdLFxuICAgIFtcImZlbW9ycGhvbG9neVwiLCBcImZlTW9ycGhvbG9neVwiXSxcbiAgICBbXCJmZW9mZnNldFwiLCBcImZlT2Zmc2V0XCJdLFxuICAgIFtcImZlcG9pbnRsaWdodFwiLCBcImZlUG9pbnRMaWdodFwiXSxcbiAgICBbXCJmZXNwZWN1bGFybGlnaHRpbmdcIiwgXCJmZVNwZWN1bGFyTGlnaHRpbmdcIl0sXG4gICAgW1wiZmVzcG90bGlnaHRcIiwgXCJmZVNwb3RMaWdodFwiXSxcbiAgICBbXCJmZXRpbGVcIiwgXCJmZVRpbGVcIl0sXG4gICAgW1wiZmV0dXJidWxlbmNlXCIsIFwiZmVUdXJidWxlbmNlXCJdLFxuICAgIFtcImZvcmVpZ25vYmplY3RcIiwgXCJmb3JlaWduT2JqZWN0XCJdLFxuICAgIFtcImdseXBocmVmXCIsIFwiZ2x5cGhSZWZcIl0sXG4gICAgW1wibGluZWFyZ3JhZGllbnRcIiwgXCJsaW5lYXJHcmFkaWVudFwiXSxcbiAgICBbXCJyYWRpYWxncmFkaWVudFwiLCBcInJhZGlhbEdyYWRpZW50XCJdLFxuICAgIFtcInRleHRwYXRoXCIsIFwidGV4dFBhdGhcIl0sXG5dKTtcbmV4cG9ydHMuYXR0cmlidXRlTmFtZXMgPSBuZXcgTWFwKFtcbiAgICBbXCJkZWZpbml0aW9udXJsXCIsIFwiZGVmaW5pdGlvblVSTFwiXSxcbiAgICBbXCJhdHRyaWJ1dGVuYW1lXCIsIFwiYXR0cmlidXRlTmFtZVwiXSxcbiAgICBbXCJhdHRyaWJ1dGV0eXBlXCIsIFwiYXR0cmlidXRlVHlwZVwiXSxcbiAgICBbXCJiYXNlZnJlcXVlbmN5XCIsIFwiYmFzZUZyZXF1ZW5jeVwiXSxcbiAgICBbXCJiYXNlcHJvZmlsZVwiLCBcImJhc2VQcm9maWxlXCJdLFxuICAgIFtcImNhbGNtb2RlXCIsIFwiY2FsY01vZGVcIl0sXG4gICAgW1wiY2xpcHBhdGh1bml0c1wiLCBcImNsaXBQYXRoVW5pdHNcIl0sXG4gICAgW1wiZGlmZnVzZWNvbnN0YW50XCIsIFwiZGlmZnVzZUNvbnN0YW50XCJdLFxuICAgIFtcImVkZ2Vtb2RlXCIsIFwiZWRnZU1vZGVcIl0sXG4gICAgW1wiZmlsdGVydW5pdHNcIiwgXCJmaWx0ZXJVbml0c1wiXSxcbiAgICBbXCJnbHlwaHJlZlwiLCBcImdseXBoUmVmXCJdLFxuICAgIFtcImdyYWRpZW50dHJhbnNmb3JtXCIsIFwiZ3JhZGllbnRUcmFuc2Zvcm1cIl0sXG4gICAgW1wiZ3JhZGllbnR1bml0c1wiLCBcImdyYWRpZW50VW5pdHNcIl0sXG4gICAgW1wia2VybmVsbWF0cml4XCIsIFwia2VybmVsTWF0cml4XCJdLFxuICAgIFtcImtlcm5lbHVuaXRsZW5ndGhcIiwgXCJrZXJuZWxVbml0TGVuZ3RoXCJdLFxuICAgIFtcImtleXBvaW50c1wiLCBcImtleVBvaW50c1wiXSxcbiAgICBbXCJrZXlzcGxpbmVzXCIsIFwia2V5U3BsaW5lc1wiXSxcbiAgICBbXCJrZXl0aW1lc1wiLCBcImtleVRpbWVzXCJdLFxuICAgIFtcImxlbmd0aGFkanVzdFwiLCBcImxlbmd0aEFkanVzdFwiXSxcbiAgICBbXCJsaW1pdGluZ2NvbmVhbmdsZVwiLCBcImxpbWl0aW5nQ29uZUFuZ2xlXCJdLFxuICAgIFtcIm1hcmtlcmhlaWdodFwiLCBcIm1hcmtlckhlaWdodFwiXSxcbiAgICBbXCJtYXJrZXJ1bml0c1wiLCBcIm1hcmtlclVuaXRzXCJdLFxuICAgIFtcIm1hcmtlcndpZHRoXCIsIFwibWFya2VyV2lkdGhcIl0sXG4gICAgW1wibWFza2NvbnRlbnR1bml0c1wiLCBcIm1hc2tDb250ZW50VW5pdHNcIl0sXG4gICAgW1wibWFza3VuaXRzXCIsIFwibWFza1VuaXRzXCJdLFxuICAgIFtcIm51bW9jdGF2ZXNcIiwgXCJudW1PY3RhdmVzXCJdLFxuICAgIFtcInBhdGhsZW5ndGhcIiwgXCJwYXRoTGVuZ3RoXCJdLFxuICAgIFtcInBhdHRlcm5jb250ZW50dW5pdHNcIiwgXCJwYXR0ZXJuQ29udGVudFVuaXRzXCJdLFxuICAgIFtcInBhdHRlcm50cmFuc2Zvcm1cIiwgXCJwYXR0ZXJuVHJhbnNmb3JtXCJdLFxuICAgIFtcInBhdHRlcm51bml0c1wiLCBcInBhdHRlcm5Vbml0c1wiXSxcbiAgICBbXCJwb2ludHNhdHhcIiwgXCJwb2ludHNBdFhcIl0sXG4gICAgW1wicG9pbnRzYXR5XCIsIFwicG9pbnRzQXRZXCJdLFxuICAgIFtcInBvaW50c2F0elwiLCBcInBvaW50c0F0WlwiXSxcbiAgICBbXCJwcmVzZXJ2ZWFscGhhXCIsIFwicHJlc2VydmVBbHBoYVwiXSxcbiAgICBbXCJwcmVzZXJ2ZWFzcGVjdHJhdGlvXCIsIFwicHJlc2VydmVBc3BlY3RSYXRpb1wiXSxcbiAgICBbXCJwcmltaXRpdmV1bml0c1wiLCBcInByaW1pdGl2ZVVuaXRzXCJdLFxuICAgIFtcInJlZnhcIiwgXCJyZWZYXCJdLFxuICAgIFtcInJlZnlcIiwgXCJyZWZZXCJdLFxuICAgIFtcInJlcGVhdGNvdW50XCIsIFwicmVwZWF0Q291bnRcIl0sXG4gICAgW1wicmVwZWF0ZHVyXCIsIFwicmVwZWF0RHVyXCJdLFxuICAgIFtcInJlcXVpcmVkZXh0ZW5zaW9uc1wiLCBcInJlcXVpcmVkRXh0ZW5zaW9uc1wiXSxcbiAgICBbXCJyZXF1aXJlZGZlYXR1cmVzXCIsIFwicmVxdWlyZWRGZWF0dXJlc1wiXSxcbiAgICBbXCJzcGVjdWxhcmNvbnN0YW50XCIsIFwic3BlY3VsYXJDb25zdGFudFwiXSxcbiAgICBbXCJzcGVjdWxhcmV4cG9uZW50XCIsIFwic3BlY3VsYXJFeHBvbmVudFwiXSxcbiAgICBbXCJzcHJlYWRtZXRob2RcIiwgXCJzcHJlYWRNZXRob2RcIl0sXG4gICAgW1wic3RhcnRvZmZzZXRcIiwgXCJzdGFydE9mZnNldFwiXSxcbiAgICBbXCJzdGRkZXZpYXRpb25cIiwgXCJzdGREZXZpYXRpb25cIl0sXG4gICAgW1wic3RpdGNodGlsZXNcIiwgXCJzdGl0Y2hUaWxlc1wiXSxcbiAgICBbXCJzdXJmYWNlc2NhbGVcIiwgXCJzdXJmYWNlU2NhbGVcIl0sXG4gICAgW1wic3lzdGVtbGFuZ3VhZ2VcIiwgXCJzeXN0ZW1MYW5ndWFnZVwiXSxcbiAgICBbXCJ0YWJsZXZhbHVlc1wiLCBcInRhYmxlVmFsdWVzXCJdLFxuICAgIFtcInRhcmdldHhcIiwgXCJ0YXJnZXRYXCJdLFxuICAgIFtcInRhcmdldHlcIiwgXCJ0YXJnZXRZXCJdLFxuICAgIFtcInRleHRsZW5ndGhcIiwgXCJ0ZXh0TGVuZ3RoXCJdLFxuICAgIFtcInZpZXdib3hcIiwgXCJ2aWV3Qm94XCJdLFxuICAgIFtcInZpZXd0YXJnZXRcIiwgXCJ2aWV3VGFyZ2V0XCJdLFxuICAgIFtcInhjaGFubmVsc2VsZWN0b3JcIiwgXCJ4Q2hhbm5lbFNlbGVjdG9yXCJdLFxuICAgIFtcInljaGFubmVsc2VsZWN0b3JcIiwgXCJ5Q2hhbm5lbFNlbGVjdG9yXCJdLFxuICAgIFtcInpvb21hbmRwYW5cIiwgXCJ6b29tQW5kUGFuXCJdLFxuXSk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG52YXIgRWxlbWVudFR5cGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpKTtcbnZhciBlbnRpdGllc18xID0gcmVxdWlyZShcImVudGl0aWVzXCIpO1xuLypcbiAqIE1peGVkLWNhc2UgU1ZHIGFuZCBNYXRoTUwgdGFncyAmIGF0dHJpYnV0ZXNcbiAqIHJlY29nbml6ZWQgYnkgdGhlIEhUTUwgcGFyc2VyLCBzZWVcbiAqIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNwYXJzaW5nLW1haW4taW5mb3JlaWduXG4gKi9cbnZhciBmb3JlaWduTmFtZXNfMSA9IHJlcXVpcmUoXCIuL2ZvcmVpZ25OYW1lc1wiKTtcbnZhciB1bmVuY29kZWRFbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgIFwic3R5bGVcIixcbiAgICBcInNjcmlwdFwiLFxuICAgIFwieG1wXCIsXG4gICAgXCJpZnJhbWVcIixcbiAgICBcIm5vZW1iZWRcIixcbiAgICBcIm5vZnJhbWVzXCIsXG4gICAgXCJwbGFpbnRleHRcIixcbiAgICBcIm5vc2NyaXB0XCIsXG5dKTtcbi8qKlxuICogRm9ybWF0IGF0dHJpYnV0ZXNcbiAqL1xuZnVuY3Rpb24gZm9ybWF0QXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBvcHRzKSB7XG4gICAgaWYgKCFhdHRyaWJ1dGVzKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgdmFsdWUgPSAoX2EgPSBhdHRyaWJ1dGVzW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIGlmIChvcHRzLnhtbE1vZGUgPT09IFwiZm9yZWlnblwiKSB7XG4gICAgICAgICAgICAvKiBGaXggdXAgbWl4ZWQtY2FzZSBhdHRyaWJ1dGUgbmFtZXMgKi9cbiAgICAgICAgICAgIGtleSA9IChfYiA9IGZvcmVpZ25OYW1lc18xLmF0dHJpYnV0ZU5hbWVzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRzLmVtcHR5QXR0cnMgJiYgIW9wdHMueG1sTW9kZSAmJiB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5ICsgXCI9XFxcIlwiICsgKG9wdHMuZGVjb2RlRW50aXRpZXMgPyBlbnRpdGllc18xLmVuY29kZVhNTCh2YWx1ZSkgOiB2YWx1ZS5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKSkgKyBcIlxcXCJcIjtcbiAgICB9KVxuICAgICAgICAuam9pbihcIiBcIik7XG59XG4vKipcbiAqIFNlbGYtZW5jbG9zaW5nIHRhZ3NcbiAqL1xudmFyIHNpbmdsZVRhZyA9IG5ldyBTZXQoW1xuICAgIFwiYXJlYVwiLFxuICAgIFwiYmFzZVwiLFxuICAgIFwiYmFzZWZvbnRcIixcbiAgICBcImJyXCIsXG4gICAgXCJjb2xcIixcbiAgICBcImNvbW1hbmRcIixcbiAgICBcImVtYmVkXCIsXG4gICAgXCJmcmFtZVwiLFxuICAgIFwiaHJcIixcbiAgICBcImltZ1wiLFxuICAgIFwiaW5wdXRcIixcbiAgICBcImlzaW5kZXhcIixcbiAgICBcImtleWdlblwiLFxuICAgIFwibGlua1wiLFxuICAgIFwibWV0YVwiLFxuICAgIFwicGFyYW1cIixcbiAgICBcInNvdXJjZVwiLFxuICAgIFwidHJhY2tcIixcbiAgICBcIndiclwiLFxuXSk7XG4vKipcbiAqIFJlbmRlcnMgYSBET00gbm9kZSBvciBhbiBhcnJheSBvZiBET00gbm9kZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQ2FuIGJlIHRob3VnaHQgb2YgYXMgdGhlIGVxdWl2YWxlbnQgb2YgdGhlIGBvdXRlckhUTUxgIG9mIHRoZSBwYXNzZWQgbm9kZShzKS5cbiAqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGJlIHJlbmRlcmVkLlxuICogQHBhcmFtIG9wdGlvbnMgQ2hhbmdlcyBzZXJpYWxpemF0aW9uIGJlaGF2aW9yXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcihub2RlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAvLyBUT0RPOiBUaGlzIGlzIGEgYml0IGhhY2t5LlxuICAgIHZhciBub2RlcyA9IEFycmF5LmlzQXJyYXkobm9kZSkgfHwgbm9kZS5jaGVlcmlvID8gbm9kZSA6IFtub2RlXTtcbiAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG91dHB1dCArPSByZW5kZXJOb2RlKG5vZGVzW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHJlbmRlcjtcbmZ1bmN0aW9uIHJlbmRlck5vZGUobm9kZSwgb3B0aW9ucykge1xuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuUm9vdDpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXIobm9kZS5jaGlsZHJlbiwgb3B0aW9ucyk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuRGlyZWN0aXZlOlxuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLkRvY3R5cGU6XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyRGlyZWN0aXZlKG5vZGUpO1xuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLkNvbW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyQ29tbWVudChub2RlKTtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5DREFUQTpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJDZGF0YShub2RlKTtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5TY3JpcHQ6XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuU3R5bGU6XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuVGFnOlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlclRhZyhub2RlLCBvcHRpb25zKTtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5UZXh0OlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlclRleHQobm9kZSwgb3B0aW9ucyk7XG4gICAgfVxufVxudmFyIGZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMgPSBuZXcgU2V0KFtcbiAgICBcIm1pXCIsXG4gICAgXCJtb1wiLFxuICAgIFwibW5cIixcbiAgICBcIm1zXCIsXG4gICAgXCJtdGV4dFwiLFxuICAgIFwiYW5ub3RhdGlvbi14bWxcIixcbiAgICBcImZvcmVpZ25PYmplY3RcIixcbiAgICBcImRlc2NcIixcbiAgICBcInRpdGxlXCIsXG5dKTtcbnZhciBmb3JlaWduRWxlbWVudHMgPSBuZXcgU2V0KFtcInN2Z1wiLCBcIm1hdGhcIl0pO1xuZnVuY3Rpb24gcmVuZGVyVGFnKGVsZW0sIG9wdHMpIHtcbiAgICB2YXIgX2E7XG4gICAgLy8gSGFuZGxlIFNWRyAvIE1hdGhNTCBpbiBIVE1MXG4gICAgaWYgKG9wdHMueG1sTW9kZSA9PT0gXCJmb3JlaWduXCIpIHtcbiAgICAgICAgLyogRml4IHVwIG1peGVkLWNhc2UgZWxlbWVudCBuYW1lcyAqL1xuICAgICAgICBlbGVtLm5hbWUgPSAoX2EgPSBmb3JlaWduTmFtZXNfMS5lbGVtZW50TmFtZXMuZ2V0KGVsZW0ubmFtZSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGVsZW0ubmFtZTtcbiAgICAgICAgLyogRXhpdCBmb3JlaWduIG1vZGUgYXQgaW50ZWdyYXRpb24gcG9pbnRzICovXG4gICAgICAgIGlmIChlbGVtLnBhcmVudCAmJlxuICAgICAgICAgICAgZm9yZWlnbk1vZGVJbnRlZ3JhdGlvblBvaW50cy5oYXMoZWxlbS5wYXJlbnQubmFtZSkpIHtcbiAgICAgICAgICAgIG9wdHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0cyksIHsgeG1sTW9kZTogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFvcHRzLnhtbE1vZGUgJiYgZm9yZWlnbkVsZW1lbnRzLmhhcyhlbGVtLm5hbWUpKSB7XG4gICAgICAgIG9wdHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0cyksIHsgeG1sTW9kZTogXCJmb3JlaWduXCIgfSk7XG4gICAgfVxuICAgIHZhciB0YWcgPSBcIjxcIiArIGVsZW0ubmFtZTtcbiAgICB2YXIgYXR0cmlicyA9IGZvcm1hdEF0dHJpYnV0ZXMoZWxlbS5hdHRyaWJzLCBvcHRzKTtcbiAgICBpZiAoYXR0cmlicykge1xuICAgICAgICB0YWcgKz0gXCIgXCIgKyBhdHRyaWJzO1xuICAgIH1cbiAgICBpZiAoZWxlbS5jaGlsZHJlbi5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgKG9wdHMueG1sTW9kZVxuICAgICAgICAgICAgPyAvLyBJbiBYTUwgbW9kZSBvciBmb3JlaWduIG1vZGUsIGFuZCB1c2VyIGhhc24ndCBleHBsaWNpdGx5IHR1cm5lZCBvZmYgc2VsZi1jbG9zaW5nIHRhZ3NcbiAgICAgICAgICAgICAgICBvcHRzLnNlbGZDbG9zaW5nVGFncyAhPT0gZmFsc2VcbiAgICAgICAgICAgIDogLy8gVXNlciBleHBsaWNpdGx5IGFza2VkIGZvciBzZWxmLWNsb3NpbmcgdGFncywgZXZlbiBpbiBIVE1MIG1vZGVcbiAgICAgICAgICAgICAgICBvcHRzLnNlbGZDbG9zaW5nVGFncyAmJiBzaW5nbGVUYWcuaGFzKGVsZW0ubmFtZSkpKSB7XG4gICAgICAgIGlmICghb3B0cy54bWxNb2RlKVxuICAgICAgICAgICAgdGFnICs9IFwiIFwiO1xuICAgICAgICB0YWcgKz0gXCIvPlwiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGFnICs9IFwiPlwiO1xuICAgICAgICBpZiAoZWxlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0YWcgKz0gcmVuZGVyKGVsZW0uY2hpbGRyZW4sIG9wdHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRzLnhtbE1vZGUgfHwgIXNpbmdsZVRhZy5oYXMoZWxlbS5uYW1lKSkge1xuICAgICAgICAgICAgdGFnICs9IFwiPC9cIiArIGVsZW0ubmFtZSArIFwiPlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5mdW5jdGlvbiByZW5kZXJEaXJlY3RpdmUoZWxlbSkge1xuICAgIHJldHVybiBcIjxcIiArIGVsZW0uZGF0YSArIFwiPlwiO1xufVxuZnVuY3Rpb24gcmVuZGVyVGV4dChlbGVtLCBvcHRzKSB7XG4gICAgdmFyIGRhdGEgPSBlbGVtLmRhdGEgfHwgXCJcIjtcbiAgICAvLyBJZiBlbnRpdGllcyB3ZXJlbid0IGRlY29kZWQsIG5vIG5lZWQgdG8gZW5jb2RlIHRoZW0gYmFja1xuICAgIGlmIChvcHRzLmRlY29kZUVudGl0aWVzICYmXG4gICAgICAgICEoZWxlbS5wYXJlbnQgJiYgdW5lbmNvZGVkRWxlbWVudHMuaGFzKGVsZW0ucGFyZW50Lm5hbWUpKSkge1xuICAgICAgICBkYXRhID0gZW50aXRpZXNfMS5lbmNvZGVYTUwoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gcmVuZGVyQ2RhdGEoZWxlbSkge1xuICAgIHJldHVybiBcIjwhW0NEQVRBW1wiICsgZWxlbS5jaGlsZHJlblswXS5kYXRhICsgXCJdXT5cIjtcbn1cbmZ1bmN0aW9uIHJlbmRlckNvbW1lbnQoZWxlbSkge1xuICAgIHJldHVybiBcIjwhLS1cIiArIGVsZW0uZGF0YSArIFwiLS0+XCI7XG59XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFRleHQgPSBleHBvcnRzLmdldElubmVySFRNTCA9IGV4cG9ydHMuZ2V0T3V0ZXJIVE1MID0gdm9pZCAwO1xudmFyIHRhZ3R5cGVzXzEgPSByZXF1aXJlKFwiLi90YWd0eXBlc1wiKTtcbnZhciBkb21fc2VyaWFsaXplcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkb20tc2VyaWFsaXplclwiKSk7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSBvdXRlciBIVE1MIG9mLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3Igc2VyaWFsaXphdGlvbi5cbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYGRvbS1zZXJpYWxpemVyYCBtb2R1bGUgZGlyZWN0bHkuXG4gKiBAcmV0dXJucyBgbm9kZWAncyBvdXRlciBIVE1MLlxuICovXG5mdW5jdGlvbiBnZXRPdXRlckhUTUwobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBkb21fc2VyaWFsaXplcl8xLmRlZmF1bHQobm9kZSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmdldE91dGVySFRNTCA9IGdldE91dGVySFRNTDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIGlubmVyIEhUTUwgb2YuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBzZXJpYWxpemF0aW9uLlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgZG9tLXNlcmlhbGl6ZXJgIG1vZHVsZSBkaXJlY3RseS5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIEhUTUwuXG4gKi9cbmZ1bmN0aW9uIGdldElubmVySFRNTChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRhZ3R5cGVzXzEuaGFzQ2hpbGRyZW4obm9kZSlcbiAgICAgICAgPyBub2RlLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gZ2V0T3V0ZXJIVE1MKG5vZGUsIG9wdGlvbnMpOyB9KS5qb2luKFwiXCIpXG4gICAgICAgIDogXCJcIjtcbn1cbmV4cG9ydHMuZ2V0SW5uZXJIVE1MID0gZ2V0SW5uZXJIVE1MO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgaW5uZXIgdGV4dC5cbiAqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgaW5uZXIgdGV4dCBvZi5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIHRleHQuXG4gKi9cbmZ1bmN0aW9uIGdldFRleHQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAoZ2V0VGV4dCkuam9pbihcIlwiKTtcbiAgICBpZiAodGFndHlwZXNfMS5pc1RhZyhub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUubmFtZSA9PT0gXCJiclwiID8gXCJcXG5cIiA6IGdldFRleHQobm9kZS5jaGlsZHJlbik7XG4gICAgaWYgKHRhZ3R5cGVzXzEuaXNDREFUQShub2RlKSlcbiAgICAgICAgcmV0dXJuIGdldFRleHQobm9kZS5jaGlsZHJlbik7XG4gICAgaWYgKHRhZ3R5cGVzXzEuaXNUZXh0KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5nZXRUZXh0ID0gZ2V0VGV4dDtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubmV4dEVsZW1lbnRTaWJsaW5nID0gZXhwb3J0cy5nZXROYW1lID0gZXhwb3J0cy5oYXNBdHRyaWIgPSBleHBvcnRzLmdldEF0dHJpYnV0ZVZhbHVlID0gZXhwb3J0cy5nZXRTaWJsaW5ncyA9IGV4cG9ydHMuZ2V0UGFyZW50ID0gZXhwb3J0cy5nZXRDaGlsZHJlbiA9IHZvaWQgMDtcbnZhciB0YWd0eXBlc18xID0gcmVxdWlyZShcIi4vdGFndHlwZXNcIik7XG52YXIgZW1wdHlBcnJheSA9IFtdO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIGVsZW0gTm9kZSB0byBnZXQgdGhlIGNoaWxkcmVuIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgY2hpbGRyZW4sIG9yIGFuIGVtcHR5IGFycmF5LlxuICovXG5mdW5jdGlvbiBnZXRDaGlsZHJlbihlbGVtKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBlbGVtLmNoaWxkcmVuKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBlbXB0eUFycmF5O1xufVxuZXhwb3J0cy5nZXRDaGlsZHJlbiA9IGdldENoaWxkcmVuO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgcGFyZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtIE5vZGUgdG8gZ2V0IHRoZSBwYXJlbnQgb2YuXG4gKiBAcmV0dXJucyBgZWxlbWAncyBwYXJlbnQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50KGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5wYXJlbnQgfHwgbnVsbDtcbn1cbmV4cG9ydHMuZ2V0UGFyZW50ID0gZ2V0UGFyZW50O1xuLyoqXG4gKiBHZXRzIGFuIGVsZW1lbnRzIHNpYmxpbmdzLCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICpcbiAqIEF0dGVtcHRzIHRvIGdldCB0aGUgY2hpbGRyZW4gdGhyb3VnaCB0aGUgZWxlbWVudCdzIHBhcmVudCBmaXJzdC5cbiAqIElmIHdlIGRvbid0IGhhdmUgYSBwYXJlbnQgKHRoZSBlbGVtZW50IGlzIGEgcm9vdCBub2RlKSxcbiAqIHdlIHdhbGsgdGhlIGVsZW1lbnQncyBgcHJldmAgJiBgbmV4dGAgdG8gZ2V0IGFsbCByZW1haW5pbmcgbm9kZXMuXG4gKlxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byBnZXQgdGhlIHNpYmxpbmdzIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3Mgc2libGluZ3MuXG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdzKGVsZW0pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoZWxlbSk7XG4gICAgaWYgKHBhcmVudCAhPSBudWxsKVxuICAgICAgICByZXR1cm4gZ2V0Q2hpbGRyZW4ocGFyZW50KTtcbiAgICB2YXIgc2libGluZ3MgPSBbZWxlbV07XG4gICAgdmFyIHByZXYgPSBlbGVtLnByZXYsIG5leHQgPSBlbGVtLm5leHQ7XG4gICAgd2hpbGUgKHByZXYgIT0gbnVsbCkge1xuICAgICAgICBzaWJsaW5ncy51bnNoaWZ0KHByZXYpO1xuICAgICAgICAoX2EgPSBwcmV2LCBwcmV2ID0gX2EucHJldik7XG4gICAgfVxuICAgIHdoaWxlIChuZXh0ICE9IG51bGwpIHtcbiAgICAgICAgc2libGluZ3MucHVzaChuZXh0KTtcbiAgICAgICAgKF9iID0gbmV4dCwgbmV4dCA9IF9iLm5leHQpO1xuICAgIH1cbiAgICByZXR1cm4gc2libGluZ3M7XG59XG5leHBvcnRzLmdldFNpYmxpbmdzID0gZ2V0U2libGluZ3M7XG4vKipcbiAqIEdldHMgYW4gYXR0cmlidXRlIGZyb20gYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIGNoZWNrLlxuICogQHBhcmFtIG5hbWUgQXR0cmlidXRlIG5hbWUgdG8gcmV0cmlldmUuXG4gKiBAcmV0dXJucyBUaGUgZWxlbWVudCdzIGF0dHJpYnV0ZSB2YWx1ZSwgb3IgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IGVsZW0uYXR0cmlicykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW25hbWVdO1xufVxuZXhwb3J0cy5nZXRBdHRyaWJ1dGVWYWx1ZSA9IGdldEF0dHJpYnV0ZVZhbHVlO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhbiBlbGVtZW50IGhhcyBhbiBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byBjaGVjay5cbiAqIEBwYXJhbSBuYW1lIEF0dHJpYnV0ZSBuYW1lIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgUmV0dXJucyB3aGV0aGVyIGBlbGVtYCBoYXMgdGhlIGF0dHJpYnV0ZSBgbmFtZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc0F0dHJpYihlbGVtLCBuYW1lKSB7XG4gICAgcmV0dXJuIChlbGVtLmF0dHJpYnMgIT0gbnVsbCAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZWxlbS5hdHRyaWJzLCBuYW1lKSAmJlxuICAgICAgICBlbGVtLmF0dHJpYnNbbmFtZV0gIT0gbnVsbCk7XG59XG5leHBvcnRzLmhhc0F0dHJpYiA9IGhhc0F0dHJpYjtcbi8qKlxuICogR2V0IHRoZSB0YWcgbmFtZSBvZiBhbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgbmFtZSBmb3IuXG4gKiBAcmV0dXJucyBUaGUgdGFnIG5hbWUgb2YgYGVsZW1gLlxuICovXG5mdW5jdGlvbiBnZXROYW1lKGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5uYW1lO1xufVxuZXhwb3J0cy5nZXROYW1lID0gZ2V0TmFtZTtcbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBlbGVtZW50IHNpYmxpbmcgb2YgYSBub2RlLlxuICpcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgbmV4dCBzaWJsaW5nIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgbmV4dCBzaWJsaW5nIHRoYXQgaXMgYSB0YWcuXG4gKi9cbmZ1bmN0aW9uIG5leHRFbGVtZW50U2libGluZyhlbGVtKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBuZXh0ID0gZWxlbS5uZXh0O1xuICAgIHdoaWxlIChuZXh0ICE9PSBudWxsICYmICF0YWd0eXBlc18xLmlzVGFnKG5leHQpKVxuICAgICAgICAoX2EgPSBuZXh0LCBuZXh0ID0gX2EubmV4dCk7XG4gICAgcmV0dXJuIG5leHQ7XG59XG5leHBvcnRzLm5leHRFbGVtZW50U2libGluZyA9IG5leHRFbGVtZW50U2libGluZztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJlcGVuZCA9IGV4cG9ydHMucHJlcGVuZENoaWxkID0gZXhwb3J0cy5hcHBlbmQgPSBleHBvcnRzLmFwcGVuZENoaWxkID0gZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IGV4cG9ydHMucmVtb3ZlRWxlbWVudCA9IHZvaWQgMDtcbi8qKlxuICogUmVtb3ZlIGFuIGVsZW1lbnQgZnJvbSB0aGUgZG9tXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gYmUgcmVtb3ZlZFxuICovXG5mdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsZW0pIHtcbiAgICBpZiAoZWxlbS5wcmV2KVxuICAgICAgICBlbGVtLnByZXYubmV4dCA9IGVsZW0ubmV4dDtcbiAgICBpZiAoZWxlbS5uZXh0KVxuICAgICAgICBlbGVtLm5leHQucHJldiA9IGVsZW0ucHJldjtcbiAgICBpZiAoZWxlbS5wYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkcyA9IGVsZW0ucGFyZW50LmNoaWxkcmVuO1xuICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkcy5sYXN0SW5kZXhPZihlbGVtKSwgMSk7XG4gICAgfVxufVxuZXhwb3J0cy5yZW1vdmVFbGVtZW50ID0gcmVtb3ZlRWxlbWVudDtcbi8qKlxuICogUmVwbGFjZSBhbiBlbGVtZW50IGluIHRoZSBkb21cbiAqXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBiZSByZXBsYWNlZFxuICogQHBhcmFtIHJlcGxhY2VtZW50IFRoZSBlbGVtZW50IHRvIGJlIGFkZGVkXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VFbGVtZW50KGVsZW0sIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHByZXYgPSAocmVwbGFjZW1lbnQucHJldiA9IGVsZW0ucHJldik7XG4gICAgaWYgKHByZXYpIHtcbiAgICAgICAgcHJldi5uZXh0ID0gcmVwbGFjZW1lbnQ7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gKHJlcGxhY2VtZW50Lm5leHQgPSBlbGVtLm5leHQpO1xuICAgIGlmIChuZXh0KSB7XG4gICAgICAgIG5leHQucHJldiA9IHJlcGxhY2VtZW50O1xuICAgIH1cbiAgICB2YXIgcGFyZW50ID0gKHJlcGxhY2VtZW50LnBhcmVudCA9IGVsZW0ucGFyZW50KTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZHMgPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGNoaWxkc1tjaGlsZHMubGFzdEluZGV4T2YoZWxlbSldID0gcmVwbGFjZW1lbnQ7XG4gICAgfVxufVxuZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IHJlcGxhY2VFbGVtZW50O1xuLyoqXG4gKiBBcHBlbmQgYSBjaGlsZCB0byBhbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSBjaGlsZCBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCBhcyBhIGNoaWxkLlxuICovXG5mdW5jdGlvbiBhcHBlbmRDaGlsZChlbGVtLCBjaGlsZCkge1xuICAgIHJlbW92ZUVsZW1lbnQoY2hpbGQpO1xuICAgIGNoaWxkLm5leHQgPSBudWxsO1xuICAgIGNoaWxkLnBhcmVudCA9IGVsZW07XG4gICAgaWYgKGVsZW0uY2hpbGRyZW4ucHVzaChjaGlsZCkgPiAxKSB7XG4gICAgICAgIHZhciBzaWJsaW5nID0gZWxlbS5jaGlsZHJlbltlbGVtLmNoaWxkcmVuLmxlbmd0aCAtIDJdO1xuICAgICAgICBzaWJsaW5nLm5leHQgPSBjaGlsZDtcbiAgICAgICAgY2hpbGQucHJldiA9IHNpYmxpbmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaGlsZC5wcmV2ID0gbnVsbDtcbiAgICB9XG59XG5leHBvcnRzLmFwcGVuZENoaWxkID0gYXBwZW5kQ2hpbGQ7XG4vKipcbiAqIEFwcGVuZCBhbiBlbGVtZW50IGFmdGVyIGFub3RoZXIuXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gYXBwZW5kIGFmdGVyLlxuICogQHBhcmFtIG5leHQgVGhlIGVsZW1lbnQgYmUgYWRkZWQuXG4gKi9cbmZ1bmN0aW9uIGFwcGVuZChlbGVtLCBuZXh0KSB7XG4gICAgcmVtb3ZlRWxlbWVudChuZXh0KTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnQ7XG4gICAgdmFyIGN1cnJOZXh0ID0gZWxlbS5uZXh0O1xuICAgIG5leHQubmV4dCA9IGN1cnJOZXh0O1xuICAgIG5leHQucHJldiA9IGVsZW07XG4gICAgZWxlbS5uZXh0ID0gbmV4dDtcbiAgICBuZXh0LnBhcmVudCA9IHBhcmVudDtcbiAgICBpZiAoY3Vyck5leHQpIHtcbiAgICAgICAgY3Vyck5leHQucHJldiA9IG5leHQ7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHMgPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkcy5sYXN0SW5kZXhPZihjdXJyTmV4dCksIDAsIG5leHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChuZXh0KTtcbiAgICB9XG59XG5leHBvcnRzLmFwcGVuZCA9IGFwcGVuZDtcbi8qKlxuICogUHJlcGVuZCBhIGNoaWxkIHRvIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gcHJlcGVuZCBiZWZvcmUuXG4gKiBAcGFyYW0gY2hpbGQgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWQgYXMgYSBjaGlsZC5cbiAqL1xuZnVuY3Rpb24gcHJlcGVuZENoaWxkKGVsZW0sIGNoaWxkKSB7XG4gICAgcmVtb3ZlRWxlbWVudChjaGlsZCk7XG4gICAgY2hpbGQucGFyZW50ID0gZWxlbTtcbiAgICBjaGlsZC5wcmV2ID0gbnVsbDtcbiAgICBpZiAoZWxlbS5jaGlsZHJlbi51bnNoaWZ0KGNoaWxkKSAhPT0gMSkge1xuICAgICAgICB2YXIgc2libGluZyA9IGVsZW0uY2hpbGRyZW5bMV07XG4gICAgICAgIHNpYmxpbmcucHJldiA9IGNoaWxkO1xuICAgICAgICBjaGlsZC5uZXh0ID0gc2libGluZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoaWxkLm5leHQgPSBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMucHJlcGVuZENoaWxkID0gcHJlcGVuZENoaWxkO1xuLyoqXG4gKiBQcmVwZW5kIGFuIGVsZW1lbnQgYmVmb3JlIGFub3RoZXIuXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gcHJlcGVuZCBiZWZvcmUuXG4gKiBAcGFyYW0gcHJldiBUaGUgZWxlbWVudCBiZSBhZGRlZC5cbiAqL1xuZnVuY3Rpb24gcHJlcGVuZChlbGVtLCBwcmV2KSB7XG4gICAgcmVtb3ZlRWxlbWVudChwcmV2KTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnQ7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGRzID0gcGFyZW50LmNoaWxkcmVuO1xuICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkcy5pbmRleE9mKGVsZW0pLCAwLCBwcmV2KTtcbiAgICB9XG4gICAgaWYgKGVsZW0ucHJldikge1xuICAgICAgICBlbGVtLnByZXYubmV4dCA9IHByZXY7XG4gICAgfVxuICAgIHByZXYucGFyZW50ID0gcGFyZW50O1xuICAgIHByZXYucHJldiA9IGVsZW0ucHJldjtcbiAgICBwcmV2Lm5leHQgPSBlbGVtO1xuICAgIGVsZW0ucHJldiA9IHByZXY7XG59XG5leHBvcnRzLnByZXBlbmQgPSBwcmVwZW5kO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maW5kQWxsID0gZXhwb3J0cy5leGlzdHNPbmUgPSBleHBvcnRzLmZpbmRPbmUgPSBleHBvcnRzLmZpbmRPbmVDaGlsZCA9IGV4cG9ydHMuZmluZCA9IGV4cG9ydHMuZmlsdGVyID0gdm9pZCAwO1xudmFyIHRhZ3R5cGVzXzEgPSByZXF1aXJlKFwiLi90YWd0eXBlc1wiKTtcbi8qKlxuICogU2VhcmNoIGEgbm9kZSBhbmQgaXRzIGNoaWxkcmVuIGZvciBub2RlcyBwYXNzaW5nIGEgdGVzdCBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guIFdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdCBzZXQgaWYgaXQgbWF0Y2hlcy5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHBhc3NpbmcgYHRlc3RgLlxuICovXG5mdW5jdGlvbiBmaWx0ZXIodGVzdCwgbm9kZSwgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBJbmZpbml0eTsgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShub2RlKSlcbiAgICAgICAgbm9kZSA9IFtub2RlXTtcbiAgICByZXR1cm4gZmluZCh0ZXN0LCBub2RlLCByZWN1cnNlLCBsaW1pdCk7XG59XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbi8qKlxuICogU2VhcmNoIGFuIGFycmF5IG9mIG5vZGUgYW5kIGl0cyBjaGlsZHJlbiBmb3Igbm9kZXMgcGFzc2luZyBhIHRlc3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIGxpbWl0IE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyBwYXNzaW5nIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmluZCh0ZXN0LCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBub2Rlc18xID0gbm9kZXM7IF9pIDwgbm9kZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVsZW0gPSBub2Rlc18xW19pXTtcbiAgICAgICAgaWYgKHRlc3QoZWxlbSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgaWYgKC0tbGltaXQgPD0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVjdXJzZSAmJiB0YWd0eXBlc18xLmhhc0NoaWxkcmVuKGVsZW0pICYmIGVsZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gZmluZCh0ZXN0LCBlbGVtLmNoaWxkcmVuLCByZWN1cnNlLCBsaW1pdCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGxpbWl0IC09IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsaW1pdCA8PSAwKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgZWxlbWVudCBpbnNpZGUgb2YgYW4gYXJyYXkgdGhhdCBtYXRjaGVzIGEgdGVzdCBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIFRoZSBmaXJzdCBub2RlIGluIHRoZSBhcnJheSB0aGF0IHBhc3NlcyBgdGVzdGAuXG4gKi9cbmZ1bmN0aW9uIGZpbmRPbmVDaGlsZCh0ZXN0LCBub2Rlcykge1xuICAgIHJldHVybiBub2Rlcy5maW5kKHRlc3QpO1xufVxuZXhwb3J0cy5maW5kT25lQ2hpbGQgPSBmaW5kT25lQ2hpbGQ7XG4vKipcbiAqIEZpbmRzIG9uZSBlbGVtZW50IGluIGEgdHJlZSB0aGF0IHBhc3NlcyBhIHRlc3QuXG4gKlxuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHJldHVybnMgVGhlIGZpcnN0IGNoaWxkIG5vZGUgdGhhdCBwYXNzZXMgYHRlc3RgLlxuICovXG5mdW5jdGlvbiBmaW5kT25lKHRlc3QsIG5vZGVzLCByZWN1cnNlKSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gdHJ1ZTsgfVxuICAgIHZhciBlbGVtID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aCAmJiAhZWxlbTsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVja2VkID0gbm9kZXNbaV07XG4gICAgICAgIGlmICghdGFndHlwZXNfMS5pc1RhZyhjaGVja2VkKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGVzdChjaGVja2VkKSkge1xuICAgICAgICAgICAgZWxlbSA9IGNoZWNrZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjdXJzZSAmJiBjaGVja2VkLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVsZW0gPSBmaW5kT25lKHRlc3QsIGNoZWNrZWQuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtO1xufVxuZXhwb3J0cy5maW5kT25lID0gZmluZE9uZTtcbi8qKlxuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcmV0dXJucyBXaGV0aGVyIGEgdHJlZSBvZiBub2RlcyBjb250YWlucyBhdCBsZWFzdCBvbmUgbm9kZSBwYXNzaW5nIGEgdGVzdC5cbiAqL1xuZnVuY3Rpb24gZXhpc3RzT25lKHRlc3QsIG5vZGVzKSB7XG4gICAgcmV0dXJuIG5vZGVzLnNvbWUoZnVuY3Rpb24gKGNoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHRhZ3R5cGVzXzEuaXNUYWcoY2hlY2tlZCkgJiZcbiAgICAgICAgICAgICh0ZXN0KGNoZWNrZWQpIHx8XG4gICAgICAgICAgICAgICAgKGNoZWNrZWQuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICBleGlzdHNPbmUodGVzdCwgY2hlY2tlZC5jaGlsZHJlbikpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZXhpc3RzT25lID0gZXhpc3RzT25lO1xuLyoqXG4gKiBTZWFyY2ggYW5kIGFycmF5IG9mIG5vZGVzIGFuZCBpdHMgY2hpbGRyZW4gZm9yIG5vZGVzIHBhc3NpbmcgYSB0ZXN0IGZ1bmN0aW9uLlxuICpcbiAqIFNhbWUgYXMgYGZpbmRgLCBvbmx5IHdpdGggbGVzcyBvcHRpb25zLCBsZWFkaW5nIHRvIHJlZHVjZWQgY29tcGxleGl0eS5cbiAqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyBwYXNzaW5nIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmluZEFsbCh0ZXN0LCBub2Rlcykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHN0YWNrID0gbm9kZXMuZmlsdGVyKHRhZ3R5cGVzXzEuaXNUYWcpO1xuICAgIHZhciBlbGVtO1xuICAgIHdoaWxlICgoZWxlbSA9IHN0YWNrLnNoaWZ0KCkpKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IChfYSA9IGVsZW0uY2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maWx0ZXIodGFndHlwZXNfMS5pc1RhZyk7XG4gICAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzdGFjay51bnNoaWZ0LmFwcGx5KHN0YWNrLCBjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRlc3QoZWxlbSkpXG4gICAgICAgICAgICByZXN1bHQucHVzaChlbGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZmluZEFsbCA9IGZpbmRBbGw7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEVsZW1lbnRzQnlUYWdUeXBlID0gZXhwb3J0cy5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGV4cG9ydHMuZ2V0RWxlbWVudEJ5SWQgPSBleHBvcnRzLmdldEVsZW1lbnRzID0gZXhwb3J0cy50ZXN0RWxlbWVudCA9IHZvaWQgMDtcbnZhciBxdWVyeWluZ18xID0gcmVxdWlyZShcIi4vcXVlcnlpbmdcIik7XG52YXIgdGFndHlwZXNfMSA9IHJlcXVpcmUoXCIuL3RhZ3R5cGVzXCIpO1xudmFyIENoZWNrcyA9IHtcbiAgICB0YWdfbmFtZTogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdGFndHlwZXNfMS5pc1RhZyhlbGVtKSAmJiBuYW1lKGVsZW0ubmFtZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWd0eXBlc18xLmlzVGFnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdGFndHlwZXNfMS5pc1RhZyhlbGVtKSAmJiBlbGVtLm5hbWUgPT09IG5hbWU7IH07XG4gICAgfSxcbiAgICB0YWdfdHlwZTogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdHlwZShlbGVtLnR5cGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50eXBlID09PSB0eXBlOyB9O1xuICAgIH0sXG4gICAgdGFnX2NvbnRhaW5zOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0YWd0eXBlc18xLmlzVGV4dChlbGVtKSAmJiBkYXRhKGVsZW0uZGF0YSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0YWd0eXBlc18xLmlzVGV4dChlbGVtKSAmJiBlbGVtLmRhdGEgPT09IGRhdGE7IH07XG4gICAgfSxcbn07XG4vKipcbiAqIEBwYXJhbSBhdHRyaWIgQXR0cmlidXRlIHRvIGNoZWNrLlxuICogQHBhcmFtIHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZSB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdG8gY2hlY2sgd2hldGhlciB0aGUgYSBub2RlIGhhcyBhbiBhdHRyaWJ1dGUgd2l0aCBhIHBhcnRpY3VsYXIgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldEF0dHJpYkNoZWNrKGF0dHJpYiwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0YWd0eXBlc18xLmlzVGFnKGVsZW0pICYmIHZhbHVlKGVsZW0uYXR0cmlic1thdHRyaWJdKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0YWd0eXBlc18xLmlzVGFnKGVsZW0pICYmIGVsZW0uYXR0cmlic1thdHRyaWJdID09PSB2YWx1ZTsgfTtcbn1cbi8qKlxuICogQHBhcmFtIGEgRmlyc3QgZnVuY3Rpb24gdG8gY29tYmluZS5cbiAqIEBwYXJhbSBiIFNlY29uZCBmdW5jdGlvbiB0byBjb21iaW5lLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0YWtpbmcgYSBub2RlIGFuZCByZXR1cm5pbmcgYHRydWVgIGlmIGVpdGhlclxuICogb2YgdGhlIGlucHV0IGZ1bmN0aW9ucyByZXR1cm5zIGB0cnVlYCBmb3IgdGhlIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVGdW5jcyhhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBhKGVsZW0pIHx8IGIoZWxlbSk7IH07XG59XG4vKipcbiAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBkZXNjcmliaW5nIG5vZGVzIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiBleGVjdXRpbmcgYWxsIGNoZWNrcyBpbiBgb3B0aW9uc2AgYW5kIHJldHVybmluZyBgdHJ1ZWBcbiAqIGlmIGFueSBvZiB0aGVtIG1hdGNoIGEgbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29tcGlsZVRlc3Qob3B0aW9ucykge1xuICAgIHZhciBmdW5jcyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgcmV0dXJuIGtleSBpbiBDaGVja3NcbiAgICAgICAgICAgID8gQ2hlY2tzW2tleV0odmFsdWUpXG4gICAgICAgICAgICA6IGdldEF0dHJpYkNoZWNrKGtleSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jcy5sZW5ndGggPT09IDAgPyBudWxsIDogZnVuY3MucmVkdWNlKGNvbWJpbmVGdW5jcyk7XG59XG4vKipcbiAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBkZXNjcmliaW5nIG5vZGVzIHRvIGxvb2sgZm9yLlxuICogQHBhcmFtIG5vZGUgVGhlIGVsZW1lbnQgdG8gdGVzdC5cbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIGVsZW1lbnQgbWF0Y2hlcyB0aGUgZGVzY3JpcHRpb24gaW4gYG9wdGlvbnNgLlxuICovXG5mdW5jdGlvbiB0ZXN0RWxlbWVudChvcHRpb25zLCBub2RlKSB7XG4gICAgdmFyIHRlc3QgPSBjb21waWxlVGVzdChvcHRpb25zKTtcbiAgICByZXR1cm4gdGVzdCA/IHRlc3Qobm9kZSkgOiB0cnVlO1xufVxuZXhwb3J0cy50ZXN0RWxlbWVudCA9IHRlc3RFbGVtZW50O1xuLyoqXG4gKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgZGVzY3JpYmluZyBub2RlcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHRoYXQgbWF0Y2ggYG9wdGlvbnNgLlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50cyhvcHRpb25zLCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBpZiAobGltaXQgPT09IHZvaWQgMCkgeyBsaW1pdCA9IEluZmluaXR5OyB9XG4gICAgdmFyIHRlc3QgPSBjb21waWxlVGVzdChvcHRpb25zKTtcbiAgICByZXR1cm4gdGVzdCA/IHF1ZXJ5aW5nXzEuZmlsdGVyKHRlc3QsIG5vZGVzLCByZWN1cnNlLCBsaW1pdCkgOiBbXTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudHMgPSBnZXRFbGVtZW50cztcbi8qKlxuICogQHBhcmFtIGlkIFRoZSB1bmlxdWUgSUQgYXR0cmlidXRlIHZhbHVlIHRvIGxvb2sgZm9yLlxuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICogQHBhcmFtIHJlY3Vyc2UgQWxzbyBjb25zaWRlciBjaGlsZCBub2Rlcy5cbiAqIEByZXR1cm5zIFRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIElELlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50QnlJZChpZCwgbm9kZXMsIHJlY3Vyc2UpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGVzKSlcbiAgICAgICAgbm9kZXMgPSBbbm9kZXNdO1xuICAgIHJldHVybiBxdWVyeWluZ18xLmZpbmRPbmUoZ2V0QXR0cmliQ2hlY2soXCJpZFwiLCBpZCksIG5vZGVzLCByZWN1cnNlKTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudEJ5SWQgPSBnZXRFbGVtZW50QnlJZDtcbi8qKlxuICogQHBhcmFtIHRhZ05hbWUgVGFnIG5hbWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHdpdGggdGhlIHN1cHBsaWVkIGB0YWdOYW1lYC5cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gdHJ1ZTsgfVxuICAgIGlmIChsaW1pdCA9PT0gdm9pZCAwKSB7IGxpbWl0ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gcXVlcnlpbmdfMS5maWx0ZXIoQ2hlY2tzLnRhZ19uYW1lKHRhZ05hbWUpLCBub2RlcywgcmVjdXJzZSwgbGltaXQpO1xufVxuZXhwb3J0cy5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGdldEVsZW1lbnRzQnlUYWdOYW1lO1xuLyoqXG4gKiBAcGFyYW0gdHlwZSBFbGVtZW50IHR5cGUgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0gbm9kZXMgTm9kZXMgdG8gc2VhcmNoIHRocm91Z2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIGxpbWl0IE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyB3aXRoIHRoZSBzdXBwbGllZCBgdHlwZWAuXG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRzQnlUYWdUeXBlKHR5cGUsIG5vZGVzLCByZWN1cnNlLCBsaW1pdCkge1xuICAgIGlmIChyZWN1cnNlID09PSB2b2lkIDApIHsgcmVjdXJzZSA9IHRydWU7IH1cbiAgICBpZiAobGltaXQgPT09IHZvaWQgMCkgeyBsaW1pdCA9IEluZmluaXR5OyB9XG4gICAgcmV0dXJuIHF1ZXJ5aW5nXzEuZmlsdGVyKENoZWNrcy50YWdfdHlwZSh0eXBlKSwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ1R5cGUgPSBnZXRFbGVtZW50c0J5VGFnVHlwZTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudW5pcXVlU29ydCA9IGV4cG9ydHMuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBleHBvcnRzLnJlbW92ZVN1YnNldHMgPSB2b2lkIDA7XG52YXIgdGFndHlwZXNfMSA9IHJlcXVpcmUoXCIuL3RhZ3R5cGVzXCIpO1xuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSBvZiBub2RlcywgcmVtb3ZlIGFueSBtZW1iZXIgdGhhdCBpcyBjb250YWluZWQgYnkgYW5vdGhlci5cbiAqXG4gKiBAcGFyYW0gbm9kZXMgTm9kZXMgdG8gZmlsdGVyLlxuICogQHJldHVybnMgUmVtYWluaW5nIG5vZGVzIHRoYXQgYXJlbid0IHN1YnRyZWVzIG9mIGVhY2ggb3RoZXIuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVN1YnNldHMobm9kZXMpIHtcbiAgICB2YXIgaWR4ID0gbm9kZXMubGVuZ3RoO1xuICAgIC8qXG4gICAgICogQ2hlY2sgaWYgZWFjaCBub2RlIChvciBvbmUgb2YgaXRzIGFuY2VzdG9ycykgaXMgYWxyZWFkeSBjb250YWluZWQgaW4gdGhlXG4gICAgICogYXJyYXkuXG4gICAgICovXG4gICAgd2hpbGUgKC0taWR4ID49IDApIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpZHhdO1xuICAgICAgICAvKlxuICAgICAgICAgKiBSZW1vdmUgdGhlIG5vZGUgaWYgaXQgaXMgbm90IHVuaXF1ZS5cbiAgICAgICAgICogV2UgYXJlIGdvaW5nIHRocm91Z2ggdGhlIGFycmF5IGZyb20gdGhlIGVuZCwgc28gd2Ugb25seVxuICAgICAgICAgKiBoYXZlIHRvIGNoZWNrIG5vZGVzIHRoYXQgcHJlY2VlZCB0aGUgbm9kZSB1bmRlciBjb25zaWRlcmF0aW9uIGluIHRoZSBhcnJheS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpZHggPiAwICYmIG5vZGVzLmxhc3RJbmRleE9mKG5vZGUsIGlkeCAtIDEpID49IDApIHtcbiAgICAgICAgICAgIG5vZGVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgYW5jZXN0b3IgPSBub2RlLnBhcmVudDsgYW5jZXN0b3I7IGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50KSB7XG4gICAgICAgICAgICBpZiAobm9kZXMuaW5jbHVkZXMoYW5jZXN0b3IpKSB7XG4gICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuZXhwb3J0cy5yZW1vdmVTdWJzZXRzID0gcmVtb3ZlU3Vic2V0cztcbi8qKlxuICogQ29tcGFyZSB0aGUgcG9zaXRpb24gb2Ygb25lIG5vZGUgYWdhaW5zdCBhbm90aGVyIG5vZGUgaW4gYW55IG90aGVyIGRvY3VtZW50LlxuICogVGhlIHJldHVybiB2YWx1ZSBpcyBhIGJpdG1hc2sgd2l0aCB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAqXG4gKiBEb2N1bWVudCBvcmRlcjpcbiAqID4gVGhlcmUgaXMgYW4gb3JkZXJpbmcsIGRvY3VtZW50IG9yZGVyLCBkZWZpbmVkIG9uIGFsbCB0aGUgbm9kZXMgaW4gdGhlXG4gKiA+IGRvY3VtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlXG4gKiA+IFhNTCByZXByZXNlbnRhdGlvbiBvZiBlYWNoIG5vZGUgb2NjdXJzIGluIHRoZSBYTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gKiA+IGRvY3VtZW50IGFmdGVyIGV4cGFuc2lvbiBvZiBnZW5lcmFsIGVudGl0aWVzLiBUaHVzLCB0aGUgZG9jdW1lbnQgZWxlbWVudFxuICogPiBub2RlIHdpbGwgYmUgdGhlIGZpcnN0IG5vZGUuIEVsZW1lbnQgbm9kZXMgb2NjdXIgYmVmb3JlIHRoZWlyIGNoaWxkcmVuLlxuICogPiBUaHVzLCBkb2N1bWVudCBvcmRlciBvcmRlcnMgZWxlbWVudCBub2RlcyBpbiBvcmRlciBvZiB0aGUgb2NjdXJyZW5jZSBvZlxuICogPiB0aGVpciBzdGFydC10YWcgaW4gdGhlIFhNTCAoYWZ0ZXIgZXhwYW5zaW9uIG9mIGVudGl0aWVzKS4gVGhlIGF0dHJpYnV0ZVxuICogPiBub2RlcyBvZiBhbiBlbGVtZW50IG9jY3VyIGFmdGVyIHRoZSBlbGVtZW50IGFuZCBiZWZvcmUgaXRzIGNoaWxkcmVuLiBUaGVcbiAqID4gcmVsYXRpdmUgb3JkZXIgb2YgYXR0cmlidXRlIG5vZGVzIGlzIGltcGxlbWVudGF0aW9uLWRlcGVuZGVudC4vXG4gKlxuICogU291cmNlOlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9nbG9zc2FyeS5odG1sI2R0LWRvY3VtZW50LW9yZGVyXG4gKlxuICogQHBhcmFtIG5vZGVBIFRoZSBmaXJzdCBub2RlIHRvIHVzZSBpbiB0aGUgY29tcGFyaXNvblxuICogQHBhcmFtIG5vZGVCIFRoZSBzZWNvbmQgbm9kZSB0byB1c2UgaW4gdGhlIGNvbXBhcmlzb25cbiAqIEByZXR1cm5zIEEgYml0bWFzayBkZXNjcmliaW5nIHRoZSBpbnB1dCBub2RlcycgcmVsYXRpdmUgcG9zaXRpb24uXG4gKlxuICogU2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1jb21wYXJlZG9jdW1lbnRwb3NpdGlvbiBmb3JcbiAqIGEgZGVzY3JpcHRpb24gb2YgdGhlc2UgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlQSwgbm9kZUIpIHtcbiAgICB2YXIgYVBhcmVudHMgPSBbXTtcbiAgICB2YXIgYlBhcmVudHMgPSBbXTtcbiAgICBpZiAobm9kZUEgPT09IG5vZGVCKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB2YXIgY3VycmVudCA9IHRhZ3R5cGVzXzEuaGFzQ2hpbGRyZW4obm9kZUEpID8gbm9kZUEgOiBub2RlQS5wYXJlbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgYVBhcmVudHMudW5zaGlmdChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICBjdXJyZW50ID0gdGFndHlwZXNfMS5oYXNDaGlsZHJlbihub2RlQikgPyBub2RlQiA6IG5vZGVCLnBhcmVudDtcbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICBiUGFyZW50cy51bnNoaWZ0KGN1cnJlbnQpO1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHZhciBtYXhJZHggPSBNYXRoLm1pbihhUGFyZW50cy5sZW5ndGgsIGJQYXJlbnRzLmxlbmd0aCk7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgd2hpbGUgKGlkeCA8IG1heElkeCAmJiBhUGFyZW50c1tpZHhdID09PSBiUGFyZW50c1tpZHhdKSB7XG4gICAgICAgIGlkeCsrO1xuICAgIH1cbiAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiAxIC8qIERJU0NPTk5FQ1RFRCAqLztcbiAgICB9XG4gICAgdmFyIHNoYXJlZFBhcmVudCA9IGFQYXJlbnRzW2lkeCAtIDFdO1xuICAgIHZhciBzaWJsaW5ncyA9IHNoYXJlZFBhcmVudC5jaGlsZHJlbjtcbiAgICB2YXIgYVNpYmxpbmcgPSBhUGFyZW50c1tpZHhdO1xuICAgIHZhciBiU2libGluZyA9IGJQYXJlbnRzW2lkeF07XG4gICAgaWYgKHNpYmxpbmdzLmluZGV4T2YoYVNpYmxpbmcpID4gc2libGluZ3MuaW5kZXhPZihiU2libGluZykpIHtcbiAgICAgICAgaWYgKHNoYXJlZFBhcmVudCA9PT0gbm9kZUIpIHtcbiAgICAgICAgICAgIHJldHVybiA0IC8qIEZPTExPV0lORyAqLyB8IDE2IC8qIENPTlRBSU5FRF9CWSAqLztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gNCAvKiBGT0xMT1dJTkcgKi87XG4gICAgfVxuICAgIGlmIChzaGFyZWRQYXJlbnQgPT09IG5vZGVBKSB7XG4gICAgICAgIHJldHVybiAyIC8qIFBSRUNFRElORyAqLyB8IDggLyogQ09OVEFJTlMgKi87XG4gICAgfVxuICAgIHJldHVybiAyIC8qIFBSRUNFRElORyAqLztcbn1cbmV4cG9ydHMuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcbi8qKlxuICogU29ydCBhbiBhcnJheSBvZiBub2RlcyBiYXNlZCBvbiB0aGVpciByZWxhdGl2ZSBwb3NpdGlvbiBpbiB0aGUgZG9jdW1lbnQgYW5kXG4gKiByZW1vdmUgYW55IGR1cGxpY2F0ZSBub2Rlcy4gSWYgdGhlIGFycmF5IGNvbnRhaW5zIG5vZGVzIHRoYXQgZG8gbm90IGJlbG9uZ1xuICogdG8gdGhlIHNhbWUgZG9jdW1lbnQsIHNvcnQgb3JkZXIgaXMgdW5zcGVjaWZpZWQuXG4gKlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIERPTSBub2Rlcy5cbiAqIEByZXR1cm5zIENvbGxlY3Rpb24gb2YgdW5pcXVlIG5vZGVzLCBzb3J0ZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZVNvcnQobm9kZXMpIHtcbiAgICBub2RlcyA9IG5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSwgaSwgYXJyKSB7IHJldHVybiAhYXJyLmluY2x1ZGVzKG5vZGUsIGkgKyAxKTsgfSk7XG4gICAgbm9kZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgcmVsYXRpdmUgPSBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhLCBiKTtcbiAgICAgICAgaWYgKHJlbGF0aXZlICYgMiAvKiBQUkVDRURJTkcgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWxhdGl2ZSAmIDQgLyogRk9MTE9XSU5HICovKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gbm9kZXM7XG59XG5leHBvcnRzLnVuaXF1ZVNvcnQgPSB1bmlxdWVTb3J0O1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3RyaW5naWZ5XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmF2ZXJzYWxcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21hbmlwdWxhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcXVlcnlpbmdcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2xlZ2FjeVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVyc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdGFndHlwZXNcIiksIGV4cG9ydHMpO1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUZlZWQgPSBleHBvcnRzLkZlZWRIYW5kbGVyID0gdm9pZCAwO1xudmFyIGRvbWhhbmRsZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZG9taGFuZGxlclwiKSk7XG52YXIgRG9tVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbXV0aWxzXCIpKTtcbnZhciBQYXJzZXJfMSA9IHJlcXVpcmUoXCIuL1BhcnNlclwiKTtcbnZhciBGZWVkSXRlbU1lZGlhTWVkaXVtO1xuKGZ1bmN0aW9uIChGZWVkSXRlbU1lZGlhTWVkaXVtKSB7XG4gICAgRmVlZEl0ZW1NZWRpYU1lZGl1bVtGZWVkSXRlbU1lZGlhTWVkaXVtW1wiaW1hZ2VcIl0gPSAwXSA9IFwiaW1hZ2VcIjtcbiAgICBGZWVkSXRlbU1lZGlhTWVkaXVtW0ZlZWRJdGVtTWVkaWFNZWRpdW1bXCJhdWRpb1wiXSA9IDFdID0gXCJhdWRpb1wiO1xuICAgIEZlZWRJdGVtTWVkaWFNZWRpdW1bRmVlZEl0ZW1NZWRpYU1lZGl1bVtcInZpZGVvXCJdID0gMl0gPSBcInZpZGVvXCI7XG4gICAgRmVlZEl0ZW1NZWRpYU1lZGl1bVtGZWVkSXRlbU1lZGlhTWVkaXVtW1wiZG9jdW1lbnRcIl0gPSAzXSA9IFwiZG9jdW1lbnRcIjtcbiAgICBGZWVkSXRlbU1lZGlhTWVkaXVtW0ZlZWRJdGVtTWVkaWFNZWRpdW1bXCJleGVjdXRhYmxlXCJdID0gNF0gPSBcImV4ZWN1dGFibGVcIjtcbn0pKEZlZWRJdGVtTWVkaWFNZWRpdW0gfHwgKEZlZWRJdGVtTWVkaWFNZWRpdW0gPSB7fSkpO1xudmFyIEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uO1xuKGZ1bmN0aW9uIChGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbikge1xuICAgIEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW0ZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW1wic2FtcGxlXCJdID0gMF0gPSBcInNhbXBsZVwiO1xuICAgIEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW0ZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW1wiZnVsbFwiXSA9IDFdID0gXCJmdWxsXCI7XG4gICAgRmVlZEl0ZW1NZWRpYUV4cHJlc3Npb25bRmVlZEl0ZW1NZWRpYUV4cHJlc3Npb25bXCJub25zdG9wXCJdID0gMl0gPSBcIm5vbnN0b3BcIjtcbn0pKEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uIHx8IChGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbiA9IHt9KSk7XG4vLyBUT0RPOiBDb25zdW1lIGRhdGEgYXMgaXQgaXMgY29taW5nIGluXG52YXIgRmVlZEhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZlZWRIYW5kbGVyLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBGZWVkSGFuZGxlcihjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNhbGxiYWNrLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZlZWRIYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIGZlZWRSb290ID0gZ2V0T25lRWxlbWVudChpc1ZhbGlkRmVlZCwgdGhpcy5kb20pO1xuICAgICAgICBpZiAoIWZlZWRSb290KSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKG5ldyBFcnJvcihcImNvdWxkbid0IGZpbmQgcm9vdCBvZiBmZWVkXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmVlZCA9IHt9O1xuICAgICAgICBpZiAoZmVlZFJvb3QubmFtZSA9PT0gXCJmZWVkXCIpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHMgPSBmZWVkUm9vdC5jaGlsZHJlbjtcbiAgICAgICAgICAgIGZlZWQudHlwZSA9IFwiYXRvbVwiO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImlkXCIsIFwiaWRcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICB2YXIgaHJlZiA9IGdldEF0dHJpYnV0ZShcImhyZWZcIiwgZ2V0T25lRWxlbWVudChcImxpbmtcIiwgY2hpbGRzKSk7XG4gICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgIGZlZWQubGluayA9IGhyZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwiZGVzY3JpcHRpb25cIiwgXCJzdWJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgICAgICAgICAgdmFyIHVwZGF0ZWQgPSBmZXRjaChcInVwZGF0ZWRcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgZmVlZC51cGRhdGVkID0gbmV3IERhdGUodXBkYXRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwiYXV0aG9yXCIsIFwiZW1haWxcIiwgY2hpbGRzLCB0cnVlKTtcbiAgICAgICAgICAgIGZlZWQuaXRlbXMgPSBnZXRFbGVtZW50cyhcImVudHJ5XCIsIGNoaWxkcykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gaXRlbS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiaWRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgdmFyIGhyZWYgPSBnZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGdldE9uZUVsZW1lbnQoXCJsaW5rXCIsIGNoaWxkcmVuKSk7XG4gICAgICAgICAgICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkubGluayA9IGhyZWY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbiA9IGZldGNoKFwic3VtbWFyeVwiLCBjaGlsZHJlbikgfHwgZmV0Y2goXCJjb250ZW50XCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHB1YkRhdGUgPSBmZXRjaChcInVwZGF0ZWRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGlmIChwdWJEYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnB1YkRhdGUgPSBuZXcgRGF0ZShwdWJEYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW50cnkubWVkaWEgPSBnZXRNZWRpYUVsZW1lbnRzKGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHMgPSAoX2IgPSAoX2EgPSBnZXRPbmVFbGVtZW50KFwiY2hhbm5lbFwiLCBmZWVkUm9vdC5jaGlsZHJlbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jaGlsZHJlbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgICAgICAgICBmZWVkLnR5cGUgPSBmZWVkUm9vdC5uYW1lLnN1YnN0cigwLCAzKTtcbiAgICAgICAgICAgIGZlZWQuaWQgPSBcIlwiO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJsaW5rXCIsIFwibGlua1wiLCBjaGlsZHMpO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImRlc2NyaXB0aW9uXCIsIFwiZGVzY3JpcHRpb25cIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIHZhciB1cGRhdGVkID0gZmV0Y2goXCJsYXN0QnVpbGREYXRlXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICAgICAgICAgIGZlZWQudXBkYXRlZCA9IG5ldyBEYXRlKHVwZGF0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcIm1hbmFnaW5nRWRpdG9yXCIsIGNoaWxkcywgdHJ1ZSk7XG4gICAgICAgICAgICBmZWVkLml0ZW1zID0gZ2V0RWxlbWVudHMoXCJpdGVtXCIsIGZlZWRSb290LmNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xuICAgICAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiaWRcIiwgXCJndWlkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwibGlua1wiLCBcImxpbmtcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiZGVzY3JpcHRpb25cIiwgXCJkZXNjcmlwdGlvblwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgdmFyIHB1YkRhdGUgPSBmZXRjaChcInB1YkRhdGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGlmIChwdWJEYXRlKVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUocHViRGF0ZSk7XG4gICAgICAgICAgICAgICAgZW50cnkubWVkaWEgPSBnZXRNZWRpYUVsZW1lbnRzKGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZlZWQgPSBmZWVkO1xuICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKG51bGwpO1xuICAgIH07XG4gICAgcmV0dXJuIEZlZWRIYW5kbGVyO1xufShkb21oYW5kbGVyXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5GZWVkSGFuZGxlciA9IEZlZWRIYW5kbGVyO1xuZnVuY3Rpb24gZ2V0TWVkaWFFbGVtZW50cyh3aGVyZSkge1xuICAgIHJldHVybiBnZXRFbGVtZW50cyhcIm1lZGlhOmNvbnRlbnRcIiwgd2hlcmUpLm1hcChmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICB2YXIgbWVkaWEgPSB7XG4gICAgICAgICAgICBtZWRpdW06IGVsZW0uYXR0cmlicy5tZWRpdW0sXG4gICAgICAgICAgICBpc0RlZmF1bHQ6ICEhZWxlbS5hdHRyaWJzLmlzRGVmYXVsdCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy51cmwpIHtcbiAgICAgICAgICAgIG1lZGlhLnVybCA9IGVsZW0uYXR0cmlicy51cmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5maWxlU2l6ZSkge1xuICAgICAgICAgICAgbWVkaWEuZmlsZVNpemUgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuZmlsZVNpemUsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLnR5cGUpIHtcbiAgICAgICAgICAgIG1lZGlhLnR5cGUgPSBlbGVtLmF0dHJpYnMudHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIG1lZGlhLmV4cHJlc3Npb24gPSBlbGVtLmF0dHJpYnNcbiAgICAgICAgICAgICAgICAuZXhwcmVzc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmJpdHJhdGUpIHtcbiAgICAgICAgICAgIG1lZGlhLmJpdHJhdGUgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuYml0cmF0ZSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMuZnJhbWVyYXRlKSB7XG4gICAgICAgICAgICBtZWRpYS5mcmFtZXJhdGUgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuZnJhbWVyYXRlLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5zYW1wbGluZ3JhdGUpIHtcbiAgICAgICAgICAgIG1lZGlhLnNhbXBsaW5ncmF0ZSA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy5zYW1wbGluZ3JhdGUsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmNoYW5uZWxzKSB7XG4gICAgICAgICAgICBtZWRpYS5jaGFubmVscyA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy5jaGFubmVscywgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgIG1lZGlhLmR1cmF0aW9uID0gcGFyc2VJbnQoZWxlbS5hdHRyaWJzLmR1cmF0aW9uLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5oZWlnaHQpIHtcbiAgICAgICAgICAgIG1lZGlhLmhlaWdodCA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy5oZWlnaHQsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLndpZHRoKSB7XG4gICAgICAgICAgICBtZWRpYS53aWR0aCA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy53aWR0aCwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMubGFuZykge1xuICAgICAgICAgICAgbWVkaWEubGFuZyA9IGVsZW0uYXR0cmlicy5sYW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldEVsZW1lbnRzKHRhZ05hbWUsIHdoZXJlKSB7XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUsIHdoZXJlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGdldE9uZUVsZW1lbnQodGFnTmFtZSwgbm9kZSkge1xuICAgIHJldHVybiBEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lLCBub2RlLCB0cnVlLCAxKVswXTtcbn1cbmZ1bmN0aW9uIGZldGNoKHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlKSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gZmFsc2U7IH1cbiAgICByZXR1cm4gRG9tVXRpbHMuZ2V0VGV4dChEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lLCB3aGVyZSwgcmVjdXJzZSwgMSkpLnRyaW0oKTtcbn1cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShuYW1lLCBlbGVtKSB7XG4gICAgaWYgKCFlbGVtKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgYXR0cmlicyA9IGVsZW0uYXR0cmlicztcbiAgICByZXR1cm4gYXR0cmlic1tuYW1lXTtcbn1cbmZ1bmN0aW9uIGFkZENvbmRpdGlvbmFsbHkob2JqLCBwcm9wLCB3aGF0LCB3aGVyZSwgcmVjdXJzZSkge1xuICAgIGlmIChyZWN1cnNlID09PSB2b2lkIDApIHsgcmVjdXJzZSA9IGZhbHNlOyB9XG4gICAgdmFyIHRtcCA9IGZldGNoKHdoYXQsIHdoZXJlLCByZWN1cnNlKTtcbiAgICBpZiAodG1wKVxuICAgICAgICBvYmpbcHJvcF0gPSB0bXA7XG59XG5mdW5jdGlvbiBpc1ZhbGlkRmVlZCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gXCJyc3NcIiB8fCB2YWx1ZSA9PT0gXCJmZWVkXCIgfHwgdmFsdWUgPT09IFwicmRmOlJERlwiO1xufVxuLyoqXG4gKiBQYXJzZSBhIGZlZWQuXG4gKlxuICogQHBhcmFtIGZlZWQgVGhlIGZlZWQgdGhhdCBzaG91bGQgYmUgcGFyc2VkLCBhcyBhIHN0cmluZy5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsbHksIG9wdGlvbnMgZm9yIHBhcnNpbmcuIFdoZW4gdXNpbmcgdGhpcyBvcHRpb24sIHlvdSBzaG91bGQgc2V0IGB4bWxNb2RlYCB0byBgdHJ1ZWAuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRmVlZChmZWVkLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyB4bWxNb2RlOiB0cnVlIH07IH1cbiAgICB2YXIgaGFuZGxlciA9IG5ldyBGZWVkSGFuZGxlcihvcHRpb25zKTtcbiAgICBuZXcgUGFyc2VyXzEuUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpLmVuZChmZWVkKTtcbiAgICByZXR1cm4gaGFuZGxlci5mZWVkO1xufVxuZXhwb3J0cy5wYXJzZUZlZWQgPSBwYXJzZUZlZWQ7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJzc0hhbmRsZXIgPSBleHBvcnRzLkRlZmF1bHRIYW5kbGVyID0gZXhwb3J0cy5Eb21VdGlscyA9IGV4cG9ydHMuRWxlbWVudFR5cGUgPSBleHBvcnRzLlRva2VuaXplciA9IGV4cG9ydHMuY3JlYXRlRG9tU3RyZWFtID0gZXhwb3J0cy5wYXJzZURPTSA9IGV4cG9ydHMucGFyc2VEb2N1bWVudCA9IGV4cG9ydHMuRG9tSGFuZGxlciA9IGV4cG9ydHMuUGFyc2VyID0gdm9pZCAwO1xudmFyIFBhcnNlcl8xID0gcmVxdWlyZShcIi4vUGFyc2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBQYXJzZXJfMS5QYXJzZXI7IH0gfSk7XG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEb21IYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlZmF1bHRIYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcjsgfSB9KTtcbi8vIEhlbHBlciBtZXRob2RzXG4vKipcbiAqIFBhcnNlcyB0aGUgZGF0YSwgcmV0dXJucyB0aGUgcmVzdWx0aW5nIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRoYXQgc2hvdWxkIGJlIHBhcnNlZC5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBwYXJzZXIgYW5kIERPTSBidWlsZGVyLlxuICovXG5mdW5jdGlvbiBwYXJzZURvY3VtZW50KGRhdGEsIG9wdGlvbnMpIHtcbiAgICB2YXIgaGFuZGxlciA9IG5ldyBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgIG5ldyBQYXJzZXJfMS5QYXJzZXIoaGFuZGxlciwgb3B0aW9ucykuZW5kKGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVyLnJvb3Q7XG59XG5leHBvcnRzLnBhcnNlRG9jdW1lbnQgPSBwYXJzZURvY3VtZW50O1xuLyoqXG4gKiBQYXJzZXMgZGF0YSwgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcm9vdCBub2Rlcy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIHJvb3Qgbm9kZXMgc3RpbGwgaGF2ZSBhIGBEb2N1bWVudGAgbm9kZSBhcyB0aGVpciBwYXJlbnQuXG4gKiBVc2UgYHBhcnNlRG9jdW1lbnRgIHRvIGdldCB0aGUgYERvY3VtZW50YCBub2RlIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdGhhdCBzaG91bGQgYmUgcGFyc2VkLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHBhcnNlciBhbmQgRE9NIGJ1aWxkZXIuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYHBhcnNlRG9jdW1lbnRgIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRE9NKGRhdGEsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcGFyc2VEb2N1bWVudChkYXRhLCBvcHRpb25zKS5jaGlsZHJlbjtcbn1cbmV4cG9ydHMucGFyc2VET00gPSBwYXJzZURPTTtcbi8qKlxuICogQ3JlYXRlcyBhIHBhcnNlciBpbnN0YW5jZSwgd2l0aCBhbiBhdHRhY2hlZCBET00gaGFuZGxlci5cbiAqXG4gKiBAcGFyYW0gY2IgQSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2UgcGFyc2luZyBoYXMgYmVlbiBjb21wbGV0ZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcGFyc2VyIGFuZCBET00gYnVpbGRlci5cbiAqIEBwYXJhbSBlbGVtZW50Q2IgQW4gb3B0aW9uYWwgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCBldmVyeSB0aW1lIGEgdGFnIGhhcyBiZWVuIGNvbXBsZXRlZCBpbnNpZGUgb2YgdGhlIERPTS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRG9tU3RyZWFtKGNiLCBvcHRpb25zLCBlbGVtZW50Q2IpIHtcbiAgICB2YXIgaGFuZGxlciA9IG5ldyBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcihjYiwgb3B0aW9ucywgZWxlbWVudENiKTtcbiAgICByZXR1cm4gbmV3IFBhcnNlcl8xLlBhcnNlcihoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlRG9tU3RyZWFtID0gY3JlYXRlRG9tU3RyZWFtO1xudmFyIFRva2VuaXplcl8xID0gcmVxdWlyZShcIi4vVG9rZW5pemVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9rZW5pemVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQoVG9rZW5pemVyXzEpLmRlZmF1bHQ7IH0gfSk7XG52YXIgRWxlbWVudFR5cGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpKTtcbmV4cG9ydHMuRWxlbWVudFR5cGUgPSBFbGVtZW50VHlwZTtcbi8qXG4gKiBBbGwgb2YgdGhlIGZvbGxvd2luZyBleHBvcnRzIGV4aXN0IGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqIFRoZXkgc2hvdWxkIHByb2JhYmx5IGJlIHJlbW92ZWQgZXZlbnR1YWxseS5cbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0ZlZWRIYW5kbGVyXCIpLCBleHBvcnRzKTtcbmV4cG9ydHMuRG9tVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbXV0aWxzXCIpKTtcbnZhciBGZWVkSGFuZGxlcl8xID0gcmVxdWlyZShcIi4vRmVlZEhhbmRsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSc3NIYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBGZWVkSGFuZGxlcl8xLkZlZWRIYW5kbGVyOyB9IH0pO1xuIiwgImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuaW1wb3J0IHN0dWJGYWxzZSBmcm9tICcuL3N0dWJGYWxzZS5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuZXhwb3J0IGRlZmF1bHQgaXNCdWZmZXI7XG4iLCAiaW1wb3J0IGZyZWVHbG9iYWwgZnJvbSAnLi9fZnJlZUdsb2JhbC5qcyc7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgdmFyIHR5cGVzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlKCd1dGlsJykudHlwZXM7XG5cbiAgICBpZiAodHlwZXMpIHtcbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgfSBjYXRjaCAoZSkge31cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IG5vZGVVdGlsO1xuIiwgImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZUJ1ZmZlcjtcbiIsICIvLyBOb3RlOiB0aGlzIGlzIHRoZSBzZW12ZXIub3JnIHZlcnNpb24gb2YgdGhlIHNwZWMgdGhhdCBpdCBpbXBsZW1lbnRzXG4vLyBOb3QgbmVjZXNzYXJpbHkgdGhlIHBhY2thZ2UgdmVyc2lvbiBvZiB0aGlzIGNvZGUuXG5jb25zdCBTRU1WRVJfU1BFQ19WRVJTSU9OID0gJzIuMC4wJ1xuXG5jb25zdCBNQVhfTEVOR1RIID0gMjU2XG5jb25zdCBNQVhfU0FGRV9JTlRFR0VSID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHxcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gOTAwNzE5OTI1NDc0MDk5MVxuXG4vLyBNYXggc2FmZSBzZWdtZW50IGxlbmd0aCBmb3IgY29lcmNpb24uXG5jb25zdCBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIID0gMTZcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFNFTVZFUl9TUEVDX1ZFUlNJT04sXG4gIE1BWF9MRU5HVEgsXG4gIE1BWF9TQUZFX0lOVEVHRVIsXG4gIE1BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEhcbn1cbiIsICJjb25zdCBkZWJ1ZyA9IChcbiAgdHlwZW9mIHByb2Nlc3MgPT09ICdvYmplY3QnICYmXG4gIHByb2Nlc3MuZW52ICYmXG4gIHByb2Nlc3MuZW52Lk5PREVfREVCVUcgJiZcbiAgL1xcYnNlbXZlclxcYi9pLnRlc3QocHJvY2Vzcy5lbnYuTk9ERV9ERUJVRylcbikgPyAoLi4uYXJncykgPT4gY29uc29sZS5lcnJvcignU0VNVkVSJywgLi4uYXJncylcbiAgOiAoKSA9PiB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYnVnXG4iLCAiY29uc3QgeyBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIIH0gPSByZXF1aXJlKCcuL2NvbnN0YW50cycpXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJy4vZGVidWcnKVxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0ge31cblxuLy8gVGhlIGFjdHVhbCByZWdleHBzIGdvIG9uIGV4cG9ydHMucmVcbmNvbnN0IHJlID0gZXhwb3J0cy5yZSA9IFtdXG5jb25zdCBzcmMgPSBleHBvcnRzLnNyYyA9IFtdXG5jb25zdCB0ID0gZXhwb3J0cy50ID0ge31cbmxldCBSID0gMFxuXG5jb25zdCBjcmVhdGVUb2tlbiA9IChuYW1lLCB2YWx1ZSwgaXNHbG9iYWwpID0+IHtcbiAgY29uc3QgaW5kZXggPSBSKytcbiAgZGVidWcoaW5kZXgsIHZhbHVlKVxuICB0W25hbWVdID0gaW5kZXhcbiAgc3JjW2luZGV4XSA9IHZhbHVlXG4gIHJlW2luZGV4XSA9IG5ldyBSZWdFeHAodmFsdWUsIGlzR2xvYmFsID8gJ2cnIDogdW5kZWZpbmVkKVxufVxuXG4vLyBUaGUgZm9sbG93aW5nIFJlZ3VsYXIgRXhwcmVzc2lvbnMgY2FuIGJlIHVzZWQgZm9yIHRva2VuaXppbmcsXG4vLyB2YWxpZGF0aW5nLCBhbmQgcGFyc2luZyBTZW1WZXIgdmVyc2lvbiBzdHJpbmdzLlxuXG4vLyAjIyBOdW1lcmljIElkZW50aWZpZXJcbi8vIEEgc2luZ2xlIGAwYCwgb3IgYSBub24temVybyBkaWdpdCBmb2xsb3dlZCBieSB6ZXJvIG9yIG1vcmUgZGlnaXRzLlxuXG5jcmVhdGVUb2tlbignTlVNRVJJQ0lERU5USUZJRVInLCAnMHxbMS05XVxcXFxkKicpXG5jcmVhdGVUb2tlbignTlVNRVJJQ0lERU5USUZJRVJMT09TRScsICdbMC05XSsnKVxuXG4vLyAjIyBOb24tbnVtZXJpYyBJZGVudGlmaWVyXG4vLyBaZXJvIG9yIG1vcmUgZGlnaXRzLCBmb2xsb3dlZCBieSBhIGxldHRlciBvciBoeXBoZW4sIGFuZCB0aGVuIHplcm8gb3Jcbi8vIG1vcmUgbGV0dGVycywgZGlnaXRzLCBvciBoeXBoZW5zLlxuXG5jcmVhdGVUb2tlbignTk9OTlVNRVJJQ0lERU5USUZJRVInLCAnXFxcXGQqW2EtekEtWi1dW2EtekEtWjAtOS1dKicpXG5cbi8vICMjIE1haW4gVmVyc2lvblxuLy8gVGhyZWUgZG90LXNlcGFyYXRlZCBudW1lcmljIGlkZW50aWZpZXJzLlxuXG5jcmVhdGVUb2tlbignTUFJTlZFUlNJT04nLCBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgIGAoJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUl19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSXX0pYClcblxuY3JlYXRlVG9rZW4oJ01BSU5WRVJTSU9OTE9PU0UnLCBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KVxcXFwuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJMT09TRV19KWApXG5cbi8vICMjIFByZS1yZWxlYXNlIFZlcnNpb24gSWRlbnRpZmllclxuLy8gQSBudW1lcmljIGlkZW50aWZpZXIsIG9yIGEgbm9uLW51bWVyaWMgaWRlbnRpZmllci5cblxuY3JlYXRlVG9rZW4oJ1BSRVJFTEVBU0VJREVOVElGSUVSJywgYCg/OiR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdXG59fCR7c3JjW3QuTk9OTlVNRVJJQ0lERU5USUZJRVJdfSlgKVxuXG5jcmVhdGVUb2tlbignUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRScsIGAoPzoke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdXG59fCR7c3JjW3QuTk9OTlVNRVJJQ0lERU5USUZJRVJdfSlgKVxuXG4vLyAjIyBQcmUtcmVsZWFzZSBWZXJzaW9uXG4vLyBIeXBoZW4sIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlIGRvdC1zZXBhcmF0ZWQgcHJlLXJlbGVhc2UgdmVyc2lvblxuLy8gaWRlbnRpZmllcnMuXG5cbmNyZWF0ZVRva2VuKCdQUkVSRUxFQVNFJywgYCg/Oi0oJHtzcmNbdC5QUkVSRUxFQVNFSURFTlRJRklFUl1cbn0oPzpcXFxcLiR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJdfSkqKSlgKVxuXG5jcmVhdGVUb2tlbignUFJFUkVMRUFTRUxPT1NFJywgYCg/Oi0/KCR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRV1cbn0oPzpcXFxcLiR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJMT09TRV19KSopKWApXG5cbi8vICMjIEJ1aWxkIE1ldGFkYXRhIElkZW50aWZpZXJcbi8vIEFueSBjb21iaW5hdGlvbiBvZiBkaWdpdHMsIGxldHRlcnMsIG9yIGh5cGhlbnMuXG5cbmNyZWF0ZVRva2VuKCdCVUlMRElERU5USUZJRVInLCAnWzAtOUEtWmEtei1dKycpXG5cbi8vICMjIEJ1aWxkIE1ldGFkYXRhXG4vLyBQbHVzIHNpZ24sIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlIHBlcmlvZC1zZXBhcmF0ZWQgYnVpbGQgbWV0YWRhdGFcbi8vIGlkZW50aWZpZXJzLlxuXG5jcmVhdGVUb2tlbignQlVJTEQnLCBgKD86XFxcXCsoJHtzcmNbdC5CVUlMRElERU5USUZJRVJdXG59KD86XFxcXC4ke3NyY1t0LkJVSUxESURFTlRJRklFUl19KSopKWApXG5cbi8vICMjIEZ1bGwgVmVyc2lvbiBTdHJpbmdcbi8vIEEgbWFpbiB2ZXJzaW9uLCBmb2xsb3dlZCBvcHRpb25hbGx5IGJ5IGEgcHJlLXJlbGVhc2UgdmVyc2lvbiBhbmRcbi8vIGJ1aWxkIG1ldGFkYXRhLlxuXG4vLyBOb3RlIHRoYXQgdGhlIG9ubHkgbWFqb3IsIG1pbm9yLCBwYXRjaCwgYW5kIHByZS1yZWxlYXNlIHNlY3Rpb25zIG9mXG4vLyB0aGUgdmVyc2lvbiBzdHJpbmcgYXJlIGNhcHR1cmluZyBncm91cHMuICBUaGUgYnVpbGQgbWV0YWRhdGEgaXMgbm90IGFcbi8vIGNhcHR1cmluZyBncm91cCwgYmVjYXVzZSBpdCBzaG91bGQgbm90IGV2ZXIgYmUgdXNlZCBpbiB2ZXJzaW9uXG4vLyBjb21wYXJpc29uLlxuXG5jcmVhdGVUb2tlbignRlVMTFBMQUlOJywgYHY/JHtzcmNbdC5NQUlOVkVSU0lPTl1cbn0ke3NyY1t0LlBSRVJFTEVBU0VdfT8ke1xuICBzcmNbdC5CVUlMRF19P2ApXG5cbmNyZWF0ZVRva2VuKCdGVUxMJywgYF4ke3NyY1t0LkZVTExQTEFJTl19JGApXG5cbi8vIGxpa2UgZnVsbCwgYnV0IGFsbG93cyB2MS4yLjMgYW5kID0xLjIuMywgd2hpY2ggcGVvcGxlIGRvIHNvbWV0aW1lcy5cbi8vIGFsc28sIDEuMC4wYWxwaGExIChwcmVyZWxlYXNlIHdpdGhvdXQgdGhlIGh5cGhlbikgd2hpY2ggaXMgcHJldHR5XG4vLyBjb21tb24gaW4gdGhlIG5wbSByZWdpc3RyeS5cbmNyZWF0ZVRva2VuKCdMT09TRVBMQUlOJywgYFt2PVxcXFxzXSoke3NyY1t0Lk1BSU5WRVJTSU9OTE9PU0VdXG59JHtzcmNbdC5QUkVSRUxFQVNFTE9PU0VdfT8ke1xuICBzcmNbdC5CVUlMRF19P2ApXG5cbmNyZWF0ZVRva2VuKCdMT09TRScsIGBeJHtzcmNbdC5MT09TRVBMQUlOXX0kYClcblxuY3JlYXRlVG9rZW4oJ0dUTFQnLCAnKCg/Ojx8Pik/PT8pJylcblxuLy8gU29tZXRoaW5nIGxpa2UgXCIyLipcIiBvciBcIjEuMi54XCIuXG4vLyBOb3RlIHRoYXQgXCJ4LnhcIiBpcyBhIHZhbGlkIHhSYW5nZSBpZGVudGlmZXIsIG1lYW5pbmcgXCJhbnkgdmVyc2lvblwiXG4vLyBPbmx5IHRoZSBmaXJzdCBpdGVtIGlzIHN0cmljdGx5IHJlcXVpcmVkLlxuY3JlYXRlVG9rZW4oJ1hSQU5HRUlERU5USUZJRVJMT09TRScsIGAke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdfXx4fFh8XFxcXCpgKVxuY3JlYXRlVG9rZW4oJ1hSQU5HRUlERU5USUZJRVInLCBgJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUl19fHh8WHxcXFxcKmApXG5cbmNyZWF0ZVRva2VuKCdYUkFOR0VQTEFJTicsIGBbdj1cXFxcc10qKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUl19KWAgK1xuICAgICAgICAgICAgICAgICAgIGAoPzpcXFxcLigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJdfSlgICtcbiAgICAgICAgICAgICAgICAgICBgKD86XFxcXC4oJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSXX0pYCArXG4gICAgICAgICAgICAgICAgICAgYCg/OiR7c3JjW3QuUFJFUkVMRUFTRV19KT8ke1xuICAgICAgICAgICAgICAgICAgICAgc3JjW3QuQlVJTERdfT9gICtcbiAgICAgICAgICAgICAgICAgICBgKT8pP2ApXG5cbmNyZWF0ZVRva2VuKCdYUkFOR0VQTEFJTkxPT1NFJywgYFt2PVxcXFxzXSooJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAoPzpcXFxcLigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJMT09TRV19KWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCg/OlxcXFwuKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUkxPT1NFXX0pYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKD86JHtzcmNbdC5QUkVSRUxFQVNFTE9PU0VdfSk/JHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjW3QuQlVJTERdfT9gICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGApPyk/YClcblxuY3JlYXRlVG9rZW4oJ1hSQU5HRScsIGBeJHtzcmNbdC5HVExUXX1cXFxccyoke3NyY1t0LlhSQU5HRVBMQUlOXX0kYClcbmNyZWF0ZVRva2VuKCdYUkFOR0VMT09TRScsIGBeJHtzcmNbdC5HVExUXX1cXFxccyoke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSRgKVxuXG4vLyBDb2VyY2lvbi5cbi8vIEV4dHJhY3QgYW55dGhpbmcgdGhhdCBjb3VsZCBjb25jZWl2YWJseSBiZSBhIHBhcnQgb2YgYSB2YWxpZCBzZW12ZXJcbmNyZWF0ZVRva2VuKCdDT0VSQ0UnLCBgJHsnKF58W15cXFxcZF0pJyArXG4gICAgICAgICAgICAgICcoXFxcXGR7MSwnfSR7TUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSH19KWAgK1xuICAgICAgICAgICAgICBgKD86XFxcXC4oXFxcXGR7MSwke01BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEh9fSkpP2AgK1xuICAgICAgICAgICAgICBgKD86XFxcXC4oXFxcXGR7MSwke01BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEh9fSkpP2AgK1xuICAgICAgICAgICAgICBgKD86JHxbXlxcXFxkXSlgKVxuY3JlYXRlVG9rZW4oJ0NPRVJDRVJUTCcsIHNyY1t0LkNPRVJDRV0sIHRydWUpXG5cbi8vIFRpbGRlIHJhbmdlcy5cbi8vIE1lYW5pbmcgaXMgXCJyZWFzb25hYmx5IGF0IG9yIGdyZWF0ZXIgdGhhblwiXG5jcmVhdGVUb2tlbignTE9ORVRJTERFJywgJyg/On4+PyknKVxuXG5jcmVhdGVUb2tlbignVElMREVUUklNJywgYChcXFxccyopJHtzcmNbdC5MT05FVElMREVdfVxcXFxzK2AsIHRydWUpXG5leHBvcnRzLnRpbGRlVHJpbVJlcGxhY2UgPSAnJDF+J1xuXG5jcmVhdGVUb2tlbignVElMREUnLCBgXiR7c3JjW3QuTE9ORVRJTERFXX0ke3NyY1t0LlhSQU5HRVBMQUlOXX0kYClcbmNyZWF0ZVRva2VuKCdUSUxERUxPT1NFJywgYF4ke3NyY1t0LkxPTkVUSUxERV19JHtzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXX0kYClcblxuLy8gQ2FyZXQgcmFuZ2VzLlxuLy8gTWVhbmluZyBpcyBcImF0IGxlYXN0IGFuZCBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoXCJcbmNyZWF0ZVRva2VuKCdMT05FQ0FSRVQnLCAnKD86XFxcXF4pJylcblxuY3JlYXRlVG9rZW4oJ0NBUkVUVFJJTScsIGAoXFxcXHMqKSR7c3JjW3QuTE9ORUNBUkVUXX1cXFxccytgLCB0cnVlKVxuZXhwb3J0cy5jYXJldFRyaW1SZXBsYWNlID0gJyQxXidcblxuY3JlYXRlVG9rZW4oJ0NBUkVUJywgYF4ke3NyY1t0LkxPTkVDQVJFVF19JHtzcmNbdC5YUkFOR0VQTEFJTl19JGApXG5jcmVhdGVUb2tlbignQ0FSRVRMT09TRScsIGBeJHtzcmNbdC5MT05FQ0FSRVRdfSR7c3JjW3QuWFJBTkdFUExBSU5MT09TRV19JGApXG5cbi8vIEEgc2ltcGxlIGd0L2x0L2VxIHRoaW5nLCBvciBqdXN0IFwiXCIgdG8gaW5kaWNhdGUgXCJhbnkgdmVyc2lvblwiXG5jcmVhdGVUb2tlbignQ09NUEFSQVRPUkxPT1NFJywgYF4ke3NyY1t0LkdUTFRdfVxcXFxzKigke3NyY1t0LkxPT1NFUExBSU5dfSkkfF4kYClcbmNyZWF0ZVRva2VuKCdDT01QQVJBVE9SJywgYF4ke3NyY1t0LkdUTFRdfVxcXFxzKigke3NyY1t0LkZVTExQTEFJTl19KSR8XiRgKVxuXG4vLyBBbiBleHByZXNzaW9uIHRvIHN0cmlwIGFueSB3aGl0ZXNwYWNlIGJldHdlZW4gdGhlIGd0bHQgYW5kIHRoZSB0aGluZ1xuLy8gaXQgbW9kaWZpZXMsIHNvIHRoYXQgYD4gMS4yLjNgID09PiBgPjEuMi4zYFxuY3JlYXRlVG9rZW4oJ0NPTVBBUkFUT1JUUklNJywgYChcXFxccyopJHtzcmNbdC5HVExUXVxufVxcXFxzKigke3NyY1t0LkxPT1NFUExBSU5dfXwke3NyY1t0LlhSQU5HRVBMQUlOXX0pYCwgdHJ1ZSlcbmV4cG9ydHMuY29tcGFyYXRvclRyaW1SZXBsYWNlID0gJyQxJDIkMydcblxuLy8gU29tZXRoaW5nIGxpa2UgYDEuMi4zIC0gMS4yLjRgXG4vLyBOb3RlIHRoYXQgdGhlc2UgYWxsIHVzZSB0aGUgbG9vc2UgZm9ybSwgYmVjYXVzZSB0aGV5J2xsIGJlXG4vLyBjaGVja2VkIGFnYWluc3QgZWl0aGVyIHRoZSBzdHJpY3Qgb3IgbG9vc2UgY29tcGFyYXRvciBmb3JtXG4vLyBsYXRlci5cbmNyZWF0ZVRva2VuKCdIWVBIRU5SQU5HRScsIGBeXFxcXHMqKCR7c3JjW3QuWFJBTkdFUExBSU5dfSlgICtcbiAgICAgICAgICAgICAgICAgICBgXFxcXHMrLVxcXFxzK2AgK1xuICAgICAgICAgICAgICAgICAgIGAoJHtzcmNbdC5YUkFOR0VQTEFJTl19KWAgK1xuICAgICAgICAgICAgICAgICAgIGBcXFxccyokYClcblxuY3JlYXRlVG9rZW4oJ0hZUEhFTlJBTkdFTE9PU0UnLCBgXlxcXFxzKigke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcXFxccystXFxcXHMrYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuWFJBTkdFUExBSU5MT09TRV19KWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYFxcXFxzKiRgKVxuXG4vLyBTdGFyIHJhbmdlcyBiYXNpY2FsbHkganVzdCBhbGxvdyBhbnl0aGluZyBhdCBhbGwuXG5jcmVhdGVUb2tlbignU1RBUicsICcoPHw+KT89P1xcXFxzKlxcXFwqJylcbi8vID49MC4wLjAgaXMgbGlrZSBhIHN0YXJcbmNyZWF0ZVRva2VuKCdHVEUwJywgJ15cXFxccyo+PVxcXFxzKjBcXC4wXFwuMFxcXFxzKiQnKVxuY3JlYXRlVG9rZW4oJ0dURTBQUkUnLCAnXlxcXFxzKj49XFxcXHMqMFxcLjBcXC4wLTBcXFxccyokJylcbiIsICIvLyBwYXJzZSBvdXQganVzdCB0aGUgb3B0aW9ucyB3ZSBjYXJlIGFib3V0IHNvIHdlIGFsd2F5cyBnZXQgYSBjb25zaXN0ZW50XG4vLyBvYmogd2l0aCBrZXlzIGluIGEgY29uc2lzdGVudCBvcmRlci5cbmNvbnN0IG9wdHMgPSBbJ2luY2x1ZGVQcmVyZWxlYXNlJywgJ2xvb3NlJywgJ3J0bCddXG5jb25zdCBwYXJzZU9wdGlvbnMgPSBvcHRpb25zID0+XG4gICFvcHRpb25zID8ge31cbiAgOiB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgPyB7IGxvb3NlOiB0cnVlIH1cbiAgOiBvcHRzLmZpbHRlcihrID0+IG9wdGlvbnNba10pLnJlZHVjZSgob3B0aW9ucywgaykgPT4ge1xuICAgIG9wdGlvbnNba10gPSB0cnVlXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfSwge30pXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlT3B0aW9uc1xuIiwgImNvbnN0IG51bWVyaWMgPSAvXlswLTldKyQvXG5jb25zdCBjb21wYXJlSWRlbnRpZmllcnMgPSAoYSwgYikgPT4ge1xuICBjb25zdCBhbnVtID0gbnVtZXJpYy50ZXN0KGEpXG4gIGNvbnN0IGJudW0gPSBudW1lcmljLnRlc3QoYilcblxuICBpZiAoYW51bSAmJiBibnVtKSB7XG4gICAgYSA9ICthXG4gICAgYiA9ICtiXG4gIH1cblxuICByZXR1cm4gYSA9PT0gYiA/IDBcbiAgICA6IChhbnVtICYmICFibnVtKSA/IC0xXG4gICAgOiAoYm51bSAmJiAhYW51bSkgPyAxXG4gICAgOiBhIDwgYiA/IC0xXG4gICAgOiAxXG59XG5cbmNvbnN0IHJjb21wYXJlSWRlbnRpZmllcnMgPSAoYSwgYikgPT4gY29tcGFyZUlkZW50aWZpZXJzKGIsIGEpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wYXJlSWRlbnRpZmllcnMsXG4gIHJjb21wYXJlSWRlbnRpZmllcnNcbn1cbiIsICJjb25zdCBkZWJ1ZyA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2RlYnVnJylcbmNvbnN0IHsgTUFYX0xFTkdUSCwgTUFYX1NBRkVfSU5URUdFUiB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvY29uc3RhbnRzJylcbmNvbnN0IHsgcmUsIHQgfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3JlJylcblxuY29uc3QgcGFyc2VPcHRpb25zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcGFyc2Utb3B0aW9ucycpXG5jb25zdCB7IGNvbXBhcmVJZGVudGlmaWVycyB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvaWRlbnRpZmllcnMnKVxuY2xhc3MgU2VtVmVyIHtcbiAgY29uc3RydWN0b3IgKHZlcnNpb24sIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpXG5cbiAgICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgICAgaWYgKHZlcnNpb24ubG9vc2UgPT09ICEhb3B0aW9ucy5sb29zZSAmJlxuICAgICAgICAgIHZlcnNpb24uaW5jbHVkZVByZXJlbGVhc2UgPT09ICEhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSkge1xuICAgICAgICByZXR1cm4gdmVyc2lvblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24udmVyc2lvblxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZlcnNpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIFZlcnNpb246ICR7dmVyc2lvbn1gKVxuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uLmxlbmd0aCA+IE1BWF9MRU5HVEgpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIGB2ZXJzaW9uIGlzIGxvbmdlciB0aGFuICR7TUFYX0xFTkdUSH0gY2hhcmFjdGVyc2BcbiAgICAgIClcbiAgICB9XG5cbiAgICBkZWJ1ZygnU2VtVmVyJywgdmVyc2lvbiwgb3B0aW9ucylcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5sb29zZSA9ICEhb3B0aW9ucy5sb29zZVxuICAgIC8vIHRoaXMgaXNuJ3QgYWN0dWFsbHkgcmVsZXZhbnQgZm9yIHZlcnNpb25zLCBidXQga2VlcCBpdCBzbyB0aGF0IHdlXG4gICAgLy8gZG9uJ3QgcnVuIGludG8gdHJvdWJsZSBwYXNzaW5nIHRoaXMub3B0aW9ucyBhcm91bmQuXG4gICAgdGhpcy5pbmNsdWRlUHJlcmVsZWFzZSA9ICEhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZVxuXG4gICAgY29uc3QgbSA9IHZlcnNpb24udHJpbSgpLm1hdGNoKG9wdGlvbnMubG9vc2UgPyByZVt0LkxPT1NFXSA6IHJlW3QuRlVMTF0pXG5cbiAgICBpZiAoIW0pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgVmVyc2lvbjogJHt2ZXJzaW9ufWApXG4gICAgfVxuXG4gICAgdGhpcy5yYXcgPSB2ZXJzaW9uXG5cbiAgICAvLyB0aGVzZSBhcmUgYWN0dWFsbHkgbnVtYmVyc1xuICAgIHRoaXMubWFqb3IgPSArbVsxXVxuICAgIHRoaXMubWlub3IgPSArbVsyXVxuICAgIHRoaXMucGF0Y2ggPSArbVszXVxuXG4gICAgaWYgKHRoaXMubWFqb3IgPiBNQVhfU0FGRV9JTlRFR0VSIHx8IHRoaXMubWFqb3IgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG1ham9yIHZlcnNpb24nKVxuICAgIH1cblxuICAgIGlmICh0aGlzLm1pbm9yID4gTUFYX1NBRkVfSU5URUdFUiB8fCB0aGlzLm1pbm9yIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBtaW5vciB2ZXJzaW9uJylcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wYXRjaCA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgdGhpcy5wYXRjaCA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgcGF0Y2ggdmVyc2lvbicpXG4gICAgfVxuXG4gICAgLy8gbnVtYmVyaWZ5IGFueSBwcmVyZWxlYXNlIG51bWVyaWMgaWRzXG4gICAgaWYgKCFtWzRdKSB7XG4gICAgICB0aGlzLnByZXJlbGVhc2UgPSBbXVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnByZXJlbGVhc2UgPSBtWzRdLnNwbGl0KCcuJykubWFwKChpZCkgPT4ge1xuICAgICAgICBpZiAoL15bMC05XSskLy50ZXN0KGlkKSkge1xuICAgICAgICAgIGNvbnN0IG51bSA9ICtpZFxuICAgICAgICAgIGlmIChudW0gPj0gMCAmJiBudW0gPCBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZFxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLmJ1aWxkID0gbVs1XSA/IG1bNV0uc3BsaXQoJy4nKSA6IFtdXG4gICAgdGhpcy5mb3JtYXQoKVxuICB9XG5cbiAgZm9ybWF0ICgpIHtcbiAgICB0aGlzLnZlcnNpb24gPSBgJHt0aGlzLm1ham9yfS4ke3RoaXMubWlub3J9LiR7dGhpcy5wYXRjaH1gXG4gICAgaWYgKHRoaXMucHJlcmVsZWFzZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMudmVyc2lvbiArPSBgLSR7dGhpcy5wcmVyZWxlYXNlLmpvaW4oJy4nKX1gXG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZlcnNpb25cbiAgfVxuXG4gIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uXG4gIH1cblxuICBjb21wYXJlIChvdGhlcikge1xuICAgIGRlYnVnKCdTZW1WZXIuY29tcGFyZScsIHRoaXMudmVyc2lvbiwgdGhpcy5vcHRpb25zLCBvdGhlcilcbiAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgPT09ICdzdHJpbmcnICYmIG90aGVyID09PSB0aGlzLnZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH1cbiAgICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICAgIH1cblxuICAgIGlmIChvdGhlci52ZXJzaW9uID09PSB0aGlzLnZlcnNpb24pIHtcbiAgICAgIHJldHVybiAwXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29tcGFyZU1haW4ob3RoZXIpIHx8IHRoaXMuY29tcGFyZVByZShvdGhlcilcbiAgfVxuXG4gIGNvbXBhcmVNYWluIChvdGhlcikge1xuICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgICAgb3RoZXIgPSBuZXcgU2VtVmVyKG90aGVyLCB0aGlzLm9wdGlvbnMpXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIGNvbXBhcmVJZGVudGlmaWVycyh0aGlzLm1ham9yLCBvdGhlci5tYWpvcikgfHxcbiAgICAgIGNvbXBhcmVJZGVudGlmaWVycyh0aGlzLm1pbm9yLCBvdGhlci5taW5vcikgfHxcbiAgICAgIGNvbXBhcmVJZGVudGlmaWVycyh0aGlzLnBhdGNoLCBvdGhlci5wYXRjaClcbiAgICApXG4gIH1cblxuICBjb21wYXJlUHJlIChvdGhlcikge1xuICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgICAgb3RoZXIgPSBuZXcgU2VtVmVyKG90aGVyLCB0aGlzLm9wdGlvbnMpXG4gICAgfVxuXG4gICAgLy8gTk9UIGhhdmluZyBhIHByZXJlbGVhc2UgaXMgPiBoYXZpbmcgb25lXG4gICAgaWYgKHRoaXMucHJlcmVsZWFzZS5sZW5ndGggJiYgIW90aGVyLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnByZXJlbGVhc2UubGVuZ3RoICYmIG90aGVyLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gMVxuICAgIH0gZWxzZSBpZiAoIXRoaXMucHJlcmVsZWFzZS5sZW5ndGggJiYgIW90aGVyLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIGxldCBpID0gMFxuICAgIGRvIHtcbiAgICAgIGNvbnN0IGEgPSB0aGlzLnByZXJlbGVhc2VbaV1cbiAgICAgIGNvbnN0IGIgPSBvdGhlci5wcmVyZWxlYXNlW2ldXG4gICAgICBkZWJ1ZygncHJlcmVsZWFzZSBjb21wYXJlJywgaSwgYSwgYilcbiAgICAgIGlmIChhID09PSB1bmRlZmluZWQgJiYgYiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9IGVsc2UgaWYgKGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMVxuICAgICAgfSBlbHNlIGlmIChhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9IGVsc2UgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlSWRlbnRpZmllcnMoYSwgYilcbiAgICAgIH1cbiAgICB9IHdoaWxlICgrK2kpXG4gIH1cblxuICBjb21wYXJlQnVpbGQgKG90aGVyKSB7XG4gICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBTZW1WZXIpKSB7XG4gICAgICBvdGhlciA9IG5ldyBTZW1WZXIob3RoZXIsIHRoaXMub3B0aW9ucylcbiAgICB9XG5cbiAgICBsZXQgaSA9IDBcbiAgICBkbyB7XG4gICAgICBjb25zdCBhID0gdGhpcy5idWlsZFtpXVxuICAgICAgY29uc3QgYiA9IG90aGVyLmJ1aWxkW2ldXG4gICAgICBkZWJ1ZygncHJlcmVsZWFzZSBjb21wYXJlJywgaSwgYSwgYilcbiAgICAgIGlmIChhID09PSB1bmRlZmluZWQgJiYgYiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9IGVsc2UgaWYgKGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMVxuICAgICAgfSBlbHNlIGlmIChhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9IGVsc2UgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlSWRlbnRpZmllcnMoYSwgYilcbiAgICAgIH1cbiAgICB9IHdoaWxlICgrK2kpXG4gIH1cblxuICAvLyBwcmVtaW5vciB3aWxsIGJ1bXAgdGhlIHZlcnNpb24gdXAgdG8gdGhlIG5leHQgbWlub3IgcmVsZWFzZSwgYW5kIGltbWVkaWF0ZWx5XG4gIC8vIGRvd24gdG8gcHJlLXJlbGVhc2UuIHByZW1ham9yIGFuZCBwcmVwYXRjaCB3b3JrIHRoZSBzYW1lIHdheS5cbiAgaW5jIChyZWxlYXNlLCBpZGVudGlmaWVyKSB7XG4gICAgc3dpdGNoIChyZWxlYXNlKSB7XG4gICAgICBjYXNlICdwcmVtYWpvcic6XG4gICAgICAgIHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPSAwXG4gICAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICAgIHRoaXMubWlub3IgPSAwXG4gICAgICAgIHRoaXMubWFqb3IrK1xuICAgICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3ByZW1pbm9yJzpcbiAgICAgICAgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9IDBcbiAgICAgICAgdGhpcy5wYXRjaCA9IDBcbiAgICAgICAgdGhpcy5taW5vcisrXG4gICAgICAgIHRoaXMuaW5jKCdwcmUnLCBpZGVudGlmaWVyKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncHJlcGF0Y2gnOlxuICAgICAgICAvLyBJZiB0aGlzIGlzIGFscmVhZHkgYSBwcmVyZWxlYXNlLCBpdCB3aWxsIGJ1bXAgdG8gdGhlIG5leHQgdmVyc2lvblxuICAgICAgICAvLyBkcm9wIGFueSBwcmVyZWxlYXNlcyB0aGF0IG1pZ2h0IGFscmVhZHkgZXhpc3QsIHNpbmNlIHRoZXkgYXJlIG5vdFxuICAgICAgICAvLyByZWxldmFudCBhdCB0aGlzIHBvaW50LlxuICAgICAgICB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID0gMFxuICAgICAgICB0aGlzLmluYygncGF0Y2gnLCBpZGVudGlmaWVyKVxuICAgICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgICAgYnJlYWtcbiAgICAgIC8vIElmIHRoZSBpbnB1dCBpcyBhIG5vbi1wcmVyZWxlYXNlIHZlcnNpb24sIHRoaXMgYWN0cyB0aGUgc2FtZSBhc1xuICAgICAgLy8gcHJlcGF0Y2guXG4gICAgICBjYXNlICdwcmVyZWxlYXNlJzpcbiAgICAgICAgaWYgKHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLmluYygncGF0Y2gnLCBpZGVudGlmaWVyKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5jKCdwcmUnLCBpZGVudGlmaWVyKVxuICAgICAgICBicmVha1xuXG4gICAgICBjYXNlICdtYWpvcic6XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBwcmUtbWFqb3IgdmVyc2lvbiwgYnVtcCB1cCB0byB0aGUgc2FtZSBtYWpvciB2ZXJzaW9uLlxuICAgICAgICAvLyBPdGhlcndpc2UgaW5jcmVtZW50IG1ham9yLlxuICAgICAgICAvLyAxLjAuMC01IGJ1bXBzIHRvIDEuMC4wXG4gICAgICAgIC8vIDEuMS4wIGJ1bXBzIHRvIDIuMC4wXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLm1pbm9yICE9PSAwIHx8XG4gICAgICAgICAgdGhpcy5wYXRjaCAhPT0gMCB8fFxuICAgICAgICAgIHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5tYWpvcisrXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW5vciA9IDBcbiAgICAgICAgdGhpcy5wYXRjaCA9IDBcbiAgICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW11cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ21pbm9yJzpcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHByZS1taW5vciB2ZXJzaW9uLCBidW1wIHVwIHRvIHRoZSBzYW1lIG1pbm9yIHZlcnNpb24uXG4gICAgICAgIC8vIE90aGVyd2lzZSBpbmNyZW1lbnQgbWlub3IuXG4gICAgICAgIC8vIDEuMi4wLTUgYnVtcHMgdG8gMS4yLjBcbiAgICAgICAgLy8gMS4yLjEgYnVtcHMgdG8gMS4zLjBcbiAgICAgICAgaWYgKHRoaXMucGF0Y2ggIT09IDAgfHwgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMubWlub3IrK1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdwYXRjaCc6XG4gICAgICAgIC8vIElmIHRoaXMgaXMgbm90IGEgcHJlLXJlbGVhc2UgdmVyc2lvbiwgaXQgd2lsbCBpbmNyZW1lbnQgdGhlIHBhdGNoLlxuICAgICAgICAvLyBJZiBpdCBpcyBhIHByZS1yZWxlYXNlIGl0IHdpbGwgYnVtcCB1cCB0byB0aGUgc2FtZSBwYXRjaCB2ZXJzaW9uLlxuICAgICAgICAvLyAxLjIuMC01IHBhdGNoZXMgdG8gMS4yLjBcbiAgICAgICAgLy8gMS4yLjAgcGF0Y2hlcyB0byAxLjIuMVxuICAgICAgICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucGF0Y2grK1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gICAgICAgIGJyZWFrXG4gICAgICAvLyBUaGlzIHByb2JhYmx5IHNob3VsZG4ndCBiZSB1c2VkIHB1YmxpY2x5LlxuICAgICAgLy8gMS4wLjAgJ3ByZScgd291bGQgYmVjb21lIDEuMC4wLTAgd2hpY2ggaXMgdGhlIHdyb25nIGRpcmVjdGlvbi5cbiAgICAgIGNhc2UgJ3ByZSc6XG4gICAgICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5wcmVyZWxlYXNlID0gWzBdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGkgPSB0aGlzLnByZXJlbGVhc2UubGVuZ3RoXG4gICAgICAgICAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJlcmVsZWFzZVtpXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgdGhpcy5wcmVyZWxlYXNlW2ldKytcbiAgICAgICAgICAgICAgaSA9IC0yXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpID09PSAtMSkge1xuICAgICAgICAgICAgLy8gZGlkbid0IGluY3JlbWVudCBhbnl0aGluZ1xuICAgICAgICAgICAgdGhpcy5wcmVyZWxlYXNlLnB1c2goMClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAvLyAxLjIuMC1iZXRhLjEgYnVtcHMgdG8gMS4yLjAtYmV0YS4yLFxuICAgICAgICAgIC8vIDEuMi4wLWJldGEuZm9vYmx6IG9yIDEuMi4wLWJldGEgYnVtcHMgdG8gMS4yLjAtYmV0YS4wXG4gICAgICAgICAgaWYgKHRoaXMucHJlcmVsZWFzZVswXSA9PT0gaWRlbnRpZmllcikge1xuICAgICAgICAgICAgaWYgKGlzTmFOKHRoaXMucHJlcmVsZWFzZVsxXSkpIHtcbiAgICAgICAgICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW2lkZW50aWZpZXIsIDBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtpZGVudGlmaWVyLCAwXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgaW5jcmVtZW50IGFyZ3VtZW50OiAke3JlbGVhc2V9YClcbiAgICB9XG4gICAgdGhpcy5mb3JtYXQoKVxuICAgIHRoaXMucmF3ID0gdGhpcy52ZXJzaW9uXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbVZlclxuIiwgImNvbnN0IHtNQVhfTEVOR1RIfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2NvbnN0YW50cycpXG5jb25zdCB7IHJlLCB0IH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9yZScpXG5jb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5cbmNvbnN0IHBhcnNlT3B0aW9ucyA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3BhcnNlLW9wdGlvbnMnKVxuY29uc3QgcGFyc2UgPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBvcHRpb25zID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpXG5cbiAgaWYgKHZlcnNpb24gaW5zdGFuY2VvZiBTZW1WZXIpIHtcbiAgICByZXR1cm4gdmVyc2lvblxuICB9XG5cbiAgaWYgKHR5cGVvZiB2ZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBpZiAodmVyc2lvbi5sZW5ndGggPiBNQVhfTEVOR1RIKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIGNvbnN0IHIgPSBvcHRpb25zLmxvb3NlID8gcmVbdC5MT09TRV0gOiByZVt0LkZVTExdXG4gIGlmICghci50ZXN0KHZlcnNpb24pKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBTZW1WZXIodmVyc2lvbiwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VcbiIsICJjb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgdmFsaWQgPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBjb25zdCB2ID0gcGFyc2UodmVyc2lvbiwgb3B0aW9ucylcbiAgcmV0dXJuIHYgPyB2LnZlcnNpb24gOiBudWxsXG59XG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkXG4iLCAiY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IGNsZWFuID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgcyA9IHBhcnNlKHZlcnNpb24udHJpbSgpLnJlcGxhY2UoL15bPXZdKy8sICcnKSwgb3B0aW9ucylcbiAgcmV0dXJuIHMgPyBzLnZlcnNpb24gOiBudWxsXG59XG5tb2R1bGUuZXhwb3J0cyA9IGNsZWFuXG4iLCAiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuXG5jb25zdCBpbmMgPSAodmVyc2lvbiwgcmVsZWFzZSwgb3B0aW9ucywgaWRlbnRpZmllcikgPT4ge1xuICBpZiAodHlwZW9mIChvcHRpb25zKSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZGVudGlmaWVyID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSB1bmRlZmluZWRcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBTZW1WZXIodmVyc2lvbiwgb3B0aW9ucykuaW5jKHJlbGVhc2UsIGlkZW50aWZpZXIpLnZlcnNpb25cbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluY1xuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IGNvbXBhcmUgPSAoYSwgYiwgbG9vc2UpID0+XG4gIG5ldyBTZW1WZXIoYSwgbG9vc2UpLmNvbXBhcmUobmV3IFNlbVZlcihiLCBsb29zZSkpXG5cbm1vZHVsZS5leHBvcnRzID0gY29tcGFyZVxuIiwgImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgZXEgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpID09PSAwXG5tb2R1bGUuZXhwb3J0cyA9IGVxXG4iLCAiY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IGVxID0gcmVxdWlyZSgnLi9lcScpXG5cbmNvbnN0IGRpZmYgPSAodmVyc2lvbjEsIHZlcnNpb24yKSA9PiB7XG4gIGlmIChlcSh2ZXJzaW9uMSwgdmVyc2lvbjIpKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB2MSA9IHBhcnNlKHZlcnNpb24xKVxuICAgIGNvbnN0IHYyID0gcGFyc2UodmVyc2lvbjIpXG4gICAgY29uc3QgaGFzUHJlID0gdjEucHJlcmVsZWFzZS5sZW5ndGggfHwgdjIucHJlcmVsZWFzZS5sZW5ndGhcbiAgICBjb25zdCBwcmVmaXggPSBoYXNQcmUgPyAncHJlJyA6ICcnXG4gICAgY29uc3QgZGVmYXVsdFJlc3VsdCA9IGhhc1ByZSA/ICdwcmVyZWxlYXNlJyA6ICcnXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdjEpIHtcbiAgICAgIGlmIChrZXkgPT09ICdtYWpvcicgfHwga2V5ID09PSAnbWlub3InIHx8IGtleSA9PT0gJ3BhdGNoJykge1xuICAgICAgICBpZiAodjFba2V5XSAhPT0gdjJba2V5XSkge1xuICAgICAgICAgIHJldHVybiBwcmVmaXggKyBrZXlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFJlc3VsdCAvLyBtYXkgYmUgdW5kZWZpbmVkXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZGlmZlxuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IG1ham9yID0gKGEsIGxvb3NlKSA9PiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5tYWpvclxubW9kdWxlLmV4cG9ydHMgPSBtYWpvclxuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IG1pbm9yID0gKGEsIGxvb3NlKSA9PiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5taW5vclxubW9kdWxlLmV4cG9ydHMgPSBtaW5vclxuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IHBhdGNoID0gKGEsIGxvb3NlKSA9PiBuZXcgU2VtVmVyKGEsIGxvb3NlKS5wYXRjaFxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaFxuIiwgImNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCBwcmVyZWxlYXNlID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgcGFyc2VkID0gcGFyc2UodmVyc2lvbiwgb3B0aW9ucylcbiAgcmV0dXJuIChwYXJzZWQgJiYgcGFyc2VkLnByZXJlbGVhc2UubGVuZ3RoKSA/IHBhcnNlZC5wcmVyZWxlYXNlIDogbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSBwcmVyZWxlYXNlXG4iLCAiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCByY29tcGFyZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShiLCBhLCBsb29zZSlcbm1vZHVsZS5leHBvcnRzID0gcmNvbXBhcmVcbiIsICJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGNvbXBhcmVMb29zZSA9IChhLCBiKSA9PiBjb21wYXJlKGEsIGIsIHRydWUpXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVMb29zZVxuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IGNvbXBhcmVCdWlsZCA9IChhLCBiLCBsb29zZSkgPT4ge1xuICBjb25zdCB2ZXJzaW9uQSA9IG5ldyBTZW1WZXIoYSwgbG9vc2UpXG4gIGNvbnN0IHZlcnNpb25CID0gbmV3IFNlbVZlcihiLCBsb29zZSlcbiAgcmV0dXJuIHZlcnNpb25BLmNvbXBhcmUodmVyc2lvbkIpIHx8IHZlcnNpb25BLmNvbXBhcmVCdWlsZCh2ZXJzaW9uQilcbn1cbm1vZHVsZS5leHBvcnRzID0gY29tcGFyZUJ1aWxkXG4iLCAiY29uc3QgY29tcGFyZUJ1aWxkID0gcmVxdWlyZSgnLi9jb21wYXJlLWJ1aWxkJylcbmNvbnN0IHNvcnQgPSAobGlzdCwgbG9vc2UpID0+IGxpc3Quc29ydCgoYSwgYikgPT4gY29tcGFyZUJ1aWxkKGEsIGIsIGxvb3NlKSlcbm1vZHVsZS5leHBvcnRzID0gc29ydFxuIiwgImNvbnN0IGNvbXBhcmVCdWlsZCA9IHJlcXVpcmUoJy4vY29tcGFyZS1idWlsZCcpXG5jb25zdCByc29ydCA9IChsaXN0LCBsb29zZSkgPT4gbGlzdC5zb3J0KChhLCBiKSA9PiBjb21wYXJlQnVpbGQoYiwgYSwgbG9vc2UpKVxubW9kdWxlLmV4cG9ydHMgPSByc29ydFxuIiwgImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgZ3QgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpID4gMFxubW9kdWxlLmV4cG9ydHMgPSBndFxuIiwgImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgbHQgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpIDwgMFxubW9kdWxlLmV4cG9ydHMgPSBsdFxuIiwgImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgbmVxID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSAhPT0gMFxubW9kdWxlLmV4cG9ydHMgPSBuZXFcbiIsICJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGd0ZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPj0gMFxubW9kdWxlLmV4cG9ydHMgPSBndGVcbiIsICJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGx0ZSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgPD0gMFxubW9kdWxlLmV4cG9ydHMgPSBsdGVcbiIsICJjb25zdCBlcSA9IHJlcXVpcmUoJy4vZXEnKVxuY29uc3QgbmVxID0gcmVxdWlyZSgnLi9uZXEnKVxuY29uc3QgZ3QgPSByZXF1aXJlKCcuL2d0JylcbmNvbnN0IGd0ZSA9IHJlcXVpcmUoJy4vZ3RlJylcbmNvbnN0IGx0ID0gcmVxdWlyZSgnLi9sdCcpXG5jb25zdCBsdGUgPSByZXF1aXJlKCcuL2x0ZScpXG5cbmNvbnN0IGNtcCA9IChhLCBvcCwgYiwgbG9vc2UpID0+IHtcbiAgc3dpdGNoIChvcCkge1xuICAgIGNhc2UgJz09PSc6XG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnKVxuICAgICAgICBhID0gYS52ZXJzaW9uXG4gICAgICBpZiAodHlwZW9mIGIgPT09ICdvYmplY3QnKVxuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICByZXR1cm4gYSA9PT0gYlxuXG4gICAgY2FzZSAnIT09JzpcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcpXG4gICAgICAgIGEgPSBhLnZlcnNpb25cbiAgICAgIGlmICh0eXBlb2YgYiA9PT0gJ29iamVjdCcpXG4gICAgICAgIGIgPSBiLnZlcnNpb25cbiAgICAgIHJldHVybiBhICE9PSBiXG5cbiAgICBjYXNlICcnOlxuICAgIGNhc2UgJz0nOlxuICAgIGNhc2UgJz09JzpcbiAgICAgIHJldHVybiBlcShhLCBiLCBsb29zZSlcblxuICAgIGNhc2UgJyE9JzpcbiAgICAgIHJldHVybiBuZXEoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc+JzpcbiAgICAgIHJldHVybiBndChhLCBiLCBsb29zZSlcblxuICAgIGNhc2UgJz49JzpcbiAgICAgIHJldHVybiBndGUoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc8JzpcbiAgICAgIHJldHVybiBsdChhLCBiLCBsb29zZSlcblxuICAgIGNhc2UgJzw9JzpcbiAgICAgIHJldHVybiBsdGUoYSwgYiwgbG9vc2UpXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBvcGVyYXRvcjogJHtvcH1gKVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGNtcFxuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCB7cmUsIHR9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcmUnKVxuXG5jb25zdCBjb2VyY2UgPSAodmVyc2lvbiwgb3B0aW9ucykgPT4ge1xuICBpZiAodmVyc2lvbiBpbnN0YW5jZW9mIFNlbVZlcikge1xuICAgIHJldHVybiB2ZXJzaW9uXG4gIH1cblxuICBpZiAodHlwZW9mIHZlcnNpb24gPT09ICdudW1iZXInKSB7XG4gICAgdmVyc2lvbiA9IFN0cmluZyh2ZXJzaW9uKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2ZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGxldCBtYXRjaCA9IG51bGxcbiAgaWYgKCFvcHRpb25zLnJ0bCkge1xuICAgIG1hdGNoID0gdmVyc2lvbi5tYXRjaChyZVt0LkNPRVJDRV0pXG4gIH0gZWxzZSB7XG4gICAgLy8gRmluZCB0aGUgcmlnaHQtbW9zdCBjb2VyY2libGUgc3RyaW5nIHRoYXQgZG9lcyBub3Qgc2hhcmVcbiAgICAvLyBhIHRlcm1pbnVzIHdpdGggYSBtb3JlIGxlZnQtd2FyZCBjb2VyY2libGUgc3RyaW5nLlxuICAgIC8vIEVnLCAnMS4yLjMuNCcgd2FudHMgdG8gY29lcmNlICcyLjMuNCcsIG5vdCAnMy40JyBvciAnNCdcbiAgICAvL1xuICAgIC8vIFdhbGsgdGhyb3VnaCB0aGUgc3RyaW5nIGNoZWNraW5nIHdpdGggYSAvZyByZWdleHBcbiAgICAvLyBNYW51YWxseSBzZXQgdGhlIGluZGV4IHNvIGFzIHRvIHBpY2sgdXAgb3ZlcmxhcHBpbmcgbWF0Y2hlcy5cbiAgICAvLyBTdG9wIHdoZW4gd2UgZ2V0IGEgbWF0Y2ggdGhhdCBlbmRzIGF0IHRoZSBzdHJpbmcgZW5kLCBzaW5jZSBub1xuICAgIC8vIGNvZXJjaWJsZSBzdHJpbmcgY2FuIGJlIG1vcmUgcmlnaHQtd2FyZCB3aXRob3V0IHRoZSBzYW1lIHRlcm1pbnVzLlxuICAgIGxldCBuZXh0XG4gICAgd2hpbGUgKChuZXh0ID0gcmVbdC5DT0VSQ0VSVExdLmV4ZWModmVyc2lvbikpICYmXG4gICAgICAgICghbWF0Y2ggfHwgbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggIT09IHZlcnNpb24ubGVuZ3RoKVxuICAgICkge1xuICAgICAgaWYgKCFtYXRjaCB8fFxuICAgICAgICAgICAgbmV4dC5pbmRleCArIG5leHRbMF0ubGVuZ3RoICE9PSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCkge1xuICAgICAgICBtYXRjaCA9IG5leHRcbiAgICAgIH1cbiAgICAgIHJlW3QuQ09FUkNFUlRMXS5sYXN0SW5kZXggPSBuZXh0LmluZGV4ICsgbmV4dFsxXS5sZW5ndGggKyBuZXh0WzJdLmxlbmd0aFxuICAgIH1cbiAgICAvLyBsZWF2ZSBpdCBpbiBhIGNsZWFuIHN0YXRlXG4gICAgcmVbdC5DT0VSQ0VSVExdLmxhc3RJbmRleCA9IC0xXG4gIH1cblxuICBpZiAobWF0Y2ggPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGxcblxuICByZXR1cm4gcGFyc2UoYCR7bWF0Y2hbMl19LiR7bWF0Y2hbM10gfHwgJzAnfS4ke21hdGNoWzRdIHx8ICcwJ31gLCBvcHRpb25zKVxufVxubW9kdWxlLmV4cG9ydHMgPSBjb2VyY2VcbiIsICIndXNlIHN0cmljdCdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFlhbGxpc3QpIHtcbiAgWWFsbGlzdC5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKiAoKSB7XG4gICAgZm9yIChsZXQgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXI7IHdhbGtlciA9IHdhbGtlci5uZXh0KSB7XG4gICAgICB5aWVsZCB3YWxrZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cbiIsICIndXNlIHN0cmljdCdcbm1vZHVsZS5leHBvcnRzID0gWWFsbGlzdFxuXG5ZYWxsaXN0Lk5vZGUgPSBOb2RlXG5ZYWxsaXN0LmNyZWF0ZSA9IFlhbGxpc3RcblxuZnVuY3Rpb24gWWFsbGlzdCAobGlzdCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKCEoc2VsZiBpbnN0YW5jZW9mIFlhbGxpc3QpKSB7XG4gICAgc2VsZiA9IG5ldyBZYWxsaXN0KClcbiAgfVxuXG4gIHNlbGYudGFpbCA9IG51bGxcbiAgc2VsZi5oZWFkID0gbnVsbFxuICBzZWxmLmxlbmd0aCA9IDBcblxuICBpZiAobGlzdCAmJiB0eXBlb2YgbGlzdC5mb3JFYWNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICBzZWxmLnB1c2goaXRlbSlcbiAgICB9KVxuICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzZWxmLnB1c2goYXJndW1lbnRzW2ldKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWxmXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnJlbW92ZU5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICBpZiAobm9kZS5saXN0ICE9PSB0aGlzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdyZW1vdmluZyBub2RlIHdoaWNoIGRvZXMgbm90IGJlbG9uZyB0byB0aGlzIGxpc3QnKVxuICB9XG5cbiAgdmFyIG5leHQgPSBub2RlLm5leHRcbiAgdmFyIHByZXYgPSBub2RlLnByZXZcblxuICBpZiAobmV4dCkge1xuICAgIG5leHQucHJldiA9IHByZXZcbiAgfVxuXG4gIGlmIChwcmV2KSB7XG4gICAgcHJldi5uZXh0ID0gbmV4dFxuICB9XG5cbiAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZCkge1xuICAgIHRoaXMuaGVhZCA9IG5leHRcbiAgfVxuICBpZiAobm9kZSA9PT0gdGhpcy50YWlsKSB7XG4gICAgdGhpcy50YWlsID0gcHJldlxuICB9XG5cbiAgbm9kZS5saXN0Lmxlbmd0aC0tXG4gIG5vZGUubmV4dCA9IG51bGxcbiAgbm9kZS5wcmV2ID0gbnVsbFxuICBub2RlLmxpc3QgPSBudWxsXG5cbiAgcmV0dXJuIG5leHRcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUudW5zaGlmdE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICBpZiAobm9kZSA9PT0gdGhpcy5oZWFkKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAobm9kZS5saXN0KSB7XG4gICAgbm9kZS5saXN0LnJlbW92ZU5vZGUobm9kZSlcbiAgfVxuXG4gIHZhciBoZWFkID0gdGhpcy5oZWFkXG4gIG5vZGUubGlzdCA9IHRoaXNcbiAgbm9kZS5uZXh0ID0gaGVhZFxuICBpZiAoaGVhZCkge1xuICAgIGhlYWQucHJldiA9IG5vZGVcbiAgfVxuXG4gIHRoaXMuaGVhZCA9IG5vZGVcbiAgaWYgKCF0aGlzLnRhaWwpIHtcbiAgICB0aGlzLnRhaWwgPSBub2RlXG4gIH1cbiAgdGhpcy5sZW5ndGgrK1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5wdXNoTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIGlmIChub2RlID09PSB0aGlzLnRhaWwpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChub2RlLmxpc3QpIHtcbiAgICBub2RlLmxpc3QucmVtb3ZlTm9kZShub2RlKVxuICB9XG5cbiAgdmFyIHRhaWwgPSB0aGlzLnRhaWxcbiAgbm9kZS5saXN0ID0gdGhpc1xuICBub2RlLnByZXYgPSB0YWlsXG4gIGlmICh0YWlsKSB7XG4gICAgdGFpbC5uZXh0ID0gbm9kZVxuICB9XG5cbiAgdGhpcy50YWlsID0gbm9kZVxuICBpZiAoIXRoaXMuaGVhZCkge1xuICAgIHRoaXMuaGVhZCA9IG5vZGVcbiAgfVxuICB0aGlzLmxlbmd0aCsrXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHB1c2godGhpcywgYXJndW1lbnRzW2ldKVxuICB9XG4gIHJldHVybiB0aGlzLmxlbmd0aFxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB1bnNoaWZ0KHRoaXMsIGFyZ3VtZW50c1tpXSlcbiAgfVxuICByZXR1cm4gdGhpcy5sZW5ndGhcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMudGFpbCkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHZhciByZXMgPSB0aGlzLnRhaWwudmFsdWVcbiAgdGhpcy50YWlsID0gdGhpcy50YWlsLnByZXZcbiAgaWYgKHRoaXMudGFpbCkge1xuICAgIHRoaXMudGFpbC5uZXh0ID0gbnVsbFxuICB9IGVsc2Uge1xuICAgIHRoaXMuaGVhZCA9IG51bGxcbiAgfVxuICB0aGlzLmxlbmd0aC0tXG4gIHJldHVybiByZXNcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5oZWFkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG5cbiAgdmFyIHJlcyA9IHRoaXMuaGVhZC52YWx1ZVxuICB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dFxuICBpZiAodGhpcy5oZWFkKSB7XG4gICAgdGhpcy5oZWFkLnByZXYgPSBudWxsXG4gIH0gZWxzZSB7XG4gICAgdGhpcy50YWlsID0gbnVsbFxuICB9XG4gIHRoaXMubGVuZ3RoLS1cbiAgcmV0dXJuIHJlc1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgZm9yICh2YXIgd2Fsa2VyID0gdGhpcy5oZWFkLCBpID0gMDsgd2Fsa2VyICE9PSBudWxsOyBpKyspIHtcbiAgICBmbi5jYWxsKHRoaXNwLCB3YWxrZXIudmFsdWUsIGksIHRoaXMpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5mb3JFYWNoUmV2ZXJzZSA9IGZ1bmN0aW9uIChmbiwgdGhpc3ApIHtcbiAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gIGZvciAodmFyIHdhbGtlciA9IHRoaXMudGFpbCwgaSA9IHRoaXMubGVuZ3RoIC0gMTsgd2Fsa2VyICE9PSBudWxsOyBpLS0pIHtcbiAgICBmbi5jYWxsKHRoaXNwLCB3YWxrZXIudmFsdWUsIGksIHRoaXMpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobikge1xuICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXIgIT09IG51bGwgJiYgaSA8IG47IGkrKykge1xuICAgIC8vIGFib3J0IG91dCBvZiB0aGUgbGlzdCBlYXJseSBpZiB3ZSBoaXQgYSBjeWNsZVxuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cbiAgaWYgKGkgPT09IG4gJiYgd2Fsa2VyICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdhbGtlci52YWx1ZVxuICB9XG59XG5cbllhbGxpc3QucHJvdG90eXBlLmdldFJldmVyc2UgPSBmdW5jdGlvbiAobikge1xuICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy50YWlsOyB3YWxrZXIgIT09IG51bGwgJiYgaSA8IG47IGkrKykge1xuICAgIC8vIGFib3J0IG91dCBvZiB0aGUgbGlzdCBlYXJseSBpZiB3ZSBoaXQgYSBjeWNsZVxuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cbiAgaWYgKGkgPT09IG4gJiYgd2Fsa2VyICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHdhbGtlci52YWx1ZVxuICB9XG59XG5cbllhbGxpc3QucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChmbiwgdGhpc3ApIHtcbiAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gIHZhciByZXMgPSBuZXcgWWFsbGlzdCgpXG4gIGZvciAodmFyIHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyICE9PSBudWxsOykge1xuICAgIHJlcy5wdXNoKGZuLmNhbGwodGhpc3AsIHdhbGtlci52YWx1ZSwgdGhpcykpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbllhbGxpc3QucHJvdG90eXBlLm1hcFJldmVyc2UgPSBmdW5jdGlvbiAoZm4sIHRoaXNwKSB7XG4gIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICB2YXIgcmVzID0gbmV3IFlhbGxpc3QoKVxuICBmb3IgKHZhciB3YWxrZXIgPSB0aGlzLnRhaWw7IHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICByZXMucHVzaChmbi5jYWxsKHRoaXNwLCB3YWxrZXIudmFsdWUsIHRoaXMpKVxuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoZm4sIGluaXRpYWwpIHtcbiAgdmFyIGFjY1xuICB2YXIgd2Fsa2VyID0gdGhpcy5oZWFkXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgIGFjYyA9IGluaXRpYWxcbiAgfSBlbHNlIGlmICh0aGlzLmhlYWQpIHtcbiAgICB3YWxrZXIgPSB0aGlzLmhlYWQubmV4dFxuICAgIGFjYyA9IHRoaXMuaGVhZC52YWx1ZVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBsaXN0IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpXG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgd2Fsa2VyICE9PSBudWxsOyBpKyspIHtcbiAgICBhY2MgPSBmbihhY2MsIHdhbGtlci52YWx1ZSwgaSlcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG5cbiAgcmV0dXJuIGFjY1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5yZWR1Y2VSZXZlcnNlID0gZnVuY3Rpb24gKGZuLCBpbml0aWFsKSB7XG4gIHZhciBhY2NcbiAgdmFyIHdhbGtlciA9IHRoaXMudGFpbFxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICBhY2MgPSBpbml0aWFsXG4gIH0gZWxzZSBpZiAodGhpcy50YWlsKSB7XG4gICAgd2Fsa2VyID0gdGhpcy50YWlsLnByZXZcbiAgICBhY2MgPSB0aGlzLnRhaWwudmFsdWVcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgbGlzdCB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gMTsgd2Fsa2VyICE9PSBudWxsOyBpLS0pIHtcbiAgICBhY2MgPSBmbihhY2MsIHdhbGtlci52YWx1ZSwgaSlcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG5cbiAgcmV0dXJuIGFjY1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXIgIT09IG51bGw7IGkrKykge1xuICAgIGFycltpXSA9IHdhbGtlci52YWx1ZVxuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cbiAgcmV0dXJuIGFyclxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS50b0FycmF5UmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyciA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMudGFpbDsgd2Fsa2VyICE9PSBudWxsOyBpKyspIHtcbiAgICBhcnJbaV0gPSB3YWxrZXIudmFsdWVcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG4gIHJldHVybiBhcnJcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgdG8gPSB0byB8fCB0aGlzLmxlbmd0aFxuICBpZiAodG8gPCAwKSB7XG4gICAgdG8gKz0gdGhpcy5sZW5ndGhcbiAgfVxuICBmcm9tID0gZnJvbSB8fCAwXG4gIGlmIChmcm9tIDwgMCkge1xuICAgIGZyb20gKz0gdGhpcy5sZW5ndGhcbiAgfVxuICB2YXIgcmV0ID0gbmV3IFlhbGxpc3QoKVxuICBpZiAodG8gPCBmcm9tIHx8IHRvIDwgMCkge1xuICAgIHJldHVybiByZXRcbiAgfVxuICBpZiAoZnJvbSA8IDApIHtcbiAgICBmcm9tID0gMFxuICB9XG4gIGlmICh0byA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdG8gPSB0aGlzLmxlbmd0aFxuICB9XG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgZnJvbTsgaSsrKSB7XG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuICBmb3IgKDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPCB0bzsgaSsrLCB3YWxrZXIgPSB3YWxrZXIubmV4dCkge1xuICAgIHJldC5wdXNoKHdhbGtlci52YWx1ZSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbllhbGxpc3QucHJvdG90eXBlLnNsaWNlUmV2ZXJzZSA9IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICB0byA9IHRvIHx8IHRoaXMubGVuZ3RoXG4gIGlmICh0byA8IDApIHtcbiAgICB0byArPSB0aGlzLmxlbmd0aFxuICB9XG4gIGZyb20gPSBmcm9tIHx8IDBcbiAgaWYgKGZyb20gPCAwKSB7XG4gICAgZnJvbSArPSB0aGlzLmxlbmd0aFxuICB9XG4gIHZhciByZXQgPSBuZXcgWWFsbGlzdCgpXG4gIGlmICh0byA8IGZyb20gfHwgdG8gPCAwKSB7XG4gICAgcmV0dXJuIHJldFxuICB9XG4gIGlmIChmcm9tIDwgMCkge1xuICAgIGZyb20gPSAwXG4gIH1cbiAgaWYgKHRvID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0byA9IHRoaXMubGVuZ3RoXG4gIH1cbiAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoLCB3YWxrZXIgPSB0aGlzLnRhaWw7IHdhbGtlciAhPT0gbnVsbCAmJiBpID4gdG87IGktLSkge1xuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cbiAgZm9yICg7IHdhbGtlciAhPT0gbnVsbCAmJiBpID4gZnJvbTsgaS0tLCB3YWxrZXIgPSB3YWxrZXIucHJldikge1xuICAgIHJldC5wdXNoKHdhbGtlci52YWx1ZSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbllhbGxpc3QucHJvdG90eXBlLnNwbGljZSA9IGZ1bmN0aW9uIChzdGFydCwgZGVsZXRlQ291bnQsIC4uLm5vZGVzKSB7XG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgc3RhcnQgPSB0aGlzLmxlbmd0aCAtIDFcbiAgfVxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSB0aGlzLmxlbmd0aCArIHN0YXJ0O1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPCBzdGFydDsgaSsrKSB7XG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuXG4gIHZhciByZXQgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgd2Fsa2VyICYmIGkgPCBkZWxldGVDb3VudDsgaSsrKSB7XG4gICAgcmV0LnB1c2god2Fsa2VyLnZhbHVlKVxuICAgIHdhbGtlciA9IHRoaXMucmVtb3ZlTm9kZSh3YWxrZXIpXG4gIH1cbiAgaWYgKHdhbGtlciA9PT0gbnVsbCkge1xuICAgIHdhbGtlciA9IHRoaXMudGFpbFxuICB9XG5cbiAgaWYgKHdhbGtlciAhPT0gdGhpcy5oZWFkICYmIHdhbGtlciAhPT0gdGhpcy50YWlsKSB7XG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB3YWxrZXIgPSBpbnNlcnQodGhpcywgd2Fsa2VyLCBub2Rlc1tpXSlcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCA9IHRoaXMuaGVhZFxuICB2YXIgdGFpbCA9IHRoaXMudGFpbFxuICBmb3IgKHZhciB3YWxrZXIgPSBoZWFkOyB3YWxrZXIgIT09IG51bGw7IHdhbGtlciA9IHdhbGtlci5wcmV2KSB7XG4gICAgdmFyIHAgPSB3YWxrZXIucHJldlxuICAgIHdhbGtlci5wcmV2ID0gd2Fsa2VyLm5leHRcbiAgICB3YWxrZXIubmV4dCA9IHBcbiAgfVxuICB0aGlzLmhlYWQgPSB0YWlsXG4gIHRoaXMudGFpbCA9IGhlYWRcbiAgcmV0dXJuIHRoaXNcbn1cblxuZnVuY3Rpb24gaW5zZXJ0IChzZWxmLCBub2RlLCB2YWx1ZSkge1xuICB2YXIgaW5zZXJ0ZWQgPSBub2RlID09PSBzZWxmLmhlYWQgP1xuICAgIG5ldyBOb2RlKHZhbHVlLCBudWxsLCBub2RlLCBzZWxmKSA6XG4gICAgbmV3IE5vZGUodmFsdWUsIG5vZGUsIG5vZGUubmV4dCwgc2VsZilcblxuICBpZiAoaW5zZXJ0ZWQubmV4dCA9PT0gbnVsbCkge1xuICAgIHNlbGYudGFpbCA9IGluc2VydGVkXG4gIH1cbiAgaWYgKGluc2VydGVkLnByZXYgPT09IG51bGwpIHtcbiAgICBzZWxmLmhlYWQgPSBpbnNlcnRlZFxuICB9XG5cbiAgc2VsZi5sZW5ndGgrK1xuXG4gIHJldHVybiBpbnNlcnRlZFxufVxuXG5mdW5jdGlvbiBwdXNoIChzZWxmLCBpdGVtKSB7XG4gIHNlbGYudGFpbCA9IG5ldyBOb2RlKGl0ZW0sIHNlbGYudGFpbCwgbnVsbCwgc2VsZilcbiAgaWYgKCFzZWxmLmhlYWQpIHtcbiAgICBzZWxmLmhlYWQgPSBzZWxmLnRhaWxcbiAgfVxuICBzZWxmLmxlbmd0aCsrXG59XG5cbmZ1bmN0aW9uIHVuc2hpZnQgKHNlbGYsIGl0ZW0pIHtcbiAgc2VsZi5oZWFkID0gbmV3IE5vZGUoaXRlbSwgbnVsbCwgc2VsZi5oZWFkLCBzZWxmKVxuICBpZiAoIXNlbGYudGFpbCkge1xuICAgIHNlbGYudGFpbCA9IHNlbGYuaGVhZFxuICB9XG4gIHNlbGYubGVuZ3RoKytcbn1cblxuZnVuY3Rpb24gTm9kZSAodmFsdWUsIHByZXYsIG5leHQsIGxpc3QpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE5vZGUpKSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlKHZhbHVlLCBwcmV2LCBuZXh0LCBsaXN0KVxuICB9XG5cbiAgdGhpcy5saXN0ID0gbGlzdFxuICB0aGlzLnZhbHVlID0gdmFsdWVcblxuICBpZiAocHJldikge1xuICAgIHByZXYubmV4dCA9IHRoaXNcbiAgICB0aGlzLnByZXYgPSBwcmV2XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wcmV2ID0gbnVsbFxuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0LnByZXYgPSB0aGlzXG4gICAgdGhpcy5uZXh0ID0gbmV4dFxuICB9IGVsc2Uge1xuICAgIHRoaXMubmV4dCA9IG51bGxcbiAgfVxufVxuXG50cnkge1xuICAvLyBhZGQgaWYgc3VwcG9ydCBmb3IgU3ltYm9sLml0ZXJhdG9yIGlzIHByZXNlbnRcbiAgcmVxdWlyZSgnLi9pdGVyYXRvci5qcycpKFlhbGxpc3QpXG59IGNhdGNoIChlcikge31cbiIsICIndXNlIHN0cmljdCdcblxuLy8gQSBsaW5rZWQgbGlzdCB0byBrZWVwIHRyYWNrIG9mIHJlY2VudGx5LXVzZWQtbmVzc1xuY29uc3QgWWFsbGlzdCA9IHJlcXVpcmUoJ3lhbGxpc3QnKVxuXG5jb25zdCBNQVggPSBTeW1ib2woJ21heCcpXG5jb25zdCBMRU5HVEggPSBTeW1ib2woJ2xlbmd0aCcpXG5jb25zdCBMRU5HVEhfQ0FMQ1VMQVRPUiA9IFN5bWJvbCgnbGVuZ3RoQ2FsY3VsYXRvcicpXG5jb25zdCBBTExPV19TVEFMRSA9IFN5bWJvbCgnYWxsb3dTdGFsZScpXG5jb25zdCBNQVhfQUdFID0gU3ltYm9sKCdtYXhBZ2UnKVxuY29uc3QgRElTUE9TRSA9IFN5bWJvbCgnZGlzcG9zZScpXG5jb25zdCBOT19ESVNQT1NFX09OX1NFVCA9IFN5bWJvbCgnbm9EaXNwb3NlT25TZXQnKVxuY29uc3QgTFJVX0xJU1QgPSBTeW1ib2woJ2xydUxpc3QnKVxuY29uc3QgQ0FDSEUgPSBTeW1ib2woJ2NhY2hlJylcbmNvbnN0IFVQREFURV9BR0VfT05fR0VUID0gU3ltYm9sKCd1cGRhdGVBZ2VPbkdldCcpXG5cbmNvbnN0IG5haXZlTGVuZ3RoID0gKCkgPT4gMVxuXG4vLyBscnVMaXN0IGlzIGEgeWFsbGlzdCB3aGVyZSB0aGUgaGVhZCBpcyB0aGUgeW91bmdlc3Rcbi8vIGl0ZW0sIGFuZCB0aGUgdGFpbCBpcyB0aGUgb2xkZXN0LiAgdGhlIGxpc3QgY29udGFpbnMgdGhlIEhpdFxuLy8gb2JqZWN0cyBhcyB0aGUgZW50cmllcy5cbi8vIEVhY2ggSGl0IG9iamVjdCBoYXMgYSByZWZlcmVuY2UgdG8gaXRzIFlhbGxpc3QuTm9kZS4gIFRoaXNcbi8vIG5ldmVyIGNoYW5nZXMuXG4vL1xuLy8gY2FjaGUgaXMgYSBNYXAgKG9yIFBzZXVkb01hcCkgdGhhdCBtYXRjaGVzIHRoZSBrZXlzIHRvXG4vLyB0aGUgWWFsbGlzdC5Ob2RlIG9iamVjdC5cbmNsYXNzIExSVUNhY2hlIHtcbiAgY29uc3RydWN0b3IgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKVxuICAgICAgb3B0aW9ucyA9IHsgbWF4OiBvcHRpb25zIH1cblxuICAgIGlmICghb3B0aW9ucylcbiAgICAgIG9wdGlvbnMgPSB7fVxuXG4gICAgaWYgKG9wdGlvbnMubWF4ICYmICh0eXBlb2Ygb3B0aW9ucy5tYXggIT09ICdudW1iZXInIHx8IG9wdGlvbnMubWF4IDwgMCkpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXggbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXInKVxuICAgIC8vIEtpbmQgb2Ygd2VpcmQgdG8gaGF2ZSBhIGRlZmF1bHQgbWF4IG9mIEluZmluaXR5LCBidXQgb2ggd2VsbC5cbiAgICBjb25zdCBtYXggPSB0aGlzW01BWF0gPSBvcHRpb25zLm1heCB8fCBJbmZpbml0eVxuXG4gICAgY29uc3QgbGMgPSBvcHRpb25zLmxlbmd0aCB8fCBuYWl2ZUxlbmd0aFxuICAgIHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdID0gKHR5cGVvZiBsYyAhPT0gJ2Z1bmN0aW9uJykgPyBuYWl2ZUxlbmd0aCA6IGxjXG4gICAgdGhpc1tBTExPV19TVEFMRV0gPSBvcHRpb25zLnN0YWxlIHx8IGZhbHNlXG4gICAgaWYgKG9wdGlvbnMubWF4QWdlICYmIHR5cGVvZiBvcHRpb25zLm1heEFnZSAhPT0gJ251bWJlcicpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXhBZ2UgbXVzdCBiZSBhIG51bWJlcicpXG4gICAgdGhpc1tNQVhfQUdFXSA9IG9wdGlvbnMubWF4QWdlIHx8IDBcbiAgICB0aGlzW0RJU1BPU0VdID0gb3B0aW9ucy5kaXNwb3NlXG4gICAgdGhpc1tOT19ESVNQT1NFX09OX1NFVF0gPSBvcHRpb25zLm5vRGlzcG9zZU9uU2V0IHx8IGZhbHNlXG4gICAgdGhpc1tVUERBVEVfQUdFX09OX0dFVF0gPSBvcHRpb25zLnVwZGF0ZUFnZU9uR2V0IHx8IGZhbHNlXG4gICAgdGhpcy5yZXNldCgpXG4gIH1cblxuICAvLyByZXNpemUgdGhlIGNhY2hlIHdoZW4gdGhlIG1heCBjaGFuZ2VzLlxuICBzZXQgbWF4IChtTCkge1xuICAgIGlmICh0eXBlb2YgbUwgIT09ICdudW1iZXInIHx8IG1MIDwgMClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlcicpXG5cbiAgICB0aGlzW01BWF0gPSBtTCB8fCBJbmZpbml0eVxuICAgIHRyaW0odGhpcylcbiAgfVxuICBnZXQgbWF4ICgpIHtcbiAgICByZXR1cm4gdGhpc1tNQVhdXG4gIH1cblxuICBzZXQgYWxsb3dTdGFsZSAoYWxsb3dTdGFsZSkge1xuICAgIHRoaXNbQUxMT1dfU1RBTEVdID0gISFhbGxvd1N0YWxlXG4gIH1cbiAgZ2V0IGFsbG93U3RhbGUgKCkge1xuICAgIHJldHVybiB0aGlzW0FMTE9XX1NUQUxFXVxuICB9XG5cbiAgc2V0IG1heEFnZSAobUEpIHtcbiAgICBpZiAodHlwZW9mIG1BICE9PSAnbnVtYmVyJylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heEFnZSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlcicpXG5cbiAgICB0aGlzW01BWF9BR0VdID0gbUFcbiAgICB0cmltKHRoaXMpXG4gIH1cbiAgZ2V0IG1heEFnZSAoKSB7XG4gICAgcmV0dXJuIHRoaXNbTUFYX0FHRV1cbiAgfVxuXG4gIC8vIHJlc2l6ZSB0aGUgY2FjaGUgd2hlbiB0aGUgbGVuZ3RoQ2FsY3VsYXRvciBjaGFuZ2VzLlxuICBzZXQgbGVuZ3RoQ2FsY3VsYXRvciAobEMpIHtcbiAgICBpZiAodHlwZW9mIGxDICE9PSAnZnVuY3Rpb24nKVxuICAgICAgbEMgPSBuYWl2ZUxlbmd0aFxuXG4gICAgaWYgKGxDICE9PSB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSkge1xuICAgICAgdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0gPSBsQ1xuICAgICAgdGhpc1tMRU5HVEhdID0gMFxuICAgICAgdGhpc1tMUlVfTElTVF0uZm9yRWFjaChoaXQgPT4ge1xuICAgICAgICBoaXQubGVuZ3RoID0gdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0oaGl0LnZhbHVlLCBoaXQua2V5KVxuICAgICAgICB0aGlzW0xFTkdUSF0gKz0gaGl0Lmxlbmd0aFxuICAgICAgfSlcbiAgICB9XG4gICAgdHJpbSh0aGlzKVxuICB9XG4gIGdldCBsZW5ndGhDYWxjdWxhdG9yICgpIHsgcmV0dXJuIHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdIH1cblxuICBnZXQgbGVuZ3RoICgpIHsgcmV0dXJuIHRoaXNbTEVOR1RIXSB9XG4gIGdldCBpdGVtQ291bnQgKCkgeyByZXR1cm4gdGhpc1tMUlVfTElTVF0ubGVuZ3RoIH1cblxuICByZm9yRWFjaCAoZm4sIHRoaXNwKSB7XG4gICAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gICAgZm9yIChsZXQgd2Fsa2VyID0gdGhpc1tMUlVfTElTVF0udGFpbDsgd2Fsa2VyICE9PSBudWxsOykge1xuICAgICAgY29uc3QgcHJldiA9IHdhbGtlci5wcmV2XG4gICAgICBmb3JFYWNoU3RlcCh0aGlzLCBmbiwgd2Fsa2VyLCB0aGlzcClcbiAgICAgIHdhbGtlciA9IHByZXZcbiAgICB9XG4gIH1cblxuICBmb3JFYWNoIChmbiwgdGhpc3ApIHtcbiAgICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgICBmb3IgKGxldCB3YWxrZXIgPSB0aGlzW0xSVV9MSVNUXS5oZWFkOyB3YWxrZXIgIT09IG51bGw7KSB7XG4gICAgICBjb25zdCBuZXh0ID0gd2Fsa2VyLm5leHRcbiAgICAgIGZvckVhY2hTdGVwKHRoaXMsIGZuLCB3YWxrZXIsIHRoaXNwKVxuICAgICAgd2Fsa2VyID0gbmV4dFxuICAgIH1cbiAgfVxuXG4gIGtleXMgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS50b0FycmF5KCkubWFwKGsgPT4gay5rZXkpXG4gIH1cblxuICB2YWx1ZXMgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS50b0FycmF5KCkubWFwKGsgPT4gay52YWx1ZSlcbiAgfVxuXG4gIHJlc2V0ICgpIHtcbiAgICBpZiAodGhpc1tESVNQT1NFXSAmJlxuICAgICAgICB0aGlzW0xSVV9MSVNUXSAmJlxuICAgICAgICB0aGlzW0xSVV9MSVNUXS5sZW5ndGgpIHtcbiAgICAgIHRoaXNbTFJVX0xJU1RdLmZvckVhY2goaGl0ID0+IHRoaXNbRElTUE9TRV0oaGl0LmtleSwgaGl0LnZhbHVlKSlcbiAgICB9XG5cbiAgICB0aGlzW0NBQ0hFXSA9IG5ldyBNYXAoKSAvLyBoYXNoIG9mIGl0ZW1zIGJ5IGtleVxuICAgIHRoaXNbTFJVX0xJU1RdID0gbmV3IFlhbGxpc3QoKSAvLyBsaXN0IG9mIGl0ZW1zIGluIG9yZGVyIG9mIHVzZSByZWNlbmN5XG4gICAgdGhpc1tMRU5HVEhdID0gMCAvLyBsZW5ndGggb2YgaXRlbXMgaW4gdGhlIGxpc3RcbiAgfVxuXG4gIGR1bXAgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXS5tYXAoaGl0ID0+XG4gICAgICBpc1N0YWxlKHRoaXMsIGhpdCkgPyBmYWxzZSA6IHtcbiAgICAgICAgazogaGl0LmtleSxcbiAgICAgICAgdjogaGl0LnZhbHVlLFxuICAgICAgICBlOiBoaXQubm93ICsgKGhpdC5tYXhBZ2UgfHwgMClcbiAgICAgIH0pLnRvQXJyYXkoKS5maWx0ZXIoaCA9PiBoKVxuICB9XG5cbiAgZHVtcExydSAoKSB7XG4gICAgcmV0dXJuIHRoaXNbTFJVX0xJU1RdXG4gIH1cblxuICBzZXQgKGtleSwgdmFsdWUsIG1heEFnZSkge1xuICAgIG1heEFnZSA9IG1heEFnZSB8fCB0aGlzW01BWF9BR0VdXG5cbiAgICBpZiAobWF4QWdlICYmIHR5cGVvZiBtYXhBZ2UgIT09ICdudW1iZXInKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4QWdlIG11c3QgYmUgYSBudW1iZXInKVxuXG4gICAgY29uc3Qgbm93ID0gbWF4QWdlID8gRGF0ZS5ub3coKSA6IDBcbiAgICBjb25zdCBsZW4gPSB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSh2YWx1ZSwga2V5KVxuXG4gICAgaWYgKHRoaXNbQ0FDSEVdLmhhcyhrZXkpKSB7XG4gICAgICBpZiAobGVuID4gdGhpc1tNQVhdKSB7XG4gICAgICAgIGRlbCh0aGlzLCB0aGlzW0NBQ0hFXS5nZXQoa2V5KSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzW0NBQ0hFXS5nZXQoa2V5KVxuICAgICAgY29uc3QgaXRlbSA9IG5vZGUudmFsdWVcblxuICAgICAgLy8gZGlzcG9zZSBvZiB0aGUgb2xkIG9uZSBiZWZvcmUgb3ZlcndyaXRpbmdcbiAgICAgIC8vIHNwbGl0IG91dCBpbnRvIDIgaWZzIGZvciBiZXR0ZXIgY292ZXJhZ2UgdHJhY2tpbmdcbiAgICAgIGlmICh0aGlzW0RJU1BPU0VdKSB7XG4gICAgICAgIGlmICghdGhpc1tOT19ESVNQT1NFX09OX1NFVF0pXG4gICAgICAgICAgdGhpc1tESVNQT1NFXShrZXksIGl0ZW0udmFsdWUpXG4gICAgICB9XG5cbiAgICAgIGl0ZW0ubm93ID0gbm93XG4gICAgICBpdGVtLm1heEFnZSA9IG1heEFnZVxuICAgICAgaXRlbS52YWx1ZSA9IHZhbHVlXG4gICAgICB0aGlzW0xFTkdUSF0gKz0gbGVuIC0gaXRlbS5sZW5ndGhcbiAgICAgIGl0ZW0ubGVuZ3RoID0gbGVuXG4gICAgICB0aGlzLmdldChrZXkpXG4gICAgICB0cmltKHRoaXMpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGNvbnN0IGhpdCA9IG5ldyBFbnRyeShrZXksIHZhbHVlLCBsZW4sIG5vdywgbWF4QWdlKVxuXG4gICAgLy8gb3ZlcnNpemVkIG9iamVjdHMgZmFsbCBvdXQgb2YgY2FjaGUgYXV0b21hdGljYWxseS5cbiAgICBpZiAoaGl0Lmxlbmd0aCA+IHRoaXNbTUFYXSkge1xuICAgICAgaWYgKHRoaXNbRElTUE9TRV0pXG4gICAgICAgIHRoaXNbRElTUE9TRV0oa2V5LCB2YWx1ZSlcblxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgdGhpc1tMRU5HVEhdICs9IGhpdC5sZW5ndGhcbiAgICB0aGlzW0xSVV9MSVNUXS51bnNoaWZ0KGhpdClcbiAgICB0aGlzW0NBQ0hFXS5zZXQoa2V5LCB0aGlzW0xSVV9MSVNUXS5oZWFkKVxuICAgIHRyaW0odGhpcylcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgaGFzIChrZXkpIHtcbiAgICBpZiAoIXRoaXNbQ0FDSEVdLmhhcyhrZXkpKSByZXR1cm4gZmFsc2VcbiAgICBjb25zdCBoaXQgPSB0aGlzW0NBQ0hFXS5nZXQoa2V5KS52YWx1ZVxuICAgIHJldHVybiAhaXNTdGFsZSh0aGlzLCBoaXQpXG4gIH1cblxuICBnZXQgKGtleSkge1xuICAgIHJldHVybiBnZXQodGhpcywga2V5LCB0cnVlKVxuICB9XG5cbiAgcGVlayAoa2V5KSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBrZXksIGZhbHNlKVxuICB9XG5cbiAgcG9wICgpIHtcbiAgICBjb25zdCBub2RlID0gdGhpc1tMUlVfTElTVF0udGFpbFxuICAgIGlmICghbm9kZSlcbiAgICAgIHJldHVybiBudWxsXG5cbiAgICBkZWwodGhpcywgbm9kZSlcbiAgICByZXR1cm4gbm9kZS52YWx1ZVxuICB9XG5cbiAgZGVsIChrZXkpIHtcbiAgICBkZWwodGhpcywgdGhpc1tDQUNIRV0uZ2V0KGtleSkpXG4gIH1cblxuICBsb2FkIChhcnIpIHtcbiAgICAvLyByZXNldCB0aGUgY2FjaGVcbiAgICB0aGlzLnJlc2V0KClcblxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KClcbiAgICAvLyBBIHByZXZpb3VzIHNlcmlhbGl6ZWQgY2FjaGUgaGFzIHRoZSBtb3N0IHJlY2VudCBpdGVtcyBmaXJzdFxuICAgIGZvciAobGV0IGwgPSBhcnIubGVuZ3RoIC0gMTsgbCA+PSAwOyBsLS0pIHtcbiAgICAgIGNvbnN0IGhpdCA9IGFycltsXVxuICAgICAgY29uc3QgZXhwaXJlc0F0ID0gaGl0LmUgfHwgMFxuICAgICAgaWYgKGV4cGlyZXNBdCA9PT0gMClcbiAgICAgICAgLy8gdGhlIGl0ZW0gd2FzIGNyZWF0ZWQgd2l0aG91dCBleHBpcmF0aW9uIGluIGEgbm9uIGFnZWQgY2FjaGVcbiAgICAgICAgdGhpcy5zZXQoaGl0LmssIGhpdC52KVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1heEFnZSA9IGV4cGlyZXNBdCAtIG5vd1xuICAgICAgICAvLyBkb250IGFkZCBhbHJlYWR5IGV4cGlyZWQgaXRlbXNcbiAgICAgICAgaWYgKG1heEFnZSA+IDApIHtcbiAgICAgICAgICB0aGlzLnNldChoaXQuaywgaGl0LnYsIG1heEFnZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHBydW5lICgpIHtcbiAgICB0aGlzW0NBQ0hFXS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiBnZXQodGhpcywga2V5LCBmYWxzZSkpXG4gIH1cbn1cblxuY29uc3QgZ2V0ID0gKHNlbGYsIGtleSwgZG9Vc2UpID0+IHtcbiAgY29uc3Qgbm9kZSA9IHNlbGZbQ0FDSEVdLmdldChrZXkpXG4gIGlmIChub2RlKSB7XG4gICAgY29uc3QgaGl0ID0gbm9kZS52YWx1ZVxuICAgIGlmIChpc1N0YWxlKHNlbGYsIGhpdCkpIHtcbiAgICAgIGRlbChzZWxmLCBub2RlKVxuICAgICAgaWYgKCFzZWxmW0FMTE9XX1NUQUxFXSlcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZG9Vc2UpIHtcbiAgICAgICAgaWYgKHNlbGZbVVBEQVRFX0FHRV9PTl9HRVRdKVxuICAgICAgICAgIG5vZGUudmFsdWUubm93ID0gRGF0ZS5ub3coKVxuICAgICAgICBzZWxmW0xSVV9MSVNUXS51bnNoaWZ0Tm9kZShub2RlKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaGl0LnZhbHVlXG4gIH1cbn1cblxuY29uc3QgaXNTdGFsZSA9IChzZWxmLCBoaXQpID0+IHtcbiAgaWYgKCFoaXQgfHwgKCFoaXQubWF4QWdlICYmICFzZWxmW01BWF9BR0VdKSlcbiAgICByZXR1cm4gZmFsc2VcblxuICBjb25zdCBkaWZmID0gRGF0ZS5ub3coKSAtIGhpdC5ub3dcbiAgcmV0dXJuIGhpdC5tYXhBZ2UgPyBkaWZmID4gaGl0Lm1heEFnZVxuICAgIDogc2VsZltNQVhfQUdFXSAmJiAoZGlmZiA+IHNlbGZbTUFYX0FHRV0pXG59XG5cbmNvbnN0IHRyaW0gPSBzZWxmID0+IHtcbiAgaWYgKHNlbGZbTEVOR1RIXSA+IHNlbGZbTUFYXSkge1xuICAgIGZvciAobGV0IHdhbGtlciA9IHNlbGZbTFJVX0xJU1RdLnRhaWw7XG4gICAgICBzZWxmW0xFTkdUSF0gPiBzZWxmW01BWF0gJiYgd2Fsa2VyICE9PSBudWxsOykge1xuICAgICAgLy8gV2Uga25vdyB0aGF0IHdlJ3JlIGFib3V0IHRvIGRlbGV0ZSB0aGlzIG9uZSwgYW5kIGFsc29cbiAgICAgIC8vIHdoYXQgdGhlIG5leHQgbGVhc3QgcmVjZW50bHkgdXNlZCBrZXkgd2lsbCBiZSwgc28ganVzdFxuICAgICAgLy8gZ28gYWhlYWQgYW5kIHNldCBpdCBub3cuXG4gICAgICBjb25zdCBwcmV2ID0gd2Fsa2VyLnByZXZcbiAgICAgIGRlbChzZWxmLCB3YWxrZXIpXG4gICAgICB3YWxrZXIgPSBwcmV2XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGRlbCA9IChzZWxmLCBub2RlKSA9PiB7XG4gIGlmIChub2RlKSB7XG4gICAgY29uc3QgaGl0ID0gbm9kZS52YWx1ZVxuICAgIGlmIChzZWxmW0RJU1BPU0VdKVxuICAgICAgc2VsZltESVNQT1NFXShoaXQua2V5LCBoaXQudmFsdWUpXG5cbiAgICBzZWxmW0xFTkdUSF0gLT0gaGl0Lmxlbmd0aFxuICAgIHNlbGZbQ0FDSEVdLmRlbGV0ZShoaXQua2V5KVxuICAgIHNlbGZbTFJVX0xJU1RdLnJlbW92ZU5vZGUobm9kZSlcbiAgfVxufVxuXG5jbGFzcyBFbnRyeSB7XG4gIGNvbnN0cnVjdG9yIChrZXksIHZhbHVlLCBsZW5ndGgsIG5vdywgbWF4QWdlKSB7XG4gICAgdGhpcy5rZXkgPSBrZXlcbiAgICB0aGlzLnZhbHVlID0gdmFsdWVcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aFxuICAgIHRoaXMubm93ID0gbm93XG4gICAgdGhpcy5tYXhBZ2UgPSBtYXhBZ2UgfHwgMFxuICB9XG59XG5cbmNvbnN0IGZvckVhY2hTdGVwID0gKHNlbGYsIGZuLCBub2RlLCB0aGlzcCkgPT4ge1xuICBsZXQgaGl0ID0gbm9kZS52YWx1ZVxuICBpZiAoaXNTdGFsZShzZWxmLCBoaXQpKSB7XG4gICAgZGVsKHNlbGYsIG5vZGUpXG4gICAgaWYgKCFzZWxmW0FMTE9XX1NUQUxFXSlcbiAgICAgIGhpdCA9IHVuZGVmaW5lZFxuICB9XG4gIGlmIChoaXQpXG4gICAgZm4uY2FsbCh0aGlzcCwgaGl0LnZhbHVlLCBoaXQua2V5LCBzZWxmKVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExSVUNhY2hlXG4iLCAiLy8gaG9pc3RlZCBjbGFzcyBmb3IgY3ljbGljIGRlcGVuZGVuY3lcbmNsYXNzIFJhbmdlIHtcbiAgY29uc3RydWN0b3IgKHJhbmdlLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKVxuXG4gICAgaWYgKHJhbmdlIGluc3RhbmNlb2YgUmFuZ2UpIHtcbiAgICAgIGlmIChcbiAgICAgICAgcmFuZ2UubG9vc2UgPT09ICEhb3B0aW9ucy5sb29zZSAmJlxuICAgICAgICByYW5nZS5pbmNsdWRlUHJlcmVsZWFzZSA9PT0gISFvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHJhbmdlLnJhdywgb3B0aW9ucylcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmFuZ2UgaW5zdGFuY2VvZiBDb21wYXJhdG9yKSB7XG4gICAgICAvLyBqdXN0IHB1dCBpdCBpbiB0aGUgc2V0IGFuZCByZXR1cm5cbiAgICAgIHRoaXMucmF3ID0gcmFuZ2UudmFsdWVcbiAgICAgIHRoaXMuc2V0ID0gW1tyYW5nZV1dXG4gICAgICB0aGlzLmZvcm1hdCgpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLmxvb3NlID0gISFvcHRpb25zLmxvb3NlXG4gICAgdGhpcy5pbmNsdWRlUHJlcmVsZWFzZSA9ICEhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZVxuXG4gICAgLy8gRmlyc3QsIHNwbGl0IGJhc2VkIG9uIGJvb2xlYW4gb3IgfHxcbiAgICB0aGlzLnJhdyA9IHJhbmdlXG4gICAgdGhpcy5zZXQgPSByYW5nZVxuICAgICAgLnNwbGl0KC9cXHMqXFx8XFx8XFxzKi8pXG4gICAgICAvLyBtYXAgdGhlIHJhbmdlIHRvIGEgMmQgYXJyYXkgb2YgY29tcGFyYXRvcnNcbiAgICAgIC5tYXAocmFuZ2UgPT4gdGhpcy5wYXJzZVJhbmdlKHJhbmdlLnRyaW0oKSkpXG4gICAgICAvLyB0aHJvdyBvdXQgYW55IGNvbXBhcmF0b3IgbGlzdHMgdGhhdCBhcmUgZW1wdHlcbiAgICAgIC8vIHRoaXMgZ2VuZXJhbGx5IG1lYW5zIHRoYXQgaXQgd2FzIG5vdCBhIHZhbGlkIHJhbmdlLCB3aGljaCBpcyBhbGxvd2VkXG4gICAgICAvLyBpbiBsb29zZSBtb2RlLCBidXQgd2lsbCBzdGlsbCB0aHJvdyBpZiB0aGUgV0hPTEUgcmFuZ2UgaXMgaW52YWxpZC5cbiAgICAgIC5maWx0ZXIoYyA9PiBjLmxlbmd0aClcblxuICAgIGlmICghdGhpcy5zZXQubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIFNlbVZlciBSYW5nZTogJHtyYW5nZX1gKVxuICAgIH1cblxuICAgIC8vIGlmIHdlIGhhdmUgYW55IHRoYXQgYXJlIG5vdCB0aGUgbnVsbCBzZXQsIHRocm93IG91dCBudWxsIHNldHMuXG4gICAgaWYgKHRoaXMuc2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIGtlZXAgdGhlIGZpcnN0IG9uZSwgaW4gY2FzZSB0aGV5J3JlIGFsbCBudWxsIHNldHNcbiAgICAgIGNvbnN0IGZpcnN0ID0gdGhpcy5zZXRbMF1cbiAgICAgIHRoaXMuc2V0ID0gdGhpcy5zZXQuZmlsdGVyKGMgPT4gIWlzTnVsbFNldChjWzBdKSlcbiAgICAgIGlmICh0aGlzLnNldC5sZW5ndGggPT09IDApXG4gICAgICAgIHRoaXMuc2V0ID0gW2ZpcnN0XVxuICAgICAgZWxzZSBpZiAodGhpcy5zZXQubGVuZ3RoID4gMSkge1xuICAgICAgICAvLyBpZiB3ZSBoYXZlIGFueSB0aGF0IGFyZSAqLCB0aGVuIHRoZSByYW5nZSBpcyBqdXN0ICpcbiAgICAgICAgZm9yIChjb25zdCBjIG9mIHRoaXMuc2V0KSB7XG4gICAgICAgICAgaWYgKGMubGVuZ3RoID09PSAxICYmIGlzQW55KGNbMF0pKSB7XG4gICAgICAgICAgICB0aGlzLnNldCA9IFtjXVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmZvcm1hdCgpXG4gIH1cblxuICBmb3JtYXQgKCkge1xuICAgIHRoaXMucmFuZ2UgPSB0aGlzLnNldFxuICAgICAgLm1hcCgoY29tcHMpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbXBzLmpvaW4oJyAnKS50cmltKClcbiAgICAgIH0pXG4gICAgICAuam9pbignfHwnKVxuICAgICAgLnRyaW0oKVxuICAgIHJldHVybiB0aGlzLnJhbmdlXG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmFuZ2VcbiAgfVxuXG4gIHBhcnNlUmFuZ2UgKHJhbmdlKSB7XG4gICAgcmFuZ2UgPSByYW5nZS50cmltKClcblxuICAgIC8vIG1lbW9pemUgcmFuZ2UgcGFyc2luZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgLy8gdGhpcyBpcyBhIHZlcnkgaG90IHBhdGgsIGFuZCBmdWxseSBkZXRlcm1pbmlzdGljLlxuICAgIGNvbnN0IG1lbW9PcHRzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zKS5qb2luKCcsJylcbiAgICBjb25zdCBtZW1vS2V5ID0gYHBhcnNlUmFuZ2U6JHttZW1vT3B0c306JHtyYW5nZX1gXG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KG1lbW9LZXkpXG4gICAgaWYgKGNhY2hlZClcbiAgICAgIHJldHVybiBjYWNoZWRcblxuICAgIGNvbnN0IGxvb3NlID0gdGhpcy5vcHRpb25zLmxvb3NlXG4gICAgLy8gYDEuMi4zIC0gMS4yLjRgID0+IGA+PTEuMi4zIDw9MS4yLjRgXG4gICAgY29uc3QgaHIgPSBsb29zZSA/IHJlW3QuSFlQSEVOUkFOR0VMT09TRV0gOiByZVt0LkhZUEhFTlJBTkdFXVxuICAgIHJhbmdlID0gcmFuZ2UucmVwbGFjZShociwgaHlwaGVuUmVwbGFjZSh0aGlzLm9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UpKVxuICAgIGRlYnVnKCdoeXBoZW4gcmVwbGFjZScsIHJhbmdlKVxuICAgIC8vIGA+IDEuMi4zIDwgMS4yLjVgID0+IGA+MS4yLjMgPDEuMi41YFxuICAgIHJhbmdlID0gcmFuZ2UucmVwbGFjZShyZVt0LkNPTVBBUkFUT1JUUklNXSwgY29tcGFyYXRvclRyaW1SZXBsYWNlKVxuICAgIGRlYnVnKCdjb21wYXJhdG9yIHRyaW0nLCByYW5nZSwgcmVbdC5DT01QQVJBVE9SVFJJTV0pXG5cbiAgICAvLyBgfiAxLjIuM2AgPT4gYH4xLjIuM2BcbiAgICByYW5nZSA9IHJhbmdlLnJlcGxhY2UocmVbdC5USUxERVRSSU1dLCB0aWxkZVRyaW1SZXBsYWNlKVxuXG4gICAgLy8gYF4gMS4yLjNgID0+IGBeMS4yLjNgXG4gICAgcmFuZ2UgPSByYW5nZS5yZXBsYWNlKHJlW3QuQ0FSRVRUUklNXSwgY2FyZXRUcmltUmVwbGFjZSlcblxuICAgIC8vIG5vcm1hbGl6ZSBzcGFjZXNcbiAgICByYW5nZSA9IHJhbmdlLnNwbGl0KC9cXHMrLykuam9pbignICcpXG5cbiAgICAvLyBBdCB0aGlzIHBvaW50LCB0aGUgcmFuZ2UgaXMgY29tcGxldGVseSB0cmltbWVkIGFuZFxuICAgIC8vIHJlYWR5IHRvIGJlIHNwbGl0IGludG8gY29tcGFyYXRvcnMuXG5cbiAgICBjb25zdCBjb21wUmUgPSBsb29zZSA/IHJlW3QuQ09NUEFSQVRPUkxPT1NFXSA6IHJlW3QuQ09NUEFSQVRPUl1cbiAgICBjb25zdCByYW5nZUxpc3QgPSByYW5nZVxuICAgICAgLnNwbGl0KCcgJylcbiAgICAgIC5tYXAoY29tcCA9PiBwYXJzZUNvbXBhcmF0b3IoY29tcCwgdGhpcy5vcHRpb25zKSlcbiAgICAgIC5qb2luKCcgJylcbiAgICAgIC5zcGxpdCgvXFxzKy8pXG4gICAgICAvLyA+PTAuMC4wIGlzIGVxdWl2YWxlbnQgdG8gKlxuICAgICAgLm1hcChjb21wID0+IHJlcGxhY2VHVEUwKGNvbXAsIHRoaXMub3B0aW9ucykpXG4gICAgICAvLyBpbiBsb29zZSBtb2RlLCB0aHJvdyBvdXQgYW55IHRoYXQgYXJlIG5vdCB2YWxpZCBjb21wYXJhdG9yc1xuICAgICAgLmZpbHRlcih0aGlzLm9wdGlvbnMubG9vc2UgPyBjb21wID0+ICEhY29tcC5tYXRjaChjb21wUmUpIDogKCkgPT4gdHJ1ZSlcbiAgICAgIC5tYXAoY29tcCA9PiBuZXcgQ29tcGFyYXRvcihjb21wLCB0aGlzLm9wdGlvbnMpKVxuXG4gICAgLy8gaWYgYW55IGNvbXBhcmF0b3JzIGFyZSB0aGUgbnVsbCBzZXQsIHRoZW4gcmVwbGFjZSB3aXRoIEpVU1QgbnVsbCBzZXRcbiAgICAvLyBpZiBtb3JlIHRoYW4gb25lIGNvbXBhcmF0b3IsIHJlbW92ZSBhbnkgKiBjb21wYXJhdG9yc1xuICAgIC8vIGFsc28sIGRvbid0IGluY2x1ZGUgdGhlIHNhbWUgY29tcGFyYXRvciBtb3JlIHRoYW4gb25jZVxuICAgIGNvbnN0IGwgPSByYW5nZUxpc3QubGVuZ3RoXG4gICAgY29uc3QgcmFuZ2VNYXAgPSBuZXcgTWFwKClcbiAgICBmb3IgKGNvbnN0IGNvbXAgb2YgcmFuZ2VMaXN0KSB7XG4gICAgICBpZiAoaXNOdWxsU2V0KGNvbXApKVxuICAgICAgICByZXR1cm4gW2NvbXBdXG4gICAgICByYW5nZU1hcC5zZXQoY29tcC52YWx1ZSwgY29tcClcbiAgICB9XG4gICAgaWYgKHJhbmdlTWFwLnNpemUgPiAxICYmIHJhbmdlTWFwLmhhcygnJykpXG4gICAgICByYW5nZU1hcC5kZWxldGUoJycpXG5cbiAgICBjb25zdCByZXN1bHQgPSBbLi4ucmFuZ2VNYXAudmFsdWVzKCldXG4gICAgY2FjaGUuc2V0KG1lbW9LZXksIHJlc3VsdClcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBpbnRlcnNlY3RzIChyYW5nZSwgb3B0aW9ucykge1xuICAgIGlmICghKHJhbmdlIGluc3RhbmNlb2YgUmFuZ2UpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhIFJhbmdlIGlzIHJlcXVpcmVkJylcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zZXQuc29tZSgodGhpc0NvbXBhcmF0b3JzKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBpc1NhdGlzZmlhYmxlKHRoaXNDb21wYXJhdG9ycywgb3B0aW9ucykgJiZcbiAgICAgICAgcmFuZ2Uuc2V0LnNvbWUoKHJhbmdlQ29tcGFyYXRvcnMpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgaXNTYXRpc2ZpYWJsZShyYW5nZUNvbXBhcmF0b3JzLCBvcHRpb25zKSAmJlxuICAgICAgICAgICAgdGhpc0NvbXBhcmF0b3JzLmV2ZXJ5KCh0aGlzQ29tcGFyYXRvcikgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcmFuZ2VDb21wYXJhdG9ycy5ldmVyeSgocmFuZ2VDb21wYXJhdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNDb21wYXJhdG9yLmludGVyc2VjdHMocmFuZ2VDb21wYXJhdG9yLCBvcHRpb25zKVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIH0pXG4gICAgICApXG4gICAgfSlcbiAgfVxuXG4gIC8vIGlmIEFOWSBvZiB0aGUgc2V0cyBtYXRjaCBBTEwgb2YgaXRzIGNvbXBhcmF0b3JzLCB0aGVuIHBhc3NcbiAgdGVzdCAodmVyc2lvbikge1xuICAgIGlmICghdmVyc2lvbikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmVyc2lvbiA9IG5ldyBTZW1WZXIodmVyc2lvbiwgdGhpcy5vcHRpb25zKVxuICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNldC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRlc3RTZXQodGhpcy5zZXRbaV0sIHZlcnNpb24sIHRoaXMub3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gUmFuZ2VcblxuY29uc3QgTFJVID0gcmVxdWlyZSgnbHJ1LWNhY2hlJylcbmNvbnN0IGNhY2hlID0gbmV3IExSVSh7IG1heDogMTAwMCB9KVxuXG5jb25zdCBwYXJzZU9wdGlvbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9wYXJzZS1vcHRpb25zJylcbmNvbnN0IENvbXBhcmF0b3IgPSByZXF1aXJlKCcuL2NvbXBhcmF0b3InKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9kZWJ1ZycpXG5jb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuL3NlbXZlcicpXG5jb25zdCB7XG4gIHJlLFxuICB0LFxuICBjb21wYXJhdG9yVHJpbVJlcGxhY2UsXG4gIHRpbGRlVHJpbVJlcGxhY2UsXG4gIGNhcmV0VHJpbVJlcGxhY2Vcbn0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9yZScpXG5cbmNvbnN0IGlzTnVsbFNldCA9IGMgPT4gYy52YWx1ZSA9PT0gJzwwLjAuMC0wJ1xuY29uc3QgaXNBbnkgPSBjID0+IGMudmFsdWUgPT09ICcnXG5cbi8vIHRha2UgYSBzZXQgb2YgY29tcGFyYXRvcnMgYW5kIGRldGVybWluZSB3aGV0aGVyIHRoZXJlXG4vLyBleGlzdHMgYSB2ZXJzaW9uIHdoaWNoIGNhbiBzYXRpc2Z5IGl0XG5jb25zdCBpc1NhdGlzZmlhYmxlID0gKGNvbXBhcmF0b3JzLCBvcHRpb25zKSA9PiB7XG4gIGxldCByZXN1bHQgPSB0cnVlXG4gIGNvbnN0IHJlbWFpbmluZ0NvbXBhcmF0b3JzID0gY29tcGFyYXRvcnMuc2xpY2UoKVxuICBsZXQgdGVzdENvbXBhcmF0b3IgPSByZW1haW5pbmdDb21wYXJhdG9ycy5wb3AoKVxuXG4gIHdoaWxlIChyZXN1bHQgJiYgcmVtYWluaW5nQ29tcGFyYXRvcnMubGVuZ3RoKSB7XG4gICAgcmVzdWx0ID0gcmVtYWluaW5nQ29tcGFyYXRvcnMuZXZlcnkoKG90aGVyQ29tcGFyYXRvcikgPT4ge1xuICAgICAgcmV0dXJuIHRlc3RDb21wYXJhdG9yLmludGVyc2VjdHMob3RoZXJDb21wYXJhdG9yLCBvcHRpb25zKVxuICAgIH0pXG5cbiAgICB0ZXN0Q29tcGFyYXRvciA9IHJlbWFpbmluZ0NvbXBhcmF0b3JzLnBvcCgpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8vIGNvbXByaXNlZCBvZiB4cmFuZ2VzLCB0aWxkZXMsIHN0YXJzLCBhbmQgZ3RsdCdzIGF0IHRoaXMgcG9pbnQuXG4vLyBhbHJlYWR5IHJlcGxhY2VkIHRoZSBoeXBoZW4gcmFuZ2VzXG4vLyB0dXJuIGludG8gYSBzZXQgb2YgSlVTVCBjb21wYXJhdG9ycy5cbmNvbnN0IHBhcnNlQ29tcGFyYXRvciA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGRlYnVnKCdjb21wJywgY29tcCwgb3B0aW9ucylcbiAgY29tcCA9IHJlcGxhY2VDYXJldHMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ2NhcmV0JywgY29tcClcbiAgY29tcCA9IHJlcGxhY2VUaWxkZXMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ3RpbGRlcycsIGNvbXApXG4gIGNvbXAgPSByZXBsYWNlWFJhbmdlcyhjb21wLCBvcHRpb25zKVxuICBkZWJ1ZygneHJhbmdlJywgY29tcClcbiAgY29tcCA9IHJlcGxhY2VTdGFycyhjb21wLCBvcHRpb25zKVxuICBkZWJ1Zygnc3RhcnMnLCBjb21wKVxuICByZXR1cm4gY29tcFxufVxuXG5jb25zdCBpc1ggPSBpZCA9PiAhaWQgfHwgaWQudG9Mb3dlckNhc2UoKSA9PT0gJ3gnIHx8IGlkID09PSAnKidcblxuLy8gfiwgfj4gLS0+ICogKGFueSwga2luZGEgc2lsbHkpXG4vLyB+MiwgfjIueCwgfjIueC54LCB+PjIsIH4+Mi54IH4+Mi54LnggLS0+ID49Mi4wLjAgPDMuMC4wLTBcbi8vIH4yLjAsIH4yLjAueCwgfj4yLjAsIH4+Mi4wLnggLS0+ID49Mi4wLjAgPDIuMS4wLTBcbi8vIH4xLjIsIH4xLjIueCwgfj4xLjIsIH4+MS4yLnggLS0+ID49MS4yLjAgPDEuMy4wLTBcbi8vIH4xLjIuMywgfj4xLjIuMyAtLT4gPj0xLjIuMyA8MS4zLjAtMFxuLy8gfjEuMi4wLCB+PjEuMi4wIC0tPiA+PTEuMi4wIDwxLjMuMC0wXG5jb25zdCByZXBsYWNlVGlsZGVzID0gKGNvbXAsIG9wdGlvbnMpID0+XG4gIGNvbXAudHJpbSgpLnNwbGl0KC9cXHMrLykubWFwKChjb21wKSA9PiB7XG4gICAgcmV0dXJuIHJlcGxhY2VUaWxkZShjb21wLCBvcHRpb25zKVxuICB9KS5qb2luKCcgJylcblxuY29uc3QgcmVwbGFjZVRpbGRlID0gKGNvbXAsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgciA9IG9wdGlvbnMubG9vc2UgPyByZVt0LlRJTERFTE9PU0VdIDogcmVbdC5USUxERV1cbiAgcmV0dXJuIGNvbXAucmVwbGFjZShyLCAoXywgTSwgbSwgcCwgcHIpID0+IHtcbiAgICBkZWJ1ZygndGlsZGUnLCBjb21wLCBfLCBNLCBtLCBwLCBwcilcbiAgICBsZXQgcmV0XG5cbiAgICBpZiAoaXNYKE0pKSB7XG4gICAgICByZXQgPSAnJ1xuICAgIH0gZWxzZSBpZiAoaXNYKG0pKSB7XG4gICAgICByZXQgPSBgPj0ke019LjAuMCA8JHsrTSArIDF9LjAuMC0wYFxuICAgIH0gZWxzZSBpZiAoaXNYKHApKSB7XG4gICAgICAvLyB+MS4yID09ID49MS4yLjAgPDEuMy4wLTBcbiAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4wIDwke019LiR7K20gKyAxfS4wLTBgXG4gICAgfSBlbHNlIGlmIChwcikge1xuICAgICAgZGVidWcoJ3JlcGxhY2VUaWxkZSBwcicsIHByKVxuICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cH0tJHtwclxuICAgICAgfSA8JHtNfS4keyttICsgMX0uMC0wYFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB+MS4yLjMgPT0gPj0xLjIuMyA8MS4zLjAtMFxuICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cFxuICAgICAgfSA8JHtNfS4keyttICsgMX0uMC0wYFxuICAgIH1cblxuICAgIGRlYnVnKCd0aWxkZSByZXR1cm4nLCByZXQpXG4gICAgcmV0dXJuIHJldFxuICB9KVxufVxuXG4vLyBeIC0tPiAqIChhbnksIGtpbmRhIHNpbGx5KVxuLy8gXjIsIF4yLngsIF4yLngueCAtLT4gPj0yLjAuMCA8My4wLjAtMFxuLy8gXjIuMCwgXjIuMC54IC0tPiA+PTIuMC4wIDwzLjAuMC0wXG4vLyBeMS4yLCBeMS4yLnggLS0+ID49MS4yLjAgPDIuMC4wLTBcbi8vIF4xLjIuMyAtLT4gPj0xLjIuMyA8Mi4wLjAtMFxuLy8gXjEuMi4wIC0tPiA+PTEuMi4wIDwyLjAuMC0wXG5jb25zdCByZXBsYWNlQ2FyZXRzID0gKGNvbXAsIG9wdGlvbnMpID0+XG4gIGNvbXAudHJpbSgpLnNwbGl0KC9cXHMrLykubWFwKChjb21wKSA9PiB7XG4gICAgcmV0dXJuIHJlcGxhY2VDYXJldChjb21wLCBvcHRpb25zKVxuICB9KS5qb2luKCcgJylcblxuY29uc3QgcmVwbGFjZUNhcmV0ID0gKGNvbXAsIG9wdGlvbnMpID0+IHtcbiAgZGVidWcoJ2NhcmV0JywgY29tcCwgb3B0aW9ucylcbiAgY29uc3QgciA9IG9wdGlvbnMubG9vc2UgPyByZVt0LkNBUkVUTE9PU0VdIDogcmVbdC5DQVJFVF1cbiAgY29uc3QgeiA9IG9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UgPyAnLTAnIDogJydcbiAgcmV0dXJuIGNvbXAucmVwbGFjZShyLCAoXywgTSwgbSwgcCwgcHIpID0+IHtcbiAgICBkZWJ1ZygnY2FyZXQnLCBjb21wLCBfLCBNLCBtLCBwLCBwcilcbiAgICBsZXQgcmV0XG5cbiAgICBpZiAoaXNYKE0pKSB7XG4gICAgICByZXQgPSAnJ1xuICAgIH0gZWxzZSBpZiAoaXNYKG0pKSB7XG4gICAgICByZXQgPSBgPj0ke019LjAuMCR7en0gPCR7K00gKyAxfS4wLjAtMGBcbiAgICB9IGVsc2UgaWYgKGlzWChwKSkge1xuICAgICAgaWYgKE0gPT09ICcwJykge1xuICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uMCR7en0gPCR7TX0uJHsrbSArIDF9LjAtMGBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4wJHt6fSA8JHsrTSArIDF9LjAuMC0wYFxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHIpIHtcbiAgICAgIGRlYnVnKCdyZXBsYWNlQ2FyZXQgcHInLCBwcilcbiAgICAgIGlmIChNID09PSAnMCcpIHtcbiAgICAgICAgaWYgKG0gPT09ICcwJykge1xuICAgICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3B9LSR7cHJcbiAgICAgICAgICB9IDwke019LiR7bX0uJHsrcCArIDF9LTBgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cH0tJHtwclxuICAgICAgICAgIH0gPCR7TX0uJHsrbSArIDF9LjAtMGBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cH0tJHtwclxuICAgICAgICB9IDwkeytNICsgMX0uMC4wLTBgXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdubyBwcicpXG4gICAgICBpZiAoTSA9PT0gJzAnKSB7XG4gICAgICAgIGlmIChtID09PSAnMCcpIHtcbiAgICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwXG4gICAgICAgICAgfSR7en0gPCR7TX0uJHttfS4keytwICsgMX0tMGBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwXG4gICAgICAgICAgfSR7en0gPCR7TX0uJHsrbSArIDF9LjAtMGBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cFxuICAgICAgICB9IDwkeytNICsgMX0uMC4wLTBgXG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVidWcoJ2NhcmV0IHJldHVybicsIHJldClcbiAgICByZXR1cm4gcmV0XG4gIH0pXG59XG5cbmNvbnN0IHJlcGxhY2VYUmFuZ2VzID0gKGNvbXAsIG9wdGlvbnMpID0+IHtcbiAgZGVidWcoJ3JlcGxhY2VYUmFuZ2VzJywgY29tcCwgb3B0aW9ucylcbiAgcmV0dXJuIGNvbXAuc3BsaXQoL1xccysvKS5tYXAoKGNvbXApID0+IHtcbiAgICByZXR1cm4gcmVwbGFjZVhSYW5nZShjb21wLCBvcHRpb25zKVxuICB9KS5qb2luKCcgJylcbn1cblxuY29uc3QgcmVwbGFjZVhSYW5nZSA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGNvbXAgPSBjb21wLnRyaW0oKVxuICBjb25zdCByID0gb3B0aW9ucy5sb29zZSA/IHJlW3QuWFJBTkdFTE9PU0VdIDogcmVbdC5YUkFOR0VdXG4gIHJldHVybiBjb21wLnJlcGxhY2UociwgKHJldCwgZ3RsdCwgTSwgbSwgcCwgcHIpID0+IHtcbiAgICBkZWJ1ZygneFJhbmdlJywgY29tcCwgcmV0LCBndGx0LCBNLCBtLCBwLCBwcilcbiAgICBjb25zdCB4TSA9IGlzWChNKVxuICAgIGNvbnN0IHhtID0geE0gfHwgaXNYKG0pXG4gICAgY29uc3QgeHAgPSB4bSB8fCBpc1gocClcbiAgICBjb25zdCBhbnlYID0geHBcblxuICAgIGlmIChndGx0ID09PSAnPScgJiYgYW55WCkge1xuICAgICAgZ3RsdCA9ICcnXG4gICAgfVxuXG4gICAgLy8gaWYgd2UncmUgaW5jbHVkaW5nIHByZXJlbGVhc2VzIGluIHRoZSBtYXRjaCwgdGhlbiB3ZSBuZWVkXG4gICAgLy8gdG8gZml4IHRoaXMgdG8gLTAsIHRoZSBsb3dlc3QgcG9zc2libGUgcHJlcmVsZWFzZSB2YWx1ZVxuICAgIHByID0gb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSA/ICctMCcgOiAnJ1xuXG4gICAgaWYgKHhNKSB7XG4gICAgICBpZiAoZ3RsdCA9PT0gJz4nIHx8IGd0bHQgPT09ICc8Jykge1xuICAgICAgICAvLyBub3RoaW5nIGlzIGFsbG93ZWRcbiAgICAgICAgcmV0ID0gJzwwLjAuMC0wJ1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm90aGluZyBpcyBmb3JiaWRkZW5cbiAgICAgICAgcmV0ID0gJyonXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChndGx0ICYmIGFueVgpIHtcbiAgICAgIC8vIHdlIGtub3cgcGF0Y2ggaXMgYW4geCwgYmVjYXVzZSB3ZSBoYXZlIGFueSB4IGF0IGFsbC5cbiAgICAgIC8vIHJlcGxhY2UgWCB3aXRoIDBcbiAgICAgIGlmICh4bSkge1xuICAgICAgICBtID0gMFxuICAgICAgfVxuICAgICAgcCA9IDBcblxuICAgICAgaWYgKGd0bHQgPT09ICc+Jykge1xuICAgICAgICAvLyA+MSA9PiA+PTIuMC4wXG4gICAgICAgIC8vID4xLjIgPT4gPj0xLjMuMFxuICAgICAgICBndGx0ID0gJz49J1xuICAgICAgICBpZiAoeG0pIHtcbiAgICAgICAgICBNID0gK00gKyAxXG4gICAgICAgICAgbSA9IDBcbiAgICAgICAgICBwID0gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG0gPSArbSArIDFcbiAgICAgICAgICBwID0gMFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGd0bHQgPT09ICc8PScpIHtcbiAgICAgICAgLy8gPD0wLjcueCBpcyBhY3R1YWxseSA8MC44LjAsIHNpbmNlIGFueSAwLjcueCBzaG91bGRcbiAgICAgICAgLy8gcGFzcy4gIFNpbWlsYXJseSwgPD03LnggaXMgYWN0dWFsbHkgPDguMC4wLCBldGMuXG4gICAgICAgIGd0bHQgPSAnPCdcbiAgICAgICAgaWYgKHhtKSB7XG4gICAgICAgICAgTSA9ICtNICsgMVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG0gPSArbSArIDFcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZ3RsdCA9PT0gJzwnKVxuICAgICAgICBwciA9ICctMCdcblxuICAgICAgcmV0ID0gYCR7Z3RsdCArIE19LiR7bX0uJHtwfSR7cHJ9YFxuICAgIH0gZWxzZSBpZiAoeG0pIHtcbiAgICAgIHJldCA9IGA+PSR7TX0uMC4wJHtwcn0gPCR7K00gKyAxfS4wLjAtMGBcbiAgICB9IGVsc2UgaWYgKHhwKSB7XG4gICAgICByZXQgPSBgPj0ke019LiR7bX0uMCR7cHJcbiAgICAgIH0gPCR7TX0uJHsrbSArIDF9LjAtMGBcbiAgICB9XG5cbiAgICBkZWJ1ZygneFJhbmdlIHJldHVybicsIHJldClcblxuICAgIHJldHVybiByZXRcbiAgfSlcbn1cblxuLy8gQmVjYXVzZSAqIGlzIEFORC1lZCB3aXRoIGV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgY29tcGFyYXRvcixcbi8vIGFuZCAnJyBtZWFucyBcImFueSB2ZXJzaW9uXCIsIGp1c3QgcmVtb3ZlIHRoZSAqcyBlbnRpcmVseS5cbmNvbnN0IHJlcGxhY2VTdGFycyA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGRlYnVnKCdyZXBsYWNlU3RhcnMnLCBjb21wLCBvcHRpb25zKVxuICAvLyBMb29zZW5lc3MgaXMgaWdub3JlZCBoZXJlLiAgc3RhciBpcyBhbHdheXMgYXMgbG9vc2UgYXMgaXQgZ2V0cyFcbiAgcmV0dXJuIGNvbXAudHJpbSgpLnJlcGxhY2UocmVbdC5TVEFSXSwgJycpXG59XG5cbmNvbnN0IHJlcGxhY2VHVEUwID0gKGNvbXAsIG9wdGlvbnMpID0+IHtcbiAgZGVidWcoJ3JlcGxhY2VHVEUwJywgY29tcCwgb3B0aW9ucylcbiAgcmV0dXJuIGNvbXAudHJpbSgpXG4gICAgLnJlcGxhY2UocmVbb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSA/IHQuR1RFMFBSRSA6IHQuR1RFMF0sICcnKVxufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHBhc3NlZCB0byBzdHJpbmcucmVwbGFjZShyZVt0LkhZUEhFTlJBTkdFXSlcbi8vIE0sIG0sIHBhdGNoLCBwcmVyZWxlYXNlLCBidWlsZFxuLy8gMS4yIC0gMy40LjUgPT4gPj0xLjIuMCA8PTMuNC41XG4vLyAxLjIuMyAtIDMuNCA9PiA+PTEuMi4wIDwzLjUuMC0wIEFueSAzLjQueCB3aWxsIGRvXG4vLyAxLjIgLSAzLjQgPT4gPj0xLjIuMCA8My41LjAtMFxuY29uc3QgaHlwaGVuUmVwbGFjZSA9IGluY1ByID0+ICgkMCxcbiAgZnJvbSwgZk0sIGZtLCBmcCwgZnByLCBmYixcbiAgdG8sIHRNLCB0bSwgdHAsIHRwciwgdGIpID0+IHtcbiAgaWYgKGlzWChmTSkpIHtcbiAgICBmcm9tID0gJydcbiAgfSBlbHNlIGlmIChpc1goZm0pKSB7XG4gICAgZnJvbSA9IGA+PSR7Zk19LjAuMCR7aW5jUHIgPyAnLTAnIDogJyd9YFxuICB9IGVsc2UgaWYgKGlzWChmcCkpIHtcbiAgICBmcm9tID0gYD49JHtmTX0uJHtmbX0uMCR7aW5jUHIgPyAnLTAnIDogJyd9YFxuICB9IGVsc2UgaWYgKGZwcikge1xuICAgIGZyb20gPSBgPj0ke2Zyb219YFxuICB9IGVsc2Uge1xuICAgIGZyb20gPSBgPj0ke2Zyb219JHtpbmNQciA/ICctMCcgOiAnJ31gXG4gIH1cblxuICBpZiAoaXNYKHRNKSkge1xuICAgIHRvID0gJydcbiAgfSBlbHNlIGlmIChpc1godG0pKSB7XG4gICAgdG8gPSBgPCR7K3RNICsgMX0uMC4wLTBgXG4gIH0gZWxzZSBpZiAoaXNYKHRwKSkge1xuICAgIHRvID0gYDwke3RNfS4keyt0bSArIDF9LjAtMGBcbiAgfSBlbHNlIGlmICh0cHIpIHtcbiAgICB0byA9IGA8PSR7dE19LiR7dG19LiR7dHB9LSR7dHByfWBcbiAgfSBlbHNlIGlmIChpbmNQcikge1xuICAgIHRvID0gYDwke3RNfS4ke3RtfS4keyt0cCArIDF9LTBgXG4gIH0gZWxzZSB7XG4gICAgdG8gPSBgPD0ke3RvfWBcbiAgfVxuXG4gIHJldHVybiAoYCR7ZnJvbX0gJHt0b31gKS50cmltKClcbn1cblxuY29uc3QgdGVzdFNldCA9IChzZXQsIHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXNldFtpXS50ZXN0KHZlcnNpb24pKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAodmVyc2lvbi5wcmVyZWxlYXNlLmxlbmd0aCAmJiAhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZSkge1xuICAgIC8vIEZpbmQgdGhlIHNldCBvZiB2ZXJzaW9ucyB0aGF0IGFyZSBhbGxvd2VkIHRvIGhhdmUgcHJlcmVsZWFzZXNcbiAgICAvLyBGb3IgZXhhbXBsZSwgXjEuMi4zLXByLjEgZGVzdWdhcnMgdG8gPj0xLjIuMy1wci4xIDwyLjAuMFxuICAgIC8vIFRoYXQgc2hvdWxkIGFsbG93IGAxLjIuMy1wci4yYCB0byBwYXNzLlxuICAgIC8vIEhvd2V2ZXIsIGAxLjIuNC1hbHBoYS5ub3RyZWFkeWAgc2hvdWxkIE5PVCBiZSBhbGxvd2VkLFxuICAgIC8vIGV2ZW4gdGhvdWdoIGl0J3Mgd2l0aGluIHRoZSByYW5nZSBzZXQgYnkgdGhlIGNvbXBhcmF0b3JzLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWJ1ZyhzZXRbaV0uc2VtdmVyKVxuICAgICAgaWYgKHNldFtpXS5zZW12ZXIgPT09IENvbXBhcmF0b3IuQU5ZKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChzZXRbaV0uc2VtdmVyLnByZXJlbGVhc2UubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBhbGxvd2VkID0gc2V0W2ldLnNlbXZlclxuICAgICAgICBpZiAoYWxsb3dlZC5tYWpvciA9PT0gdmVyc2lvbi5tYWpvciAmJlxuICAgICAgICAgICAgYWxsb3dlZC5taW5vciA9PT0gdmVyc2lvbi5taW5vciAmJlxuICAgICAgICAgICAgYWxsb3dlZC5wYXRjaCA9PT0gdmVyc2lvbi5wYXRjaCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWZXJzaW9uIGhhcyBhIC1wcmUsIGJ1dCBpdCdzIG5vdCBvbmUgb2YgdGhlIG9uZXMgd2UgbGlrZS5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG4iLCAiY29uc3QgQU5ZID0gU3ltYm9sKCdTZW1WZXIgQU5ZJylcbi8vIGhvaXN0ZWQgY2xhc3MgZm9yIGN5Y2xpYyBkZXBlbmRlbmN5XG5jbGFzcyBDb21wYXJhdG9yIHtcbiAgc3RhdGljIGdldCBBTlkgKCkge1xuICAgIHJldHVybiBBTllcbiAgfVxuICBjb25zdHJ1Y3RvciAoY29tcCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBwYXJzZU9wdGlvbnMob3B0aW9ucylcblxuICAgIGlmIChjb21wIGluc3RhbmNlb2YgQ29tcGFyYXRvcikge1xuICAgICAgaWYgKGNvbXAubG9vc2UgPT09ICEhb3B0aW9ucy5sb29zZSkge1xuICAgICAgICByZXR1cm4gY29tcFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcCA9IGNvbXAudmFsdWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWJ1ZygnY29tcGFyYXRvcicsIGNvbXAsIG9wdGlvbnMpXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMubG9vc2UgPSAhIW9wdGlvbnMubG9vc2VcbiAgICB0aGlzLnBhcnNlKGNvbXApXG5cbiAgICBpZiAodGhpcy5zZW12ZXIgPT09IEFOWSkge1xuICAgICAgdGhpcy52YWx1ZSA9ICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLm9wZXJhdG9yICsgdGhpcy5zZW12ZXIudmVyc2lvblxuICAgIH1cblxuICAgIGRlYnVnKCdjb21wJywgdGhpcylcbiAgfVxuXG4gIHBhcnNlIChjb21wKSB7XG4gICAgY29uc3QgciA9IHRoaXMub3B0aW9ucy5sb29zZSA/IHJlW3QuQ09NUEFSQVRPUkxPT1NFXSA6IHJlW3QuQ09NUEFSQVRPUl1cbiAgICBjb25zdCBtID0gY29tcC5tYXRjaChyKVxuXG4gICAgaWYgKCFtKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGNvbXBhcmF0b3I6ICR7Y29tcH1gKVxuICAgIH1cblxuICAgIHRoaXMub3BlcmF0b3IgPSBtWzFdICE9PSB1bmRlZmluZWQgPyBtWzFdIDogJydcbiAgICBpZiAodGhpcy5vcGVyYXRvciA9PT0gJz0nKSB7XG4gICAgICB0aGlzLm9wZXJhdG9yID0gJydcbiAgICB9XG5cbiAgICAvLyBpZiBpdCBsaXRlcmFsbHkgaXMganVzdCAnPicgb3IgJycgdGhlbiBhbGxvdyBhbnl0aGluZy5cbiAgICBpZiAoIW1bMl0pIHtcbiAgICAgIHRoaXMuc2VtdmVyID0gQU5ZXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VtdmVyID0gbmV3IFNlbVZlcihtWzJdLCB0aGlzLm9wdGlvbnMubG9vc2UpXG4gICAgfVxuICB9XG5cbiAgdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlXG4gIH1cblxuICB0ZXN0ICh2ZXJzaW9uKSB7XG4gICAgZGVidWcoJ0NvbXBhcmF0b3IudGVzdCcsIHZlcnNpb24sIHRoaXMub3B0aW9ucy5sb29zZSlcblxuICAgIGlmICh0aGlzLnNlbXZlciA9PT0gQU5ZIHx8IHZlcnNpb24gPT09IEFOWSkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZlcnNpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2ZXJzaW9uID0gbmV3IFNlbVZlcih2ZXJzaW9uLCB0aGlzLm9wdGlvbnMpXG4gICAgICB9IGNhdGNoIChlcikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY21wKHZlcnNpb24sIHRoaXMub3BlcmF0b3IsIHRoaXMuc2VtdmVyLCB0aGlzLm9wdGlvbnMpXG4gIH1cblxuICBpbnRlcnNlY3RzIChjb21wLCBvcHRpb25zKSB7XG4gICAgaWYgKCEoY29tcCBpbnN0YW5jZW9mIENvbXBhcmF0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhIENvbXBhcmF0b3IgaXMgcmVxdWlyZWQnKVxuICAgIH1cblxuICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgIGxvb3NlOiAhIW9wdGlvbnMsXG4gICAgICAgIGluY2x1ZGVQcmVyZWxlYXNlOiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wZXJhdG9yID09PSAnJykge1xuICAgICAgaWYgKHRoaXMudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKGNvbXAudmFsdWUsIG9wdGlvbnMpLnRlc3QodGhpcy52YWx1ZSlcbiAgICB9IGVsc2UgaWYgKGNvbXAub3BlcmF0b3IgPT09ICcnKSB7XG4gICAgICBpZiAoY29tcC52YWx1ZSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgUmFuZ2UodGhpcy52YWx1ZSwgb3B0aW9ucykudGVzdChjb21wLnNlbXZlcilcbiAgICB9XG5cbiAgICBjb25zdCBzYW1lRGlyZWN0aW9uSW5jcmVhc2luZyA9XG4gICAgICAodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPicpICYmXG4gICAgICAoY29tcC5vcGVyYXRvciA9PT0gJz49JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPicpXG4gICAgY29uc3Qgc2FtZURpcmVjdGlvbkRlY3JlYXNpbmcgPVxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc8PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJzwnKSAmJlxuICAgICAgKGNvbXAub3BlcmF0b3IgPT09ICc8PScgfHwgY29tcC5vcGVyYXRvciA9PT0gJzwnKVxuICAgIGNvbnN0IHNhbWVTZW1WZXIgPSB0aGlzLnNlbXZlci52ZXJzaW9uID09PSBjb21wLnNlbXZlci52ZXJzaW9uXG4gICAgY29uc3QgZGlmZmVyZW50RGlyZWN0aW9uc0luY2x1c2l2ZSA9XG4gICAgICAodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPD0nKSAmJlxuICAgICAgKGNvbXAub3BlcmF0b3IgPT09ICc+PScgfHwgY29tcC5vcGVyYXRvciA9PT0gJzw9JylcbiAgICBjb25zdCBvcHBvc2l0ZURpcmVjdGlvbnNMZXNzVGhhbiA9XG4gICAgICBjbXAodGhpcy5zZW12ZXIsICc8JywgY29tcC5zZW12ZXIsIG9wdGlvbnMpICYmXG4gICAgICAodGhpcy5vcGVyYXRvciA9PT0gJz49JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPicpICYmXG4gICAgICAgIChjb21wLm9wZXJhdG9yID09PSAnPD0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8JylcbiAgICBjb25zdCBvcHBvc2l0ZURpcmVjdGlvbnNHcmVhdGVyVGhhbiA9XG4gICAgICBjbXAodGhpcy5zZW12ZXIsICc+JywgY29tcC5zZW12ZXIsIG9wdGlvbnMpICYmXG4gICAgICAodGhpcy5vcGVyYXRvciA9PT0gJzw9JyB8fCB0aGlzLm9wZXJhdG9yID09PSAnPCcpICYmXG4gICAgICAgIChjb21wLm9wZXJhdG9yID09PSAnPj0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc+JylcblxuICAgIHJldHVybiAoXG4gICAgICBzYW1lRGlyZWN0aW9uSW5jcmVhc2luZyB8fFxuICAgICAgc2FtZURpcmVjdGlvbkRlY3JlYXNpbmcgfHxcbiAgICAgIChzYW1lU2VtVmVyICYmIGRpZmZlcmVudERpcmVjdGlvbnNJbmNsdXNpdmUpIHx8XG4gICAgICBvcHBvc2l0ZURpcmVjdGlvbnNMZXNzVGhhbiB8fFxuICAgICAgb3Bwb3NpdGVEaXJlY3Rpb25zR3JlYXRlclRoYW5cbiAgICApXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wYXJhdG9yXG5cbmNvbnN0IHBhcnNlT3B0aW9ucyA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3BhcnNlLW9wdGlvbnMnKVxuY29uc3Qge3JlLCB0fSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3JlJylcbmNvbnN0IGNtcCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9jbXAnKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9kZWJ1ZycpXG5jb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuL3NlbXZlcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4vcmFuZ2UnKVxuIiwgImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBzYXRpc2ZpZXMgPSAodmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgdHJ5IHtcbiAgICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucylcbiAgfSBjYXRjaCAoZXIpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gcmFuZ2UudGVzdCh2ZXJzaW9uKVxufVxubW9kdWxlLmV4cG9ydHMgPSBzYXRpc2ZpZXNcbiIsICJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuXG4vLyBNb3N0bHkganVzdCBmb3IgdGVzdGluZyBhbmQgbGVnYWN5IEFQSSByZWFzb25zXG5jb25zdCB0b0NvbXBhcmF0b3JzID0gKHJhbmdlLCBvcHRpb25zKSA9PlxuICBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpLnNldFxuICAgIC5tYXAoY29tcCA9PiBjb21wLm1hcChjID0+IGMudmFsdWUpLmpvaW4oJyAnKS50cmltKCkuc3BsaXQoJyAnKSlcblxubW9kdWxlLmV4cG9ydHMgPSB0b0NvbXBhcmF0b3JzXG4iLCAiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcblxuY29uc3QgbWF4U2F0aXNmeWluZyA9ICh2ZXJzaW9ucywgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgbGV0IG1heCA9IG51bGxcbiAgbGV0IG1heFNWID0gbnVsbFxuICBsZXQgcmFuZ2VPYmogPSBudWxsXG4gIHRyeSB7XG4gICAgcmFuZ2VPYmogPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB2ZXJzaW9ucy5mb3JFYWNoKCh2KSA9PiB7XG4gICAgaWYgKHJhbmdlT2JqLnRlc3QodikpIHtcbiAgICAgIC8vIHNhdGlzZmllcyh2LCByYW5nZSwgb3B0aW9ucylcbiAgICAgIGlmICghbWF4IHx8IG1heFNWLmNvbXBhcmUodikgPT09IC0xKSB7XG4gICAgICAgIC8vIGNvbXBhcmUobWF4LCB2LCB0cnVlKVxuICAgICAgICBtYXggPSB2XG4gICAgICAgIG1heFNWID0gbmV3IFNlbVZlcihtYXgsIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gbWF4XG59XG5tb2R1bGUuZXhwb3J0cyA9IG1heFNhdGlzZnlpbmdcbiIsICJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgbWluU2F0aXNmeWluZyA9ICh2ZXJzaW9ucywgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgbGV0IG1pbiA9IG51bGxcbiAgbGV0IG1pblNWID0gbnVsbFxuICBsZXQgcmFuZ2VPYmogPSBudWxsXG4gIHRyeSB7XG4gICAgcmFuZ2VPYmogPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB2ZXJzaW9ucy5mb3JFYWNoKCh2KSA9PiB7XG4gICAgaWYgKHJhbmdlT2JqLnRlc3QodikpIHtcbiAgICAgIC8vIHNhdGlzZmllcyh2LCByYW5nZSwgb3B0aW9ucylcbiAgICAgIGlmICghbWluIHx8IG1pblNWLmNvbXBhcmUodikgPT09IDEpIHtcbiAgICAgICAgLy8gY29tcGFyZShtaW4sIHYsIHRydWUpXG4gICAgICAgIG1pbiA9IHZcbiAgICAgICAgbWluU1YgPSBuZXcgU2VtVmVyKG1pbiwgb3B0aW9ucylcbiAgICAgIH1cbiAgICB9XG4gIH0pXG4gIHJldHVybiBtaW5cbn1cbm1vZHVsZS5leHBvcnRzID0gbWluU2F0aXNmeWluZ1xuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9ndCcpXG5cbmNvbnN0IG1pblZlcnNpb24gPSAocmFuZ2UsIGxvb3NlKSA9PiB7XG4gIHJhbmdlID0gbmV3IFJhbmdlKHJhbmdlLCBsb29zZSlcblxuICBsZXQgbWludmVyID0gbmV3IFNlbVZlcignMC4wLjAnKVxuICBpZiAocmFuZ2UudGVzdChtaW52ZXIpKSB7XG4gICAgcmV0dXJuIG1pbnZlclxuICB9XG5cbiAgbWludmVyID0gbmV3IFNlbVZlcignMC4wLjAtMCcpXG4gIGlmIChyYW5nZS50ZXN0KG1pbnZlcikpIHtcbiAgICByZXR1cm4gbWludmVyXG4gIH1cblxuICBtaW52ZXIgPSBudWxsXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2Uuc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgY29tcGFyYXRvcnMgPSByYW5nZS5zZXRbaV1cblxuICAgIGxldCBzZXRNaW4gPSBudWxsXG4gICAgY29tcGFyYXRvcnMuZm9yRWFjaCgoY29tcGFyYXRvcikgPT4ge1xuICAgICAgLy8gQ2xvbmUgdG8gYXZvaWQgbWFuaXB1bGF0aW5nIHRoZSBjb21wYXJhdG9yJ3Mgc2VtdmVyIG9iamVjdC5cbiAgICAgIGNvbnN0IGNvbXB2ZXIgPSBuZXcgU2VtVmVyKGNvbXBhcmF0b3Iuc2VtdmVyLnZlcnNpb24pXG4gICAgICBzd2l0Y2ggKGNvbXBhcmF0b3Iub3BlcmF0b3IpIHtcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgaWYgKGNvbXB2ZXIucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbXB2ZXIucGF0Y2grK1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wdmVyLnByZXJlbGVhc2UucHVzaCgwKVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb21wdmVyLnJhdyA9IGNvbXB2ZXIuZm9ybWF0KClcbiAgICAgICAgICAvKiBmYWxsdGhyb3VnaCAqL1xuICAgICAgICBjYXNlICcnOlxuICAgICAgICBjYXNlICc+PSc6XG4gICAgICAgICAgaWYgKCFzZXRNaW4gfHwgZ3QoY29tcHZlciwgc2V0TWluKSkge1xuICAgICAgICAgICAgc2V0TWluID0gY29tcHZlclxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FzZSAnPD0nOlxuICAgICAgICAgIC8qIElnbm9yZSBtYXhpbXVtIHZlcnNpb25zICovXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgb3BlcmF0aW9uOiAke2NvbXBhcmF0b3Iub3BlcmF0b3J9YClcbiAgICAgIH1cbiAgICB9KVxuICAgIGlmIChzZXRNaW4gJiYgKCFtaW52ZXIgfHwgZ3QobWludmVyLCBzZXRNaW4pKSlcbiAgICAgIG1pbnZlciA9IHNldE1pblxuICB9XG5cbiAgaWYgKG1pbnZlciAmJiByYW5nZS50ZXN0KG1pbnZlcikpIHtcbiAgICByZXR1cm4gbWludmVyXG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSBtaW5WZXJzaW9uXG4iLCAiY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IHZhbGlkUmFuZ2UgPSAocmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBSZXR1cm4gJyonIGluc3RlYWQgb2YgJycgc28gdGhhdCB0cnV0aGluZXNzIHdvcmtzLlxuICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBpZiBpdCdzIGludmFsaWQgYW55d2F5XG4gICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZSwgb3B0aW9ucykucmFuZ2UgfHwgJyonXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZFJhbmdlXG4iLCAiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgQ29tcGFyYXRvciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvY29tcGFyYXRvcicpXG5jb25zdCB7QU5ZfSA9IENvbXBhcmF0b3JcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCBzYXRpc2ZpZXMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvc2F0aXNmaWVzJylcbmNvbnN0IGd0ID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2d0JylcbmNvbnN0IGx0ID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2x0JylcbmNvbnN0IGx0ZSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9sdGUnKVxuY29uc3QgZ3RlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2d0ZScpXG5cbmNvbnN0IG91dHNpZGUgPSAodmVyc2lvbiwgcmFuZ2UsIGhpbG8sIG9wdGlvbnMpID0+IHtcbiAgdmVyc2lvbiA9IG5ldyBTZW1WZXIodmVyc2lvbiwgb3B0aW9ucylcbiAgcmFuZ2UgPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG5cbiAgbGV0IGd0Zm4sIGx0ZWZuLCBsdGZuLCBjb21wLCBlY29tcFxuICBzd2l0Y2ggKGhpbG8pIHtcbiAgICBjYXNlICc+JzpcbiAgICAgIGd0Zm4gPSBndFxuICAgICAgbHRlZm4gPSBsdGVcbiAgICAgIGx0Zm4gPSBsdFxuICAgICAgY29tcCA9ICc+J1xuICAgICAgZWNvbXAgPSAnPj0nXG4gICAgICBicmVha1xuICAgIGNhc2UgJzwnOlxuICAgICAgZ3RmbiA9IGx0XG4gICAgICBsdGVmbiA9IGd0ZVxuICAgICAgbHRmbiA9IGd0XG4gICAgICBjb21wID0gJzwnXG4gICAgICBlY29tcCA9ICc8PSdcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ011c3QgcHJvdmlkZSBhIGhpbG8gdmFsIG9mIFwiPFwiIG9yIFwiPlwiJylcbiAgfVxuXG4gIC8vIElmIGl0IHNhdGlzZmllcyB0aGUgcmFuZ2UgaXQgaXMgbm90IG91dHNpZGVcbiAgaWYgKHNhdGlzZmllcyh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIEZyb20gbm93IG9uLCB2YXJpYWJsZSB0ZXJtcyBhcmUgYXMgaWYgd2UncmUgaW4gXCJndHJcIiBtb2RlLlxuICAvLyBidXQgbm90ZSB0aGF0IGV2ZXJ5dGhpbmcgaXMgZmxpcHBlZCBmb3IgdGhlIFwibHRyXCIgZnVuY3Rpb24uXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZS5zZXQubGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBjb21wYXJhdG9ycyA9IHJhbmdlLnNldFtpXVxuXG4gICAgbGV0IGhpZ2ggPSBudWxsXG4gICAgbGV0IGxvdyA9IG51bGxcblxuICAgIGNvbXBhcmF0b3JzLmZvckVhY2goKGNvbXBhcmF0b3IpID0+IHtcbiAgICAgIGlmIChjb21wYXJhdG9yLnNlbXZlciA9PT0gQU5ZKSB7XG4gICAgICAgIGNvbXBhcmF0b3IgPSBuZXcgQ29tcGFyYXRvcignPj0wLjAuMCcpXG4gICAgICB9XG4gICAgICBoaWdoID0gaGlnaCB8fCBjb21wYXJhdG9yXG4gICAgICBsb3cgPSBsb3cgfHwgY29tcGFyYXRvclxuICAgICAgaWYgKGd0Zm4oY29tcGFyYXRvci5zZW12ZXIsIGhpZ2guc2VtdmVyLCBvcHRpb25zKSkge1xuICAgICAgICBoaWdoID0gY29tcGFyYXRvclxuICAgICAgfSBlbHNlIGlmIChsdGZuKGNvbXBhcmF0b3Iuc2VtdmVyLCBsb3cuc2VtdmVyLCBvcHRpb25zKSkge1xuICAgICAgICBsb3cgPSBjb21wYXJhdG9yXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIElmIHRoZSBlZGdlIHZlcnNpb24gY29tcGFyYXRvciBoYXMgYSBvcGVyYXRvciB0aGVuIG91ciB2ZXJzaW9uXG4gICAgLy8gaXNuJ3Qgb3V0c2lkZSBpdFxuICAgIGlmIChoaWdoLm9wZXJhdG9yID09PSBjb21wIHx8IGhpZ2gub3BlcmF0b3IgPT09IGVjb21wKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgbG93ZXN0IHZlcnNpb24gY29tcGFyYXRvciBoYXMgYW4gb3BlcmF0b3IgYW5kIG91ciB2ZXJzaW9uXG4gICAgLy8gaXMgbGVzcyB0aGFuIGl0IHRoZW4gaXQgaXNuJ3QgaGlnaGVyIHRoYW4gdGhlIHJhbmdlXG4gICAgaWYgKCghbG93Lm9wZXJhdG9yIHx8IGxvdy5vcGVyYXRvciA9PT0gY29tcCkgJiZcbiAgICAgICAgbHRlZm4odmVyc2lvbiwgbG93LnNlbXZlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSBpZiAobG93Lm9wZXJhdG9yID09PSBlY29tcCAmJiBsdGZuKHZlcnNpb24sIGxvdy5zZW12ZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdXRzaWRlXG4iLCAiLy8gRGV0ZXJtaW5lIGlmIHZlcnNpb24gaXMgZ3JlYXRlciB0aGFuIGFsbCB0aGUgdmVyc2lvbnMgcG9zc2libGUgaW4gdGhlIHJhbmdlLlxuY29uc3Qgb3V0c2lkZSA9IHJlcXVpcmUoJy4vb3V0c2lkZScpXG5jb25zdCBndHIgPSAodmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpID0+IG91dHNpZGUodmVyc2lvbiwgcmFuZ2UsICc+Jywgb3B0aW9ucylcbm1vZHVsZS5leHBvcnRzID0gZ3RyXG4iLCAiY29uc3Qgb3V0c2lkZSA9IHJlcXVpcmUoJy4vb3V0c2lkZScpXG4vLyBEZXRlcm1pbmUgaWYgdmVyc2lvbiBpcyBsZXNzIHRoYW4gYWxsIHRoZSB2ZXJzaW9ucyBwb3NzaWJsZSBpbiB0aGUgcmFuZ2VcbmNvbnN0IGx0ciA9ICh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucykgPT4gb3V0c2lkZSh2ZXJzaW9uLCByYW5nZSwgJzwnLCBvcHRpb25zKVxubW9kdWxlLmV4cG9ydHMgPSBsdHJcbiIsICJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgaW50ZXJzZWN0cyA9IChyMSwgcjIsIG9wdGlvbnMpID0+IHtcbiAgcjEgPSBuZXcgUmFuZ2UocjEsIG9wdGlvbnMpXG4gIHIyID0gbmV3IFJhbmdlKHIyLCBvcHRpb25zKVxuICByZXR1cm4gcjEuaW50ZXJzZWN0cyhyMilcbn1cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJzZWN0c1xuIiwgIi8vIGdpdmVuIGEgc2V0IG9mIHZlcnNpb25zIGFuZCBhIHJhbmdlLCBjcmVhdGUgYSBcInNpbXBsaWZpZWRcIiByYW5nZVxuLy8gdGhhdCBpbmNsdWRlcyB0aGUgc2FtZSB2ZXJzaW9ucyB0aGF0IHRoZSBvcmlnaW5hbCByYW5nZSBkb2VzXG4vLyBJZiB0aGUgb3JpZ2luYWwgcmFuZ2UgaXMgc2hvcnRlciB0aGFuIHRoZSBzaW1wbGlmaWVkIG9uZSwgcmV0dXJuIHRoYXQuXG5jb25zdCBzYXRpc2ZpZXMgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvc2F0aXNmaWVzLmpzJylcbmNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvY29tcGFyZS5qcycpXG5tb2R1bGUuZXhwb3J0cyA9ICh2ZXJzaW9ucywgcmFuZ2UsIG9wdGlvbnMpID0+IHtcbiAgY29uc3Qgc2V0ID0gW11cbiAgbGV0IG1pbiA9IG51bGxcbiAgbGV0IHByZXYgPSBudWxsXG4gIGNvbnN0IHYgPSB2ZXJzaW9ucy5zb3J0KChhLCBiKSA9PiBjb21wYXJlKGEsIGIsIG9wdGlvbnMpKVxuICBmb3IgKGNvbnN0IHZlcnNpb24gb2Ygdikge1xuICAgIGNvbnN0IGluY2x1ZGVkID0gc2F0aXNmaWVzKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKVxuICAgIGlmIChpbmNsdWRlZCkge1xuICAgICAgcHJldiA9IHZlcnNpb25cbiAgICAgIGlmICghbWluKVxuICAgICAgICBtaW4gPSB2ZXJzaW9uXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgIHNldC5wdXNoKFttaW4sIHByZXZdKVxuICAgICAgfVxuICAgICAgcHJldiA9IG51bGxcbiAgICAgIG1pbiA9IG51bGxcbiAgICB9XG4gIH1cbiAgaWYgKG1pbilcbiAgICBzZXQucHVzaChbbWluLCBudWxsXSlcblxuICBjb25zdCByYW5nZXMgPSBbXVxuICBmb3IgKGNvbnN0IFttaW4sIG1heF0gb2Ygc2V0KSB7XG4gICAgaWYgKG1pbiA9PT0gbWF4KVxuICAgICAgcmFuZ2VzLnB1c2gobWluKVxuICAgIGVsc2UgaWYgKCFtYXggJiYgbWluID09PSB2WzBdKVxuICAgICAgcmFuZ2VzLnB1c2goJyonKVxuICAgIGVsc2UgaWYgKCFtYXgpXG4gICAgICByYW5nZXMucHVzaChgPj0ke21pbn1gKVxuICAgIGVsc2UgaWYgKG1pbiA9PT0gdlswXSlcbiAgICAgIHJhbmdlcy5wdXNoKGA8PSR7bWF4fWApXG4gICAgZWxzZVxuICAgICAgcmFuZ2VzLnB1c2goYCR7bWlufSAtICR7bWF4fWApXG4gIH1cbiAgY29uc3Qgc2ltcGxpZmllZCA9IHJhbmdlcy5qb2luKCcgfHwgJylcbiAgY29uc3Qgb3JpZ2luYWwgPSB0eXBlb2YgcmFuZ2UucmF3ID09PSAnc3RyaW5nJyA/IHJhbmdlLnJhdyA6IFN0cmluZyhyYW5nZSlcbiAgcmV0dXJuIHNpbXBsaWZpZWQubGVuZ3RoIDwgb3JpZ2luYWwubGVuZ3RoID8gc2ltcGxpZmllZCA6IHJhbmdlXG59XG4iLCAiY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlLmpzJylcbmNvbnN0IHsgQU5ZIH0gPSByZXF1aXJlKCcuLi9jbGFzc2VzL2NvbXBhcmF0b3IuanMnKVxuY29uc3Qgc2F0aXNmaWVzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL3NhdGlzZmllcy5qcycpXG5jb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2NvbXBhcmUuanMnKVxuXG4vLyBDb21wbGV4IHJhbmdlIGByMSB8fCByMiB8fCAuLi5gIGlzIGEgc3Vic2V0IG9mIGBSMSB8fCBSMiB8fCAuLi5gIGlmZjpcbi8vIC0gRXZlcnkgc2ltcGxlIHJhbmdlIGByMSwgcjIsIC4uLmAgaXMgYSBzdWJzZXQgb2Ygc29tZSBgUjEsIFIyLCAuLi5gXG4vL1xuLy8gU2ltcGxlIHJhbmdlIGBjMSBjMiAuLi5gIGlzIGEgc3Vic2V0IG9mIHNpbXBsZSByYW5nZSBgQzEgQzIgLi4uYCBpZmY6XG4vLyAtIElmIGMgaXMgb25seSB0aGUgQU5ZIGNvbXBhcmF0b3Jcbi8vICAgLSBJZiBDIGlzIG9ubHkgdGhlIEFOWSBjb21wYXJhdG9yLCByZXR1cm4gdHJ1ZVxuLy8gICAtIEVsc2UgcmV0dXJuIGZhbHNlXG4vLyAtIExldCBFUSBiZSB0aGUgc2V0IG9mID0gY29tcGFyYXRvcnMgaW4gY1xuLy8gLSBJZiBFUSBpcyBtb3JlIHRoYW4gb25lLCByZXR1cm4gdHJ1ZSAobnVsbCBzZXQpXG4vLyAtIExldCBHVCBiZSB0aGUgaGlnaGVzdCA+IG9yID49IGNvbXBhcmF0b3IgaW4gY1xuLy8gLSBMZXQgTFQgYmUgdGhlIGxvd2VzdCA8IG9yIDw9IGNvbXBhcmF0b3IgaW4gY1xuLy8gLSBJZiBHVCBhbmQgTFQsIGFuZCBHVC5zZW12ZXIgPiBMVC5zZW12ZXIsIHJldHVybiB0cnVlIChudWxsIHNldClcbi8vIC0gSWYgRVFcbi8vICAgLSBJZiBHVCwgYW5kIEVRIGRvZXMgbm90IHNhdGlzZnkgR1QsIHJldHVybiB0cnVlIChudWxsIHNldClcbi8vICAgLSBJZiBMVCwgYW5kIEVRIGRvZXMgbm90IHNhdGlzZnkgTFQsIHJldHVybiB0cnVlIChudWxsIHNldClcbi8vICAgLSBJZiBFUSBzYXRpc2ZpZXMgZXZlcnkgQywgcmV0dXJuIHRydWVcbi8vICAgLSBFbHNlIHJldHVybiBmYWxzZVxuLy8gLSBJZiBHVFxuLy8gICAtIElmIEdULnNlbXZlciBpcyBsb3dlciB0aGFuIGFueSA+IG9yID49IGNvbXAgaW4gQywgcmV0dXJuIGZhbHNlXG4vLyAgIC0gSWYgR1QgaXMgPj0sIGFuZCBHVC5zZW12ZXIgZG9lcyBub3Qgc2F0aXNmeSBldmVyeSBDLCByZXR1cm4gZmFsc2Vcbi8vIC0gSWYgTFRcbi8vICAgLSBJZiBMVC5zZW12ZXIgaXMgZ3JlYXRlciB0aGFuIGFueSA8IG9yIDw9IGNvbXAgaW4gQywgcmV0dXJuIGZhbHNlXG4vLyAgIC0gSWYgTFQgaXMgPD0sIGFuZCBMVC5zZW12ZXIgZG9lcyBub3Qgc2F0aXNmeSBldmVyeSBDLCByZXR1cm4gZmFsc2Vcbi8vIC0gSWYgYW55IEMgaXMgYSA9IHJhbmdlLCBhbmQgR1Qgb3IgTFQgYXJlIHNldCwgcmV0dXJuIGZhbHNlXG4vLyAtIEVsc2UgcmV0dXJuIHRydWVcblxuY29uc3Qgc3Vic2V0ID0gKHN1YiwgZG9tLCBvcHRpb25zKSA9PiB7XG4gIGlmIChzdWIgPT09IGRvbSlcbiAgICByZXR1cm4gdHJ1ZVxuXG4gIHN1YiA9IG5ldyBSYW5nZShzdWIsIG9wdGlvbnMpXG4gIGRvbSA9IG5ldyBSYW5nZShkb20sIG9wdGlvbnMpXG4gIGxldCBzYXdOb25OdWxsID0gZmFsc2VcblxuICBPVVRFUjogZm9yIChjb25zdCBzaW1wbGVTdWIgb2Ygc3ViLnNldCkge1xuICAgIGZvciAoY29uc3Qgc2ltcGxlRG9tIG9mIGRvbS5zZXQpIHtcbiAgICAgIGNvbnN0IGlzU3ViID0gc2ltcGxlU3Vic2V0KHNpbXBsZVN1Yiwgc2ltcGxlRG9tLCBvcHRpb25zKVxuICAgICAgc2F3Tm9uTnVsbCA9IHNhd05vbk51bGwgfHwgaXNTdWIgIT09IG51bGxcbiAgICAgIGlmIChpc1N1YilcbiAgICAgICAgY29udGludWUgT1VURVJcbiAgICB9XG4gICAgLy8gdGhlIG51bGwgc2V0IGlzIGEgc3Vic2V0IG9mIGV2ZXJ5dGhpbmcsIGJ1dCBudWxsIHNpbXBsZSByYW5nZXMgaW5cbiAgICAvLyBhIGNvbXBsZXggcmFuZ2Ugc2hvdWxkIGJlIGlnbm9yZWQuICBzbyBpZiB3ZSBzYXcgYSBub24tbnVsbCByYW5nZSxcbiAgICAvLyB0aGVuIHdlIGtub3cgdGhpcyBpc24ndCBhIHN1YnNldCwgYnV0IGlmIEVWRVJZIHNpbXBsZSByYW5nZSB3YXMgbnVsbCxcbiAgICAvLyB0aGVuIGl0IGlzIGEgc3Vic2V0LlxuICAgIGlmIChzYXdOb25OdWxsKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuY29uc3Qgc2ltcGxlU3Vic2V0ID0gKHN1YiwgZG9tLCBvcHRpb25zKSA9PiB7XG4gIGlmIChzdWIgPT09IGRvbSlcbiAgICByZXR1cm4gdHJ1ZVxuXG4gIGlmIChzdWIubGVuZ3RoID09PSAxICYmIHN1YlswXS5zZW12ZXIgPT09IEFOWSlcbiAgICByZXR1cm4gZG9tLmxlbmd0aCA9PT0gMSAmJiBkb21bMF0uc2VtdmVyID09PSBBTllcblxuICBjb25zdCBlcVNldCA9IG5ldyBTZXQoKVxuICBsZXQgZ3QsIGx0XG4gIGZvciAoY29uc3QgYyBvZiBzdWIpIHtcbiAgICBpZiAoYy5vcGVyYXRvciA9PT0gJz4nIHx8IGMub3BlcmF0b3IgPT09ICc+PScpXG4gICAgICBndCA9IGhpZ2hlckdUKGd0LCBjLCBvcHRpb25zKVxuICAgIGVsc2UgaWYgKGMub3BlcmF0b3IgPT09ICc8JyB8fCBjLm9wZXJhdG9yID09PSAnPD0nKVxuICAgICAgbHQgPSBsb3dlckxUKGx0LCBjLCBvcHRpb25zKVxuICAgIGVsc2VcbiAgICAgIGVxU2V0LmFkZChjLnNlbXZlcilcbiAgfVxuXG4gIGlmIChlcVNldC5zaXplID4gMSlcbiAgICByZXR1cm4gbnVsbFxuXG4gIGxldCBndGx0Q29tcFxuICBpZiAoZ3QgJiYgbHQpIHtcbiAgICBndGx0Q29tcCA9IGNvbXBhcmUoZ3Quc2VtdmVyLCBsdC5zZW12ZXIsIG9wdGlvbnMpXG4gICAgaWYgKGd0bHRDb21wID4gMClcbiAgICAgIHJldHVybiBudWxsXG4gICAgZWxzZSBpZiAoZ3RsdENvbXAgPT09IDAgJiYgKGd0Lm9wZXJhdG9yICE9PSAnPj0nIHx8IGx0Lm9wZXJhdG9yICE9PSAnPD0nKSlcbiAgICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvLyB3aWxsIGl0ZXJhdGUgb25lIG9yIHplcm8gdGltZXNcbiAgZm9yIChjb25zdCBlcSBvZiBlcVNldCkge1xuICAgIGlmIChndCAmJiAhc2F0aXNmaWVzKGVxLCBTdHJpbmcoZ3QpLCBvcHRpb25zKSlcbiAgICAgIHJldHVybiBudWxsXG5cbiAgICBpZiAobHQgJiYgIXNhdGlzZmllcyhlcSwgU3RyaW5nKGx0KSwgb3B0aW9ucykpXG4gICAgICByZXR1cm4gbnVsbFxuXG4gICAgZm9yIChjb25zdCBjIG9mIGRvbSkge1xuICAgICAgaWYgKCFzYXRpc2ZpZXMoZXEsIFN0cmluZyhjKSwgb3B0aW9ucykpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBsZXQgaGlnaGVyLCBsb3dlclxuICBsZXQgaGFzRG9tTFQsIGhhc0RvbUdUXG4gIGZvciAoY29uc3QgYyBvZiBkb20pIHtcbiAgICBoYXNEb21HVCA9IGhhc0RvbUdUIHx8IGMub3BlcmF0b3IgPT09ICc+JyB8fCBjLm9wZXJhdG9yID09PSAnPj0nXG4gICAgaGFzRG9tTFQgPSBoYXNEb21MVCB8fCBjLm9wZXJhdG9yID09PSAnPCcgfHwgYy5vcGVyYXRvciA9PT0gJzw9J1xuICAgIGlmIChndCkge1xuICAgICAgaWYgKGMub3BlcmF0b3IgPT09ICc+JyB8fCBjLm9wZXJhdG9yID09PSAnPj0nKSB7XG4gICAgICAgIGhpZ2hlciA9IGhpZ2hlckdUKGd0LCBjLCBvcHRpb25zKVxuICAgICAgICBpZiAoaGlnaGVyID09PSBjICYmIGhpZ2hlciAhPT0gZ3QpXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2UgaWYgKGd0Lm9wZXJhdG9yID09PSAnPj0nICYmICFzYXRpc2ZpZXMoZ3Quc2VtdmVyLCBTdHJpbmcoYyksIG9wdGlvbnMpKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgaWYgKGx0KSB7XG4gICAgICBpZiAoYy5vcGVyYXRvciA9PT0gJzwnIHx8IGMub3BlcmF0b3IgPT09ICc8PScpIHtcbiAgICAgICAgbG93ZXIgPSBsb3dlckxUKGx0LCBjLCBvcHRpb25zKVxuICAgICAgICBpZiAobG93ZXIgPT09IGMgJiYgbG93ZXIgIT09IGx0KVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSBlbHNlIGlmIChsdC5vcGVyYXRvciA9PT0gJzw9JyAmJiAhc2F0aXNmaWVzKGx0LnNlbXZlciwgU3RyaW5nKGMpLCBvcHRpb25zKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmICghYy5vcGVyYXRvciAmJiAobHQgfHwgZ3QpICYmIGd0bHRDb21wICE9PSAwKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBpZiB0aGVyZSB3YXMgYSA8IG9yID4sIGFuZCBub3RoaW5nIGluIHRoZSBkb20sIHRoZW4gbXVzdCBiZSBmYWxzZVxuICAvLyBVTkxFU1MgaXQgd2FzIGxpbWl0ZWQgYnkgYW5vdGhlciByYW5nZSBpbiB0aGUgb3RoZXIgZGlyZWN0aW9uLlxuICAvLyBFZywgPjEuMC4wIDwxLjAuMSBpcyBzdGlsbCBhIHN1YnNldCBvZiA8Mi4wLjBcbiAgaWYgKGd0ICYmIGhhc0RvbUxUICYmICFsdCAmJiBndGx0Q29tcCAhPT0gMClcbiAgICByZXR1cm4gZmFsc2VcblxuICBpZiAobHQgJiYgaGFzRG9tR1QgJiYgIWd0ICYmIGd0bHRDb21wICE9PSAwKVxuICAgIHJldHVybiBmYWxzZVxuXG4gIHJldHVybiB0cnVlXG59XG5cbi8vID49MS4yLjMgaXMgbG93ZXIgdGhhbiA+MS4yLjNcbmNvbnN0IGhpZ2hlckdUID0gKGEsIGIsIG9wdGlvbnMpID0+IHtcbiAgaWYgKCFhKVxuICAgIHJldHVybiBiXG4gIGNvbnN0IGNvbXAgPSBjb21wYXJlKGEuc2VtdmVyLCBiLnNlbXZlciwgb3B0aW9ucylcbiAgcmV0dXJuIGNvbXAgPiAwID8gYVxuICAgIDogY29tcCA8IDAgPyBiXG4gICAgOiBiLm9wZXJhdG9yID09PSAnPicgJiYgYS5vcGVyYXRvciA9PT0gJz49JyA/IGJcbiAgICA6IGFcbn1cblxuLy8gPD0xLjIuMyBpcyBoaWdoZXIgdGhhbiA8MS4yLjNcbmNvbnN0IGxvd2VyTFQgPSAoYSwgYiwgb3B0aW9ucykgPT4ge1xuICBpZiAoIWEpXG4gICAgcmV0dXJuIGJcbiAgY29uc3QgY29tcCA9IGNvbXBhcmUoYS5zZW12ZXIsIGIuc2VtdmVyLCBvcHRpb25zKVxuICByZXR1cm4gY29tcCA8IDAgPyBhXG4gICAgOiBjb21wID4gMCA/IGJcbiAgICA6IGIub3BlcmF0b3IgPT09ICc8JyAmJiBhLm9wZXJhdG9yID09PSAnPD0nID8gYlxuICAgIDogYVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN1YnNldFxuIiwgIi8vIGp1c3QgcHJlLWxvYWQgYWxsIHRoZSBzdHVmZiB0aGF0IGluZGV4LmpzIGxhemlseSBleHBvcnRzXG5jb25zdCBpbnRlcm5hbFJlID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9yZScpXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmU6IGludGVybmFsUmUucmUsXG4gIHNyYzogaW50ZXJuYWxSZS5zcmMsXG4gIHRva2VuczogaW50ZXJuYWxSZS50LFxuICBTRU1WRVJfU1BFQ19WRVJTSU9OOiByZXF1aXJlKCcuL2ludGVybmFsL2NvbnN0YW50cycpLlNFTVZFUl9TUEVDX1ZFUlNJT04sXG4gIFNlbVZlcjogcmVxdWlyZSgnLi9jbGFzc2VzL3NlbXZlcicpLFxuICBjb21wYXJlSWRlbnRpZmllcnM6IHJlcXVpcmUoJy4vaW50ZXJuYWwvaWRlbnRpZmllcnMnKS5jb21wYXJlSWRlbnRpZmllcnMsXG4gIHJjb21wYXJlSWRlbnRpZmllcnM6IHJlcXVpcmUoJy4vaW50ZXJuYWwvaWRlbnRpZmllcnMnKS5yY29tcGFyZUlkZW50aWZpZXJzLFxuICBwYXJzZTogcmVxdWlyZSgnLi9mdW5jdGlvbnMvcGFyc2UnKSxcbiAgdmFsaWQ6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3ZhbGlkJyksXG4gIGNsZWFuOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jbGVhbicpLFxuICBpbmM6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2luYycpLFxuICBkaWZmOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9kaWZmJyksXG4gIG1ham9yOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9tYWpvcicpLFxuICBtaW5vcjogcmVxdWlyZSgnLi9mdW5jdGlvbnMvbWlub3InKSxcbiAgcGF0Y2g6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3BhdGNoJyksXG4gIHByZXJlbGVhc2U6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3ByZXJlbGVhc2UnKSxcbiAgY29tcGFyZTogcmVxdWlyZSgnLi9mdW5jdGlvbnMvY29tcGFyZScpLFxuICByY29tcGFyZTogcmVxdWlyZSgnLi9mdW5jdGlvbnMvcmNvbXBhcmUnKSxcbiAgY29tcGFyZUxvb3NlOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jb21wYXJlLWxvb3NlJyksXG4gIGNvbXBhcmVCdWlsZDogcmVxdWlyZSgnLi9mdW5jdGlvbnMvY29tcGFyZS1idWlsZCcpLFxuICBzb3J0OiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9zb3J0JyksXG4gIHJzb3J0OiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9yc29ydCcpLFxuICBndDogcmVxdWlyZSgnLi9mdW5jdGlvbnMvZ3QnKSxcbiAgbHQ6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2x0JyksXG4gIGVxOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9lcScpLFxuICBuZXE6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL25lcScpLFxuICBndGU6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2d0ZScpLFxuICBsdGU6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2x0ZScpLFxuICBjbXA6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NtcCcpLFxuICBjb2VyY2U6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvZXJjZScpLFxuICBDb21wYXJhdG9yOiByZXF1aXJlKCcuL2NsYXNzZXMvY29tcGFyYXRvcicpLFxuICBSYW5nZTogcmVxdWlyZSgnLi9jbGFzc2VzL3JhbmdlJyksXG4gIHNhdGlzZmllczogcmVxdWlyZSgnLi9mdW5jdGlvbnMvc2F0aXNmaWVzJyksXG4gIHRvQ29tcGFyYXRvcnM6IHJlcXVpcmUoJy4vcmFuZ2VzL3RvLWNvbXBhcmF0b3JzJyksXG4gIG1heFNhdGlzZnlpbmc6IHJlcXVpcmUoJy4vcmFuZ2VzL21heC1zYXRpc2Z5aW5nJyksXG4gIG1pblNhdGlzZnlpbmc6IHJlcXVpcmUoJy4vcmFuZ2VzL21pbi1zYXRpc2Z5aW5nJyksXG4gIG1pblZlcnNpb246IHJlcXVpcmUoJy4vcmFuZ2VzL21pbi12ZXJzaW9uJyksXG4gIHZhbGlkUmFuZ2U6IHJlcXVpcmUoJy4vcmFuZ2VzL3ZhbGlkJyksXG4gIG91dHNpZGU6IHJlcXVpcmUoJy4vcmFuZ2VzL291dHNpZGUnKSxcbiAgZ3RyOiByZXF1aXJlKCcuL3Jhbmdlcy9ndHInKSxcbiAgbHRyOiByZXF1aXJlKCcuL3Jhbmdlcy9sdHInKSxcbiAgaW50ZXJzZWN0czogcmVxdWlyZSgnLi9yYW5nZXMvaW50ZXJzZWN0cycpLFxuICBzaW1wbGlmeVJhbmdlOiByZXF1aXJlKCcuL3Jhbmdlcy9zaW1wbGlmeScpLFxuICBzdWJzZXQ6IHJlcXVpcmUoJy4vcmFuZ2VzL3N1YnNldCcpLFxufVxuIiwgImltcG9ydCBJRExFX1dPUktFUl9VUkwgZnJvbSBcInNyYy9fZGV2Xy9JZGxlV29ya2VyLmpzdXJsXCI7XG5cbmlmICh0eXBlb2YgU2hhcmVkV29ya2VyICE9PSBcInVuZGVmaW5lZFwiICYmICFnbG9iYWxUaGlzW1wiSURMRV9XT1JLRVJcIl0pIHtcbiAgLy8gZ2xvYmFsVGhpc1tcIklETEVfV09SS0VSXCJdID0gbmV3IFNoYXJlZFdvcmtlcihJRExFX1dPUktFUl9VUkwsIHtcbiAgLy8gICB0eXBlOiBcIm1vZHVsZVwiLFxuICAvLyAgIG5hbWU6IFwiSWRsZVdvcmtlclwiLFxuICAvLyB9KTtcbiAgLy8gY29uc29sZS5sb2coXCJMYXVuY2ggaWRsZSB3b3JrZXJcIik7XG59XG4iLCAiY29uc3QgaW5zdGFuY2VPZkFueSA9IChvYmplY3QsIGNvbnN0cnVjdG9ycykgPT4gY29uc3RydWN0b3JzLnNvbWUoKGMpID0+IG9iamVjdCBpbnN0YW5jZW9mIGMpO1xuXG5sZXQgaWRiUHJveHlhYmxlVHlwZXM7XG5sZXQgY3Vyc29yQWR2YW5jZU1ldGhvZHM7XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldElkYlByb3h5YWJsZVR5cGVzKCkge1xuICAgIHJldHVybiAoaWRiUHJveHlhYmxlVHlwZXMgfHxcbiAgICAgICAgKGlkYlByb3h5YWJsZVR5cGVzID0gW1xuICAgICAgICAgICAgSURCRGF0YWJhc2UsXG4gICAgICAgICAgICBJREJPYmplY3RTdG9yZSxcbiAgICAgICAgICAgIElEQkluZGV4LFxuICAgICAgICAgICAgSURCQ3Vyc29yLFxuICAgICAgICAgICAgSURCVHJhbnNhY3Rpb24sXG4gICAgICAgIF0pKTtcbn1cbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIChjdXJzb3JBZHZhbmNlTWV0aG9kcyB8fFxuICAgICAgICAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgPSBbXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmFkdmFuY2UsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZVByaW1hcnlLZXksXG4gICAgICAgIF0pKTtcbn1cbmNvbnN0IGN1cnNvclJlcXVlc3RNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHdyYXAocmVxdWVzdC5yZXN1bHQpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgfSk7XG4gICAgcHJvbWlzZVxuICAgICAgICAudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgLy8gU2luY2UgY3Vyc29yaW5nIHJldXNlcyB0aGUgSURCUmVxdWVzdCAoKnNpZ2gqKSwgd2UgY2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbFxuICAgICAgICAvLyAoc2VlIHdyYXBGdW5jdGlvbikuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQkN1cnNvcikge1xuICAgICAgICAgICAgY3Vyc29yUmVxdWVzdE1hcC5zZXQodmFsdWUsIHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhdGNoaW5nIHRvIGF2b2lkIFwiVW5jYXVnaHQgUHJvbWlzZSBleGNlcHRpb25zXCJcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXG4gICAgLy8gaXMgYmVjYXVzZSB3ZSBjcmVhdGUgbWFueSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QuXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm9taXNlLCByZXF1ZXN0KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih0eCkge1xuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgIGlmICh0cmFuc2FjdGlvbkRvbmVNYXAuaGFzKHR4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHR4LmVycm9yIHx8IG5ldyBET01FeGNlcHRpb24oJ0Fib3J0RXJyb3InLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICB0cmFuc2FjdGlvbkRvbmVNYXAuc2V0KHR4LCBkb25lKTtcbn1cbmxldCBpZGJQcm94eVRyYXBzID0ge1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnZG9uZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRG9uZU1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIFBvbHlmaWxsIGZvciBvYmplY3RTdG9yZU5hbWVzIGJlY2F1c2Ugb2YgRWRnZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb2JqZWN0U3RvcmVOYW1lcycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lm9iamVjdFN0b3JlTmFtZXMgfHwgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSB0eC5zdG9yZSByZXR1cm4gdGhlIG9ubHkgc3RvcmUgaW4gdGhlIHRyYW5zYWN0aW9uLCBvciB1bmRlZmluZWQgaWYgdGhlcmUgYXJlIG1hbnkuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0b3JlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzFdXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogcmVjZWl2ZXIub2JqZWN0U3RvcmUocmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSB0cmFuc2Zvcm0gd2hhdGV2ZXIgd2UgZ2V0IGJhY2suXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJlxuICAgICAgICAgICAgKHByb3AgPT09ICdkb25lJyB8fCBwcm9wID09PSAnc3RvcmUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0O1xuICAgIH0sXG59O1xuZnVuY3Rpb24gcmVwbGFjZVRyYXBzKGNhbGxiYWNrKSB7XG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xufVxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxuICAgIC8vIG9ubHkgY3JlYXRlIG9uZSBuZXcgZnVuYyBwZXIgZnVuYy5cbiAgICAvLyBFZGdlIGRvZXNuJ3Qgc3VwcG9ydCBvYmplY3RTdG9yZU5hbWVzIChib29vKSwgc28gd2UgcG9seWZpbGwgaXQgaGVyZS5cbiAgICBpZiAoZnVuYyA9PT0gSURCRGF0YWJhc2UucHJvdG90eXBlLnRyYW5zYWN0aW9uICYmXG4gICAgICAgICEoJ29iamVjdFN0b3JlTmFtZXMnIGluIElEQlRyYW5zYWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZU5hbWVzLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IGZ1bmMuY2FsbCh1bndyYXAodGhpcyksIHN0b3JlTmFtZXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLnNldCh0eCwgc3RvcmVOYW1lcy5zb3J0ID8gc3RvcmVOYW1lcy5zb3J0KCkgOiBbc3RvcmVOYW1lc10pO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAodHgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBDdXJzb3IgbWV0aG9kcyBhcmUgc3BlY2lhbCwgYXMgdGhlIGJlaGF2aW91ciBpcyBhIGxpdHRsZSBtb3JlIGRpZmZlcmVudCB0byBzdGFuZGFyZCBJREIuIEluXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcbiAgICAvLyBjdXJzb3IuIEl0J3Mga2luZGEgbGlrZSBhIHByb21pc2UgdGhhdCBjYW4gcmVzb2x2ZSB3aXRoIG1hbnkgdmFsdWVzLiBUaGF0IGRvZXNuJ3QgbWFrZSBzZW5zZVxuICAgIC8vIHdpdGggcmVhbCBwcm9taXNlcywgc28gZWFjaCBhZHZhbmNlIG1ldGhvZHMgcmV0dXJucyBhIG5ldyBwcm9taXNlIGZvciB0aGUgY3Vyc29yIG9iamVjdCwgb3JcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgaWYgKGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkuaW5jbHVkZXMoZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICAgICAgZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAoY3Vyc29yUmVxdWVzdE1hcC5nZXQodGhpcykpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHdyYXBGdW5jdGlvbih2YWx1ZSk7XG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcbiAgICAvLyB3aGljaCBpcyBsYXRlciByZXR1cm5lZCBmb3IgdHJhbnNhY3Rpb24uZG9uZSAoc2VlIGlkYk9iamVjdEhhbmRsZXIpLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKVxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xuICAgIGlmIChpbnN0YW5jZU9mQW55KHZhbHVlLCBnZXRJZGJQcm94eWFibGVUeXBlcygpKSlcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh2YWx1ZSwgaWRiUHJveHlUcmFwcyk7XG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gICAgLy8gV2Ugc29tZXRpbWVzIGdlbmVyYXRlIG11bHRpcGxlIHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdCAoZWcgd2hlbiBjdXJzb3JpbmcpLCBiZWNhdXNlXG4gICAgLy8gSURCIGlzIHdlaXJkIGFuZCBhIHNpbmdsZSBJREJSZXF1ZXN0IGNhbiB5aWVsZCBtYW55IHJlc3BvbnNlcywgc28gdGhlc2UgY2FuJ3QgYmUgY2FjaGVkLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHZhbHVlKTtcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHRyYW5zZm9ybWVkIHRoaXMgdmFsdWUgYmVmb3JlLCByZXVzZSB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cbiAgICBpZiAodHJhbnNmb3JtQ2FjaGUuaGFzKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcbiAgICAvLyBOb3QgYWxsIHR5cGVzIGFyZSB0cmFuc2Zvcm1lZC5cbiAgICAvLyBUaGVzZSBtYXkgYmUgcHJpbWl0aXZlIHR5cGVzLCBzbyB0aGV5IGNhbid0IGJlIFdlYWtNYXAga2V5cy5cbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRyYW5zZm9ybUNhY2hlLnNldCh2YWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KG5ld1ZhbHVlLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbn1cbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbmV4cG9ydCB7IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBhcyBhLCBpbnN0YW5jZU9mQW55IGFzIGksIHJlcGxhY2VUcmFwcyBhcyByLCB1bndyYXAgYXMgdSwgd3JhcCBhcyB3IH07XG4iLCAiaW1wb3J0IHsgdyBhcyB3cmFwLCByIGFzIHJlcGxhY2VUcmFwcyB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuZXhwb3J0IHsgdSBhcyB1bndyYXAsIHcgYXMgd3JhcCB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuXG4vKipcbiAqIE9wZW4gYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqIEBwYXJhbSB2ZXJzaW9uIFNjaGVtYSB2ZXJzaW9uLlxuICogQHBhcmFtIGNhbGxiYWNrcyBBZGRpdGlvbmFsIGNhbGxiYWNrcy5cbiAqL1xuZnVuY3Rpb24gb3BlbkRCKG5hbWUsIHZlcnNpb24sIHsgYmxvY2tlZCwgdXBncmFkZSwgYmxvY2tpbmcsIHRlcm1pbmF0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pO1xuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcbiAgICBpZiAodXBncmFkZSkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHVwZ3JhZGUod3JhcChyZXF1ZXN0LnJlc3VsdCksIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIHdyYXAocmVxdWVzdC50cmFuc2FjdGlvbikpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGJsb2NrZWQpXG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsICgpID0+IGJsb2NrZWQoKSk7XG4gICAgb3BlblByb21pc2VcbiAgICAgICAgLnRoZW4oKGRiKSA9PiB7XG4gICAgICAgIGlmICh0ZXJtaW5hdGVkKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB0ZXJtaW5hdGVkKCkpO1xuICAgICAgICBpZiAoYmxvY2tpbmcpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCd2ZXJzaW9uY2hhbmdlJywgKCkgPT4gYmxvY2tpbmcoKSk7XG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgcmV0dXJuIG9wZW5Qcm9taXNlO1xufVxuLyoqXG4gKiBEZWxldGUgYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqL1xuZnVuY3Rpb24gZGVsZXRlREIobmFtZSwgeyBibG9ja2VkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIuZGVsZXRlRGF0YWJhc2UobmFtZSk7XG4gICAgaWYgKGJsb2NrZWQpXG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsICgpID0+IGJsb2NrZWQoKSk7XG4gICAgcmV0dXJuIHdyYXAocmVxdWVzdCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xufVxuXG5jb25zdCByZWFkTWV0aG9kcyA9IFsnZ2V0JywgJ2dldEtleScsICdnZXRBbGwnLCAnZ2V0QWxsS2V5cycsICdjb3VudCddO1xuY29uc3Qgd3JpdGVNZXRob2RzID0gWydwdXQnLCAnYWRkJywgJ2RlbGV0ZScsICdjbGVhciddO1xuY29uc3QgY2FjaGVkTWV0aG9kcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHtcbiAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBJREJEYXRhYmFzZSAmJlxuICAgICAgICAhKHByb3AgaW4gdGFyZ2V0KSAmJlxuICAgICAgICB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApKVxuICAgICAgICByZXR1cm4gY2FjaGVkTWV0aG9kcy5nZXQocHJvcCk7XG4gICAgY29uc3QgdGFyZ2V0RnVuY05hbWUgPSBwcm9wLnJlcGxhY2UoL0Zyb21JbmRleCQvLCAnJyk7XG4gICAgY29uc3QgdXNlSW5kZXggPSBwcm9wICE9PSB0YXJnZXRGdW5jTmFtZTtcbiAgICBjb25zdCBpc1dyaXRlID0gd3JpdGVNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKTtcbiAgICBpZiAoXG4gICAgLy8gQmFpbCBpZiB0aGUgdGFyZ2V0IGRvZXNuJ3QgZXhpc3Qgb24gdGhlIHRhcmdldC4gRWcsIGdldEFsbCBpc24ndCBpbiBFZGdlLlxuICAgICEodGFyZ2V0RnVuY05hbWUgaW4gKHVzZUluZGV4ID8gSURCSW5kZXggOiBJREJPYmplY3RTdG9yZSkucHJvdG90eXBlKSB8fFxuICAgICAgICAhKGlzV3JpdGUgfHwgcmVhZE1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uIChzdG9yZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogdW5kZWZpbmVkIGd6aXBwcyBiZXR0ZXIsIGJ1dCBmYWlscyBpbiBFZGdlIDooXG4gICAgICAgIGNvbnN0IHR4ID0gdGhpcy50cmFuc2FjdGlvbihzdG9yZU5hbWUsIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6ICdyZWFkb25seScpO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gdHguc3RvcmU7XG4gICAgICAgIGlmICh1c2VJbmRleClcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5pbmRleChhcmdzLnNoaWZ0KCkpO1xuICAgICAgICAvLyBNdXN0IHJlamVjdCBpZiBvcCByZWplY3RzLlxuICAgICAgICAvLyBJZiBpdCdzIGEgd3JpdGUgb3BlcmF0aW9uLCBtdXN0IHJlamVjdCBpZiB0eC5kb25lIHJlamVjdHMuXG4gICAgICAgIC8vIE11c3QgcmVqZWN0IHdpdGggb3AgcmVqZWN0aW9uIGZpcnN0LlxuICAgICAgICAvLyBNdXN0IHJlc29sdmUgd2l0aCBvcCB2YWx1ZS5cbiAgICAgICAgLy8gTXVzdCBoYW5kbGUgYm90aCBwcm9taXNlcyAobm8gdW5oYW5kbGVkIHJlamVjdGlvbnMpXG4gICAgICAgIHJldHVybiAoYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGFyZ2V0W3RhcmdldEZ1bmNOYW1lXSguLi5hcmdzKSxcbiAgICAgICAgICAgIGlzV3JpdGUgJiYgdHguZG9uZSxcbiAgICAgICAgXSkpWzBdO1xuICAgIH07XG4gICAgY2FjaGVkTWV0aG9kcy5zZXQocHJvcCwgbWV0aG9kKTtcbiAgICByZXR1cm4gbWV0aG9kO1xufVxucmVwbGFjZVRyYXBzKChvbGRUcmFwcykgPT4gKHtcbiAgICAuLi5vbGRUcmFwcyxcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlciksXG4gICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiAhIWdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmhhcyh0YXJnZXQsIHByb3ApLFxufSkpO1xuXG5leHBvcnQgeyBkZWxldGVEQiwgb3BlbkRCIH07XG4iLCAiZXhwb3J0IGZ1bmN0aW9uIGdldFBhY2thZ2VJRCgpIHtcbiAgcmV0dXJuIGxvY2F0aW9uLm9yaWdpbi5zdWJzdHJpbmcoXG4gICAgbG9jYXRpb24ucHJvdG9jb2wubGVuZ3RoICsgXCIvL1wiLmxlbmd0aCxcbiAgICBsb2NhdGlvbi5vcmlnaW4uaW5kZXhPZihcIi5cIilcbiAgKTtcbn1cbiIsICJpbXBvcnQgTWltZSBmcm9tIFwibWltZS9saXRlXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBFcnJvckNvZGUgfSBmcm9tIFwic3JjL2xpYi9FcnJvckNvZGVcIjtcbmltcG9ydCB7IFBhY2thZ2VyRXJyb3IsIFBhY2thZ2VyUGVybWlzc2lvbkVycm9yIH0gZnJvbSBcInNyYy9saWIvRVNCdWlsZFBhY2thZ2VcIjtcbmltcG9ydCB7IFBhY2thZ2VKU09ORmlsZSB9IGZyb20gXCJzcmMvbGliL1BhY2thZ2VKU09OXCI7XG5pbXBvcnQge1xuICBGaWxlc3lzdGVtUm91dGVyLFxuICBSb3V0ZXJUeXBlLFxuICBTaW5nbGVQYWdlQXBwUm91dGVyLFxufSBmcm9tIFwic3JjL2xpYi9Sb3V0ZVwiO1xuaW1wb3J0IHsgTmF0aXZlRlMgfSBmcm9tIFwic3JjL2xpYi9yb3V0ZXIvZnMtbmF0aXZlXCI7XG5cbmNvbnN0IHBlcm1pc3Npb25Nb2RlID0geyBtb2RlOiBcInJlYWRcIiB9O1xuZXhwb3J0IGludGVyZmFjZSBTdG9yZWRQYWNrYWdlUmVjb3JkIHtcbiAgaWQ6IHN0cmluZztcbiAgbGFzdEJ1aWxkOiBEYXRlO1xuICBoYW5kbGU6IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGU7XG4gIHN0YXRpY0hhbmRsZTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZTtcbiAgcm91dGVyVHlwZTogUm91dGVyVHlwZTtcbn1cblxuZXhwb3J0IGNsYXNzIFN0b3JlZFBhY2thZ2Uge1xuICBpZDogc3RyaW5nO1xuICBsYXN0QnVpbGQ6IERhdGU7XG4gIGhhbmRsZTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZTtcbiAgc3RhdGljSGFuZGxlOiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlO1xuICBzdGF0aWM6IE5hdGl2ZUZTO1xuICByb290OiBOYXRpdmVGUztcbiAgcm91dGVyVHlwZTogUm91dGVyVHlwZSA9IFJvdXRlclR5cGUudW5rbm93bjtcbiAgcGtnOiBQYWNrYWdlSlNPTkZpbGU7XG4gIHJvdXRlcjogU2luZ2xlUGFnZUFwcFJvdXRlciB8IEZpbGVzeXN0ZW1Sb3V0ZXI7XG5cbiAgdG9SZWNvcmQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgbGFzdEJ1aWxkOiB0aGlzLmxhc3RCdWlsZCB8fCBudWxsLFxuICAgICAgaGFuZGxlOiB0aGlzLmhhbmRsZSxcbiAgICAgIHN0YXRpY0hhbmRsZTogdGhpcy5zdGF0aWNIYW5kbGUsXG4gICAgICByb3V0ZXJUeXBlOiB0aGlzLnJvdXRlclR5cGUsXG4gICAgfSBhcyBTdG9yZWRQYWNrYWdlUmVjb3JkO1xuICB9XG5cbiAgc3RhdGljIGZyb21SZWNvcmQocmVjb3JkOiBTdG9yZWRQYWNrYWdlUmVjb3JkKSB7XG4gICAgY29uc3Qgc3RvcmVkID0gbmV3IFN0b3JlZFBhY2thZ2UoKTtcbiAgICBPYmplY3QuYXNzaWduKHN0b3JlZCwgcmVjb3JkKTtcbiAgICBzdG9yZWQucm9vdCA9IHJlY29yZC5oYW5kbGUgPyBuZXcgTmF0aXZlRlMocmVjb3JkLmhhbmRsZSkgOiBudWxsO1xuICAgIHN0b3JlZC5zdGF0aWMgPSByZWNvcmQuc3RhdGljSGFuZGxlXG4gICAgICA/IG5ldyBOYXRpdmVGUyhyZWNvcmQuc3RhdGljSGFuZGxlKVxuICAgICAgOiBudWxsO1xuICAgIHJldHVybiBzdG9yZWQ7XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgZnJvbUpTT04ob3B0czogUGFydGlhbDxTdG9yZWRQYWNrYWdlPikge1xuICAgIGNvbnN0IHBrZyA9IG5ldyBTdG9yZWRQYWNrYWdlKCk7XG4gICAgT2JqZWN0LmFzc2lnbihwa2csIG9wdHMpO1xuICAgIHBrZy5yb290ID0gb3B0cy5oYW5kbGUgPyBuZXcgTmF0aXZlRlMob3B0cy5oYW5kbGUpIDogbnVsbDtcbiAgICBwa2cuc3RhdGljID0gb3B0cy5zdGF0aWNIYW5kbGUgPyBuZXcgTmF0aXZlRlMob3B0cy5zdGF0aWNIYW5kbGUpIDogbnVsbDtcbiAgICByZXR1cm4gcGtnO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZVN0YXRpY0hhbmRsZSgpIHtcbiAgICBpZiAoIXRoaXMucGtnLnJ1bj8ucm91dGVyKSByZXR1cm47XG5cbiAgICBjb25zdCBzdGF0aWNQYXRoID0gcGF0aC5leHRuYW1lKHRoaXMucGtnLnJ1bi5yb3V0ZXIpXG4gICAgICA/IHBhdGguam9pbih0aGlzLnBrZy5ydW4ucm91dGVyLCBcIi4uL1wiKVxuICAgICAgOiB0aGlzLnBrZy5ydW4ucm91dGVyO1xuICAgIHRoaXMuc3RhdGljSGFuZGxlID0gYXdhaXQgdGhpcy5yb290LnJlc29sdmVEaXJlY3RvcnlIYW5kbGUoXG4gICAgICBzdGF0aWNQYXRoLFxuICAgICAgdGhpcy5yb290LnJvb3RcbiAgICApO1xuICAgIHRoaXMuc3RhdGljID0gbmV3IE5hdGl2ZUZTKHRoaXMuc3RhdGljSGFuZGxlKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5sb2FkUGFja2FnZUpTT04oKTtcblxuICAgIGlmICghdGhpcy5zdGF0aWNIYW5kbGUgfHwgIXRoaXMuc3RhdGljKSB7XG4gICAgICBhd2FpdCB0aGlzLnJlc29sdmVTdGF0aWNIYW5kbGUoKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvYWRSb3V0ZXIoKTtcbiAgfVxuXG4gIGxvYWRSb3V0ZXIoKSB7XG4gICAgaWYgKHBhdGguZXh0bmFtZSh0aGlzLnBrZy5ydW4/LnJvdXRlcikgPT09IFwiLmh0bWxcIikge1xuICAgICAgdGhpcy5yb3V0ZXJUeXBlID0gUm91dGVyVHlwZS5zcGE7XG4gICAgICB0aGlzLnJvdXRlciA9IG5ldyBTaW5nbGVQYWdlQXBwUm91dGVyKHRoaXMucm9vdCwgdGhpcy5zdGF0aWMpO1xuICAgICAgdGhpcy5yb3V0ZXIuZGVzdGluYXRpb24gPSBwYXRoLmJhc2VuYW1lKHRoaXMucGtnLnJ1bi5yb3V0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvdXRlclR5cGUgPSBSb3V0ZXJUeXBlLmZpbGVzeXN0ZW07XG4gICAgICB0aGlzLnJvdXRlciA9IG5ldyBGaWxlc3lzdGVtUm91dGVyKHRoaXMucm9vdCwgdGhpcy5zdGF0aWMpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxvYWRQYWNrYWdlSlNPTigpIHtcbiAgICBjb25zdCBkaXIgPSB0aGlzLnJvb3Q7XG5cbiAgICBpZiAoKGF3YWl0IGRpci5yb290LnF1ZXJ5UGVybWlzc2lvbihwZXJtaXNzaW9uTW9kZSkpICE9PSBcImdyYW50ZWRcIikge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgUGFja2FnZXJQZXJtaXNzaW9uRXJyb3IoRXJyb3JDb2RlLnJlcXVpcmVQZXJtaXNzaW9uKTtcbiAgICAgIGVycm9yLmRpcmVjdG9yeU5hbWUgPSBkaXIucm9vdC5uYW1lO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgbGV0IHBhY2thZ2VKU09ORmlsZUhhbmRsZTogRmlsZVN5c3RlbUZpbGVIYW5kbGU7XG4gICAgdHJ5IHtcbiAgICAgIHBhY2thZ2VKU09ORmlsZUhhbmRsZSA9IGF3YWl0IGRpci5maWxlSGFuZGxlRm9yKFwicGFja2FnZS5qc29uXCIpO1xuICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgdGhyb3cgUGFja2FnZXJFcnJvci53aXRoKEVycm9yQ29kZS5lcnJvckZldGNoaW5nUGFja2FnZUpTT04sIGV4Y2VwdGlvbik7XG4gICAgfVxuXG4gICAgdGhpcy5wa2cgPSBhd2FpdCBQYWNrYWdlSlNPTkZpbGUuZnJvbUhhbmRsZShwYWNrYWdlSlNPTkZpbGVIYW5kbGUpO1xuICB9XG5cbiAgbG9hZENvbmZpZygpIHt9XG5cbiAgbm9ybWFsaXplVVJMKHVybDogc3RyaW5nKSB7XG4gICAgaWYgKCF1cmwuc3RhcnRzV2l0aChcIi9cIikgfHwgIXBhdGguaXNBYnNvbHV0ZSh1cmwpKSB7XG4gICAgICByZXR1cm4gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKFwiL1wiICsgdXJsKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGgubm9ybWFsaXplKHVybCk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlU3RhdGljRmlsZSh1cmw6IHN0cmluZykge1xuICAgIGxldCBmaWxlOiBGaWxlO1xuICAgIGZpbGUgPSBhd2FpdCB0aGlzLnN0YXRpYy5uYXRpdmVGaWxlKHVybCk7XG4gICAgY29uc29sZS5sb2codXJsKTtcblxuICAgIGlmICghZmlsZSkge1xuICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG5cbiAgICAgIGhlYWRlcnMuc2V0KFwiQ2FjaGUtQ29udHJvbFwiLCBcInByaXZhdGVcIik7XG4gICAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcInRleHQvcGxhaW5cIik7XG5cbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UobmV3IEJsb2IoW2A0MDQgTm90IEZvdW5kIFx1MjAxMyAke3VybH1cXG5gXSksIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBNaW1lLmdldFR5cGUoZmlsZS5uYW1lKS50b1N0cmluZygpKTtcbiAgICBpZiAodHlwZW9mIGZpbGUuc2l6ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1MZW5ndGhcIiwgZmlsZS5zaXplLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoZmlsZSwgeyBoZWFkZXJzOiBoZWFkZXJzLCBzdGF0dXM6IDIwMCB9KTtcbiAgfVxufVxuIiwgImV4cG9ydCBlbnVtIEVycm9yQ29kZSB7XG4gIGludmFsaWRQYWNrYWdlSlNPTixcbiAgZW1wdHlEaXIsXG4gIG1pc3NpbmdFbnRyeUZpbGVzLFxuICBtaXNzaW5nLFxuICBnZW5lcmljRXJyb3IsXG4gIGVycm9yRmV0Y2hpbmdQYWNrYWdlSlNPTixcbiAgZXJyb3JHZXR0aW5nUGFja2FnZUpTT05GaWxlLFxuICBwYXJzaW5nUGFja2FnZUpTT04sXG4gIHJlcXVpcmVQZXJtaXNzaW9uLFxuICBub0VudHJ5UG9pbnRzLFxuICByZXNvbHZlRmlsZSxcbiAgZmlsZU5vdEZvdW5kLFxuICBmaWxlQWNjZXNzRGVuaWVkLFxuICBidWlsZEZhaWxlZCxcbiAgaW52YWxpZFRTQ29uZmlnLFxuICByb3V0ZU5vdEZvdW5kLFxuICBuZWVkc0NvbmZpZyxcbiAgZmFpbGVkVG9SZXNvbHZlTlBNUGFja2FnZSxcbn1cbiIsICJpbXBvcnQgeyBidWlsZCB9IGZyb20gXCJlc2J1aWxkLXdhc21cIjtcbmltcG9ydCB0eXBlIHtcbiAgTG9jYXRpb24sXG4gIFBsdWdpbixcbiAgQnVpbGRSZXN1bHQsXG4gIE9uTG9hZEFyZ3MsXG4gIE9uTG9hZFJlc3VsdCxcbiAgT25SZXNvbHZlQXJncyxcbiAgT25SZXNvbHZlUmVzdWx0LFxufSBmcm9tIFwiZXNidWlsZC13YXNtXCI7XG5pbXBvcnQgTWltZSBmcm9tIFwibWltZS9saXRlXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aC1icm93c2VyaWZ5XCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUhUTUwgfSBmcm9tIFwic3JjL2h0bWxHZW5lcmF0b3JcIjtcbmltcG9ydCB7IERhdGFiYXNlIH0gZnJvbSBcInNyYy9saWIvRGF0YWJhc2VcIjtcbmltcG9ydCB7IFBhY2thZ2VKU09OIH0gZnJvbSBcInNyYy9saWIvUGFja2FnZUpTT05cIjtcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSBcInNyYy9saWIvUm91dGVcIjtcbmltcG9ydCB7IE5hdGl2ZUZTIH0gZnJvbSBcInNyYy9saWIvcm91dGVyL2ZzLW5hdGl2ZVwiO1xuaW1wb3J0IHR5cGUgeyBPdXRwdXRQYXJhbXMgfSBmcm9tIFwic3JjL2xpYi9ycGNcIjtcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gXCIuL0Vycm9yQ29kZVwiO1xuaW1wb3J0IHsgZ2V0Q2FjaGUgfSBmcm9tIFwiLi9nZXRDYWNoZVwiO1xuaW1wb3J0IHsgRG9tVXRpbHMsIFBhcnNlciB9IGZyb20gXCJodG1scGFyc2VyMlwiO1xuaW1wb3J0IHsgYm9vdHN0cmFwIH0gZnJvbSBcInNyYy9saWIvYm9vdHN0cmFwcGVyXCI7XG5pbXBvcnQgeyBUZXh0IH0gZnJvbSBcImRvbWhhbmRsZXIvbGliL25vZGVcIjtcblxuY29uc3QgVFJZX1RPX1VTRV9OT0RFX01PRFVMRVMgPSBmYWxzZTtcblxuY29uc3QgdmVyYm9zZSA9IHByb2Nlc3MuZW52LlZFUkJPU0UgPyBjb25zb2xlLmxvZyA6ICguLi5hKSA9PiB7fTtcblxuZnVuY3Rpb24gaXNWYWxpZEVudHJ5UG9pbnQocG9pbnQ6IHN0cmluZykge1xuICByZXR1cm4gKFxuICAgIHBvaW50LmVuZHNXaXRoKFwiLmpzXCIpIHx8XG4gICAgcG9pbnQuZW5kc1dpdGgoXCIuanN4XCIpIHx8XG4gICAgcG9pbnQuZW5kc1dpdGgoXCIudHNcIikgfHxcbiAgICBwb2ludC5lbmRzV2l0aChcIi50c3hcIikgfHxcbiAgICBwb2ludC5lbmRzV2l0aChcIi5tanNcIikgfHxcbiAgICBwb2ludC5lbmRzV2l0aChcIi5jc3NcIilcbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIFBhY2thZ2VyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGJ1aWxkPzogRVNCdWlsZFBhY2thZ2U7XG4gIGNvbnN0cnVjdG9yKGNvZGU6IEVycm9yQ29kZSwgLi4uYXJncykge1xuICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gIH1cbiAgc3RhdGljIHdpdGgoY29kZTogRXJyb3JDb2RlLCBlcnJvcjogRXJyb3IpIHtcbiAgICBjb25zdCBwYWNrYWdlciA9IG5ldyBQYWNrYWdlckVycm9yKGNvZGUpO1xuICAgIE9iamVjdC5hc3NpZ24ocGFja2FnZXIsIGVycm9yKTtcbiAgICByZXR1cm4gcGFja2FnZXI7XG4gIH1cbiAgY29kZTogRXJyb3JDb2RlO1xufVxuXG5leHBvcnQgY2xhc3MgUGFja2FnZXJQZXJtaXNzaW9uRXJyb3IgZXh0ZW5kcyBQYWNrYWdlckVycm9yIHtcbiAgZGlyZWN0b3J5TmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRVNCdWlsZFBhY2thZ2Uge1xuICByb290OiBOYXRpdmVGUztcbiAgcGtnOiBQYWNrYWdlSlNPTjtcblxuICBjb25zdHJ1Y3Rvcihyb290OiBOYXRpdmVGUywgcGtnOiBQYWNrYWdlSlNPTikge1xuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgdGhpcy5wa2cgPSBwa2c7XG4gIH1cblxuICBleHRlbnNpb25zVG9UcnkgPSBbXG4gICAgXCIuanNcIixcbiAgICBcIi50c1wiLFxuICAgIFwiLnRzeFwiLFxuICAgIFwiLmpzeFwiLFxuICAgIFwiLmNzc1wiLFxuICAgIFwiLnBuZ1wiLFxuICAgIFwiLmpwZ1wiLFxuICAgIFwiLndlYnBcIixcbiAgXTtcblxuICB0ZXh0RXh0ZW5zaW9uc1RvVHJ5ID0gW1wiLmpzXCIsIFwiLnRzXCIsIFwiLnRzeFwiLCBcIi5qc3hcIiwgXCIuY3NzXCJdO1xuICBiaW5hcnlFeHRlbnNpb25zVG9UcnkgPSBbXCIucG5nXCIsIFwiLmpwZ1wiLCBcIi53ZWJwXCJdO1xuICBhc3luYyByZXNvbHZlKFxuICAgIF9wYXRoOiBzdHJpbmcsXG4gICAgaW1wb3J0ZXI6IHN0cmluZyxcbiAgICByZXNvbHZlRGlyOiBzdHJpbmcsXG4gICAgY2FuUmV0cnkgPSB0cnVlXG4gICkge1xuICAgIGlmIChfcGF0aC5pbmNsdWRlcyhcIi8vXCIpKSB7XG4gICAgICBfcGF0aCA9IF9wYXRoLnJlcGxhY2UoL1xcLysvZ20sIFwiL1wiKTtcbiAgICB9XG5cbiAgICBjb25zdCBmcyA9IHRoaXMucm9vdDtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKF9wYXRoKSkge1xuICAgICAgcmV0dXJuIF9wYXRoO1xuICAgIH1cblxuICAgIGlmIChpbXBvcnRlciAmJiAhX3BhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIF9wYXRoID0gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKHBhdGguZGlybmFtZShpbXBvcnRlciksIFwiLi4vXCIsIF9wYXRoKSk7XG5cbiAgICAgIGlmIChhd2FpdCBmcy5leGlzdHMoX3BhdGgpKSB7XG4gICAgICAgIHJldHVybiBfcGF0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbmV3UGF0aCA9IFwiXCI7XG4gICAgZm9yIChsZXQgZXh0IG9mIHRoaXMuZXh0ZW5zaW9uc1RvVHJ5KSB7XG4gICAgICBuZXdQYXRoID0gX3BhdGggKyBleHQ7XG5cbiAgICAgIGlmIChhd2FpdCBmcy5leGlzdHMobmV3UGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIG5ld1BhdGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGltcG9ydGVyICYmIGltcG9ydGVyLnN0YXJ0c1dpdGgoXCIvXCIpICYmIGNhblJldHJ5KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXNvbHZlKFxuICAgICAgICBwYXRoLmpvaW4ocmVzb2x2ZURpciwgX3BhdGgpLFxuICAgICAgICBpbXBvcnRlcixcbiAgICAgICAgcmVzb2x2ZURpcixcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBsdWdpbk5hbWUgPSBcImRldnNlcnZlcmxlc3NcIjtcblxuICBwcml2YXRlIGVtaXRSZXNvbHZlRXJyb3Ioe1xuICAgIG1lc3NhZ2UsXG4gICAgbG9jYXRpb24sXG4gICAgY29kZSxcbiAgICBwYXRoLFxuICAgIGV4Y2VwdGlvbixcbiAgICBuYW1lc3BhY2UsXG4gICAgZXh0ZXJuYWwsXG4gIH0pOiBPblJlc29sdmVSZXN1bHQge1xuICAgIHJldHVybiB7XG4gICAgICBwbHVnaW5OYW1lOiBFU0J1aWxkUGFja2FnZS5wbHVnaW5OYW1lLFxuXG4gICAgICBlcnJvcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRleHQ6IG1lc3NhZ2UgfHwgZXhjZXB0aW9uPy50b1N0cmluZygpIHx8IFwiXCIsXG4gICAgICAgICAgZGV0YWlsOiBtZXNzYWdlICYmIGV4Y2VwdGlvbiA/IGV4Y2VwdGlvbi50b1N0cmluZygpIDogXCJcIixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24gPyBsb2NhdGlvbiA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBwYXRoLFxuICAgICAgZXh0ZXJuYWwsXG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBwbHVnaW5EYXRhOiB7IGNvZGUgfSxcbiAgICB9O1xuICB9XG5cbiAgYWx3YXlzUmVxdWVzdFBlcm1pc3Npb25zID0gZmFsc2U7XG4gIHN0YXRpYyByZWFkb25seSBwZXJtaXNzaW9uTW9kZSA9IHsgbW9kZTogXCJyZWFkXCIgfTtcbiAgcmVsYXRpdmVQYXRoOiBzdHJpbmc7XG4gIHN0YXRpYyBvcmlnaW46IHN0cmluZztcbiAgYXN5bmMgc2F2ZVJlc3VsdFRvQ2FjaGUocmVzdWx0OiBCdWlsZFJlc3VsdCwgcm91dGU6IFJvdXRlKSB7XG4gICAgbGV0IG91dFJlc3VsdHM6IHN0cmluZ1tdID0gbmV3IEFycmF5KHJlc3VsdC5vdXRwdXRGaWxlcy5sZW5ndGgpO1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBjYWNoZSA9IGF3YWl0IGdldENhY2hlKCk7XG4gICAgZm9yIChsZXQgZmlsZSBvZiByZXN1bHQub3V0cHV0RmlsZXMpIHtcbiAgICAgIGNvbnN0IGRlc3QgPSBnbG9iYWxUaGlzLmxvY2F0aW9uLm9yaWdpbiArIGZpbGUucGF0aDtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgICAgaGVhZGVycy5zZXQoXCJDb250ZW50LUxlbmd0aFwiLCBmaWxlLmNvbnRlbnRzLmJ5dGVMZW5ndGgudG9TdHJpbmcoMTApKTtcbiAgICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIE1pbWUuZ2V0VHlwZShmaWxlLnBhdGgpLnRvU3RyaW5nKCkpO1xuICAgICAgYXdhaXQgY2FjaGUucHV0KFxuICAgICAgICBkZXN0LFxuICAgICAgICBuZXcgUmVzcG9uc2UoXG4gICAgICAgICAgbmV3IEJsb2IoW2ZpbGUudGV4dF0sIHtcbiAgICAgICAgICAgIHR5cGU6IE1pbWUuZ2V0VHlwZShmaWxlLnBhdGgpIGFzIHN0cmluZyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB7IGhlYWRlcnMgfVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgb3V0UmVzdWx0c1tpKytdID0gZGVzdDtcbiAgICB9XG5cbiAgICByZXR1cm4geyBlbnRyeVBvaW50czogb3V0UmVzdWx0cyB9O1xuICB9XG5cbiAgZ2VuZXJhdGVSZWxhdGl2ZVBhdGgoKSB7XG4gICAgcmV0dXJuIFwiL1wiO1xuICB9XG5cbiAgYXN5bmMgYnVpbGQocm91dGU6IFJvdXRlKSB7XG4gICAgdGhpcy5yZWxhdGl2ZVBhdGggPSByb3V0ZS5hYnNXb3JraW5nRGlyZWN0b3J5O1xuXG4gICAgY29uc3QgdHNjb25maWdGaWxlID0gYXdhaXQgdGhpcy5yb290Lm5hdGl2ZUZpbGUoXCJ0c2NvbmZpZy5qc29uXCIpO1xuICAgIGxldCB0c2NvbmZpZyA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHNjb25maWdGaWxlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0c2NvbmZpZyA9IGF3YWl0IHRzY29uZmlnRmlsZS50ZXh0KCk7XG4gICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgY29uc3QgZXJyID0gUGFja2FnZXJFcnJvci53aXRoKEVycm9yQ29kZS5pbnZhbGlkVFNDb25maWcsIGV4Y2VwdGlvbik7XG4gICAgICAgIGVyci5idWlsZCA9IHRoaXM7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBlbnRyeVBvaW50cyA9IHJvdXRlLmVudHJ5UG9pbnRzO1xuICAgIGxldCByZXN1bHQ6IEJ1aWxkUmVzdWx0O1xuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIC4uLnRoaXMucGtnLmVzYnVpbGQsXG4gICAgICBmb3JtYXQ6IFwiZXNtXCIsXG4gICAgICB0c2NvbmZpZyxcbiAgICAgIG1ldGFmaWxlOiB0cnVlLFxuICAgICAgZW50cnlQb2ludHMsXG4gICAgICBwdWJsaWNQYXRoOiBFU0J1aWxkUGFja2FnZS5vcmlnaW4gKyB0aGlzLnJlbGF0aXZlUGF0aCxcbiAgICAgIHBsdWdpbnM6IFt0aGlzLmFzUGx1Z2luKCldLFxuICAgICAgd3JpdGU6IGZhbHNlLFxuICAgICAgc3BsaXR0aW5nOiB0cnVlLFxuICAgICAgbG9hZGVyOiB0aGlzLnBrZy5lc2J1aWxkLmxvYWRlclxuICAgICAgICA/IHRoaXMucGtnLmVzYnVpbGQubG9hZGVyXG4gICAgICAgIDoge1xuICAgICAgICAgICAgXCIuanNcIjogXCJqc3hcIixcbiAgICAgICAgICAgIFwiLnRzXCI6IFwidHN4XCIsXG4gICAgICAgICAgICBcIi50c3hcIjogXCJ0c3hcIixcbiAgICAgICAgICB9LFxuICAgICAgYWJzV29ya2luZ0RpcjogdGhpcy5yZWxhdGl2ZVBhdGgsXG4gICAgICBub2RlUGF0aHM6IFtcIi9ub2RlX21vZHVsZXNcIl0sXG4gICAgICBvdXRkaXI6IHRoaXMucmVsYXRpdmVQYXRoLFxuICAgICAgYnVuZGxlOiB0cnVlLFxuICAgIH07XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gYXdhaXQgYnVpbGQoY29uZmlnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBlcnIgPSBQYWNrYWdlckVycm9yLndpdGgoRXJyb3JDb2RlLmJ1aWxkRmFpbGVkLCBlKTtcbiAgICAgIGVyci5idWlsZCA9IHRoaXM7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gICAgY29uc3Qgc2NyaXB0cyA9IHJvdXRlLmJ1aWxkZXIuc2NyaXB0cztcbiAgICBmb3IgKGxldCBvdXRwdXRGaWxlIGluIHJlc3VsdC5tZXRhZmlsZS5vdXRwdXRzKSB7XG4gICAgICBjb25zdCBmaWxlID0gcmVzdWx0Lm1ldGFmaWxlLm91dHB1dHNbb3V0cHV0RmlsZV07XG4gICAgICBpZiAoXG4gICAgICAgICFyZXN1bHQubWV0YWZpbGUub3V0cHV0c1tvdXRwdXRGaWxlXS5lbnRyeVBvaW50IHx8XG4gICAgICAgIHBhdGguZXh0bmFtZShvdXRwdXRGaWxlKSAhPT0gXCIuanNcIlxuICAgICAgKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgZW50cnlQb2ludCA9IHJvdXRlLnJlc29sdmVGcm9tKGZpbGUuZW50cnlQb2ludCk7XG5cbiAgICAgIGlmIChzY3JpcHRzLmhhcyhlbnRyeVBvaW50KSkge1xuICAgICAgICBjb25zdCBzY3JpcHQgPSBzY3JpcHRzLmdldChlbnRyeVBvaW50KTtcbiAgICAgICAgY29uc3Qgc3JjID0gcm91dGUucmVzb2x2ZUVudHJ5UG9pbnQob3V0cHV0RmlsZSk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dChib290c3RyYXAoc3JjKSk7XG4gICAgICAgIHNjcmlwdC5hdHRyaWJzW1wiZGF0YS1zcmNcIl0gPSBzcmM7XG4gICAgICAgIHNjcmlwdC5hdHRyaWJzW1widHlwZVwiXSA9IFwibW9kdWxlXCI7XG4gICAgICAgIGRlbGV0ZSBzY3JpcHQuYXR0cmlic1tcInNyY1wiXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY3JpcHQuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChzY3JpcHQuYXR0cmlidXRlc1tpXS5uYW1lID09PSBcInNyY1wiKSB7XG4gICAgICAgICAgICBzY3JpcHQuYXR0cmlidXRlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgRG9tVXRpbHMuYXBwZW5kQ2hpbGQoc2NyaXB0LCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBodG1sID0gcm91dGUucmVuZGVyVG9TdHJpbmcocmVzdWx0LCBjb25maWcpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHdhcm5pbmdzOiByZXN1bHQud2FybmluZ3MsXG4gICAgICAuLi4oYXdhaXQgdGhpcy5zYXZlUmVzdWx0VG9DYWNoZShyZXN1bHQsIHJvdXRlKSksXG4gICAgICBodG1sLFxuICAgIH0gYXMgT3V0cHV0UGFyYW1zO1xuICB9XG5cbiAgYXN5bmMgZ2V0RmlsZUZvckxvY2F0aW9uKGxvY2F0aW9uOiBMb2NhdGlvbikge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJvb3QubmF0aXZlRmlsZShsb2NhdGlvbi5maWxlKTtcbiAgfVxuXG4gIHJlc29sdmVGaWxlID0gYXN5bmMgKG9wdHM6IE9uUmVzb2x2ZUFyZ3MpOiBQcm9taXNlPE9uUmVzb2x2ZVJlc3VsdD4gPT4ge1xuICAgIHZlcmJvc2UoXCJbUmVzb2x2ZV1cIiwgb3B0cyk7XG5cbiAgICBjb25zdCBjb21wb25lbnRzID0gb3B0cy5wYXRoLnNwbGl0KFwiL1wiKTtcbiAgICBjb25zdCBwa2dOYW1lID0gY29tcG9uZW50c1swXTtcblxuICAgIGlmICh0aGlzLnBrZy5hbGxEZXBlbmRlbmNpZXMuaGFzKHBrZ05hbWUpKSB7XG4gICAgICBsZXQgZmlsZSA9XG4gICAgICAgIGNvbXBvbmVudHMubGVuZ3RoID4gMSA/IGAvJHtjb21wb25lbnRzLnNsaWNlKDEpLmpvaW4oXCIvXCIpfWAgOiBcIlwiO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aDogYGh0dHBzOi8vanNwbS5kZXYvJHt0aGlzLnBrZy5hbGxEZXBlbmRlbmNpZXMuZ2V0KFxuICAgICAgICAgIHBrZ05hbWVcbiAgICAgICAgKX0ke2ZpbGV9YCxcbiAgICAgICAgZXh0ZXJuYWw6IHRydWUsXG4gICAgICAgIC8vIG5hbWVzcGFjZTogXCJlc2J1aWxkLXBrZ1wiLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZWRQYXRoID0gcGF0aC5qb2luKG9wdHMucmVzb2x2ZURpciwgcGF0aC5ub3JtYWxpemUob3B0cy5wYXRoKSk7XG5cbiAgICBpZiAoIXBhdGguaXNBYnNvbHV0ZShyZXNvbHZlZFBhdGgpICYmIG9wdHMuaW1wb3J0ZXIpIHtcbiAgICAgIHJlc29sdmVkUGF0aCA9IHBhdGguam9pbihyZXNvbHZlZFBhdGgsIG9wdHMuaW1wb3J0ZXIpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGguaXNBYnNvbHV0ZShyZXNvbHZlZFBhdGgpICYmICFvcHRzLmltcG9ydGVyKSB7XG4gICAgICByZXNvbHZlZFBhdGggPSBwYXRoLmpvaW4ocmVzb2x2ZWRQYXRoLCBvcHRzLmltcG9ydGVyKTtcbiAgICB9XG5cbiAgICBsZXQgZG9lc0V4aXN0ID0gYXdhaXQgdGhpcy5yb290LmV4aXN0cyhyZXNvbHZlZFBhdGgpO1xuICAgIGlmICghZG9lc0V4aXN0ICYmIHBhdGguZXh0bmFtZShyZXNvbHZlZFBhdGgpID09PSBcIlwiKSB7XG4gICAgICBsZXQgb3JpZ1BhdGggPSByZXNvbHZlZFBhdGg7XG4gICAgICBmb3IgKGxldCBleHRlbnNpb24gb2YgdGhpcy50ZXh0RXh0ZW5zaW9uc1RvVHJ5KSB7XG4gICAgICAgIHJlc29sdmVkUGF0aCA9IG9yaWdQYXRoICsgZXh0ZW5zaW9uO1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy5yb290LmV4aXN0cyhyZXNvbHZlZFBhdGgpKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBhdGg6IHJlc29sdmVkUGF0aCxcbiAgICAgICAgICAgIGV4dGVybmFsOiBmYWxzZSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFkb2VzRXhpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRleHQ6IGA0MDQgLSBGaWxlIG5vdCBmb3VuZDogJHtvcHRzLnBhdGh9YCxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLFxuICAgICAgZXh0ZXJuYWw6IGZhbHNlLFxuICAgIH07XG4gIH07XG5cbiAgbG9hZEZpbGUgPSBhc3luYyAob3B0czogT25Mb2FkQXJncyk6IFByb21pc2U8T25Mb2FkUmVzdWx0PiA9PiB7XG4gICAgdmVyYm9zZShcIltMb2FkXVwiLCBvcHRzKTtcblxuICAgIC8vIFVzZSBzdGF0aWMgZm9sZGVyIGZvciBmaWxlc1xuICAgIGlmIChcbiAgICAgIG9wdHMubmFtZXNwYWNlID09PSBcImZpbGVcIiB8fFxuICAgICAgTWltZS5nZXRUeXBlKHBhdGguZXh0bmFtZShvcHRzLnBhdGgpKT8uaW5jbHVkZXMoXCJpbWFnZVwiKVxuICAgICkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudHM6IG5ldyBVaW50OEFycmF5KGF3YWl0IHRoaXMucm9vdC5yZWFkRmlsZUJpbmFyeShvcHRzLnBhdGgpKSxcbiAgICAgICAgbG9hZGVyOiBcImRlZmF1bHRcIixcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnRzOiBhd2FpdCB0aGlzLnJvb3QucmVhZEZpbGVUZXh0KG9wdHMucGF0aCksXG5cbiAgICAgIC8vIHJlc29sdmVEaXI6IHBhdGguZGlybmFtZShvcHRzLnBhdGgpLFxuICAgICAgbG9hZGVyOiBcImRlZmF1bHRcIixcbiAgICB9O1xuICB9O1xuXG4gIGFzUGx1Z2luKCkge1xuICAgIGNvbnN0IHJlc29sdmVGaWxlID0gdGhpcy5yZXNvbHZlRmlsZTtcbiAgICBjb25zdCBsb2FkRmlsZSA9IHRoaXMubG9hZEZpbGU7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IEVTQnVpbGRQYWNrYWdlLnBsdWdpbk5hbWUsXG4gICAgICBzZXR1cChidWlsZCkge1xuICAgICAgICBidWlsZC5vblJlc29sdmUoeyBmaWx0ZXI6IC8uKi8gfSwgcmVzb2x2ZUZpbGUpO1xuICAgICAgICBidWlsZC5vbkxvYWQoeyBmaWx0ZXI6IC8uKi8gfSwgbG9hZEZpbGUpO1xuICAgICAgfSxcbiAgICB9IGFzIFBsdWdpbjtcbiAgfVxufVxuIiwgImxldCBfY2FjaGU6IENhY2hlO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhY2hlKCkge1xuICBpZiAoIV9jYWNoZSkge1xuICAgIF9jYWNoZSA9IGF3YWl0IGdsb2JhbFRoaXMuY2FjaGVzLm9wZW4oXCJidW5kbGVzXCIpO1xuICB9XG5cbiAgcmV0dXJuIF9jYWNoZTtcbn1cbiIsICJpbXBvcnQgKiBhcyBzZXJpYWxpemVyIGZyb20gXCJkb20tc2VyaWFsaXplclwiO1xuaW1wb3J0IHsgRG9tSGFuZGxlciwgRG9tVXRpbHMsIHBhcnNlRG9jdW1lbnQsIFBhcnNlciB9IGZyb20gXCJodG1scGFyc2VyMlwiO1xuaW1wb3J0IElETEVfV09SS0VSX1VSTCBmcm9tIFwic3JjL19kZXZfL0lkbGVXb3JrZXIuanN1cmxcIjtcblxuLy8gZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChub2RlOiBOb2RlKSB7XG4vLyAgIERvbVV0aWxzLnJlbW92ZUVsZW1lbnQobm9kZSk7XG4vLyB9XG5leHBvcnQgY29uc3QgSURMRV9XT1JLRVJfQ09ERSA9IGBcbiAgaWYgKHR5cGVvZiBTaGFyZWRXb3JrZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgIWdsb2JhbFRoaXNbXCJJRExFX1dPUktFUlwiXSkge1xuICAgIGdsb2JhbFRoaXNbXCJJRExFX1dPUktFUlwiXSA9IG5ldyBTaGFyZWRXb3JrZXIoXCIke0lETEVfV09SS0VSX1VSTH1cIiwge1xuICAgICAgdHlwZTogXCJtb2R1bGVcIixcbiAgICAgIG5hbWU6IFwiSWRsZVdvcmtlclwiLFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGdsb2JhbFRoaXMubmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIgJiYgIWdsb2JhbFRoaXNbXCJSRUdJU1RFUkVEX1NFUlZJQ0VfV09SS0VSXCJdKSB7XG4gICAgZ2xvYmFsVGhpc1xuICAgICAgLm5hdmlnYXRvclxuICAgICAgLnNlcnZpY2VXb3JrZXJcbiAgICAgIC5yZWdpc3RlcihcIi9zZXJ2aWNlLXdvcmtlci5qc1wiLCB7c2NvcGU6ICcvJ30pXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7fSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7fSk7XG4gICAgZ2xvYmFsVGhpc1tcIlJFR0lTVEVSRURfU0VSVklDRV9XT1JLRVJcIl0gPSB0cnVlO1xuICB9XG5gO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVIVE1MKHBhY2thZ2VOYW1lOiBzdHJpbmcsIHNvdXJjZTogc3RyaW5nKSB7XG4gIC8vIHNlcnZpY2Ugd29ya2VycyBhcmUgbm90IGFsbG93ZWRcbiAgZm9yIChsZXQgbGlua1RhZyBvZiBEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIiwgZG9tKSkge1xuICAgIGlmIChsaW5rVGFnLmF0dHJpYnNbXCJyZWxcIl0gPT09IFwibWFuaWZlc3RcIikge1xuICAgICAgRG9tVXRpbHMucmVtb3ZlRWxlbWVudChsaW5rVGFnKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGFyc2VyMiA9IG5ldyBQYXJzZXIoaGFuZGxlcjIpO1xuICBwYXJzZXIyLndyaXRlKGA8c2NyaXB0IG1vZHVsZT4ke0lETEVfV09SS0VSX0NPREV9PC9zY3JpcHQ+YCk7XG4gIHBhcnNlcjIuZW5kKCk7XG5cbiAgcmV0dXJuIHNlcmlhbGl6ZXIuZGVmYXVsdChkb20sIHt9KTtcbn1cbiIsICJpbXBvcnQgeyBJRExFX1dPUktFUl9DT0RFIH0gZnJvbSBcInNyYy9odG1sR2VuZXJhdG9yXCI7XG5pbXBvcnQgeyBFcnJvckNvZGUgfSBmcm9tIFwic3JjL2xpYi9FcnJvckNvZGVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGJvb3RzdHJhcChzb3VyY2VVcmw6IHN0cmluZykge1xuICByZXR1cm4gYFxuJHtJRExFX1dPUktFUl9DT0RFfVxuXG5hc3luYyBmdW5jdGlvbiBzdGFydCgpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBfZXhwb3J0cyA9IGF3YWl0IGltcG9ydChcIiR7c291cmNlVXJsfVwiKTtcbiAgICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIF9leHBvcnRzKTtcbiAgfSBjYXRjaChleGNlcHRpb24pIHtcbiAgICBjb25zdCBvcmlnID0gZXhjZXB0aW9uO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgfSwgMSk7XG4gICAgdGhyb3cgZXhjZXB0aW9uO1xuICB9XG59XG5cbmF3YWl0IHN0YXJ0KCk7XG4gIGA7XG59XG4iLCAiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsICJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwgImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuZXhwb3J0IGRlZmF1bHQgU3ltYm9sO1xuIiwgImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCAiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwgImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBnZXRSYXdUYWcgZnJvbSAnLi9fZ2V0UmF3VGFnLmpzJztcbmltcG9ydCBvYmplY3RUb1N0cmluZyBmcm9tICcuL19vYmplY3RUb1N0cmluZy5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0VGFnO1xuIiwgIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdExpa2U7XG4iLCAiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXk7XG4iLCAiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0O1xuIiwgImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwgImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5leHBvcnQgZGVmYXVsdCBjb3JlSnNEYXRhO1xuIiwgImltcG9ydCBjb3JlSnNEYXRhIGZyb20gJy4vX2NvcmVKc0RhdGEuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hc2tlZDtcbiIsICIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU291cmNlO1xuIiwgImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNNYXNrZWQgZnJvbSAnLi9faXNNYXNrZWQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTmF0aXZlO1xuIiwgIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRWYWx1ZTtcbiIsICJpbXBvcnQgYmFzZUlzTmF0aXZlIGZyb20gJy4vX2Jhc2VJc05hdGl2ZS5qcyc7XG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9fZ2V0VmFsdWUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXROYXRpdmU7XG4iLCAiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IFdlYWtNYXA7XG4iLCAiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBiYXNlQ3JlYXRlO1xuIiwgIi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5QXJyYXk7XG4iLCAiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lUHJvcGVydHk7XG4iLCAiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUVhY2g7XG4iLCAiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0luZGV4O1xuIiwgImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25WYWx1ZTtcbiIsICIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXE7XG4iLCAiaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEFzc2lnbnMgYHZhbHVlYCB0byBga2V5YCBvZiBgb2JqZWN0YCBpZiB0aGUgZXhpc3RpbmcgdmFsdWUgaXMgbm90IGVxdWl2YWxlbnRcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NpZ25WYWx1ZTtcbiIsICJpbXBvcnQgYXNzaWduVmFsdWUgZnJvbSAnLi9fYXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weU9iamVjdDtcbiIsICIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTGVuZ3RoO1xuIiwgImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5TGlrZTtcbiIsICIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvdG90eXBlO1xuIiwgIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUaW1lcztcbiIsICJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcmd1bWVudHM7XG4iLCAiaW1wb3J0IGJhc2VJc0FyZ3VtZW50cyBmcm9tICcuL19iYXNlSXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpc0FyZ3VtZW50cztcbiIsICIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJGYWxzZTtcbiIsICJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuIiwgImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzTGVuZ3RoIGZyb20gJy4vaXNMZW5ndGguanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzVHlwZWRBcnJheTtcbiIsICIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsICJpbXBvcnQgYmFzZUlzVHlwZWRBcnJheSBmcm9tICcuL19iYXNlSXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXk7XG4iLCAiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCAiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5cztcbiIsICJpbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXMgZnJvbSAnLi9fbmF0aXZlS2V5cy5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXM7XG4iLCAiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXMgZnJvbSAnLi9fYmFzZUtleXMuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5cztcbiIsICIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5c0luO1xuIiwgImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5c0luIGZyb20gJy4vX25hdGl2ZUtleXNJbi5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c0luYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzSW4ob2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgfVxuICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICByZXN1bHQgPSBbXTtcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VLZXlzSW47XG4iLCAiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXNJbiBmcm9tICcuL19iYXNlS2V5c0luLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXNJbjtcbiIsICJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUNyZWF0ZTtcbiIsICJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoQ2xlYXI7XG4iLCAiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaERlbGV0ZTtcbiIsICJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEdldDtcbiIsICJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEhhcztcbiIsICJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoU2V0O1xuIiwgImltcG9ydCBoYXNoQ2xlYXIgZnJvbSAnLi9faGFzaENsZWFyLmpzJztcbmltcG9ydCBoYXNoRGVsZXRlIGZyb20gJy4vX2hhc2hEZWxldGUuanMnO1xuaW1wb3J0IGhhc2hHZXQgZnJvbSAnLi9faGFzaEdldC5qcyc7XG5pbXBvcnQgaGFzaEhhcyBmcm9tICcuL19oYXNoSGFzLmpzJztcbmltcG9ydCBoYXNoU2V0IGZyb20gJy4vX2hhc2hTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuZXhwb3J0IGRlZmF1bHQgSGFzaDtcbiIsICIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUNsZWFyO1xuIiwgImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzb2NJbmRleE9mO1xuIiwgImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVEZWxldGU7XG4iLCAiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVHZXQ7XG4iLCAiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlSGFzO1xuIiwgImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVTZXQ7XG4iLCAiaW1wb3J0IGxpc3RDYWNoZUNsZWFyIGZyb20gJy4vX2xpc3RDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVEZWxldGUgZnJvbSAnLi9fbGlzdENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVHZXQgZnJvbSAnLi9fbGlzdENhY2hlR2V0LmpzJztcbmltcG9ydCBsaXN0Q2FjaGVIYXMgZnJvbSAnLi9fbGlzdENhY2hlSGFzLmpzJztcbmltcG9ydCBsaXN0Q2FjaGVTZXQgZnJvbSAnLi9fbGlzdENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBMaXN0Q2FjaGU7XG4iLCAiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBNYXA7XG4iLCAiaW1wb3J0IEhhc2ggZnJvbSAnLi9fSGFzaC5qcyc7XG5pbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVDbGVhcjtcbiIsICIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5YWJsZTtcbiIsICJpbXBvcnQgaXNLZXlhYmxlIGZyb20gJy4vX2lzS2V5YWJsZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TWFwRGF0YTtcbiIsICJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlRGVsZXRlO1xuIiwgImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlR2V0O1xuIiwgImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUhhcztcbiIsICJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZVNldDtcbiIsICJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsICIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5UHVzaDtcbiIsICJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsICJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrQ2xlYXI7XG4iLCAiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0RlbGV0ZTtcbiIsICIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrR2V0O1xuIiwgIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrSGFzO1xuIiwgImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcbmltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja1NldDtcbiIsICJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgc3RhY2tDbGVhciBmcm9tICcuL19zdGFja0NsZWFyLmpzJztcbmltcG9ydCBzdGFja0RlbGV0ZSBmcm9tICcuL19zdGFja0RlbGV0ZS5qcyc7XG5pbXBvcnQgc3RhY2tHZXQgZnJvbSAnLi9fc3RhY2tHZXQuanMnO1xuaW1wb3J0IHN0YWNrSGFzIGZyb20gJy4vX3N0YWNrSGFzLmpzJztcbmltcG9ydCBzdGFja1NldCBmcm9tICcuL19zdGFja1NldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuZXhwb3J0IGRlZmF1bHQgU3RhY2s7XG4iLCAiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ247XG4iLCAiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQXNzaWduSW47XG4iLCAiaW1wb3J0IFN0YWNrIGZyb20gJy4vX1N0YWNrLmpzJztcbmltcG9ydCBhcnJheUVhY2ggZnJvbSAnLi9fYXJyYXlFYWNoLmpzJztcbmltcG9ydCBhc3NpZ25WYWx1ZSBmcm9tICcuL19hc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUFzc2lnbiBmcm9tICcuL19iYXNlQXNzaWduLmpzJztcbmltcG9ydCBiYXNlQXNzaWduSW4gZnJvbSAnLi9fYmFzZUFzc2lnbkluLmpzJztcbmltcG9ydCBjbG9uZUJ1ZmZlciBmcm9tICcuL19jbG9uZUJ1ZmZlci5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgY29weVN5bWJvbHMgZnJvbSAnLi9fY29weVN5bWJvbHMuanMnO1xuaW1wb3J0IGNvcHlTeW1ib2xzSW4gZnJvbSAnLi9fY29weVN5bWJvbHNJbi5qcyc7XG5pbXBvcnQgZ2V0QWxsS2V5cyBmcm9tICcuL19nZXRBbGxLZXlzLmpzJztcbmltcG9ydCBnZXRBbGxLZXlzSW4gZnJvbSAnLi9fZ2V0QWxsS2V5c0luLmpzJztcbmltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpbml0Q2xvbmVBcnJheSBmcm9tICcuL19pbml0Q2xvbmVBcnJheS5qcyc7XG5pbXBvcnQgaW5pdENsb25lQnlUYWcgZnJvbSAnLi9faW5pdENsb25lQnlUYWcuanMnO1xuaW1wb3J0IGluaXRDbG9uZU9iamVjdCBmcm9tICcuL19pbml0Q2xvbmVPYmplY3QuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc01hcCBmcm9tICcuL2lzTWFwLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1NldCBmcm9tICcuL2lzU2V0LmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xudmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbmNsb25lYWJsZVRhZ3NbYXJnc1RhZ10gPSBjbG9uZWFibGVUYWdzW2FycmF5VGFnXSA9XG5jbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbmNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbmNsb25lYWJsZVRhZ3NbZmxvYXQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW2Zsb2F0NjRUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG5jbG9uZWFibGVUYWdzW251bWJlclRhZ10gPSBjbG9uZWFibGVUYWdzW29iamVjdFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbmNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9XG5jbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbmNsb25lYWJsZVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIERlZXAgY2xvbmVcbiAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICogIDQgLSBDbG9uZSBzeW1ib2xzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgcGFyZW50IG9iamVjdCBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0LFxuICAgICAgaXNEZWVwID0gYml0bWFzayAmIENMT05FX0RFRVBfRkxBRyxcbiAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gIGlmIChjdXN0b21pemVyKSB7XG4gICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICB9XG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSk7XG4gIGlmIChpc0Fycikge1xuICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICBpZiAoaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgfVxuICAgIGlmICh0YWcgPT0gb2JqZWN0VGFnIHx8IHRhZyA9PSBhcmdzVGFnIHx8IChpc0Z1bmMgJiYgIW9iamVjdCkpIHtcbiAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBpc0ZsYXRcbiAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA/IHZhbHVlIDoge307XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmIChpc1NldCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0LnNldChrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBrZXlzRnVuYyA9IGlzRnVsbFxuICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgdmFyIHByb3BzID0gaXNBcnIgPyB1bmRlZmluZWQgOiBrZXlzRnVuYyh2YWx1ZSk7XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VDbG9uZTtcbiIsICIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RmlsdGVyO1xuIiwgIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAqIC8vID0+IFtbXSwgW11dXG4gKlxuICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJBcnJheTtcbiIsICJpbXBvcnQgYXJyYXlGaWx0ZXIgZnJvbSAnLi9fYXJyYXlGaWx0ZXIuanMnO1xuaW1wb3J0IHN0dWJBcnJheSBmcm9tICcuL3N0dWJBcnJheS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0U3ltYm9scztcbiIsICJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlTeW1ib2xzO1xuIiwgImltcG9ydCBhcnJheVB1c2ggZnJvbSAnLi9fYXJyYXlQdXNoLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuaW1wb3J0IHN0dWJBcnJheSBmcm9tICcuL3N0dWJBcnJheS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKG9iamVjdCkge1xuICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN5bWJvbHNJbjtcbiIsICJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBnZXRTeW1ib2xzSW4gZnJvbSAnLi9fZ2V0U3ltYm9sc0luLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5U3ltYm9sc0luO1xuIiwgImltcG9ydCBhcnJheVB1c2ggZnJvbSAnLi9fYXJyYXlQdXNoLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldEFsbEtleXM7XG4iLCAiaW1wb3J0IGJhc2VHZXRBbGxLZXlzIGZyb20gJy4vX2Jhc2VHZXRBbGxLZXlzLmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsS2V5cztcbiIsICJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXNJbjtcbiIsICJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5leHBvcnQgZGVmYXVsdCBEYXRhVmlldztcbiIsICJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbWlzZTtcbiIsICJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IFNldDtcbiIsICJpbXBvcnQgRGF0YVZpZXcgZnJvbSAnLi9fRGF0YVZpZXcuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnLi9fUHJvbWlzZS5qcyc7XG5pbXBvcnQgU2V0IGZyb20gJy4vX1NldC5qcyc7XG5pbXBvcnQgV2Vha01hcCBmcm9tICcuL19XZWFrTWFwLmpzJztcbmltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VGFnO1xuIiwgIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZUFycmF5O1xuIiwgImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBVaW50OEFycmF5O1xuIiwgImltcG9ydCBVaW50OEFycmF5IGZyb20gJy4vX1VpbnQ4QXJyYXkuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lQXJyYXlCdWZmZXI7XG4iLCAiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lRGF0YVZpZXc7XG4iLCAiLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICovXG5mdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVSZWdFeHA7XG4iLCAiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lU3ltYm9sO1xuIiwgImltcG9ydCBjbG9uZUFycmF5QnVmZmVyIGZyb20gJy4vX2Nsb25lQXJyYXlCdWZmZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVR5cGVkQXJyYXk7XG4iLCAiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5pbXBvcnQgY2xvbmVEYXRhVmlldyBmcm9tICcuL19jbG9uZURhdGFWaWV3LmpzJztcbmltcG9ydCBjbG9uZVJlZ0V4cCBmcm9tICcuL19jbG9uZVJlZ0V4cC5qcyc7XG5pbXBvcnQgY2xvbmVTeW1ib2wgZnJvbSAnLi9fY2xvbmVTeW1ib2wuanMnO1xuaW1wb3J0IGNsb25lVHlwZWRBcnJheSBmcm9tICcuL19jbG9uZVR5cGVkQXJyYXkuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgY2FzZSBpbnQ4VGFnOiBjYXNlIGludDE2VGFnOiBjYXNlIGludDMyVGFnOlxuICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgcmV0dXJuIGNsb25lUmVnRXhwKG9iamVjdCk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5pdENsb25lQnlUYWc7XG4iLCAiaW1wb3J0IGJhc2VDcmVhdGUgZnJvbSAnLi9fYmFzZUNyZWF0ZS5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZU9iamVjdDtcbiIsICJpbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc01hcDtcbiIsICJpbXBvcnQgYmFzZUlzTWFwIGZyb20gJy4vX2Jhc2VJc01hcC5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc01hcChuZXcgTWFwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG5leHBvcnQgZGVmYXVsdCBpc01hcDtcbiIsICJpbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc1NldDtcbiIsICJpbXBvcnQgYmFzZUlzU2V0IGZyb20gJy4vX2Jhc2VJc1NldC5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NldChuZXcgU2V0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBpc1NldDtcbiIsICJpbXBvcnQgYmFzZUNsb25lIGZyb20gJy4vX2Jhc2VDbG9uZS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVEZWVwO1xuIiwgImltcG9ydCB0eXBlIHsgQnVpbGRPcHRpb25zIH0gZnJvbSBcImVzYnVpbGRcIjtcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gXCJsb2Rhc2gtZXNcIjtcbmltcG9ydCAqIGFzIHNlbXZlciBmcm9tIFwic2VtdmVyXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5leHBvcnQgaW50ZXJmYWNlIFJ1bkNvbmZpZ3VyYXRpb24ge1xuICAvLyBJZiB5b3UgcGFzcyBpdCBhIGZpbGVuYW1lIGVuZGluZyBpbiAuaHRtbCwgYWxsIG5hdmlnYXRpb24gcm91dGVzIHdpbGwgZ28gdG8gdGhhdCBmaWxlLlxuICAvLyBJZiB5b3UgcGFzcyBpdCBhIGZvbGRlciwgaXQgd2lsbCByb3V0ZSBiYXNlZCBvbiB0aGUgZmlsZXN5c3RlbSwgTmV4dC5qcy1zdHlsZS5cbiAgcm91dGVyOiBzdHJpbmc7XG5cbiAgaXNSb3V0ZXJVbnNldDogYm9vbGVhbjtcbn1cblxuY29uc3QgQVVUT19ERVBFTkRFTkNJRVMgPSBbXCJyZWFjdFwiLCBcInJlYWN0LWRvbVwiLCBcInByb3AtdHlwZXNcIiwgXCJvYmplY3QtYXNzaWduXCJdO1xuXG5jb25zdCBkZXBlbmRlbmN5S2V5cyA9IFtcbiAgXCJkZXBlbmRlbmNpZXNcIixcbiAgXCJvcHRpb25hbERlcGVuZGVuY2llc1wiLFxuICBcInBlZXJEZXBlbmRlbmNpZXNcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIixcbl07XG5cbmNvbnN0IGVhY2hJdGVyYXRvclZhbHVlID0gW1wiXCIsIFwiXCJdO1xuXG5leHBvcnQgY2xhc3MgUGFja2FnZUpTT04ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcblxuICBlc2J1aWxkOiBQYXJ0aWFsPEJ1aWxkT3B0aW9ucz47XG4gIHJ1bjogUnVuQ29uZmlndXJhdGlvbjtcbiAgZGVwZW5kZW5jaWVzOiBPYmplY3Q7XG4gIGRldkRlcGVuZGVuY2llczogT2JqZWN0O1xuICBwZWVyRGVwZW5kZW5jaWVzOiBPYmplY3Q7XG4gIG9wdGlvbmFsRGVwZW5kZW5jaWVzOiBPYmplY3Q7XG5cbiAgKmVhY2hEZXBlbmRlbmN5KCkge1xuICAgIGZvciAobGV0IGRlcEtleSBvZiBkZXBlbmRlbmN5S2V5cykge1xuICAgICAgY29uc3QgZGVwcyA9IHRoaXNbZGVwS2V5XTtcbiAgICAgIGlmIChkZXBzKSB7XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBkZXBzKSB7XG4gICAgICAgICAgZWFjaEl0ZXJhdG9yVmFsdWVbMF0gPSBrZXk7XG4gICAgICAgICAgZWFjaEl0ZXJhdG9yVmFsdWVbMV0gPSBkZXBzW2tleV07XG4gICAgICAgICAgeWllbGQgZWFjaEl0ZXJhdG9yVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub3JtYWxpemVEZXBlbmRlbmNpZXMoKSB7XG4gICAgZm9yIChsZXQgZGVwS2V5IG9mIGRlcGVuZGVuY3lLZXlzKSB7XG4gICAgICBjb25zdCBkZXBzID0gdGhpc1tkZXBLZXldO1xuICAgICAgaWYgKGRlcHMpIHtcbiAgICAgICAgZm9yIChsZXQgbW9kdWxlSWQgaW4gZGVwcykge1xuICAgICAgICAgIGxldCB2ZXJzaW9uID0gZGVwc1ttb2R1bGVJZF07XG4gICAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24ucmVwbGFjZSgvXFxeL2dtLCBcIlwiKTtcblxuICAgICAgICAgIGlmICghc2VtdmVyLmNsZWFuKHZlcnNpb24sIGZhbHNlKSkge1xuICAgICAgICAgICAgdGhpcy5hbGxEZXBlbmRlbmNpZXMuc2V0KG1vZHVsZUlkLCBtb2R1bGVJZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWxsRGVwZW5kZW5jaWVzLnNldChcbiAgICAgICAgICAgICAgbW9kdWxlSWQsXG4gICAgICAgICAgICAgIGAke21vZHVsZUlkfUAke3NlbXZlci5jbGVhbih2ZXJzaW9uLCBmYWxzZSl9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCBhdXRvZGVwIG9mIEFVVE9fREVQRU5ERU5DSUVTKSB7XG4gICAgICBpZiAoIXRoaXMuYWxsRGVwZW5kZW5jaWVzLmhhcyhhdXRvZGVwKSkge1xuICAgICAgICB0aGlzLmFsbERlcGVuZGVuY2llcy5zZXQoYXV0b2RlcCwgYXV0b2RlcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBhcnNlKGpzb246IHN0cmluZywgQ2xhc3NOYW1lID0gUGFja2FnZUpTT04pIHtcbiAgICBjb25zdCBwa2cgPSBuZXcgQ2xhc3NOYW1lKCk7XG4gICAgcGtnLnByb2Nlc3MoanNvbiwgQ2xhc3NOYW1lKTtcbiAgICByZXR1cm4gcGtnO1xuICB9XG5cbiAgYWxsRGVwZW5kZW5jaWVzID0gbmV3IE1hcCgpO1xuXG4gIHByb2Nlc3MoanNvbjogc3RyaW5nLCBDbGFzc05hbWUgPSBQYWNrYWdlSlNPTikge1xuICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoanNvbik7XG4gICAgaWYgKHR5cGVvZiBwYXJzZWQuaGFuZGxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBkZWxldGUgcGFyc2VkLmhhbmRsZTtcbiAgICB9XG4gICAgcGFyc2VkLnJ1biA9IENsYXNzTmFtZS5ub3JtYWxpemVSdW4ocGFyc2VkLnJ1biB8fCB7fSk7XG4gICAgcGFyc2VkLmVzYnVpbGQgPSBDbGFzc05hbWUubm9ybWFsaXplRVNCdWlsZChwYXJzZWQuZXNidWlsZCB8fCB7fSk7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBwYXJzZWQpO1xuICAgIHRoaXMubm9ybWFsaXplRGVwZW5kZW5jaWVzKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdGF0aWMgbm9ybWFsaXplUnVuKHJ1bjogUGFydGlhbDxSdW5Db25maWd1cmF0aW9uPikge1xuICAgIGlmICh0eXBlb2YgcnVuLnJvdXRlciA9PT0gXCJzdHJpbmdcIiAmJiBydW4ucm91dGVyKSB7XG4gICAgICBydW4ucm91dGVyID0gcnVuLnJvdXRlci50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICAgIHJ1bi5pc1JvdXRlclVuc2V0ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ1bi5pc1JvdXRlclVuc2V0ID0gdHJ1ZTtcbiAgICAgIHJ1bi5yb3V0ZXIgPSBcIlwiO1xuICAgIH1cblxuICAgIHJldHVybiBydW47XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgY29uc3QganNvbiA9IGNsb25lRGVlcCh0aGlzKTtcblxuICAgIGRlbGV0ZSBqc29uLnJ1bi5pc1JvdXRlclVuc2V0O1xuICAgIGRlbGV0ZSBqc29uLmFsbERlcGVuZGVuY2llcztcblxuICAgIHJldHVybiBqc29uO1xuICB9XG5cbiAgc3RhdGljIG5vcm1hbGl6ZUVTQnVpbGQoZXNidWlsZDogUGFydGlhbDxCdWlsZE9wdGlvbnM+KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYWNrYWdlSlNPTkZpbGUgZXh0ZW5kcyBQYWNrYWdlSlNPTiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGZyb21IYW5kbGUoaGFuZGxlOiBGaWxlU3lzdGVtRmlsZUhhbmRsZSkge1xuICAgIGNvbnN0IHBrZyA9IFBhY2thZ2VKU09ORmlsZS5wYXJzZShhd2FpdCAoYXdhaXQgaGFuZGxlLmdldEZpbGUoKSkudGV4dCgpKTtcbiAgICBwa2cuaGFuZGxlID0gaGFuZGxlO1xuXG4gICAgcmV0dXJuIHBrZztcbiAgfVxuICBoYW5kbGU6IEZpbGVTeXN0ZW1GaWxlSGFuZGxlO1xuXG4gIGdldCBzdGF0aWNQYXRoKCkge1xuICAgIHJldHVybiBwYXRoLmV4dG5hbWUodGhpcy5ydW4ucm91dGVyKVxuICAgICAgPyBwYXRoLmpvaW4odGhpcy5ydW4ucm91dGVyLCBcIi4uL1wiKVxuICAgICAgOiB0aGlzLnJ1bi5yb3V0ZXI7XG4gIH1cblxuICBhc3luYyBzYXZlKCkge1xuICAgIGNvbnN0IHBlcm0gPSBhd2FpdCB0aGlzLmhhbmRsZS5jcmVhdGVXcml0YWJsZSh7XG4gICAgICBrZWVwRXhpc3RpbmdEYXRhOiBmYWxzZSxcbiAgICB9KTtcbiAgICBjb25zdCBqc29uID0gdGhpcy50b0pTT04oKTtcbiAgICBjb25zb2xlLmxvZyhqc29uKTtcbiAgICBjb25zdCB0ZXh0ID0gSlNPTi5zdHJpbmdpZnkoanNvbiwgbnVsbCwgMik7XG4gICAgY29uc3Qgd3JpdGVyID0gcGVybS5nZXRXcml0ZXIoKTtcbiAgICBhd2FpdCB3cml0ZXIud3JpdGUodGV4dCk7XG4gICAgYXdhaXQgd3JpdGVyLmNsb3NlKCk7XG4gIH1cblxuICBwcm9jZXNzKGpzb246IHN0cmluZywgQ2xhc3NOYW1lID0gUGFja2FnZUpTT04pIHtcbiAgICByZXR1cm4gc3VwZXIucHJvY2Vzcyhqc29uLCBQYWNrYWdlSlNPTkZpbGUpO1xuICB9XG5cbiAgYXN5bmMgcmVsb2FkKCkge1xuICAgIHRoaXMucHJvY2Vzcyhhd2FpdCAoYXdhaXQgdGhpcy5oYW5kbGUuZ2V0RmlsZSgpKS50ZXh0KCksIFBhY2thZ2VKU09ORmlsZSk7XG4gIH1cblxuICBzdGF0aWMgcGFyc2UoanNvbik6IFBhY2thZ2VKU09ORmlsZSB7XG4gICAgcmV0dXJuIHN1cGVyLnBhcnNlKGpzb24sIFBhY2thZ2VKU09ORmlsZSkgYXMgUGFja2FnZUpTT05GaWxlO1xuICB9XG5cbiAgdG9KU09OKCkge1xuICAgIGNvbnN0IGpzb24gPSBzdXBlci50b0pTT04oKTtcbiAgICBkZWxldGUganNvbi5oYW5kbGU7XG4gICAgcmV0dXJuIGpzb247XG4gIH1cbn1cbiIsICJpbXBvcnQgKiBhcyBzZXJpYWxpemVyIGZyb20gXCJkb20tc2VyaWFsaXplclwiO1xuaW1wb3J0IHtcbiAgRG9tSGFuZGxlcixcbiAgRG9tVXRpbHMsXG4gIHBhcnNlRG9jdW1lbnQsXG4gIFBhcnNlclxufSBmcm9tIFwiaHRtbHBhcnNlcjJcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmNsYXNzIEhUTUwyRVNCdWlsZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc2NyaXB0cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmxpbmtzID0gbmV3IE1hcCgpO1xuICB9XG4gIGdlbmVyYXRlKHNvdXJjZSwgcmVzb2x2ZSkge1xuICAgIGNvbnN0IGRvbSA9IHBhcnNlRG9jdW1lbnQoc291cmNlKTtcbiAgICB0aGlzLmRvbSA9IGRvbTtcbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBidW5kbGU6IHRydWUsXG4gICAgICBtZXRhZmlsZTogdHJ1ZSxcbiAgICAgIGVudHJ5UG9pbnRzOiBbXVxuICAgIH07XG4gICAgbGV0IHNyYyA9IFwiXCI7XG4gICAgZm9yIChsZXQgc2NyaXB0IG9mIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIsIGRvbSkpIHtcbiAgICAgIHNyYyA9IHNjcmlwdC5hdHRyaWJzW1wic3JjXCJdO1xuICAgICAgaWYgKHNyYyAmJiAhc3JjLmluY2x1ZGVzKFwiOi8vXCIpKSB7XG4gICAgICAgIHNyYyA9IHJlc29sdmUoc3JjKTtcbiAgICAgICAgdGhpcy5zY3JpcHRzLnNldChzcmMsIHNjcmlwdCk7XG4gICAgICAgIGNvbmZpZy5lbnRyeVBvaW50cy5wdXNoKHNyYyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGxpbmsgb2YgRG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIsIGRvbSkpIHtcbiAgICAgIGlmICgoIWxpbmsuYXR0cmlic1tcInJlbFwiXSB8fCBsaW5rLmF0dHJpYnNbXCJyZWxcIl0gPT09IFwic3R5bGVzaGVldFwiKSAmJiBsaW5rLmF0dHJpYnNbXCJocmVmXCJdICYmICFsaW5rLmF0dHJpYnNbXCJocmVmXCJdLmluY2x1ZGVzKFwiOi8vXCIpKSB7XG4gICAgICAgIHNyYyA9IHJlc29sdmUobGluay5hdHRyaWJzW1wiaHJlZlwiXSk7XG4gICAgICAgIHRoaXMubGlua3Muc2V0KHNyYywgbGluayk7XG4gICAgICAgIGNvbmZpZy5lbnRyeVBvaW50cy5wdXNoKHNyYyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cbiAgcmVuZGVyVG9TdHJpbmcoYnVpbGQsIGNvbmZpZyA9IHRoaXMuY29uZmlnLCByZXNvbHZlRnJvbSwgcmVzb2x2ZVRvKSB7XG4gICAgaWYgKCFidWlsZC5tZXRhZmlsZSlcbiAgICAgIHRocm93IFwiQnVpbGQgaXMgbWlzc2luZyBtZXRhZmlsZS5cIjtcbiAgICBjb25zdCB7bGlua3MsIHNjcmlwdHN9ID0gdGhpcztcbiAgICBsZXQgbWV0YSA9IGJ1aWxkLm1ldGFmaWxlO1xuICAgIGNvbnN0IGNzc091dHB1dHMgPSBuZXcgTWFwKCk7XG4gICAgbGV0IGZpbGU7XG4gICAgZm9yIChsZXQgb3V0cHV0IGluIG1ldGEub3V0cHV0cykge1xuICAgICAgZmlsZSA9IG1ldGEub3V0cHV0c1tvdXRwdXRdO1xuICAgICAgaWYgKHBhdGguZXh0bmFtZShvdXRwdXQpID09PSBcIi5jc3NcIikge1xuICAgICAgICBjc3NPdXRwdXRzLnNldChvdXRwdXQsIGZpbGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzdHlsZXNoZWV0c1RvSW5zZXJ0ID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHByZWZpeCA9IGNvbmZpZy5wdWJsaWNQYXRoID8gY29uZmlnLnB1YmxpY1BhdGggOiBcIlwiO1xuICAgIGZvciAobGV0IG91dHB1dCBpbiBtZXRhLm91dHB1dHMpIHtcbiAgICAgIGZpbGUgPSBtZXRhLm91dHB1dHNbb3V0cHV0XTtcbiAgICAgIGlmICghZmlsZS5lbnRyeVBvaW50KVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNvbnN0IGVudHJ5UG9pbnQgPSByZXNvbHZlRnJvbShmaWxlLmVudHJ5UG9pbnQpO1xuICAgICAgaWYgKHNjcmlwdHMuaGFzKGVudHJ5UG9pbnQpKSB7XG4gICAgICAgIGNvbnN0IGV4dCA9IHBhdGguZXh0bmFtZShvdXRwdXQpO1xuICAgICAgICBjb25zdCBiYXNlbmFtZSA9IG91dHB1dC5zdWJzdHJpbmcoMCwgb3V0cHV0Lmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICAgICAgICBjb25zdCBjc3NOYW1lID0gYmFzZW5hbWUgKyBcIi5jc3NcIjtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gc2NyaXB0cy5nZXQoZW50cnlQb2ludCk7XG4gICAgICAgIGlmIChjc3NPdXRwdXRzLmhhcyhjc3NOYW1lKSAmJiAoIWNzc091dHB1dHMuZ2V0KGNzc05hbWUpLmVudHJ5UG9pbnQgfHwgIWxpbmtzLmhhcyhjc3NPdXRwdXRzLmdldChjc3NOYW1lKS5lbnRyeVBvaW50KSkpIHtcbiAgICAgICAgICBzdHlsZXNoZWV0c1RvSW5zZXJ0LnNldChjc3NOYW1lLCBzY3JpcHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9vdXRwdXQgPSByZXNvbHZlVG8ob3V0cHV0LCBzY3JpcHQpO1xuICAgICAgICBpZiAoX291dHB1dCkge1xuICAgICAgICAgIHNjcmlwdC5hdHRyaWJzW1wic3JjXCJdID0gX291dHB1dDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsaW5rcy5oYXMoZW50cnlQb2ludCkpIHtcbiAgICAgICAgbGlua3MuZ2V0KGVudHJ5UG9pbnQpLmF0dHJpYnNbXCJocmVmXCJdID0gcmVzb2x2ZVRvKG91dHB1dCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IFtzdHlsZXNoZWV0TmFtZSwgYWJvdmVdIG9mIHN0eWxlc2hlZXRzVG9JbnNlcnQuZW50cmllcygpKSB7XG4gICAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihuZXcgRG9tSGFuZGxlcigoZXJyLCBlbGVtcykgPT4ge1xuICAgICAgICBEb21VdGlscy5wcmVwZW5kKGFib3ZlLCBlbGVtc1swXSk7XG4gICAgICB9KSk7XG4gICAgICBwYXJzZXIud3JpdGUoYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHtyZXNvbHZlVG8oc3R5bGVzaGVldE5hbWUpfVwiIC8+YCk7XG4gICAgICBwYXJzZXIuZW5kKCk7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVyLmRlZmF1bHQodGhpcy5kb20sIHt9KTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgSFRNTDJFU0J1aWxkXG59O1xuIiwgImltcG9ydCB7IE5hdGl2ZUZTIH0gZnJvbSBcInNyYy9saWIvcm91dGVyL2ZzLW5hdGl2ZVwiO1xuaW1wb3J0IHsgSFRNTDJFU0J1aWxkIH0gZnJvbSBcIkBqYXJyZWQvaHRtbGJ1aWxkXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgdHlwZSB7IEJ1aWxkT3B0aW9ucywgQnVpbGRSZXN1bHQgfSBmcm9tIFwiZXNidWlsZFwiO1xuXG4vLyBUaGUgcnVsZXMgYXJlIGFzIGZvbGxvd3Ncbi8vIFRoZSBmb2xkZXIgY29udGFpbmluZyB0aGUgdG9wbW9zdCBodG1sIGZpbGUgaXMgdGhlIHJvb3Qgcm91dGUuXG4vLyBwdWJsaWMvaW5kZXguaHRtbCA9PiAvXG4vLyBwdWJsaWMvYmFjb24vZWdncy5odG1sID0+IC9iYWNvbi9lZ2dzXG4vLyBwdWJsaWMvcmVjaXBlcy9baWRdLmh0bWwgPT4gL3JlY2lwZXMvMTIzLCAvcmVjaXBlcy8xMjMuaHRtbFxuLy8gcHVibGljL3JlY2lwZXMvbmV3Lmh0bWwgPT4gL3JlY2lwZXMvbmV3LCAvcmVjaXBlcy9uZXcvXG5leHBvcnQgY2xhc3MgUm91dGUge1xuICBlbnRyeVBvaW50czogc3RyaW5nW10gPSBbXTtcbiAgYWJzV29ya2luZ0RpcmVjdG9yeTogc3RyaW5nID0gXCJcIjtcbiAgcm9vdDogTmF0aXZlRlM7XG4gIGJ1aWxkZXI6IEhUTUwyRVNCdWlsZCA9IG5ldyBIVE1MMkVTQnVpbGQoKTtcbiAgb3V0RGVzdGluYXRpb24gPSBcIi9cIjtcblxuICBzdGF0aWMgZnJvbShyb290OiBOYXRpdmVGUywgcGF0aG5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHJvdXRlID0gbmV3IFJvdXRlKCk7XG4gICAgcm91dGUucm9vdCA9IHJvb3Q7XG4gICAgcm91dGUuYWJzV29ya2luZ0RpcmVjdG9yeSA9IHBhdGhuYW1lLmVuZHNXaXRoKFwiLmh0bWxcIilcbiAgICAgID8gcGF0aC5qb2luKHBhdGhuYW1lLCBcIi4uL1wiKVxuICAgICAgOiBwYXRobmFtZTtcbiAgICByZXR1cm4gcm91dGU7XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZUNvbmZpZyhmaWxlOiBGaWxlKSB7XG4gICAgY29uc3QgeyBlbnRyeVBvaW50cyB9ID0gdGhpcy5idWlsZGVyLmdlbmVyYXRlKFxuICAgICAgYXdhaXQgZmlsZS50ZXh0KCksXG4gICAgICB0aGlzLnJlc29sdmVGcm9tXG4gICAgKTtcbiAgICB0aGlzLmVudHJ5UG9pbnRzID0gZW50cnlQb2ludHM7XG4gIH1cblxuICByZW5kZXJUb1N0cmluZyhyZXN1bHQ6IEJ1aWxkUmVzdWx0LCBjb25maWc6IEJ1aWxkT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmJ1aWxkZXIucmVuZGVyVG9TdHJpbmcoXG4gICAgICByZXN1bHQsXG4gICAgICBjb25maWcsXG4gICAgICB0aGlzLnJlc29sdmVGcm9tLFxuICAgICAgdGhpcy5yZXNvbHZlVG9cbiAgICApO1xuICB9XG5cbiAgcmVzb2x2ZWRFbnRyeVBvaW50cyA9IG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KCk7XG4gIHJlc29sdmVGcm9tID0gKC4uLl9wYXRoOiBzdHJpbmdbXSkgPT4ge1xuICAgIHJldHVybiBwYXRoLmpvaW4odGhpcy5hYnNXb3JraW5nRGlyZWN0b3J5LCAuLi5fcGF0aCk7XG4gIH07XG4gIHJlc29sdmVUbyA9IChfcGF0aCwgbm9kZSkgPT4ge1xuICAgIGNvbnN0IG91dCA9IHBhdGguam9pbih0aGlzLm91dERlc3RpbmF0aW9uLCBfcGF0aCk7XG4gICAgaWYgKHBhdGguZXh0bmFtZShvdXQpID09PSBcIi5qc1wiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0O1xuICB9O1xuICByZXNvbHZlRW50cnlQb2ludCA9IChfcGF0aDogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIHBhdGguam9pbih0aGlzLm91dERlc3RpbmF0aW9uLCBfcGF0aCk7XG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBGaWxlc3lzdGVtUm91dGVyIHtcbiAgcGFja2FnZVJvb3Q6IE5hdGl2ZUZTO1xuICBwYWdlc1Jvb3Q6IE5hdGl2ZUZTO1xuXG4gIGNvbnN0cnVjdG9yKHBhY2thZ2VSb290OiBOYXRpdmVGUywgcGFnZXNSb290OiBOYXRpdmVGUykge1xuICAgIHRoaXMucGFja2FnZVJvb3QgPSBwYWNrYWdlUm9vdDtcbiAgICB0aGlzLnBhZ2VzUm9vdCA9IHBhZ2VzUm9vdDtcbiAgfVxuXG4gIGFzeW5jIHJvdXRlRm9yKGZpbGU6IEZpbGUsIHBhdGhuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCByb3V0ZSA9IFJvdXRlLmZyb20odGhpcy5wYWNrYWdlUm9vdCwgcGF0aG5hbWUpO1xuICAgIGF3YWl0IHJvdXRlLmdlbmVyYXRlQ29uZmlnKGZpbGUpO1xuXG4gICAgcmV0dXJuIHJvdXRlO1xuICB9XG5cbiAgYXN5bmMgcmVzb2x2ZShwYXRobmFtZTogc3RyaW5nKTogUHJvbWlzZTxSb3V0ZT4ge1xuICAgIGNvbnN0IHsgcGFnZXNSb290OiBmcyB9ID0gdGhpcztcblxuICAgIGxldCB0YXJnZXQgPSBwYXRobmFtZTtcbiAgICBsZXQgZmlsZTogRmlsZTtcblxuICAgIGlmIChwYXRobmFtZS5pbmRleE9mKFwiLy9cIikgPiAtMSkge1xuICAgICAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9cXC8rL2csIFwiL1wiKTtcbiAgICB9XG5cbiAgICBpZiAocGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICAvLyBGaXJzdCwgdHJ5IGFuIGV4YWN0IGh0bWwgZmlsZS5cbiAgICAgIC8vIHNvLCAvZm9vLmh0bWwgaW5zdGVhZCBvZiAvZm9vL2luZGV4Lmh0bWxcbiAgICAgIHRhcmdldCA9IHBhdGhuYW1lLnNsaWNlKDAsIC0xKSArIFwiLmh0bWxcIjtcbiAgICAgIGZpbGUgPSBhd2FpdCBmcy5uYXRpdmVGaWxlKHRhcmdldCk7XG4gICAgICBpZiAoZmlsZSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yb3V0ZUZvcihmaWxlLCB0YXJnZXQpO1xuICAgICAgfVxuXG4gICAgICB0YXJnZXQgPSBwYXRobmFtZSArIFwiaW5kZXguaHRtbFwiO1xuICAgICAgZmlsZSA9IGF3YWl0IGZzLm5hdGl2ZUZpbGUodGFyZ2V0KTtcbiAgICAgIGlmIChmaWxlKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJvdXRlRm9yKGZpbGUsIHRhcmdldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhdGhuYW1lLmVuZHNXaXRoKFwiLmh0bWxcIikpIHtcbiAgICAgIHRhcmdldCA9IHBhdGhuYW1lICsgXCIuaHRtbFwiO1xuICAgIH1cblxuICAgIGZpbGUgPSBhd2FpdCBmcy5uYXRpdmVGaWxlKHRhcmdldCk7XG5cbiAgICBpZiAoZmlsZSkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucm91dGVGb3IoZmlsZSwgdGFyZ2V0KTtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4ocGF0aG5hbWUsIFwiLi4vXCIpKTtcblxuICAgIGlmICh0YXJnZXQuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBfcmVzdWx0IG9mIGF3YWl0IGZzLnJlYWRkaXIodGFyZ2V0KSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gX3Jlc3VsdCBhc1xuICAgICAgICB8IEZpbGVTeXN0ZW1GaWxlSGFuZGxlXG4gICAgICAgIHwgRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZTtcblxuICAgICAgaWYgKFxuICAgICAgICByZXN1bHQua2luZCA9PT0gXCJmaWxlXCIgJiZcbiAgICAgICAgcmVzdWx0Lm5hbWUuc3RhcnRzV2l0aChcIltcIikgJiZcbiAgICAgICAgcmVzdWx0Lm5hbWUuZW5kc1dpdGgoXCJdLmh0bWxcIilcbiAgICAgICkge1xuICAgICAgICBmaWxlID0gcmVzdWx0O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWZpbGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCB0aGlzLnJvdXRlRm9yKGZpbGUsIHRhcmdldCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNpbmdsZVBhZ2VBcHBSb3V0ZXIgZXh0ZW5kcyBGaWxlc3lzdGVtUm91dGVyIHtcbiAgZGVzdGluYXRpb24gPSBcIlwiO1xuXG4gIGFzeW5jIHJlc29sdmUocGF0aG5hbWU6IHN0cmluZyk6IFByb21pc2U8Um91dGU+IHtcbiAgICBjb25zdCB7IHBhZ2VzUm9vdDogZnMgfSA9IHRoaXM7XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yb3V0ZUZvcihhd2FpdCBmcy5uYXRpdmVGaWxlKHRoaXMuZGVzdGluYXRpb24pLCBcIi9cIik7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gUm91dGVyVHlwZSB7XG4gIHVua25vd24gPSBcIlwiLFxuICBzcGEgPSBcInNwYVwiLFxuICBmaWxlc3lzdGVtID0gXCJmaWxlc3lzdGVtXCIsXG59XG4iLCAiaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuXG5leHBvcnQgY2xhc3MgTmF0aXZlRlMge1xuICBjb25zdHJ1Y3Rvcihyb290OiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlKSB7XG4gICAgaWYgKCFyb290IHx8ICEocm9vdCBpbnN0YW5jZW9mIEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUpKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcInJvb3QgbXVzdCBiZSBhIEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGVcIik7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgfVxuXG4gIHJvb3Q6IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGU7XG4gIHJlbGF0aXZlUGF0aCA9IFwiL1wiO1xuICBoYW5kbGVDYWNoZSA9IG5ldyBNYXA8XG4gICAgc3RyaW5nLFxuICAgIEZpbGVTeXN0ZW1GaWxlSGFuZGxlIHwgRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZVxuICA+KCk7XG5cbiAgYXN5bmMgbmF0aXZlRmlsZShfcGF0aDogc3RyaW5nKTogRmlsZSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlQ2FjaGUuaGFzKF9wYXRoKSkge1xuICAgICAgY29uc3QgaGFuZGxlID0gdGhpcy5oYW5kbGVDYWNoZS5nZXQoX3BhdGgpIGFzIEZpbGVTeXN0ZW1GaWxlSGFuZGxlO1xuICAgICAgcmV0dXJuIChhd2FpdCBoYW5kbGUuZ2V0RmlsZSgpKSBhcyBGaWxlO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZSA9IGF3YWl0IHRoaXMucmVzb2x2ZUZpbGVIYW5kbGUoX3BhdGgpO1xuICAgIGlmIChoYW5kbGUpIHtcbiAgICAgIHRoaXMuaGFuZGxlQ2FjaGUuc2V0KF9wYXRoLCBoYW5kbGUpO1xuICAgICAgcmV0dXJuIGF3YWl0IGhhbmRsZS5nZXRGaWxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZpbGVIYW5kbGVGb3IoX3BhdGg6IHN0cmluZyk6IFByb21pc2U8RmlsZVN5c3RlbUZpbGVIYW5kbGU+IHtcbiAgICBpZiAodGhpcy5oYW5kbGVDYWNoZS5oYXMoX3BhdGgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVDYWNoZS5nZXQoX3BhdGgpIGFzIEZpbGVTeXN0ZW1GaWxlSGFuZGxlO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZSA9IGF3YWl0IHRoaXMucmVzb2x2ZUZpbGVIYW5kbGUoX3BhdGgpO1xuICAgIGlmIChoYW5kbGUpIHtcbiAgICAgIHRoaXMuaGFuZGxlQ2FjaGUuc2V0KF9wYXRoLCBoYW5kbGUpO1xuICAgICAgcmV0dXJuIGhhbmRsZSBhcyBGaWxlU3lzdGVtRmlsZUhhbmRsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZXhpc3RzKF9wYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVDYWNoZS5oYXMoX3BhdGgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGUgPSBhd2FpdCB0aGlzLnJlc29sdmVGaWxlSGFuZGxlKF9wYXRoKTtcbiAgICBpZiAoaGFuZGxlKSB7XG4gICAgICB0aGlzLmhhbmRsZUNhY2hlLnNldChfcGF0aCwgaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZXNvbHZlRmlsZUhhbmRsZShcbiAgICBfX3BhdGg6IHN0cmluZyxcbiAgICBmcm9tOiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlID0gdGhpcy5yb290XG4gICkge1xuICAgIGxldCBfcGF0aCA9IF9fcGF0aDtcbiAgICBpZiAoIXBhdGguaXNBYnNvbHV0ZShfcGF0aCkgfHwgIV9wYXRoLnN0YXJ0c1dpdGgoXCIvXCIpKSB7XG4gICAgICBfcGF0aCA9IHBhdGguam9pbihcIi9cIiwgX3BhdGgpO1xuICAgIH1cblxuICAgIF9wYXRoID0gcGF0aC5ub3JtYWxpemUoX3BhdGgpO1xuXG4gICAgbGV0IGNvbXBvbmVudCA9IF9wYXRoO1xuICAgIHdoaWxlIChfcGF0aC5pbmNsdWRlcyhcIi9cIikgJiYgX3BhdGgubGVuZ3RoID4gMSAmJiBmcm9tKSB7XG4gICAgICB0cnkge1xuICAgICAgICBfcGF0aCA9IF9wYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gX3BhdGguc3Vic3RyaW5nKDEpIDogX3BhdGg7XG4gICAgICAgIGNvbXBvbmVudCA9IF9wYXRoLnN1YnN0cmluZygwLCBfcGF0aC5pbmRleE9mKFwiL1wiKSk7XG4gICAgICAgIGlmIChfcGF0aC5sZW5ndGggLSBjb21wb25lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKGNvbXBvbmVudC5sZW5ndGgpO1xuICAgICAgICAgIGlmICghX3BhdGguaW5jbHVkZXMoXCIvXCIpKSB7XG4gICAgICAgICAgICBsZXQgaGFzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciBhd2FpdCAobGV0IGZpbGVuYW1lIG9mIGZyb20ua2V5cygpKSB7XG4gICAgICAgICAgICAgIGlmIChmaWxlbmFtZSA9PT0gX3BhdGgpIHtcbiAgICAgICAgICAgICAgICBoYXNNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFoYXNNYXRjaCkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBmcm9tLmdldEZpbGVIYW5kbGUoX3BhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmcm9tID0gYXdhaXQgZnJvbS5nZXREaXJlY3RvcnlIYW5kbGUoY29tcG9uZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgaGFzTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICBmb3IgYXdhaXQgKGxldCBmaWxlbmFtZSBvZiBmcm9tLmtleXMoKSkge1xuICAgICAgICAgICAgaWYgKGZpbGVuYW1lID09PSBjb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgaGFzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWhhc01hdGNoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXdhaXQgZnJvbS5nZXRGaWxlSGFuZGxlKGNvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICAvLyNpZmRlZiBWRVJCT1NFXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoX19wYXRoLCBleGNlcHRpb24pO1xuICAgICAgICAvLyNlbmRpZlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFzeW5jIHJlc29sdmVEaXJlY3RvcnlIYW5kbGUoXG4gICAgX3BhdGg6IHN0cmluZyxcbiAgICBmcm9tOiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlID0gdGhpcy5yb290XG4gICkge1xuICAgIGlmICghcGF0aC5pc0Fic29sdXRlKF9wYXRoKSB8fCAhX3BhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIF9wYXRoID0gcGF0aC5qb2luKFwiL1wiLCBfcGF0aCk7XG4gICAgfVxuICAgIGxldCBwYXJ0cyA9IF9wYXRoLnNwbGl0KFwiL1wiKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIXBhcnRzW2ldKSBjb250aW51ZTtcbiAgICAgIGZyb20gPSBhd2FpdCBmcm9tLmdldERpcmVjdG9yeUhhbmRsZShwYXJ0c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBmcm9tO1xuXG4gICAgLy8gbGV0IGkgPSAwLFxuICAgIC8vICAgbmV4dEkgPSAwO1xuICAgIC8vIHdoaWxlIChpID4gLTEgJiYgaSA8IF9wYXRoLmxlbmd0aCkge1xuICAgIC8vICAgbmV4dEkgPSBfcGF0aC5pbmRleE9mKFwiL1wiLCBpKTtcblxuICAgIC8vICAgZnJvbSA9IGF3YWl0IGZyb20uZ2V0RGlyZWN0b3J5SGFuZGxlKFxuICAgIC8vICAgICBfcGF0aC5zdWJzdHJpbmcoaSArIDEsIG5leHRJID4gLTEgPyBuZXh0SSA6IHVuZGVmaW5lZClcbiAgICAvLyAgICk7XG4gICAgLy8gICBpID0gbmV4dEkgKyAxO1xuICAgIC8vIH1cbiAgICAvLyByZXR1cm4gZnJvbTtcbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IF9wYXRoLmxlbmd0aDsgaSsrKSB7fVxuICAgIC8vIGxldCBwYXJ0cyA9IF9wYXRoLnNwbGl0KFwiL1wiKTtcbiAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gICBpZiAoIXBhcnRzW2ldKSBicmVhaztcbiAgICAvLyAgIGZyb20gPSBhd2FpdCBmcm9tLmdldERpcmVjdG9yeUhhbmRsZShwYXJ0c1tpXSk7XG4gICAgLy8gfVxuXG4gICAgcmV0dXJuIGZyb207XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGFzeW5jICpyZWFkZGlyKFxuICAgIF9wYXRoOiBzdHJpbmdcbiAgKTogQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPEZpbGVTeXN0ZW1GaWxlSGFuZGxlIHwgRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZT4ge1xuICAgIGNvbnN0IGRpciA9IGF3YWl0IHRoaXMucmVzb2x2ZURpcmVjdG9yeUhhbmRsZShfcGF0aCk7XG4gICAgaWYgKCFkaXIpIHJldHVybjtcblxuICAgIHlpZWxkKiBkaXIudmFsdWVzKCk7XG4gIH1cblxuICBhc3luYyByZWFkRmlsZShfcGF0aDogc3RyaW5nLCBlbmNvZGluZzogXCJ1dGY4XCIgfCBcImJpbmFyeVwiID0gXCJiaW5hcnlcIikge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgXCJ1dGY4XCI6IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZEZpbGVUZXh0KF9wYXRoKTtcbiAgICAgIH1cblxuICAgICAgY2FzZSBcImJpbmFyeVwiOiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRGaWxlQmluYXJ5KF9wYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXN5bmMgcmVhZEZpbGVCaW5hcnkoX3BhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0aGlzLm5hdGl2ZUZpbGUoX3BhdGgpO1xuICAgIHJldHVybiBhd2FpdCBmaWxlLmFycmF5QnVmZmVyKCk7XG4gIH1cbiAgYXN5bmMgcmVhZEZpbGVUZXh0KF9wYXRoOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWxlID0gYXdhaXQgdGhpcy5uYXRpdmVGaWxlKF9wYXRoKTtcbiAgICByZXR1cm4gYXdhaXQgZmlsZS50ZXh0KCk7XG4gIH1cbiAgYXN5bmMgY3JlYXRlUmVhZFN0cmVhbShfcGF0aDogc3RyaW5nKSB7XG4gICAgY29uc3QgZmlsZSA9IGF3YWl0IHRoaXMubmF0aXZlRmlsZShfcGF0aCk7XG4gICAgcmV0dXJuIGZpbGUuc3RyZWFtKCk7XG4gIH1cbiAgcmVhbHBhdGgoX3BhdGg6IHN0cmluZykge1xuICAgIHJldHVybiBwYXRoLm5vcm1hbGl6ZShfcGF0aCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZTKHJvb3Q6IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUpIHtcbiAgcmV0dXJuIG5ldyBOYXRpdmVGUyhyb290KTtcbn1cbiIsICJpbXBvcnQgKiBhcyBJREIgZnJvbSBcImlkYlwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgZ2V0UGFja2FnZUlEIH0gZnJvbSBcInNyYy9fZGV2Xy9nZXRQYWNrYWdlSURcIjtcbmltcG9ydCB7IFN0b3JlZFBhY2thZ2UsIFN0b3JlZFBhY2thZ2VSZWNvcmQgfSBmcm9tIFwiLi9TdG9yZWRQYWNrYWdlXCI7XG5cbmV4cG9ydCBjbGFzcyBEYXRhYmFzZSB7XG4gIGRiOiBJREIuSURCUERhdGFiYXNlO1xuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgaWYgKHRoaXMuZGIpIHJldHVybjtcbiAgICB0aGlzLmRiID0gYXdhaXQgSURCLm9wZW5EQihcImhhbmRsZXNcIiwgOCwge1xuICAgICAgdXBncmFkZShkYXRhYmFzZSwgb2xkVmVyc2lvbiwgbmV3VmVyc2lvbiwgdHJhbnNhY3Rpb24pIHtcbiAgICAgICAgaWYgKCFkYXRhYmFzZS5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKFwicGFja2FnZXNcIikpXG4gICAgICAgICAgZGF0YWJhc2UuY3JlYXRlT2JqZWN0U3RvcmUoXCJwYWNrYWdlc1wiKTtcblxuICAgICAgICBpZiAoIWRhdGFiYXNlLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoXCJkaXJzXCIpKVxuICAgICAgICAgIGRhdGFiYXNlLmNyZWF0ZU9iamVjdFN0b3JlKFwiZGlyc1wiKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBzYXZlUGFja2FnZShwa2c6IFN0b3JlZFBhY2thZ2UpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWQoKTtcbiAgICBhd2FpdCB0aGlzLmRiLnB1dChcInBhY2thZ2VzXCIsIHBrZy50b1JlY29yZCgpLCBwa2cuaWQpO1xuICB9XG5cbiAgYXN5bmMgc2F2ZURpcihcbiAgICBkaXJlY3Rvcnk6IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUsXG4gICAgcGtnSGFuZGxlOiBGaWxlU3lzdGVtRmlsZUhhbmRsZVxuICApIHtcbiAgICBhd2FpdCB0aGlzLmxvYWQoKTtcbiAgICBhd2FpdCB0aGlzLmRiLnB1dChcbiAgICAgIFwiZGlyc1wiLFxuICAgICAgeyBkaXJlY3RvcnksIGlkOiBnZXRQYWNrYWdlSUQoKSwgcGtnSGFuZGxlIH0sXG4gICAgICBnZXRQYWNrYWdlSUQoKVxuICAgICk7XG4gIH1cblxuICBhc3luYyBsb2FkRGlyKCk6IFByb21pc2U8RmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZT4ge1xuICAgIGF3YWl0IHRoaXMubG9hZCgpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmRiLmdldChcImRpcnNcIiwgZ2V0UGFja2FnZUlEKCkpO1xuICB9XG5cbiAgYXN5bmMgbG9hZFBhY2thZ2UoaWQ6IHN0cmluZykge1xuICAgIGF3YWl0IHRoaXMubG9hZCgpO1xuXG4gICAgY29uc3QgcmVjID0gKGF3YWl0IHRoaXMuZGIuZ2V0KFwicGFja2FnZXNcIiwgaWQpKSBhcyBTdG9yZWRQYWNrYWdlUmVjb3JkO1xuICAgIGlmICghcmVjKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RvcmVkUGFja2FnZS5mcm9tUmVjb3JkKHJlYyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gXCJzcmMvbGliL0RhdGFiYXNlXCI7XG5cbmxldCBkYXRhYmFzZTogRGF0YWJhc2UgPSBuZXcgRGF0YWJhc2UoKTtcbmRhdGFiYXNlLmxvYWQoKTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0UGVybWlzc2lvbihpZDogc3RyaW5nKSB7XG4gIGF3YWl0IGRhdGFiYXNlLmxvYWQoKTtcbiAgY29uc3QgcGtnID0gYXdhaXQgZGF0YWJhc2UubG9hZFBhY2thZ2UoaWQpO1xuXG4gIGF3YWl0IHBrZy5oYW5kbGUucmVxdWVzdFBlcm1pc3Npb24oeyBtb2RlOiBcInJlYWRcIiB9KTtcbn1cbiIsICJpbXBvcnQgXCJzcmMvbGliL2xhdW5jaElkbGVXb3JrZXIudHNcIjtcbmltcG9ydCB7IHJlcXVlc3RQZXJtaXNzaW9uIH0gZnJvbSBcIi4uL2xpYi9yZXF1ZXN0UGVybWlzc2lvblwiO1xuaW1wb3J0IHsgZ2V0UGFja2FnZUlEIH0gZnJvbSBcIi4vZ2V0UGFja2FnZUlEXCI7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYnV0dG9uXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgcmVxdWVzdFBlcm1pc3Npb24oZ2V0UGFja2FnZUlEKCkpO1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIH0pO1xufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQU1BLG1CQUFnQjtBQUNkLFNBQUssU0FBUyxPQUFPLE9BQU8sT0FDNUIsS0FBSyxjQUFjLE9BQU8sT0FBTztBQUVqQyxhQUFTLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUTtBQUNwQyxXQUFLLE9BQU8sVUFBVTtBQUd4QixTQUFLLFNBQVMsS0FBSyxPQUFPLEtBQUssT0FDL0IsS0FBSyxVQUFVLEtBQUssUUFBUSxLQUFLLE9BQ2pDLEtBQUssZUFBZSxLQUFLLGFBQWEsS0FBSztBQUFBO0FBc0I3QyxRQUFLLFVBQVUsU0FBUyxTQUFTLFNBQVMsT0FBTztBQUMvQyxhQUFTLFFBQVEsU0FBUztBQUN4QixVQUFJLGFBQWEsUUFBUSxNQUFNLElBQUksU0FBUyxHQUFHO0FBQzdDLGVBQU8sRUFBRTtBQUFBO0FBRVgsYUFBTyxLQUFLO0FBRVosZUFBUyxJQUFJLEdBQUcsSUFBSSxXQUFXLFFBQVEsS0FBSztBQUMxQyxZQUFNLE1BQU0sV0FBVztBQUl2QixZQUFJLElBQUksT0FBTyxLQUlmO0FBQUEsY0FBSSxDQUFDLFNBQVUsT0FBTyxLQUFLO0FBQ3pCLGtCQUFNLElBQUksTUFDUixvQ0FBb0MsTUFDcEMsdUJBQXVCLEtBQUssT0FBTyxPQUFPLFdBQVcsT0FDckQsMkRBQTJELE1BQzNELHdDQUF3QyxPQUFPO0FBSW5ELGVBQUssT0FBTyxPQUFPO0FBQUE7QUFBQTtBQUlyQixVQUFJLFNBQVMsQ0FBQyxLQUFLLFlBQVksT0FBTztBQUNwQyxZQUFNLE1BQU0sV0FBVztBQUN2QixhQUFLLFlBQVksUUFBUyxJQUFJLE9BQU8sTUFBTyxNQUFNLElBQUksT0FBTztBQUFBO0FBQUE7QUFBQTtBQVFuRSxRQUFLLFVBQVUsVUFBVSxTQUFTLE9BQU07QUFDdEMsWUFBTyxPQUFPO0FBQ2QsUUFBSSxPQUFPLE1BQUssUUFBUSxZQUFZLElBQUksZUFDcEMsTUFBTSxLQUFLLFFBQVEsU0FBUyxJQUFJLGVBRWhDLFVBQVUsS0FBSyxTQUFTLE1BQUs7QUFHakMsV0FBUSxDQUZLLElBQUksU0FBUyxLQUFLLFNBQVMsS0FFdEIsQ0FBQyxZQUFZLEtBQUssT0FBTyxRQUFRO0FBQUE7QUFNckQsUUFBSyxVQUFVLGVBQWUsU0FBUyxNQUFNO0FBQzNDLGtCQUFPLGdCQUFnQixLQUFLLFNBQVMsT0FBTyxJQUNyQyxRQUFRLEtBQUssWUFBWSxLQUFLLGtCQUFrQjtBQUFBO0FBR3pELFNBQU8sVUFBVTtBQUFBOzs7QUNoR2pCO0FBQUEsU0FBTyxVQUFVLENBQUMsNEJBQTJCLENBQUMsT0FBTSwwQkFBeUIsQ0FBQyxPQUFNLHdCQUF1QixDQUFDLFNBQVEsMkJBQTBCLENBQUMsWUFBVywrQkFBOEIsQ0FBQyxnQkFBZSwyQkFBMEIsQ0FBQyxZQUFXLDRCQUEyQixDQUFDLFFBQU8sNkJBQTRCLENBQUMsU0FBUSw2QkFBNEIsQ0FBQyxTQUFRLG9CQUFtQixDQUFDLFNBQVEsNEJBQTJCLENBQUMsUUFBTyx5QkFBd0IsQ0FBQyxVQUFTLHdCQUF1QixDQUFDLFNBQVEsK0JBQThCLENBQUMsVUFBUyw4QkFBNkIsQ0FBQyxVQUFTLDJCQUEwQixDQUFDLFVBQVMsMkJBQTBCLENBQUMsVUFBUywwQkFBeUIsQ0FBQyxVQUFTLHdCQUF1QixDQUFDLE9BQU0sd0JBQXVCLENBQUMsUUFBTyw0QkFBMkIsQ0FBQyxhQUFZLDJCQUEwQixDQUFDLFFBQU8sd0JBQXVCLENBQUMsU0FBUSx3QkFBdUIsQ0FBQyxVQUFTLDBCQUF5QixDQUFDLFFBQU8sT0FBTSx3QkFBdUIsQ0FBQyxTQUFRLDZCQUE0QixDQUFDLGNBQWEsd0JBQXVCLENBQUMsU0FBUSxtQkFBa0IsQ0FBQyxRQUFPLHVCQUFzQixDQUFDLFFBQU8sMEJBQXlCLENBQUMsUUFBTyx3QkFBdUIsQ0FBQyxZQUFXLHVCQUFzQixDQUFDLFFBQU8sdUJBQXNCLENBQUMsUUFBTyxtQkFBa0IsQ0FBQyxRQUFPLG9CQUFtQixDQUFDLE9BQU0scUJBQW9CLENBQUMsVUFBUywyQkFBMEIsQ0FBQyxRQUFPLHlCQUF3QixDQUFDLE9BQU0sVUFBUyxxQkFBb0IsQ0FBQyxVQUFTLHVCQUFzQixDQUFDLFFBQU8sNEJBQTJCLENBQUMsT0FBTSxPQUFNLFFBQU8sc0NBQXFDLENBQUMsUUFBTyx1QkFBc0IsQ0FBQyxVQUFTLDBCQUF5QixDQUFDLE1BQUssUUFBTyxvQkFBbUIsQ0FBQyxRQUFPLFFBQU8scUJBQW9CLENBQUMsVUFBUywyQkFBMEIsQ0FBQyxXQUFVLHVCQUFzQixDQUFDLFdBQVUsdUJBQXNCLENBQUMsUUFBTyx3QkFBdUIsQ0FBQyxZQUFXLDRCQUEyQixDQUFDLFFBQU8sOEJBQTZCLENBQUMsUUFBTyx3QkFBdUIsQ0FBQyxTQUFRLDZCQUE0QixDQUFDLGdCQUFlLG9CQUFtQixDQUFDLFFBQU8sMkJBQTBCLENBQUMsU0FBUSwyQkFBMEIsQ0FBQyxNQUFLLE1BQUssT0FBTSwwQkFBeUIsQ0FBQyxXQUFVLG9CQUFtQixDQUFDLFNBQVEsc0NBQXFDLENBQUMsVUFBUyw0QkFBMkIsQ0FBQyxhQUFZLDZCQUE0QixDQUFDLFVBQVMsd0JBQXVCLENBQUMsU0FBUSwyQkFBMEIsQ0FBQyxTQUFRLDJCQUEwQixDQUFDLFNBQVEsd0JBQXVCLENBQUMsU0FBUSxvQkFBbUIsQ0FBQyxPQUFNLFNBQVEsbUJBQWtCLENBQUMsUUFBTyxRQUFPLGdDQUErQixDQUFDLFNBQVEsK0JBQThCLENBQUMsU0FBUSxzQkFBcUIsQ0FBQyxPQUFNLFFBQU8sbUJBQWtCLENBQUMsUUFBTyx1QkFBc0IsQ0FBQyxPQUFNLHlCQUF3QixDQUFDLE9BQU0sb0JBQW1CLENBQUMsUUFBTyw0QkFBMkIsQ0FBQyxPQUFNLE9BQU0sT0FBTSxPQUFNLE1BQUssUUFBTyxTQUFRLE9BQU0sT0FBTSxRQUFPLE9BQU0sVUFBUyxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxXQUFVLG1CQUFrQixDQUFDLFFBQU8saUNBQWdDLENBQUMsUUFBTyxtQkFBa0IsQ0FBQyxRQUFPLHlCQUF3QixDQUFDLFVBQVMsdUJBQXNCLENBQUMsVUFBUyxXQUFVLFVBQVMsV0FBVSxvQkFBbUIsQ0FBQyxTQUFRLCtCQUE4QixDQUFDLFNBQVEsbUNBQWtDLENBQUMsU0FBUSxtQkFBa0IsQ0FBQyxRQUFPLDZCQUE0QixDQUFDLFFBQU8sNkJBQTRCLENBQUMsT0FBTSxRQUFPLDBCQUF5QixDQUFDLFFBQU8sc0JBQXFCLENBQUMsUUFBTywwQkFBeUIsQ0FBQyxPQUFNLFFBQU8sK0JBQThCLENBQUMsUUFBTyxxQkFBb0IsQ0FBQyxPQUFNLDhCQUE2QixDQUFDLE9BQU0seUJBQXdCLENBQUMsUUFBTyx3QkFBdUIsQ0FBQyxRQUFPLDRCQUEyQixDQUFDLFlBQVcsdUJBQXNCLENBQUMsUUFBTyx1QkFBc0IsQ0FBQyxRQUFPLDBCQUF5QixDQUFDLE1BQUssT0FBTSxPQUFNLDhCQUE2QixDQUFDLFVBQVMsd0JBQXVCLENBQUMsWUFBVyx5QkFBd0IsQ0FBQyxTQUFRLHVCQUFzQixDQUFDLE9BQU0sUUFBTywyQkFBMEIsQ0FBQyxRQUFPLHVDQUFzQyxDQUFDLFFBQU8sa0NBQWlDLENBQUMsT0FBTSx1Q0FBc0MsQ0FBQyxRQUFPLGdDQUErQixDQUFDLE9BQU0sNkJBQTRCLENBQUMsU0FBUSxnQ0FBK0IsQ0FBQyxRQUFPLDZCQUE0QixDQUFDLFNBQVEsaUNBQWdDLENBQUMsUUFBTyw2QkFBNEIsQ0FBQyxRQUFPLHdCQUF1QixDQUFDLFFBQU8sdUJBQXNCLENBQUMsUUFBTyx1QkFBc0IsQ0FBQyxRQUFPLG1CQUFrQixDQUFDLFFBQU8sd0JBQXVCLENBQUMsU0FBUSwrQkFBOEIsQ0FBQyxRQUFPLGdDQUErQixDQUFDLFFBQU8sK0JBQThCLENBQUMsUUFBTyxnQ0FBK0IsQ0FBQyxRQUFPLG1CQUFrQixDQUFDLFFBQU8seUJBQXdCLENBQUMsV0FBVSwwQkFBeUIsQ0FBQyxZQUFXLHNDQUFxQyxDQUFDLFdBQVUsMkNBQTBDLENBQUMsV0FBVSx1QkFBc0IsQ0FBQyxRQUFPLHFCQUFvQixDQUFDLE9BQU0sVUFBUyx3QkFBdUIsQ0FBQyxPQUFNLFNBQVEsNEJBQTJCLENBQUMsT0FBTSxrQ0FBaUMsQ0FBQyxRQUFPLG9CQUFtQixDQUFDLFNBQVEsd0JBQXVCLENBQUMsVUFBUyx1QkFBc0IsQ0FBQyxRQUFPLHdCQUF1QixDQUFDLFNBQVEsd0JBQXVCLENBQUMsU0FBUSx3QkFBdUIsQ0FBQyxZQUFXLHVCQUFzQixDQUFDLE9BQU0sY0FBYSwwQkFBeUIsQ0FBQyxRQUFPLGdDQUErQixDQUFDLFFBQU8sb0JBQW1CLENBQUMsU0FBUSx3QkFBdUIsQ0FBQyxTQUFRLHNCQUFxQixDQUFDLFFBQU8sZ0NBQStCLENBQUMsV0FBVSxrQ0FBaUMsQ0FBQyxPQUFNLDRCQUEyQixDQUFDLFNBQVEsb0JBQW1CLENBQUMsU0FBUSxzQkFBcUIsQ0FBQyxRQUFPLHNCQUFxQixDQUFDLFFBQU8sd0JBQXVCLENBQUMsU0FBUSw0QkFBMkIsQ0FBQyxhQUFZLHdCQUF1QixDQUFDLFNBQVEsNEJBQTJCLENBQUMsUUFBTyw2QkFBNEIsQ0FBQyxRQUFPLDZCQUE0QixDQUFDLFFBQU8sMkJBQTBCLENBQUMsUUFBTyw4QkFBNkIsQ0FBQyxRQUFPLDJCQUEwQixDQUFDLFFBQU8sd0JBQXVCLENBQUMsU0FBUSx5QkFBd0IsQ0FBQyxTQUFRLFFBQU8seUJBQXdCLENBQUMsUUFBTyxtQkFBa0IsQ0FBQyxPQUFNLE9BQU0sT0FBTSxRQUFPLHVCQUFzQixDQUFDLFFBQU8sdUJBQXNCLENBQUMsUUFBTyx5QkFBd0IsQ0FBQyxRQUFPLHdCQUF1QixDQUFDLFFBQU8sU0FBUSx3QkFBdUIsQ0FBQyxTQUFRLHNCQUFxQixDQUFDLFFBQU8sU0FBUSxRQUFPLFFBQU8sb0JBQW1CLENBQUMsU0FBUSx1QkFBc0IsQ0FBQyxRQUFPLG1CQUFrQixDQUFDLFFBQU8sY0FBYSxDQUFDLFVBQVMsZUFBYyxDQUFDLFFBQU8sYUFBWSxDQUFDLFFBQU8sZUFBYyxDQUFDLE1BQUssUUFBTyxjQUFhLENBQUMsT0FBTSxRQUFPLE9BQU0sUUFBTyxvQkFBbUIsQ0FBQyxTQUFRLGFBQVksQ0FBQyxTQUFRLGFBQVksQ0FBQyxPQUFNLFNBQVEsY0FBYSxDQUFDLFFBQU8sT0FBTSxRQUFPLE9BQU0sT0FBTSxRQUFPLGFBQVksQ0FBQyxPQUFNLE9BQU0sT0FBTSxTQUFRLGFBQVksQ0FBQyxRQUFPLGNBQWEsQ0FBQyxRQUFPLGFBQVksQ0FBQyxRQUFPLGNBQWEsQ0FBQyxTQUFRLGNBQWEsQ0FBQyxTQUFRLFlBQVcsQ0FBQyxPQUFNLG1CQUFrQixDQUFDLFFBQU8sWUFBVyxDQUFDLFFBQU8sWUFBVyxDQUFDLFFBQU8sYUFBWSxDQUFDLFNBQVEsY0FBYSxDQUFDLFVBQVMsY0FBYSxDQUFDLFFBQU8sY0FBYSxDQUFDLFNBQVEsY0FBYSxDQUFDLFNBQVEsYUFBWSxDQUFDLFFBQU8sYUFBWSxDQUFDLFFBQU8sbUJBQWtCLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxjQUFhLENBQUMsU0FBUSxlQUFjLENBQUMsT0FBTSxhQUFZLENBQUMsUUFBTyxjQUFhLENBQUMsU0FBUSx1QkFBc0IsQ0FBQyxVQUFTLGNBQWEsQ0FBQyxTQUFRLHVCQUFzQixDQUFDLFVBQVMsZUFBYyxDQUFDLFNBQVEsY0FBYSxDQUFDLFNBQVEsYUFBWSxDQUFDLFFBQU8sYUFBWSxDQUFDLFFBQU8sYUFBWSxDQUFDLE9BQU0sU0FBUSxjQUFhLENBQUMsUUFBTyxPQUFNLFFBQU8sYUFBWSxDQUFDLFFBQU8sY0FBYSxDQUFDLFFBQU8sYUFBWSxDQUFDLFFBQU8sYUFBWSxDQUFDLE9BQU0sUUFBTyxhQUFZLENBQUMsUUFBTyxjQUFhLENBQUMsU0FBUSxjQUFhLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxjQUFhLENBQUMsU0FBUSxjQUFhLENBQUMsU0FBUSxjQUFhLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxjQUFhLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxhQUFZLENBQUMsUUFBTyxpQkFBZ0IsQ0FBQyxPQUFNLFNBQVEsYUFBWSxDQUFDLFFBQU8sY0FBYSxDQUFDLE9BQU0sU0FBUSxpQkFBZ0IsQ0FBQyxRQUFPLGNBQWEsQ0FBQyxTQUFRLGFBQVksQ0FBQyxRQUFPLG9DQUFtQyxDQUFDLDZCQUE0QixrQkFBaUIsQ0FBQyxVQUFTLGtDQUFpQyxDQUFDLFVBQVMsMkNBQTBDLENBQUMsVUFBUywwQkFBeUIsQ0FBQyxVQUFTLGtCQUFpQixDQUFDLE9BQU0sU0FBUSxhQUFZLENBQUMsUUFBTyxtQkFBa0IsQ0FBQyxTQUFRLHFCQUFvQixDQUFDLFFBQU8sY0FBYSxDQUFDLE9BQU0sU0FBUSxjQUFhLENBQUMsT0FBTSxRQUFPLFNBQVEsYUFBWSxDQUFDLFFBQU8sYUFBWSxDQUFDLFFBQU8sYUFBWSxDQUFDLFFBQU8sY0FBYSxDQUFDLE9BQU0sU0FBUSxvQkFBbUIsQ0FBQyxTQUFRLFVBQVMseUJBQXdCLENBQUMsU0FBUSxrQkFBaUIsQ0FBQyxTQUFRLFVBQVMsaUJBQWdCLENBQUMsT0FBTSxTQUFRLGtCQUFpQixDQUFDLFNBQVEsdUJBQXNCLENBQUMsWUFBVyxhQUFZLGlCQUFnQixDQUFDLE9BQU0sUUFBTyxxQkFBb0IsQ0FBQyxVQUFTLGNBQWEsWUFBVyxDQUFDLFFBQU8sWUFBVyxDQUFDLFFBQU8sYUFBWSxDQUFDLFFBQU8sT0FBTSxVQUFTLGFBQVksQ0FBQyxTQUFRLFlBQVcsQ0FBQyxRQUFPLGFBQVksQ0FBQyxTQUFRLGlCQUFnQixDQUFDLFlBQVcsT0FBTSxlQUFjLENBQUMsUUFBTyxZQUFXLENBQUMsUUFBTyxXQUFVLENBQUMsT0FBTSxjQUFhLENBQUMsT0FBTSxRQUFPLFFBQU8sT0FBTSxRQUFPLE9BQU0sTUFBSyxRQUFPLGlCQUFnQixDQUFDLFFBQU8sWUFBVyxDQUFDLFNBQVEsYUFBWSxDQUFDLFFBQU8sUUFBTyxhQUFZLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxRQUFPLGFBQVksQ0FBQyxTQUFRLGVBQWMsQ0FBQyxVQUFTLFNBQVEsNkJBQTRCLENBQUMsUUFBTyxjQUFhLENBQUMsS0FBSSxNQUFLLFFBQU8sT0FBTSxNQUFLLE9BQU0sZUFBYyxDQUFDLFFBQU8saUJBQWdCLENBQUMsT0FBTSxRQUFPLFNBQVEsY0FBYSxDQUFDLFVBQVMsWUFBVyxDQUFDLFFBQU8sWUFBVyxDQUFDLFNBQVEsYUFBWSxDQUFDLFFBQU8sUUFBTyxjQUFhLENBQUMsT0FBTSxTQUFRLGVBQWMsQ0FBQyxRQUFPLGNBQWEsQ0FBQyxTQUFRLGNBQWEsQ0FBQyxTQUFRLGNBQWEsQ0FBQyxTQUFRLHFCQUFvQixDQUFDLFFBQU8sY0FBYSxDQUFDLFNBQVEsYUFBWSxDQUFDLFFBQU8sU0FBUSxhQUFZLENBQUMsT0FBTSxTQUFRLGNBQWEsQ0FBQyxPQUFNLGFBQVksQ0FBQyxPQUFNLFFBQU8sU0FBUSxjQUFhLENBQUMsUUFBTyxPQUFNLE9BQU0sT0FBTSxRQUFPLGFBQVksQ0FBQyxRQUFPLG1CQUFrQixDQUFDLE1BQUssUUFBTyxjQUFhLENBQUM7QUFBQTs7O0FDQXp4UztBQUFBO0FBRUEsTUFBSSxRQUFlO0FBQ25CLFNBQU8sVUFBVSxJQUFJLE1BQWE7QUFBQTs7O0FDSGxDO0FBd0JBO0FBRUEsc0JBQW9CLE9BQU07QUFDeEIsUUFBSSxPQUFPLFNBQVM7QUFDbEIsWUFBTSxJQUFJLFVBQVUscUNBQXFDLEtBQUssVUFBVTtBQUFBO0FBSzVFLGdDQUE4QixPQUFNLGdCQUFnQjtBQU1sRCxhQUxJLE1BQU0sSUFDTixvQkFBb0IsR0FDcEIsWUFBWSxJQUNaLE9BQU8sR0FDUCxNQUNLLElBQUksR0FBRyxLQUFLLE1BQUssUUFBUSxFQUFFLEdBQUc7QUFDckMsVUFBSSxJQUFJLE1BQUs7QUFDWCxlQUFPLE1BQUssV0FBVztBQUFBLFdBQ3BCO0FBQUEsWUFBSSxTQUFTO0FBQ2hCO0FBRUEsZUFBTztBQUFBO0FBQ1QsVUFBSSxTQUFTLElBQVU7QUFDckIsWUFBSSxnQkFBYyxJQUFJLEtBQUssU0FBUztBQUU3QixjQUFJLGNBQWMsSUFBSSxLQUFLLFNBQVMsR0FBRztBQUM1QyxnQkFBSSxJQUFJLFNBQVMsS0FBSyxzQkFBc0IsS0FBSyxJQUFJLFdBQVcsSUFBSSxTQUFTLE9BQU8sTUFBWSxJQUFJLFdBQVcsSUFBSSxTQUFTLE9BQU87QUFDakksa0JBQUksSUFBSSxTQUFTLEdBQUc7QUFDbEIsb0JBQUksaUJBQWlCLElBQUksWUFBWTtBQUNyQyxvQkFBSSxtQkFBbUIsSUFBSSxTQUFTLEdBQUc7QUFDckMsa0JBQUksbUJBQW1CLEtBQ3JCLE9BQU0sSUFDTixvQkFBb0IsS0FFcEIsT0FBTSxJQUFJLE1BQU0sR0FBRyxpQkFDbkIsb0JBQW9CLElBQUksU0FBUyxJQUFJLElBQUksWUFBWSxPQUV2RCxZQUFZLEdBQ1osT0FBTztBQUNQO0FBQUE7QUFBQSx5QkFFTyxJQUFJLFdBQVcsS0FBSyxJQUFJLFdBQVcsR0FBRztBQUMvQyxzQkFBTSxJQUNOLG9CQUFvQixHQUNwQixZQUFZLEdBQ1osT0FBTztBQUNQO0FBQUE7QUFBQTtBQUdKLFlBQUksa0JBQ0YsQ0FBSSxJQUFJLFNBQVMsSUFDZixPQUFPLFFBRVAsTUFBTSxNQUNSLG9CQUFvQjtBQUFBO0FBR3RCLFlBQUksSUFBSSxTQUFTLElBQ2YsT0FBTyxNQUFNLE1BQUssTUFBTSxZQUFZLEdBQUcsS0FFdkMsTUFBTSxNQUFLLE1BQU0sWUFBWSxHQUFHLElBQ2xDLG9CQUFvQixJQUFJLFlBQVk7QUFFdEMsb0JBQVksR0FDWixPQUFPO0FBQUE7QUFDRixRQUFJLFNBQVMsTUFBWSxTQUFTLEtBQ3ZDLEVBQUUsT0FFRixPQUFPO0FBQUE7QUFHWCxXQUFPO0FBQUE7QUFHVCxtQkFBaUIsS0FBSyxZQUFZO0FBQ2hDLFFBQUksTUFBTSxXQUFXLE9BQU8sV0FBVyxNQUNuQyxPQUFPLFdBQVcsUUFBUyxZQUFXLFFBQVEsTUFBTyxZQUFXLE9BQU87QUFDM0UsV0FBSyxNQUdELFFBQVEsV0FBVyxPQUNkLE1BQU0sT0FFUixNQUFNLE1BQU0sT0FMVjtBQUFBO0FBUVgsTUFBSSxRQUFRO0FBQUEsSUFFVixTQUFTLFdBQW1CO0FBSzFCLGVBSkksZUFBZSxJQUNmLG1CQUFtQixJQUNuQixLQUVLLElBQUksVUFBVSxTQUFTLEdBQUcsS0FBSyxNQUFNLENBQUMsa0JBQWtCLEtBQUs7QUFDcEUsWUFBSTtBQVlKLFFBWEEsQUFBSSxLQUFLLElBQ1AsUUFBTyxVQUFVLEtBRWIsU0FBUSxVQUNWLE9BQU0sUUFBUSxRQUNoQixRQUFPLE1BR1QsV0FBVyxRQUdQLE1BQUssV0FBVyxLQUlwQixnQkFBZSxRQUFPLE1BQU0sY0FDNUIsbUJBQW1CLE1BQUssV0FBVyxPQUFPO0FBQUE7QUFTNUMsYUFGQSxlQUFlLHFCQUFxQixjQUFjLENBQUMsbUJBRS9DLG1CQUNFLGFBQWEsU0FBUyxJQUNqQixNQUFNLGVBRU4sTUFDQSxhQUFhLFNBQVMsSUFDeEIsZUFFQTtBQUFBO0FBQUEsSUFJWCxXQUFXLFNBQW1CLE9BQU07QUFHbEMsVUFGQSxXQUFXLFFBRVAsTUFBSyxXQUFXO0FBQUcsZUFBTztBQUU5QixVQUFJLGNBQWEsTUFBSyxXQUFXLE9BQU8sSUFDcEMsb0JBQW9CLE1BQUssV0FBVyxNQUFLLFNBQVMsT0FBTztBQVE3RCxhQUxBLFFBQU8scUJBQXFCLE9BQU0sQ0FBQyxjQUUvQixNQUFLLFdBQVcsS0FBSyxDQUFDLGVBQVksU0FBTyxNQUN6QyxNQUFLLFNBQVMsS0FBSyxxQkFBbUIsVUFBUSxNQUU5QyxjQUFtQixNQUFNLFFBQ3RCO0FBQUE7QUFBQSxJQUdULFlBQVksU0FBb0IsT0FBTTtBQUNwQyx3QkFBVyxRQUNKLE1BQUssU0FBUyxLQUFLLE1BQUssV0FBVyxPQUFPO0FBQUE7QUFBQSxJQUduRCxNQUFNLFdBQWdCO0FBQ3BCLFVBQUksVUFBVSxXQUFXO0FBQ3ZCLGVBQU87QUFFVCxlQURJLFFBQ0ssSUFBSSxHQUFHLElBQUksVUFBVSxRQUFRLEVBQUUsR0FBRztBQUN6QyxZQUFJLE1BQU0sVUFBVTtBQUNwQixtQkFBVyxNQUNQLElBQUksU0FBUyxLQUNmLENBQUksV0FBVyxTQUNiLFNBQVMsTUFFVCxVQUFVLE1BQU07QUFBQTtBQUd0QixhQUFJLFdBQVcsU0FDTixNQUNGLE1BQU0sVUFBVTtBQUFBO0FBQUEsSUFHekIsVUFBVSxTQUFrQixNQUFNLElBQUk7QUFTcEMsVUFSQSxXQUFXLE9BQ1gsV0FBVyxLQUVQLFNBQVMsTUFFYixRQUFPLE1BQU0sUUFBUSxPQUNyQixLQUFLLE1BQU0sUUFBUSxLQUVmLFNBQVM7QUFBSSxlQUFPO0FBSXhCLGVBREksWUFBWSxHQUNULFlBQVksS0FBSyxVQUNsQixLQUFLLFdBQVcsZUFBZSxJQURMLEVBQUU7QUFDaEM7QUFRRixlQUxJLFVBQVUsS0FBSyxRQUNmLFVBQVUsVUFBVSxXQUdwQixVQUFVLEdBQ1AsVUFBVSxHQUFHLFVBQ2QsR0FBRyxXQUFXLGFBQWEsSUFETCxFQUFFO0FBQzVCO0FBVUYsZUFQSSxRQUFRLEdBQUcsUUFDWCxRQUFRLFFBQVEsU0FHaEIsU0FBUyxVQUFVLFFBQVEsVUFBVSxPQUNyQyxnQkFBZ0IsSUFDaEIsSUFBSSxHQUNELEtBQUssUUFBUSxFQUFFLEdBQUc7QUFDdkIsWUFBSSxNQUFNLFFBQVE7QUFDaEIsY0FBSSxRQUFRLFFBQVE7QUFDbEIsZ0JBQUksR0FBRyxXQUFXLFVBQVUsT0FBTztBQUdqQyxxQkFBTyxHQUFHLE1BQU0sVUFBVSxJQUFJO0FBQ3pCLGdCQUFJLE1BQU07QUFHZixxQkFBTyxHQUFHLE1BQU0sVUFBVTtBQUFBO0FBRXZCLFlBQUksVUFBVSxVQUNuQixDQUFJLEtBQUssV0FBVyxZQUFZLE9BQU8sS0FHckMsZ0JBQWdCLElBQ1AsTUFBTSxLQUdmLGlCQUFnQjtBQUdwQjtBQUFBO0FBRUYsWUFBSSxXQUFXLEtBQUssV0FBVyxZQUFZLElBQ3ZDLFNBQVMsR0FBRyxXQUFXLFVBQVU7QUFDckMsWUFBSSxhQUFhO0FBQ2Y7QUFDRyxRQUFJLGFBQWEsTUFDcEIsaUJBQWdCO0FBQUE7QUFHcEIsVUFBSSxNQUFNO0FBR1YsV0FBSyxJQUFJLFlBQVksZ0JBQWdCLEdBQUcsS0FBSyxTQUFTLEVBQUU7QUFDdEQsUUFBSSxPQUFNLFdBQVcsS0FBSyxXQUFXLE9BQU8sT0FDMUMsQ0FBSSxJQUFJLFdBQVcsSUFDakIsT0FBTyxPQUVQLE9BQU87QUFNYixhQUFJLElBQUksU0FBUyxJQUNSLE1BQU0sR0FBRyxNQUFNLFVBQVUsaUJBRWhDLFlBQVcsZUFDUCxHQUFHLFdBQVcsYUFBYSxNQUM3QixFQUFFLFNBQ0csR0FBRyxNQUFNO0FBQUE7QUFBQSxJQUlwQixXQUFXLFNBQW1CLE9BQU07QUFDbEMsYUFBTztBQUFBO0FBQUEsSUFHVCxTQUFTLFNBQWlCLE9BQU07QUFFOUIsVUFEQSxXQUFXLFFBQ1AsTUFBSyxXQUFXO0FBQUcsZUFBTztBQUs5QixlQUpJLE9BQU8sTUFBSyxXQUFXLElBQ3ZCLFVBQVUsU0FBUyxJQUNuQixNQUFNLElBQ04sZUFBZSxJQUNWLElBQUksTUFBSyxTQUFTLEdBQUcsS0FBSyxHQUFHLEVBQUU7QUFFdEMsWUFEQSxPQUFPLE1BQUssV0FBVyxJQUNuQixTQUFTO0FBQ1QsY0FBSSxDQUFDLGNBQWM7QUFDakIsa0JBQU07QUFDTjtBQUFBO0FBQUE7QUFJSix5QkFBZTtBQUluQixhQUFJLFFBQVEsS0FBVyxVQUFVLE1BQU0sTUFDbkMsV0FBVyxRQUFRLElBQVUsT0FDMUIsTUFBSyxNQUFNLEdBQUc7QUFBQTtBQUFBLElBR3ZCLFVBQVUsU0FBa0IsT0FBTSxLQUFLO0FBQ3JDLFVBQUksUUFBUSxVQUFhLE9BQU8sT0FBUTtBQUFVLGNBQU0sSUFBSSxVQUFVO0FBQ3RFLGlCQUFXO0FBRVgsVUFBSSxRQUFRLEdBQ1IsTUFBTSxJQUNOLGVBQWUsSUFDZjtBQUVKLFVBQUksUUFBUSxVQUFhLElBQUksU0FBUyxLQUFLLElBQUksVUFBVSxNQUFLLFFBQVE7QUFDcEUsWUFBSSxJQUFJLFdBQVcsTUFBSyxVQUFVLFFBQVE7QUFBTSxpQkFBTztBQUN2RCxZQUFJLFNBQVMsSUFBSSxTQUFTLEdBQ3RCLG1CQUFtQjtBQUN2QixhQUFLLElBQUksTUFBSyxTQUFTLEdBQUcsS0FBSyxHQUFHLEVBQUUsR0FBRztBQUNyQyxjQUFJLE9BQU8sTUFBSyxXQUFXO0FBQzNCLGNBQUksU0FBUztBQUdULGdCQUFJLENBQUMsY0FBYztBQUNqQixzQkFBUSxJQUFJO0FBQ1o7QUFBQTtBQUFBO0FBR0osWUFBSSxxQkFBcUIsTUFHdkIsZ0JBQWUsSUFDZixtQkFBbUIsSUFBSSxJQUVyQixVQUFVLEtBRVosQ0FBSSxTQUFTLElBQUksV0FBVyxVQUN0QixFQUFFLFVBQVcsTUFHZixPQUFNLEtBS1IsVUFBUyxJQUNULE1BQU07QUFBQTtBQU1kLGVBQUksVUFBVSxNQUFLLE1BQU0sbUJBQTBCLFFBQVEsTUFBSSxPQUFNLE1BQUssU0FDbkUsTUFBSyxNQUFNLE9BQU87QUFBQSxhQUNwQjtBQUNMLGFBQUssSUFBSSxNQUFLLFNBQVMsR0FBRyxLQUFLLEdBQUcsRUFBRTtBQUNsQyxjQUFJLE1BQUssV0FBVyxPQUFPO0FBR3ZCLGdCQUFJLENBQUMsY0FBYztBQUNqQixzQkFBUSxJQUFJO0FBQ1o7QUFBQTtBQUFBO0FBRUcsWUFBSSxRQUFRLE1BR25CLGdCQUFlLElBQ2YsTUFBTSxJQUFJO0FBSWQsZUFBSSxRQUFRLEtBQVcsS0FDaEIsTUFBSyxNQUFNLE9BQU87QUFBQTtBQUFBO0FBQUEsSUFJN0IsU0FBUyxTQUFpQixPQUFNO0FBQzlCLGlCQUFXO0FBUVgsZUFQSSxXQUFXLElBQ1gsWUFBWSxHQUNaLE1BQU0sSUFDTixlQUFlLElBR2YsY0FBYyxHQUNULElBQUksTUFBSyxTQUFTLEdBQUcsS0FBSyxHQUFHLEVBQUUsR0FBRztBQUN6QyxZQUFJLE9BQU8sTUFBSyxXQUFXO0FBQzNCLFlBQUksU0FBUyxJQUFVO0FBR25CLGNBQUksQ0FBQyxjQUFjO0FBQ2pCLHdCQUFZLElBQUk7QUFDaEI7QUFBQTtBQUVGO0FBQUE7QUFFSixRQUFJLFFBQVEsTUFHVixnQkFBZSxJQUNmLE1BQU0sSUFBSSxJQUVaLEFBQUksU0FBUyxLQUVULEFBQUksYUFBYSxLQUNmLFdBQVcsSUFDSixnQkFBZ0IsS0FDdkIsZUFBYyxLQUNULGFBQWEsTUFHdEIsZUFBYztBQUFBO0FBSWxCLGFBQUksYUFBYSxNQUFNLFFBQVEsTUFFM0IsZ0JBQWdCLEtBRWhCLGdCQUFnQixLQUFLLGFBQWEsTUFBTSxLQUFLLGFBQWEsWUFBWSxJQUNqRSxLQUVGLE1BQUssTUFBTSxVQUFVO0FBQUE7QUFBQSxJQUc5QixRQUFRLFNBQWdCLFlBQVk7QUFDbEMsVUFBSSxlQUFlLFFBQVEsT0FBTyxjQUFlO0FBQy9DLGNBQU0sSUFBSSxVQUFVLHFFQUFxRSxPQUFPO0FBRWxHLGFBQU8sUUFBUSxLQUFLO0FBQUE7QUFBQSxJQUd0QixPQUFPLFNBQWUsT0FBTTtBQUMxQixpQkFBVztBQUVYLFVBQUksTUFBTSxDQUFFLE1BQU0sSUFBSSxLQUFLLElBQUksTUFBTSxJQUFJLEtBQUssSUFBSSxNQUFNO0FBQ3hELFVBQUksTUFBSyxXQUFXO0FBQUcsZUFBTztBQUM5QixVQUFJLE9BQU8sTUFBSyxXQUFXLElBQ3ZCLGNBQWEsU0FBUyxJQUN0QjtBQUNKLE1BQUksY0FDRixLQUFJLE9BQU8sS0FDWCxRQUFRLEtBRVIsUUFBUTtBQWFWLGVBWEksV0FBVyxJQUNYLFlBQVksR0FDWixNQUFNLElBQ04sZUFBZSxJQUNmLElBQUksTUFBSyxTQUFTLEdBSWxCLGNBQWMsR0FHWCxLQUFLLE9BQU8sRUFBRSxHQUFHO0FBRXRCLFlBREEsT0FBTyxNQUFLLFdBQVcsSUFDbkIsU0FBUyxJQUFVO0FBR25CLGNBQUksQ0FBQyxjQUFjO0FBQ2pCLHdCQUFZLElBQUk7QUFDaEI7QUFBQTtBQUVGO0FBQUE7QUFFSixRQUFJLFFBQVEsTUFHVixnQkFBZSxJQUNmLE1BQU0sSUFBSSxJQUVaLEFBQUksU0FBUyxLQUVULEFBQUksYUFBYSxLQUFJLFdBQVcsSUFBVyxnQkFBZ0IsS0FBRyxlQUFjLEtBQ25FLGFBQWEsTUFHeEIsZUFBYztBQUFBO0FBSWxCLGFBQUksYUFBYSxNQUFNLFFBQVEsTUFFL0IsZ0JBQWdCLEtBRWhCLGdCQUFnQixLQUFLLGFBQWEsTUFBTSxLQUFLLGFBQWEsWUFBWSxJQUNoRSxRQUFRLE1BQ1YsQ0FBSSxjQUFjLEtBQUssY0FBWSxJQUFJLE9BQU8sSUFBSSxPQUFPLE1BQUssTUFBTSxHQUFHLE9BQVUsSUFBSSxPQUFPLElBQUksT0FBTyxNQUFLLE1BQU0sV0FBVyxRQUcvSCxDQUFJLGNBQWMsS0FBSyxjQUNyQixLQUFJLE9BQU8sTUFBSyxNQUFNLEdBQUcsV0FDekIsSUFBSSxPQUFPLE1BQUssTUFBTSxHQUFHLFFBRXpCLEtBQUksT0FBTyxNQUFLLE1BQU0sV0FBVyxXQUNqQyxJQUFJLE9BQU8sTUFBSyxNQUFNLFdBQVcsT0FFbkMsSUFBSSxNQUFNLE1BQUssTUFBTSxVQUFVLE9BR2pDLEFBQUksWUFBWSxJQUFHLElBQUksTUFBTSxNQUFLLE1BQU0sR0FBRyxZQUFZLEtBQVksZUFBWSxLQUFJLE1BQU0sTUFFbEY7QUFBQTtBQUFBLElBR1QsS0FBSztBQUFBLElBQ0wsV0FBVztBQUFBLElBQ1gsT0FBTztBQUFBLElBQ1AsT0FBTztBQUFBO0FBR1QsUUFBTSxRQUFRO0FBRWQsU0FBTyxVQUFVO0FBQUE7OztBQ2hoQmpCO0FBQUEsRUFBQyxlQUFTO0FBQ1YsUUFBSSxhQUFZLE9BQU8sZ0JBQ25CLGtCQUFpQixDQUFDLFdBQVcsV0FBVSxRQUFRLGNBQWMsQ0FBQyxPQUFPLE1BQ3JFLFlBQVcsQ0FBQyxRQUFRLFFBQVE7QUFDOUIsZUFBUyxRQUFRO0FBQ2YsbUJBQVUsUUFBUSxNQUFNLENBQUMsS0FBSyxJQUFJLE9BQU8sWUFBWTtBQUFBLE9BRXJELFVBQVUsQ0FBQyxRQUFRLGFBQWEsY0FDM0IsSUFBSSxRQUFRLENBQUMsU0FBUyxXQUFXO0FBQ3RDLFVBQUksWUFBWSxDQUFDLFVBQVU7QUFDekIsWUFBSTtBQUNGLGVBQUssVUFBVSxLQUFLO0FBQUEsaUJBQ2IsR0FBUDtBQUNBLGlCQUFPO0FBQUE7QUFBQSxTQUdQLFdBQVcsQ0FBQyxVQUFVO0FBQ3hCLFlBQUk7QUFDRixlQUFLLFVBQVUsTUFBTTtBQUFBLGlCQUNkLEdBQVA7QUFDQSxpQkFBTztBQUFBO0FBQUEsU0FHUCxPQUFPLENBQUMsV0FDSCxPQUFPLE9BQU8sUUFBUSxPQUFPLFNBQVMsUUFBUSxRQUFRLE9BQU8sT0FBTyxLQUFLLFdBQVc7QUFFN0YsV0FBTSxhQUFZLFVBQVUsTUFBTSxRQUFRLGNBQWM7QUFBQTtBQUs1RCxvQkFBZSxXQUNmLFVBQVMsVUFBUztBQUFBLE1BQ2hCLE9BQU8sTUFBTTtBQUFBLE1BQ2IsV0FBVyxNQUFNO0FBQUEsTUFDakIsWUFBWSxNQUFNO0FBQUEsTUFDbEIsT0FBTyxNQUFNO0FBQUEsTUFDYixXQUFXLE1BQU07QUFBQSxNQUNqQixlQUFlLE1BQU07QUFBQSxNQUNyQixTQUFTLE1BQU07QUFBQTtBQUlqQiwwQkFBc0IsUUFBUTtBQUM1QixVQUFJLFFBQVEsQ0FBQyxVQUFVO0FBQ3JCLFlBQUksVUFBVTtBQUNaLGFBQUcsT0FBTztBQUFBLGlCQUNELE9BQU8sU0FBVTtBQUMxQixhQUFHLE9BQU8sSUFDVixHQUFHLE9BQU8sQ0FBQztBQUFBLGlCQUNGLE9BQU8sU0FBVTtBQUMxQixhQUFHLE9BQU8sSUFDVixHQUFHLFFBQVEsUUFBUTtBQUFBLGlCQUNWLE9BQU8sU0FBVTtBQUMxQixhQUFHLE9BQU8sSUFDVixHQUFHLE1BQU0sV0FBVztBQUFBLGlCQUNYLGlCQUFpQjtBQUMxQixhQUFHLE9BQU8sSUFDVixHQUFHLE1BQU07QUFBQSxpQkFDQSxpQkFBaUIsT0FBTztBQUNqQyxhQUFHLE9BQU8sSUFDVixHQUFHLFFBQVEsTUFBTTtBQUNqQixtQkFBUyxRQUFRO0FBQ2Ysa0JBQU07QUFBQSxlQUVIO0FBQ0wsY0FBSSxRQUFPLE9BQU8sS0FBSztBQUN2QixhQUFHLE9BQU8sSUFDVixHQUFHLFFBQVEsTUFBSztBQUNoQixtQkFBUyxPQUFPO0FBQ2QsZUFBRyxNQUFNLFdBQVcsT0FDcEIsTUFBTSxNQUFNO0FBQUE7QUFBQSxTQUlkLEtBQUssSUFBSTtBQUNiLGdCQUFHLFFBQVEsSUFDWCxHQUFHLFFBQVEsT0FBTyxNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sWUFDckMsTUFBTSxPQUFPLFFBQ2IsY0FBYyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsSUFDM0IsR0FBRyxJQUFJLFNBQVMsR0FBRyxHQUFHO0FBQUE7QUFFL0IsMEJBQXNCLE9BQU87QUFDM0IsVUFBSSxRQUFRLE1BQU07QUFDaEIsZ0JBQVEsR0FBRztBQUFBLGVBQ0o7QUFDSCxtQkFBTztBQUFBLGVBQ0o7QUFDSCxtQkFBTyxDQUFDLENBQUMsR0FBRztBQUFBLGVBQ1Q7QUFDSCxtQkFBTyxHQUFHO0FBQUEsZUFDUDtBQUNILG1CQUFPLFdBQVcsR0FBRztBQUFBLGVBQ2xCO0FBQ0gsbUJBQU8sR0FBRztBQUFBLGVBQ1AsR0FBRztBQUNOLGdCQUFJLFFBQVEsR0FBRyxVQUNYLFNBQVM7QUFDYixxQkFBUyxJQUFJLEdBQUcsSUFBSSxPQUFPO0FBQ3pCLHFCQUFPLEtBQUs7QUFFZCxtQkFBTztBQUFBO0FBQUEsZUFFSixHQUFHO0FBQ04sZ0JBQUksUUFBUSxHQUFHLFVBQ1gsU0FBUztBQUNiLHFCQUFTLElBQUksR0FBRyxJQUFJLE9BQU87QUFDekIscUJBQU8sV0FBVyxHQUFHLFdBQVc7QUFFbEMsbUJBQU87QUFBQTtBQUFBO0FBR1Asa0JBQU0sSUFBSSxNQUFNO0FBQUE7QUFBQSxTQUdsQixLQUFLLElBQUksV0FBVyxRQUNwQixLQUFLLEdBQUcsVUFDUixZQUFhLE1BQUssTUFBTztBQUM3QixjQUFRO0FBQ1IsVUFBSSxRQUFRO0FBQ1osVUFBSSxHQUFHLFFBQVEsTUFBTTtBQUNuQixjQUFNLElBQUksTUFBTTtBQUVsQixhQUFPLENBQUMsSUFBSSxXQUFXO0FBQUE7QUFFekIsUUFBSSxhQUFhLE1BQU07QUFBQSxNQUNyQixZQUFZLE1BQU0sSUFBSSxXQUFXLE9BQU87QUFDdEMsYUFBSyxNQUFNLEtBQ1gsS0FBSyxNQUFNLEdBQ1gsS0FBSyxNQUFNO0FBQUE7QUFBQSxNQUViLE9BQU8sT0FBTztBQUNaLFlBQUksS0FBSyxNQUFNLFFBQVEsS0FBSyxJQUFJLFFBQVE7QUFDdEMsY0FBSSxRQUFRLElBQUksV0FBWSxNQUFLLE1BQU0sU0FBUztBQUNoRCxnQkFBTSxJQUFJLEtBQUssTUFDZixLQUFLLE1BQU07QUFBQTtBQUViLG9CQUFLLE9BQU8sT0FDTCxLQUFLLE1BQU07QUFBQTtBQUFBLE1BRXBCLE9BQU8sT0FBTztBQUNaLFlBQUksU0FBUyxLQUFLLE9BQU87QUFDekIsYUFBSyxJQUFJLFVBQVU7QUFBQTtBQUFBLE1BRXJCLFFBQVEsT0FBTztBQUNiLFlBQUksU0FBUyxLQUFLLE9BQU87QUFDekIsc0JBQWMsS0FBSyxLQUFLLE9BQU87QUFBQTtBQUFBLE1BRWpDLE1BQU0sT0FBTztBQUNYLFlBQUksU0FBUyxLQUFLLE9BQU8sSUFBSSxNQUFNO0FBQ25DLHNCQUFjLEtBQUssS0FBSyxNQUFNLFFBQVEsU0FDdEMsS0FBSyxJQUFJLElBQUksT0FBTyxTQUFTO0FBQUE7QUFBQSxNQUUvQixNQUFNLE9BQU87QUFDWCxZQUFJLEtBQUssTUFBTSxRQUFRLEtBQUssSUFBSTtBQUM5QixnQkFBTSxJQUFJLE1BQU07QUFFbEIsb0JBQUssT0FBTyxPQUNMLEtBQUssTUFBTTtBQUFBO0FBQUEsTUFFcEIsUUFBUTtBQUNOLGVBQU8sS0FBSyxJQUFJLEtBQUssTUFBTTtBQUFBO0FBQUEsTUFFN0IsU0FBUztBQUNQLGVBQU8sYUFBYSxLQUFLLEtBQUssS0FBSyxNQUFNO0FBQUE7QUFBQSxNQUUzQyxPQUFPO0FBQ0wsWUFBSSxTQUFTLEtBQUssVUFDZCxRQUFRLElBQUksV0FBVyxTQUN2QixNQUFNLEtBQUssTUFBTSxNQUFNO0FBQzNCLHFCQUFNLElBQUksS0FBSyxJQUFJLFNBQVMsS0FBSyxNQUFNLFVBQ2hDO0FBQUE7QUFBQSxPQUdQLFlBQ0E7QUFDSixRQUFJLE9BQU8sZUFBZ0IsZUFBZSxPQUFPLGVBQWdCLGFBQWE7QUFDNUUsVUFBSSxVQUFVLElBQUksZUFDZCxVQUFVLElBQUk7QUFDbEIsbUJBQWEsQ0FBQyxTQUFTLFFBQVEsT0FBTyxPQUN0QyxhQUFhLENBQUMsVUFBVSxRQUFRLE9BQU87QUFBQSxlQUM5QixPQUFPLFVBQVc7QUFDM0IsbUJBQWEsQ0FBQyxTQUFTO0FBQ3JCLFlBQUksU0FBUyxPQUFPLEtBQUs7QUFDekIsZUFBTSxrQkFBa0IsY0FDdEIsVUFBUyxJQUFJLFdBQVcsVUFFbkI7QUFBQSxTQUVULGFBQWEsQ0FBQyxVQUFVLE9BQU8sS0FBSyxPQUFPO0FBQUE7QUFFM0MsWUFBTSxJQUFJLE1BQU07QUFFbEIsMEJBQXNCLFFBQVEsUUFBUTtBQUNwQyxhQUFPLE9BQU8sWUFBWSxPQUFPLGFBQWEsSUFBSSxPQUFPLGFBQWEsS0FBSyxPQUFPLGFBQWE7QUFBQTtBQUVqRywyQkFBdUIsUUFBUSxPQUFPLFFBQVE7QUFDNUMsYUFBTyxZQUFZLE9BQ25CLE9BQU8sWUFBWSxTQUFTLEdBQzVCLE9BQU8sWUFBWSxTQUFTLElBQzVCLE9BQU8sWUFBWSxTQUFTO0FBQUE7QUFJOUIsNEJBQXdCLFFBQVE7QUFFOUIsVUFEQSxVQUFVLElBQ04sT0FBTyxRQUFRLFFBQVE7QUFDekIsY0FBTSxJQUFJLE1BQU0sbUJBQW1CO0FBQ3JDLGFBQU87QUFBQTtBQUVULFFBQUksZ0JBQWdCLE1BQU0sTUFDdEIsZ0JBQWdCLENBQUMsVUFBVSxPQUFPLFNBQVUsWUFBWSxPQUFPLGFBQy9ELHdCQUF3QixDQUFDLFVBQVUsT0FBTyxTQUFVLGFBQWEsT0FBTyxTQUFVLFlBQVksQ0FBQyxNQUFNLFFBQVEsU0FBUyxPQUFPLDBCQUM3SCxlQUFlLENBQUMsVUFBVSxPQUFPLFNBQVUsV0FBVyxPQUFPLFlBQzdELGVBQWUsQ0FBQyxVQUFVLGlCQUFpQixTQUFTLE9BQU8sbUJBQzNELGdCQUFnQixDQUFDLFVBQVUsT0FBTyxTQUFVLFlBQVksVUFBVyxTQUFRLEtBQUssT0FBTyxjQUN2RixpQkFBaUIsQ0FBQyxVQUFVLE9BQU8sU0FBVSxhQUFhLE9BQU8sY0FDakUsY0FBYyxDQUFDLFVBQVUsTUFBTSxRQUFRLFNBQVMsT0FBTyxZQUN2RCxlQUFlLENBQUMsVUFBVSxPQUFPLFNBQVUsWUFBWSxVQUFVLFFBQVEsQ0FBQyxNQUFNLFFBQVEsU0FBUyxPQUFPLGFBQ3hHLHFCQUFxQixDQUFDLFVBQVUsT0FBTyxTQUFVLFlBQVksQ0FBQyxNQUFNLFFBQVEsU0FBUyxPQUFPLHFCQUM1Rix3QkFBd0IsQ0FBQyxVQUFVLE9BQU8sU0FBVSxZQUFZLE9BQU8sU0FBVSxZQUFZLE9BQU8seUJBQ3BHLHVCQUF1QixDQUFDLFVBQVUsT0FBTyxTQUFVLFlBQVksT0FBTyxTQUFVLFlBQVksVUFBVSxRQUFRLENBQUMsTUFBTSxRQUFRLFNBQVMsT0FBTyx5QkFDN0ksc0JBQXNCLENBQUMsVUFBVSxPQUFPLFNBQVUsWUFBWSxNQUFNLFFBQVEsU0FBUyxPQUFPLHdCQUM1RiwyQkFBMkIsQ0FBQyxVQUFVLE9BQU8sU0FBVSxZQUFZLGlCQUFpQixhQUFhLE9BQU87QUFDNUcscUJBQWlCLFFBQVEsT0FBTSxLQUFLLFVBQVU7QUFDNUMsVUFBSSxRQUFRLE9BQU87QUFFbkIsVUFEQSxNQUFLLE1BQU0sTUFBTSxJQUNiLFVBQVU7QUFDWjtBQUNGLFVBQUksU0FBUyxTQUFTO0FBQ3RCLFVBQUksV0FBVztBQUNiLGNBQU0sSUFBSSxNQUFNLElBQUksZ0JBQWdCO0FBQ3RDLGFBQU87QUFBQTtBQUVULGtDQUE4QixRQUFRLE9BQU0sT0FBTztBQUNqRCxlQUFTLE9BQU87QUFDZCxZQUFJLENBQUUsUUFBTztBQUNYLGdCQUFNLElBQUksTUFBTSxrQkFBa0IsV0FBVztBQUFBO0FBSW5ELHVDQUFtQyxTQUFTO0FBQzFDLFVBQUksUUFBTyxPQUFPLE9BQU8sT0FDckIsVUFBVSxRQUFRLFNBQVMsT0FBTSxXQUFXLGVBQzVDLFNBQVMsUUFBUSxTQUFTLE9BQU0sVUFBVTtBQUM5QyxrQ0FBcUIsU0FBUyxPQUFNLDJCQUM3QjtBQUFBLFFBQ0w7QUFBQSxRQUNBO0FBQUE7QUFBQTtBQUdKLDBCQUFzQixPQUFPLFNBQVMsT0FBTSxPQUFPLGlCQUFpQjtBQUNsRSxVQUFJLFFBQVEsUUFBUSxTQUFTLE9BQU0sU0FBUyxnQkFDeEMsV0FBVyxRQUFRLFNBQVMsT0FBTSxZQUFZLGVBQzlDLFdBQVcsUUFBUSxTQUFTLE9BQU0sWUFBWTtBQUNsRCxNQUFJLFFBQ0YsTUFBTSxLQUFLLFdBQVcsV0FDZixTQUNQLE1BQU0sS0FBSyxpQkFDYixNQUFNLEtBQUssZUFBZSxZQUFZLG9CQUN0QyxNQUFNLEtBQUssZUFBZSxZQUFZO0FBQUE7QUFFeEMsNkJBQXlCLE9BQU8sU0FBUyxPQUFNO0FBQzdDLFVBQUksaUJBQWlCLFFBQVEsU0FBUyxPQUFNLGtCQUFrQixnQkFDMUQsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLHNCQUMxQyxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsZUFDMUMsYUFBYSxRQUFRLFNBQVMsT0FBTSxjQUFjLGVBQ2xELFNBQVMsUUFBUSxTQUFTLE9BQU0sVUFBVSxnQkFDMUMsZUFBZSxRQUFRLFNBQVMsT0FBTSxnQkFBZ0IsZ0JBQ3RELG1CQUFtQixRQUFRLFNBQVMsT0FBTSxvQkFBb0IsZ0JBQzlELG9CQUFvQixRQUFRLFNBQVMsT0FBTSxxQkFBcUIsZ0JBQ2hFLFVBQVUsUUFBUSxTQUFTLE9BQU0sV0FBVyxlQUM1QyxjQUFjLFFBQVEsU0FBUyxPQUFNLGVBQWUsd0JBQ3BELGFBQWEsUUFBUSxTQUFTLE9BQU0sY0FBYyxlQUNsRCxjQUFjLFFBQVEsU0FBUyxPQUFNLGVBQWUsZUFDcEQsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGVBQzFDLE9BQU8sUUFBUSxTQUFTLE9BQU0sUUFBUSxjQUN0QyxZQUFZLFFBQVEsU0FBUyxPQUFNLGFBQWE7QUE2QnBELFVBNUJJLG1CQUFtQixVQUNyQixNQUFNLEtBQUsscUJBQXFCLG1CQUM5QixVQUNGLENBQUksTUFBTSxRQUFRLFVBQ2hCLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxRQUFRLElBQUksZ0JBQWdCLEtBQUssVUFFbkUsTUFBTSxLQUFLLFlBQVksZUFBZSxhQUV0QyxVQUNGLE1BQU0sS0FBSyxZQUFZLFdBQ3JCLGNBQ0YsTUFBTSxLQUFLLGlCQUFpQixlQUMxQixVQUNGLE1BQU0sS0FBSyxhQUNULGdCQUNGLE1BQU0sS0FBSyxvQkFDVCxvQkFDRixNQUFNLEtBQUssd0JBQ1QscUJBQ0YsTUFBTSxLQUFLLHlCQUNULFdBQ0YsTUFBTSxLQUFLLGFBQWEsWUFDdEIsZ0JBQWdCLFVBQVUsZ0JBQWdCLE1BQzVDLE1BQU0sS0FBSyxrQkFBa0IsZ0JBQzNCLGNBQ0YsTUFBTSxLQUFLLGlCQUFpQixlQUMxQixlQUNGLE1BQU0sS0FBSyxrQkFBa0IsZ0JBQzNCO0FBQ0YsaUJBQVMsT0FBTyxRQUFRO0FBQ3RCLGNBQUksSUFBSSxRQUFRLFFBQVE7QUFDdEIsa0JBQU0sSUFBSSxNQUFNLG1CQUFtQjtBQUNyQyxnQkFBTSxLQUFLLFlBQVksT0FBTyxPQUFPO0FBQUE7QUFHekMsVUFBSTtBQUNGLGlCQUFTLE1BQU07QUFDYixnQkFBTSxLQUFLLFVBQVU7QUFDekIsTUFBSSxhQUNGLE1BQU0sS0FBSztBQUFBO0FBRWYsa0NBQThCLFVBQVUsU0FBUyxPQUFPLGlCQUFpQixjQUFjO0FBQ3JGLFVBQUk7QUFDSixVQUFJLFFBQVEsSUFDUixRQUFPLE9BQU8sT0FBTyxPQUNyQixnQkFBZ0IsTUFDaEIsa0JBQWtCLE1BQ2xCLFlBQVk7QUFDaEIsbUJBQWEsT0FBTyxTQUFTLE9BQU0sT0FBTyxrQkFDMUMsZ0JBQWdCLE9BQU8sU0FBUztBQUNoQyxVQUFJLFlBQVksUUFBUSxTQUFTLE9BQU0sYUFBYSx3QkFDaEQsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGdCQUMxQyxRQUFRLFFBQVEsU0FBUyxPQUFNLFNBQVMsd0JBQ3hDLFlBQVksUUFBUSxTQUFTLE9BQU0sYUFBYSxnQkFDaEQsbUJBQW1CLFFBQVEsU0FBUyxPQUFNLG9CQUFvQixnQkFDOUQsV0FBVyxRQUFRLFNBQVMsT0FBTSxZQUFZLGdCQUM5QyxVQUFVLFFBQVEsU0FBUyxPQUFNLFdBQVcsZUFDNUMsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGVBQzFDLFVBQVUsUUFBUSxTQUFTLE9BQU0sV0FBVyxlQUM1QyxXQUFXLFFBQVEsU0FBUyxPQUFNLFlBQVksZUFDOUMsV0FBVyxRQUFRLFNBQVMsT0FBTSxZQUFZLGVBQzlDLG9CQUFvQixRQUFRLFNBQVMsT0FBTSxxQkFBcUIsY0FDaEUsaUJBQWlCLFFBQVEsU0FBUyxPQUFNLGFBQWEsY0FDckQsYUFBYSxRQUFRLFNBQVMsT0FBTSxjQUFjLGNBQ2xELGFBQWEsUUFBUSxTQUFTLE9BQU0sY0FBYyxjQUNsRCxXQUFXLFFBQVEsU0FBUyxPQUFNLFlBQVksY0FDOUMsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGVBQzFDLGVBQWUsUUFBUSxTQUFTLE9BQU0sZ0JBQWdCLGVBQ3RELGFBQWEsUUFBUSxTQUFTLE9BQU0sY0FBYyxlQUNsRCxhQUFhLFFBQVEsU0FBUyxPQUFNLGNBQWMsZUFDbEQsYUFBYSxRQUFRLFNBQVMsT0FBTSxjQUFjLGVBQ2xELFNBQVMsUUFBUSxTQUFTLE9BQU0sVUFBVSxjQUMxQyxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsZUFDMUMsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGVBQzFDLGNBQWMsUUFBUSxTQUFTLE9BQU0sZUFBZSxjQUNwRCxnQkFBZ0IsUUFBUSxTQUFTLE9BQU0saUJBQWlCLGVBQ3hELFFBQVEsUUFBUSxTQUFTLE9BQU0sU0FBUyxlQUN4QyxRQUFTLE1BQUssUUFBUSxTQUFTLE9BQU0sU0FBUyxtQkFBbUIsT0FBTyxLQUFLLGNBQzdFLGNBQWMsUUFBUSxTQUFTLE9BQU0sZUFBZSxtQkFBbUIsSUFDdkUsVUFBVSxRQUFRLFNBQVMsT0FBTSxXQUFXO0FBTWhELFVBTEEscUJBQXFCLFNBQVMsT0FBTSxNQUFNLG9CQUN0QyxhQUNGLE1BQU0sS0FBSyxjQUFjLGNBQWMsS0FBTyxLQUFLLElBQUksZ0JBQ3JELFVBQ0YsTUFBTSxLQUFLLGFBQ1Q7QUFFRixZQURBLE1BQU0sS0FBSyxZQUNQLE9BQU8sU0FBVTtBQUNuQixzQkFBWTtBQUFBLGFBQ1A7QUFDTCxjQUFJLFlBQVksT0FBTyxPQUFPLE9BQzFCLFlBQVksUUFBUSxPQUFPLFdBQVcsYUFBYTtBQUN2RCwrQkFBcUIsT0FBTyxXQUFXLGlCQUFpQixvQkFDeEQsWUFBWSxDQUFDO0FBQUE7QUFtQmpCLFVBaEJJLGFBQ0YsTUFBTSxLQUFLLGdCQUNULG9CQUNGLE1BQU0sS0FBSyx3QkFDVCxZQUNGLE1BQU0sS0FBSyxlQUNULFdBQ0YsTUFBTSxLQUFLLGFBQWEsWUFDdEIsVUFDRixNQUFNLEtBQUssWUFBWSxXQUNyQixXQUNGLE1BQU0sS0FBSyxhQUFhLFlBQ3RCLFlBQ0YsTUFBTSxLQUFLLGNBQWMsYUFDdkIsWUFDRixNQUFNLEtBQUssY0FBYyxhQUN2QixtQkFBbUI7QUFDckIsWUFBSSxTQUFTO0FBQ2IsaUJBQVMsU0FBUyxtQkFBbUI7QUFFbkMsY0FEQSxTQUFTLElBQ0wsTUFBTSxRQUFRLFFBQVE7QUFDeEIsa0JBQU0sSUFBSSxNQUFNLDhCQUE4QjtBQUNoRCxpQkFBTyxLQUFLO0FBQUE7QUFFZCxjQUFNLEtBQUssd0JBQXdCLE9BQU8sS0FBSztBQUFBO0FBUWpELFVBTkksY0FDRixNQUFNLEtBQUssaUJBQWlCLGVBQzFCLGNBQ0YsTUFBTSxLQUFLLGlCQUFpQixlQUMxQixjQUNGLE1BQU0sS0FBSyxpQkFBaUIsZUFDMUIsWUFBWTtBQUNkLFlBQUksU0FBUztBQUNiLGlCQUFTLFNBQVMsWUFBWTtBQUU1QixjQURBLFNBQVMsSUFDTCxNQUFNLFFBQVEsUUFBUTtBQUN4QixrQkFBTSxJQUFJLE1BQU0sdUJBQXVCO0FBQ3pDLGlCQUFPLEtBQUs7QUFBQTtBQUVkLGNBQU0sS0FBSyxpQkFBaUIsT0FBTyxLQUFLO0FBQUE7QUFFMUMsVUFBSSxZQUFZO0FBQ2QsWUFBSSxTQUFTO0FBQ2IsaUJBQVMsU0FBUyxZQUFZO0FBRTVCLGNBREEsU0FBUyxJQUNMLE1BQU0sUUFBUSxRQUFRO0FBQ3hCLGtCQUFNLElBQUksTUFBTSxzQkFBc0I7QUFDeEMsaUJBQU8sS0FBSztBQUFBO0FBRWQsY0FBTSxLQUFLLGdCQUFnQixPQUFPLEtBQUs7QUFBQTtBQUV6QyxVQUFJO0FBQ0YsaUJBQVMsUUFBUTtBQUNmLGdCQUFNLEtBQUssY0FBYztBQUM3QixVQUFJO0FBQ0YsaUJBQVMsUUFBUSxRQUFRO0FBQ3ZCLGNBQUksS0FBSyxRQUFRLFFBQVE7QUFDdkIsa0JBQU0sSUFBSSxNQUFNLDZCQUE2QjtBQUMvQyxnQkFBTSxLQUFLLFlBQVksUUFBUSxPQUFPO0FBQUE7QUFHMUMsVUFBSTtBQUNGLGlCQUFTLFFBQVEsUUFBUTtBQUN2QixjQUFJLEtBQUssUUFBUSxRQUFRO0FBQ3ZCLGtCQUFNLElBQUksTUFBTSw2QkFBNkI7QUFDL0MsZ0JBQU0sS0FBSyxZQUFZLFFBQVEsT0FBTztBQUFBO0FBRzFDLFVBQUk7QUFDRixpQkFBUyxTQUFRO0FBQ2YsZ0JBQU0sS0FBSyxZQUFZO0FBQzNCLFVBQUk7QUFDRixpQkFBUyxPQUFPLFFBQVE7QUFDdEIsY0FBSSxJQUFJLFFBQVEsUUFBUTtBQUN0QixrQkFBTSxJQUFJLE1BQU0sNkJBQTZCO0FBQy9DLGdCQUFNLEtBQUssWUFBWSxPQUFPLE9BQU87QUFBQTtBQUd6QyxVQUFJO0FBQ0YsaUJBQVMsT0FBTyxjQUFjO0FBQzVCLGNBQUksSUFBSSxRQUFRLFFBQVE7QUFDdEIsa0JBQU0sSUFBSSxNQUFNLDBCQUEwQjtBQUM1QyxnQkFBTSxLQUFLLG1CQUFtQixPQUFPLGFBQWE7QUFBQTtBQUd0RCxVQUFJO0FBQ0YsaUJBQVMsY0FBYyxhQUFhO0FBRWxDLGNBREEsY0FBYyxJQUNWLFdBQVcsV0FBVztBQUN4QixrQkFBTSxJQUFJLE1BQU0sd0JBQXdCO0FBQzFDLGdCQUFNLEtBQUs7QUFBQTtBQUdmLFVBQUksT0FBTztBQUNULFlBQUksWUFBWSxPQUFPLE9BQU8sT0FDMUIsV0FBVyxRQUFRLE9BQU8sV0FBVyxZQUFZLGVBQ2pELGFBQWEsUUFBUSxPQUFPLFdBQVcsY0FBYyxlQUNyRCxhQUFhLFFBQVEsT0FBTyxXQUFXLGNBQWMsZUFDckQsVUFBVSxRQUFRLE9BQU8sV0FBVyxVQUFVO0FBQ2xELDZCQUFxQixPQUFPLFdBQVcsc0JBQ25DLGNBQ0YsTUFBTSxLQUFLLGdCQUFnQixlQUN6QixXQUNGLE1BQU0sS0FBSyxZQUFZLFlBQ3JCLGNBQ0YsbUJBQWtCLGFBQWEsS0FDakMsZ0JBQWdCLFdBQVcsV0FBVyxLQUFLO0FBQUE7QUFFN0MsVUFBSSxZQUFZO0FBQ2hCLFVBQUk7QUFDRixpQkFBUyxTQUFTO0FBQ2hCLG1CQUFTLElBQ1QsVUFBVSxLQUFLO0FBR25CLGFBQU87QUFBQSxRQUNMO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0EsT0FBTztBQUFBO0FBQUE7QUFHWCxzQ0FBa0MsVUFBVSxTQUFTLE9BQU8saUJBQWlCO0FBQzNFLFVBQUksUUFBUSxJQUNSLFFBQU8sT0FBTyxPQUFPO0FBQ3pCLG1CQUFhLE9BQU8sU0FBUyxPQUFNLE9BQU8sa0JBQzFDLGdCQUFnQixPQUFPLFNBQVM7QUFDaEMsVUFBSSxZQUFZLFFBQVEsU0FBUyxPQUFNLGFBQWEsd0JBQ2hELGNBQWMsUUFBUSxTQUFTLE9BQU0sZUFBZSx1QkFDcEQsYUFBYSxRQUFRLFNBQVMsT0FBTSxjQUFjLGVBQ2xELFNBQVMsUUFBUSxTQUFTLE9BQU0sVUFBVSxlQUMxQyxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsZUFDMUMsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVO0FBQzlDLGtDQUFxQixTQUFTLE9BQU0sTUFBTSxvQkFDdEMsYUFDRixNQUFNLEtBQUssZUFBZSxjQUFjLEtBQU8sYUFBYSxjQUMxRCxlQUNGLE1BQU0sS0FBSyxrQkFBa0IsT0FBTyxlQUFnQixXQUFXLGNBQWMsS0FBSyxVQUFVLGlCQUMxRixjQUNGLE1BQU0sS0FBSyxnQkFBZ0IsZUFDekIsVUFDRixNQUFNLEtBQUssWUFBWSxXQUNyQixVQUNGLE1BQU0sS0FBSyxZQUFZLFdBQ3JCLFVBQ0YsTUFBTSxLQUFLLFlBQVksV0FDbEI7QUFBQTtBQUVULDJCQUF1QixVQUFVO0FBQy9CLFVBQUksb0JBQW9CLElBQUksT0FDeEIsa0JBQWtCLElBQUksT0FDdEIsaUJBQWlCLElBQUksT0FDckIsaUJBQWlCLElBQUksT0FDckIsY0FBYyxHQUNkLFdBQVcsSUFDWCxnQkFBZ0IsR0FDaEIsZUFBZSxHQUNmLFNBQVMsSUFBSSxXQUFXLEtBQUssT0FDN0IsYUFBYSxHQUNiLGlCQUFpQixDQUFDLFVBQVU7QUFDOUIsWUFBSSxRQUFRLGFBQWEsTUFBTTtBQUMvQixZQUFJLFFBQVEsT0FBTyxRQUFRO0FBQ3pCLGNBQUksT0FBTyxJQUFJLFdBQVcsUUFBUTtBQUNsQyxlQUFLLElBQUksU0FDVCxTQUFTO0FBQUE7QUFFWCxlQUFPLElBQUksT0FBTyxhQUNsQixjQUFjLE1BQU07QUFDcEIsWUFBSSxTQUFTO0FBQ2IsZUFBTyxTQUFTLEtBQUssY0FBWTtBQUMvQixjQUFJLFNBQVMsYUFBYSxRQUFRO0FBQ2xDLGNBQUksU0FBUyxJQUFJLFNBQVM7QUFDeEI7QUFFRixvQkFBVSxHQUNWLHFCQUFxQixPQUFPLE1BQU0sUUFBUSxTQUFTLFVBQ25ELFVBQVU7QUFBQTtBQUVaLFFBQUksU0FBUyxLQUNYLFFBQU8sSUFBSSxPQUFPLE1BQU0sVUFDeEIsY0FBYztBQUFBLFNBR2QsYUFBYSxNQUFNO0FBQ3JCLG1CQUFXO0FBQ1gsaUJBQVMsWUFBWSxrQkFBa0I7QUFDckMsbUJBQVMsMkJBQTJCO0FBRXRDLDBCQUFrQjtBQUNsQixpQkFBUyxhQUFhLGVBQWU7QUFDbkMsb0JBQVUsT0FBTztBQUVuQix1QkFBZTtBQUNmLGlCQUFTLFlBQVksZUFBZTtBQUNsQyxjQUFJO0FBQ0YscUJBQVMsSUFBSSxNQUFNLDRCQUE0QjtBQUFBLG1CQUN4QyxHQUFQO0FBQ0Esb0JBQVEsTUFBTTtBQUFBO0FBR2xCLHVCQUFlO0FBQUEsU0FFYixjQUFjLENBQUMsTUFBTSxPQUFPLGFBQWE7QUFDM0MsWUFBSTtBQUNGLGlCQUFPLFNBQVMsb0NBQW9DO0FBQ3RELFlBQUksS0FBSztBQUNULDBCQUFrQixJQUFJLElBQUksQ0FBQyxPQUFPLGFBQWE7QUFDN0MsY0FBSTtBQUNGLHFCQUFTLE9BQU87QUFBQSxvQkFDaEI7QUFDQSxZQUFJLFFBQ0YsS0FBSztBQUFBO0FBQUEsWUFHUCxRQUNGLEtBQUssT0FDUCxTQUFTLGFBQWEsYUFBYSxDQUFDLElBQUksV0FBVyxJQUFNO0FBQUEsU0FFdkQsZUFBZSxDQUFDLElBQUksVUFBVTtBQUNoQyxZQUFJO0FBQ0YsZ0JBQU0sSUFBSSxNQUFNO0FBQ2xCLGlCQUFTLGFBQWEsYUFBYSxDQUFDLElBQUksV0FBVyxJQUFPO0FBQUEsU0FFeEQsZ0JBQWdCLENBQUMsSUFBSSxZQUFZLFFBQVEsTUFBTSxNQUFNLGFBQWE7QUFDcEUsWUFBSTtBQUNGLGtCQUFRLFFBQVE7QUFBQSxpQkFDVCxRQUFRO0FBQ1gsMkJBQWEsSUFBSTtBQUNqQjtBQUFBO0FBQUEsaUJBRUcsV0FBVztBQUNkLGtCQUFJLFdBQVcsZ0JBQWdCLElBQUksUUFBUTtBQUMzQyxjQUFLLFdBR0gsYUFBYSxJQUFJLE1BQU0sU0FBUyxZQUZoQyxhQUFhLElBQUk7QUFHbkI7QUFBQTtBQUFBLGlCQUVHLFFBQVE7QUFDWCxrQkFBSSxXQUFXLGdCQUFnQixJQUFJLFFBQVE7QUFDM0MsY0FBSyxXQUdILGFBQWEsSUFBSSxNQUFNLFNBQVMsWUFGaEMsYUFBYSxJQUFJO0FBR25CO0FBQUE7QUFBQSxpQkFFRyxpQkFBaUI7QUFDcEIsa0JBQUksWUFBWSxlQUFlLElBQUksUUFBUTtBQUMzQyxjQUFJLGFBQWEsVUFBVSxhQUN6QixVQUFVLFVBQVUsUUFBUSxPQUM5QixhQUFhLElBQUk7QUFDakI7QUFBQTtBQUFBLGlCQUVHLGNBQWM7QUFDakIsa0JBQUksWUFBWSxlQUFlLElBQUksUUFBUTtBQUMzQyxjQUFJLGFBQ0YsVUFBVSxPQUFPLFFBQVEsUUFDM0IsYUFBYSxJQUFJO0FBQ2pCO0FBQUE7QUFBQSxpQkFFRyxpQkFBaUI7QUFDcEIsa0JBQUksV0FBVyxlQUFlLElBQUksUUFBUTtBQUMxQyxrQkFBSTtBQUNGLGdCQUFJLFlBQ0YsU0FBUyxNQUFNLFFBQVE7QUFBQSx1QkFDbEIsS0FBUDtBQUNBLHdCQUFRLE1BQU07QUFBQTtBQUVoQiwyQkFBYSxJQUFJO0FBQ2pCO0FBQUE7QUFBQTtBQUdBLG9CQUFNLElBQUksTUFBTSxzQkFBc0IsUUFBUTtBQUFBO0FBQUEsaUJBRTNDLEdBQVA7QUFDQSx1QkFBYSxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixHQUFHLFVBQVUsTUFBTTtBQUFBO0FBQUEsVUFHcEUsZ0JBQWdCLElBQ2hCLHVCQUF1QixDQUFDLFVBQVU7QUFDcEMsWUFBSSxlQUFlO0FBQ2pCLDBCQUFnQjtBQUNoQixjQUFJLGdCQUFnQixPQUFPLGFBQWEsR0FBRztBQUMzQyxjQUFJLGtCQUFrQjtBQUNwQixrQkFBTSxJQUFJLE1BQU0sNEVBQWlGLEtBQUssVUFBVTtBQUVsSDtBQUFBO0FBRUYsWUFBSSxTQUFTLGFBQWE7QUFDMUIsWUFBSSxPQUFPO0FBQ1Qsd0JBQWMsT0FBTyxJQUFJLE9BQU87QUFBQSxhQUMzQjtBQUNMLGNBQUksV0FBVyxrQkFBa0IsSUFBSSxPQUFPO0FBQzVDLDRCQUFrQixPQUFPLE9BQU8sS0FDaEMsQUFBSSxPQUFPLE1BQU0sUUFDZixTQUFTLE9BQU8sTUFBTSxPQUFPLE1BRTdCLFNBQVMsTUFBTSxPQUFPO0FBQUE7QUFBQSxTQUd4QixnQkFBZ0IsQ0FBQyxTQUFTLFNBQVMsVUFBVSxVQUFVO0FBQ3pELFlBQUksU0FBUztBQUNYLGdCQUFNLElBQUksTUFBTTtBQUNsQixZQUFJLHFCQUFxQixJQUNyQixrQkFBa0IsSUFDbEIsaUJBQWlCLEdBQ2pCLElBQUk7QUFDUixnQkFBUSxVQUFVO0FBQ2xCLGlCQUFTLFFBQVEsU0FBUztBQUN4QixjQUFJLFFBQU87QUFDWCxjQUFJLE9BQU8sUUFBUztBQUNsQixrQkFBTSxJQUFJLE1BQU0sbUJBQW1CO0FBQ3JDLGNBQUksT0FBTyxRQUFRLE1BQU0sT0FBTSxRQUFRLGVBQ25DLFFBQVEsUUFBUSxNQUFNLE9BQU0sU0FBUztBQUN6QyxjQUFJLE9BQU8sUUFBUyxZQUFZLFNBQVM7QUFDdkMsa0JBQU0sSUFBSSxNQUFNLG1CQUFtQjtBQUNyQyxjQUFJLE9BQU8sU0FBVTtBQUNuQixrQkFBTSxJQUFJLE1BQU0sSUFBSTtBQUN0QiwrQkFBcUIsTUFBTSxPQUFNLGFBQWEsS0FBSyxVQUFVO0FBQzdELGNBQUksU0FBUztBQUFBLFlBQ1g7QUFBQSxZQUNBLFdBQVc7QUFBQSxZQUNYLFFBQVE7QUFBQTtBQUVWLGVBQ0EsTUFBTTtBQUFBLFlBQ0osVUFBVSxTQUFTLFdBQVc7QUFDNUIsa0JBQUksaUJBQWlCLGlFQUNqQixpQkFBaUIsZ0JBQWdCLElBQUksTUFBTSxpQkFBaUIsVUFBVSxjQUN0RSxTQUFRLElBQ1IsU0FBUyxRQUFRLFNBQVMsUUFBTyxVQUFVLGVBQzNDLFlBQVksUUFBUSxTQUFTLFFBQU8sYUFBYTtBQUVyRCxrQkFEQSxxQkFBcUIsU0FBUyxRQUFPLGtDQUFrQyxLQUFLLFVBQVUsVUFDbEYsVUFBVTtBQUNaLHNCQUFNLElBQUksTUFBTSxJQUFJLE9BQU87QUFDN0Isa0JBQUksS0FBSztBQUNULGlDQUFtQixNQUFNLENBQUMsTUFBTSxVQUFVLFdBQVcsTUFBTSxpQkFDM0QsT0FBTyxVQUFVLEtBQUssQ0FBQyxJQUFJLFFBQVEsT0FBTyxRQUFRLFdBQVcsYUFBYTtBQUFBO0FBQUEsWUFFNUUsT0FBTyxTQUFTLFdBQVc7QUFDekIsa0JBQUksaUJBQWlCLDhEQUNqQixpQkFBaUIsZ0JBQWdCLElBQUksTUFBTSxpQkFBaUIsVUFBVSxXQUN0RSxTQUFRLElBQ1IsU0FBUyxRQUFRLFNBQVMsUUFBTyxVQUFVLGVBQzNDLFlBQVksUUFBUSxTQUFTLFFBQU8sYUFBYTtBQUVyRCxrQkFEQSxxQkFBcUIsU0FBUyxRQUFPLCtCQUErQixLQUFLLFVBQVUsVUFDL0UsVUFBVTtBQUNaLHNCQUFNLElBQUksTUFBTSxJQUFJLE9BQU87QUFDN0Isa0JBQUksS0FBSztBQUNULDhCQUFnQixNQUFNLENBQUMsTUFBTSxVQUFVLFdBQVcsTUFBTSxpQkFDeEQsT0FBTyxPQUFPLEtBQUssQ0FBQyxJQUFJLFFBQVEsT0FBTyxRQUFRLFdBQVcsYUFBYTtBQUFBO0FBQUEsY0FHM0UsUUFBUSxRQUFRLEtBQUs7QUFBQTtBQUV2QixZQUFNLFdBQVcsQ0FBQyxhQUFhLFFBQVEsTUFBTSxNQUFNLGFBQWE7QUFDOUQsa0JBQVEsU0FBUztBQUFBLGlCQUNWLFdBQVc7QUFDZCxrQkFBSSxXQUFXLElBQUksTUFBTSxXQUFXO0FBQ3BDLHVCQUFTLE1BQU0sU0FBUztBQUN0QixvQkFBSTtBQUNGLGtCQUFDLEVBQUMsTUFBTSxVQUFVLFdBQVcsUUFBUSxtQkFBbUI7QUFDeEQsc0JBQUksU0FBUyxNQUFNLFVBQVU7QUFBQSxvQkFDM0IsTUFBTSxTQUFTO0FBQUEsb0JBQ2YsVUFBVSxTQUFTO0FBQUEsb0JBQ25CLFdBQVcsU0FBUztBQUFBLG9CQUNwQixZQUFZLFNBQVM7QUFBQSxvQkFDckIsTUFBTSxTQUFTO0FBQUEsb0JBQ2YsWUFBWSxNQUFNLEtBQUssU0FBUztBQUFBO0FBRWxDLHNCQUFJLFVBQVUsTUFBTTtBQUNsQix3QkFBSSxPQUFPLFVBQVc7QUFDcEIsNEJBQU0sSUFBSSxNQUFNLDJDQUEyQyxLQUFLLFVBQVU7QUFDNUUsd0JBQUksUUFBTyxJQUNQLGFBQWEsUUFBUSxRQUFRLE9BQU0sY0FBYyxlQUNqRCxRQUFPLFFBQVEsUUFBUSxPQUFNLFFBQVEsZUFDckMsWUFBWSxRQUFRLFFBQVEsT0FBTSxhQUFhLGVBQy9DLFdBQVcsUUFBUSxRQUFRLE9BQU0sWUFBWSxnQkFDN0MsYUFBYSxRQUFRLFFBQVEsT0FBTSxjQUFjLGdCQUNqRCxTQUFTLFFBQVEsUUFBUSxPQUFNLFVBQVUsY0FDekMsV0FBVyxRQUFRLFFBQVEsT0FBTSxZQUFZO0FBQ2pELHlDQUFxQixRQUFRLE9BQU0sdUNBQXVDLEtBQUssVUFBVSxVQUN6RixTQUFTLEtBQUssSUFDVixjQUFjLFFBQ2hCLFVBQVMsYUFBYSxhQUNwQixTQUFRLFFBQ1YsVUFBUyxPQUFPLFFBQ2QsYUFBYSxRQUNmLFVBQVMsWUFBWSxZQUNuQixZQUFZLFFBQ2QsVUFBUyxXQUFXLFdBQ2xCLGNBQWMsUUFDaEIsVUFBUyxhQUFhLE1BQU0sTUFBTSxjQUNoQyxVQUFVLFFBQ1osVUFBUyxTQUFTLGlCQUFpQixRQUFRLFVBQVUsU0FDbkQsWUFBWSxRQUNkLFVBQVMsV0FBVyxpQkFBaUIsVUFBVSxZQUFZO0FBQzdEO0FBQUE7QUFBQSx5QkFFSyxHQUFQO0FBQ0EseUJBQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxzQkFBc0IsR0FBRyxVQUFVLE9BQU87QUFBQTtBQUduRSxxQkFBTztBQUFBO0FBQUEsaUJBRUosUUFBUTtBQUNYLGtCQUFJLFdBQVcsSUFBSSxNQUFNLFdBQVc7QUFDcEMsdUJBQVMsTUFBTSxTQUFTO0FBQ3RCLG9CQUFJO0FBQ0Ysa0JBQUMsRUFBQyxNQUFNLFVBQVUsV0FBVyxRQUFRLGdCQUFnQjtBQUNyRCxzQkFBSSxTQUFTLE1BQU0sVUFBVTtBQUFBLG9CQUMzQixNQUFNLFNBQVM7QUFBQSxvQkFDZixXQUFXLFNBQVM7QUFBQSxvQkFDcEIsWUFBWSxNQUFNLEtBQUssU0FBUztBQUFBO0FBRWxDLHNCQUFJLFVBQVUsTUFBTTtBQUNsQix3QkFBSSxPQUFPLFVBQVc7QUFDcEIsNEJBQU0sSUFBSSxNQUFNLHdDQUF3QyxLQUFLLFVBQVU7QUFDekUsd0JBQUksUUFBTyxJQUNQLGFBQWEsUUFBUSxRQUFRLE9BQU0sY0FBYyxlQUNqRCxXQUFXLFFBQVEsUUFBUSxPQUFNLFlBQVksMkJBQzdDLGFBQWEsUUFBUSxRQUFRLE9BQU0sY0FBYyxlQUNqRCxhQUFhLFFBQVEsUUFBUSxPQUFNLGNBQWMsZ0JBQ2pELFNBQVMsUUFBUSxRQUFRLE9BQU0sVUFBVSxlQUN6QyxTQUFTLFFBQVEsUUFBUSxPQUFNLFVBQVUsY0FDekMsV0FBVyxRQUFRLFFBQVEsT0FBTSxZQUFZO0FBQ2pELHlDQUFxQixRQUFRLE9BQU0sb0NBQW9DLEtBQUssVUFBVSxVQUN0RixTQUFTLEtBQUssSUFDVixjQUFjLFFBQ2hCLFVBQVMsYUFBYSxhQUN4QixBQUFJLG9CQUFvQixhQUN0QixTQUFTLFdBQVcsV0FDYixZQUFZLFFBQ25CLFVBQVMsV0FBVyxXQUFXLFlBQzdCLGNBQWMsUUFDaEIsVUFBUyxhQUFhLGFBQ3BCLGNBQWMsUUFDaEIsVUFBUyxhQUFhLE1BQU0sTUFBTSxjQUNoQyxVQUFVLFFBQ1osVUFBUyxTQUFTLFNBQ2hCLFVBQVUsUUFDWixVQUFTLFNBQVMsaUJBQWlCLFFBQVEsVUFBVSxTQUNuRCxZQUFZLFFBQ2QsVUFBUyxXQUFXLGlCQUFpQixVQUFVLFlBQVk7QUFDN0Q7QUFBQTtBQUFBLHlCQUVLLEdBQVA7QUFDQSx5QkFBTyxDQUFDLElBQUksUUFBUSxDQUFDLHNCQUFzQixHQUFHLFVBQVUsT0FBTztBQUFBO0FBR25FLHFCQUFPO0FBQUE7QUFBQTtBQUdQLG9CQUFNLElBQUksTUFBTSxzQkFBc0IsU0FBUztBQUFBO0FBQUEsWUFHakQsV0FBVztBQUNmLGVBQU87QUFBQSxVQUNMLE1BQU07QUFDSixZQUFJLEVBQUUsWUFBYSxLQUNqQixnQkFBZ0IsSUFBSSxVQUFVO0FBQUE7QUFBQSxVQUVsQyxRQUFRO0FBQ04sWUFBSSxFQUFFLFlBQWEsS0FDakIsZ0JBQWdCLE9BQU87QUFBQTtBQUFBO0FBQUEsU0FJM0IsaUJBQWlCLENBQUMsTUFBTSxTQUFTLFlBQVk7QUFDL0MsWUFBSSxRQUFPLElBQ1AsT0FBTyxRQUFRLFNBQVMsT0FBTSxRQUFRLGdCQUN0QyxPQUFPLFFBQVEsU0FBUyxPQUFNLFFBQVEsZUFDdEMsV0FBVyxRQUFRLFNBQVMsT0FBTSxZQUFZLGVBQzlDLFlBQVksUUFBUSxTQUFTLE9BQU0sYUFBYSxpQkFDaEQsVUFBVSxlQUNWLFFBQ0EsT0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFDMUMsbUJBQVMsQ0FBQyxVQUFVO0FBQ2xCLDJCQUFlLE9BQU8sVUFDdEIsQUFBSSxVQUFVLE9BQ1osT0FBTyxJQUFJLE1BQU0sVUFFakI7QUFBQTtBQUFBO0FBR04sdUJBQVEsUUFBUSxDQUFDLFVBQ2pCLHFCQUFxQixTQUFTLE9BQU0sb0JBQ2hDLFNBQVMsVUFDWCxTQUFRLE1BQU0sT0FBTyxPQUNuQixTQUFTLFVBQ1gsU0FBUSxNQUFNLE9BQU8sT0FDbkIsYUFBYSxVQUNmLFNBQVEsTUFBTSxXQUFXLFdBQzNCLGVBQWUsSUFBSSxTQUFTO0FBQUEsVUFDMUI7QUFBQSxVQUNBO0FBQUEsWUFFSztBQUFBLFVBQ0w7QUFBQSxVQUNBLE9BQU87QUFDTCx3QkFBWSxNQUFNLENBQUMsU0FBUyxjQUFjLFVBQVUsTUFBTTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS2hFLGFBQU87QUFBQSxRQUNMO0FBQUEsUUFDQTtBQUFBLFFBQ0EsU0FBUztBQUFBLFVBQ1AsYUFBYSxVQUFVLFlBQVksY0FBYyxTQUFTLE9BQU8sV0FBVyxVQUFVO0FBQ3BGLGdCQUFJLFlBQ0UsVUFBVSxxQkFDVixrQkFBa0IsV0FDbEIsT0FBTztBQUFBLGNBQ1gsTUFBTTtBQUNKLGdCQUFJLGNBQ0YsV0FBVyxPQUNULGNBQ0YsV0FBVztBQUFBO0FBQUEsY0FFZixRQUFRO0FBQ04sZ0JBQUksY0FDRixXQUFXLFNBQ1QsY0FDRixXQUFXO0FBQUE7QUFBQTtBQUdqQixnQkFBSTtBQUNGLGtCQUFJLE1BQU0sZ0JBQ04sZUFBZSxDQUFDLFNBQVMsV0FDekI7QUFBQSxnQkFDRjtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQTtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQTtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0E7QUFBQSxrQkFDRSxxQkFBcUIsVUFBVSxTQUFTLE9BQU8saUJBQWlCLGVBQ2hFLFVBQVU7QUFBQSxnQkFDWixTQUFTO0FBQUEsZ0JBQ1Q7QUFBQSxnQkFDQTtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQTtBQUFBLGdCQUNBLGVBQWUsaUJBQWlCO0FBQUEsZ0JBQ2hDO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQSxjQUFjLENBQUMsQ0FBRSxVQUFTLE1BQU07QUFBQSxpQkFFOUIsU0FBUyxnQkFBZ0IsZUFBZSxNQUFNLGNBQWM7QUFDaEUsY0FBSSxXQUFXLFFBQVEsU0FBUyxLQUM5QixjQUFhLGNBQWMsU0FBUyxTQUFTLEtBQUs7QUFDcEQsa0JBQUksU0FDQSxNQUNBLHdCQUF3QixDQUFDLFVBQVUsY0FBYztBQUNuRCxvQkFBSSxTQUFTLHlCQUF5QixTQUFTLFFBQVEsVUFDbkQsV0FBVyx5QkFBeUIsU0FBUyxVQUFVO0FBQzNELG9CQUFJLE9BQU8sU0FBUztBQUNsQix5QkFBTyxVQUFVLG9CQUFvQixnQkFBZ0IsUUFBUSxXQUFXO0FBQzFFLG9CQUFJLFNBQVMsQ0FBQztBQU9kLG9CQU5JLFNBQVMsZUFDWCxRQUFPLGNBQWMsU0FBUyxZQUFZLElBQUksc0JBQzVDLFNBQVMsWUFDWCxRQUFPLFdBQVcsS0FBSyxNQUFNLFNBQVMsWUFDcEMsU0FBUyxrQkFBa0IsVUFDN0IsUUFBUSxJQUFJLFdBQVcsU0FBUyxlQUFlLFFBQVEsT0FBTyxNQUM1RCxTQUFTLGNBQWMsUUFBUTtBQUNqQyxzQkFBSSxDQUFDLFNBQVM7QUFDWix3QkFBSSxhQUFhO0FBQ2pCLDhCQUFVLE1BQU0sSUFBSSxRQUFRLENBQUMsU0FBUyxXQUFXO0FBQy9DLDBCQUFJLGNBQWM7QUFDaEIsOEJBQU0sSUFBSSxNQUFNO0FBQ2xCLGtDQUFZLE1BQU0sQ0FBQyxTQUFTLFdBQVcsV0FBVyxTQUFTLFlBQVksQ0FBQyxRQUFRLGNBQWM7QUFDNUYsNEJBQUk7QUFDRixpQ0FBTyxVQUFVLElBQUksTUFBTSxTQUFTO0FBQ3RDLDhDQUFzQixXQUFXLENBQUMsUUFBUSxZQUFZO0FBQ3BELDBCQUFJLFNBQ0YsT0FBTyxVQUVQLFFBQVE7QUFBQTtBQUFBO0FBQUEsd0JBSWhCLEtBQUssT0FDTCxRQUFRLFVBQVUsTUFBTTtBQUN0QixzQkFBSSxjQUVKLGNBQWEsSUFDYixZQUFZLE1BQU0sQ0FBQyxTQUFTLG1CQUFtQixXQUFXLFNBQVMsWUFBWSxNQUFNO0FBQUEsMEJBRXJGLEtBQUs7QUFBQTtBQUFBO0FBR1QseUJBQU8sVUFBVTtBQUFBO0FBRW5CLG9CQUFJLFNBQVMsWUFBWSxRQUFRO0FBQy9CLHNCQUFJLENBQUMsTUFBTTtBQUNULHdCQUFJLFlBQVk7QUFDaEIseUJBQUssT0FDTCxPQUFPLE1BQU07QUFDWCxzQkFBSSxhQUVKLGFBQVksSUFDWixlQUFlLE9BQU8sU0FBUyxVQUMvQixZQUFZLE1BQU0sQ0FBQyxTQUFTLGNBQWMsU0FBUyxTQUFTLFVBQVUsTUFBTTtBQUFBLDBCQUU1RSxLQUFLO0FBQUEsdUJBRUgsU0FBUyxNQUFNLGFBQ2pCLGVBQWUsSUFBSSxTQUFTLFNBQVMsQ0FBQyxrQkFBa0Isa0JBQWtCO0FBQ3hFLDBCQUFJO0FBQ0YsK0JBQU8sTUFBTSxVQUFVLGtCQUFrQjtBQUMzQywwQkFBSSxVQUFVLHlCQUF5QixjQUFjLFFBQVEsVUFDekQsWUFBWSx5QkFBeUIsY0FBYyxVQUFVO0FBQ2pFLDBCQUFJLFFBQVEsU0FBUztBQUNuQiwrQkFBTyxNQUFNLFVBQVUsb0JBQW9CLGdCQUFnQixTQUFTLFlBQVk7QUFDbEYsMEJBQUksVUFBVSxDQUFDLFVBQVU7QUFDekIsc0JBQUksY0FBYyxlQUNoQixTQUFRLGNBQWMsY0FBYyxZQUFZLElBQUksc0JBQ2xELGNBQWMsY0FBYyxVQUM5QixTQUFRLFVBQVUsVUFDcEIsUUFBUSxPQUFPLE1BQ2YsTUFBTSxVQUFVLE1BQU07QUFBQTtBQUFBO0FBSTVCLHlCQUFPLE9BQU87QUFBQTtBQUVoQix1QkFBTyxVQUFVLE1BQU07QUFBQTtBQUV6QixrQkFBSSxTQUFTLFNBQVM7QUFDcEIsc0JBQU0sSUFBSSxNQUFNO0FBQ2xCLGtCQUFJLGVBQWUsU0FBUztBQUMxQixzQkFBTSxJQUFJLE1BQU07QUFDbEIsMEJBQVksTUFBTSxTQUFTLENBQUMsT0FBTyxhQUFhO0FBQzlDLG9CQUFJO0FBQ0YseUJBQU8sU0FBUyxJQUFJLE1BQU0sUUFBUTtBQUNwQyxvQkFBSSxRQUFRO0FBQ1Ysc0JBQUksZ0JBQWdCLFVBQ2hCLFlBQVk7QUFDaEIsdUJBQUs7QUFDTCxzQkFBSSxTQUFTO0FBQUEsb0JBQ1gsTUFBTSxjQUFjO0FBQUEsb0JBQ3BCLE1BQU0sY0FBYztBQUFBLG9CQUNwQixNQUFNLE9BQU87QUFBQSxvQkFDYixPQUFPO0FBQ0wsc0JBQUksYUFFSixhQUFZLElBQ1osT0FBTyxRQUNQLEtBQUs7QUFBQTtBQUFBO0FBR1QsOEJBQUssT0FDTCxPQUFPLEtBQUssS0FBSyxLQUFLLE9BQU8sS0FBSyxRQUMzQixTQUFTLE1BQU07QUFBQTtBQUV4Qix1QkFBTyxzQkFBc0IsVUFBVTtBQUFBO0FBQUEscUJBRWxDLEdBQVA7QUFDQSxrQkFBSSxRQUFRO0FBQ1osa0JBQUk7QUFDRiw2QkFBYSxPQUFPLFNBQVMsSUFBSSxPQUFPO0FBQUEsdUJBQ2pDLElBQVA7QUFBQTtBQUVGLGtCQUFNLFFBQVEsc0JBQXNCLEdBQUcsVUFBVSxTQUFTO0FBQzFELDBCQUFZLE1BQU0sQ0FBQyxTQUFTLFNBQVMsT0FBTyxRQUFRLE1BQU07QUFDeEQsc0JBQU0sU0FBUyxRQUFRLEtBQUssTUFBTSxTQUNsQyxTQUFTLG9CQUFvQixnQkFBZ0IsQ0FBQyxRQUFRLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQUlqRSxVQUFVLFVBQVUsTUFBTSxPQUFPLFNBQVMsT0FBTyxJQUFJLFVBQVU7QUFDN0QsZ0JBQU0sVUFBVSxxQkFDVixrQkFBa0IsVUFDcEIsUUFBUSxDQUFDLGNBQWM7QUFDekIsa0JBQUk7QUFDRixvQkFBSSxPQUFPLFNBQVU7QUFDbkIsd0JBQU0sSUFBSSxNQUFNO0FBQ2xCLG9CQUFJLFFBQVEseUJBQXlCLFVBQVUsU0FBUyxPQUFPO0FBTy9ELDRCQUFZLE1BTkU7QUFBQSxrQkFDWixTQUFTO0FBQUEsa0JBQ1Q7QUFBQSxrQkFDQSxTQUFTLGNBQWM7QUFBQSxrQkFDdkIsT0FBTyxjQUFjLE9BQU8sWUFBWTtBQUFBLG1CQUVmLENBQUMsT0FBTyxhQUFhO0FBQzlDLHNCQUFJO0FBQ0YsMkJBQU8sU0FBUyxJQUFJLE1BQU0sUUFBUTtBQUNwQyxzQkFBSSxTQUFTLHlCQUF5QixTQUFTLFFBQVEsVUFDbkQsV0FBVyx5QkFBeUIsU0FBUyxVQUFVLFVBQ3ZELGNBQWMsR0FDZCxPQUFPLE1BQU0sRUFBRSxlQUFnQixLQUFLLFNBQVMsTUFBTSxDQUFDLFVBQVUsTUFBTSxTQUFTLE1BQU0sS0FBSyxTQUFTO0FBQ3JHLHNCQUFJLE9BQU8sU0FBUztBQUNsQiwyQkFBTyxTQUFTLG9CQUFvQixvQkFBb0IsUUFBUSxXQUFXO0FBQzdFLGtCQUFJLFNBQVMsVUFDWCxnQkFDQSxHQUFHLFNBQVMsU0FBUyxNQUFNLENBQUMsS0FBSyxhQUFhO0FBQzVDLG9CQUFJLFFBQVEsT0FDVixTQUFTLEtBQUssUUFFZCxVQUFTLE9BQU8sVUFDaEI7QUFBQSx1QkFJRixTQUFTLFNBQ1gsZ0JBQ0EsR0FBRyxTQUFTLFNBQVMsS0FBSyxDQUFDLEtBQUssYUFBYTtBQUMzQyxvQkFBSSxRQUFRLE9BQ1YsU0FBUyxLQUFLLFFBRWQsVUFBUyxNQUFNLFVBQ2Y7QUFBQSx1QkFJTjtBQUFBO0FBQUEsdUJBRUssR0FBUDtBQUNBLG9CQUFJLFFBQVE7QUFDWixvQkFBSTtBQUNGLCtCQUFhLE9BQU8sU0FBUyxJQUFJLE9BQU87QUFBQSx5QkFDakMsSUFBUDtBQUFBO0FBRUYsb0JBQU0sUUFBUSxzQkFBc0IsR0FBRyxVQUFVLFNBQVM7QUFDMUQsNEJBQVksTUFBTSxDQUFDLFNBQVMsU0FBUyxPQUFPLFFBQVEsTUFBTTtBQUN4RCx3QkFBTSxTQUFTLFFBQVEsS0FBSyxNQUFNLFNBQ2xDLFNBQVMsb0JBQW9CLG9CQUFvQixDQUFDLFFBQVEsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUlyRSxnQkFBSSxPQUFPLFNBQVUsWUFBWSxNQUFNLFNBQVMsT0FBTyxNQUFNO0FBQzNELGtCQUFJLE9BQU87QUFDWCxzQkFBUSxNQUFNLEdBQUcsVUFBVSxPQUFPO0FBQUE7QUFFcEMsa0JBQU07QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUtkLGlDQUE2QjtBQUMzQixVQUFNLE1BQU0sSUFBSSxPQUNaLFNBQVM7QUFDYixhQUFPO0FBQUEsUUFDTCxLQUFLLElBQUk7QUFDUCxpQkFBTyxJQUFJLElBQUk7QUFBQTtBQUFBLFFBRWpCLE1BQU0sT0FBTztBQUNYLGNBQUksVUFBVTtBQUNaLG1CQUFPO0FBQ1QsY0FBTSxLQUFLO0FBQ1gscUJBQUksSUFBSSxJQUFJLFFBQ0w7QUFBQTtBQUFBO0FBQUE7QUFJYiw2QkFBeUIsR0FBRyxVQUFVLE9BQU87QUFDM0MsVUFBSTtBQUNGLFlBQUksUUFBUyxHQUFFLFFBQVEsSUFBSSxNQUFNO0FBQUE7QUFDakMsY0FBTSxPQUFPLEdBQUc7QUFDaEIsWUFBSSxZQUFXLGtCQUFrQixVQUFVLE9BQU87QUFDbEQsWUFBSTtBQUNGLGlCQUFPLENBQUMsTUFBTSxFQUFFLFNBQVM7QUFBQSxlQUVwQixJQUFQO0FBQUE7QUFBQTtBQUdKLG1DQUErQixHQUFHLFVBQVUsT0FBTyxNQUFNO0FBQ3ZELFVBQUksT0FBTyxrQkFDUCxZQUFXO0FBQ2YsVUFBSTtBQUNGLGVBQVEsTUFBSyxFQUFFLFdBQVcsS0FBSztBQUFBLGVBQ3hCLElBQVA7QUFBQTtBQUVGLFVBQUk7QUFDRixvQkFBVyxrQkFBa0IsVUFBVyxHQUFFLFFBQVEsSUFBSSxNQUFNO0FBQUEsSUFBTztBQUFBLGVBQzVELElBQVA7QUFBQTtBQUVGLGFBQU8sQ0FBQyxNQUFNLHFCQUFVLE9BQU8sT0FBTyxDQUFDLFFBQVEsSUFBSSxRQUFRLFFBQVEsTUFBTSxNQUFNLEtBQUs7QUFBQTtBQUV0RiwrQkFBMkIsVUFBVSxPQUFPLE9BQU87QUFDakQsVUFBSSxLQUFLO0FBQ1QsVUFBSSxTQUFTLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxXQUFXLE9BQU8sTUFBTSxHQUFHLFdBQVc7QUFDM0UsaUJBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUs7QUFDckMsY0FBSSxPQUFPLE1BQU07QUFDakIsY0FBSSxFQUFDLEtBQUssV0FBVztBQUdyQixpQkFEQSxPQUFPLEtBQUssTUFBTSxHQUFHLGFBQ1I7QUFDWCxrQkFBSSxRQUFRLGlDQUFpQyxLQUFLO0FBQ2xELGtCQUFJLE9BQU87QUFDVCx1QkFBTyxNQUFNO0FBQ2I7QUFBQTtBQUdGLGtCQURBLFFBQVEsMkNBQTJDLEtBQUssT0FDcEQsT0FBTztBQUNULHVCQUFPLE1BQU07QUFDYjtBQUFBO0FBR0Ysa0JBREEsUUFBUSxzQkFBc0IsS0FBSyxPQUMvQixPQUFPO0FBRVQsb0JBQUksV0FBVyxBQURBLFNBQVMsYUFBYSxNQUFNLElBQUksUUFDdkIsTUFBTSw0QkFBNEIsQ0FBQyxNQUFNLEtBQUssTUFBTSxJQUN4RSxTQUFTLENBQUMsTUFBTSxLQUFLLEdBQ3JCLFNBQVMsU0FBUyxNQUFNLFFBQVEsU0FBUyxNQUFNLFlBQVksUUFBUSxNQUFNLFNBQVM7QUFDdEYsdUJBQU87QUFBQSxrQkFDTCxNQUFNLE1BQU07QUFBQSxrQkFDWixXQUFXO0FBQUEsa0JBQ1gsTUFBTSxDQUFDLE1BQU07QUFBQSxrQkFDYixRQUFRLFdBQVcsU0FBUyxNQUFNLEdBQUcsU0FBUztBQUFBLGtCQUM5QyxRQUFRLFdBQVcsU0FBUyxNQUFNLFFBQVEsU0FBUyxTQUFTO0FBQUEsa0JBQzVELFVBQVUsV0FBVztBQUFBLElBQU8sTUFBTSxNQUFNLEdBQUcsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUdwRDtBQUFBO0FBQUE7QUFJTixhQUFPO0FBQUE7QUFFVCxpQ0FBNkIsTUFBTSxRQUFRLFVBQVU7QUFDbkQsVUFBSSxRQUFRLEdBQ1IsVUFBVSxPQUFPLFNBQVMsSUFBSSxLQUFLLFNBQVMsT0FBTyxlQUFlLE9BQU8sU0FBUyxJQUFJLEtBQUssU0FBUyxPQUFPLE1BQU0sR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsTUFBTTtBQUMvSSxZQUFJLE1BQU07QUFDUixpQkFBTztBQUFBO0FBQ1QsWUFBSSxDQUFDLEVBQUU7QUFDTCxpQkFBTztBQUFBLFNBQ0osRUFBRTtBQUNQLFlBQUksQ0FBQyxNQUFNLE1BQU0sVUFBVSxFQUFFO0FBQzdCLGVBQU87QUFBQSxFQUNULFFBQVEsUUFBUSxrQkFBa0IsRUFBRTtBQUFBLFNBQ2pDLEtBQUssS0FDSixRQUFRLElBQUksTUFBTSxHQUFHLE9BQU87QUFDaEMsbUJBQU0sU0FBUyxRQUNmLE1BQU0sV0FBVyxVQUNWO0FBQUE7QUFFVCxzQ0FBa0MsVUFBVSxPQUFPO0FBQ2pELGVBQVcsV0FBVztBQUNwQixnQkFBUSxTQUFTLE1BQU0sS0FBSyxRQUFRO0FBRXRDLGFBQU87QUFBQTtBQUVULDhCQUEwQixXQUFVLE9BQU87QUFDekMsVUFBSSxhQUFZO0FBQ2QsZUFBTztBQUNULFVBQUksUUFBTyxJQUNQLE9BQU8sUUFBUSxXQUFVLE9BQU0sUUFBUSxlQUN2QyxZQUFZLFFBQVEsV0FBVSxPQUFNLGFBQWEsZUFDakQsT0FBTyxRQUFRLFdBQVUsT0FBTSxRQUFRLGdCQUN2QyxTQUFTLFFBQVEsV0FBVSxPQUFNLFVBQVUsZ0JBQzNDLFNBQVMsUUFBUSxXQUFVLE9BQU0sVUFBVSxnQkFDM0MsV0FBVyxRQUFRLFdBQVUsT0FBTSxZQUFZO0FBQ25ELGtDQUFxQixXQUFVLE9BQU0sUUFDOUI7QUFBQSxRQUNMLE1BQU0sUUFBUTtBQUFBLFFBQ2QsV0FBVyxhQUFhO0FBQUEsUUFDeEIsTUFBTSxRQUFRO0FBQUEsUUFDZCxRQUFRLFVBQVU7QUFBQSxRQUNsQixRQUFRLFVBQVU7QUFBQSxRQUNsQixVQUFVLFlBQVk7QUFBQTtBQUFBO0FBRzFCLDhCQUEwQixVQUFVLFVBQVUsT0FBTztBQUNuRCxVQUFJLGdCQUFnQixJQUNoQixRQUFRO0FBQ1osZUFBVyxXQUFXLFVBQVU7QUFDOUIsWUFBSSxRQUFPLElBQ1AsT0FBTyxRQUFRLFNBQVMsT0FBTSxRQUFRLGVBQ3RDLFlBQVcsUUFBUSxTQUFTLE9BQU0sWUFBWSxxQkFDOUMsUUFBUSxRQUFRLFNBQVMsT0FBTSxTQUFTLGNBQ3hDLFNBQVMsUUFBUSxTQUFTLE9BQU0sVUFBVSxnQkFDMUMsUUFBUSxjQUFjLGFBQWE7QUFDdkMsNkJBQXFCLFNBQVMsT0FBTTtBQUNwQyxZQUFJLGFBQWE7QUFDakIsWUFBSTtBQUNGLG1CQUFXLFFBQVEsT0FBTztBQUN4QixnQkFBSSxXQUFXLElBQ1gsV0FBVyxRQUFRLE1BQU0sVUFBVSxRQUFRLGVBQzNDLGVBQWUsUUFBUSxNQUFNLFVBQVUsWUFBWTtBQUN2RCxpQ0FBcUIsTUFBTSxVQUFVLFFBQ3JDLFdBQVcsS0FBSztBQUFBLGNBQ2QsTUFBTSxZQUFZO0FBQUEsY0FDbEIsVUFBVSxpQkFBaUIsY0FBYztBQUFBO0FBQUE7QUFJL0Msc0JBQWMsS0FBSztBQUFBLFVBQ2pCLE1BQU0sUUFBUTtBQUFBLFVBQ2QsVUFBVSxpQkFBaUIsV0FBVTtBQUFBLFVBQ3JDLE9BQU87QUFBQSxVQUNQLFFBQVEsTUFBTSxNQUFNO0FBQUEsWUFFdEI7QUFBQTtBQUVGLGFBQU87QUFBQTtBQUVULGdDQUE0QixDQUFDLGFBQU0sV0FBVztBQUM1QyxVQUFJLE9BQU87QUFDWCxhQUFPO0FBQUEsUUFDTDtBQUFBLFFBQ0E7QUFBQSxZQUNJLE9BQU87QUFDVCxpQkFBSSxTQUFTLFFBQ1gsUUFBTyxXQUFXLFlBQ2I7QUFBQTtBQUFBO0FBQUE7QUFNYixRQUFJLFVBQVUsU0FDVixTQUFRLENBQUMsWUFBWSx5QkFBeUIsTUFBTSxVQUNwRCxRQUFRLE1BQU07QUFDaEIsWUFBTSxJQUFJLE1BQU07QUFBQSxPQUVkLFlBQVksQ0FBQyxPQUFPLFlBQVkseUJBQXlCLFVBQVUsT0FBTyxVQUMxRSxZQUFZLE1BQU07QUFDcEIsWUFBTSxJQUFJLE1BQU07QUFBQSxPQUVkLGdCQUFnQixNQUFNO0FBQ3hCLFlBQU0sSUFBSSxNQUFNO0FBQUEsT0FFZCxtQkFDQSxrQkFDQSx5QkFBeUIsTUFBTTtBQUNqQyxVQUFJO0FBQ0YsZUFBTztBQUNULFlBQUksb0JBQ0ksSUFBSSxNQUFNLG9HQUNaLElBQUksTUFBTTtBQUFBLE9BRWQsYUFBYSxDQUFDLFlBQVk7QUFDNUIsZ0JBQVUsMEJBQTBCLFdBQVc7QUFDL0MsVUFBSSxVQUFVLFFBQVEsU0FDbEIsWUFBWSxRQUFRLFdBQVc7QUFDbkMsVUFBSSxDQUFDO0FBQ0gsY0FBTSxJQUFJLE1BQU07QUFFbEIsVUFEQSxXQUFXLElBQ1A7QUFDRixjQUFNLElBQUksTUFBTTtBQUNsQixpQ0FBb0Isb0JBQW9CLFNBQVMsWUFDakQsa0JBQWtCLE1BQU0sTUFBTTtBQUM1Qiw0QkFBb0I7QUFBQSxVQUVmO0FBQUEsT0FFTCxzQkFBc0IsQ0FBQyxTQUFTLGNBQWMsUUFBUSxRQUFRLE1BQU0sYUFBYTtBQUNuRixVQUFJLE1BQU0sTUFBTSxNQUFNO0FBQ3RCLFVBQUksQ0FBQyxJQUFJO0FBQ1AsY0FBTSxJQUFJLE1BQU0sc0JBQXNCLEtBQUssVUFBVTtBQUN2RCxVQUFJLE9BQU8sTUFBTSxJQUFJLGVBQ2pCLE9BQU87QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FB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
