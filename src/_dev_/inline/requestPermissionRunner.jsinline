var __create = Object.create, __defProp = Object.defineProperty, __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty, __getOwnPropNames = Object.getOwnPropertyNames, __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: !0});
var __commonJS = (callback, module) => () => (module || (module = {exports: {}}, callback(module.exports, module)), module.exports), __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: !0});
}, __exportStar = (target, module, desc) => {
  if (module && typeof module == "object" || typeof module == "function")
    for (let key of __getOwnPropNames(module))
      !__hasOwnProp.call(target, key) && key !== "default" && __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  return target;
}, __toModule = (module) => __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: !0} : {value: module, enumerable: !0})), module);

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/Mime.js
var require_Mime = __commonJS((exports, module) => {
  "use strict";
  function Mime3() {
    this._types = Object.create(null), this._extensions = Object.create(null);
    for (let i2 = 0; i2 < arguments.length; i2++)
      this.define(arguments[i2]);
    this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
  }
  Mime3.prototype.define = function(typeMap, force) {
    for (let type in typeMap) {
      let extensions = typeMap[type].map(function(t) {
        return t.toLowerCase();
      });
      type = type.toLowerCase();
      for (let i2 = 0; i2 < extensions.length; i2++) {
        let ext = extensions[i2];
        if (ext[0] !== "*") {
          if (!force && ext in this._types)
            throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
          this._types[ext] = type;
        }
      }
      if (force || !this._extensions[type]) {
        let ext = extensions[0];
        this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
      }
    }
  };
  Mime3.prototype.getType = function(path7) {
    path7 = String(path7);
    let last = path7.replace(/^.*[/\\]/, "").toLowerCase(), ext = last.replace(/^.*\./, "").toLowerCase(), hasPath = last.length < path7.length;
    return (ext.length < last.length - 1 || !hasPath) && this._types[ext] || null;
  };
  Mime3.prototype.getExtension = function(type) {
    return type = /^\s*([^;\s]*)/.test(type) && RegExp.$1, type && this._extensions[type.toLowerCase()] || null;
  };
  module.exports = Mime3;
});

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/types/standard.js
var require_standard = __commonJS((exports, module) => {
  module.exports = {"application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma", "es"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/mrb-consumer+xml": ["*xdf"], "application/mrb-publish+xml": ["*xdf"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["*xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-error+xml": ["xer"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"]};
});

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/lite.js
var require_lite = __commonJS((exports, module) => {
  "use strict";
  var Mime3 = require_Mime();
  module.exports = new Mime3(require_standard());
});

// node_modules/.pnpm/path-browserify@1.0.1/node_modules/path-browserify/index.js
var require_path_browserify = __commonJS((exports, module) => {
  "use strict";
  function assertPath(path7) {
    if (typeof path7 != "string")
      throw new TypeError("Path must be a string. Received " + JSON.stringify(path7));
  }
  function normalizeStringPosix(path7, allowAboveRoot) {
    for (var res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, code, i2 = 0; i2 <= path7.length; ++i2) {
      if (i2 < path7.length)
        code = path7.charCodeAt(i2);
      else {
        if (code === 47)
          break;
        code = 47;
      }
      if (code === 47) {
        if (!(lastSlash === i2 - 1 || dots === 1))
          if (lastSlash !== i2 - 1 && dots === 2) {
            if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
              if (res.length > 2) {
                var lastSlashIndex = res.lastIndexOf("/");
                if (lastSlashIndex !== res.length - 1) {
                  lastSlashIndex === -1 ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = i2, dots = 0;
                  continue;
                }
              } else if (res.length === 2 || res.length === 1) {
                res = "", lastSegmentLength = 0, lastSlash = i2, dots = 0;
                continue;
              }
            }
            allowAboveRoot && (res.length > 0 ? res += "/.." : res = "..", lastSegmentLength = 2);
          } else
            res.length > 0 ? res += "/" + path7.slice(lastSlash + 1, i2) : res = path7.slice(lastSlash + 1, i2), lastSegmentLength = i2 - lastSlash - 1;
        lastSlash = i2, dots = 0;
      } else
        code === 46 && dots !== -1 ? ++dots : dots = -1;
    }
    return res;
  }
  function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root, base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    return dir ? dir === pathObject.root ? dir + base : dir + sep + base : base;
  }
  var posix = {
    resolve: function() {
      for (var resolvedPath = "", resolvedAbsolute = !1, cwd, i2 = arguments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
        var path7;
        i2 >= 0 ? path7 = arguments[i2] : (cwd === void 0 && (cwd = process.cwd()), path7 = cwd), assertPath(path7), path7.length !== 0 && (resolvedPath = path7 + "/" + resolvedPath, resolvedAbsolute = path7.charCodeAt(0) === 47);
      }
      return resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute), resolvedAbsolute ? resolvedPath.length > 0 ? "/" + resolvedPath : "/" : resolvedPath.length > 0 ? resolvedPath : ".";
    },
    normalize: function(path7) {
      if (assertPath(path7), path7.length === 0)
        return ".";
      var isAbsolute3 = path7.charCodeAt(0) === 47, trailingSeparator = path7.charCodeAt(path7.length - 1) === 47;
      return path7 = normalizeStringPosix(path7, !isAbsolute3), path7.length === 0 && !isAbsolute3 && (path7 = "."), path7.length > 0 && trailingSeparator && (path7 += "/"), isAbsolute3 ? "/" + path7 : path7;
    },
    isAbsolute: function(path7) {
      return assertPath(path7), path7.length > 0 && path7.charCodeAt(0) === 47;
    },
    join: function() {
      if (arguments.length === 0)
        return ".";
      for (var joined, i2 = 0; i2 < arguments.length; ++i2) {
        var arg = arguments[i2];
        assertPath(arg), arg.length > 0 && (joined === void 0 ? joined = arg : joined += "/" + arg);
      }
      return joined === void 0 ? "." : posix.normalize(joined);
    },
    relative: function(from, to) {
      if (assertPath(from), assertPath(to), from === to || (from = posix.resolve(from), to = posix.resolve(to), from === to))
        return "";
      for (var fromStart = 1; fromStart < from.length && from.charCodeAt(fromStart) === 47; ++fromStart)
        ;
      for (var fromEnd = from.length, fromLen = fromEnd - fromStart, toStart = 1; toStart < to.length && to.charCodeAt(toStart) === 47; ++toStart)
        ;
      for (var toEnd = to.length, toLen = toEnd - toStart, length = fromLen < toLen ? fromLen : toLen, lastCommonSep = -1, i2 = 0; i2 <= length; ++i2) {
        if (i2 === length) {
          if (toLen > length) {
            if (to.charCodeAt(toStart + i2) === 47)
              return to.slice(toStart + i2 + 1);
            if (i2 === 0)
              return to.slice(toStart + i2);
          } else
            fromLen > length && (from.charCodeAt(fromStart + i2) === 47 ? lastCommonSep = i2 : i2 === 0 && (lastCommonSep = 0));
          break;
        }
        var fromCode = from.charCodeAt(fromStart + i2), toCode = to.charCodeAt(toStart + i2);
        if (fromCode !== toCode)
          break;
        fromCode === 47 && (lastCommonSep = i2);
      }
      var out = "";
      for (i2 = fromStart + lastCommonSep + 1; i2 <= fromEnd; ++i2)
        (i2 === fromEnd || from.charCodeAt(i2) === 47) && (out.length === 0 ? out += ".." : out += "/..");
      return out.length > 0 ? out + to.slice(toStart + lastCommonSep) : (toStart += lastCommonSep, to.charCodeAt(toStart) === 47 && ++toStart, to.slice(toStart));
    },
    _makeLong: function(path7) {
      return path7;
    },
    dirname: function(path7) {
      if (assertPath(path7), path7.length === 0)
        return ".";
      for (var code = path7.charCodeAt(0), hasRoot = code === 47, end = -1, matchedSlash = !0, i2 = path7.length - 1; i2 >= 1; --i2)
        if (code = path7.charCodeAt(i2), code === 47) {
          if (!matchedSlash) {
            end = i2;
            break;
          }
        } else
          matchedSlash = !1;
      return end === -1 ? hasRoot ? "/" : "." : hasRoot && end === 1 ? "//" : path7.slice(0, end);
    },
    basename: function(path7, ext) {
      if (ext !== void 0 && typeof ext != "string")
        throw new TypeError('"ext" argument must be a string');
      assertPath(path7);
      var start = 0, end = -1, matchedSlash = !0, i2;
      if (ext !== void 0 && ext.length > 0 && ext.length <= path7.length) {
        if (ext.length === path7.length && ext === path7)
          return "";
        var extIdx = ext.length - 1, firstNonSlashEnd = -1;
        for (i2 = path7.length - 1; i2 >= 0; --i2) {
          var code = path7.charCodeAt(i2);
          if (code === 47) {
            if (!matchedSlash) {
              start = i2 + 1;
              break;
            }
          } else
            firstNonSlashEnd === -1 && (matchedSlash = !1, firstNonSlashEnd = i2 + 1), extIdx >= 0 && (code === ext.charCodeAt(extIdx) ? --extIdx == -1 && (end = i2) : (extIdx = -1, end = firstNonSlashEnd));
        }
        return start === end ? end = firstNonSlashEnd : end === -1 && (end = path7.length), path7.slice(start, end);
      } else {
        for (i2 = path7.length - 1; i2 >= 0; --i2)
          if (path7.charCodeAt(i2) === 47) {
            if (!matchedSlash) {
              start = i2 + 1;
              break;
            }
          } else
            end === -1 && (matchedSlash = !1, end = i2 + 1);
        return end === -1 ? "" : path7.slice(start, end);
      }
    },
    extname: function(path7) {
      assertPath(path7);
      for (var startDot = -1, startPart = 0, end = -1, matchedSlash = !0, preDotState = 0, i2 = path7.length - 1; i2 >= 0; --i2) {
        var code = path7.charCodeAt(i2);
        if (code === 47) {
          if (!matchedSlash) {
            startPart = i2 + 1;
            break;
          }
          continue;
        }
        end === -1 && (matchedSlash = !1, end = i2 + 1), code === 46 ? startDot === -1 ? startDot = i2 : preDotState !== 1 && (preDotState = 1) : startDot !== -1 && (preDotState = -1);
      }
      return startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1 ? "" : path7.slice(startDot, end);
    },
    format: function(pathObject) {
      if (pathObject === null || typeof pathObject != "object")
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
      return _format("/", pathObject);
    },
    parse: function(path7) {
      assertPath(path7);
      var ret = {root: "", dir: "", base: "", ext: "", name: ""};
      if (path7.length === 0)
        return ret;
      var code = path7.charCodeAt(0), isAbsolute3 = code === 47, start;
      isAbsolute3 ? (ret.root = "/", start = 1) : start = 0;
      for (var startDot = -1, startPart = 0, end = -1, matchedSlash = !0, i2 = path7.length - 1, preDotState = 0; i2 >= start; --i2) {
        if (code = path7.charCodeAt(i2), code === 47) {
          if (!matchedSlash) {
            startPart = i2 + 1;
            break;
          }
          continue;
        }
        end === -1 && (matchedSlash = !1, end = i2 + 1), code === 46 ? startDot === -1 ? startDot = i2 : preDotState !== 1 && (preDotState = 1) : startDot !== -1 && (preDotState = -1);
      }
      return startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1 ? end !== -1 && (startPart === 0 && isAbsolute3 ? ret.base = ret.name = path7.slice(1, end) : ret.base = ret.name = path7.slice(startPart, end)) : (startPart === 0 && isAbsolute3 ? (ret.name = path7.slice(1, startDot), ret.base = path7.slice(1, end)) : (ret.name = path7.slice(startPart, startDot), ret.base = path7.slice(startPart, end)), ret.ext = path7.slice(startDot, end)), startPart > 0 ? ret.dir = path7.slice(0, startPart - 1) : isAbsolute3 && (ret.dir = "/"), ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
  };
  posix.posix = posix;
  module.exports = posix;
});

// node_modules/.pnpm/domhandler@4.0.0/node_modules/domhandler/lib/node.js
var require_node = __commonJS((exports) => {
  "use strict";
  var __extends = exports && exports.__extends || function() {
    var extendStatics = function(d2, b2) {
      return extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          Object.prototype.hasOwnProperty.call(b3, p2) && (d3[p2] = b3[p2]);
      }, extendStatics(d2, b2);
    };
    return function(d2, b2) {
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }(), __assign = exports && exports.__assign || function() {
    return __assign = Object.assign || function(t) {
      for (var s2, i2 = 1, n = arguments.length; i2 < n; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          Object.prototype.hasOwnProperty.call(s2, p2) && (t[p2] = s2[p2]);
      }
      return t;
    }, __assign.apply(this, arguments);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.cloneNode = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
  var nodeTypes = new Map([
    ["tag", 1],
    ["script", 1],
    ["style", 1],
    ["directive", 1],
    ["text", 3],
    ["cdata", 4],
    ["comment", 8],
    ["root", 9]
  ]), Node = function() {
    function Node2(type) {
      this.type = type, this.parent = null, this.prev = null, this.next = null, this.startIndex = null, this.endIndex = null;
    }
    return Object.defineProperty(Node2.prototype, "nodeType", {
      get: function() {
        var _a;
        return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "parentNode", {
      get: function() {
        return this.parent;
      },
      set: function(parent) {
        this.parent = parent;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "previousSibling", {
      get: function() {
        return this.prev;
      },
      set: function(prev) {
        this.prev = prev;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "nextSibling", {
      get: function() {
        return this.next;
      },
      set: function(next) {
        this.next = next;
      },
      enumerable: !1,
      configurable: !0
    }), Node2.prototype.cloneNode = function(recursive) {
      return recursive === void 0 && (recursive = !1), cloneNode(this, recursive);
    }, Node2;
  }();
  exports.Node = Node;
  var DataNode = function(_super) {
    __extends(DataNode2, _super);
    function DataNode2(type, data) {
      var _this = _super.call(this, type) || this;
      return _this.data = data, _this;
    }
    return Object.defineProperty(DataNode2.prototype, "nodeValue", {
      get: function() {
        return this.data;
      },
      set: function(data) {
        this.data = data;
      },
      enumerable: !1,
      configurable: !0
    }), DataNode2;
  }(Node);
  exports.DataNode = DataNode;
  var Text2 = function(_super) {
    __extends(Text3, _super);
    function Text3(data) {
      return _super.call(this, "text", data) || this;
    }
    return Text3;
  }(DataNode);
  exports.Text = Text2;
  var Comment = function(_super) {
    __extends(Comment2, _super);
    function Comment2(data) {
      return _super.call(this, "comment", data) || this;
    }
    return Comment2;
  }(DataNode);
  exports.Comment = Comment;
  var ProcessingInstruction = function(_super) {
    __extends(ProcessingInstruction2, _super);
    function ProcessingInstruction2(name, data) {
      var _this = _super.call(this, "directive", data) || this;
      return _this.name = name, _this;
    }
    return ProcessingInstruction2;
  }(DataNode);
  exports.ProcessingInstruction = ProcessingInstruction;
  var NodeWithChildren = function(_super) {
    __extends(NodeWithChildren2, _super);
    function NodeWithChildren2(type, children) {
      var _this = _super.call(this, type) || this;
      return _this.children = children, _this;
    }
    return Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
      get: function() {
        var _a;
        return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
      get: function() {
        return this.children.length > 0 ? this.children[this.children.length - 1] : null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
      get: function() {
        return this.children;
      },
      set: function(children) {
        this.children = children;
      },
      enumerable: !1,
      configurable: !0
    }), NodeWithChildren2;
  }(Node);
  exports.NodeWithChildren = NodeWithChildren;
  var Document = function(_super) {
    __extends(Document2, _super);
    function Document2(children) {
      return _super.call(this, "root", children) || this;
    }
    return Document2;
  }(NodeWithChildren);
  exports.Document = Document;
  var Element = function(_super) {
    __extends(Element2, _super);
    function Element2(name, attribs, children) {
      children === void 0 && (children = []);
      var _this = _super.call(this, name === "script" ? "script" : name === "style" ? "style" : "tag", children) || this;
      return _this.name = name, _this.attribs = attribs, _this.attribs = attribs, _this;
    }
    return Object.defineProperty(Element2.prototype, "tagName", {
      get: function() {
        return this.name;
      },
      set: function(name) {
        this.name = name;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Element2.prototype, "attributes", {
      get: function() {
        var _this = this;
        return Object.keys(this.attribs).map(function(name) {
          var _a, _b;
          return {
            name,
            value: _this.attribs[name],
            namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
            prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
          };
        });
      },
      enumerable: !1,
      configurable: !0
    }), Element2;
  }(NodeWithChildren);
  exports.Element = Element;
  function cloneNode(node, recursive) {
    recursive === void 0 && (recursive = !1);
    var result;
    switch (node.type) {
      case "text":
        result = new Text2(node.data);
        break;
      case "directive": {
        var instr = node;
        result = new ProcessingInstruction(instr.name, instr.data), instr["x-name"] != null && (result["x-name"] = instr["x-name"], result["x-publicId"] = instr["x-publicId"], result["x-systemId"] = instr["x-systemId"]);
        break;
      }
      case "comment":
        result = new Comment(node.data);
        break;
      case "tag":
      case "script":
      case "style": {
        var elem = node, children = recursive ? cloneChildren(elem.children) : [], clone_1 = new Element(elem.name, __assign({}, elem.attribs), children);
        children.forEach(function(child) {
          return child.parent = clone_1;
        }), elem["x-attribsNamespace"] && (clone_1["x-attribsNamespace"] = __assign({}, elem["x-attribsNamespace"])), elem["x-attribsPrefix"] && (clone_1["x-attribsPrefix"] = __assign({}, elem["x-attribsPrefix"])), result = clone_1;
        break;
      }
      case "cdata": {
        var cdata = node, children = recursive ? cloneChildren(cdata.children) : [], clone_2 = new NodeWithChildren(node.type, children);
        children.forEach(function(child) {
          return child.parent = clone_2;
        }), result = clone_2;
        break;
      }
      case "root": {
        var doc = node, children = recursive ? cloneChildren(doc.children) : [], clone_3 = new Document(children);
        children.forEach(function(child) {
          return child.parent = clone_3;
        }), doc["x-mode"] && (clone_3["x-mode"] = doc["x-mode"]), result = clone_3;
        break;
      }
      case "doctype":
        throw new Error("Not implemented yet: ElementType.Doctype case");
    }
    return result.startIndex = node.startIndex, result.endIndex = node.endIndex, result;
  }
  exports.cloneNode = cloneNode;
  function cloneChildren(childs) {
    for (var children = childs.map(function(child) {
      return cloneNode(child, !0);
    }), i2 = 1; i2 < children.length; i2++)
      children[i2].prev = children[i2 - 1], children[i2 - 1].next = children[i2];
    return children;
  }
});

// node_modules/.pnpm/esbuild-wasm@0.9.2/node_modules/esbuild-wasm/lib/browser.js
var require_browser = __commonJS((exports) => {
  ((exports2) => {
    var __defProp2 = Object.defineProperty, __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: !0}), __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, {get: all[name], enumerable: !0});
    }, __async = (__this, __arguments, generator) => new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }, rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      }, step = (result) => result.done ? resolve(result.value) : Promise.resolve(result.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
    __markAsModule2(exports2), __export2(exports2, {
      build: () => build2,
      buildSync: () => buildSync,
      initialize: () => initialize,
      serve: () => serve,
      transform: () => transform,
      transformSync: () => transformSync,
      version: () => version
    });
    function encodePacket(packet) {
      let visit = (value) => {
        if (value === null)
          bb.write8(0);
        else if (typeof value == "boolean")
          bb.write8(1), bb.write8(+value);
        else if (typeof value == "number")
          bb.write8(2), bb.write32(value | 0);
        else if (typeof value == "string")
          bb.write8(3), bb.write(encodeUTF8(value));
        else if (value instanceof Uint8Array)
          bb.write8(4), bb.write(value);
        else if (value instanceof Array) {
          bb.write8(5), bb.write32(value.length);
          for (let item of value)
            visit(item);
        } else {
          let keys2 = Object.keys(value);
          bb.write8(6), bb.write32(keys2.length);
          for (let key of keys2)
            bb.write(encodeUTF8(key)), visit(value[key]);
        }
      }, bb = new ByteBuffer();
      return bb.write32(0), bb.write32(packet.id << 1 | +!packet.isRequest), visit(packet.value), writeUInt32LE(bb.buf, bb.len - 4, 0), bb.buf.subarray(0, bb.len);
    }
    function decodePacket(bytes) {
      let visit = () => {
        switch (bb.read8()) {
          case 0:
            return null;
          case 1:
            return !!bb.read8();
          case 2:
            return bb.read32();
          case 3:
            return decodeUTF8(bb.read());
          case 4:
            return bb.read();
          case 5: {
            let count = bb.read32(), value2 = [];
            for (let i2 = 0; i2 < count; i2++)
              value2.push(visit());
            return value2;
          }
          case 6: {
            let count = bb.read32(), value2 = {};
            for (let i2 = 0; i2 < count; i2++)
              value2[decodeUTF8(bb.read())] = visit();
            return value2;
          }
          default:
            throw new Error("Invalid packet");
        }
      }, bb = new ByteBuffer(bytes), id = bb.read32(), isRequest = (id & 1) == 0;
      id >>>= 1;
      let value = visit();
      if (bb.ptr !== bytes.length)
        throw new Error("Invalid packet");
      return {id, isRequest, value};
    }
    var ByteBuffer = class {
      constructor(buf = new Uint8Array(1024)) {
        this.buf = buf, this.len = 0, this.ptr = 0;
      }
      _write(delta) {
        if (this.len + delta > this.buf.length) {
          let clone = new Uint8Array((this.len + delta) * 2);
          clone.set(this.buf), this.buf = clone;
        }
        return this.len += delta, this.len - delta;
      }
      write8(value) {
        let offset = this._write(1);
        this.buf[offset] = value;
      }
      write32(value) {
        let offset = this._write(4);
        writeUInt32LE(this.buf, value, offset);
      }
      write(bytes) {
        let offset = this._write(4 + bytes.length);
        writeUInt32LE(this.buf, bytes.length, offset), this.buf.set(bytes, offset + 4);
      }
      _read(delta) {
        if (this.ptr + delta > this.buf.length)
          throw new Error("Invalid packet");
        return this.ptr += delta, this.ptr - delta;
      }
      read8() {
        return this.buf[this._read(1)];
      }
      read32() {
        return readUInt32LE(this.buf, this._read(4));
      }
      read() {
        let length = this.read32(), bytes = new Uint8Array(length), ptr = this._read(bytes.length);
        return bytes.set(this.buf.subarray(ptr, ptr + length)), bytes;
      }
    }, encodeUTF8, decodeUTF8;
    if (typeof TextEncoder != "undefined" && typeof TextDecoder != "undefined") {
      let encoder = new TextEncoder(), decoder = new TextDecoder();
      encodeUTF8 = (text) => encoder.encode(text), decodeUTF8 = (bytes) => decoder.decode(bytes);
    } else if (typeof Buffer != "undefined")
      encodeUTF8 = (text) => {
        let buffer = Buffer.from(text);
        return buffer instanceof Uint8Array || (buffer = new Uint8Array(buffer)), buffer;
      }, decodeUTF8 = (bytes) => Buffer.from(bytes).toString();
    else
      throw new Error("No UTF-8 codec found");
    function readUInt32LE(buffer, offset) {
      return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
    }
    function writeUInt32LE(buffer, value, offset) {
      buffer[offset++] = value, buffer[offset++] = value >> 8, buffer[offset++] = value >> 16, buffer[offset++] = value >> 24;
    }
    function validateTarget(target) {
      if (target += "", target.indexOf(",") >= 0)
        throw new Error(`Invalid target: ${target}`);
      return target;
    }
    var canBeAnything = () => null, mustBeBoolean = (value) => typeof value == "boolean" ? null : "a boolean", mustBeBooleanOrObject = (value) => typeof value == "boolean" || typeof value == "object" && !Array.isArray(value) ? null : "a boolean or an object", mustBeString = (value) => typeof value == "string" ? null : "a string", mustBeRegExp = (value) => value instanceof RegExp ? null : "a RegExp object", mustBeInteger = (value) => typeof value == "number" && value === (value | 0) ? null : "an integer", mustBeFunction = (value) => typeof value == "function" ? null : "a function", mustBeArray = (value) => Array.isArray(value) ? null : "an array", mustBeObject = (value) => typeof value == "object" && value !== null && !Array.isArray(value) ? null : "an object", mustBeObjectOrNull = (value) => typeof value == "object" && !Array.isArray(value) ? null : "an object or null", mustBeStringOrBoolean = (value) => typeof value == "string" || typeof value == "boolean" ? null : "a string or a boolean", mustBeStringOrObject = (value) => typeof value == "string" || typeof value == "object" && value !== null && !Array.isArray(value) ? null : "a string or an object", mustBeStringOrArray = (value) => typeof value == "string" || Array.isArray(value) ? null : "a string or an array", mustBeStringOrUint8Array = (value) => typeof value == "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array";
    function getFlag(object, keys2, key, mustBeFn) {
      let value = object[key];
      if (keys2[key + ""] = !0, value === void 0)
        return;
      let mustBe = mustBeFn(value);
      if (mustBe !== null)
        throw new Error(`"${key}" must be ${mustBe}`);
      return value;
    }
    function checkForInvalidFlags(object, keys2, where) {
      for (let key in object)
        if (!(key in keys2))
          throw new Error(`Invalid option ${where}: "${key}"`);
    }
    function validateInitializeOptions(options) {
      let keys2 = Object.create(null), wasmURL = getFlag(options, keys2, "wasmURL", mustBeString), worker = getFlag(options, keys2, "worker", mustBeBoolean);
      return checkForInvalidFlags(options, keys2, "in startService() call"), {
        wasmURL,
        worker
      };
    }
    function pushLogFlags(flags, options, keys2, isTTY, logLevelDefault) {
      let color = getFlag(options, keys2, "color", mustBeBoolean), logLevel = getFlag(options, keys2, "logLevel", mustBeString), logLimit = getFlag(options, keys2, "logLimit", mustBeInteger);
      color ? flags.push(`--color=${color}`) : isTTY && flags.push("--color=true"), flags.push(`--log-level=${logLevel || logLevelDefault}`), flags.push(`--log-limit=${logLimit || 0}`);
    }
    function pushCommonFlags(flags, options, keys2) {
      let sourcesContent = getFlag(options, keys2, "sourcesContent", mustBeBoolean), target = getFlag(options, keys2, "target", mustBeStringOrArray), format = getFlag(options, keys2, "format", mustBeString), globalName = getFlag(options, keys2, "globalName", mustBeString), minify = getFlag(options, keys2, "minify", mustBeBoolean), minifySyntax = getFlag(options, keys2, "minifySyntax", mustBeBoolean), minifyWhitespace = getFlag(options, keys2, "minifyWhitespace", mustBeBoolean), minifyIdentifiers = getFlag(options, keys2, "minifyIdentifiers", mustBeBoolean), charset = getFlag(options, keys2, "charset", mustBeString), treeShaking = getFlag(options, keys2, "treeShaking", mustBeStringOrBoolean), jsxFactory = getFlag(options, keys2, "jsxFactory", mustBeString), jsxFragment = getFlag(options, keys2, "jsxFragment", mustBeString), define = getFlag(options, keys2, "define", mustBeObject), pure = getFlag(options, keys2, "pure", mustBeArray), keepNames = getFlag(options, keys2, "keepNames", mustBeBoolean);
      if (sourcesContent !== void 0 && flags.push(`--sources-content=${sourcesContent}`), target && (Array.isArray(target) ? flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`) : flags.push(`--target=${validateTarget(target)}`)), format && flags.push(`--format=${format}`), globalName && flags.push(`--global-name=${globalName}`), minify && flags.push("--minify"), minifySyntax && flags.push("--minify-syntax"), minifyWhitespace && flags.push("--minify-whitespace"), minifyIdentifiers && flags.push("--minify-identifiers"), charset && flags.push(`--charset=${charset}`), treeShaking !== void 0 && treeShaking !== !0 && flags.push(`--tree-shaking=${treeShaking}`), jsxFactory && flags.push(`--jsx-factory=${jsxFactory}`), jsxFragment && flags.push(`--jsx-fragment=${jsxFragment}`), define)
        for (let key in define) {
          if (key.indexOf("=") >= 0)
            throw new Error(`Invalid define: ${key}`);
          flags.push(`--define:${key}=${define[key]}`);
        }
      if (pure)
        for (let fn of pure)
          flags.push(`--pure:${fn}`);
      keepNames && flags.push("--keep-names");
    }
    function flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault) {
      var _a;
      let flags = [], keys2 = Object.create(null), stdinContents = null, stdinResolveDir = null, watchMode = null;
      pushLogFlags(flags, options, keys2, isTTY, logLevelDefault), pushCommonFlags(flags, options, keys2);
      let sourcemap = getFlag(options, keys2, "sourcemap", mustBeStringOrBoolean), bundle = getFlag(options, keys2, "bundle", mustBeBoolean), watch = getFlag(options, keys2, "watch", mustBeBooleanOrObject), splitting = getFlag(options, keys2, "splitting", mustBeBoolean), preserveSymlinks = getFlag(options, keys2, "preserveSymlinks", mustBeBoolean), metafile = getFlag(options, keys2, "metafile", mustBeBoolean), outfile = getFlag(options, keys2, "outfile", mustBeString), outdir = getFlag(options, keys2, "outdir", mustBeString), outbase = getFlag(options, keys2, "outbase", mustBeString), platform = getFlag(options, keys2, "platform", mustBeString), tsconfig = getFlag(options, keys2, "tsconfig", mustBeString), resolveExtensions = getFlag(options, keys2, "resolveExtensions", mustBeArray), nodePathsInput = getFlag(options, keys2, "nodePaths", mustBeArray), mainFields = getFlag(options, keys2, "mainFields", mustBeArray), conditions = getFlag(options, keys2, "conditions", mustBeArray), external = getFlag(options, keys2, "external", mustBeArray), loader = getFlag(options, keys2, "loader", mustBeObject), outExtension = getFlag(options, keys2, "outExtension", mustBeObject), publicPath = getFlag(options, keys2, "publicPath", mustBeString), chunkNames = getFlag(options, keys2, "chunkNames", mustBeString), assetNames = getFlag(options, keys2, "assetNames", mustBeString), inject = getFlag(options, keys2, "inject", mustBeArray), banner = getFlag(options, keys2, "banner", mustBeObject), footer = getFlag(options, keys2, "footer", mustBeObject), entryPoints = getFlag(options, keys2, "entryPoints", mustBeArray), absWorkingDir = getFlag(options, keys2, "absWorkingDir", mustBeString), stdin = getFlag(options, keys2, "stdin", mustBeObject), write = (_a = getFlag(options, keys2, "write", mustBeBoolean)) != null ? _a : writeDefault, incremental = getFlag(options, keys2, "incremental", mustBeBoolean) === !0, plugins = getFlag(options, keys2, "plugins", mustBeArray);
      if (checkForInvalidFlags(options, keys2, `in ${callName}() call`), sourcemap && flags.push(`--sourcemap${sourcemap === !0 ? "" : `=${sourcemap}`}`), bundle && flags.push("--bundle"), watch)
        if (flags.push("--watch"), typeof watch == "boolean")
          watchMode = {};
        else {
          let watchKeys = Object.create(null), onRebuild = getFlag(watch, watchKeys, "onRebuild", mustBeFunction);
          checkForInvalidFlags(watch, watchKeys, `on "watch" in ${callName}() call`), watchMode = {onRebuild};
        }
      if (splitting && flags.push("--splitting"), preserveSymlinks && flags.push("--preserve-symlinks"), metafile && flags.push("--metafile"), outfile && flags.push(`--outfile=${outfile}`), outdir && flags.push(`--outdir=${outdir}`), outbase && flags.push(`--outbase=${outbase}`), platform && flags.push(`--platform=${platform}`), tsconfig && flags.push(`--tsconfig=${tsconfig}`), resolveExtensions) {
        let values = [];
        for (let value of resolveExtensions) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid resolve extension: ${value}`);
          values.push(value);
        }
        flags.push(`--resolve-extensions=${values.join(",")}`);
      }
      if (publicPath && flags.push(`--public-path=${publicPath}`), chunkNames && flags.push(`--chunk-names=${chunkNames}`), assetNames && flags.push(`--asset-names=${assetNames}`), mainFields) {
        let values = [];
        for (let value of mainFields) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid main field: ${value}`);
          values.push(value);
        }
        flags.push(`--main-fields=${values.join(",")}`);
      }
      if (conditions) {
        let values = [];
        for (let value of conditions) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid condition: ${value}`);
          values.push(value);
        }
        flags.push(`--conditions=${values.join(",")}`);
      }
      if (external)
        for (let name of external)
          flags.push(`--external:${name}`);
      if (banner)
        for (let type in banner) {
          if (type.indexOf("=") >= 0)
            throw new Error(`Invalid banner file type: ${type}`);
          flags.push(`--banner:${type}=${banner[type]}`);
        }
      if (footer)
        for (let type in footer) {
          if (type.indexOf("=") >= 0)
            throw new Error(`Invalid footer file type: ${type}`);
          flags.push(`--footer:${type}=${footer[type]}`);
        }
      if (inject)
        for (let path7 of inject)
          flags.push(`--inject:${path7}`);
      if (loader)
        for (let ext in loader) {
          if (ext.indexOf("=") >= 0)
            throw new Error(`Invalid loader extension: ${ext}`);
          flags.push(`--loader:${ext}=${loader[ext]}`);
        }
      if (outExtension)
        for (let ext in outExtension) {
          if (ext.indexOf("=") >= 0)
            throw new Error(`Invalid out extension: ${ext}`);
          flags.push(`--out-extension:${ext}=${outExtension[ext]}`);
        }
      if (entryPoints)
        for (let entryPoint of entryPoints) {
          if (entryPoint += "", entryPoint.startsWith("-"))
            throw new Error(`Invalid entry point: ${entryPoint}`);
          flags.push(entryPoint);
        }
      if (stdin) {
        let stdinKeys = Object.create(null), contents = getFlag(stdin, stdinKeys, "contents", mustBeString), resolveDir = getFlag(stdin, stdinKeys, "resolveDir", mustBeString), sourcefile = getFlag(stdin, stdinKeys, "sourcefile", mustBeString), loader2 = getFlag(stdin, stdinKeys, "loader", mustBeString);
        checkForInvalidFlags(stdin, stdinKeys, 'in "stdin" object'), sourcefile && flags.push(`--sourcefile=${sourcefile}`), loader2 && flags.push(`--loader=${loader2}`), resolveDir && (stdinResolveDir = resolveDir + ""), stdinContents = contents ? contents + "" : "";
      }
      let nodePaths = [];
      if (nodePathsInput)
        for (let value of nodePathsInput)
          value += "", nodePaths.push(value);
      return {
        flags,
        write,
        plugins,
        stdinContents,
        stdinResolveDir,
        absWorkingDir,
        incremental,
        nodePaths,
        watch: watchMode
      };
    }
    function flagsForTransformOptions(callName, options, isTTY, logLevelDefault) {
      let flags = [], keys2 = Object.create(null);
      pushLogFlags(flags, options, keys2, isTTY, logLevelDefault), pushCommonFlags(flags, options, keys2);
      let sourcemap = getFlag(options, keys2, "sourcemap", mustBeStringOrBoolean), tsconfigRaw = getFlag(options, keys2, "tsconfigRaw", mustBeStringOrObject), sourcefile = getFlag(options, keys2, "sourcefile", mustBeString), loader = getFlag(options, keys2, "loader", mustBeString), banner = getFlag(options, keys2, "banner", mustBeString), footer = getFlag(options, keys2, "footer", mustBeString);
      return checkForInvalidFlags(options, keys2, `in ${callName}() call`), sourcemap && flags.push(`--sourcemap=${sourcemap === !0 ? "external" : sourcemap}`), tsconfigRaw && flags.push(`--tsconfig-raw=${typeof tsconfigRaw == "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`), sourcefile && flags.push(`--sourcefile=${sourcefile}`), loader && flags.push(`--loader=${loader}`), banner && flags.push(`--banner=${banner}`), footer && flags.push(`--footer=${footer}`), flags;
    }
    function createChannel(streamIn) {
      let responseCallbacks = new Map(), pluginCallbacks = new Map(), watchCallbacks = new Map(), serveCallbacks = new Map(), nextServeID = 0, isClosed = !1, nextRequestID = 0, nextBuildKey = 0, stdout = new Uint8Array(16 * 1024), stdoutUsed = 0, readFromStdout = (chunk) => {
        let limit = stdoutUsed + chunk.length;
        if (limit > stdout.length) {
          let swap = new Uint8Array(limit * 2);
          swap.set(stdout), stdout = swap;
        }
        stdout.set(chunk, stdoutUsed), stdoutUsed += chunk.length;
        let offset = 0;
        for (; offset + 4 <= stdoutUsed; ) {
          let length = readUInt32LE(stdout, offset);
          if (offset + 4 + length > stdoutUsed)
            break;
          offset += 4, handleIncomingPacket(stdout.slice(offset, offset + length)), offset += length;
        }
        offset > 0 && (stdout.copyWithin(0, offset, stdoutUsed), stdoutUsed -= offset);
      }, afterClose = () => {
        isClosed = !0;
        for (let callback of responseCallbacks.values())
          callback("The service was stopped", null);
        responseCallbacks.clear();
        for (let callbacks of serveCallbacks.values())
          callbacks.onWait("The service was stopped");
        serveCallbacks.clear();
        for (let callback of watchCallbacks.values())
          try {
            callback(new Error("The service was stopped"), null);
          } catch (e) {
            console.error(e);
          }
        watchCallbacks.clear();
      }, sendRequest = (refs, value, callback) => {
        if (isClosed)
          return callback("The service is no longer running", null);
        let id = nextRequestID++;
        responseCallbacks.set(id, (error, response) => {
          try {
            callback(error, response);
          } finally {
            refs && refs.unref();
          }
        }), refs && refs.ref(), streamIn.writeToStdin(encodePacket({id, isRequest: !0, value}));
      }, sendResponse = (id, value) => {
        if (isClosed)
          throw new Error("The service is no longer running");
        streamIn.writeToStdin(encodePacket({id, isRequest: !1, value}));
      }, handleRequest = (id, request) => __async(this, null, function* () {
        try {
          switch (request.command) {
            case "ping": {
              sendResponse(id, {});
              break;
            }
            case "resolve": {
              let callback = pluginCallbacks.get(request.key);
              callback ? sendResponse(id, yield callback(request)) : sendResponse(id, {});
              break;
            }
            case "load": {
              let callback = pluginCallbacks.get(request.key);
              callback ? sendResponse(id, yield callback(request)) : sendResponse(id, {});
              break;
            }
            case "serve-request": {
              let callbacks = serveCallbacks.get(request.serveID);
              callbacks && callbacks.onRequest && callbacks.onRequest(request.args), sendResponse(id, {});
              break;
            }
            case "serve-wait": {
              let callbacks = serveCallbacks.get(request.serveID);
              callbacks && callbacks.onWait(request.error), sendResponse(id, {});
              break;
            }
            case "watch-rebuild": {
              let callback = watchCallbacks.get(request.watchID);
              try {
                callback && callback(null, request.args);
              } catch (err) {
                console.error(err);
              }
              sendResponse(id, {});
              break;
            }
            default:
              throw new Error("Invalid command: " + request.command);
          }
        } catch (e) {
          sendResponse(id, {errors: [extractErrorMessageV8(e, streamIn, null, void 0)]});
        }
      }), isFirstPacket = !0, handleIncomingPacket = (bytes) => {
        if (isFirstPacket) {
          isFirstPacket = !1;
          let binaryVersion = String.fromCharCode(...bytes);
          if (binaryVersion !== "0.9.2")
            throw new Error(`Cannot start service: Host version "0.9.2" does not match binary version ${JSON.stringify(binaryVersion)}`);
          return;
        }
        let packet = decodePacket(bytes);
        if (packet.isRequest)
          handleRequest(packet.id, packet.value);
        else {
          let callback = responseCallbacks.get(packet.id);
          responseCallbacks.delete(packet.id), packet.value.error ? callback(packet.value.error, {}) : callback(null, packet.value);
        }
      }, handlePlugins = (plugins, request, buildKey, stash) => {
        if (streamIn.isSync)
          throw new Error("Cannot use plugins in synchronous API calls");
        let onResolveCallbacks = {}, onLoadCallbacks = {}, nextCallbackID = 0, i2 = 0;
        request.plugins = [];
        for (let item of plugins) {
          let keys2 = {};
          if (typeof item != "object")
            throw new Error(`Plugin at index ${i2} must be an object`);
          let name = getFlag(item, keys2, "name", mustBeString), setup = getFlag(item, keys2, "setup", mustBeFunction);
          if (typeof name != "string" || name === "")
            throw new Error(`Plugin at index ${i2} is missing a name`);
          if (typeof setup != "function")
            throw new Error(`[${name}] Plugin is missing a setup function`);
          checkForInvalidFlags(item, keys2, `on plugin ${JSON.stringify(name)}`);
          let plugin = {
            name,
            onResolve: [],
            onLoad: []
          };
          i2++, setup({
            onResolve(options, callback2) {
              let registeredText = 'This error came from the "onResolve" callback registered here', registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onResolve"), keys22 = {}, filter = getFlag(options, keys22, "filter", mustBeRegExp), namespace = getFlag(options, keys22, "namespace", mustBeString);
              if (checkForInvalidFlags(options, keys22, `in onResolve() call for plugin ${JSON.stringify(name)}`), filter == null)
                throw new Error(`[${plugin.name}] onResolve() call is missing a filter`);
              let id = nextCallbackID++;
              onResolveCallbacks[id] = {name, callback: callback2, note: registeredNote}, plugin.onResolve.push({id, filter: filter.source, namespace: namespace || ""});
            },
            onLoad(options, callback2) {
              let registeredText = 'This error came from the "onLoad" callback registered here', registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onLoad"), keys22 = {}, filter = getFlag(options, keys22, "filter", mustBeRegExp), namespace = getFlag(options, keys22, "namespace", mustBeString);
              if (checkForInvalidFlags(options, keys22, `in onLoad() call for plugin ${JSON.stringify(name)}`), filter == null)
                throw new Error(`[${plugin.name}] onLoad() call is missing a filter`);
              let id = nextCallbackID++;
              onLoadCallbacks[id] = {name, callback: callback2, note: registeredNote}, plugin.onLoad.push({id, filter: filter.source, namespace: namespace || ""});
            }
          }), request.plugins.push(plugin);
        }
        let callback = (request2) => __async(this, null, function* () {
          switch (request2.command) {
            case "resolve": {
              let response = {}, name, callback2, note;
              for (let id of request2.ids)
                try {
                  ({name, callback: callback2, note} = onResolveCallbacks[id]);
                  let result = yield callback2({
                    path: request2.path,
                    importer: request2.importer,
                    namespace: request2.namespace,
                    resolveDir: request2.resolveDir,
                    kind: request2.kind,
                    pluginData: stash.load(request2.pluginData)
                  });
                  if (result != null) {
                    if (typeof result != "object")
                      throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);
                    let keys2 = {}, pluginName = getFlag(result, keys2, "pluginName", mustBeString), path7 = getFlag(result, keys2, "path", mustBeString), namespace = getFlag(result, keys2, "namespace", mustBeString), external = getFlag(result, keys2, "external", mustBeBoolean), pluginData = getFlag(result, keys2, "pluginData", canBeAnything), errors = getFlag(result, keys2, "errors", mustBeArray), warnings = getFlag(result, keys2, "warnings", mustBeArray);
                    checkForInvalidFlags(result, keys2, `from onResolve() callback in plugin ${JSON.stringify(name)}`), response.id = id, pluginName != null && (response.pluginName = pluginName), path7 != null && (response.path = path7), namespace != null && (response.namespace = namespace), external != null && (response.external = external), pluginData != null && (response.pluginData = stash.store(pluginData)), errors != null && (response.errors = sanitizeMessages(errors, "errors", stash)), warnings != null && (response.warnings = sanitizeMessages(warnings, "warnings", stash));
                    break;
                  }
                } catch (e) {
                  return {id, errors: [extractErrorMessageV8(e, streamIn, stash, note)]};
                }
              return response;
            }
            case "load": {
              let response = {}, name, callback2, note;
              for (let id of request2.ids)
                try {
                  ({name, callback: callback2, note} = onLoadCallbacks[id]);
                  let result = yield callback2({
                    path: request2.path,
                    namespace: request2.namespace,
                    pluginData: stash.load(request2.pluginData)
                  });
                  if (result != null) {
                    if (typeof result != "object")
                      throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);
                    let keys2 = {}, pluginName = getFlag(result, keys2, "pluginName", mustBeString), contents = getFlag(result, keys2, "contents", mustBeStringOrUint8Array), resolveDir = getFlag(result, keys2, "resolveDir", mustBeString), pluginData = getFlag(result, keys2, "pluginData", canBeAnything), loader = getFlag(result, keys2, "loader", mustBeString), errors = getFlag(result, keys2, "errors", mustBeArray), warnings = getFlag(result, keys2, "warnings", mustBeArray);
                    checkForInvalidFlags(result, keys2, `from onLoad() callback in plugin ${JSON.stringify(name)}`), response.id = id, pluginName != null && (response.pluginName = pluginName), contents instanceof Uint8Array ? response.contents = contents : contents != null && (response.contents = encodeUTF8(contents)), resolveDir != null && (response.resolveDir = resolveDir), pluginData != null && (response.pluginData = stash.store(pluginData)), loader != null && (response.loader = loader), errors != null && (response.errors = sanitizeMessages(errors, "errors", stash)), warnings != null && (response.warnings = sanitizeMessages(warnings, "warnings", stash));
                    break;
                  }
                } catch (e) {
                  return {id, errors: [extractErrorMessageV8(e, streamIn, stash, note)]};
                }
              return response;
            }
            default:
              throw new Error("Invalid command: " + request2.command);
          }
        }), refCount = 0;
        return {
          ref() {
            ++refCount == 1 && pluginCallbacks.set(buildKey, callback);
          },
          unref() {
            --refCount == 0 && pluginCallbacks.delete(buildKey);
          }
        };
      }, buildServeData = (refs, options, request) => {
        let keys2 = {}, port = getFlag(options, keys2, "port", mustBeInteger), host = getFlag(options, keys2, "host", mustBeString), servedir = getFlag(options, keys2, "servedir", mustBeString), onRequest = getFlag(options, keys2, "onRequest", mustBeFunction), serveID = nextServeID++, onWait, wait = new Promise((resolve, reject) => {
          onWait = (error) => {
            serveCallbacks.delete(serveID), error !== null ? reject(new Error(error)) : resolve();
          };
        });
        return request.serve = {serveID}, checkForInvalidFlags(options, keys2, "in serve() call"), port !== void 0 && (request.serve.port = port), host !== void 0 && (request.serve.host = host), servedir !== void 0 && (request.serve.servedir = servedir), serveCallbacks.set(serveID, {
          onRequest,
          onWait
        }), {
          wait,
          stop() {
            sendRequest(refs, {command: "serve-stop", serveID}, () => {
            });
          }
        };
      };
      return {
        readFromStdout,
        afterClose,
        service: {
          buildOrServe(callName, callerRefs, serveOptions, options, isTTY, defaultWD, callback) {
            let pluginRefs, details = createObjectStash(), logLevelDefault = "warning", refs = {
              ref() {
                pluginRefs && pluginRefs.ref(), callerRefs && callerRefs.ref();
              },
              unref() {
                pluginRefs && pluginRefs.unref(), callerRefs && callerRefs.unref();
              }
            };
            try {
              let key = nextBuildKey++, writeDefault = !streamIn.isBrowser, {
                flags,
                write,
                plugins,
                stdinContents,
                stdinResolveDir,
                absWorkingDir,
                incremental,
                nodePaths,
                watch
              } = flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault), request = {
                command: "build",
                key,
                flags,
                write,
                stdinContents,
                stdinResolveDir,
                absWorkingDir: absWorkingDir || defaultWD,
                incremental,
                nodePaths,
                hasOnRebuild: !!(watch && watch.onRebuild)
              }, serve2 = serveOptions && buildServeData(refs, serveOptions, request);
              plugins && plugins.length > 0 && (pluginRefs = handlePlugins(plugins, request, key, details));
              let rebuild, stop, buildResponseToResult = (response, callback2) => {
                let errors = replaceDetailsInMessages(response.errors, details), warnings = replaceDetailsInMessages(response.warnings, details);
                if (errors.length > 0)
                  return callback2(failureErrorWithLog("Build failed", errors, warnings), null);
                let result = {warnings};
                if (response.outputFiles && (result.outputFiles = response.outputFiles.map(convertOutputFiles)), response.metafile && (result.metafile = JSON.parse(response.metafile)), response.writeToStdout !== void 0 && console.log(decodeUTF8(response.writeToStdout).replace(/\n$/, "")), response.rebuildID !== void 0) {
                  if (!rebuild) {
                    let isDisposed = !1;
                    rebuild = () => new Promise((resolve, reject) => {
                      if (isDisposed || isClosed)
                        throw new Error("Cannot rebuild");
                      sendRequest(refs, {command: "rebuild", rebuildID: response.rebuildID}, (error2, response2) => {
                        if (error2)
                          return callback2(new Error(error2), null);
                        buildResponseToResult(response2, (error3, result3) => {
                          error3 ? reject(error3) : resolve(result3);
                        });
                      });
                    }), refs.ref(), rebuild.dispose = () => {
                      isDisposed || (isDisposed = !0, sendRequest(refs, {command: "rebuild-dispose", rebuildID: response.rebuildID}, () => {
                      }), refs.unref());
                    };
                  }
                  result.rebuild = rebuild;
                }
                if (response.watchID !== void 0) {
                  if (!stop) {
                    let isStopped = !1;
                    refs.ref(), stop = () => {
                      isStopped || (isStopped = !0, watchCallbacks.delete(response.watchID), sendRequest(refs, {command: "watch-stop", watchID: response.watchID}, () => {
                      }), refs.unref());
                    }, watch && watch.onRebuild && watchCallbacks.set(response.watchID, (serviceStopError, watchResponse) => {
                      if (serviceStopError)
                        return watch.onRebuild(serviceStopError, null);
                      let errors2 = replaceDetailsInMessages(watchResponse.errors, details), warnings2 = replaceDetailsInMessages(watchResponse.warnings, details);
                      if (errors2.length > 0)
                        return watch.onRebuild(failureErrorWithLog("Build failed", errors2, warnings2), null);
                      let result2 = {warnings: warnings2};
                      watchResponse.outputFiles && (result2.outputFiles = watchResponse.outputFiles.map(convertOutputFiles)), watchResponse.rebuildID !== void 0 && (result2.rebuild = rebuild), result2.stop = stop, watch.onRebuild(null, result2);
                    });
                  }
                  result.stop = stop;
                }
                return callback2(null, result);
              };
              if (write && streamIn.isBrowser)
                throw new Error('Cannot enable "write" in the browser');
              if (incremental && streamIn.isSync)
                throw new Error('Cannot use "incremental" with a synchronous build');
              sendRequest(refs, request, (error, response) => {
                if (error)
                  return callback(new Error(error), null);
                if (serve2) {
                  let serveResponse = response, isStopped = !1;
                  refs.ref();
                  let result = {
                    port: serveResponse.port,
                    host: serveResponse.host,
                    wait: serve2.wait,
                    stop() {
                      isStopped || (isStopped = !0, serve2.stop(), refs.unref());
                    }
                  };
                  return refs.ref(), serve2.wait.then(refs.unref, refs.unref), callback(null, result);
                }
                return buildResponseToResult(response, callback);
              });
            } catch (e) {
              let flags = [];
              try {
                pushLogFlags(flags, options, {}, isTTY, logLevelDefault);
              } catch (e2) {
              }
              let error = extractErrorMessageV8(e, streamIn, details, void 0);
              sendRequest(refs, {command: "error", flags, error}, () => {
                error.detail = details.load(error.detail), callback(failureErrorWithLog("Build failed", [error], []), null);
              });
            }
          },
          transform(callName, refs, input, options, isTTY, fs, callback) {
            let details = createObjectStash(), logLevelDefault = "silent", start = (inputPath) => {
              try {
                if (typeof input != "string")
                  throw new Error('The input to "transform" must be a string');
                let flags = flagsForTransformOptions(callName, options, isTTY, logLevelDefault);
                sendRequest(refs, {
                  command: "transform",
                  flags,
                  inputFS: inputPath !== null,
                  input: inputPath !== null ? inputPath : input
                }, (error, response) => {
                  if (error)
                    return callback(new Error(error), null);
                  let errors = replaceDetailsInMessages(response.errors, details), warnings = replaceDetailsInMessages(response.warnings, details), outstanding = 1, next = () => --outstanding == 0 && callback(null, {warnings, code: response.code, map: response.map});
                  if (errors.length > 0)
                    return callback(failureErrorWithLog("Transform failed", errors, warnings), null);
                  response.codeFS && (outstanding++, fs.readFile(response.code, (err, contents) => {
                    err !== null ? callback(err, null) : (response.code = contents, next());
                  })), response.mapFS && (outstanding++, fs.readFile(response.map, (err, contents) => {
                    err !== null ? callback(err, null) : (response.map = contents, next());
                  })), next();
                });
              } catch (e) {
                let flags = [];
                try {
                  pushLogFlags(flags, options, {}, isTTY, logLevelDefault);
                } catch (e2) {
                }
                let error = extractErrorMessageV8(e, streamIn, details, void 0);
                sendRequest(refs, {command: "error", flags, error}, () => {
                  error.detail = details.load(error.detail), callback(failureErrorWithLog("Transform failed", [error], []), null);
                });
              }
            };
            if (typeof input == "string" && input.length > 1024 * 1024) {
              let next = start;
              start = () => fs.writeFile(input, next);
            }
            start(null);
          }
        }
      };
    }
    function createObjectStash() {
      let map = new Map(), nextID = 0;
      return {
        load(id) {
          return map.get(id);
        },
        store(value) {
          if (value === void 0)
            return -1;
          let id = nextID++;
          return map.set(id, value), id;
        }
      };
    }
    function extractCallerV8(e, streamIn, ident) {
      try {
        let lines = (e.stack + "").split(`
`);
        lines.splice(1, 1);
        let location2 = parseStackLinesV8(streamIn, lines, ident);
        if (location2)
          return {text: e.message, location: location2};
      } catch (e2) {
      }
    }
    function extractErrorMessageV8(e, streamIn, stash, note) {
      let text = "Internal error", location2 = null;
      try {
        text = (e && e.message || e) + "";
      } catch (e2) {
      }
      try {
        location2 = parseStackLinesV8(streamIn, (e.stack + "").split(`
`), "");
      } catch (e2) {
      }
      return {text, location: location2, notes: note ? [note] : [], detail: stash ? stash.store(e) : -1};
    }
    function parseStackLinesV8(streamIn, lines, ident) {
      let at = "    at ";
      if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at))
        for (let i2 = 1; i2 < lines.length; i2++) {
          let line = lines[i2];
          if (!!line.startsWith(at))
            for (line = line.slice(at.length); ; ) {
              let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
              if (match) {
                line = match[1];
                continue;
              }
              if (match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line), match) {
                line = match[1];
                continue;
              }
              if (match = /^(\S+):(\d+):(\d+)$/.exec(line), match) {
                let lineText = streamIn.readFileSync(match[1], "utf8").split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "", column = +match[3] - 1, length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
                return {
                  file: match[1],
                  namespace: "file",
                  line: +match[2],
                  column: encodeUTF8(lineText.slice(0, column)).length,
                  length: encodeUTF8(lineText.slice(column, column + length)).length,
                  lineText: lineText + `
` + lines.slice(1).join(`
`)
                };
              }
              break;
            }
        }
      return null;
    }
    function failureErrorWithLog(text, errors, warnings) {
      let limit = 5, summary = errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e, i2) => {
        if (i2 === limit)
          return `
...`;
        if (!e.location)
          return `
error: ${e.text}`;
        let {file, line, column} = e.location;
        return `
${file}:${line}:${column}: error: ${e.text}`;
      }).join(""), error = new Error(`${text}${summary}`);
      return error.errors = errors, error.warnings = warnings, error;
    }
    function replaceDetailsInMessages(messages, stash) {
      for (let message of messages)
        message.detail = stash.load(message.detail);
      return messages;
    }
    function sanitizeLocation(location2, where) {
      if (location2 == null)
        return null;
      let keys2 = {}, file = getFlag(location2, keys2, "file", mustBeString), namespace = getFlag(location2, keys2, "namespace", mustBeString), line = getFlag(location2, keys2, "line", mustBeInteger), column = getFlag(location2, keys2, "column", mustBeInteger), length = getFlag(location2, keys2, "length", mustBeInteger), lineText = getFlag(location2, keys2, "lineText", mustBeString);
      return checkForInvalidFlags(location2, keys2, where), {
        file: file || "",
        namespace: namespace || "",
        line: line || 0,
        column: column || 0,
        length: length || 0,
        lineText: lineText || ""
      };
    }
    function sanitizeMessages(messages, property, stash) {
      let messagesClone = [], index = 0;
      for (let message of messages) {
        let keys2 = {}, text = getFlag(message, keys2, "text", mustBeString), location2 = getFlag(message, keys2, "location", mustBeObjectOrNull), notes = getFlag(message, keys2, "notes", mustBeArray), detail = getFlag(message, keys2, "detail", canBeAnything), where = `in element ${index} of "${property}"`;
        checkForInvalidFlags(message, keys2, where);
        let notesClone = [];
        if (notes)
          for (let note of notes) {
            let noteKeys = {}, noteText = getFlag(note, noteKeys, "text", mustBeString), noteLocation = getFlag(note, noteKeys, "location", mustBeObjectOrNull);
            checkForInvalidFlags(note, noteKeys, where), notesClone.push({
              text: noteText || "",
              location: sanitizeLocation(noteLocation, where)
            });
          }
        messagesClone.push({
          text: text || "",
          location: sanitizeLocation(location2, where),
          notes: notesClone,
          detail: stash.store(detail)
        }), index++;
      }
      return messagesClone;
    }
    function convertOutputFiles({path: path7, contents}) {
      let text = null;
      return {
        path: path7,
        contents,
        get text() {
          return text === null && (text = decodeUTF8(contents)), text;
        }
      };
    }
    var version = "0.9.2", build2 = (options) => ensureServiceIsRunning().build(options), serve = () => {
      throw new Error('The "serve" API only works in node');
    }, transform = (input, options) => ensureServiceIsRunning().transform(input, options), buildSync = () => {
      throw new Error('The "buildSync" API only works in node');
    }, transformSync = () => {
      throw new Error('The "transformSync" API only works in node');
    }, initializePromise, longLivedService, ensureServiceIsRunning = () => {
      if (longLivedService)
        return longLivedService;
      throw initializePromise ? new Error('You need to wait for the promise returned from "initialize" to be resolved before calling this') : new Error('You need to call "initialize" before calling this');
    }, initialize = (options) => {
      options = validateInitializeOptions(options || {});
      let wasmURL = options.wasmURL, useWorker = options.worker !== !1;
      if (!wasmURL)
        throw new Error('Must provide the "wasmURL" option');
      if (wasmURL += "", initializePromise)
        throw new Error('Cannot call "initialize" more than once');
      return initializePromise = startRunningService(wasmURL, useWorker), initializePromise.catch(() => {
        initializePromise = void 0;
      }), initializePromise;
    }, startRunningService = (wasmURL, useWorker) => __async(void 0, null, function* () {
      let res = yield fetch(wasmURL);
      if (!res.ok)
        throw new Error(`Failed to download ${JSON.stringify(wasmURL)}`);
      let wasm = yield res.arrayBuffer(), code = `{let global={};for(let o=self;o;o=Object.getPrototypeOf(o))for(let k of Object.getOwnPropertyNames(o))if(!(k in global))Object.defineProperty(global,k,{get:()=>self[k]});// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

(() => {
	// Map multiple JavaScript environments to a single common API,
	// preferring web standards over Node.js API.
	//
	// Environments considered:
	// - Browsers
	// - Node.js
	// - Electron
	// - Parcel
	// - Webpack

	if (typeof global !== "undefined") {
		// global already exists
	} else if (typeof window !== "undefined") {
		window.global = window;
	} else if (typeof self !== "undefined") {
		self.global = self;
	} else {
		throw new Error("cannot export Go (neither global, window nor self is defined)");
	}

	if (!global.require && typeof require !== "undefined") {
		global.require = require;
	}

	if (!global.fs && global.require) {
		const fs = require("fs");
		if (typeof fs === "object" && fs !== null && Object.keys(fs).length !== 0) {
			
    global.fs = Object.assign({}, fs, {
      // Hack around a Unicode bug in node: https://github.com/nodejs/node/issues/24550
      write(fd, buf, offset, length, position, callback) {
        if (offset === 0 && length === buf.length && position === null) {
          if (fd === process.stdout.fd) {
            try {
              process.stdout.write(buf, err => err ? callback(err, 0, null) : callback(null, length, buf));
            } catch (err) {
              callback(err, 0, null);
            }
            return;
          }
          if (fd === process.stderr.fd) {
            try {
              process.stderr.write(buf, err => err ? callback(err, 0, null) : callback(null, length, buf));
            } catch (err) {
              callback(err, 0, null);
            }
            return;
          }
        }
        fs.write(fd, buf, offset, length, position, callback);
      },
    });
  
		}
	}

	const enosys = () => {
		const err = new Error("not implemented");
		err.code = "ENOSYS";
		return err;
	};

	if (!global.fs) {
		let outputBuf = "";
		global.fs = {
			constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused
			writeSync(fd, buf) {
				outputBuf += decoder.decode(buf);
				const nl = outputBuf.lastIndexOf("\\n");
				if (nl != -1) {
					console.log(outputBuf.substr(0, nl));
					outputBuf = outputBuf.substr(nl + 1);
				}
				return buf.length;
			},
			write(fd, buf, offset, length, position, callback) {
				if (offset !== 0 || length !== buf.length || position !== null) {
					callback(enosys());
					return;
				}
				const n = this.writeSync(fd, buf);
				callback(null, n);
			},
			chmod(path, mode, callback) { callback(enosys()); },
			chown(path, uid, gid, callback) { callback(enosys()); },
			close(fd, callback) { callback(enosys()); },
			fchmod(fd, mode, callback) { callback(enosys()); },
			fchown(fd, uid, gid, callback) { callback(enosys()); },
			fstat(fd, callback) { callback(enosys()); },
			fsync(fd, callback) { callback(null); },
			ftruncate(fd, length, callback) { callback(enosys()); },
			lchown(path, uid, gid, callback) { callback(enosys()); },
			link(path, link, callback) { callback(enosys()); },
			lstat(path, callback) { callback(enosys()); },
			mkdir(path, perm, callback) { callback(enosys()); },
			open(path, flags, mode, callback) { callback(enosys()); },
			read(fd, buffer, offset, length, position, callback) { callback(enosys()); },
			readdir(path, callback) { callback(enosys()); },
			readlink(path, callback) { callback(enosys()); },
			rename(from, to, callback) { callback(enosys()); },
			rmdir(path, callback) { callback(enosys()); },
			stat(path, callback) { callback(enosys()); },
			symlink(path, link, callback) { callback(enosys()); },
			truncate(path, length, callback) { callback(enosys()); },
			unlink(path, callback) { callback(enosys()); },
			utimes(path, atime, mtime, callback) { callback(enosys()); },
		};
	}

	if (!global.process) {
		global.process = {
			getuid() { return -1; },
			getgid() { return -1; },
			geteuid() { return -1; },
			getegid() { return -1; },
			getgroups() { throw enosys(); },
			pid: -1,
			ppid: -1,
			umask() { throw enosys(); },
			cwd() { throw enosys(); },
			chdir() { throw enosys(); },
		}
	}

	if (!global.crypto && global.require) {
		const nodeCrypto = require("crypto");
		global.crypto = {
			getRandomValues(b) {
				nodeCrypto.randomFillSync(b);
			},
		};
	}
	if (!global.crypto) {
		throw new Error("global.crypto is not available, polyfill required (getRandomValues only)");
	}

	if (!global.performance) {
		global.performance = {
			now() {
				const [sec, nsec] = process.hrtime();
				return sec * 1000 + nsec / 1000000;
			},
		};
	}

	if (!global.TextEncoder && global.require) {
		global.TextEncoder = require("util").TextEncoder;
	}
	if (!global.TextEncoder) {
		throw new Error("global.TextEncoder is not available, polyfill required");
	}

	if (!global.TextDecoder && global.require) {
		global.TextDecoder = require("util").TextDecoder;
	}
	if (!global.TextDecoder) {
		throw new Error("global.TextDecoder is not available, polyfill required");
	}

	// End of polyfills for common API.

	const encoder = new TextEncoder("utf-8");
	const decoder = new TextDecoder("utf-8");

	global.Go = class {
		constructor() {
			this.argv = ["js"];
			this.env = {};
			this.exit = (code) => {
				if (code !== 0) {
					console.warn("exit code:", code);
				}
			};
			this._exitPromise = new Promise((resolve) => {
				this._resolveExitPromise = resolve;
			});
			this._pendingEvent = null;
			this._scheduledTimeouts = new Map();
			this._nextCallbackTimeoutID = 1;

			const setInt64 = (addr, v) => {
				this.mem.setUint32(addr + 0, v, true);
				this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);
			}

			const getInt64 = (addr) => {
				const low = this.mem.getUint32(addr + 0, true);
				const high = this.mem.getInt32(addr + 4, true);
				return low + high * 4294967296;
			}

			const loadValue = (addr) => {
				const f = this.mem.getFloat64(addr, true);
				if (f === 0) {
					return undefined;
				}
				if (!isNaN(f)) {
					return f;
				}

				const id = this.mem.getUint32(addr, true);
				return this._values[id];
			}

			const storeValue = (addr, v) => {
				const nanHead = 0x7FF80000;

				if (typeof v === "number" && v !== 0) {
					if (isNaN(v)) {
						this.mem.setUint32(addr + 4, nanHead, true);
						this.mem.setUint32(addr, 0, true);
						return;
					}
					this.mem.setFloat64(addr, v, true);
					return;
				}

				if (v === undefined) {
					this.mem.setFloat64(addr, 0, true);
					return;
				}

				let id = this._ids.get(v);
				if (id === undefined) {
					id = this._idPool.pop();
					if (id === undefined) {
						id = this._values.length;
					}
					this._values[id] = v;
					this._goRefCounts[id] = 0;
					this._ids.set(v, id);
				}
				this._goRefCounts[id]++;
				let typeFlag = 0;
				switch (typeof v) {
					case "object":
						if (v !== null) {
							typeFlag = 1;
						}
						break;
					case "string":
						typeFlag = 2;
						break;
					case "symbol":
						typeFlag = 3;
						break;
					case "function":
						typeFlag = 4;
						break;
				}
				this.mem.setUint32(addr + 4, nanHead | typeFlag, true);
				this.mem.setUint32(addr, id, true);
			}

			const loadSlice = (addr) => {
				const array = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				return new Uint8Array(this._inst.exports.mem.buffer, array, len);
			}

			const loadSliceOfValues = (addr) => {
				const array = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				const a = new Array(len);
				for (let i = 0; i < len; i++) {
					a[i] = loadValue(array + i * 8);
				}
				return a;
			}

			const loadString = (addr) => {
				const saddr = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));
			}

			const timeOrigin = Date.now() - performance.now();
			this.importObject = {
				go: {
					// Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)
					// may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported
					// function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).
					// This changes the SP, thus we have to update the SP used by the imported function.

					// func wasmExit(code int32)
					"runtime.wasmExit": (sp) => {
						sp >>>= 0;
						const code = this.mem.getInt32(sp + 8, true);
						this.exited = true;
						delete this._inst;
						delete this._values;
						delete this._goRefCounts;
						delete this._ids;
						delete this._idPool;
						this.exit(code);
					},

					// func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)
					"runtime.wasmWrite": (sp) => {
						sp >>>= 0;
						const fd = getInt64(sp + 8);
						const p = getInt64(sp + 16);
						const n = this.mem.getInt32(sp + 24, true);
						fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));
					},

					// func resetMemoryDataView()
					"runtime.resetMemoryDataView": (sp) => {
						sp >>>= 0;
						this.mem = new DataView(this._inst.exports.mem.buffer);
					},

					// func nanotime1() int64
					"runtime.nanotime1": (sp) => {
						sp >>>= 0;
						setInt64(sp + 8, (timeOrigin + performance.now()) * 1000000);
					},

					// func walltime1() (sec int64, nsec int32)
					"runtime.walltime1": (sp) => {
						sp >>>= 0;
						const msec = (new Date).getTime();
						setInt64(sp + 8, msec / 1000);
						this.mem.setInt32(sp + 16, (msec % 1000) * 1000000, true);
					},

					// func scheduleTimeoutEvent(delay int64) int32
					"runtime.scheduleTimeoutEvent": (sp) => {
						sp >>>= 0;
						const id = this._nextCallbackTimeoutID;
						this._nextCallbackTimeoutID++;
						this._scheduledTimeouts.set(id, setTimeout(
							() => {
								this._resume();
								while (this._scheduledTimeouts.has(id)) {
									// for some reason Go failed to register the timeout event, log and try again
									// (temporary workaround for https://github.com/golang/go/issues/28975)
									console.warn("scheduleTimeoutEvent: missed timeout event");
									this._resume();
								}
							},
							getInt64(sp + 8) + 1, // setTimeout has been seen to fire up to 1 millisecond early
						));
						this.mem.setInt32(sp + 16, id, true);
					},

					// func clearTimeoutEvent(id int32)
					"runtime.clearTimeoutEvent": (sp) => {
						sp >>>= 0;
						const id = this.mem.getInt32(sp + 8, true);
						clearTimeout(this._scheduledTimeouts.get(id));
						this._scheduledTimeouts.delete(id);
					},

					// func getRandomData(r []byte)
					"runtime.getRandomData": (sp) => {
						sp >>>= 0;
						crypto.getRandomValues(loadSlice(sp + 8));
					},

					// func finalizeRef(v ref)
					"syscall/js.finalizeRef": (sp) => {
						sp >>>= 0;
						const id = this.mem.getUint32(sp + 8, true);
						this._goRefCounts[id]--;
						if (this._goRefCounts[id] === 0) {
							const v = this._values[id];
							this._values[id] = null;
							this._ids.delete(v);
							this._idPool.push(id);
						}
					},

					// func stringVal(value string) ref
					"syscall/js.stringVal": (sp) => {
						sp >>>= 0;
						storeValue(sp + 24, loadString(sp + 8));
					},

					// func valueGet(v ref, p string) ref
					"syscall/js.valueGet": (sp) => {
						sp >>>= 0;
						const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));
						sp = this._inst.exports.getsp() >>> 0; // see comment above
						storeValue(sp + 32, result);
					},

					// func valueSet(v ref, p string, x ref)
					"syscall/js.valueSet": (sp) => {
						sp >>>= 0;
						Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));
					},

					// func valueDelete(v ref, p string)
					"syscall/js.valueDelete": (sp) => {
						sp >>>= 0;
						Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));
					},

					// func valueIndex(v ref, i int) ref
					"syscall/js.valueIndex": (sp) => {
						sp >>>= 0;
						storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));
					},

					// valueSetIndex(v ref, i int, x ref)
					"syscall/js.valueSetIndex": (sp) => {
						sp >>>= 0;
						Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));
					},

					// func valueCall(v ref, m string, args []ref) (ref, bool)
					"syscall/js.valueCall": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const m = Reflect.get(v, loadString(sp + 16));
							const args = loadSliceOfValues(sp + 32);
							const result = Reflect.apply(m, v, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 56, result);
							this.mem.setUint8(sp + 64, 1);
						} catch (err) {
							storeValue(sp + 56, err);
							this.mem.setUint8(sp + 64, 0);
						}
					},

					// func valueInvoke(v ref, args []ref) (ref, bool)
					"syscall/js.valueInvoke": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const args = loadSliceOfValues(sp + 16);
							const result = Reflect.apply(v, undefined, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, result);
							this.mem.setUint8(sp + 48, 1);
						} catch (err) {
							storeValue(sp + 40, err);
							this.mem.setUint8(sp + 48, 0);
						}
					},

					// func valueNew(v ref, args []ref) (ref, bool)
					"syscall/js.valueNew": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const args = loadSliceOfValues(sp + 16);
							const result = Reflect.construct(v, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, result);
							this.mem.setUint8(sp + 48, 1);
						} catch (err) {
							storeValue(sp + 40, err);
							this.mem.setUint8(sp + 48, 0);
						}
					},

					// func valueLength(v ref) int
					"syscall/js.valueLength": (sp) => {
						sp >>>= 0;
						setInt64(sp + 16, parseInt(loadValue(sp + 8).length));
					},

					// valuePrepareString(v ref) (ref, int)
					"syscall/js.valuePrepareString": (sp) => {
						sp >>>= 0;
						const str = encoder.encode(String(loadValue(sp + 8)));
						storeValue(sp + 16, str);
						setInt64(sp + 24, str.length);
					},

					// valueLoadString(v ref, b []byte)
					"syscall/js.valueLoadString": (sp) => {
						sp >>>= 0;
						const str = loadValue(sp + 8);
						loadSlice(sp + 16).set(str);
					},

					// func valueInstanceOf(v ref, t ref) bool
					"syscall/js.valueInstanceOf": (sp) => {
						sp >>>= 0;
						this.mem.setUint8(sp + 24, (loadValue(sp + 8) instanceof loadValue(sp + 16)) ? 1 : 0);
					},

					// func copyBytesToGo(dst []byte, src ref) (int, bool)
					"syscall/js.copyBytesToGo": (sp) => {
						sp >>>= 0;
						const dst = loadSlice(sp + 8);
						const src = loadValue(sp + 32);
						if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {
							this.mem.setUint8(sp + 48, 0);
							return;
						}
						const toCopy = src.subarray(0, dst.length);
						dst.set(toCopy);
						setInt64(sp + 40, toCopy.length);
						this.mem.setUint8(sp + 48, 1);
					},

					// func copyBytesToJS(dst ref, src []byte) (int, bool)
					"syscall/js.copyBytesToJS": (sp) => {
						sp >>>= 0;
						const dst = loadValue(sp + 8);
						const src = loadSlice(sp + 16);
						if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {
							this.mem.setUint8(sp + 48, 0);
							return;
						}
						const toCopy = src.subarray(0, dst.length);
						dst.set(toCopy);
						setInt64(sp + 40, toCopy.length);
						this.mem.setUint8(sp + 48, 1);
					},

					"debug": (value) => {
						console.log(value);
					},
				}
			};
		}

		async run(instance) {
			if (!(instance instanceof WebAssembly.Instance)) {
				throw new Error("Go.run: WebAssembly.Instance expected");
			}
			this._inst = instance;
			this.mem = new DataView(this._inst.exports.mem.buffer);
			this._values = [ // JS values that Go currently has references to, indexed by reference id
				NaN,
				0,
				null,
				true,
				false,
				global,
				this,
			];
			this._goRefCounts = new Array(this._values.length).fill(Infinity); // number of references that Go has to a JS value, indexed by reference id
			this._ids = new Map([ // mapping from JS values to reference ids
				[0, 1],
				[null, 2],
				[true, 3],
				[false, 4],
				[global, 5],
				[this, 6],
			]);
			this._idPool = [];   // unused ids that have been garbage collected
			this.exited = false; // whether the Go program has exited

			// Pass command line arguments and environment variables to WebAssembly by writing them to the linear memory.
			let offset = 4096;

			const strPtr = (str) => {
				const ptr = offset;
				const bytes = encoder.encode(str + "\\0");
				new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);
				offset += bytes.length;
				if (offset % 8 !== 0) {
					offset += 8 - (offset % 8);
				}
				return ptr;
			};

			const argc = this.argv.length;

			const argvPtrs = [];
			this.argv.forEach((arg) => {
				argvPtrs.push(strPtr(arg));
			});
			argvPtrs.push(0);

			const keys = Object.keys(this.env).sort();
			keys.forEach((key) => {
				argvPtrs.push(strPtr(\`\${key}=\${this.env[key]}\`));
			});
			argvPtrs.push(0);

			const argv = offset;
			argvPtrs.forEach((ptr) => {
				this.mem.setUint32(offset, ptr, true);
				this.mem.setUint32(offset + 4, 0, true);
				offset += 8;
			});

			this._inst.exports.run(argc, argv);
			if (this.exited) {
				this._resolveExitPromise();
			}
			await this._exitPromise;
		}

		_resume() {
			if (this.exited) {
				throw new Error("Go program has already exited");
			}
			this._inst.exports.resume();
			if (this.exited) {
				this._resolveExitPromise();
			}
		}

		_makeFuncWrapper(id) {
			const go = this;
			return function () {
				const event = { id: id, this: this, args: arguments };
				go._pendingEvent = event;
				go._resume();
				return event.result;
			};
		}
	}

	if (
		typeof module !== "undefined" &&
		global.require &&
		global.require.main === module &&
		global.process &&
		global.process.versions &&
		!global.process.versions.electron
	) {
		if (process.argv.length < 3) {
			console.error("usage: go_js_wasm_exec [wasm binary] [arguments]");
			process.exit(1);
		}

		const go = new Go();
		go.argv = process.argv.slice(2);
		go.env = Object.assign({ TMPDIR: require("os").tmpdir() }, process.env);
		go.exit = process.exit;
		WebAssembly.instantiate(fs.readFileSync(process.argv[2]), go.importObject).then((result) => {
			process.on("exit", (code) => { // Node.js exits if no event handler is pending
				if (code === 0 && !go.exited) {
					// deadlock, make Go print error and stack traces
					go._pendingEvent = { id: 0 };
					go._resume();
				}
			});
			return go.run(result.instance);
		}).catch((err) => {
			console.error(err);
			process.exit(1);
		});
	}
})();
onmessage = ({data: wasm}) => {
  let decoder = new TextDecoder();
  let fs = global.fs;
  let stderr = "";
  fs.writeSync = (fd, buffer) => {
    if (fd === 1) {
      postMessage(buffer);
    } else if (fd === 2) {
      stderr += decoder.decode(buffer);
      let parts = stderr.split("\\n");
      if (parts.length > 1)
        console.log(parts.slice(0, -1).join("\\n"));
      stderr = parts[parts.length - 1];
    } else {
      throw new Error("Bad write");
    }
    return buffer.length;
  };
  let stdin = [];
  let resumeStdin;
  let stdinPos = 0;
  onmessage = ({data}) => {
    if (data.length > 0) {
      stdin.push(data);
      if (resumeStdin)
        resumeStdin();
    }
  };
  fs.read = (fd, buffer, offset, length, position, callback) => {
    if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {
      throw new Error("Bad read");
    }
    if (stdin.length === 0) {
      resumeStdin = () => fs.read(fd, buffer, offset, length, position, callback);
      return;
    }
    let first = stdin[0];
    let count = Math.max(0, Math.min(length, first.length - stdinPos));
    buffer.set(first.subarray(stdinPos, stdinPos + count), offset);
    stdinPos += count;
    if (stdinPos === first.length) {
      stdin.shift();
      stdinPos = 0;
    }
    callback(null, count);
  };
  let go = new global.Go();
  go.argv = ["", \`--service=\${"0.9.2"}\`];
  WebAssembly.instantiate(wasm, go.importObject).then(({instance}) => go.run(instance));
};}`, worker;
      if (useWorker) {
        let blob = new Blob([code], {type: "text/javascript"});
        worker = new Worker(URL.createObjectURL(blob));
      } else {
        let onmessage = new Function("postMessage", code + "var onmessage; return m => onmessage(m)")((data) => worker.onmessage({data}));
        worker = {
          onmessage: null,
          postMessage: (data) => onmessage({data}),
          terminate() {
          }
        };
      }
      worker.postMessage(wasm), worker.onmessage = ({data}) => readFromStdout(data);
      let {readFromStdout, service} = createChannel({
        writeToStdin(bytes) {
          worker.postMessage(bytes);
        },
        isSync: !1,
        isBrowser: !0
      });
      longLivedService = {
        build: (options) => new Promise((resolve, reject) => service.buildOrServe("build", null, null, options, !1, "/", (err, res2) => err ? reject(err) : resolve(res2))),
        transform: (input, options) => new Promise((resolve, reject) => service.transform("transform", null, input, options || {}, !1, {
          readFile(_, callback) {
            callback(new Error("Internal error"), null);
          },
          writeFile(_, callback) {
            callback(null);
          }
        }, (err, res2) => err ? reject(err) : resolve(res2)))
      };
    });
  })(typeof exports == "object" ? exports : (typeof self != "undefined" ? self : exports).esbuild = {});
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS((exports, module) => {
  module.exports = `{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
`;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var decode_json_1 = __importDefault(require_decode()), fromCodePoint = String.fromCodePoint || function(codePoint) {
    var output = "";
    return codePoint > 65535 && (codePoint -= 65536, output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296), codePoint = 56320 | codePoint & 1023), output += String.fromCharCode(codePoint), output;
  };
  function decodeCodePoint(codePoint) {
    return codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111 ? "\uFFFD" : (codePoint in decode_json_1.default && (codePoint = decode_json_1.default[codePoint]), fromCodePoint(codePoint));
  }
  exports.default = decodeCodePoint;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS((exports, module) => {
  module.exports = '{"Aacute":"\xC1","aacute":"\xE1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\xC2","acirc":"\xE2","acute":"\xB4","Acy":"\u0410","acy":"\u0430","AElig":"\xC6","aelig":"\xE6","af":"\u2061","Afr":"\u{1D504}","afr":"\u{1D51E}","Agrave":"\xC0","agrave":"\xE0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\xC5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\u{1D538}","aopf":"\u{1D552}","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"\'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\xC5","aring":"\xE5","Ascr":"\u{1D49C}","ascr":"\u{1D4B6}","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\xC3","atilde":"\xE3","Auml":"\xC4","auml":"\xE4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\u{1D505}","bfr":"\u{1D51F}","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\u{1D539}","bopf":"\u{1D553}","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\xA6","bscr":"\u{1D4B7}","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\xC7","ccedil":"\xE7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\xB8","Cedilla":"\xB8","cemptyv":"\u29B2","cent":"\xA2","centerdot":"\xB7","CenterDot":"\xB7","cfr":"\u{1D520}","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\xAE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\u{1D554}","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\xA9","COPY":"\xA9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\u{1D49E}","cscr":"\u{1D4B8}","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\xA4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\xB0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\u{1D507}","dfr":"\u{1D521}","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\xB4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\xA8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\xF7","divide":"\xF7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\u{1D53B}","dopf":"\u{1D555}","Dot":"\xA8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\xA8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\u{1D49F}","dscr":"\u{1D4B9}","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\xC9","eacute":"\xE9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\xCA","ecirc":"\xEA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\u{1D508}","efr":"\u{1D522}","eg":"\u2A9A","Egrave":"\xC8","egrave":"\xE8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\u{1D53C}","eopf":"\u{1D556}","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\xD0","eth":"\xF0","Euml":"\xCB","euml":"\xEB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\u{1D509}","ffr":"\u{1D523}","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\u{1D53D}","fopf":"\u{1D557}","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\xBD","frac13":"\u2153","frac14":"\xBC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\xBE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\u{1D4BB}","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\u{1D50A}","gfr":"\u{1D524}","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\u{1D53E}","gopf":"\u{1D558}","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\u{1D4A2}","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\xBD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\u{1D525}","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\u{1D559}","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\u{1D4BD}","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\xCD","iacute":"\xED","ic":"\u2063","Icirc":"\xCE","icirc":"\xEE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\xA1","iff":"\u21D4","ifr":"\u{1D526}","Ifr":"\u2111","Igrave":"\xCC","igrave":"\xEC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\u{1D540}","iopf":"\u{1D55A}","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\xBF","iscr":"\u{1D4BE}","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\xCF","iuml":"\xEF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\u{1D50D}","jfr":"\u{1D527}","jmath":"\u0237","Jopf":"\u{1D541}","jopf":"\u{1D55B}","Jscr":"\u{1D4A5}","jscr":"\u{1D4BF}","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\u{1D50E}","kfr":"\u{1D528}","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\u{1D542}","kopf":"\u{1D55C}","Kscr":"\u{1D4A6}","kscr":"\u{1D4C0}","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\xAB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\u{1D50F}","lfr":"\u{1D529}","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\u{1D543}","lopf":"\u{1D55D}","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\u{1D4C1}","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\xAF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\u{1D510}","mfr":"\u{1D52A}","mho":"\u2127","micro":"\xB5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\xB7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\u{1D544}","mopf":"\u{1D55E}","mp":"\u2213","mscr":"\u{1D4C2}","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\xA0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\u{1D511}","nfr":"\u{1D52B}","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\xA0","nopf":"\u{1D55F}","Nopf":"\u2115","Not":"\u2AEC","not":"\xAC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\u{1D4A9}","nscr":"\u{1D4C3}","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\xD1","ntilde":"\xF1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\xD3","oacute":"\xF3","oast":"\u229B","Ocirc":"\xD4","ocirc":"\xF4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\u{1D512}","ofr":"\u{1D52C}","ogon":"\u02DB","Ograve":"\xD2","ograve":"\xF2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\u{1D546}","oopf":"\u{1D560}","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\xAA","ordm":"\xBA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\u{1D4AA}","oscr":"\u2134","Oslash":"\xD8","oslash":"\xF8","osol":"\u2298","Otilde":"\xD5","otilde":"\xF5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\xD6","ouml":"\xF6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\xB6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\u{1D513}","pfr":"\u{1D52D}","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\xB1","plusmn":"\xB1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\xB1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\u{1D561}","Popf":"\u2119","pound":"\xA3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\u{1D4AB}","pscr":"\u{1D4C5}","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\u{1D514}","qfr":"\u{1D52E}","qint":"\u2A0C","qopf":"\u{1D562}","Qopf":"\u211A","qprime":"\u2057","Qscr":"\u{1D4AC}","qscr":"\u{1D4C6}","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\\"","QUOT":"\\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\xBB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\xAE","REG":"\xAE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\u{1D52F}","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\u{1D563}","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\u{1D4C7}","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\xA7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\u{1D516}","sfr":"\u{1D530}","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\xAD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\u{1D54A}","sopf":"\u{1D564}","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\u{1D4AE}","sscr":"\u{1D4C8}","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\xAF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\xB9","sup2":"\xB2","sup3":"\xB3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\xDF","Tab":"\\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\u{1D517}","tfr":"\u{1D531}","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\xDE","thorn":"\xFE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\xD7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\u{1D54B}","topf":"\u{1D565}","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\u{1D4AF}","tscr":"\u{1D4C9}","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\xDA","uacute":"\xFA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\xDB","ucirc":"\xFB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\u{1D518}","ufr":"\u{1D532}","Ugrave":"\xD9","ugrave":"\xF9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\xA8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\u{1D54C}","uopf":"\u{1D566}","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\u{1D4B0}","uscr":"\u{1D4CA}","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\xDC","uuml":"\xFC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\u{1D519}","vfr":"\u{1D533}","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\u{1D54D}","vopf":"\u{1D567}","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\u{1D4B1}","vscr":"\u{1D4CB}","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\u{1D51A}","wfr":"\u{1D534}","Wopf":"\u{1D54E}","wopf":"\u{1D568}","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\u{1D4B2}","wscr":"\u{1D4CC}","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\u{1D51B}","xfr":"\u{1D535}","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\u{1D54F}","xopf":"\u{1D569}","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\u{1D4B3}","xscr":"\u{1D4CD}","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\xDD","yacute":"\xFD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\xA5","Yfr":"\u{1D51C}","yfr":"\u{1D536}","YIcy":"\u0407","yicy":"\u0457","Yopf":"\u{1D550}","yopf":"\u{1D56A}","Yscr":"\u{1D4B4}","yscr":"\u{1D4CE}","YUcy":"\u042E","yucy":"\u044E","yuml":"\xFF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\u{1D537}","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\u{1D56B}","Zopf":"\u2124","Zscr":"\u{1D4B5}","zscr":"\u{1D4CF}","zwj":"\u200D","zwnj":"\u200C"}\n';
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS((exports, module) => {
  module.exports = `{"Aacute":"\xC1","aacute":"\xE1","Acirc":"\xC2","acirc":"\xE2","acute":"\xB4","AElig":"\xC6","aelig":"\xE6","Agrave":"\xC0","agrave":"\xE0","amp":"&","AMP":"&","Aring":"\xC5","aring":"\xE5","Atilde":"\xC3","atilde":"\xE3","Auml":"\xC4","auml":"\xE4","brvbar":"\xA6","Ccedil":"\xC7","ccedil":"\xE7","cedil":"\xB8","cent":"\xA2","copy":"\xA9","COPY":"\xA9","curren":"\xA4","deg":"\xB0","divide":"\xF7","Eacute":"\xC9","eacute":"\xE9","Ecirc":"\xCA","ecirc":"\xEA","Egrave":"\xC8","egrave":"\xE8","ETH":"\xD0","eth":"\xF0","Euml":"\xCB","euml":"\xEB","frac12":"\xBD","frac14":"\xBC","frac34":"\xBE","gt":">","GT":">","Iacute":"\xCD","iacute":"\xED","Icirc":"\xCE","icirc":"\xEE","iexcl":"\xA1","Igrave":"\xCC","igrave":"\xEC","iquest":"\xBF","Iuml":"\xCF","iuml":"\xEF","laquo":"\xAB","lt":"<","LT":"<","macr":"\xAF","micro":"\xB5","middot":"\xB7","nbsp":"\xA0","not":"\xAC","Ntilde":"\xD1","ntilde":"\xF1","Oacute":"\xD3","oacute":"\xF3","Ocirc":"\xD4","ocirc":"\xF4","Ograve":"\xD2","ograve":"\xF2","ordf":"\xAA","ordm":"\xBA","Oslash":"\xD8","oslash":"\xF8","Otilde":"\xD5","otilde":"\xF5","Ouml":"\xD6","ouml":"\xF6","para":"\xB6","plusmn":"\xB1","pound":"\xA3","quot":"\\"","QUOT":"\\"","raquo":"\xBB","reg":"\xAE","REG":"\xAE","sect":"\xA7","shy":"\xAD","sup1":"\xB9","sup2":"\xB2","sup3":"\xB3","szlig":"\xDF","THORN":"\xDE","thorn":"\xFE","times":"\xD7","Uacute":"\xDA","uacute":"\xFA","Ucirc":"\xDB","ucirc":"\xFB","Ugrave":"\xD9","ugrave":"\xF9","uml":"\xA8","Uuml":"\xDC","uuml":"\xFC","Yacute":"\xDD","yacute":"\xFD","yen":"\xA5","yuml":"\xFF"}
`;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS((exports, module) => {
  module.exports = `{"amp":"&","apos":"'","gt":">","lt":"<","quot":"\\""}
`;
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/Tokenizer.js
var require_Tokenizer = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var decode_codepoint_1 = __importDefault(require_decode_codepoint()), entities_json_1 = __importDefault(require_entities()), legacy_json_1 = __importDefault(require_legacy()), xml_json_1 = __importDefault(require_xml());
  function whitespace(c2) {
    return c2 === " " || c2 === `
` || c2 === "	" || c2 === "\f" || c2 === "\r";
  }
  function isASCIIAlpha(c2) {
    return c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z";
  }
  function ifElseState(upper, SUCCESS, FAILURE) {
    var lower = upper.toLowerCase();
    return upper === lower ? function(t, c2) {
      c2 === lower ? t._state = SUCCESS : (t._state = FAILURE, t._index--);
    } : function(t, c2) {
      c2 === lower || c2 === upper ? t._state = SUCCESS : (t._state = FAILURE, t._index--);
    };
  }
  function consumeSpecialNameChar(upper, NEXT_STATE) {
    var lower = upper.toLowerCase();
    return function(t, c2) {
      c2 === lower || c2 === upper ? t._state = NEXT_STATE : (t._state = 3, t._index--);
    };
  }
  var stateBeforeCdata1 = ifElseState("C", 24, 16), stateBeforeCdata2 = ifElseState("D", 25, 16), stateBeforeCdata3 = ifElseState("A", 26, 16), stateBeforeCdata4 = ifElseState("T", 27, 16), stateBeforeCdata5 = ifElseState("A", 28, 16), stateBeforeScript1 = consumeSpecialNameChar("R", 35), stateBeforeScript2 = consumeSpecialNameChar("I", 36), stateBeforeScript3 = consumeSpecialNameChar("P", 37), stateBeforeScript4 = consumeSpecialNameChar("T", 38), stateAfterScript1 = ifElseState("R", 40, 1), stateAfterScript2 = ifElseState("I", 41, 1), stateAfterScript3 = ifElseState("P", 42, 1), stateAfterScript4 = ifElseState("T", 43, 1), stateBeforeStyle1 = consumeSpecialNameChar("Y", 45), stateBeforeStyle2 = consumeSpecialNameChar("L", 46), stateBeforeStyle3 = consumeSpecialNameChar("E", 47), stateAfterStyle1 = ifElseState("Y", 49, 1), stateAfterStyle2 = ifElseState("L", 50, 1), stateAfterStyle3 = ifElseState("E", 51, 1), stateBeforeSpecialT = consumeSpecialNameChar("I", 54), stateBeforeTitle1 = consumeSpecialNameChar("T", 55), stateBeforeTitle2 = consumeSpecialNameChar("L", 56), stateBeforeTitle3 = consumeSpecialNameChar("E", 57), stateAfterSpecialTEnd = ifElseState("I", 58, 1), stateAfterTitle1 = ifElseState("T", 59, 1), stateAfterTitle2 = ifElseState("L", 60, 1), stateAfterTitle3 = ifElseState("E", 61, 1), stateBeforeEntity = ifElseState("#", 63, 64), stateBeforeNumericEntity = ifElseState("X", 66, 65), Tokenizer = function() {
    function Tokenizer2(options, cbs) {
      var _a;
      this._state = 1, this.buffer = "", this.sectionStart = 0, this._index = 0, this.bufferOffset = 0, this.baseState = 1, this.special = 1, this.running = !0, this.ended = !1, this.cbs = cbs, this.xmlMode = !!(options == null ? void 0 : options.xmlMode), this.decodeEntities = (_a = options == null ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : !0;
    }
    return Tokenizer2.prototype.reset = function() {
      this._state = 1, this.buffer = "", this.sectionStart = 0, this._index = 0, this.bufferOffset = 0, this.baseState = 1, this.special = 1, this.running = !0, this.ended = !1;
    }, Tokenizer2.prototype.write = function(chunk) {
      this.ended && this.cbs.onerror(Error(".write() after done!")), this.buffer += chunk, this.parse();
    }, Tokenizer2.prototype.end = function(chunk) {
      this.ended && this.cbs.onerror(Error(".end() after done!")), chunk && this.write(chunk), this.ended = !0, this.running && this.finish();
    }, Tokenizer2.prototype.pause = function() {
      this.running = !1;
    }, Tokenizer2.prototype.resume = function() {
      this.running = !0, this._index < this.buffer.length && this.parse(), this.ended && this.finish();
    }, Tokenizer2.prototype.getAbsoluteIndex = function() {
      return this.bufferOffset + this._index;
    }, Tokenizer2.prototype.stateText = function(c2) {
      c2 === "<" ? (this._index > this.sectionStart && this.cbs.ontext(this.getSection()), this._state = 2, this.sectionStart = this._index) : this.decodeEntities && c2 === "&" && (this.special === 1 || this.special === 4) && (this._index > this.sectionStart && this.cbs.ontext(this.getSection()), this.baseState = 1, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeTagName = function(c2) {
      c2 === "/" ? this._state = 5 : c2 === "<" ? (this.cbs.ontext(this.getSection()), this.sectionStart = this._index) : c2 === ">" || this.special !== 1 || whitespace(c2) ? this._state = 1 : c2 === "!" ? (this._state = 15, this.sectionStart = this._index + 1) : c2 === "?" ? (this._state = 17, this.sectionStart = this._index + 1) : isASCIIAlpha(c2) ? (this._state = !this.xmlMode && (c2 === "s" || c2 === "S") ? 32 : !this.xmlMode && (c2 === "t" || c2 === "T") ? 52 : 3, this.sectionStart = this._index) : this._state = 1;
    }, Tokenizer2.prototype.stateInTagName = function(c2) {
      (c2 === "/" || c2 === ">" || whitespace(c2)) && (this.emitToken("onopentagname"), this._state = 8, this._index--);
    }, Tokenizer2.prototype.stateBeforeClosingTagName = function(c2) {
      whitespace(c2) || (c2 === ">" ? this._state = 1 : this.special !== 1 ? this.special !== 4 && (c2 === "s" || c2 === "S") ? this._state = 33 : this.special === 4 && (c2 === "t" || c2 === "T") ? this._state = 53 : (this._state = 1, this._index--) : isASCIIAlpha(c2) ? (this._state = 6, this.sectionStart = this._index) : (this._state = 20, this.sectionStart = this._index));
    }, Tokenizer2.prototype.stateInClosingTagName = function(c2) {
      (c2 === ">" || whitespace(c2)) && (this.emitToken("onclosetag"), this._state = 7, this._index--);
    }, Tokenizer2.prototype.stateAfterClosingTagName = function(c2) {
      c2 === ">" && (this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateBeforeAttributeName = function(c2) {
      c2 === ">" ? (this.cbs.onopentagend(), this._state = 1, this.sectionStart = this._index + 1) : c2 === "/" ? this._state = 4 : whitespace(c2) || (this._state = 9, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateInSelfClosingTag = function(c2) {
      c2 === ">" ? (this.cbs.onselfclosingtag(), this._state = 1, this.sectionStart = this._index + 1, this.special = 1) : whitespace(c2) || (this._state = 8, this._index--);
    }, Tokenizer2.prototype.stateInAttributeName = function(c2) {
      (c2 === "=" || c2 === "/" || c2 === ">" || whitespace(c2)) && (this.cbs.onattribname(this.getSection()), this.sectionStart = -1, this._state = 10, this._index--);
    }, Tokenizer2.prototype.stateAfterAttributeName = function(c2) {
      c2 === "=" ? this._state = 11 : c2 === "/" || c2 === ">" ? (this.cbs.onattribend(void 0), this._state = 8, this._index--) : whitespace(c2) || (this.cbs.onattribend(void 0), this._state = 9, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeAttributeValue = function(c2) {
      c2 === '"' ? (this._state = 12, this.sectionStart = this._index + 1) : c2 === "'" ? (this._state = 13, this.sectionStart = this._index + 1) : whitespace(c2) || (this._state = 14, this.sectionStart = this._index, this._index--);
    }, Tokenizer2.prototype.handleInAttributeValue = function(c2, quote) {
      c2 === quote ? (this.emitToken("onattribdata"), this.cbs.onattribend(quote), this._state = 8) : this.decodeEntities && c2 === "&" && (this.emitToken("onattribdata"), this.baseState = this._state, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c2) {
      this.handleInAttributeValue(c2, '"');
    }, Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c2) {
      this.handleInAttributeValue(c2, "'");
    }, Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c2) {
      whitespace(c2) || c2 === ">" ? (this.emitToken("onattribdata"), this.cbs.onattribend(null), this._state = 8, this._index--) : this.decodeEntities && c2 === "&" && (this.emitToken("onattribdata"), this.baseState = this._state, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeDeclaration = function(c2) {
      this._state = c2 === "[" ? 23 : c2 === "-" ? 18 : 16;
    }, Tokenizer2.prototype.stateInDeclaration = function(c2) {
      c2 === ">" && (this.cbs.ondeclaration(this.getSection()), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateInProcessingInstruction = function(c2) {
      c2 === ">" && (this.cbs.onprocessinginstruction(this.getSection()), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateBeforeComment = function(c2) {
      c2 === "-" ? (this._state = 19, this.sectionStart = this._index + 1) : this._state = 16;
    }, Tokenizer2.prototype.stateInComment = function(c2) {
      c2 === "-" && (this._state = 21);
    }, Tokenizer2.prototype.stateInSpecialComment = function(c2) {
      c2 === ">" && (this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index)), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateAfterComment1 = function(c2) {
      c2 === "-" ? this._state = 22 : this._state = 19;
    }, Tokenizer2.prototype.stateAfterComment2 = function(c2) {
      c2 === ">" ? (this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2)), this._state = 1, this.sectionStart = this._index + 1) : c2 !== "-" && (this._state = 19);
    }, Tokenizer2.prototype.stateBeforeCdata6 = function(c2) {
      c2 === "[" ? (this._state = 29, this.sectionStart = this._index + 1) : (this._state = 16, this._index--);
    }, Tokenizer2.prototype.stateInCdata = function(c2) {
      c2 === "]" && (this._state = 30);
    }, Tokenizer2.prototype.stateAfterCdata1 = function(c2) {
      c2 === "]" ? this._state = 31 : this._state = 29;
    }, Tokenizer2.prototype.stateAfterCdata2 = function(c2) {
      c2 === ">" ? (this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2)), this._state = 1, this.sectionStart = this._index + 1) : c2 !== "]" && (this._state = 29);
    }, Tokenizer2.prototype.stateBeforeSpecialS = function(c2) {
      c2 === "c" || c2 === "C" ? this._state = 34 : c2 === "t" || c2 === "T" ? this._state = 44 : (this._state = 3, this._index--);
    }, Tokenizer2.prototype.stateBeforeSpecialSEnd = function(c2) {
      this.special === 2 && (c2 === "c" || c2 === "C") ? this._state = 39 : this.special === 3 && (c2 === "t" || c2 === "T") ? this._state = 48 : this._state = 1;
    }, Tokenizer2.prototype.stateBeforeSpecialLast = function(c2, special) {
      (c2 === "/" || c2 === ">" || whitespace(c2)) && (this.special = special), this._state = 3, this._index--;
    }, Tokenizer2.prototype.stateAfterSpecialLast = function(c2, sectionStartOffset) {
      c2 === ">" || whitespace(c2) ? (this.special = 1, this._state = 6, this.sectionStart = this._index - sectionStartOffset, this._index--) : this._state = 1;
    }, Tokenizer2.prototype.parseFixedEntity = function(map) {
      if (map === void 0 && (map = this.xmlMode ? xml_json_1.default : entities_json_1.default), this.sectionStart + 1 < this._index) {
        var entity = this.buffer.substring(this.sectionStart + 1, this._index);
        Object.prototype.hasOwnProperty.call(map, entity) && (this.emitPartial(map[entity]), this.sectionStart = this._index + 1);
      }
    }, Tokenizer2.prototype.parseLegacyEntity = function() {
      for (var start = this.sectionStart + 1, limit = Math.min(this._index - start, 6); limit >= 2; ) {
        var entity = this.buffer.substr(start, limit);
        if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {
          this.emitPartial(legacy_json_1.default[entity]), this.sectionStart += limit + 1;
          return;
        }
        limit--;
      }
    }, Tokenizer2.prototype.stateInNamedEntity = function(c2) {
      c2 === ";" ? (this.parseFixedEntity(), this.baseState === 1 && this.sectionStart + 1 < this._index && !this.xmlMode && this.parseLegacyEntity(), this._state = this.baseState) : (c2 < "0" || c2 > "9") && !isASCIIAlpha(c2) && (this.xmlMode || this.sectionStart + 1 === this._index || (this.baseState !== 1 ? c2 !== "=" && this.parseFixedEntity(legacy_json_1.default) : this.parseLegacyEntity()), this._state = this.baseState, this._index--);
    }, Tokenizer2.prototype.decodeNumericEntity = function(offset, base, strict) {
      var sectionStart = this.sectionStart + offset;
      if (sectionStart !== this._index) {
        var entity = this.buffer.substring(sectionStart, this._index), parsed = parseInt(entity, base);
        this.emitPartial(decode_codepoint_1.default(parsed)), this.sectionStart = strict ? this._index + 1 : this._index;
      }
      this._state = this.baseState;
    }, Tokenizer2.prototype.stateInNumericEntity = function(c2) {
      c2 === ";" ? this.decodeNumericEntity(2, 10, !0) : (c2 < "0" || c2 > "9") && (this.xmlMode ? this._state = this.baseState : this.decodeNumericEntity(2, 10, !1), this._index--);
    }, Tokenizer2.prototype.stateInHexEntity = function(c2) {
      c2 === ";" ? this.decodeNumericEntity(3, 16, !0) : (c2 < "a" || c2 > "f") && (c2 < "A" || c2 > "F") && (c2 < "0" || c2 > "9") && (this.xmlMode ? this._state = this.baseState : this.decodeNumericEntity(3, 16, !1), this._index--);
    }, Tokenizer2.prototype.cleanup = function() {
      this.sectionStart < 0 ? (this.buffer = "", this.bufferOffset += this._index, this._index = 0) : this.running && (this._state === 1 ? (this.sectionStart !== this._index && this.cbs.ontext(this.buffer.substr(this.sectionStart)), this.buffer = "", this.bufferOffset += this._index, this._index = 0) : this.sectionStart === this._index ? (this.buffer = "", this.bufferOffset += this._index, this._index = 0) : (this.buffer = this.buffer.substr(this.sectionStart), this._index -= this.sectionStart, this.bufferOffset += this.sectionStart), this.sectionStart = 0);
    }, Tokenizer2.prototype.parse = function() {
      for (; this._index < this.buffer.length && this.running; ) {
        var c2 = this.buffer.charAt(this._index);
        this._state === 1 ? this.stateText(c2) : this._state === 12 ? this.stateInAttributeValueDoubleQuotes(c2) : this._state === 9 ? this.stateInAttributeName(c2) : this._state === 19 ? this.stateInComment(c2) : this._state === 20 ? this.stateInSpecialComment(c2) : this._state === 8 ? this.stateBeforeAttributeName(c2) : this._state === 3 ? this.stateInTagName(c2) : this._state === 6 ? this.stateInClosingTagName(c2) : this._state === 2 ? this.stateBeforeTagName(c2) : this._state === 10 ? this.stateAfterAttributeName(c2) : this._state === 13 ? this.stateInAttributeValueSingleQuotes(c2) : this._state === 11 ? this.stateBeforeAttributeValue(c2) : this._state === 5 ? this.stateBeforeClosingTagName(c2) : this._state === 7 ? this.stateAfterClosingTagName(c2) : this._state === 32 ? this.stateBeforeSpecialS(c2) : this._state === 21 ? this.stateAfterComment1(c2) : this._state === 14 ? this.stateInAttributeValueNoQuotes(c2) : this._state === 4 ? this.stateInSelfClosingTag(c2) : this._state === 16 ? this.stateInDeclaration(c2) : this._state === 15 ? this.stateBeforeDeclaration(c2) : this._state === 22 ? this.stateAfterComment2(c2) : this._state === 18 ? this.stateBeforeComment(c2) : this._state === 33 ? this.stateBeforeSpecialSEnd(c2) : this._state === 53 ? stateAfterSpecialTEnd(this, c2) : this._state === 39 ? stateAfterScript1(this, c2) : this._state === 40 ? stateAfterScript2(this, c2) : this._state === 41 ? stateAfterScript3(this, c2) : this._state === 34 ? stateBeforeScript1(this, c2) : this._state === 35 ? stateBeforeScript2(this, c2) : this._state === 36 ? stateBeforeScript3(this, c2) : this._state === 37 ? stateBeforeScript4(this, c2) : this._state === 38 ? this.stateBeforeSpecialLast(c2, 2) : this._state === 42 ? stateAfterScript4(this, c2) : this._state === 43 ? this.stateAfterSpecialLast(c2, 6) : this._state === 44 ? stateBeforeStyle1(this, c2) : this._state === 29 ? this.stateInCdata(c2) : this._state === 45 ? stateBeforeStyle2(this, c2) : this._state === 46 ? stateBeforeStyle3(this, c2) : this._state === 47 ? this.stateBeforeSpecialLast(c2, 3) : this._state === 48 ? stateAfterStyle1(this, c2) : this._state === 49 ? stateAfterStyle2(this, c2) : this._state === 50 ? stateAfterStyle3(this, c2) : this._state === 51 ? this.stateAfterSpecialLast(c2, 5) : this._state === 52 ? stateBeforeSpecialT(this, c2) : this._state === 54 ? stateBeforeTitle1(this, c2) : this._state === 55 ? stateBeforeTitle2(this, c2) : this._state === 56 ? stateBeforeTitle3(this, c2) : this._state === 57 ? this.stateBeforeSpecialLast(c2, 4) : this._state === 58 ? stateAfterTitle1(this, c2) : this._state === 59 ? stateAfterTitle2(this, c2) : this._state === 60 ? stateAfterTitle3(this, c2) : this._state === 61 ? this.stateAfterSpecialLast(c2, 5) : this._state === 17 ? this.stateInProcessingInstruction(c2) : this._state === 64 ? this.stateInNamedEntity(c2) : this._state === 23 ? stateBeforeCdata1(this, c2) : this._state === 62 ? stateBeforeEntity(this, c2) : this._state === 24 ? stateBeforeCdata2(this, c2) : this._state === 25 ? stateBeforeCdata3(this, c2) : this._state === 30 ? this.stateAfterCdata1(c2) : this._state === 31 ? this.stateAfterCdata2(c2) : this._state === 26 ? stateBeforeCdata4(this, c2) : this._state === 27 ? stateBeforeCdata5(this, c2) : this._state === 28 ? this.stateBeforeCdata6(c2) : this._state === 66 ? this.stateInHexEntity(c2) : this._state === 65 ? this.stateInNumericEntity(c2) : this._state === 63 ? stateBeforeNumericEntity(this, c2) : this.cbs.onerror(Error("unknown _state"), this._state), this._index++;
      }
      this.cleanup();
    }, Tokenizer2.prototype.finish = function() {
      this.sectionStart < this._index && this.handleTrailingData(), this.cbs.onend();
    }, Tokenizer2.prototype.handleTrailingData = function() {
      var data = this.buffer.substr(this.sectionStart);
      this._state === 29 || this._state === 30 || this._state === 31 ? this.cbs.oncdata(data) : this._state === 19 || this._state === 21 || this._state === 22 ? this.cbs.oncomment(data) : this._state === 64 && !this.xmlMode ? (this.parseLegacyEntity(), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state === 65 && !this.xmlMode ? (this.decodeNumericEntity(2, 10, !1), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state === 66 && !this.xmlMode ? (this.decodeNumericEntity(3, 16, !1), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state !== 3 && this._state !== 8 && this._state !== 11 && this._state !== 10 && this._state !== 9 && this._state !== 13 && this._state !== 12 && this._state !== 14 && this._state !== 6 && this.cbs.ontext(data);
    }, Tokenizer2.prototype.getSection = function() {
      return this.buffer.substring(this.sectionStart, this._index);
    }, Tokenizer2.prototype.emitToken = function(name) {
      this.cbs[name](this.getSection()), this.sectionStart = -1;
    }, Tokenizer2.prototype.emitPartial = function(value) {
      this.baseState !== 1 ? this.cbs.onattribdata(value) : this.cbs.ontext(value);
    }, Tokenizer2;
  }();
  exports.default = Tokenizer;
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/Parser.js
var require_Parser = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.Parser = void 0;
  var Tokenizer_1 = __importDefault(require_Tokenizer()), formTags = new Set([
    "input",
    "option",
    "optgroup",
    "select",
    "button",
    "datalist",
    "textarea"
  ]), pTag = new Set(["p"]), openImpliesClose = {
    tr: new Set(["tr", "th", "td"]),
    th: new Set(["th"]),
    td: new Set(["thead", "th", "td"]),
    body: new Set(["head", "link", "script"]),
    li: new Set(["li"]),
    p: pTag,
    h1: pTag,
    h2: pTag,
    h3: pTag,
    h4: pTag,
    h5: pTag,
    h6: pTag,
    select: formTags,
    input: formTags,
    output: formTags,
    button: formTags,
    datalist: formTags,
    textarea: formTags,
    option: new Set(["option"]),
    optgroup: new Set(["optgroup", "option"]),
    dd: new Set(["dt", "dd"]),
    dt: new Set(["dt", "dd"]),
    address: pTag,
    article: pTag,
    aside: pTag,
    blockquote: pTag,
    details: pTag,
    div: pTag,
    dl: pTag,
    fieldset: pTag,
    figcaption: pTag,
    figure: pTag,
    footer: pTag,
    form: pTag,
    header: pTag,
    hr: pTag,
    main: pTag,
    nav: pTag,
    ol: pTag,
    pre: pTag,
    section: pTag,
    table: pTag,
    ul: pTag,
    rt: new Set(["rt", "rp"]),
    rp: new Set(["rt", "rp"]),
    tbody: new Set(["thead", "tbody"]),
    tfoot: new Set(["thead", "tbody"])
  }, voidElements = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]), foreignContextElements = new Set(["math", "svg"]), htmlIntegrationElements = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
  ]), reNameEnd = /\s|\//, Parser2 = function() {
    function Parser3(cbs, options) {
      options === void 0 && (options = {});
      var _a, _b, _c, _d, _e;
      this.startIndex = 0, this.endIndex = null, this.tagname = "", this.attribname = "", this.attribvalue = "", this.attribs = null, this.stack = [], this.foreignContext = [], this.options = options, this.cbs = cbs ?? {}, this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode, this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode, this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this), (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 || _e.call(_d, this);
    }
    return Parser3.prototype.updatePosition = function(initialOffset) {
      this.endIndex === null ? this.tokenizer.sectionStart <= initialOffset ? this.startIndex = 0 : this.startIndex = this.tokenizer.sectionStart - initialOffset : this.startIndex = this.endIndex + 1, this.endIndex = this.tokenizer.getAbsoluteIndex();
    }, Parser3.prototype.ontext = function(data) {
      var _a, _b;
      this.updatePosition(1), this.endIndex--, (_b = (_a = this.cbs).ontext) === null || _b === void 0 || _b.call(_a, data);
    }, Parser3.prototype.onopentagname = function(name) {
      var _a, _b;
      if (this.lowerCaseTagNames && (name = name.toLowerCase()), this.tagname = name, !this.options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name))
        for (var el = void 0; this.stack.length > 0 && openImpliesClose[name].has(el = this.stack[this.stack.length - 1]); )
          this.onclosetag(el);
      (this.options.xmlMode || !voidElements.has(name)) && (this.stack.push(name), foreignContextElements.has(name) ? this.foreignContext.push(!0) : htmlIntegrationElements.has(name) && this.foreignContext.push(!1)), (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 || _b.call(_a, name), this.cbs.onopentag && (this.attribs = {});
    }, Parser3.prototype.onopentagend = function() {
      var _a, _b;
      this.updatePosition(1), this.attribs && ((_b = (_a = this.cbs).onopentag) === null || _b === void 0 || _b.call(_a, this.tagname, this.attribs), this.attribs = null), !this.options.xmlMode && this.cbs.onclosetag && voidElements.has(this.tagname) && this.cbs.onclosetag(this.tagname), this.tagname = "";
    }, Parser3.prototype.onclosetag = function(name) {
      if (this.updatePosition(1), this.lowerCaseTagNames && (name = name.toLowerCase()), (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) && this.foreignContext.pop(), this.stack.length && (this.options.xmlMode || !voidElements.has(name))) {
        var pos = this.stack.lastIndexOf(name);
        if (pos !== -1)
          if (this.cbs.onclosetag)
            for (pos = this.stack.length - pos; pos--; )
              this.cbs.onclosetag(this.stack.pop());
          else
            this.stack.length = pos;
        else
          name === "p" && !this.options.xmlMode && (this.onopentagname(name), this.closeCurrentTag());
      } else
        !this.options.xmlMode && (name === "br" || name === "p") && (this.onopentagname(name), this.closeCurrentTag());
    }, Parser3.prototype.onselfclosingtag = function() {
      this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1] ? this.closeCurrentTag() : this.onopentagend();
    }, Parser3.prototype.closeCurrentTag = function() {
      var _a, _b, name = this.tagname;
      this.onopentagend(), this.stack[this.stack.length - 1] === name && ((_b = (_a = this.cbs).onclosetag) === null || _b === void 0 || _b.call(_a, name), this.stack.pop());
    }, Parser3.prototype.onattribname = function(name) {
      this.lowerCaseAttributeNames && (name = name.toLowerCase()), this.attribname = name;
    }, Parser3.prototype.onattribdata = function(value) {
      this.attribvalue += value;
    }, Parser3.prototype.onattribend = function(quote) {
      var _a, _b;
      (_b = (_a = this.cbs).onattribute) === null || _b === void 0 || _b.call(_a, this.attribname, this.attribvalue, quote), this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname) && (this.attribs[this.attribname] = this.attribvalue), this.attribname = "", this.attribvalue = "";
    }, Parser3.prototype.getInstructionName = function(value) {
      var idx = value.search(reNameEnd), name = idx < 0 ? value : value.substr(0, idx);
      return this.lowerCaseTagNames && (name = name.toLowerCase()), name;
    }, Parser3.prototype.ondeclaration = function(value) {
      if (this.cbs.onprocessinginstruction) {
        var name_1 = this.getInstructionName(value);
        this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
      }
    }, Parser3.prototype.onprocessinginstruction = function(value) {
      if (this.cbs.onprocessinginstruction) {
        var name_2 = this.getInstructionName(value);
        this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
      }
    }, Parser3.prototype.oncomment = function(value) {
      var _a, _b, _c, _d;
      this.updatePosition(4), (_b = (_a = this.cbs).oncomment) === null || _b === void 0 || _b.call(_a, value), (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 || _d.call(_c);
    }, Parser3.prototype.oncdata = function(value) {
      var _a, _b, _c, _d, _e, _f;
      this.updatePosition(1), this.options.xmlMode || this.options.recognizeCDATA ? ((_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 || _b.call(_a), (_d = (_c = this.cbs).ontext) === null || _d === void 0 || _d.call(_c, value), (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 || _f.call(_e)) : this.oncomment("[CDATA[" + value + "]]");
    }, Parser3.prototype.onerror = function(err) {
      var _a, _b;
      (_b = (_a = this.cbs).onerror) === null || _b === void 0 || _b.call(_a, err);
    }, Parser3.prototype.onend = function() {
      var _a, _b;
      if (this.cbs.onclosetag)
        for (var i2 = this.stack.length; i2 > 0; this.cbs.onclosetag(this.stack[--i2]))
          ;
      (_b = (_a = this.cbs).onend) === null || _b === void 0 || _b.call(_a);
    }, Parser3.prototype.reset = function() {
      var _a, _b, _c, _d;
      (_b = (_a = this.cbs).onreset) === null || _b === void 0 || _b.call(_a), this.tokenizer.reset(), this.tagname = "", this.attribname = "", this.attribs = null, this.stack = [], (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 || _d.call(_c, this);
    }, Parser3.prototype.parseComplete = function(data) {
      this.reset(), this.end(data);
    }, Parser3.prototype.write = function(chunk) {
      this.tokenizer.write(chunk);
    }, Parser3.prototype.end = function(chunk) {
      this.tokenizer.end(chunk);
    }, Parser3.prototype.pause = function() {
      this.tokenizer.pause();
    }, Parser3.prototype.resume = function() {
      this.tokenizer.resume();
    }, Parser3.prototype.parseChunk = function(chunk) {
      this.write(chunk);
    }, Parser3.prototype.done = function(chunk) {
      this.end(chunk);
    }, Parser3;
  }();
  exports.Parser = Parser2;
});

// node_modules/.pnpm/domhandler@4.0.0/node_modules/domhandler/lib/index.js
var require_lib = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), Object.defineProperty(o2, k22, {enumerable: !0, get: function() {
      return m2[k2];
    }});
  } : function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), o2[k22] = m2[k2];
  }), __exportStar2 = exports && exports.__exportStar || function(m2, exports2) {
    for (var p2 in m2)
      p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2) && __createBinding(exports2, m2, p2);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.DomHandler = void 0;
  var node_1 = require_node();
  __exportStar2(require_node(), exports);
  var reWhitespace = /\s+/g, defaultOpts = {
    normalizeWhitespace: !1,
    withStartIndices: !1,
    withEndIndices: !1
  }, DomHandler2 = function() {
    function DomHandler3(callback, options, elementCB) {
      this.dom = [], this.root = new node_1.Document(this.dom), this.done = !1, this.tagStack = [this.root], this.lastNode = null, this.parser = null, typeof options == "function" && (elementCB = options, options = defaultOpts), typeof callback == "object" && (options = callback, callback = void 0), this.callback = callback ?? null, this.options = options ?? defaultOpts, this.elementCB = elementCB ?? null;
    }
    return DomHandler3.prototype.onparserinit = function(parser) {
      this.parser = parser;
    }, DomHandler3.prototype.onreset = function() {
      var _a;
      this.dom = [], this.root = new node_1.Document(this.dom), this.done = !1, this.tagStack = [this.root], this.lastNode = null, this.parser = (_a = this.parser) !== null && _a !== void 0 ? _a : null;
    }, DomHandler3.prototype.onend = function() {
      this.done || (this.done = !0, this.parser = null, this.handleCallback(null));
    }, DomHandler3.prototype.onerror = function(error) {
      this.handleCallback(error);
    }, DomHandler3.prototype.onclosetag = function() {
      this.lastNode = null;
      var elem = this.tagStack.pop();
      this.options.withEndIndices && (elem.endIndex = this.parser.endIndex), this.elementCB && this.elementCB(elem);
    }, DomHandler3.prototype.onopentag = function(name, attribs) {
      var element = new node_1.Element(name, attribs);
      this.addNode(element), this.tagStack.push(element);
    }, DomHandler3.prototype.ontext = function(data) {
      var normalizeWhitespace = this.options.normalizeWhitespace, lastNode = this.lastNode;
      if (lastNode && lastNode.type === "text")
        normalizeWhitespace ? lastNode.data = (lastNode.data + data).replace(reWhitespace, " ") : lastNode.data += data;
      else {
        normalizeWhitespace && (data = data.replace(reWhitespace, " "));
        var node = new node_1.Text(data);
        this.addNode(node), this.lastNode = node;
      }
    }, DomHandler3.prototype.oncomment = function(data) {
      if (this.lastNode && this.lastNode.type === "comment") {
        this.lastNode.data += data;
        return;
      }
      var node = new node_1.Comment(data);
      this.addNode(node), this.lastNode = node;
    }, DomHandler3.prototype.oncommentend = function() {
      this.lastNode = null;
    }, DomHandler3.prototype.oncdatastart = function() {
      var text = new node_1.Text(""), node = new node_1.NodeWithChildren("cdata", [text]);
      this.addNode(node), text.parent = node, this.lastNode = text;
    }, DomHandler3.prototype.oncdataend = function() {
      this.lastNode = null;
    }, DomHandler3.prototype.onprocessinginstruction = function(name, data) {
      var node = new node_1.ProcessingInstruction(name, data);
      this.addNode(node);
    }, DomHandler3.prototype.handleCallback = function(error) {
      if (typeof this.callback == "function")
        this.callback(error, this.dom);
      else if (error)
        throw error;
    }, DomHandler3.prototype.addNode = function(node) {
      var parent = this.tagStack[this.tagStack.length - 1], previousSibling = parent.children[parent.children.length - 1];
      this.options.withStartIndices && (node.startIndex = this.parser.startIndex), this.options.withEndIndices && (node.endIndex = this.parser.endIndex), parent.children.push(node), previousSibling && (node.prev = previousSibling, previousSibling.next = node), node.parent = parent, this.lastNode = null;
    }, DomHandler3.prototype.addDataNode = function(node) {
      this.addNode(node), this.lastNode = node;
    }, DomHandler3;
  }();
  exports.DomHandler = DomHandler2;
  exports.default = DomHandler2;
});

// node_modules/.pnpm/domelementtype@2.1.0/node_modules/domelementtype/lib/index.js
var require_lib2 = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = void 0;
  function isTag(elem) {
    return elem.type === "tag" || elem.type === "script" || elem.type === "style";
  }
  exports.isTag = isTag;
  exports.Root = "root";
  exports.Text = "text";
  exports.Directive = "directive";
  exports.Comment = "comment";
  exports.Script = "script";
  exports.Style = "style";
  exports.Tag = "tag";
  exports.CDATA = "cdata";
  exports.Doctype = "doctype";
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/tagtypes.js
var require_tagtypes = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.hasChildren = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
  var domelementtype_1 = require_lib2();
  function isTag(node) {
    return domelementtype_1.isTag(node);
  }
  exports.isTag = isTag;
  function isCDATA(node) {
    return node.type === "cdata";
  }
  exports.isCDATA = isCDATA;
  function isText(node) {
    return node.type === "text";
  }
  exports.isText = isText;
  function isComment(node) {
    return node.type === "comment";
  }
  exports.isComment = isComment;
  function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
  }
  exports.hasChildren = hasChildren;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode.js
var require_decode2 = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
  var entities_json_1 = __importDefault(require_entities()), legacy_json_1 = __importDefault(require_legacy()), xml_json_1 = __importDefault(require_xml()), decode_codepoint_1 = __importDefault(require_decode_codepoint()), strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
  exports.decodeXML = getStrictDecoder(xml_json_1.default);
  exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
  function getStrictDecoder(map) {
    var replace = getReplacer(map);
    return function(str) {
      return String(str).replace(strictEntityRe, replace);
    };
  }
  var sorter = function(a, b2) {
    return a < b2 ? 1 : -1;
  };
  exports.decodeHTML = function() {
    for (var legacy = Object.keys(legacy_json_1.default).sort(sorter), keys2 = Object.keys(entities_json_1.default).sort(sorter), i2 = 0, j = 0; i2 < keys2.length; i2++)
      legacy[j] === keys2[i2] ? (keys2[i2] += ";?", j++) : keys2[i2] += ";";
    var re = new RegExp("&(?:" + keys2.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"), replace = getReplacer(entities_json_1.default);
    function replacer(str) {
      return str.substr(-1) !== ";" && (str += ";"), replace(str);
    }
    return function(str) {
      return String(str).replace(re, replacer);
    };
  }();
  function getReplacer(map) {
    return function(str) {
      if (str.charAt(1) === "#") {
        var secondChar = str.charAt(2);
        return secondChar === "X" || secondChar === "x" ? decode_codepoint_1.default(parseInt(str.substr(3), 16)) : decode_codepoint_1.default(parseInt(str.substr(2), 10));
      }
      return map[str.slice(1, -1)] || str;
    };
  }
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/encode.js
var require_encode = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
  var xml_json_1 = __importDefault(require_xml()), inverseXML = getInverseObj(xml_json_1.default), xmlReplacer = getInverseReplacer(inverseXML);
  exports.encodeXML = getASCIIEncoder(inverseXML);
  var entities_json_1 = __importDefault(require_entities()), inverseHTML = getInverseObj(entities_json_1.default), htmlReplacer = getInverseReplacer(inverseHTML);
  exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
  exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
  function getInverseObj(obj) {
    return Object.keys(obj).sort().reduce(function(inverse, name) {
      return inverse[obj[name]] = "&" + name + ";", inverse;
    }, {});
  }
  function getInverseReplacer(inverse) {
    for (var single = [], multiple = [], _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
      var k2 = _a[_i];
      k2.length === 1 ? single.push("\\" + k2) : multiple.push(k2);
    }
    single.sort();
    for (var start = 0; start < single.length - 1; start++) {
      for (var end = start; end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1); )
        end += 1;
      var count = 1 + end - start;
      count < 3 || single.splice(start, count, single[start] + "-" + single[end]);
    }
    return multiple.unshift("[" + single.join("") + "]"), new RegExp(multiple.join("|"), "g");
  }
  var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g, getCodePoint = String.prototype.codePointAt != null ? function(str) {
    return str.codePointAt(0);
  } : function(c2) {
    return (c2.charCodeAt(0) - 55296) * 1024 + c2.charCodeAt(1) - 56320 + 65536;
  };
  function singleCharReplacer(c2) {
    return "&#x" + (c2.length > 1 ? getCodePoint(c2) : c2.charCodeAt(0)).toString(16).toUpperCase() + ";";
  }
  function getInverse(inverse, re) {
    return function(data) {
      return data.replace(re, function(name) {
        return inverse[name];
      }).replace(reNonASCII, singleCharReplacer);
    };
  }
  var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
  function escape(data) {
    return data.replace(reEscapeChars, singleCharReplacer);
  }
  exports.escape = escape;
  function escapeUTF8(data) {
    return data.replace(xmlReplacer, singleCharReplacer);
  }
  exports.escapeUTF8 = escapeUTF8;
  function getASCIIEncoder(obj) {
    return function(data) {
      return data.replace(reEscapeChars, function(c2) {
        return obj[c2] || singleCharReplacer(c2);
      });
    };
  }
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/index.js
var require_lib3 = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
  var decode_1 = require_decode2(), encode_1 = require_encode();
  function decode(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
  }
  exports.decode = decode;
  function decodeStrict(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
  }
  exports.decodeStrict = decodeStrict;
  function encode(data, level) {
    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
  }
  exports.encode = encode;
  var encode_2 = require_encode();
  Object.defineProperty(exports, "encodeXML", {enumerable: !0, get: function() {
    return encode_2.encodeXML;
  }});
  Object.defineProperty(exports, "encodeHTML", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  Object.defineProperty(exports, "encodeNonAsciiHTML", {enumerable: !0, get: function() {
    return encode_2.encodeNonAsciiHTML;
  }});
  Object.defineProperty(exports, "escape", {enumerable: !0, get: function() {
    return encode_2.escape;
  }});
  Object.defineProperty(exports, "escapeUTF8", {enumerable: !0, get: function() {
    return encode_2.escapeUTF8;
  }});
  Object.defineProperty(exports, "encodeHTML4", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  Object.defineProperty(exports, "encodeHTML5", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  var decode_2 = require_decode2();
  Object.defineProperty(exports, "decodeXML", {enumerable: !0, get: function() {
    return decode_2.decodeXML;
  }});
  Object.defineProperty(exports, "decodeHTML", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTMLStrict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeHTML4", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTML5", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTML4Strict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeHTML5Strict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeXMLStrict", {enumerable: !0, get: function() {
    return decode_2.decodeXML;
  }});
});

// node_modules/.pnpm/dom-serializer@1.2.0/node_modules/dom-serializer/lib/foreignNames.js
var require_foreignNames = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.attributeNames = exports.elementNames = void 0;
  exports.elementNames = new Map([
    ["altglyph", "altGlyph"],
    ["altglyphdef", "altGlyphDef"],
    ["altglyphitem", "altGlyphItem"],
    ["animatecolor", "animateColor"],
    ["animatemotion", "animateMotion"],
    ["animatetransform", "animateTransform"],
    ["clippath", "clipPath"],
    ["feblend", "feBlend"],
    ["fecolormatrix", "feColorMatrix"],
    ["fecomponenttransfer", "feComponentTransfer"],
    ["fecomposite", "feComposite"],
    ["feconvolvematrix", "feConvolveMatrix"],
    ["fediffuselighting", "feDiffuseLighting"],
    ["fedisplacementmap", "feDisplacementMap"],
    ["fedistantlight", "feDistantLight"],
    ["fedropshadow", "feDropShadow"],
    ["feflood", "feFlood"],
    ["fefunca", "feFuncA"],
    ["fefuncb", "feFuncB"],
    ["fefuncg", "feFuncG"],
    ["fefuncr", "feFuncR"],
    ["fegaussianblur", "feGaussianBlur"],
    ["feimage", "feImage"],
    ["femerge", "feMerge"],
    ["femergenode", "feMergeNode"],
    ["femorphology", "feMorphology"],
    ["feoffset", "feOffset"],
    ["fepointlight", "fePointLight"],
    ["fespecularlighting", "feSpecularLighting"],
    ["fespotlight", "feSpotLight"],
    ["fetile", "feTile"],
    ["feturbulence", "feTurbulence"],
    ["foreignobject", "foreignObject"],
    ["glyphref", "glyphRef"],
    ["lineargradient", "linearGradient"],
    ["radialgradient", "radialGradient"],
    ["textpath", "textPath"]
  ]);
  exports.attributeNames = new Map([
    ["definitionurl", "definitionURL"],
    ["attributename", "attributeName"],
    ["attributetype", "attributeType"],
    ["basefrequency", "baseFrequency"],
    ["baseprofile", "baseProfile"],
    ["calcmode", "calcMode"],
    ["clippathunits", "clipPathUnits"],
    ["diffuseconstant", "diffuseConstant"],
    ["edgemode", "edgeMode"],
    ["filterunits", "filterUnits"],
    ["glyphref", "glyphRef"],
    ["gradienttransform", "gradientTransform"],
    ["gradientunits", "gradientUnits"],
    ["kernelmatrix", "kernelMatrix"],
    ["kernelunitlength", "kernelUnitLength"],
    ["keypoints", "keyPoints"],
    ["keysplines", "keySplines"],
    ["keytimes", "keyTimes"],
    ["lengthadjust", "lengthAdjust"],
    ["limitingconeangle", "limitingConeAngle"],
    ["markerheight", "markerHeight"],
    ["markerunits", "markerUnits"],
    ["markerwidth", "markerWidth"],
    ["maskcontentunits", "maskContentUnits"],
    ["maskunits", "maskUnits"],
    ["numoctaves", "numOctaves"],
    ["pathlength", "pathLength"],
    ["patterncontentunits", "patternContentUnits"],
    ["patterntransform", "patternTransform"],
    ["patternunits", "patternUnits"],
    ["pointsatx", "pointsAtX"],
    ["pointsaty", "pointsAtY"],
    ["pointsatz", "pointsAtZ"],
    ["preservealpha", "preserveAlpha"],
    ["preserveaspectratio", "preserveAspectRatio"],
    ["primitiveunits", "primitiveUnits"],
    ["refx", "refX"],
    ["refy", "refY"],
    ["repeatcount", "repeatCount"],
    ["repeatdur", "repeatDur"],
    ["requiredextensions", "requiredExtensions"],
    ["requiredfeatures", "requiredFeatures"],
    ["specularconstant", "specularConstant"],
    ["specularexponent", "specularExponent"],
    ["spreadmethod", "spreadMethod"],
    ["startoffset", "startOffset"],
    ["stddeviation", "stdDeviation"],
    ["stitchtiles", "stitchTiles"],
    ["surfacescale", "surfaceScale"],
    ["systemlanguage", "systemLanguage"],
    ["tablevalues", "tableValues"],
    ["targetx", "targetX"],
    ["targety", "targetY"],
    ["textlength", "textLength"],
    ["viewbox", "viewBox"],
    ["viewtarget", "viewTarget"],
    ["xchannelselector", "xChannelSelector"],
    ["ychannelselector", "yChannelSelector"],
    ["zoomandpan", "zoomAndPan"]
  ]);
});

// node_modules/.pnpm/dom-serializer@1.2.0/node_modules/dom-serializer/lib/index.js
var require_lib4 = __commonJS((exports) => {
  "use strict";
  var __assign = exports && exports.__assign || function() {
    return __assign = Object.assign || function(t) {
      for (var s2, i2 = 1, n = arguments.length; i2 < n; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          Object.prototype.hasOwnProperty.call(s2, p2) && (t[p2] = s2[p2]);
      }
      return t;
    }, __assign.apply(this, arguments);
  }, __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), Object.defineProperty(o2, k22, {enumerable: !0, get: function() {
      return m2[k2];
    }});
  } : function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), o2[k22] = m2[k2];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", {enumerable: !0, value: v2});
  } : function(o2, v2) {
    o2.default = v2;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k2 in mod)
        k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2) && __createBinding(result, mod, k2);
    return __setModuleDefault(result, mod), result;
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var ElementType = __importStar(require_lib2()), entities_1 = require_lib3(), foreignNames_1 = require_foreignNames(), unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript"
  ]);
  function formatAttributes(attributes, opts) {
    if (!!attributes)
      return Object.keys(attributes).map(function(key) {
        var _a, _b, value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        return opts.xmlMode === "foreign" && (key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key), !opts.emptyAttrs && !opts.xmlMode && value === "" ? key : key + '="' + (opts.decodeEntities ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + '"';
      }).join(" ");
  }
  var singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]);
  function render(node, options) {
    options === void 0 && (options = {});
    for (var nodes = Array.isArray(node) || node.cheerio ? node : [node], output = "", i2 = 0; i2 < nodes.length; i2++)
      output += renderNode(nodes[i2], options);
    return output;
  }
  exports.default = render;
  function renderNode(node, options) {
    switch (node.type) {
      case ElementType.Root:
        return render(node.children, options);
      case ElementType.Directive:
      case ElementType.Doctype:
        return renderDirective(node);
      case ElementType.Comment:
        return renderComment(node);
      case ElementType.CDATA:
        return renderCdata(node);
      case ElementType.Script:
      case ElementType.Style:
      case ElementType.Tag:
        return renderTag(node, options);
      case ElementType.Text:
        return renderText(node, options);
    }
  }
  var foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
  ]), foreignElements = new Set(["svg", "math"]);
  function renderTag(elem, opts) {
    var _a;
    opts.xmlMode === "foreign" && (elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name, elem.parent && foreignModeIntegrationPoints.has(elem.parent.name) && (opts = __assign(__assign({}, opts), {xmlMode: !1}))), !opts.xmlMode && foreignElements.has(elem.name) && (opts = __assign(__assign({}, opts), {xmlMode: "foreign"}));
    var tag = "<" + elem.name, attribs = formatAttributes(elem.attribs, opts);
    return attribs && (tag += " " + attribs), elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== !1 : opts.selfClosingTags && singleTag.has(elem.name)) ? (opts.xmlMode || (tag += " "), tag += "/>") : (tag += ">", elem.children.length > 0 && (tag += render(elem.children, opts)), (opts.xmlMode || !singleTag.has(elem.name)) && (tag += "</" + elem.name + ">")), tag;
  }
  function renderDirective(elem) {
    return "<" + elem.data + ">";
  }
  function renderText(elem, opts) {
    var data = elem.data || "";
    return opts.decodeEntities && !(elem.parent && unencodedElements.has(elem.parent.name)) && (data = entities_1.encodeXML(data)), data;
  }
  function renderCdata(elem) {
    return "<![CDATA[" + elem.children[0].data + "]]>";
  }
  function renderComment(elem) {
    return "<!--" + elem.data + "-->";
  }
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/stringify.js
var require_stringify = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
  var tagtypes_1 = require_tagtypes(), dom_serializer_1 = __importDefault(require_lib4());
  function getOuterHTML(node, options) {
    return dom_serializer_1.default(node, options);
  }
  exports.getOuterHTML = getOuterHTML;
  function getInnerHTML(node, options) {
    return tagtypes_1.hasChildren(node) ? node.children.map(function(node2) {
      return getOuterHTML(node2, options);
    }).join("") : "";
  }
  exports.getInnerHTML = getInnerHTML;
  function getText(node) {
    return Array.isArray(node) ? node.map(getText).join("") : tagtypes_1.isTag(node) ? node.name === "br" ? `
` : getText(node.children) : tagtypes_1.isCDATA(node) ? getText(node.children) : tagtypes_1.isText(node) ? node.data : "";
  }
  exports.getText = getText;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/traversal.js
var require_traversal = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
  var tagtypes_1 = require_tagtypes(), emptyArray = [];
  function getChildren(elem) {
    var _a;
    return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
  }
  exports.getChildren = getChildren;
  function getParent(elem) {
    return elem.parent || null;
  }
  exports.getParent = getParent;
  function getSiblings(elem) {
    var _a, _b, parent = getParent(elem);
    if (parent != null)
      return getChildren(parent);
    for (var siblings = [elem], prev = elem.prev, next = elem.next; prev != null; )
      siblings.unshift(prev), _a = prev, prev = _a.prev;
    for (; next != null; )
      siblings.push(next), _b = next, next = _b.next;
    return siblings;
  }
  exports.getSiblings = getSiblings;
  function getAttributeValue(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
  }
  exports.getAttributeValue = getAttributeValue;
  function hasAttrib(elem, name) {
    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
  }
  exports.hasAttrib = hasAttrib;
  function getName(elem) {
    return elem.name;
  }
  exports.getName = getName;
  function nextElementSibling(elem) {
    for (var _a, next = elem.next; next !== null && !tagtypes_1.isTag(next); )
      _a = next, next = _a.next;
    return next;
  }
  exports.nextElementSibling = nextElementSibling;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/manipulation.js
var require_manipulation = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
  function removeElement(elem) {
    if (elem.prev && (elem.prev.next = elem.next), elem.next && (elem.next.prev = elem.prev), elem.parent) {
      var childs = elem.parent.children;
      childs.splice(childs.lastIndexOf(elem), 1);
    }
  }
  exports.removeElement = removeElement;
  function replaceElement(elem, replacement) {
    var prev = replacement.prev = elem.prev;
    prev && (prev.next = replacement);
    var next = replacement.next = elem.next;
    next && (next.prev = replacement);
    var parent = replacement.parent = elem.parent;
    if (parent) {
      var childs = parent.children;
      childs[childs.lastIndexOf(elem)] = replacement;
    }
  }
  exports.replaceElement = replaceElement;
  function appendChild(elem, child) {
    if (removeElement(child), child.next = null, child.parent = elem, elem.children.push(child) > 1) {
      var sibling = elem.children[elem.children.length - 2];
      sibling.next = child, child.prev = sibling;
    } else
      child.prev = null;
  }
  exports.appendChild = appendChild;
  function append(elem, next) {
    removeElement(next);
    var parent = elem.parent, currNext = elem.next;
    if (next.next = currNext, next.prev = elem, elem.next = next, next.parent = parent, currNext) {
      if (currNext.prev = next, parent) {
        var childs = parent.children;
        childs.splice(childs.lastIndexOf(currNext), 0, next);
      }
    } else
      parent && parent.children.push(next);
  }
  exports.append = append;
  function prependChild(elem, child) {
    if (removeElement(child), child.parent = elem, child.prev = null, elem.children.unshift(child) !== 1) {
      var sibling = elem.children[1];
      sibling.prev = child, child.next = sibling;
    } else
      child.next = null;
  }
  exports.prependChild = prependChild;
  function prepend(elem, prev) {
    removeElement(prev);
    var parent = elem.parent;
    if (parent) {
      var childs = parent.children;
      childs.splice(childs.indexOf(elem), 0, prev);
    }
    elem.prev && (elem.prev.next = prev), prev.parent = parent, prev.prev = elem.prev, prev.next = elem, elem.prev = prev;
  }
  exports.prepend = prepend;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/querying.js
var require_querying = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
  var tagtypes_1 = require_tagtypes();
  function filter(test, node, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), Array.isArray(node) || (node = [node]), find(test, node, recurse, limit);
  }
  exports.filter = filter;
  function find(test, nodes, recurse, limit) {
    for (var result = [], _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
      var elem = nodes_1[_i];
      if (test(elem) && (result.push(elem), --limit <= 0))
        break;
      if (recurse && tagtypes_1.hasChildren(elem) && elem.children.length > 0) {
        var children = find(test, elem.children, recurse, limit);
        if (result.push.apply(result, children), limit -= children.length, limit <= 0)
          break;
      }
    }
    return result;
  }
  exports.find = find;
  function findOneChild(test, nodes) {
    return nodes.find(test);
  }
  exports.findOneChild = findOneChild;
  function findOne(test, nodes, recurse) {
    recurse === void 0 && (recurse = !0);
    for (var elem = null, i2 = 0; i2 < nodes.length && !elem; i2++) {
      var checked = nodes[i2];
      if (tagtypes_1.isTag(checked))
        test(checked) ? elem = checked : recurse && checked.children.length > 0 && (elem = findOne(test, checked.children));
      else
        continue;
    }
    return elem;
  }
  exports.findOne = findOne;
  function existsOne(test, nodes) {
    return nodes.some(function(checked) {
      return tagtypes_1.isTag(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));
    });
  }
  exports.existsOne = existsOne;
  function findAll(test, nodes) {
    for (var _a, result = [], stack = nodes.filter(tagtypes_1.isTag), elem; elem = stack.shift(); ) {
      var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(tagtypes_1.isTag);
      children && children.length > 0 && stack.unshift.apply(stack, children), test(elem) && result.push(elem);
    }
    return result;
  }
  exports.findAll = findAll;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/legacy.js
var require_legacy2 = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
  var querying_1 = require_querying(), tagtypes_1 = require_tagtypes(), Checks = {
    tag_name: function(name) {
      return typeof name == "function" ? function(elem) {
        return tagtypes_1.isTag(elem) && name(elem.name);
      } : name === "*" ? tagtypes_1.isTag : function(elem) {
        return tagtypes_1.isTag(elem) && elem.name === name;
      };
    },
    tag_type: function(type) {
      return typeof type == "function" ? function(elem) {
        return type(elem.type);
      } : function(elem) {
        return elem.type === type;
      };
    },
    tag_contains: function(data) {
      return typeof data == "function" ? function(elem) {
        return tagtypes_1.isText(elem) && data(elem.data);
      } : function(elem) {
        return tagtypes_1.isText(elem) && elem.data === data;
      };
    }
  };
  function getAttribCheck(attrib, value) {
    return typeof value == "function" ? function(elem) {
      return tagtypes_1.isTag(elem) && value(elem.attribs[attrib]);
    } : function(elem) {
      return tagtypes_1.isTag(elem) && elem.attribs[attrib] === value;
    };
  }
  function combineFuncs(a, b2) {
    return function(elem) {
      return a(elem) || b2(elem);
    };
  }
  function compileTest(options) {
    var funcs = Object.keys(options).map(function(key) {
      var value = options[key];
      return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
  }
  function testElement(options, node) {
    var test = compileTest(options);
    return test ? test(node) : !0;
  }
  exports.testElement = testElement;
  function getElements(options, nodes, recurse, limit) {
    limit === void 0 && (limit = Infinity);
    var test = compileTest(options);
    return test ? querying_1.filter(test, nodes, recurse, limit) : [];
  }
  exports.getElements = getElements;
  function getElementById(id, nodes, recurse) {
    return recurse === void 0 && (recurse = !0), Array.isArray(nodes) || (nodes = [nodes]), querying_1.findOne(getAttribCheck("id", id), nodes, recurse);
  }
  exports.getElementById = getElementById;
  function getElementsByTagName(tagName, nodes, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), querying_1.filter(Checks.tag_name(tagName), nodes, recurse, limit);
  }
  exports.getElementsByTagName = getElementsByTagName;
  function getElementsByTagType(type, nodes, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), querying_1.filter(Checks.tag_type(type), nodes, recurse, limit);
  }
  exports.getElementsByTagType = getElementsByTagType;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/helpers.js
var require_helpers = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;
  var tagtypes_1 = require_tagtypes();
  function removeSubsets(nodes) {
    for (var idx = nodes.length; --idx >= 0; ) {
      var node = nodes[idx];
      if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
        nodes.splice(idx, 1);
        continue;
      }
      for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent)
        if (nodes.includes(ancestor)) {
          nodes.splice(idx, 1);
          break;
        }
    }
    return nodes;
  }
  exports.removeSubsets = removeSubsets;
  function compareDocumentPosition(nodeA, nodeB) {
    var aParents = [], bParents = [];
    if (nodeA === nodeB)
      return 0;
    for (var current = tagtypes_1.hasChildren(nodeA) ? nodeA : nodeA.parent; current; )
      aParents.unshift(current), current = current.parent;
    for (current = tagtypes_1.hasChildren(nodeB) ? nodeB : nodeB.parent; current; )
      bParents.unshift(current), current = current.parent;
    for (var maxIdx = Math.min(aParents.length, bParents.length), idx = 0; idx < maxIdx && aParents[idx] === bParents[idx]; )
      idx++;
    if (idx === 0)
      return 1;
    var sharedParent = aParents[idx - 1], siblings = sharedParent.children, aSibling = aParents[idx], bSibling = bParents[idx];
    return siblings.indexOf(aSibling) > siblings.indexOf(bSibling) ? sharedParent === nodeB ? 4 | 16 : 4 : sharedParent === nodeA ? 2 | 8 : 2;
  }
  exports.compareDocumentPosition = compareDocumentPosition;
  function uniqueSort(nodes) {
    return nodes = nodes.filter(function(node, i2, arr) {
      return !arr.includes(node, i2 + 1);
    }), nodes.sort(function(a, b2) {
      var relative = compareDocumentPosition(a, b2);
      return relative & 2 ? -1 : relative & 4 ? 1 : 0;
    }), nodes;
  }
  exports.uniqueSort = uniqueSort;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/index.js
var require_lib5 = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), Object.defineProperty(o2, k22, {enumerable: !0, get: function() {
      return m2[k2];
    }});
  } : function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), o2[k22] = m2[k2];
  }), __exportStar2 = exports && exports.__exportStar || function(m2, exports2) {
    for (var p2 in m2)
      p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2) && __createBinding(exports2, m2, p2);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  __exportStar2(require_stringify(), exports);
  __exportStar2(require_traversal(), exports);
  __exportStar2(require_manipulation(), exports);
  __exportStar2(require_querying(), exports);
  __exportStar2(require_legacy2(), exports);
  __exportStar2(require_helpers(), exports);
  __exportStar2(require_tagtypes(), exports);
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/FeedHandler.js
var require_FeedHandler = __commonJS((exports) => {
  "use strict";
  var __extends = exports && exports.__extends || function() {
    var extendStatics = function(d2, b2) {
      return extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d3, b3) {
        d3.__proto__ = b3;
      } || function(d3, b3) {
        for (var p2 in b3)
          Object.prototype.hasOwnProperty.call(b3, p2) && (d3[p2] = b3[p2]);
      }, extendStatics(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 != "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }(), __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), Object.defineProperty(o2, k22, {enumerable: !0, get: function() {
      return m2[k2];
    }});
  } : function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), o2[k22] = m2[k2];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", {enumerable: !0, value: v2});
  } : function(o2, v2) {
    o2.default = v2;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k2 in mod)
        k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2) && __createBinding(result, mod, k2);
    return __setModuleDefault(result, mod), result;
  }, __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.parseFeed = exports.FeedHandler = void 0;
  var domhandler_1 = __importDefault(require_lib()), DomUtils3 = __importStar(require_lib5()), Parser_1 = require_Parser(), FeedItemMediaMedium;
  (function(FeedItemMediaMedium2) {
    FeedItemMediaMedium2[FeedItemMediaMedium2.image = 0] = "image", FeedItemMediaMedium2[FeedItemMediaMedium2.audio = 1] = "audio", FeedItemMediaMedium2[FeedItemMediaMedium2.video = 2] = "video", FeedItemMediaMedium2[FeedItemMediaMedium2.document = 3] = "document", FeedItemMediaMedium2[FeedItemMediaMedium2.executable = 4] = "executable";
  })(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
  var FeedItemMediaExpression;
  (function(FeedItemMediaExpression2) {
    FeedItemMediaExpression2[FeedItemMediaExpression2.sample = 0] = "sample", FeedItemMediaExpression2[FeedItemMediaExpression2.full = 1] = "full", FeedItemMediaExpression2[FeedItemMediaExpression2.nonstop = 2] = "nonstop";
  })(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
  var FeedHandler = function(_super) {
    __extends(FeedHandler2, _super);
    function FeedHandler2(callback, options) {
      var _this = this;
      return typeof callback == "object" && (callback = void 0, options = callback), _this = _super.call(this, callback, options) || this, _this;
    }
    return FeedHandler2.prototype.onend = function() {
      var _a, _b, feedRoot = getOneElement(isValidFeed, this.dom);
      if (!feedRoot) {
        this.handleCallback(new Error("couldn't find root of feed"));
        return;
      }
      var feed = {};
      if (feedRoot.name === "feed") {
        var childs = feedRoot.children;
        feed.type = "atom", addConditionally(feed, "id", "id", childs), addConditionally(feed, "title", "title", childs);
        var href = getAttribute("href", getOneElement("link", childs));
        href && (feed.link = href), addConditionally(feed, "description", "subtitle", childs);
        var updated = fetch2("updated", childs);
        updated && (feed.updated = new Date(updated)), addConditionally(feed, "author", "email", childs, !0), feed.items = getElements("entry", childs).map(function(item) {
          var entry = {}, children = item.children;
          addConditionally(entry, "id", "id", children), addConditionally(entry, "title", "title", children);
          var href2 = getAttribute("href", getOneElement("link", children));
          href2 && (entry.link = href2);
          var description = fetch2("summary", children) || fetch2("content", children);
          description && (entry.description = description);
          var pubDate = fetch2("updated", children);
          return pubDate && (entry.pubDate = new Date(pubDate)), entry.media = getMediaElements(children), entry;
        });
      } else {
        var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
        feed.type = feedRoot.name.substr(0, 3), feed.id = "", addConditionally(feed, "title", "title", childs), addConditionally(feed, "link", "link", childs), addConditionally(feed, "description", "description", childs);
        var updated = fetch2("lastBuildDate", childs);
        updated && (feed.updated = new Date(updated)), addConditionally(feed, "author", "managingEditor", childs, !0), feed.items = getElements("item", feedRoot.children).map(function(item) {
          var entry = {}, children = item.children;
          addConditionally(entry, "id", "guid", children), addConditionally(entry, "title", "title", children), addConditionally(entry, "link", "link", children), addConditionally(entry, "description", "description", children);
          var pubDate = fetch2("pubDate", children);
          return pubDate && (entry.pubDate = new Date(pubDate)), entry.media = getMediaElements(children), entry;
        });
      }
      this.feed = feed, this.handleCallback(null);
    }, FeedHandler2;
  }(domhandler_1.default);
  exports.FeedHandler = FeedHandler;
  function getMediaElements(where) {
    return getElements("media:content", where).map(function(elem) {
      var media = {
        medium: elem.attribs.medium,
        isDefault: !!elem.attribs.isDefault
      };
      return elem.attribs.url && (media.url = elem.attribs.url), elem.attribs.fileSize && (media.fileSize = parseInt(elem.attribs.fileSize, 10)), elem.attribs.type && (media.type = elem.attribs.type), elem.attribs.expression && (media.expression = elem.attribs.expression), elem.attribs.bitrate && (media.bitrate = parseInt(elem.attribs.bitrate, 10)), elem.attribs.framerate && (media.framerate = parseInt(elem.attribs.framerate, 10)), elem.attribs.samplingrate && (media.samplingrate = parseInt(elem.attribs.samplingrate, 10)), elem.attribs.channels && (media.channels = parseInt(elem.attribs.channels, 10)), elem.attribs.duration && (media.duration = parseInt(elem.attribs.duration, 10)), elem.attribs.height && (media.height = parseInt(elem.attribs.height, 10)), elem.attribs.width && (media.width = parseInt(elem.attribs.width, 10)), elem.attribs.lang && (media.lang = elem.attribs.lang), media;
    });
  }
  function getElements(tagName, where) {
    return DomUtils3.getElementsByTagName(tagName, where, !0);
  }
  function getOneElement(tagName, node) {
    return DomUtils3.getElementsByTagName(tagName, node, !0, 1)[0];
  }
  function fetch2(tagName, where, recurse) {
    return recurse === void 0 && (recurse = !1), DomUtils3.getText(DomUtils3.getElementsByTagName(tagName, where, recurse, 1)).trim();
  }
  function getAttribute(name, elem) {
    if (!elem)
      return null;
    var attribs = elem.attribs;
    return attribs[name];
  }
  function addConditionally(obj, prop, what, where, recurse) {
    recurse === void 0 && (recurse = !1);
    var tmp = fetch2(what, where, recurse);
    tmp && (obj[prop] = tmp);
  }
  function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
  }
  function parseFeed(feed, options) {
    options === void 0 && (options = {xmlMode: !0});
    var handler = new FeedHandler(options);
    return new Parser_1.Parser(handler, options).end(feed), handler.feed;
  }
  exports.parseFeed = parseFeed;
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/index.js
var require_lib6 = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), Object.defineProperty(o2, k22, {enumerable: !0, get: function() {
      return m2[k2];
    }});
  } : function(o2, m2, k2, k22) {
    k22 === void 0 && (k22 = k2), o2[k22] = m2[k2];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", {enumerable: !0, value: v2});
  } : function(o2, v2) {
    o2.default = v2;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k2 in mod)
        k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2) && __createBinding(result, mod, k2);
    return __setModuleDefault(result, mod), result;
  }, __exportStar2 = exports && exports.__exportStar || function(m2, exports2) {
    for (var p2 in m2)
      p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2) && __createBinding(exports2, m2, p2);
  }, __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
  var Parser_1 = require_Parser();
  Object.defineProperty(exports, "Parser", {enumerable: !0, get: function() {
    return Parser_1.Parser;
  }});
  var domhandler_1 = require_lib();
  Object.defineProperty(exports, "DomHandler", {enumerable: !0, get: function() {
    return domhandler_1.DomHandler;
  }});
  Object.defineProperty(exports, "DefaultHandler", {enumerable: !0, get: function() {
    return domhandler_1.DomHandler;
  }});
  function parseDocument2(data, options) {
    var handler = new domhandler_1.DomHandler(void 0, options);
    return new Parser_1.Parser(handler, options).end(data), handler.root;
  }
  exports.parseDocument = parseDocument2;
  function parseDOM(data, options) {
    return parseDocument2(data, options).children;
  }
  exports.parseDOM = parseDOM;
  function createDomStream(cb, options, elementCb) {
    var handler = new domhandler_1.DomHandler(cb, options, elementCb);
    return new Parser_1.Parser(handler, options);
  }
  exports.createDomStream = createDomStream;
  var Tokenizer_1 = require_Tokenizer();
  Object.defineProperty(exports, "Tokenizer", {enumerable: !0, get: function() {
    return __importDefault(Tokenizer_1).default;
  }});
  var ElementType = __importStar(require_lib2());
  exports.ElementType = ElementType;
  __exportStar2(require_FeedHandler(), exports);
  exports.DomUtils = __importStar(require_lib5());
  var FeedHandler_1 = require_FeedHandler();
  Object.defineProperty(exports, "RssHandler", {enumerable: !0, get: function() {
    return FeedHandler_1.FeedHandler;
  }});
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isBuffer.js
var require_isBuffer = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => isBuffer_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, Buffer2 = moduleExports ? root_default.Buffer : void 0, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, isBuffer3 = nativeIsBuffer || stubFalse_default, isBuffer_default = isBuffer3;
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nodeUtil.js
var require_nodeUtil = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => nodeUtil_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, freeProcess = moduleExports && freeGlobal_default.process, nodeUtil4 = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      return types || freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }(), nodeUtil_default = nodeUtil4;
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneBuffer.js
var require_cloneBuffer = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => cloneBuffer_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, Buffer2 = moduleExports ? root_default.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
  function cloneBuffer2(buffer, isDeep) {
    if (isDeep)
      return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    return buffer.copy(result), result;
  }
  var cloneBuffer_default = cloneBuffer2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/constants.js
var require_constants = __commonJS((exports, module) => {
  var SEMVER_SPEC_VERSION = "2.0.0", MAX_LENGTH = 256, MAX_SAFE_INTEGER3 = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_COMPONENT_LENGTH = 16;
  module.exports = {
    SEMVER_SPEC_VERSION,
    MAX_LENGTH,
    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER3,
    MAX_SAFE_COMPONENT_LENGTH
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/debug.js
var require_debug = __commonJS((exports, module) => {
  var debug = typeof process == "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  module.exports = debug;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/re.js
var require_re = __commonJS((exports, module) => {
  var {MAX_SAFE_COMPONENT_LENGTH} = require_constants(), debug = require_debug();
  exports = module.exports = {};
  var re = exports.re = [], src = exports.src = [], t = exports.t = {}, R = 0, createToken = (name, value, isGlobal) => {
    let index = R++;
    debug(index, value), t[name] = index, src[index] = value, re[index] = new RegExp(value, isGlobal ? "g" : void 0);
  };
  createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
  createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
  createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
  createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
  createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
  createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
  createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
  createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
  createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
  createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
  createToken("FULL", `^${src[t.FULLPLAIN]}$`);
  createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
  createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
  createToken("GTLT", "((?:<|>)?=?)");
  createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
  createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
  createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
  createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
  createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
  createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
  createToken("COERCERTL", src[t.COERCE], !0);
  createToken("LONETILDE", "(?:~>?)");
  createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, !0);
  exports.tildeTrimReplace = "$1~";
  createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
  createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("LONECARET", "(?:\\^)");
  createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, !0);
  exports.caretTrimReplace = "$1^";
  createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
  createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
  createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
  createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, !0);
  exports.comparatorTrimReplace = "$1$2$3";
  createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
  createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
  createToken("STAR", "(<|>)?=?\\s*\\*");
  createToken("GTE0", "^\\s*>=\\s*0.0.0\\s*$");
  createToken("GTE0PRE", "^\\s*>=\\s*0.0.0-0\\s*$");
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS((exports, module) => {
  var opts = ["includePrerelease", "loose", "rtl"], parseOptions = (options) => options ? typeof options != "object" ? {loose: !0} : opts.filter((k2) => options[k2]).reduce((options2, k2) => (options2[k2] = !0, options2), {}) : {};
  module.exports = parseOptions;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS((exports, module) => {
  var numeric = /^[0-9]+$/, compareIdentifiers = (a, b2) => {
    let anum = numeric.test(a), bnum = numeric.test(b2);
    return anum && bnum && (a = +a, b2 = +b2), a === b2 ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b2 ? -1 : 1;
  }, rcompareIdentifiers = (a, b2) => compareIdentifiers(b2, a);
  module.exports = {
    compareIdentifiers,
    rcompareIdentifiers
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/semver.js
var require_semver = __commonJS((exports, module) => {
  var debug = require_debug(), {MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER3} = require_constants(), {re, t} = require_re(), parseOptions = require_parse_options(), {compareIdentifiers} = require_identifiers(), SemVer = class {
    constructor(version, options) {
      if (options = parseOptions(options), version instanceof SemVer) {
        if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease)
          return version;
        version = version.version;
      } else if (typeof version != "string")
        throw new TypeError(`Invalid Version: ${version}`);
      if (version.length > MAX_LENGTH)
        throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
      debug("SemVer", version, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
      let m2 = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m2)
        throw new TypeError(`Invalid Version: ${version}`);
      if (this.raw = version, this.major = +m2[1], this.minor = +m2[2], this.patch = +m2[3], this.major > MAX_SAFE_INTEGER3 || this.major < 0)
        throw new TypeError("Invalid major version");
      if (this.minor > MAX_SAFE_INTEGER3 || this.minor < 0)
        throw new TypeError("Invalid minor version");
      if (this.patch > MAX_SAFE_INTEGER3 || this.patch < 0)
        throw new TypeError("Invalid patch version");
      m2[4] ? this.prerelease = m2[4].split(".").map((id) => {
        if (/^[0-9]+$/.test(id)) {
          let num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER3)
            return num;
        }
        return id;
      }) : this.prerelease = [], this.build = m2[5] ? m2[5].split(".") : [], this.format();
    }
    format() {
      return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer)) {
        if (typeof other == "string" && other === this.version)
          return 0;
        other = new SemVer(other, this.options);
      }
      return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
      if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
        return -1;
      if (!this.prerelease.length && other.prerelease.length)
        return 1;
      if (!this.prerelease.length && !other.prerelease.length)
        return 0;
      let i2 = 0;
      do {
        let a = this.prerelease[i2], b2 = other.prerelease[i2];
        if (debug("prerelease compare", i2, a, b2), a === void 0 && b2 === void 0)
          return 0;
        if (b2 === void 0)
          return 1;
        if (a === void 0)
          return -1;
        if (a === b2)
          continue;
        return compareIdentifiers(a, b2);
      } while (++i2);
    }
    compareBuild(other) {
      other instanceof SemVer || (other = new SemVer(other, this.options));
      let i2 = 0;
      do {
        let a = this.build[i2], b2 = other.build[i2];
        if (debug("prerelease compare", i2, a, b2), a === void 0 && b2 === void 0)
          return 0;
        if (b2 === void 0)
          return 1;
        if (a === void 0)
          return -1;
        if (a === b2)
          continue;
        return compareIdentifiers(a, b2);
      } while (++i2);
    }
    inc(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
          break;
        case "prerelease":
          this.prerelease.length === 0 && this.inc("patch", identifier), this.inc("pre", identifier);
          break;
        case "major":
          (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
          break;
        case "minor":
          (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
          break;
        case "patch":
          this.prerelease.length === 0 && this.patch++, this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0)
            this.prerelease = [0];
          else {
            let i2 = this.prerelease.length;
            for (; --i2 >= 0; )
              typeof this.prerelease[i2] == "number" && (this.prerelease[i2]++, i2 = -2);
            i2 === -1 && this.prerelease.push(0);
          }
          identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
          break;
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      return this.format(), this.raw = this.version, this;
    }
  };
  module.exports = SemVer;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/parse.js
var require_parse = __commonJS((exports, module) => {
  var {MAX_LENGTH} = require_constants(), {re, t} = require_re(), SemVer = require_semver(), parseOptions = require_parse_options(), parse = (version, options) => {
    if (options = parseOptions(options), version instanceof SemVer)
      return version;
    if (typeof version != "string" || version.length > MAX_LENGTH || !(options.loose ? re[t.LOOSE] : re[t.FULL]).test(version))
      return null;
    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  };
  module.exports = parse;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/valid.js
var require_valid = __commonJS((exports, module) => {
  var parse = require_parse(), valid = (version, options) => {
    let v2 = parse(version, options);
    return v2 ? v2.version : null;
  };
  module.exports = valid;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/clean.js
var require_clean = __commonJS((exports, module) => {
  var parse = require_parse(), clean2 = (version, options) => {
    let s2 = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s2 ? s2.version : null;
  };
  module.exports = clean2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/inc.js
var require_inc = __commonJS((exports, module) => {
  var SemVer = require_semver(), inc = (version, release, options, identifier) => {
    typeof options == "string" && (identifier = options, options = void 0);
    try {
      return new SemVer(version, options).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  };
  module.exports = inc;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare.js
var require_compare = __commonJS((exports, module) => {
  var SemVer = require_semver(), compare = (a, b2, loose) => new SemVer(a, loose).compare(new SemVer(b2, loose));
  module.exports = compare;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/eq.js
var require_eq = __commonJS((exports, module) => {
  var compare = require_compare(), eq2 = (a, b2, loose) => compare(a, b2, loose) === 0;
  module.exports = eq2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/diff.js
var require_diff = __commonJS((exports, module) => {
  var parse = require_parse(), eq2 = require_eq(), diff = (version1, version2) => {
    if (eq2(version1, version2))
      return null;
    {
      let v1 = parse(version1), v2 = parse(version2), hasPre = v1.prerelease.length || v2.prerelease.length, prefix = hasPre ? "pre" : "", defaultResult = hasPre ? "prerelease" : "";
      for (let key in v1)
        if ((key === "major" || key === "minor" || key === "patch") && v1[key] !== v2[key])
          return prefix + key;
      return defaultResult;
    }
  };
  module.exports = diff;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/major.js
var require_major = __commonJS((exports, module) => {
  var SemVer = require_semver(), major = (a, loose) => new SemVer(a, loose).major;
  module.exports = major;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/minor.js
var require_minor = __commonJS((exports, module) => {
  var SemVer = require_semver(), minor = (a, loose) => new SemVer(a, loose).minor;
  module.exports = minor;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/patch.js
var require_patch = __commonJS((exports, module) => {
  var SemVer = require_semver(), patch = (a, loose) => new SemVer(a, loose).patch;
  module.exports = patch;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS((exports, module) => {
  var parse = require_parse(), prerelease = (version, options) => {
    let parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  module.exports = prerelease;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS((exports, module) => {
  var compare = require_compare(), rcompare = (a, b2, loose) => compare(b2, a, loose);
  module.exports = rcompare;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS((exports, module) => {
  var compare = require_compare(), compareLoose = (a, b2) => compare(a, b2, !0);
  module.exports = compareLoose;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS((exports, module) => {
  var SemVer = require_semver(), compareBuild = (a, b2, loose) => {
    let versionA = new SemVer(a, loose), versionB = new SemVer(b2, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  module.exports = compareBuild;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/sort.js
var require_sort = __commonJS((exports, module) => {
  var compareBuild = require_compare_build(), sort = (list, loose) => list.sort((a, b2) => compareBuild(a, b2, loose));
  module.exports = sort;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS((exports, module) => {
  var compareBuild = require_compare_build(), rsort = (list, loose) => list.sort((a, b2) => compareBuild(b2, a, loose));
  module.exports = rsort;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/gt.js
var require_gt = __commonJS((exports, module) => {
  var compare = require_compare(), gt = (a, b2, loose) => compare(a, b2, loose) > 0;
  module.exports = gt;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/lt.js
var require_lt = __commonJS((exports, module) => {
  var compare = require_compare(), lt = (a, b2, loose) => compare(a, b2, loose) < 0;
  module.exports = lt;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/neq.js
var require_neq = __commonJS((exports, module) => {
  var compare = require_compare(), neq = (a, b2, loose) => compare(a, b2, loose) !== 0;
  module.exports = neq;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/gte.js
var require_gte = __commonJS((exports, module) => {
  var compare = require_compare(), gte = (a, b2, loose) => compare(a, b2, loose) >= 0;
  module.exports = gte;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/lte.js
var require_lte = __commonJS((exports, module) => {
  var compare = require_compare(), lte = (a, b2, loose) => compare(a, b2, loose) <= 0;
  module.exports = lte;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS((exports, module) => {
  var eq2 = require_eq(), neq = require_neq(), gt = require_gt(), gte = require_gte(), lt = require_lt(), lte = require_lte(), cmp = (a, op, b2, loose) => {
    switch (op) {
      case "===":
        return typeof a == "object" && (a = a.version), typeof b2 == "object" && (b2 = b2.version), a === b2;
      case "!==":
        return typeof a == "object" && (a = a.version), typeof b2 == "object" && (b2 = b2.version), a !== b2;
      case "":
      case "=":
      case "==":
        return eq2(a, b2, loose);
      case "!=":
        return neq(a, b2, loose);
      case ">":
        return gt(a, b2, loose);
      case ">=":
        return gte(a, b2, loose);
      case "<":
        return lt(a, b2, loose);
      case "<=":
        return lte(a, b2, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  module.exports = cmp;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS((exports, module) => {
  var SemVer = require_semver(), parse = require_parse(), {re, t} = require_re(), coerce = (version, options) => {
    if (version instanceof SemVer)
      return version;
    if (typeof version == "number" && (version = String(version)), typeof version != "string")
      return null;
    options = options || {};
    let match = null;
    if (!options.rtl)
      match = version.match(re[t.COERCE]);
    else {
      let next;
      for (; (next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); )
        (!match || next.index + next[0].length !== match.index + match[0].length) && (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
      re[t.COERCERTL].lastIndex = -1;
    }
    return match === null ? null : parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
  };
  module.exports = coerce;
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js
var require_iterator = __commonJS((exports, module) => {
  "use strict";
  module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next)
        yield walker.value;
    };
  };
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js
var require_yallist = __commonJS((exports, module) => {
  "use strict";
  module.exports = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self2 = this;
    if (self2 instanceof Yallist || (self2 = new Yallist()), self2.tail = null, self2.head = null, self2.length = 0, list && typeof list.forEach == "function")
      list.forEach(function(item) {
        self2.push(item);
      });
    else if (arguments.length > 0)
      for (var i2 = 0, l = arguments.length; i2 < l; i2++)
        self2.push(arguments[i2]);
    return self2;
  }
  Yallist.prototype.removeNode = function(node) {
    if (node.list !== this)
      throw new Error("removing node which does not belong to this list");
    var next = node.next, prev = node.prev;
    return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
  };
  Yallist.prototype.unshiftNode = function(node) {
    if (node !== this.head) {
      node.list && node.list.removeNode(node);
      var head = this.head;
      node.list = this, node.next = head, head && (head.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
    }
  };
  Yallist.prototype.pushNode = function(node) {
    if (node !== this.tail) {
      node.list && node.list.removeNode(node);
      var tail = this.tail;
      node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
    }
  };
  Yallist.prototype.push = function() {
    for (var i2 = 0, l = arguments.length; i2 < l; i2++)
      push(this, arguments[i2]);
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i2 = 0, l = arguments.length; i2 < l; i2++)
      unshift(this, arguments[i2]);
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!!this.tail) {
      var res = this.tail.value;
      return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
    }
  };
  Yallist.prototype.shift = function() {
    if (!!this.head) {
      var res = this.head.value;
      return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
    }
  };
  Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i2 = 0; walker !== null; i2++)
      fn.call(thisp, walker.value, i2, this), walker = walker.next;
  };
  Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i2 = this.length - 1; walker !== null; i2--)
      fn.call(thisp, walker.value, i2, this), walker = walker.prev;
  };
  Yallist.prototype.get = function(n) {
    for (var i2 = 0, walker = this.head; walker !== null && i2 < n; i2++)
      walker = walker.next;
    if (i2 === n && walker !== null)
      return walker.value;
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i2 = 0, walker = this.tail; walker !== null && i2 < n; i2++)
      walker = walker.prev;
    if (i2 === n && walker !== null)
      return walker.value;
  };
  Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    for (var res = new Yallist(), walker = this.head; walker !== null; )
      res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
    return res;
  };
  Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var res = new Yallist(), walker = this.tail; walker !== null; )
      res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
    return res;
  };
  Yallist.prototype.reduce = function(fn, initial) {
    var acc, walker = this.head;
    if (arguments.length > 1)
      acc = initial;
    else if (this.head)
      walker = this.head.next, acc = this.head.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var i2 = 0; walker !== null; i2++)
      acc = fn(acc, walker.value, i2), walker = walker.next;
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc, walker = this.tail;
    if (arguments.length > 1)
      acc = initial;
    else if (this.tail)
      walker = this.tail.prev, acc = this.tail.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var i2 = this.length - 1; walker !== null; i2--)
      acc = fn(acc, walker.value, i2), walker = walker.prev;
    return acc;
  };
  Yallist.prototype.toArray = function() {
    for (var arr = new Array(this.length), i2 = 0, walker = this.head; walker !== null; i2++)
      arr[i2] = walker.value, walker = walker.next;
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    for (var arr = new Array(this.length), i2 = 0, walker = this.tail; walker !== null; i2++)
      arr[i2] = walker.value, walker = walker.prev;
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length, to < 0 && (to += this.length), from = from || 0, from < 0 && (from += this.length);
    var ret = new Yallist();
    if (to < from || to < 0)
      return ret;
    from < 0 && (from = 0), to > this.length && (to = this.length);
    for (var i2 = 0, walker = this.head; walker !== null && i2 < from; i2++)
      walker = walker.next;
    for (; walker !== null && i2 < to; i2++, walker = walker.next)
      ret.push(walker.value);
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length, to < 0 && (to += this.length), from = from || 0, from < 0 && (from += this.length);
    var ret = new Yallist();
    if (to < from || to < 0)
      return ret;
    from < 0 && (from = 0), to > this.length && (to = this.length);
    for (var i2 = this.length, walker = this.tail; walker !== null && i2 > to; i2--)
      walker = walker.prev;
    for (; walker !== null && i2 > from; i2--, walker = walker.prev)
      ret.push(walker.value);
    return ret;
  };
  Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
    for (var i2 = 0, walker = this.head; walker !== null && i2 < start; i2++)
      walker = walker.next;
    for (var ret = [], i2 = 0; walker && i2 < deleteCount; i2++)
      ret.push(walker.value), walker = this.removeNode(walker);
    walker === null && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
    for (var i2 = 0; i2 < nodes.length; i2++)
      walker = insert(this, walker, nodes[i2]);
    return ret;
  };
  Yallist.prototype.reverse = function() {
    for (var head = this.head, tail = this.tail, walker = head; walker !== null; walker = walker.prev) {
      var p2 = walker.prev;
      walker.prev = walker.next, walker.next = p2;
    }
    return this.head = tail, this.tail = head, this;
  };
  function insert(self2, node, value) {
    var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
    return inserted.next === null && (self2.tail = inserted), inserted.prev === null && (self2.head = inserted), self2.length++, inserted;
  }
  function push(self2, item) {
    self2.tail = new Node(item, self2.tail, null, self2), self2.head || (self2.head = self2.tail), self2.length++;
  }
  function unshift(self2, item) {
    self2.head = new Node(item, null, self2.head, self2), self2.tail || (self2.tail = self2.head), self2.length++;
  }
  function Node(value, prev, next, list) {
    if (!(this instanceof Node))
      return new Node(value, prev, next, list);
    this.list = list, this.value = value, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
  }
  try {
    require_iterator()(Yallist);
  } catch (er) {
  }
});

// node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS((exports, module) => {
  "use strict";
  var Yallist = require_yallist(), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1, LRUCache = class {
    constructor(options) {
      if (typeof options == "number" && (options = {max: options}), options || (options = {}), options.max && (typeof options.max != "number" || options.max < 0))
        throw new TypeError("max must be a non-negative number");
      let max = this[MAX] = options.max || Infinity, lc = options.length || naiveLength;
      if (this[LENGTH_CALCULATOR] = typeof lc != "function" ? naiveLength : lc, this[ALLOW_STALE] = options.stale || !1, options.maxAge && typeof options.maxAge != "number")
        throw new TypeError("maxAge must be a number");
      this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || !1, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || !1, this.reset();
    }
    set max(mL) {
      if (typeof mL != "number" || mL < 0)
        throw new TypeError("max must be a non-negative number");
      this[MAX] = mL || Infinity, trim(this);
    }
    get max() {
      return this[MAX];
    }
    set allowStale(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
      return this[ALLOW_STALE];
    }
    set maxAge(mA) {
      if (typeof mA != "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[MAX_AGE] = mA, trim(this);
    }
    get maxAge() {
      return this[MAX_AGE];
    }
    set lengthCalculator(lC) {
      typeof lC != "function" && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
      })), trim(this);
    }
    get lengthCalculator() {
      return this[LENGTH_CALCULATOR];
    }
    get length() {
      return this[LENGTH];
    }
    get itemCount() {
      return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].tail; walker !== null; ) {
        let prev = walker.prev;
        forEachStep(this, fn, walker, thisp), walker = prev;
      }
    }
    forEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].head; walker !== null; ) {
        let next = walker.next;
        forEachStep(this, fn, walker, thisp), walker = next;
      }
    }
    keys() {
      return this[LRU_LIST].toArray().map((k2) => k2.key);
    }
    values() {
      return this[LRU_LIST].toArray().map((k2) => k2.value);
    }
    reset() {
      this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
    }
    dump() {
      return this[LRU_LIST].map((hit) => isStale(this, hit) ? !1 : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter((h) => h);
    }
    dumpLru() {
      return this[LRU_LIST];
    }
    set(key, value, maxAge) {
      if (maxAge = maxAge || this[MAX_AGE], maxAge && typeof maxAge != "number")
        throw new TypeError("maxAge must be a number");
      let now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value, key);
      if (this[CACHE].has(key)) {
        if (len > this[MAX])
          return del(this, this[CACHE].get(key)), !1;
        let item = this[CACHE].get(key).value;
        return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), !0;
      }
      let hit = new Entry(key, value, len, now, maxAge);
      return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value), !1) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), !0);
    }
    has(key) {
      if (!this[CACHE].has(key))
        return !1;
      let hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
    get(key) {
      return get(this, key, !0);
    }
    peek(key) {
      return get(this, key, !1);
    }
    pop() {
      let node = this[LRU_LIST].tail;
      return node ? (del(this, node), node.value) : null;
    }
    del(key) {
      del(this, this[CACHE].get(key));
    }
    load(arr) {
      this.reset();
      let now = Date.now();
      for (let l = arr.length - 1; l >= 0; l--) {
        let hit = arr[l], expiresAt = hit.e || 0;
        if (expiresAt === 0)
          this.set(hit.k, hit.v);
        else {
          let maxAge = expiresAt - now;
          maxAge > 0 && this.set(hit.k, hit.v, maxAge);
        }
      }
    }
    prune() {
      this[CACHE].forEach((value, key) => get(this, key, !1));
    }
  }, get = (self2, key, doUse) => {
    let node = self2[CACHE].get(key);
    if (node) {
      let hit = node.value;
      if (isStale(self2, hit)) {
        if (del(self2, node), !self2[ALLOW_STALE])
          return;
      } else
        doUse && (self2[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self2[LRU_LIST].unshiftNode(node));
      return hit.value;
    }
  }, isStale = (self2, hit) => {
    if (!hit || !hit.maxAge && !self2[MAX_AGE])
      return !1;
    let diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
  }, trim = (self2) => {
    if (self2[LENGTH] > self2[MAX])
      for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
        let prev = walker.prev;
        del(self2, walker), walker = prev;
      }
  }, del = (self2, node) => {
    if (node) {
      let hit = node.value;
      self2[DISPOSE] && self2[DISPOSE](hit.key, hit.value), self2[LENGTH] -= hit.length, self2[CACHE].delete(hit.key), self2[LRU_LIST].removeNode(node);
    }
  }, Entry = class {
    constructor(key, value, length, now, maxAge) {
      this.key = key, this.value = value, this.length = length, this.now = now, this.maxAge = maxAge || 0;
    }
  }, forEachStep = (self2, fn, node, thisp) => {
    let hit = node.value;
    isStale(self2, hit) && (del(self2, node), self2[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self2);
  };
  module.exports = LRUCache;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/range.js
var require_range = __commonJS((exports, module) => {
  var Range = class {
    constructor(range, options) {
      if (options = parseOptions(options), range instanceof Range)
        return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
      if (range instanceof Comparator)
        return this.raw = range.value, this.set = [[range]], this.format(), this;
      if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range, this.set = range.split(/\s*\|\|\s*/).map((range2) => this.parseRange(range2.trim())).filter((c2) => c2.length), !this.set.length)
        throw new TypeError(`Invalid SemVer Range: ${range}`);
      if (this.set.length > 1) {
        let first = this.set[0];
        if (this.set = this.set.filter((c2) => !isNullSet(c2[0])), this.set.length === 0)
          this.set = [first];
        else if (this.set.length > 1) {
          for (let c2 of this.set)
            if (c2.length === 1 && isAny(c2[0])) {
              this.set = [c2];
              break;
            }
        }
      }
      this.format();
    }
    format() {
      return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
    }
    toString() {
      return this.range;
    }
    parseRange(range) {
      range = range.trim();
      let memoKey = `parseRange:${Object.keys(this.options).join(",")}:${range}`, cached = cache.get(memoKey);
      if (cached)
        return cached;
      let loose = this.options.loose, hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace(this.options.includePrerelease)), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace), debug("comparator trim", range, re[t.COMPARATORTRIM]), range = range.replace(re[t.TILDETRIM], tildeTrimReplace), range = range.replace(re[t.CARETTRIM], caretTrimReplace), range = range.split(/\s+/).join(" ");
      let compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options)).filter(this.options.loose ? (comp) => !!comp.match(compRe) : () => !0).map((comp) => new Comparator(comp, this.options)), l = rangeList.length, rangeMap = new Map();
      for (let comp of rangeList) {
        if (isNullSet(comp))
          return [comp];
        rangeMap.set(comp.value, comp);
      }
      rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
      let result = [...rangeMap.values()];
      return cache.set(memoKey, result), result;
    }
    intersects(range, options) {
      if (!(range instanceof Range))
        throw new TypeError("a Range is required");
      return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
    }
    test(version) {
      if (!version)
        return !1;
      if (typeof version == "string")
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return !1;
        }
      for (let i2 = 0; i2 < this.set.length; i2++)
        if (testSet(this.set[i2], version, this.options))
          return !0;
      return !1;
    }
  };
  module.exports = Range;
  var LRU = require_lru_cache(), cache = new LRU({max: 1e3}), parseOptions = require_parse_options(), Comparator = require_comparator(), debug = require_debug(), SemVer = require_semver(), {
    re,
    t,
    comparatorTrimReplace,
    tildeTrimReplace,
    caretTrimReplace
  } = require_re(), isNullSet = (c2) => c2.value === "<0.0.0-0", isAny = (c2) => c2.value === "", isSatisfiable = (comparators, options) => {
    let result = !0, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop();
    for (; result && remainingComparators.length; )
      result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
    return result;
  }, parseComparator = (comp, options) => (debug("comp", comp, options), comp = replaceCarets(comp, options), debug("caret", comp), comp = replaceTildes(comp, options), debug("tildes", comp), comp = replaceXRanges(comp, options), debug("xrange", comp), comp = replaceStars(comp, options), debug("stars", comp), comp), isX = (id) => !id || id.toLowerCase() === "x" || id === "*", replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((comp2) => replaceTilde(comp2, options)).join(" "), replaceTilde = (comp, options) => {
    let r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M2, m2, p2, pr) => {
      debug("tilde", comp, _, M2, m2, p2, pr);
      let ret;
      return isX(M2) ? ret = "" : isX(m2) ? ret = `>=${M2}.0.0 <${+M2 + 1}.0.0-0` : isX(p2) ? ret = `>=${M2}.${m2}.0 <${M2}.${+m2 + 1}.0-0` : pr ? (debug("replaceTilde pr", pr), ret = `>=${M2}.${m2}.${p2}-${pr} <${M2}.${+m2 + 1}.0-0`) : ret = `>=${M2}.${m2}.${p2} <${M2}.${+m2 + 1}.0-0`, debug("tilde return", ret), ret;
    });
  }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((comp2) => replaceCaret(comp2, options)).join(" "), replaceCaret = (comp, options) => {
    debug("caret", comp, options);
    let r = options.loose ? re[t.CARETLOOSE] : re[t.CARET], z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M2, m2, p2, pr) => {
      debug("caret", comp, _, M2, m2, p2, pr);
      let ret;
      return isX(M2) ? ret = "" : isX(m2) ? ret = `>=${M2}.0.0${z} <${+M2 + 1}.0.0-0` : isX(p2) ? M2 === "0" ? ret = `>=${M2}.${m2}.0${z} <${M2}.${+m2 + 1}.0-0` : ret = `>=${M2}.${m2}.0${z} <${+M2 + 1}.0.0-0` : pr ? (debug("replaceCaret pr", pr), M2 === "0" ? m2 === "0" ? ret = `>=${M2}.${m2}.${p2}-${pr} <${M2}.${m2}.${+p2 + 1}-0` : ret = `>=${M2}.${m2}.${p2}-${pr} <${M2}.${+m2 + 1}.0-0` : ret = `>=${M2}.${m2}.${p2}-${pr} <${+M2 + 1}.0.0-0`) : (debug("no pr"), M2 === "0" ? m2 === "0" ? ret = `>=${M2}.${m2}.${p2}${z} <${M2}.${m2}.${+p2 + 1}-0` : ret = `>=${M2}.${m2}.${p2}${z} <${M2}.${+m2 + 1}.0-0` : ret = `>=${M2}.${m2}.${p2} <${+M2 + 1}.0.0-0`), debug("caret return", ret), ret;
    });
  }, replaceXRanges = (comp, options) => (debug("replaceXRanges", comp, options), comp.split(/\s+/).map((comp2) => replaceXRange(comp2, options)).join(" ")), replaceXRange = (comp, options) => {
    comp = comp.trim();
    let r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M2, m2, p2, pr) => {
      debug("xRange", comp, ret, gtlt, M2, m2, p2, pr);
      let xM = isX(M2), xm = xM || isX(m2), xp = xm || isX(p2), anyX = xp;
      return gtlt === "=" && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? gtlt === ">" || gtlt === "<" ? ret = "<0.0.0-0" : ret = "*" : gtlt && anyX ? (xm && (m2 = 0), p2 = 0, gtlt === ">" ? (gtlt = ">=", xm ? (M2 = +M2 + 1, m2 = 0, p2 = 0) : (m2 = +m2 + 1, p2 = 0)) : gtlt === "<=" && (gtlt = "<", xm ? M2 = +M2 + 1 : m2 = +m2 + 1), gtlt === "<" && (pr = "-0"), ret = `${gtlt + M2}.${m2}.${p2}${pr}`) : xm ? ret = `>=${M2}.0.0${pr} <${+M2 + 1}.0.0-0` : xp && (ret = `>=${M2}.${m2}.0${pr} <${M2}.${+m2 + 1}.0-0`), debug("xRange return", ret), ret;
    });
  }, replaceStars = (comp, options) => (debug("replaceStars", comp, options), comp.trim().replace(re[t.STAR], "")), replaceGTE0 = (comp, options) => (debug("replaceGTE0", comp, options), comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => (isX(fM) ? from = "" : isX(fm) ? from = `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? from = `>=${from}` : from = `>=${from}${incPr ? "-0" : ""}`, isX(tM) ? to = "" : isX(tm) ? to = `<${+tM + 1}.0.0-0` : isX(tp) ? to = `<${tM}.${+tm + 1}.0-0` : tpr ? to = `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? to = `<${tM}.${tm}.${+tp + 1}-0` : to = `<=${to}`, `${from} ${to}`.trim()), testSet = (set, version, options) => {
    for (let i2 = 0; i2 < set.length; i2++)
      if (!set[i2].test(version))
        return !1;
    if (version.prerelease.length && !options.includePrerelease) {
      for (let i2 = 0; i2 < set.length; i2++)
        if (debug(set[i2].semver), set[i2].semver !== Comparator.ANY && set[i2].semver.prerelease.length > 0) {
          let allowed = set[i2].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch)
            return !0;
        }
      return !1;
    }
    return !0;
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS((exports, module) => {
  var ANY = Symbol("SemVer ANY"), Comparator = class {
    static get ANY() {
      return ANY;
    }
    constructor(comp, options) {
      if (options = parseOptions(options), comp instanceof Comparator) {
        if (comp.loose === !!options.loose)
          return comp;
        comp = comp.value;
      }
      debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
    }
    parse(comp) {
      let r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m2 = comp.match(r);
      if (!m2)
        throw new TypeError(`Invalid comparator: ${comp}`);
      this.operator = m2[1] !== void 0 ? m2[1] : "", this.operator === "=" && (this.operator = ""), m2[2] ? this.semver = new SemVer(m2[2], this.options.loose) : this.semver = ANY;
    }
    toString() {
      return this.value;
    }
    test(version) {
      if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY)
        return !0;
      if (typeof version == "string")
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return !1;
        }
      return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
      if (!(comp instanceof Comparator))
        throw new TypeError("a Comparator is required");
      if ((!options || typeof options != "object") && (options = {
        loose: !!options,
        includePrerelease: !1
      }), this.operator === "")
        return this.value === "" ? !0 : new Range(comp.value, options).test(this.value);
      if (comp.operator === "")
        return comp.value === "" ? !0 : new Range(this.value, options).test(comp.semver);
      let sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">"), sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<"), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<="), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    }
  };
  module.exports = Comparator;
  var parseOptions = require_parse_options(), {re, t} = require_re(), cmp = require_cmp(), debug = require_debug(), SemVer = require_semver(), Range = require_range();
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS((exports, module) => {
  var Range = require_range(), satisfies = (version, range, options) => {
    try {
      range = new Range(range, options);
    } catch (er) {
      return !1;
    }
    return range.test(version);
  };
  module.exports = satisfies;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS((exports, module) => {
  var Range = require_range(), toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c2) => c2.value).join(" ").trim().split(" "));
  module.exports = toComparators;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), maxSatisfying = (versions, range, options) => {
    let max = null, maxSV = null, rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    return versions.forEach((v2) => {
      rangeObj.test(v2) && (!max || maxSV.compare(v2) === -1) && (max = v2, maxSV = new SemVer(max, options));
    }), max;
  };
  module.exports = maxSatisfying;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), minSatisfying = (versions, range, options) => {
    let min = null, minSV = null, rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    return versions.forEach((v2) => {
      rangeObj.test(v2) && (!min || minSV.compare(v2) === 1) && (min = v2, minSV = new SemVer(min, options));
    }), min;
  };
  module.exports = minSatisfying;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), gt = require_gt(), minVersion = (range, loose) => {
    range = new Range(range, loose);
    let minver = new SemVer("0.0.0");
    if (range.test(minver) || (minver = new SemVer("0.0.0-0"), range.test(minver)))
      return minver;
    minver = null;
    for (let i2 = 0; i2 < range.set.length; ++i2) {
      let comparators = range.set[i2], setMin = null;
      comparators.forEach((comparator) => {
        let compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            compver.prerelease.length === 0 ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
          case "":
          case ">=":
            (!setMin || gt(compver, setMin)) && (setMin = compver);
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator.operator}`);
        }
      }), setMin && (!minver || gt(minver, setMin)) && (minver = setMin);
    }
    return minver && range.test(minver) ? minver : null;
  };
  module.exports = minVersion;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS((exports, module) => {
  var Range = require_range(), validRange = (range, options) => {
    try {
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  module.exports = validRange;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/outside.js
var require_outside = __commonJS((exports, module) => {
  var SemVer = require_semver(), Comparator = require_comparator(), {ANY} = Comparator, Range = require_range(), satisfies = require_satisfies(), gt = require_gt(), lt = require_lt(), lte = require_lte(), gte = require_gte(), outside = (version, range, hilo, options) => {
    version = new SemVer(version, options), range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
        break;
      case "<":
        gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options))
      return !1;
    for (let i2 = 0; i2 < range.set.length; ++i2) {
      let comparators = range.set[i2], high = null, low = null;
      if (comparators.forEach((comparator) => {
        comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
      }), high.operator === comp || high.operator === ecomp || (!low.operator || low.operator === comp) && ltefn(version, low.semver))
        return !1;
      if (low.operator === ecomp && ltfn(version, low.semver))
        return !1;
    }
    return !0;
  };
  module.exports = outside;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS((exports, module) => {
  var outside = require_outside(), gtr = (version, range, options) => outside(version, range, ">", options);
  module.exports = gtr;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS((exports, module) => {
  var outside = require_outside(), ltr = (version, range, options) => outside(version, range, "<", options);
  module.exports = ltr;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS((exports, module) => {
  var Range = require_range(), intersects = (r1, r2, options) => (r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2));
  module.exports = intersects;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS((exports, module) => {
  var satisfies = require_satisfies(), compare = require_compare();
  module.exports = (versions, range, options) => {
    let set = [], min = null, prev = null, v2 = versions.sort((a, b2) => compare(a, b2, options));
    for (let version of v2)
      satisfies(version, range, options) ? (prev = version, min || (min = version)) : (prev && set.push([min, prev]), prev = null, min = null);
    min && set.push([min, null]);
    let ranges = [];
    for (let [min2, max] of set)
      min2 === max ? ranges.push(min2) : !max && min2 === v2[0] ? ranges.push("*") : max ? min2 === v2[0] ? ranges.push(`<=${max}`) : ranges.push(`${min2} - ${max}`) : ranges.push(`>=${min2}`);
    let simplified = ranges.join(" || "), original = typeof range.raw == "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/subset.js
var require_subset = __commonJS((exports, module) => {
  var Range = require_range(), {ANY} = require_comparator(), satisfies = require_satisfies(), compare = require_compare(), subset = (sub, dom2, options) => {
    if (sub === dom2)
      return !0;
    sub = new Range(sub, options), dom2 = new Range(dom2, options);
    let sawNonNull = !1;
    OUTER:
      for (let simpleSub of sub.set) {
        for (let simpleDom of dom2.set) {
          let isSub = simpleSubset(simpleSub, simpleDom, options);
          if (sawNonNull = sawNonNull || isSub !== null, isSub)
            continue OUTER;
        }
        if (sawNonNull)
          return !1;
      }
    return !0;
  }, simpleSubset = (sub, dom2, options) => {
    if (sub === dom2)
      return !0;
    if (sub.length === 1 && sub[0].semver === ANY)
      return dom2.length === 1 && dom2[0].semver === ANY;
    let eqSet = new Set(), gt, lt;
    for (let c2 of sub)
      c2.operator === ">" || c2.operator === ">=" ? gt = higherGT(gt, c2, options) : c2.operator === "<" || c2.operator === "<=" ? lt = lowerLT(lt, c2, options) : eqSet.add(c2.semver);
    if (eqSet.size > 1)
      return null;
    let gtltComp;
    if (gt && lt) {
      if (gtltComp = compare(gt.semver, lt.semver, options), gtltComp > 0)
        return null;
      if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<="))
        return null;
    }
    for (let eq2 of eqSet) {
      if (gt && !satisfies(eq2, String(gt), options) || lt && !satisfies(eq2, String(lt), options))
        return null;
      for (let c2 of dom2)
        if (!satisfies(eq2, String(c2), options))
          return !1;
      return !0;
    }
    let higher, lower, hasDomLT, hasDomGT;
    for (let c2 of dom2) {
      if (hasDomGT = hasDomGT || c2.operator === ">" || c2.operator === ">=", hasDomLT = hasDomLT || c2.operator === "<" || c2.operator === "<=", gt) {
        if (c2.operator === ">" || c2.operator === ">=") {
          if (higher = higherGT(gt, c2, options), higher === c2 && higher !== gt)
            return !1;
        } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c2), options))
          return !1;
      }
      if (lt) {
        if (c2.operator === "<" || c2.operator === "<=") {
          if (lower = lowerLT(lt, c2, options), lower === c2 && lower !== lt)
            return !1;
        } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c2), options))
          return !1;
      }
      if (!c2.operator && (lt || gt) && gtltComp !== 0)
        return !1;
    }
    return !(gt && hasDomLT && !lt && gtltComp !== 0 || lt && hasDomGT && !gt && gtltComp !== 0);
  }, higherGT = (a, b2, options) => {
    if (!a)
      return b2;
    let comp = compare(a.semver, b2.semver, options);
    return comp > 0 ? a : comp < 0 || b2.operator === ">" && a.operator === ">=" ? b2 : a;
  }, lowerLT = (a, b2, options) => {
    if (!a)
      return b2;
    let comp = compare(a.semver, b2.semver, options);
    return comp < 0 ? a : comp > 0 || b2.operator === "<" && a.operator === "<=" ? b2 : a;
  };
  module.exports = subset;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/index.js
var require_semver2 = __commonJS((exports, module) => {
  var internalRe = require_re();
  module.exports = {
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: require_constants().SEMVER_SPEC_VERSION,
    SemVer: require_semver(),
    compareIdentifiers: require_identifiers().compareIdentifiers,
    rcompareIdentifiers: require_identifiers().rcompareIdentifiers,
    parse: require_parse(),
    valid: require_valid(),
    clean: require_clean(),
    inc: require_inc(),
    diff: require_diff(),
    major: require_major(),
    minor: require_minor(),
    patch: require_patch(),
    prerelease: require_prerelease(),
    compare: require_compare(),
    rcompare: require_rcompare(),
    compareLoose: require_compare_loose(),
    compareBuild: require_compare_build(),
    sort: require_sort(),
    rsort: require_rsort(),
    gt: require_gt(),
    lt: require_lt(),
    eq: require_eq(),
    neq: require_neq(),
    gte: require_gte(),
    lte: require_lte(),
    cmp: require_cmp(),
    coerce: require_coerce(),
    Comparator: require_comparator(),
    Range: require_range(),
    satisfies: require_satisfies(),
    toComparators: require_to_comparators(),
    maxSatisfying: require_max_satisfying(),
    minSatisfying: require_min_satisfying(),
    minVersion: require_min_version(),
    validRange: require_valid2(),
    outside: require_outside(),
    gtr: require_gtr(),
    ltr: require_ltr(),
    intersects: require_intersects(),
    simplifyRange: require_simplify(),
    subset: require_subset()
  };
});

// src/_dev_/IdleWorker.jsurl
var IdleWorker_default = "/_dev_/IdleWorker.YLCL7MCV.jsurl";

// src/lib/launchIdleWorker.ts
typeof SharedWorker != "undefined" && !globalThis.IDLE_WORKER && (globalThis.IDLE_WORKER = new SharedWorker(IdleWorker_default, {
  type: "module",
  name: "IdleWorker"
}), console.log("Launch idle worker"));

// node_modules/.pnpm/idb@6.0.0/node_modules/idb/build/esm/wrap-idb-value.js
var instanceOfAny = (object, constructors) => constructors.some((c2) => object instanceof c2), idbProxyableTypes, cursorAdvanceMethods;
function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
var cursorRequestMap = new WeakMap(), transactionDoneMap = new WeakMap(), transactionStoreNamesMap = new WeakMap(), transformCache = new WeakMap(), reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
  let promise = new Promise((resolve, reject) => {
    let unlisten = () => {
      request.removeEventListener("success", success), request.removeEventListener("error", error);
    }, success = () => {
      resolve(wrap(request.result)), unlisten();
    }, error = () => {
      reject(request.error), unlisten();
    };
    request.addEventListener("success", success), request.addEventListener("error", error);
  });
  return promise.then((value) => {
    value instanceof IDBCursor && cursorRequestMap.set(value, request);
  }).catch(() => {
  }), reverseTransformCache.set(promise, request), promise;
}
function cacheDonePromiseForTransaction(tx) {
  if (transactionDoneMap.has(tx))
    return;
  let done = new Promise((resolve, reject) => {
    let unlisten = () => {
      tx.removeEventListener("complete", complete), tx.removeEventListener("error", error), tx.removeEventListener("abort", error);
    }, complete = () => {
      resolve(), unlisten();
    }, error = () => {
      reject(tx.error || new DOMException("AbortError", "AbortError")), unlisten();
    };
    tx.addEventListener("complete", complete), tx.addEventListener("error", error), tx.addEventListener("abort", error);
  });
  transactionDoneMap.set(tx, done);
}
var idbProxyTraps = {
  get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      if (prop === "done")
        return transactionDoneMap.get(target);
      if (prop === "objectStoreNames")
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      if (prop === "store")
        return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
    }
    return wrap(target[prop]);
  },
  set(target, prop, value) {
    return target[prop] = value, !0;
  },
  has(target, prop) {
    return target instanceof IDBTransaction && (prop === "done" || prop === "store") ? !0 : prop in target;
  }
};
function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
  return func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype) ? function(storeNames, ...args) {
    let tx = func.call(unwrap(this), storeNames, ...args);
    return transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]), wrap(tx);
  } : getCursorAdvanceMethods().includes(func) ? function(...args) {
    return func.apply(unwrap(this), args), wrap(cursorRequestMap.get(this));
  } : function(...args) {
    return wrap(func.apply(unwrap(this), args));
  };
}
function transformCachableValue(value) {
  return typeof value == "function" ? wrapFunction(value) : (value instanceof IDBTransaction && cacheDonePromiseForTransaction(value), instanceOfAny(value, getIdbProxyableTypes()) ? new Proxy(value, idbProxyTraps) : value);
}
function wrap(value) {
  if (value instanceof IDBRequest)
    return promisifyRequest(value);
  if (transformCache.has(value))
    return transformCache.get(value);
  let newValue = transformCachableValue(value);
  return newValue !== value && (transformCache.set(value, newValue), reverseTransformCache.set(newValue, value)), newValue;
}
var unwrap = (value) => reverseTransformCache.get(value);

// node_modules/.pnpm/idb@6.0.0/node_modules/idb/build/esm/index.js
function openDB(name, version, {blocked, upgrade, blocking, terminated} = {}) {
  let request = indexedDB.open(name, version), openPromise = wrap(request);
  return upgrade && request.addEventListener("upgradeneeded", (event) => {
    upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));
  }), blocked && request.addEventListener("blocked", () => blocked()), openPromise.then((db) => {
    terminated && db.addEventListener("close", () => terminated()), blocking && db.addEventListener("versionchange", () => blocking());
  }).catch(() => {
  }), openPromise;
}
var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"], writeMethods = ["put", "add", "delete", "clear"], cachedMethods = new Map();
function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop == "string"))
    return;
  if (cachedMethods.get(prop))
    return cachedMethods.get(prop);
  let targetFuncName = prop.replace(/FromIndex$/, ""), useIndex = prop !== targetFuncName, isWrite = writeMethods.includes(targetFuncName);
  if (!(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName)))
    return;
  let method = async function(storeName, ...args) {
    let tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly"), target2 = tx.store;
    return useIndex && (target2 = target2.index(args.shift())), (await Promise.all([
      target2[targetFuncName](...args),
      isWrite && tx.done
    ]))[0];
  };
  return cachedMethods.set(prop, method), method;
}
replaceTraps((oldTraps) => ({
  ...oldTraps,
  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
}));

// src/lib/openDB.ts
async function openDB2() {
  return await openDB("handles", 8, {
    upgrade(database2, oldVersion, newVersion, transaction) {
      database2.objectStoreNames.contains("packages") || database2.createObjectStore("packages"), database2.objectStoreNames.contains("dirs") || database2.createObjectStore("dirs");
    }
  });
}

// src/_dev_/getPackageID.tsx
function getPackageID() {
  return location.origin.substring(location.protocol.length + "//".length, location.origin.indexOf("."));
}

// src/lib/StoredPackage.ts
var import_lite2 = __toModule(require_lite()), path6 = __toModule(require_path_browserify());

// src/lib/ErrorCode.tsx
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2[ErrorCode2.invalidPackageJSON = 0] = "invalidPackageJSON", ErrorCode2[ErrorCode2.emptyDir = 1] = "emptyDir", ErrorCode2[ErrorCode2.missingEntryFiles = 2] = "missingEntryFiles", ErrorCode2[ErrorCode2.missing = 3] = "missing", ErrorCode2[ErrorCode2.genericError = 4] = "genericError", ErrorCode2[ErrorCode2.errorFetchingPackageJSON = 5] = "errorFetchingPackageJSON", ErrorCode2[ErrorCode2.errorGettingPackageJSONFile = 6] = "errorGettingPackageJSONFile", ErrorCode2[ErrorCode2.parsingPackageJSON = 7] = "parsingPackageJSON", ErrorCode2[ErrorCode2.requirePermission = 8] = "requirePermission", ErrorCode2[ErrorCode2.noEntryPoints = 9] = "noEntryPoints", ErrorCode2[ErrorCode2.resolveFile = 10] = "resolveFile", ErrorCode2[ErrorCode2.fileNotFound = 11] = "fileNotFound", ErrorCode2[ErrorCode2.fileAccessDenied = 12] = "fileAccessDenied", ErrorCode2[ErrorCode2.buildFailed = 13] = "buildFailed", ErrorCode2[ErrorCode2.invalidTSConfig = 14] = "invalidTSConfig", ErrorCode2[ErrorCode2.routeNotFound = 15] = "routeNotFound", ErrorCode2[ErrorCode2.needsSetup = 16] = "needsSetup", ErrorCode2[ErrorCode2.needsConfig = 17] = "needsConfig", ErrorCode2[ErrorCode2.failedToResolveNPMPackage = 18] = "failedToResolveNPMPackage";
})(ErrorCode || (ErrorCode = {}));

// src/lib/ESBuildPackage.tsx
var import_node = __toModule(require_node()), esbuild = __toModule(require_browser()), import_htmlparser22 = __toModule(require_lib6()), import_lite = __toModule(require_lite()), import_path_browserify = __toModule(require_path_browserify());

// src/htmlGenerator.ts
var IDLE_WORKER_CODE = `


  if (globalThis.navigator.serviceWorker && !globalThis["REGISTERED_SERVICE_WORKER"]) {
    globalThis
      .navigator
      .serviceWorker
      .register("/service-worker.js", {scope: '/'})
      .then(function (registration) {})
      .catch(function (err) {});
    globalThis["REGISTERED_SERVICE_WORKER"] = true;
  }
`;

// src/lib/bootstrapper.ts
function bootstrap(sourceUrl) {
  return `
${IDLE_WORKER_CODE}

async function start() {
  try {
    const process = {
      env: {
        NODE_ENV: "development"
      }
    };

    globalThis.process = new Proxy(process, {
      enumerate: function (oTarget, sKey) {
        return [];
      },
      ownKeys: function (oTarget, sKey) {
        return [];
      },
    });

    const _exports = await import("${sourceUrl}");
    Object.assign(globalThis, _exports);
  } catch(exception) {
    const orig = exception;
    setTimeout(() => {

    }, 1);
    throw exception;
  }
}

await start();
  `;
}

// node_modules/.pnpm/svgj@1.0.4/node_modules/svgj/dist/index.mjs
var import_htmlparser2 = __toModule(require_lib6()), import_domelementtype = __toModule(require_lib2());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global, freeGlobal_default = freeGlobal;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self, root = freeGlobal_default || freeSelf || Function("return this")(), root_default = root;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol, Symbol_default = Symbol2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty, nativeObjectToString = objectProto.toString, symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = !0;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value);
  return unmasked && (isOwn ? value[symToStringTag] = tag : delete value[symToStringTag]), result;
}
var getRawTag_default = getRawTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype, nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]", undefinedTag = "[object Undefined]", symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  return value == null ? value === void 0 ? undefinedTag : nullTag : symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayMap.js
function arrayMap(array, iteratee) {
  for (var index = -1, length = array == null ? 0 : array.length, result = Array(length); ++index < length; )
    result[index] = iteratee(array[index], index, array);
  return result;
}
var arrayMap_default = arrayMap;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArray.js
var isArray = Array.isArray, isArray_default = isArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseToString.js
var INFINITY = 1 / 0, symbolProto = Symbol_default ? Symbol_default.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseToString(value) {
  if (typeof value == "string")
    return value;
  if (isArray_default(value))
    return arrayMap_default(value, baseToString) + "";
  if (isSymbol_default(value))
    return symbolToString ? symbolToString.call(value) : "";
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
var baseToString_default = baseToString;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value))
    return !1;
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"], coreJsData_default = coreJsData;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype, funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reIsHostCtor = /^\[object .+?Constructor\]$/, funcProto2 = Function.prototype, objectProto3 = Object.prototype, funcToString2 = funcProto2.toString, hasOwnProperty2 = objectProto3.hasOwnProperty, reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value))
    return !1;
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_WeakMap.js
var WeakMap2 = getNative_default(root_default, "WeakMap"), WeakMap_default = WeakMap2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseCreate.js
var objectCreate = Object.create, baseCreate = function() {
  function object() {
  }
  return function(proto) {
    if (!isObject_default(proto))
      return {};
    if (objectCreate)
      return objectCreate(proto);
    object.prototype = proto;
    var result = new object();
    return object.prototype = void 0, result;
  };
}(), baseCreate_default = baseCreate;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copyArray.js
function copyArray(source, array) {
  var index = -1, length = source.length;
  for (array || (array = Array(length)); ++index < length; )
    array[index] = source[index];
  return array;
}
var copyArray_default = copyArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_defineProperty.js
var defineProperty = function() {
  try {
    var func = getNative_default(Object, "defineProperty");
    return func({}, "", {}), func;
  } catch (e) {
  }
}(), defineProperty_default = defineProperty;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayEach.js
function arrayEach(array, iteratee) {
  for (var index = -1, length = array == null ? 0 : array.length; ++index < length && iteratee(array[index], index, array) !== !1; )
    ;
  return array;
}
var arrayEach_default = arrayEach;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isIndex.js
var MAX_SAFE_INTEGER = 9007199254740991, reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  return length = length ?? MAX_SAFE_INTEGER, !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
var isIndex_default = isIndex;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssignValue.js
function baseAssignValue(object, key, value) {
  key == "__proto__" && defineProperty_default ? defineProperty_default(object, key, {
    configurable: !0,
    enumerable: !0,
    value,
    writable: !0
  }) : object[key] = value;
}
var baseAssignValue_default = baseAssignValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_assignValue.js
var objectProto4 = Object.prototype, hasOwnProperty3 = objectProto4.hasOwnProperty;
function assignValue(object, key, value) {
  var objValue = object[key];
  (!(hasOwnProperty3.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) && baseAssignValue_default(object, key, value);
}
var assignValue_default = assignValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copyObject.js
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  for (var index = -1, length = props.length; ++index < length; ) {
    var key = props[index], newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
    newValue === void 0 && (newValue = source[key]), isNew ? baseAssignValue_default(object, key, newValue) : assignValue_default(object, key, newValue);
  }
  return object;
}
var copyObject_default = copyObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isLength.js
var MAX_SAFE_INTEGER2 = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
}
var isLength_default = isLength;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArrayLike.js
function isArrayLike(value) {
  return value != null && isLength_default(value.length) && !isFunction_default(value);
}
var isArrayLike_default = isArrayLike;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isPrototype.js
var objectProto5 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto5;
  return value === proto;
}
var isPrototype_default = isPrototype;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseTimes.js
function baseTimes(n, iteratee) {
  for (var index = -1, result = Array(n); ++index < n; )
    result[index] = iteratee(index);
  return result;
}
var baseTimes_default = baseTimes;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsArguments.js
var argsTag = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
}
var baseIsArguments_default = baseIsArguments;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArguments.js
var objectProto6 = Object.prototype, hasOwnProperty4 = objectProto6.hasOwnProperty, propertyIsEnumerable = objectProto6.propertyIsEnumerable, isArguments = baseIsArguments_default(function() {
  return arguments;
}()) ? baseIsArguments_default : function(value) {
  return isObjectLike_default(value) && hasOwnProperty4.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
}, isArguments_default = isArguments;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/stubFalse.js
function stubFalse() {
  return !1;
}
var stubFalse_default = stubFalse;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayLikeKeys.js
var import_isBuffer = __toModule(require_isBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsTypedArray.js
var argsTag2 = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]", typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = !0;
typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = !1;
function baseIsTypedArray(value) {
  return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
}
var baseIsTypedArray_default = baseIsTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isTypedArray.js
var import_nodeUtil = __toModule(require_nodeUtil()), nodeIsTypedArray = import_nodeUtil.default && import_nodeUtil.default.isTypedArray, isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default, isTypedArray_default = isTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayLikeKeys.js
var objectProto7 = Object.prototype, hasOwnProperty5 = objectProto7.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && (0, import_isBuffer.default)(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
  for (var key in value)
    (inherited || hasOwnProperty5.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex_default(key, length))) && result.push(key);
  return result;
}
var arrayLikeKeys_default = arrayLikeKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_overArg.js
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var overArg_default = overArg;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeKeys.js
var nativeKeys = overArg_default(Object.keys, Object), nativeKeys_default = nativeKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseKeys.js
var objectProto8 = Object.prototype, hasOwnProperty6 = objectProto8.hasOwnProperty;
function baseKeys(object) {
  if (!isPrototype_default(object))
    return nativeKeys_default(object);
  var result = [];
  for (var key in Object(object))
    hasOwnProperty6.call(object, key) && key != "constructor" && result.push(key);
  return result;
}
var baseKeys_default = baseKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/keys.js
function keys(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
}
var keys_default = keys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeKeysIn.js
function nativeKeysIn(object) {
  var result = [];
  if (object != null)
    for (var key in Object(object))
      result.push(key);
  return result;
}
var nativeKeysIn_default = nativeKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseKeysIn.js
var objectProto9 = Object.prototype, hasOwnProperty7 = objectProto9.hasOwnProperty;
function baseKeysIn(object) {
  if (!isObject_default(object))
    return nativeKeysIn_default(object);
  var isProto = isPrototype_default(object), result = [];
  for (var key in object)
    key == "constructor" && (isProto || !hasOwnProperty7.call(object, key)) || result.push(key);
  return result;
}
var baseKeysIn_default = baseKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/keysIn.js
function keysIn(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object, !0) : baseKeysIn_default(object);
}
var keysIn_default = keysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create"), nativeCreate_default = nativeCreate;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {}, this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  return this.size -= result ? 1 : 0, result;
}
var hashDelete_default = hashDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__", objectProto10 = Object.prototype, hasOwnProperty8 = objectProto10.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty8.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashHas.js
var objectProto11 = Object.prototype, hasOwnProperty9 = objectProto11.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty9.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  return this.size += this.has(key) ? 0 : 1, data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value, this;
}
var hashSet_default = hashSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype.delete = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [], this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  for (var length = array.length; length--; )
    if (eq_default(array[length][0], key))
      return length;
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype, splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0)
    return !1;
  var lastIndex = data.length - 1;
  return index == lastIndex ? data.pop() : splice.call(data, index, 1), --this.size, !0;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? (++this.size, data.push([key, value])) : data[index][1] = value, this;
}
var listCacheSet_default = listCacheSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype.delete = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map"), Map_default = Map2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0, this.__data__ = {
    hash: new Hash_default(),
    map: new (Map_default || ListCache_default)(),
    string: new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getMapData.js
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key).delete(key);
  return this.size -= result ? 1 : 0, result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  return data.set(key, value), this.size += data.size == size ? 0 : 1, this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype.delete = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/toString.js
function toString(value) {
  return value == null ? "" : baseToString_default(value);
}
var toString_default = toString;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayPush.js
function arrayPush(array, values) {
  for (var index = -1, length = values.length, offset = array.length; ++index < length; )
    array[offset + index] = values[index];
  return array;
}
var arrayPush_default = arrayPush;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getPrototype.js
var getPrototype = overArg_default(Object.getPrototypeOf, Object), getPrototype_default = getPrototype;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseSlice.js
function baseSlice(array, start, end) {
  var index = -1, length = array.length;
  start < 0 && (start = -start > length ? 0 : length + start), end = end > length ? length : end, end < 0 && (end += length), length = start > end ? 0 : end - start >>> 0, start >>>= 0;
  for (var result = Array(length); ++index < length; )
    result[index] = array[index + start];
  return result;
}
var baseSlice_default = baseSlice;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_castSlice.js
function castSlice(array, start, end) {
  var length = array.length;
  return end = end === void 0 ? length : end, !start && end >= length ? array : baseSlice_default(array, start, end);
}
var castSlice_default = castSlice;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hasUnicode.js
var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsVarRange = "\\ufe0e\\ufe0f", rsZWJ = "\\u200d", reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
var hasUnicode_default = hasUnicode;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_asciiToArray.js
function asciiToArray(string) {
  return string.split("");
}
var asciiToArray_default = asciiToArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_unicodeToArray.js
var rsAstralRange2 = "\\ud800-\\udfff", rsComboMarksRange2 = "\\u0300-\\u036f", reComboHalfMarksRange2 = "\\ufe20-\\ufe2f", rsComboSymbolsRange2 = "\\u20d0-\\u20ff", rsComboRange2 = rsComboMarksRange2 + reComboHalfMarksRange2 + rsComboSymbolsRange2, rsVarRange2 = "\\ufe0e\\ufe0f", rsAstral = "[" + rsAstralRange2 + "]", rsCombo = "[" + rsComboRange2 + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange2 + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsZWJ2 = "\\u200d", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange2 + "]?", rsOptJoin = "(?:" + rsZWJ2 + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")", reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}
var unicodeToArray_default = unicodeToArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stringToArray.js
function stringToArray(string) {
  return hasUnicode_default(string) ? unicodeToArray_default(string) : asciiToArray_default(string);
}
var stringToArray_default = stringToArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_createCaseFirst.js
function createCaseFirst(methodName) {
  return function(string) {
    string = toString_default(string);
    var strSymbols = hasUnicode_default(string) ? stringToArray_default(string) : void 0, chr = strSymbols ? strSymbols[0] : string.charAt(0), trailing = strSymbols ? castSlice_default(strSymbols, 1).join("") : string.slice(1);
    return chr[methodName]() + trailing;
  };
}
var createCaseFirst_default = createCaseFirst;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/upperFirst.js
var upperFirst = createCaseFirst_default("toUpperCase"), upperFirst_default = upperFirst;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/capitalize.js
function capitalize(string) {
  return upperFirst_default(toString_default(string).toLowerCase());
}
var capitalize_default = capitalize;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayReduce.js
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1, length = array == null ? 0 : array.length;
  for (initAccum && length && (accumulator = array[++index]); ++index < length; )
    accumulator = iteratee(accumulator, array[index], index, array);
  return accumulator;
}
var arrayReduce_default = arrayReduce;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_basePropertyOf.js
function basePropertyOf(object) {
  return function(key) {
    return object == null ? void 0 : object[key];
  };
}
var basePropertyOf_default = basePropertyOf;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_deburrLetter.js
var deburredLetters = {
  \u00C0: "A",
  \u00C1: "A",
  \u00C2: "A",
  \u00C3: "A",
  \u00C4: "A",
  \u00C5: "A",
  \u00E0: "a",
  \u00E1: "a",
  \u00E2: "a",
  \u00E3: "a",
  \u00E4: "a",
  \u00E5: "a",
  \u00C7: "C",
  \u00E7: "c",
  \u00D0: "D",
  \u00F0: "d",
  \u00C8: "E",
  \u00C9: "E",
  \u00CA: "E",
  \u00CB: "E",
  \u00E8: "e",
  \u00E9: "e",
  \u00EA: "e",
  \u00EB: "e",
  \u00CC: "I",
  \u00CD: "I",
  \u00CE: "I",
  \u00CF: "I",
  \u00EC: "i",
  \u00ED: "i",
  \u00EE: "i",
  \u00EF: "i",
  \u00D1: "N",
  \u00F1: "n",
  \u00D2: "O",
  \u00D3: "O",
  \u00D4: "O",
  \u00D5: "O",
  \u00D6: "O",
  \u00D8: "O",
  \u00F2: "o",
  \u00F3: "o",
  \u00F4: "o",
  \u00F5: "o",
  \u00F6: "o",
  \u00F8: "o",
  \u00D9: "U",
  \u00DA: "U",
  \u00DB: "U",
  \u00DC: "U",
  \u00F9: "u",
  \u00FA: "u",
  \u00FB: "u",
  \u00FC: "u",
  \u00DD: "Y",
  \u00FD: "y",
  \u00FF: "y",
  \u00C6: "Ae",
  \u00E6: "ae",
  \u00DE: "Th",
  \u00FE: "th",
  \u00DF: "ss",
  \u0100: "A",
  \u0102: "A",
  \u0104: "A",
  \u0101: "a",
  \u0103: "a",
  \u0105: "a",
  \u0106: "C",
  \u0108: "C",
  \u010A: "C",
  \u010C: "C",
  \u0107: "c",
  \u0109: "c",
  \u010B: "c",
  \u010D: "c",
  \u010E: "D",
  \u0110: "D",
  \u010F: "d",
  \u0111: "d",
  \u0112: "E",
  \u0114: "E",
  \u0116: "E",
  \u0118: "E",
  \u011A: "E",
  \u0113: "e",
  \u0115: "e",
  \u0117: "e",
  \u0119: "e",
  \u011B: "e",
  \u011C: "G",
  \u011E: "G",
  \u0120: "G",
  \u0122: "G",
  \u011D: "g",
  \u011F: "g",
  \u0121: "g",
  \u0123: "g",
  \u0124: "H",
  \u0126: "H",
  \u0125: "h",
  \u0127: "h",
  \u0128: "I",
  \u012A: "I",
  \u012C: "I",
  \u012E: "I",
  \u0130: "I",
  \u0129: "i",
  \u012B: "i",
  \u012D: "i",
  \u012F: "i",
  \u0131: "i",
  \u0134: "J",
  \u0135: "j",
  \u0136: "K",
  \u0137: "k",
  \u0138: "k",
  \u0139: "L",
  \u013B: "L",
  \u013D: "L",
  \u013F: "L",
  \u0141: "L",
  \u013A: "l",
  \u013C: "l",
  \u013E: "l",
  \u0140: "l",
  \u0142: "l",
  \u0143: "N",
  \u0145: "N",
  \u0147: "N",
  \u014A: "N",
  \u0144: "n",
  \u0146: "n",
  \u0148: "n",
  \u014B: "n",
  \u014C: "O",
  \u014E: "O",
  \u0150: "O",
  \u014D: "o",
  \u014F: "o",
  \u0151: "o",
  \u0154: "R",
  \u0156: "R",
  \u0158: "R",
  \u0155: "r",
  \u0157: "r",
  \u0159: "r",
  \u015A: "S",
  \u015C: "S",
  \u015E: "S",
  \u0160: "S",
  \u015B: "s",
  \u015D: "s",
  \u015F: "s",
  \u0161: "s",
  \u0162: "T",
  \u0164: "T",
  \u0166: "T",
  \u0163: "t",
  \u0165: "t",
  \u0167: "t",
  \u0168: "U",
  \u016A: "U",
  \u016C: "U",
  \u016E: "U",
  \u0170: "U",
  \u0172: "U",
  \u0169: "u",
  \u016B: "u",
  \u016D: "u",
  \u016F: "u",
  \u0171: "u",
  \u0173: "u",
  \u0174: "W",
  \u0175: "w",
  \u0176: "Y",
  \u0177: "y",
  \u0178: "Y",
  \u0179: "Z",
  \u017B: "Z",
  \u017D: "Z",
  \u017A: "z",
  \u017C: "z",
  \u017E: "z",
  \u0132: "IJ",
  \u0133: "ij",
  \u0152: "Oe",
  \u0153: "oe",
  \u0149: "'n",
  \u017F: "s"
}, deburrLetter = basePropertyOf_default(deburredLetters), deburrLetter_default = deburrLetter;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/deburr.js
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, rsComboMarksRange3 = "\\u0300-\\u036f", reComboHalfMarksRange3 = "\\ufe20-\\ufe2f", rsComboSymbolsRange3 = "\\u20d0-\\u20ff", rsComboRange3 = rsComboMarksRange3 + reComboHalfMarksRange3 + rsComboSymbolsRange3, rsCombo2 = "[" + rsComboRange3 + "]", reComboMark = RegExp(rsCombo2, "g");
function deburr(string) {
  return string = toString_default(string), string && string.replace(reLatin, deburrLetter_default).replace(reComboMark, "");
}
var deburr_default = deburr;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_asciiWords.js
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}
var asciiWords_default = asciiWords;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hasUnicodeWord.js
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}
var hasUnicodeWord_default = hasUnicodeWord;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_unicodeWords.js
var rsAstralRange3 = "\\ud800-\\udfff", rsComboMarksRange4 = "\\u0300-\\u036f", reComboHalfMarksRange4 = "\\ufe20-\\ufe2f", rsComboSymbolsRange4 = "\\u20d0-\\u20ff", rsComboRange4 = rsComboMarksRange4 + reComboHalfMarksRange4 + rsComboSymbolsRange4, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange3 = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange, rsApos = "['\u2019]", rsBreak = "[" + rsBreakRange + "]", rsCombo3 = "[" + rsComboRange4 + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange3 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz2 = "\\ud83c[\\udffb-\\udfff]", rsModifier2 = "(?:" + rsCombo3 + "|" + rsFitz2 + ")", rsNonAstral2 = "[^" + rsAstralRange3 + "]", rsRegional2 = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair2 = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ3 = "\\u200d", rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod2 = rsModifier2 + "?", rsOptVar2 = "[" + rsVarRange3 + "]?", rsOptJoin2 = "(?:" + rsZWJ3 + "(?:" + [rsNonAstral2, rsRegional2, rsSurrPair2].join("|") + ")" + rsOptVar2 + reOptMod2 + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq2 = rsOptVar2 + reOptMod2 + rsOptJoin2, rsEmoji = "(?:" + [rsDingbat, rsRegional2, rsSurrPair2].join("|") + ")" + rsSeq2, reUnicodeWord = RegExp([
  rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
  rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
  rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
  rsUpper + "+" + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join("|"), "g");
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}
var unicodeWords_default = unicodeWords;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/words.js
function words(string, pattern, guard) {
  return string = toString_default(string), pattern = guard ? void 0 : pattern, pattern === void 0 ? hasUnicodeWord_default(string) ? unicodeWords_default(string) : asciiWords_default(string) : string.match(pattern) || [];
}
var words_default = words;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_createCompounder.js
var rsApos2 = "['\u2019]", reApos = RegExp(rsApos2, "g");
function createCompounder(callback) {
  return function(string) {
    return arrayReduce_default(words_default(deburr_default(string).replace(reApos, "")), callback, "");
  };
}
var createCompounder_default = createCompounder;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/camelCase.js
var camelCase = createCompounder_default(function(result, word, index) {
  return word = word.toLowerCase(), result + (index ? capitalize_default(word) : word);
}), camelCase_default = camelCase;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackClear.js
function stackClear() {
  this.__data__ = new ListCache_default(), this.size = 0;
}
var stackClear_default = stackClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackDelete.js
function stackDelete(key) {
  var data = this.__data__, result = data.delete(key);
  return this.size = data.size, result;
}
var stackDelete_default = stackDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackGet.js
function stackGet(key) {
  return this.__data__.get(key);
}
var stackGet_default = stackGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackHas.js
function stackHas(key) {
  return this.__data__.has(key);
}
var stackHas_default = stackHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackSet.js
var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache_default) {
    var pairs = data.__data__;
    if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1)
      return pairs.push([key, value]), this.size = ++data.size, this;
    data = this.__data__ = new MapCache_default(pairs);
  }
  return data.set(key, value), this.size = data.size, this;
}
var stackSet_default = stackSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Stack.js
function Stack(entries) {
  var data = this.__data__ = new ListCache_default(entries);
  this.size = data.size;
}
Stack.prototype.clear = stackClear_default;
Stack.prototype.delete = stackDelete_default;
Stack.prototype.get = stackGet_default;
Stack.prototype.has = stackHas_default;
Stack.prototype.set = stackSet_default;
var Stack_default = Stack;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssign.js
function baseAssign(object, source) {
  return object && copyObject_default(source, keys_default(source), object);
}
var baseAssign_default = baseAssign;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssignIn.js
function baseAssignIn(object, source) {
  return object && copyObject_default(source, keysIn_default(source), object);
}
var baseAssignIn_default = baseAssignIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var import_cloneBuffer = __toModule(require_cloneBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayFilter.js
function arrayFilter(array, predicate) {
  for (var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = []; ++index < length; ) {
    var value = array[index];
    predicate(value, index, array) && (result[resIndex++] = value);
  }
  return result;
}
var arrayFilter_default = arrayFilter;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/stubArray.js
function stubArray() {
  return [];
}
var stubArray_default = stubArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getSymbols.js
var objectProto12 = Object.prototype, propertyIsEnumerable2 = objectProto12.propertyIsEnumerable, nativeGetSymbols = Object.getOwnPropertySymbols, getSymbols = nativeGetSymbols ? function(object) {
  return object == null ? [] : (object = Object(object), arrayFilter_default(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable2.call(object, symbol);
  }));
} : stubArray_default, getSymbols_default = getSymbols;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copySymbols.js
function copySymbols(source, object) {
  return copyObject_default(source, getSymbols_default(source), object);
}
var copySymbols_default = copySymbols;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getSymbolsIn.js
var nativeGetSymbols2 = Object.getOwnPropertySymbols, getSymbolsIn = nativeGetSymbols2 ? function(object) {
  for (var result = []; object; )
    arrayPush_default(result, getSymbols_default(object)), object = getPrototype_default(object);
  return result;
} : stubArray_default, getSymbolsIn_default = getSymbolsIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copySymbolsIn.js
function copySymbolsIn(source, object) {
  return copyObject_default(source, getSymbolsIn_default(source), object);
}
var copySymbolsIn_default = copySymbolsIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseGetAllKeys.js
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
}
var baseGetAllKeys_default = baseGetAllKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getAllKeys.js
function getAllKeys(object) {
  return baseGetAllKeys_default(object, keys_default, getSymbols_default);
}
var getAllKeys_default = getAllKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getAllKeysIn.js
function getAllKeysIn(object) {
  return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
}
var getAllKeysIn_default = getAllKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_DataView.js
var DataView = getNative_default(root_default, "DataView"), DataView_default = DataView;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Promise.js
var Promise2 = getNative_default(root_default, "Promise"), Promise_default = Promise2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Set.js
var Set2 = getNative_default(root_default, "Set"), Set_default = Set2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getTag.js
var mapTag2 = "[object Map]", objectTag2 = "[object Object]", promiseTag = "[object Promise]", setTag2 = "[object Set]", weakMapTag2 = "[object WeakMap]", dataViewTag2 = "[object DataView]", dataViewCtorString = toSource_default(DataView_default), mapCtorString = toSource_default(Map_default), promiseCtorString = toSource_default(Promise_default), setCtorString = toSource_default(Set_default), weakMapCtorString = toSource_default(WeakMap_default), getTag = baseGetTag_default;
(DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag2 || Map_default && getTag(new Map_default()) != mapTag2 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag2 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) && (getTag = function(value) {
  var result = baseGetTag_default(value), Ctor = result == objectTag2 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
  if (ctorString)
    switch (ctorString) {
      case dataViewCtorString:
        return dataViewTag2;
      case mapCtorString:
        return mapTag2;
      case promiseCtorString:
        return promiseTag;
      case setCtorString:
        return setTag2;
      case weakMapCtorString:
        return weakMapTag2;
    }
  return result;
});
var getTag_default = getTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneArray.js
var objectProto13 = Object.prototype, hasOwnProperty10 = objectProto13.hasOwnProperty;
function initCloneArray(array) {
  var length = array.length, result = new array.constructor(length);
  return length && typeof array[0] == "string" && hasOwnProperty10.call(array, "index") && (result.index = array.index, result.input = array.input), result;
}
var initCloneArray_default = initCloneArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Uint8Array.js
var Uint8Array2 = root_default.Uint8Array, Uint8Array_default = Uint8Array2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneArrayBuffer.js
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  return new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer)), result;
}
var cloneArrayBuffer_default = cloneArrayBuffer;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneDataView.js
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var cloneDataView_default = cloneDataView;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneRegExp.js
var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  return result.lastIndex = regexp.lastIndex, result;
}
var cloneRegExp_default = cloneRegExp;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneSymbol.js
var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0, symbolValueOf = symbolProto2 ? symbolProto2.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
var cloneSymbol_default = cloneSymbol;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneTypedArray.js
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var cloneTypedArray_default = cloneTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneByTag.js
var boolTag2 = "[object Boolean]", dateTag2 = "[object Date]", mapTag3 = "[object Map]", numberTag2 = "[object Number]", regexpTag2 = "[object RegExp]", setTag3 = "[object Set]", stringTag2 = "[object String]", symbolTag2 = "[object Symbol]", arrayBufferTag2 = "[object ArrayBuffer]", dataViewTag3 = "[object DataView]", float32Tag2 = "[object Float32Array]", float64Tag2 = "[object Float64Array]", int8Tag2 = "[object Int8Array]", int16Tag2 = "[object Int16Array]", int32Tag2 = "[object Int32Array]", uint8Tag2 = "[object Uint8Array]", uint8ClampedTag2 = "[object Uint8ClampedArray]", uint16Tag2 = "[object Uint16Array]", uint32Tag2 = "[object Uint32Array]";
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag2:
      return cloneArrayBuffer_default(object);
    case boolTag2:
    case dateTag2:
      return new Ctor(+object);
    case dataViewTag3:
      return cloneDataView_default(object, isDeep);
    case float32Tag2:
    case float64Tag2:
    case int8Tag2:
    case int16Tag2:
    case int32Tag2:
    case uint8Tag2:
    case uint8ClampedTag2:
    case uint16Tag2:
    case uint32Tag2:
      return cloneTypedArray_default(object, isDeep);
    case mapTag3:
      return new Ctor();
    case numberTag2:
    case stringTag2:
      return new Ctor(object);
    case regexpTag2:
      return cloneRegExp_default(object);
    case setTag3:
      return new Ctor();
    case symbolTag2:
      return cloneSymbol_default(object);
  }
}
var initCloneByTag_default = initCloneByTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneObject.js
function initCloneObject(object) {
  return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
}
var initCloneObject_default = initCloneObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var import_isBuffer2 = __toModule(require_isBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsMap.js
var mapTag4 = "[object Map]";
function baseIsMap(value) {
  return isObjectLike_default(value) && getTag_default(value) == mapTag4;
}
var baseIsMap_default = baseIsMap;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isMap.js
var import_nodeUtil2 = __toModule(require_nodeUtil()), nodeIsMap = import_nodeUtil2.default && import_nodeUtil2.default.isMap, isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default, isMap_default = isMap;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsSet.js
var setTag4 = "[object Set]";
function baseIsSet(value) {
  return isObjectLike_default(value) && getTag_default(value) == setTag4;
}
var baseIsSet_default = baseIsSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isSet.js
var import_nodeUtil3 = __toModule(require_nodeUtil()), nodeIsSet = import_nodeUtil3.default && import_nodeUtil3.default.isSet, isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default, isSet_default = isSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4, argsTag3 = "[object Arguments]", arrayTag2 = "[object Array]", boolTag3 = "[object Boolean]", dateTag3 = "[object Date]", errorTag2 = "[object Error]", funcTag3 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag5 = "[object Map]", numberTag3 = "[object Number]", objectTag3 = "[object Object]", regexpTag3 = "[object RegExp]", setTag5 = "[object Set]", stringTag3 = "[object String]", symbolTag3 = "[object Symbol]", weakMapTag3 = "[object WeakMap]", arrayBufferTag3 = "[object ArrayBuffer]", dataViewTag4 = "[object DataView]", float32Tag3 = "[object Float32Array]", float64Tag3 = "[object Float64Array]", int8Tag3 = "[object Int8Array]", int16Tag3 = "[object Int16Array]", int32Tag3 = "[object Int32Array]", uint8Tag3 = "[object Uint8Array]", uint8ClampedTag3 = "[object Uint8ClampedArray]", uint16Tag3 = "[object Uint16Array]", uint32Tag3 = "[object Uint32Array]", cloneableTags = {};
cloneableTags[argsTag3] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag5] = cloneableTags[numberTag3] = cloneableTags[objectTag3] = cloneableTags[regexpTag3] = cloneableTags[setTag5] = cloneableTags[stringTag3] = cloneableTags[symbolTag3] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = !0;
cloneableTags[errorTag2] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = !1;
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
  if (customizer && (result = object ? customizer(value, key, object, stack) : customizer(value)), result !== void 0)
    return result;
  if (!isObject_default(value))
    return value;
  var isArr = isArray_default(value);
  if (isArr) {
    if (result = initCloneArray_default(value), !isDeep)
      return copyArray_default(value, result);
  } else {
    var tag = getTag_default(value), isFunc = tag == funcTag3 || tag == genTag2;
    if ((0, import_isBuffer2.default)(value))
      return (0, import_cloneBuffer.default)(value, isDeep);
    if (tag == objectTag3 || tag == argsTag3 || isFunc && !object) {
      if (result = isFlat || isFunc ? {} : initCloneObject_default(value), !isDeep)
        return isFlat ? copySymbolsIn_default(value, baseAssignIn_default(result, value)) : copySymbols_default(value, baseAssign_default(result, value));
    } else {
      if (!cloneableTags[tag])
        return object ? value : {};
      result = initCloneByTag_default(value, tag, isDeep);
    }
  }
  stack || (stack = new Stack_default());
  var stacked = stack.get(value);
  if (stacked)
    return stacked;
  stack.set(value, result), isSet_default(value) ? value.forEach(function(subValue) {
    result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
  }) : isMap_default(value) && value.forEach(function(subValue, key2) {
    result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  });
  var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default, props = isArr ? void 0 : keysFunc(value);
  return arrayEach_default(props || value, function(subValue, key2) {
    props && (key2 = subValue, subValue = value[key2]), assignValue_default(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  }), result;
}
var baseClone_default = baseClone;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/cloneDeep.js
var CLONE_DEEP_FLAG2 = 1, CLONE_SYMBOLS_FLAG2 = 4;
function cloneDeep(value) {
  return baseClone_default(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
}
var cloneDeep_default = cloneDeep;

// node_modules/.pnpm/svgj@1.0.4/node_modules/svgj/dist/index.mjs
var m = new Map([["altglyph", "altGlyph"], ["altglyphdef", "altGlyphDef"], ["altglyphitem", "altGlyphItem"], ["animatecolor", "animateColor"], ["animatemotion", "animateMotion"], ["animatetransform", "animateTransform"], ["clippath", "clipPath"], ["feblend", "feBlend"], ["fecolormatrix", "feColorMatrix"], ["fecomponenttransfer", "feComponentTransfer"], ["fecomposite", "feComposite"], ["feconvolvematrix", "feConvolveMatrix"], ["fediffuselighting", "feDiffuseLighting"], ["fedisplacementmap", "feDisplacementMap"], ["fedistantlight", "feDistantLight"], ["fedropshadow", "feDropShadow"], ["feflood", "feFlood"], ["fefunca", "feFuncA"], ["fefuncb", "feFuncB"], ["fefuncg", "feFuncG"], ["fefuncr", "feFuncR"], ["fegaussianblur", "feGaussianBlur"], ["feimage", "feImage"], ["femerge", "feMerge"], ["femergenode", "feMergeNode"], ["femorphology", "feMorphology"], ["feoffset", "feOffset"], ["fepointlight", "fePointLight"], ["fespecularlighting", "feSpecularLighting"], ["fespotlight", "feSpotLight"], ["fetile", "feTile"], ["feturbulence", "feTurbulence"], ["foreignobject", "foreignObject"], ["glyphref", "glyphRef"], ["lineargradient", "linearGradient"], ["radialgradient", "radialGradient"], ["textpath", "textPath"]]), c = new Map([["class", "className"], ["id", "id"], ["title", "title"], ["definitionurl", "definitionURL"], ["attributename", "attributeName"], ["attributetype", "attributeType"], ["basefrequency", "baseFrequency"], ["baseprofile", "baseProfile"], ["calcmode", "calcMode"], ["clippathunits", "clipPathUnits"], ["diffuseconstant", "diffuseConstant"], ["edgemode", "edgeMode"], ["filterunits", "filterUnits"], ["glyphref", "glyphRef"], ["gradienttransform", "gradientTransform"], ["gradientunits", "gradientUnits"], ["kernelmatrix", "kernelMatrix"], ["kernelunitlength", "kernelUnitLength"], ["keypoints", "keyPoints"], ["keysplines", "keySplines"], ["keytimes", "keyTimes"], ["lengthadjust", "lengthAdjust"], ["limitingconeangle", "limitingConeAngle"], ["markerheight", "markerHeight"], ["markerunits", "markerUnits"], ["markerwidth", "markerWidth"], ["maskcontentunits", "maskContentUnits"], ["maskunits", "maskUnits"], ["numoctaves", "numOctaves"], ["pathlength", "pathLength"], ["patterncontentunits", "patternContentUnits"], ["patterntransform", "patternTransform"], ["patternunits", "patternUnits"], ["pointsatx", "pointsAtX"], ["pointsaty", "pointsAtY"], ["pointsatz", "pointsAtZ"], ["preservealpha", "preserveAlpha"], ["preserveaspectratio", "preserveAspectRatio"], ["primitiveunits", "primitiveUnits"], ["refx", "refX"], ["refy", "refY"], ["repeatcount", "repeatCount"], ["repeatdur", "repeatDur"], ["requiredextensions", "requiredExtensions"], ["requiredfeatures", "requiredFeatures"], ["specularconstant", "specularConstant"], ["specularexponent", "specularExponent"], ["spreadmethod", "spreadMethod"], ["startoffset", "startOffset"], ["stddeviation", "stdDeviation"], ["stitchtiles", "stitchTiles"], ["surfacescale", "surfaceScale"], ["systemlanguage", "systemLanguage"], ["tablevalues", "tableValues"], ["targetx", "targetX"], ["targety", "targetY"], ["textlength", "textLength"], ["viewbox", "viewBox"], ["viewtarget", "viewTarget"], ["xchannelselector", "xChannelSelector"], ["ychannelselector", "yChannelSelector"], ["zoomandpan", "zoomAndPan"]]), L = new Set(["style", "script", "xmp", "iframe", "noembed", "noframes", "plaintext", "noscript"]);
function y(e, t) {
  if (!e)
    return;
  let r = "";
  for (let [n, a] of Object.entries(e))
    n = n.startsWith("data-") || n.startsWith("aria-") ? n : c.get(n) ?? camelCase_default(n), !t.removeAttrs[n] && (a ? r += ` ${n}={\`${a || ""}\`}` : r += " " + n);
  return r.trimStart();
}
var p = new Set(["area", "base", "basefont", "br", "col", "command", "embed", "frame", "hr", "img", "input", "isindex", "keygen", "link", "meta", "param", "source", "track", "wbr"]), s = Object.freeze({removeAttrs: Object.freeze({xmlns: !0}), addProps: Object.freeze({svg: Object.freeze({props: "..."})})});
function o(e, t = s) {
  let r = Array.isArray(e) || e.cheerio ? e : [e], n = "";
  for (let a = 0; a < r.length; a++)
    n += x(r[a], t);
  return n;
}
function x(e, t) {
  switch (e.type) {
    case import_domelementtype.default.Root:
      return o(e.children, t);
    case import_domelementtype.default.Directive:
    case import_domelementtype.default.Doctype:
      return N(e);
    case import_domelementtype.default.Comment:
      return C(e);
    case import_domelementtype.default.CDATA:
      return k(e);
    case import_domelementtype.default.Script:
    case import_domelementtype.default.Style:
    case import_domelementtype.default.Tag:
      return b(e, t);
    case import_domelementtype.default.Text:
      return v(e, t);
  }
}
function D(e) {
  let t = "";
  for (let [r, n] of Object.entries(e))
    n === "..." ? t += ` {...${r}}` : t += ` ${r}={${n}}`;
  return t.trimStart();
}
var O = new Set(["mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignObject", "desc", "title"]), S = new Set(["svg", "math"]);
function b(e, t) {
  t.xmlMode === "foreign" && (e.name = m.get(e.name) ?? e.name, e.parent && O.has(e.parent.name) && (t = {...t, xmlMode: !1})), !t.xmlMode && S.has(e.name) && (t = {...t, xmlMode: "foreign"});
  let r = `<${e.name}`, n = y(e.attribs, t);
  n && (r += ` ${n}`);
  let a = t.addProps[e.tagName.toLowerCase()];
  if (a && (r += D(a)), e.children.length === 0 && (t.xmlMode ? t.selfClosingTags !== !1 : t.selfClosingTags && p.has(e.name)))
    t.xmlMode || (r += " "), r += "/>";
  else {
    if (r += ">", e.children.length > 0 && (e.tagName === "script" || e.tagName === "iframe" || e.tagName === "style")) {
      r += "dangerouslySetInnerHTML={`";
      for (let l of e.children)
        r += (l.data ?? "").replace(/(\{|\}|`)/gm, "\\$1");
      r += "`}";
    } else
      e.children.length > 0 && (r += o(e.children, t));
    (t.xmlMode || !p.has(e.name)) && (r += `</${e.name}>`);
  }
  return r;
}
function N(e) {
  return "";
}
function v(e, t) {
  return e.data?.trim() === "" ? "" : `{\`${(e.data || "").replace(/(\{|\}|`)/gm, "\\$1")}\`}`;
}
function k(e) {
  return "";
}
function C(e) {
  return "";
}
function M(e) {
  let t = "{", r = "";
  for (let [n, a] of Object.entries(e))
    a === "..." ? r = n : a === " " ? t += ` ${n},` : t += ` ${n}: ${a}`;
  return r && (t += ` ...${r}`), t = t.trim() + " }", t;
}
var d = Object.freeze({props: "..."});
function T(e, t = "ReactComponent", r = "* as React", n = "React", a = t, l = d, g = s, f = !1) {
  let u = import_htmlparser2.default.parseDocument(e);
  return `import ${r} from "${n}";

${a === "default" ? "export default" : `export const ${a} =`} ${f ? "React.memo(" : ""}(${M(l)}) => (
  ${o(u, g)}
)${f ? ")" : ""};

${a !== "default" ? `let src = ${JSON.stringify(e)};
export default src;` : ""}
`;
}

// src/lib/getCache.tsx
var _cache;
async function getCache() {
  return _cache || (_cache = await globalThis.caches.open("bundles")), _cache;
}

// src/lib/ESBuildPackage.tsx
var REACT_IMPORT_REGEX = /['"]react['"]/, TSX_EXTENSIONS = [".tsx", ".js", ".jsx", ".mjs", ".ts"];
function getModuleName(path7) {
  if (path7[0] === "@") {
    let namespacedName = path7.indexOf("/") + 1, end = path7.indexOf("/", namespacedName);
    return end === -1 ? path7 : path7.substring(0, end);
  } else {
    let end = path7.indexOf("/");
    return end > -1 ? path7.substring(0, end) : path7;
  }
}
var DEFAULT_LOADERS = {
  ".jsx": "jsx",
  ".js": "jsx",
  ".ts": "tsx",
  ".tsx": "js",
  ".mjs": "js",
  ".cjs": "js",
  ".css": "css"
};
var jsHost = "cdn.skypack.dev/", cssHost = "cdn.jsdelivr.net/npm/";
var verbose = (...a) => {
};
var PackagerError = class extends Error {
  constructor(code, ...args) {
    super(...args);
    this.code = code;
  }
  static with(code, error) {
    let packager = new PackagerError(code);
    return Object.assign(packager, error), packager;
  }
}, PackagerPermissionError = class extends PackagerError {
}, _ESBuildPackage = class {
  constructor(root2, pkg) {
    this.extensionsToTry = [
      ".js",
      ".ts",
      ".tsx",
      ".jsx",
      ".css",
      ".png",
      ".jpg",
      ".webp"
    ];
    this.textExtensionsToTry = [".js", ".ts", ".tsx", ".jsx", ".css"];
    this.binaryExtensionsToTry = [".png", ".jpg", ".webp"];
    this.alwaysRequestPermissions = !1;
    this.resolveFile = (opts) => this._resolveFile(opts);
    this.loadFile = (opts) => this._loadFile(opts);
    this.loadRemote = (opts) => this._loadRemote(opts);
    this.loadSVGFile = (opts) => this._loadSVGFile(opts);
    this.root = root2, this.pkg = pkg;
  }
  async resolve(_path, importer, resolveDir, canRetry = !0) {
    _path.includes("//") && (_path = _path.replace(/\/+/gm, "/"));
    let fs = this.root;
    if (await fs.exists(_path) || importer && !_path.startsWith("/") && (_path = import_path_browserify.default.normalize(import_path_browserify.default.join(import_path_browserify.default.dirname(importer), "../", _path)), await fs.exists(_path)))
      return _path;
    let newPath = "";
    for (let ext of this.extensionsToTry)
      if (newPath = _path + ext, await fs.exists(newPath))
        return newPath;
    if (importer && importer.startsWith("/") && canRetry)
      return this.resolve(import_path_browserify.default.join(resolveDir, _path), importer, resolveDir, !1);
  }
  emitResolveError({
    message,
    location: location2,
    code,
    path: path7,
    exception,
    namespace,
    external
  }) {
    return {
      pluginName: _ESBuildPackage.pluginName,
      errors: [
        {
          text: message || exception?.toString() || "",
          detail: message && exception ? exception.toString() : "",
          location: location2 || void 0
        }
      ],
      path: path7,
      external,
      namespace,
      pluginData: {code}
    };
  }
  async saveResultToCache(result, route) {
    let outResults = new Array(result.outputFiles.length), i2 = 0, cache = await getCache();
    for (let file of result.outputFiles) {
      let mime = import_lite.default.getType(file.path), dest = globalThis.location.origin + file.path, headers = new Headers();
      if (mime && headers.set("Content-Type", mime.toString()), mime === "image/svg+xml") {
        let _file = await this.root.nativeFile(file.text);
        await cache.put(dest, new Response(_file, {
          headers,
          status: 200
        }));
      } else
        headers.set("Content-Length", file.contents.byteLength.toString(10)), await cache.put(dest, new Response(new Blob([file.contents], {
          type: mime
        }), {headers}));
      outResults[i2++] = dest;
    }
    return {entryPoints: outResults};
  }
  generateRelativePath() {
    return "/";
  }
  async build(route, signal) {
    this.relativePath = route.absWorkingDirectory;
    let tsconfigFile = await this.root.nativeFile("tsconfig.json"), tsconfig;
    if (tsconfigFile)
      try {
        tsconfig = await tsconfigFile.text();
      } catch (exception) {
        let err = PackagerError.with(ErrorCode.invalidTSConfig, exception);
        throw err.build = this, err;
      }
    let entryPoints = route.entryPoints, result, config = {
      ...this.pkg.esbuild,
      format: "esm",
      tsconfig,
      metafile: !0,
      entryPoints,
      publicPath: location.origin,
      plugins: [this.asPlugin()],
      write: !1,
      splitting: !0,
      sourcemap: "external",
      define: {
        ...this.pkg.esbuild.define,
        "process.env.NODE_ENV": '"production"'
      },
      loader: this.pkg.esbuild.loader ? this.pkg.esbuild.loader : {
        ".js": "jsx",
        ".ts": "tsx",
        ".tsx": "tsx",
        ".svg": "file",
        ".png": "file",
        ".gif": "file",
        ".webp": "file",
        ".jpg": "file",
        ".jpeg": "file",
        ".tiff": "file",
        ".bmp": "file",
        ".pdf": "file"
      },
      absWorkingDir: this.relativePath,
      nodePaths: ["/node_modules"],
      outdir: this.relativePath,
      bundle: !0,
      incremental: !0
    };
    try {
      result = await esbuild.build(config);
    } catch (e) {
      let err = PackagerError.with(ErrorCode.buildFailed, e);
      throw err.build = this, err;
    }
    let scripts = route.builder.scripts;
    for (let outputFile in result.metafile.outputs) {
      let file = result.metafile.outputs[outputFile];
      if (!result.metafile.outputs[outputFile].entryPoint || import_path_browserify.default.extname(outputFile) !== ".js")
        continue;
      let entryPoint = route.resolveFrom(file.entryPoint);
      if (scripts.has(entryPoint)) {
        let script = scripts.get(entryPoint), src = route.resolveEntryPoint(outputFile), text = new import_node.Text(bootstrap(src));
        script.attribs["data-src"] = src, script.attribs.type = "module", delete script.attribs.src;
        for (let i2 = 0; i2 < script.attributes.length; i2++)
          if (script.attributes[i2].name === "src") {
            script.attributes.splice(i2, 1);
            continue;
          }
        import_htmlparser22.DomUtils.appendChild(script, text);
      }
    }
    let html = route.renderToString(result, config);
    return {
      warnings: result.warnings,
      ...await this.saveResultToCache(result, route),
      html
    };
  }
  async getFileForLocation(location2) {
    return await this.root.nativeFile(location2.file);
  }
  async _resolveFile(opts) {
    if (opts.path.startsWith("data:"))
      return {
        path: opts.path,
        external: !0
      };
    let nodeModulesIndex = opts.path.indexOf("node_modules/");
    nodeModulesIndex > -1 && (opts.path = opts.path.substring(nodeModulesIndex + "node_modules/".length));
    let moduleName = getModuleName(opts.path), isHTTP = opts.path.startsWith("https://") || opts.path.startsWith("http://"), ext = import_path_browserify.default.extname(opts.path).substring(1), external = !ext || ext === "tsx" || ext === "jsx" || ext === "js" || ext === "ts";
    if ((opts.kind === "import-rule" || opts.kind === "url-token") && isHTTP)
      return {
        path: opts.path,
        external: !0,
        pluginData: {kind: opts.kind}
      };
    if (isHTTP && (opts.kind === "import-statement" || opts.kind === "dynamic-import"))
      return {
        path: opts.path,
        namespace: "file",
        external: !0,
        pluginData: {kind: opts.kind}
      };
    if (external && this.pkg.allDependencies.has(moduleName))
      return {
        path: `https://${jsHost}${this.pkg.allDependencies.get(moduleName)}${opts.path.substring(moduleName.length)}`,
        external,
        namespace: "remote"
      };
    if (!external && this.pkg.allDependencies.has(moduleName))
      return {
        path: `https://${cssHost}${this.pkg.allDependencies.get(moduleName)}${opts.path.substring(moduleName.length)}`,
        external,
        namespace: "remote"
      };
    if (opts.namespace === "remote" && external)
      return {
        path: `https://${jsHost}/${opts.path}`,
        namespace: "remote",
        external
      };
    if (opts.namespace === "remote")
      return {
        path: `https://${external ? jsHost : cssHost}/${opts.path}`,
        namespace: "remote",
        external
      };
    let resolvedPath = import_path_browserify.default.join(opts.resolveDir, import_path_browserify.default.normalize(opts.path));
    !import_path_browserify.default.isAbsolute(resolvedPath) && opts.importer ? resolvedPath = import_path_browserify.default.join(resolvedPath, opts.importer) : !import_path_browserify.default.isAbsolute(resolvedPath) && !opts.importer && (resolvedPath = import_path_browserify.default.join(resolvedPath, opts.importer));
    let doesExist = await this.root.exists(resolvedPath);
    if (!doesExist && ext === "") {
      let origPath = resolvedPath;
      for (let extension of TSX_EXTENSIONS)
        if (resolvedPath = origPath + extension, await this.root.exists(resolvedPath))
          return {
            path: resolvedPath,
            external: !1
          };
      if (await this.root.exists(origPath + ".svg"))
        return {
          path: resolvedPath,
          external: !1
        };
    }
    return doesExist ? {
      path: resolvedPath,
      external: !1
    } : {
      errors: [
        {
          text: `404 - File not found: ${opts.path}`
        }
      ]
    };
  }
  async _loadRemote(opts) {
    switch (console.log("[Remote]", opts), import_path_browserify.default.extname(opts.path)) {
      case ".png":
      case ".jpg":
      case ".jpeg":
      case ".gif":
      case ".webp":
      case ".mp4":
      case ".mov":
      case ".mkv":
      case ".tiff":
        return {
          contents: new Uint8Array(await (await caches.match(opts.path) || await fetch(opts.path, {
            cache: "default",
            credentials: "omit",
            keepalive: !0
          })).arrayBuffer()),
          loader: "file"
        };
      default:
        return {
          contents: new Uint8Array(await (await caches.match(opts.path) || await fetch(opts.path, {
            cache: "default",
            credentials: "omit",
            keepalive: !0
          })).arrayBuffer()),
          loader: DEFAULT_LOADERS[import_path_browserify.default.extname(opts.path)] || "tsx"
        };
    }
  }
  async _loadFile(opts) {
    if (verbose("[Load]", opts), opts.path.startsWith("data:"))
      return {
        contents: opts.path,
        loader: "base64"
      };
    let file = await this.root.nativeFile(opts.path), ext = import_path_browserify.default.extname(file.name), kind = opts.pluginData?.kind;
    switch (ext) {
      case ".svg":
        return kind === "dynamic-import" || kind === "import-statement" ? {
          contents: T(await file.text(), "ReactComponent", "* as React", `https://${jsHost}${this.pkg.allDependencies.get("react")}`),
          loader: "jsx"
        } : {
          contents: opts.path,
          loader: "file"
        };
      case "":
      case ".":
      case ".mjs":
      case ".js":
      case ".jsx":
      case ".ts":
      case ".tsx": {
        let contents = await file.text();
        return contents.includes("<") && (!REACT_IMPORT_REGEX.test(contents) || !contents.includes("React")) && (contents = `import * as React from "react";
${contents}`), {
          contents,
          loader: "default"
        };
        break;
      }
      case ".css":
      case ".json":
        return {
          contents: new Uint8Array(await file.arrayBuffer()),
          loader: "default"
        };
      default:
        return {
          contents: new Uint8Array(await file.arrayBuffer()),
          loader: "file"
        };
    }
  }
  async _loadSVGFile(opts) {
    return {
      contents: T(await this.root.readFileText(opts.path)),
      loader: "jsx"
    };
  }
  asPlugin() {
    let resolveFile = this.resolveFile, loadFile = this.loadFile, loadRemote = this.loadRemote, loadSVGFile = this.loadSVGFile;
    return {
      name: _ESBuildPackage.pluginName,
      setup(build2) {
        build2.onResolve({filter: /.*/}, resolveFile), build2.onLoad({filter: /.*/, namespace: "remote"}, loadRemote), build2.onLoad({filter: /.*/}, loadFile), build2.onLoad({filter: /\.svg$/, namespace: "svgj"}, loadSVGFile);
      }
    };
  }
}, ESBuildPackage = _ESBuildPackage;
ESBuildPackage.pluginName = "devserverless", ESBuildPackage.permissionMode = {mode: "read"};

// src/lib/PackageJSON.ts
var semver = __toModule(require_semver2()), path2 = __toModule(require_path_browserify()), AUTO_DEPENDENCIES = [
  "react",
  "react-dom",
  "prop-types",
  "object-assign",
  "react-bootstrap",
  "antd",
  "bootstrap",
  "axios"
], dependencyKeys = [
  "dependencies",
  "optionalDependencies",
  "peerDependencies",
  "devDependencies"
], eachIteratorValue = ["", ""], PackageJSON = class {
  constructor() {
    this.allDependencies = new Map();
  }
  *eachDependency() {
    for (let depKey of dependencyKeys) {
      let deps = this[depKey];
      if (deps)
        for (let key in deps)
          eachIteratorValue[0] = key, eachIteratorValue[1] = deps[key], yield eachIteratorValue;
    }
  }
  normalizeDependencies() {
    for (let depKey of dependencyKeys) {
      let deps = this[depKey];
      if (deps)
        for (let moduleId in deps) {
          let version = deps[moduleId];
          version = version.replace(/\^/gm, ""), semver.clean(version, !1) ? this.allDependencies.set(moduleId, `${moduleId}@${semver.clean(version, !1)}`) : this.allDependencies.set(moduleId, moduleId);
        }
    }
    for (let autodep of AUTO_DEPENDENCIES)
      this.allDependencies.has(autodep) || this.allDependencies.set(autodep, autodep);
  }
  static parse(json, ClassName = PackageJSON) {
    let pkg = new ClassName();
    return pkg.process(json, ClassName), pkg;
  }
  process(json, ClassName = PackageJSON) {
    let parsed = JSON.parse(json);
    return typeof parsed.handle != "undefined" && delete parsed.handle, parsed.run = ClassName.normalizeRun(parsed.run || {}), parsed.esbuild = ClassName.normalizeESBuild(parsed.esbuild || {}), Object.assign(this, parsed), this.normalizeDependencies(), this;
  }
  static normalizeRun(run) {
    return typeof run.router == "string" && run.router ? (run.router = run.router.toLowerCase().trim(), run.isRouterUnset = !1) : (run.isRouterUnset = !0, run.router = ""), run;
  }
  toJSON() {
    let json = cloneDeep_default(this);
    return delete json.run.isRouterUnset, delete json.allDependencies, json;
  }
  static normalizeESBuild(esbuild2) {
    return {};
  }
}, PackageJSONFile = class extends PackageJSON {
  constructor() {
    super();
  }
  static async fromHandle(handle) {
    let pkg = PackageJSONFile.parse(await (await handle.getFile()).text());
    return pkg.handle = handle, pkg;
  }
  get staticPath() {
    return path2.extname(this.run.router) ? path2.join(this.run.router, "../") : this.run.router;
  }
  async save() {
    let perm = await this.handle.createWritable({
      keepExistingData: !1
    }), json = this.toJSON();
    console.log(json);
    let text = JSON.stringify(json, null, 2), writer = perm.getWriter();
    await writer.write(text), await writer.close();
  }
  process(json, ClassName = PackageJSON) {
    return super.process(json, PackageJSONFile);
  }
  async reload() {
    this.process(await (await this.handle.getFile()).text(), PackageJSONFile);
  }
  static parse(json) {
    return super.parse(json, PackageJSONFile);
  }
  toJSON() {
    let json = super.toJSON();
    return delete json.handle, json;
  }
};

// node_modules/.pnpm/@jarred/htmlbuild@1.0.3/node_modules/@jarred/htmlbuild/index.mjs
var serializer = __toModule(require_lib4()), import_htmlparser23 = __toModule(require_lib6()), path3 = __toModule(require_path_browserify()), HTML2ESBuild = class {
  constructor() {
    this.scripts = new Map(), this.links = new Map();
  }
  generate(source, resolve) {
    let dom2 = (0, import_htmlparser23.parseDocument)(source);
    this.dom = dom2;
    let config = {
      bundle: !0,
      metafile: !0,
      entryPoints: []
    }, src = "";
    for (let script of import_htmlparser23.DomUtils.getElementsByTagName("script", dom2))
      src = script.attribs.src, src && !src.includes("://") && (src = resolve(src), this.scripts.set(src, script), config.entryPoints.push(src));
    for (let link of import_htmlparser23.DomUtils.getElementsByTagName("link", dom2))
      (!link.attribs.rel || link.attribs.rel === "stylesheet") && link.attribs.href && !link.attribs.href.includes("://") && (src = resolve(link.attribs.href), this.links.set(src, link), config.entryPoints.push(src));
    return this.config = config, config;
  }
  renderToString(build2, config = this.config, resolveFrom, resolveTo) {
    if (!build2.metafile)
      throw "Build is missing metafile.";
    let {links, scripts} = this, meta = build2.metafile, cssOutputs = new Map(), file;
    for (let output in meta.outputs)
      file = meta.outputs[output], path3.extname(output) === ".css" && cssOutputs.set(output, file);
    let stylesheetsToInsert = new Map(), prefix = config.publicPath ? config.publicPath : "";
    for (let output in meta.outputs) {
      if (file = meta.outputs[output], !file.entryPoint)
        continue;
      let entryPoint = resolveFrom(file.entryPoint);
      if (scripts.has(entryPoint)) {
        let ext = path3.extname(output), cssName = output.substring(0, output.length - ext.length) + ".css", script = scripts.get(entryPoint);
        cssOutputs.has(cssName) && (!cssOutputs.get(cssName).entryPoint || !links.has(cssOutputs.get(cssName).entryPoint)) && stylesheetsToInsert.set(cssName, script);
        let _output = resolveTo(output, script);
        _output && (script.attribs.src = _output);
      } else
        links.has(entryPoint) && (links.get(entryPoint).attribs.href = resolveTo(output));
    }
    for (let [stylesheetName, above] of stylesheetsToInsert.entries()) {
      var parser = new import_htmlparser23.Parser(new import_htmlparser23.DomHandler((err, elems) => {
        import_htmlparser23.DomUtils.prepend(above, elems[0]);
      }));
      parser.write(`<link rel="stylesheet" href="${resolveTo(stylesheetName)}" />`), parser.end();
    }
    return serializer.default(this.dom, {});
  }
};

// src/lib/Route.ts
var path4 = __toModule(require_path_browserify()), Route = class {
  constructor() {
    this.entryPoints = [];
    this.absWorkingDirectory = "";
    this.builder = new HTML2ESBuild();
    this.outDestination = "/";
    this.resolvedEntryPoints = new Map();
    this.resolveFrom = (..._path) => path4.join(this.absWorkingDirectory, ..._path);
    this.resolveTo = (_path, node) => {
      let out = path4.join(this.outDestination, _path);
      return path4.extname(out) === ".js" ? null : out;
    };
    this.resolveEntryPoint = (_path) => path4.join(this.outDestination, _path);
  }
  static from(root2, pathname) {
    let route = new Route();
    return route.root = root2, route.absWorkingDirectory = pathname.endsWith(".html") ? path4.join(pathname, "../") : pathname, route;
  }
  async generateConfig(file) {
    let {entryPoints} = this.builder.generate(await file.text(), this.resolveFrom);
    this.entryPoints = entryPoints;
  }
  renderToString(result, config) {
    return this.builder.renderToString(result, config, this.resolveFrom, this.resolveTo);
  }
}, FilesystemRouter = class {
  constructor(packageRoot, pagesRoot) {
    this.packageRoot = packageRoot, this.pagesRoot = pagesRoot;
  }
  async routeFor(file, pathname) {
    let route = Route.from(this.packageRoot, pathname);
    return await route.generateConfig(file), route;
  }
  async resolve(pathname) {
    let {pagesRoot: fs} = this, target = pathname, file;
    if (pathname.indexOf("//") > -1 && (pathname = pathname.replace(/\/+/g, "/")), pathname.endsWith("/"))
      return target = pathname.slice(0, -1) + ".html", file = await fs.nativeFile(target), file ? await this.routeFor(file, target) : (target = pathname + "index.html", file = await fs.nativeFile(target), file ? await this.routeFor(file, target) : null);
    if (pathname.endsWith(".html") || (target = pathname + ".html"), file = await fs.nativeFile(target), file)
      return await this.routeFor(file, target);
    if (target = path4.normalize(path4.join(pathname, "../")), target.startsWith(".."))
      return null;
    for (let _result of await fs.readdir(target)) {
      let result = _result;
      if (result.kind === "file" && result.name.startsWith("[") && result.name.endsWith("].html")) {
        file = result;
        break;
      }
    }
    return file ? await this.routeFor(file, target) : null;
  }
}, SinglePageAppRouter = class extends FilesystemRouter {
  constructor() {
    super(...arguments);
    this.destination = "";
  }
  async resolve(pathname) {
    let {pagesRoot: fs} = this;
    return await this.routeFor(await fs.nativeFile(this.destination), "/");
  }
}, RouterType;
(function(RouterType2) {
  RouterType2.unknown = "", RouterType2.spa = "spa", RouterType2.filesystem = "filesystem";
})(RouterType || (RouterType = {}));

// src/lib/router/fs-native.ts
var path5 = __toModule(require_path_browserify()), NativeFS = class {
  constructor(root2) {
    this.relativePath = "/";
    this.handleCache = new Map();
    if (!root2 || !(root2 instanceof FileSystemDirectoryHandle))
      throw new TypeError("root must be a FileSystemDirectoryHandle");
    this.root = root2;
  }
  async nativeFile(_path) {
    if (this.handleCache.has(_path))
      return await this.handleCache.get(_path).getFile();
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), await handle.getFile()) : null;
  }
  async fileHandleFor(_path) {
    if (this.handleCache.has(_path))
      return this.handleCache.get(_path);
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), handle) : null;
  }
  async exists(_path) {
    if (this.handleCache.has(_path))
      return !0;
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), !0) : !1;
  }
  async resolveFileHandle(__path, from = this.root) {
    let _path = __path;
    (!path5.isAbsolute(_path) || !_path.startsWith("/")) && (_path = path5.join("/", _path)), _path = path5.normalize(_path);
    let component = _path;
    for (; _path.includes("/") && _path.length > 1 && from; )
      try {
        if (_path = _path.startsWith("/") ? _path.substring(1) : _path, component = _path.substring(0, _path.indexOf("/")), _path.length - component.length > 0) {
          if (_path = _path.substring(component.length), !_path.includes("/")) {
            let hasMatch = !1;
            for await (let filename of from.keys())
              if (filename === _path) {
                hasMatch = !0;
                break;
              }
            return hasMatch ? await from.getFileHandle(_path) : null;
          }
          from = await from.getDirectoryHandle(component);
        } else {
          let hasMatch = !1;
          for await (let filename of from.keys())
            if (filename === component) {
              hasMatch = !0;
              break;
            }
          return hasMatch ? await from.getFileHandle(component) : null;
        }
      } catch (exception) {
        return console.error(__path, exception), null;
      }
    return null;
  }
  async writeFileText(__path, text, skipPermissionCheck = !1) {
    let dir = path5.join(__path, "../"), file = await (dir !== "/" && dir !== "" ? await this.resolveDirectoryHandle(dir, this.root) : this.root).getFileHandle(path5.basename(__path), {
      create: !0
    });
    !skipPermissionCheck && await !file.queryPermission({mode: "readwrite"}) && await file.requestPermission({mode: "readwrite"});
    let writer = (await file.createWritable()).getWriter();
    return await writer.write(text), await writer.close(), file;
  }
  async resolveDirectoryHandle(_path, from = this.root) {
    (!path5.isAbsolute(_path) || !_path.startsWith("/")) && (_path = path5.join("/", _path));
    let parts = _path.split("/");
    for (let i2 = 0; i2 < parts.length; i2++)
      !parts[i2] || (from = await from.getDirectoryHandle(parts[i2]));
    return from;
  }
  async *readdir(_path) {
    let dir = await this.resolveDirectoryHandle(_path);
    !dir || (yield* dir.values());
  }
  async readFile(_path, encoding = "binary") {
    switch (encoding) {
      case "utf8":
        return this.readFileText(_path);
      case "binary":
        return this.readFileBinary(_path);
    }
  }
  async readFileBinary(_path) {
    return await (await this.nativeFile(_path)).arrayBuffer();
  }
  async readFileText(_path) {
    return await (await this.nativeFile(_path)).text();
  }
  async createReadStream(_path) {
    return (await this.nativeFile(_path)).stream();
  }
  realpath(_path) {
    return path5.normalize(_path);
  }
};

// src/lib/StoredPackage.ts
var permissionMode = {mode: "read"}, StoredPackage = class {
  constructor() {
    this.routerType = RouterType.unknown;
  }
  toRecord() {
    return {
      id: this.id,
      lastBuild: this.lastBuild || null,
      handle: this.handle,
      staticHandle: this.staticHandle,
      routerType: this.routerType
    };
  }
  static fromRecord(record) {
    let stored = new StoredPackage();
    return Object.assign(stored, record), stored.root = record.handle ? new NativeFS(record.handle) : null, stored.static = record.staticHandle ? new NativeFS(record.staticHandle) : null, stored;
  }
  static async fromJSON(opts) {
    let pkg = new StoredPackage();
    return Object.assign(pkg, opts), pkg.root = opts.handle ? new NativeFS(opts.handle) : null, pkg.static = opts.staticHandle ? new NativeFS(opts.staticHandle) : null, pkg;
  }
  async resolveStaticHandle() {
    if (!this.pkg.run?.router)
      return;
    let staticPath = path6.extname(this.pkg.run.router) ? path6.join(this.pkg.run.router, "../") : this.pkg.run.router;
    this.staticHandle = await this.root.resolveDirectoryHandle(staticPath, this.root.root), this.static = new NativeFS(this.staticHandle);
  }
  async load() {
    await this.loadPackageJSON(), (!this.staticHandle || !this.static) && await this.resolveStaticHandle(), this.loadRouter();
  }
  loadRouter() {
    path6.extname(this.pkg.run?.router) === ".html" ? (this.routerType = RouterType.spa, this.router = new SinglePageAppRouter(this.root, this.static), this.router.destination = path6.basename(this.pkg.run.router)) : (this.routerType = RouterType.filesystem, this.router = new FilesystemRouter(this.root, this.static));
  }
  async loadPackageJSON() {
    let dir = this.root;
    if (await dir.root.queryPermission(permissionMode) !== "granted") {
      let error = new PackagerPermissionError(ErrorCode.requirePermission);
      throw error.directoryName = dir.root.name, error;
    }
    let packageJSONFileHandle;
    try {
      packageJSONFileHandle = await dir.fileHandleFor("package.json");
    } catch (exception) {
      throw PackagerError.with(ErrorCode.errorFetchingPackageJSON, exception);
    }
    this.pkg = await PackageJSONFile.fromHandle(packageJSONFileHandle);
  }
  loadConfig() {
  }
  normalizeURL(url) {
    return !url.startsWith("/") || !path6.isAbsolute(url) ? path6.normalize(path6.join("/" + url)) : path6.normalize(url);
  }
  async resolveStaticFile(url) {
    let file;
    if (file = await this.static.nativeFile(url), !file) {
      let headers2 = new Headers();
      return headers2.set("Cache-Control", "private"), headers2.set("Content-Type", "text/plain"), new Response(new Blob([`404 Not Found \u2013 ${url}
`]), {
        status: 404,
        headers: headers2
      });
    }
    let headers = new Headers(), mime = import_lite2.default.getType(file.name);
    return mime && headers.set("Content-Type", mime), typeof file.size == "number" && headers.set("Content-Length", file.size.toString()), new Response(file, {headers, status: 200});
  }
};

// src/lib/Database.ts
var Database = class {
  async load() {
    this.db || (this.db = await openDB2());
  }
  async savePackage(pkg) {
    await this.load(), await this.db.put("packages", pkg.toRecord(), pkg.id);
  }
  async saveDir(directory, pkgHandle) {
    await this.load(), await this.db.put("dirs", {directory, id: getPackageID(), pkgHandle}, getPackageID());
  }
  async loadDir() {
    return await this.load(), await this.db.get("dirs", getPackageID());
  }
  async loadPackage(id) {
    await this.load();
    let rec = await this.db.get("packages", id);
    return rec ? StoredPackage.fromRecord(rec) : null;
  }
};

// src/lib/requestPermission.tsx
var database = new Database();
database.load();
async function requestPermission(id) {
  await database.load(), await (await database.loadPackage(id)).handle.requestPermission({mode: "read"});
}

// src/_dev_/requestPermissionRunner.ts
window.addEventListener("DOMContentLoaded", () => {
  document.querySelector("#button").addEventListener("click", async () => {
    await requestPermission(getPackageID()), location.reload();
  });
});
//# sourceMappingURL=data:application/json;base64,
