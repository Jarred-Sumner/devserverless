const strongStore = new Map();
const morePorts = new Map();

globalThis.onconnect = function (e) {
  for (let port of e.ports) {
    port.addEventListener("message", (event) => {
      if (event.data && event.data instanceof MessagePort) {
        morePorts.set(Math.random().toString(10), event.data);
        event.data.onmessage = () => {
          console.log("yum");
          strongStore.set(Math.random().toString(10), event.data);
        }
        event.data.start();
      } else {
        console.log("yum");
        setTimeout(() => {
          console.log('hi');
        }, 1000000000)
        strongStore.set(Math.random().toString(10), event.data);
      }

    });

    port.start(); // Required when using addEventListener. Otherwise called implicitly by onmessage setter.
  }

  console.log("[worker] connected.");
};


function hi() {
  console.log("hi.");
  console.log("If you're wondering, what this is, its a workaround.");
  console.log(
    "You see, we need to keep a FileSystemHandle open or you will be inundanted with permission dialogs."
  );
  console.log(
    "So every chance we get, we spin up an idle worker which keeps the filesystem handle alive across same-origin page refreshes."
  );
  console.log(
    "All it does is print these messages once and then literally nothing. It is idle."
  );
  console.log("Thank you for reading. Have a nice day.");
}

hi();
