// Code generated by go-enum
// DO NOT EDIT!

package cache

import (
	"fmt"
)

const (
	// CacheTypeNone is a CacheType of type None.
	CacheTypeNone CacheType = iota
	// CacheTypeRemote is a CacheType of type Remote.
	CacheTypeRemote
	// CacheTypeLocal is a CacheType of type Local.
	CacheTypeLocal
)

const _CacheTypeName = "NoneRemoteLocal"

var _CacheTypeMap = map[CacheType]string{
	0: _CacheTypeName[0:4],
	1: _CacheTypeName[4:10],
	2: _CacheTypeName[10:15],
}

// String implements the Stringer interface.
func (x CacheType) String() string {
	if str, ok := _CacheTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("CacheType(%d)", x)
}

var _CacheTypeValue = map[string]CacheType{
	_CacheTypeName[0:4]:   0,
	_CacheTypeName[4:10]:  1,
	_CacheTypeName[10:15]: 2,
}

// ParseCacheType attempts to convert a string to a CacheType
func ParseCacheType(name string) (CacheType, error) {
	if x, ok := _CacheTypeValue[name]; ok {
		return x, nil
	}
	return CacheType(0), fmt.Errorf("%s is not a valid CacheType", name)
}

// MarshalText implements the text marshaller method
func (x CacheType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *CacheType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCacheType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
