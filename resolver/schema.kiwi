package lockfile;

smol PackageProvider {
  npm = 1;
  git = 2;
  https = 3;
  tgz = 4;
  disk = 5;
  other = 6;
  github = 7;
}

smol PackageVersionProtocol {
  github_bare = 1;
  github_dot_com = 2;
  github_tarball = 3;
  github_owner_repo = 4;
  http = 5;
  https = 6;
  https_tarball = 7;
  http_tarball = 8;
  git = 9;
  git_ssh = 10;
  pathlike = 11;
  default = 12;
}

smol VersionRange {
  exact = 1;
  tilda = 2;
  caret = 3;
  range = 4;
  unknown = 5;
  wildcard = 6;
}

smol PackageResolutionStatus {
  success = 1;
  missingName = 2;
  missingVersion = 3;
  notFound = 4;
  corruptPackage = 5;
  rateLimit = 6;
  invalidVersion = 7;
  internal = 8;
}

smol BareField {
  otherField = 1;
  moduleField = 2;
  browserField = 3;
  jsdelivrField = 4;
  mainField = 5;
  exportsField = 6;
  guessedField = 7;
}

struct ExportsManifest {
  alphanumeric[] bare;
  alphanumeric[] source;
  alphanumeric[] destination;
  BareField[] bareField;
}

struct ExportsManifestSingleton {
  alphanumeric bare;
  alphanumeric[] source;
  alphanumeric[] destination;
  BareField bareField;
}


struct Version {
  PackageVersionProtocol protocol;
  VersionRange versionRange;
  alphanumeric originalTag;
  alphanumeric tag;
}

alias timestamp = string;

struct RawDependencyList {
  uint count;
  alphanumeric[] names;
  string[] versions;
}

struct JavascriptPackageManifest {
  string hash;
  uint count;


  alphanumeric[] name;
  string[] version;
  uint[] dependencyIndex;

  PackageProvider provider;

  ExportsManifest exportsManifest;
  uint[] exportsManifestIndex;
  uint[] dependencies;
}

struct ResolvedJavascriptPackageTag {
  alphanumeric name;
  alphanumeric fromVersion;
  Version version;
}

struct JavascriptPackageManifestPartial {
  alphanumeric name;
  Version version;

  PackageProvider provider;
  PackageResolutionStatus status;
  ExportsManifestSingleton exportsManifest;

  alphanumeric[] dependencyNames;
  alphanumeric[] dependencyVersions;

  alphanumeric[] peerDependencyNames;
  alphanumeric[] peerDependencyVersions;

  alphanumeric[] devDependencyNames;
  alphanumeric[] devDependencyVersions;

  string[] scriptKeys;
  string[] scriptValues;

  string[] binKeys;
  string[] binValues;

  bool hasPostInstall;
}

message JavascriptPackageRequest {
  string clientVersion = 1;
  alphanumeric name = 2;
  bool enableDenylist = 3;
  JavascriptPackageManifestPartial manifest = 4;
}

enum ErrorCode {
  generic = 1;
  missingPackageName = 2;
  serverDown = 3;
  versionDoesntExit = 4;
}

message JavascriptPackageResponse {
  alphanumeric name = 1;
  JavascriptPackageManifest result = 2;
  ErrorCode errorCode = 3;
  string message = 4;
  string checksum = 5;
}
