// Code generated by go-enum
// DO NOT EDIT!

package installer

import (
	"fmt"
)

const (
	// InstallPackageStatusSuccess is a InstallPackageStatus of type Success.
	InstallPackageStatusSuccess InstallPackageStatus = iota
	// InstallPackageStatusFail is a InstallPackageStatus of type Fail.
	InstallPackageStatusFail
	// InstallPackageStatusWaiting is a InstallPackageStatus of type Waiting.
	InstallPackageStatusWaiting
	// InstallPackageStatusInProgress is a InstallPackageStatus of type InProgress.
	InstallPackageStatusInProgress
	// InstallPackageStatusSkip is a InstallPackageStatus of type Skip.
	InstallPackageStatusSkip
)

const _InstallPackageStatusName = "SuccessFailWaitingInProgressSkip"

var _InstallPackageStatusMap = map[InstallPackageStatus]string{
	0: _InstallPackageStatusName[0:7],
	1: _InstallPackageStatusName[7:11],
	2: _InstallPackageStatusName[11:18],
	3: _InstallPackageStatusName[18:28],
	4: _InstallPackageStatusName[28:32],
}

// String implements the Stringer interface.
func (x InstallPackageStatus) String() string {
	if str, ok := _InstallPackageStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InstallPackageStatus(%d)", x)
}

var _InstallPackageStatusValue = map[string]InstallPackageStatus{
	_InstallPackageStatusName[0:7]:   0,
	_InstallPackageStatusName[7:11]:  1,
	_InstallPackageStatusName[11:18]: 2,
	_InstallPackageStatusName[18:28]: 3,
	_InstallPackageStatusName[28:32]: 4,
}

// ParseInstallPackageStatus attempts to convert a string to a InstallPackageStatus
func ParseInstallPackageStatus(name string) (InstallPackageStatus, error) {
	if x, ok := _InstallPackageStatusValue[name]; ok {
		return x, nil
	}
	return InstallPackageStatus(0), fmt.Errorf("%s is not a valid InstallPackageStatus", name)
}

const (
	// InstallPackageStatusReasonWaiting is a InstallPackageStatusReason of type Waiting.
	InstallPackageStatusReasonWaiting InstallPackageStatusReason = iota
	// InstallPackageStatusReasonFailHTTPError404 is a InstallPackageStatusReason of type FailHTTPError404.
	InstallPackageStatusReasonFailHTTPError404
	// InstallPackageStatusReasonFailHTTPError4xx is a InstallPackageStatusReason of type FailHTTPError4xx.
	InstallPackageStatusReasonFailHTTPError4xx
	// InstallPackageStatusReasonFailHTTPError5xx is a InstallPackageStatusReason of type FailHTTPError5xx.
	InstallPackageStatusReasonFailHTTPError5xx
	// InstallPackageStatusReasonFailHTTPError is a InstallPackageStatusReason of type FailHTTPError.
	InstallPackageStatusReasonFailHTTPError
	// InstallPackageStatusReasonFailExtractionError is a InstallPackageStatusReason of type FailExtractionError.
	InstallPackageStatusReasonFailExtractionError
	// InstallPackageStatusReasonFailPermissionError is a InstallPackageStatusReason of type FailPermissionError.
	InstallPackageStatusReasonFailPermissionError
	// InstallPackageStatusReasonSuccessAlreadyExists is a InstallPackageStatusReason of type SuccessAlreadyExists.
	InstallPackageStatusReasonSuccessAlreadyExists
	// InstallPackageStatusReasonSuccessComplete is a InstallPackageStatusReason of type SuccessComplete.
	InstallPackageStatusReasonSuccessComplete
)

const _InstallPackageStatusReasonName = "WaitingFailHTTPError404FailHTTPError4xxFailHTTPError5xxFailHTTPErrorFailExtractionErrorFailPermissionErrorSuccessAlreadyExistsSuccessComplete"

var _InstallPackageStatusReasonMap = map[InstallPackageStatusReason]string{
	0: _InstallPackageStatusReasonName[0:7],
	1: _InstallPackageStatusReasonName[7:23],
	2: _InstallPackageStatusReasonName[23:39],
	3: _InstallPackageStatusReasonName[39:55],
	4: _InstallPackageStatusReasonName[55:68],
	5: _InstallPackageStatusReasonName[68:87],
	6: _InstallPackageStatusReasonName[87:106],
	7: _InstallPackageStatusReasonName[106:126],
	8: _InstallPackageStatusReasonName[126:141],
}

// String implements the Stringer interface.
func (x InstallPackageStatusReason) String() string {
	if str, ok := _InstallPackageStatusReasonMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InstallPackageStatusReason(%d)", x)
}

var _InstallPackageStatusReasonValue = map[string]InstallPackageStatusReason{
	_InstallPackageStatusReasonName[0:7]:     0,
	_InstallPackageStatusReasonName[7:23]:    1,
	_InstallPackageStatusReasonName[23:39]:   2,
	_InstallPackageStatusReasonName[39:55]:   3,
	_InstallPackageStatusReasonName[55:68]:   4,
	_InstallPackageStatusReasonName[68:87]:   5,
	_InstallPackageStatusReasonName[87:106]:  6,
	_InstallPackageStatusReasonName[106:126]: 7,
	_InstallPackageStatusReasonName[126:141]: 8,
}

// ParseInstallPackageStatusReason attempts to convert a string to a InstallPackageStatusReason
func ParseInstallPackageStatusReason(name string) (InstallPackageStatusReason, error) {
	if x, ok := _InstallPackageStatusReasonValue[name]; ok {
		return x, nil
	}
	return InstallPackageStatusReason(0), fmt.Errorf("%s is not a valid InstallPackageStatusReason", name)
}

const (
	// InstallPackageStepFetchQueued is a InstallPackageStep of type FetchQueued.
	InstallPackageStepFetchQueued InstallPackageStep = iota
	// InstallPackageStepFetching is a InstallPackageStep of type Fetching.
	InstallPackageStepFetching
	// InstallPackageStepCopyQueued is a InstallPackageStep of type CopyQueued.
	InstallPackageStepCopyQueued
	// InstallPackageStepCopying is a InstallPackageStep of type Copying.
	InstallPackageStepCopying
)

const _InstallPackageStepName = "FetchQueuedFetchingCopyQueuedCopying"

var _InstallPackageStepMap = map[InstallPackageStep]string{
	0: _InstallPackageStepName[0:11],
	1: _InstallPackageStepName[11:19],
	2: _InstallPackageStepName[19:29],
	3: _InstallPackageStepName[29:36],
}

// String implements the Stringer interface.
func (x InstallPackageStep) String() string {
	if str, ok := _InstallPackageStepMap[x]; ok {
		return str
	}
	return fmt.Sprintf("InstallPackageStep(%d)", x)
}

var _InstallPackageStepValue = map[string]InstallPackageStep{
	_InstallPackageStepName[0:11]:  0,
	_InstallPackageStepName[11:19]: 1,
	_InstallPackageStepName[19:29]: 2,
	_InstallPackageStepName[29:36]: 3,
}

// ParseInstallPackageStep attempts to convert a string to a InstallPackageStep
func ParseInstallPackageStep(name string) (InstallPackageStep, error) {
	if x, ok := _InstallPackageStepValue[name]; ok {
		return x, nil
	}
	return InstallPackageStep(0), fmt.Errorf("%s is not a valid InstallPackageStep", name)
}
