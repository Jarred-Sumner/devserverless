// Code generated by go-enum
// DO NOT EDIT!

package job

import (
	"fmt"
)

const (
	// StatusSuccess is a Status of type Success.
	StatusSuccess Status = iota
	// StatusError is a Status of type Error.
	StatusError
	// StatusQueued is a Status of type Queued.
	StatusQueued
	// StatusProgress is a Status of type Progress.
	StatusProgress
)

const _StatusName = "SuccessErrorQueuedProgress"

var _StatusMap = map[Status]string{
	0: _StatusName[0:7],
	1: _StatusName[7:12],
	2: _StatusName[12:18],
	3: _StatusName[18:26],
}

// String implements the Stringer interface.
func (x Status) String() string {
	if str, ok := _StatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Status(%d)", x)
}

var _StatusValue = map[string]Status{
	_StatusName[0:7]:   0,
	_StatusName[7:12]:  1,
	_StatusName[12:18]: 2,
	_StatusName[18:26]: 3,
}

// ParseStatus attempts to convert a string to a Status
func ParseStatus(name string) (Status, error) {
	if x, ok := _StatusValue[name]; ok {
		return x, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid Status", name)
}

// MarshalText implements the text marshaller method
func (x Status) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
