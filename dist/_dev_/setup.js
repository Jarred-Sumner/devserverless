var __create = Object.create, __defProp = Object.defineProperty, __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty, __getOwnPropNames = Object.getOwnPropertyNames, __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: !0});
var __commonJS = (callback, module) => () => (module || (module = {exports: {}}, callback(module.exports, module)), module.exports), __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: !0});
}, __exportStar = (target, module, desc) => {
  if (module && typeof module == "object" || typeof module == "function")
    for (let key of __getOwnPropNames(module))
      !__hasOwnProp.call(target, key) && key !== "default" && __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  return target;
}, __toModule = (module) => __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: !0} : {value: module, enumerable: !0})), module);

// node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js
var require_object_assign = __commonJS((exports, module) => {
  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  "use strict";
  var getOwnPropertySymbols = Object.getOwnPropertySymbols, hasOwnProperty11 = Object.prototype.hasOwnProperty, propIsEnumerable = Object.prototype.propertyIsEnumerable;
  function toObject(val) {
    if (val == null)
      throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(val);
  }
  function shouldUseNative() {
    try {
      if (!Object.assign)
        return !1;
      var test1 = new String("abc");
      if (test1[5] = "de", Object.getOwnPropertyNames(test1)[0] === "5")
        return !1;
      for (var test2 = {}, i = 0; i < 10; i++)
        test2["_" + String.fromCharCode(i)] = i;
      var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
        return test2[n];
      });
      if (order2.join("") !== "0123456789")
        return !1;
      var test3 = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(letter) {
        test3[letter] = letter;
      }), Object.keys(Object.assign({}, test3)).join("") === "abcdefghijklmnopqrst";
    } catch (err) {
      return !1;
    }
  }
  module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    for (var from, to = toObject(target), symbols, s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);
      for (var key in from)
        hasOwnProperty11.call(from, key) && (to[key] = from[key]);
      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);
        for (var i = 0; i < symbols.length; i++)
          propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
      }
    }
    return to;
  };
});

// node_modules/.pnpm/react@17.0.1/node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS((exports) => {
  /** @license React v17.0.1
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  var l = require_object_assign(), n = 60103, p = 60106;
  exports.Fragment = 60107;
  exports.StrictMode = 60108;
  exports.Profiler = 60114;
  var q = 60109, r = 60110, t = 60112;
  exports.Suspense = 60113;
  var u = 60115, v = 60116;
  typeof Symbol == "function" && Symbol.for && (w = Symbol.for, n = w("react.element"), p = w("react.portal"), exports.Fragment = w("react.fragment"), exports.StrictMode = w("react.strict_mode"), exports.Profiler = w("react.profiler"), q = w("react.provider"), r = w("react.context"), t = w("react.forward_ref"), exports.Suspense = w("react.suspense"), u = w("react.memo"), v = w("react.lazy"));
  var w, x = typeof Symbol == "function" && Symbol.iterator;
  function y(a) {
    return a === null || typeof a != "object" ? null : (a = x && a[x] || a["@@iterator"], typeof a == "function" ? a : null);
  }
  function z(a) {
    for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
      b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var A = {isMounted: function() {
    return !1;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  }}, B = {};
  function C(a, b, c) {
    this.props = a, this.context = b, this.refs = B, this.updater = c || A;
  }
  C.prototype.isReactComponent = {};
  C.prototype.setState = function(a, b) {
    if (typeof a != "object" && typeof a != "function" && a != null)
      throw Error(z(85));
    this.updater.enqueueSetState(this, a, b, "setState");
  };
  C.prototype.forceUpdate = function(a) {
    this.updater.enqueueForceUpdate(this, a, "forceUpdate");
  };
  function D() {
  }
  D.prototype = C.prototype;
  function E(a, b, c) {
    this.props = a, this.context = b, this.refs = B, this.updater = c || A;
  }
  var F = E.prototype = new D();
  F.constructor = E;
  l(F, C.prototype);
  F.isPureReactComponent = !0;
  var G = {current: null}, H = Object.prototype.hasOwnProperty, I = {key: !0, ref: !0, __self: !0, __source: !0};
  function J(a, b, c) {
    var e, d = {}, k = null, h = null;
    if (b != null)
      for (e in b.ref !== void 0 && (h = b.ref), b.key !== void 0 && (k = "" + b.key), b)
        H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
    var g = arguments.length - 2;
    if (g === 1)
      d.children = c;
    else if (1 < g) {
      for (var f = Array(g), m = 0; m < g; m++)
        f[m] = arguments[m + 2];
      d.children = f;
    }
    if (a && a.defaultProps)
      for (e in g = a.defaultProps, g)
        d[e] === void 0 && (d[e] = g[e]);
    return {$$typeof: n, type: a, key: k, ref: h, props: d, _owner: G.current};
  }
  function K(a, b) {
    return {$$typeof: n, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner};
  }
  function L(a) {
    return typeof a == "object" && a !== null && a.$$typeof === n;
  }
  function escape(a) {
    var b = {"=": "=0", ":": "=2"};
    return "$" + a.replace(/[=:]/g, function(a2) {
      return b[a2];
    });
  }
  var M = /\/+/g;
  function N(a, b) {
    return typeof a == "object" && a !== null && a.key != null ? escape("" + a.key) : b.toString(36);
  }
  function O(a, b, c, e, d) {
    var k = typeof a;
    (k === "undefined" || k === "boolean") && (a = null);
    var h = !1;
    if (a === null)
      h = !0;
    else
      switch (k) {
        case "string":
        case "number":
          h = !0;
          break;
        case "object":
          switch (a.$$typeof) {
            case n:
            case p:
              h = !0;
          }
      }
    if (h)
      return h = a, d = d(h), a = e === "" ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", a != null && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function(a2) {
        return a2;
      })) : d != null && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;
    if (h = 0, e = e === "" ? "." : e + ":", Array.isArray(a))
      for (var g = 0; g < a.length; g++) {
        k = a[g];
        var f = e + N(k, g);
        h += O(k, b, c, f, d);
      }
    else if (f = y(a), typeof f == "function")
      for (a = f.call(a), g = 0; !(k = a.next()).done; )
        k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);
    else if (k === "object")
      throw b = "" + a, Error(z(31, b === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
    return h;
  }
  function P(a, b, c) {
    if (a == null)
      return a;
    var e = [], d = 0;
    return O(a, e, "", "", function(a2) {
      return b.call(c, a2, d++);
    }), e;
  }
  function Q(a) {
    if (a._status === -1) {
      var b = a._result;
      b = b(), a._status = 0, a._result = b, b.then(function(b2) {
        a._status === 0 && (b2 = b2.default, a._status = 1, a._result = b2);
      }, function(b2) {
        a._status === 0 && (a._status = 2, a._result = b2);
      });
    }
    if (a._status === 1)
      return a._result;
    throw a._result;
  }
  var R = {current: null};
  function S() {
    var a = R.current;
    if (a === null)
      throw Error(z(321));
    return a;
  }
  var T = {ReactCurrentDispatcher: R, ReactCurrentBatchConfig: {transition: 0}, ReactCurrentOwner: G, IsSomeRendererActing: {current: !1}, assign: l};
  exports.Children = {map: P, forEach: function(a, b, c) {
    P(a, function() {
      b.apply(this, arguments);
    }, c);
  }, count: function(a) {
    var b = 0;
    return P(a, function() {
      b++;
    }), b;
  }, toArray: function(a) {
    return P(a, function(a2) {
      return a2;
    }) || [];
  }, only: function(a) {
    if (!L(a))
      throw Error(z(143));
    return a;
  }};
  exports.Component = C;
  exports.PureComponent = E;
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;
  exports.cloneElement = function(a, b, c) {
    if (a == null)
      throw Error(z(267, a));
    var e = l({}, a.props), d = a.key, k = a.ref, h = a._owner;
    if (b != null) {
      if (b.ref !== void 0 && (k = b.ref, h = G.current), b.key !== void 0 && (d = "" + b.key), a.type && a.type.defaultProps)
        var g = a.type.defaultProps;
      for (f in b)
        H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = b[f] === void 0 && g !== void 0 ? g[f] : b[f]);
    }
    var f = arguments.length - 2;
    if (f === 1)
      e.children = c;
    else if (1 < f) {
      g = Array(f);
      for (var m = 0; m < f; m++)
        g[m] = arguments[m + 2];
      e.children = g;
    }
    return {
      $$typeof: n,
      type: a.type,
      key: d,
      ref: k,
      props: e,
      _owner: h
    };
  };
  exports.createContext = function(a, b) {
    return b === void 0 && (b = null), a = {$$typeof: r, _calculateChangedBits: b, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null}, a.Provider = {$$typeof: q, _context: a}, a.Consumer = a;
  };
  exports.createElement = J;
  exports.createFactory = function(a) {
    var b = J.bind(null, a);
    return b.type = a, b;
  };
  exports.createRef = function() {
    return {current: null};
  };
  exports.forwardRef = function(a) {
    return {$$typeof: t, render: a};
  };
  exports.isValidElement = L;
  exports.lazy = function(a) {
    return {$$typeof: v, _payload: {_status: -1, _result: a}, _init: Q};
  };
  exports.memo = function(a, b) {
    return {$$typeof: u, type: a, compare: b === void 0 ? null : b};
  };
  exports.useCallback = function(a, b) {
    return S().useCallback(a, b);
  };
  exports.useContext = function(a, b) {
    return S().useContext(a, b);
  };
  exports.useDebugValue = function() {
  };
  exports.useEffect = function(a, b) {
    return S().useEffect(a, b);
  };
  exports.useImperativeHandle = function(a, b, c) {
    return S().useImperativeHandle(a, b, c);
  };
  exports.useLayoutEffect = function(a, b) {
    return S().useLayoutEffect(a, b);
  };
  exports.useMemo = function(a, b) {
    return S().useMemo(a, b);
  };
  exports.useReducer = function(a, b, c) {
    return S().useReducer(a, b, c);
  };
  exports.useRef = function(a) {
    return S().useRef(a);
  };
  exports.useState = function(a) {
    return S().useState(a);
  };
  exports.version = "17.0.1";
});

// node_modules/.pnpm/react@17.0.1/node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  "use strict";
  module.exports = require_react_production_min();
});

// node_modules/.pnpm/scheduler@0.20.1/node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS((exports) => {
  /** @license React v0.20.1
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  var f, g, h, k;
  typeof performance == "object" && typeof performance.now == "function" ? (l = performance, exports.unstable_now = function() {
    return l.now();
  }) : (p = Date, q = p.now(), exports.unstable_now = function() {
    return p.now() - q;
  });
  var l, p, q;
  typeof window == "undefined" || typeof MessageChannel != "function" ? (t = null, u = null, w = function() {
    if (t !== null)
      try {
        var a = exports.unstable_now();
        t(!0, a), t = null;
      } catch (b) {
        throw setTimeout(w, 0), b;
      }
  }, f = function(a) {
    t !== null ? setTimeout(f, 0, a) : (t = a, setTimeout(w, 0));
  }, g = function(a, b) {
    u = setTimeout(a, b);
  }, h = function() {
    clearTimeout(u);
  }, exports.unstable_shouldYield = function() {
    return !1;
  }, k = exports.unstable_forceFrameRate = function() {
  }) : (x = window.setTimeout, y = window.clearTimeout, typeof console != "undefined" && (z = window.cancelAnimationFrame, typeof window.requestAnimationFrame != "function" && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"), typeof z != "function" && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")), A = !1, B = null, C = -1, D = 5, E = 0, exports.unstable_shouldYield = function() {
    return exports.unstable_now() >= E;
  }, k = function() {
  }, exports.unstable_forceFrameRate = function(a) {
    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1e3 / a) : 5;
  }, F = new MessageChannel(), G = F.port2, F.port1.onmessage = function() {
    if (B !== null) {
      var a = exports.unstable_now();
      E = a + D;
      try {
        B(!0, a) ? G.postMessage(null) : (A = !1, B = null);
      } catch (b) {
        throw G.postMessage(null), b;
      }
    } else
      A = !1;
  }, f = function(a) {
    B = a, A || (A = !0, G.postMessage(null));
  }, g = function(a, b) {
    C = x(function() {
      a(exports.unstable_now());
    }, b);
  }, h = function() {
    y(C), C = -1;
  });
  var t, u, w, x, y, z, A, B, C, D, E, F, G;
  function H(a, b) {
    var c = a.length;
    a.push(b);
    a:
      for (; ; ) {
        var d = c - 1 >>> 1, e = a[d];
        if (e !== void 0 && 0 < I(e, b))
          a[d] = b, a[c] = e, c = d;
        else
          break a;
      }
  }
  function J(a) {
    return a = a[0], a === void 0 ? null : a;
  }
  function K(a) {
    var b = a[0];
    if (b !== void 0) {
      var c = a.pop();
      if (c !== b) {
        a[0] = c;
        a:
          for (var d = 0, e = a.length; d < e; ) {
            var m = 2 * (d + 1) - 1, n = a[m], v = m + 1, r = a[v];
            if (n !== void 0 && 0 > I(n, c))
              r !== void 0 && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);
            else if (r !== void 0 && 0 > I(r, c))
              a[d] = r, a[v] = c, d = v;
            else
              break a;
          }
      }
      return b;
    }
    return null;
  }
  function I(a, b) {
    var c = a.sortIndex - b.sortIndex;
    return c !== 0 ? c : a.id - b.id;
  }
  var L = [], M = [], N = 1, O = null, P = 3, Q = !1, R = !1, S = !1;
  function T(a) {
    for (var b = J(M); b !== null; ) {
      if (b.callback === null)
        K(M);
      else if (b.startTime <= a)
        K(M), b.sortIndex = b.expirationTime, H(L, b);
      else
        break;
      b = J(M);
    }
  }
  function U(a) {
    if (S = !1, T(a), !R)
      if (J(L) !== null)
        R = !0, f(V);
      else {
        var b = J(M);
        b !== null && g(U, b.startTime - a);
      }
  }
  function V(a, b) {
    R = !1, S && (S = !1, h()), Q = !0;
    var c = P;
    try {
      for (T(b), O = J(L); O !== null && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield()); ) {
        var d = O.callback;
        if (typeof d == "function") {
          O.callback = null, P = O.priorityLevel;
          var e = d(O.expirationTime <= b);
          b = exports.unstable_now(), typeof e == "function" ? O.callback = e : O === J(L) && K(L), T(b);
        } else
          K(L);
        O = J(L);
      }
      if (O !== null)
        var m = !0;
      else {
        var n = J(M);
        n !== null && g(U, n.startTime - b), m = !1;
      }
      return m;
    } finally {
      O = null, P = c, Q = !1;
    }
  }
  var W = k;
  exports.unstable_IdlePriority = 5;
  exports.unstable_ImmediatePriority = 1;
  exports.unstable_LowPriority = 4;
  exports.unstable_NormalPriority = 3;
  exports.unstable_Profiling = null;
  exports.unstable_UserBlockingPriority = 2;
  exports.unstable_cancelCallback = function(a) {
    a.callback = null;
  };
  exports.unstable_continueExecution = function() {
    R || Q || (R = !0, f(V));
  };
  exports.unstable_getCurrentPriorityLevel = function() {
    return P;
  };
  exports.unstable_getFirstCallbackNode = function() {
    return J(L);
  };
  exports.unstable_next = function(a) {
    switch (P) {
      case 1:
      case 2:
      case 3:
        var b = 3;
        break;
      default:
        b = P;
    }
    var c = P;
    P = b;
    try {
      return a();
    } finally {
      P = c;
    }
  };
  exports.unstable_pauseExecution = function() {
  };
  exports.unstable_requestPaint = W;
  exports.unstable_runWithPriority = function(a, b) {
    switch (a) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        break;
      default:
        a = 3;
    }
    var c = P;
    P = a;
    try {
      return b();
    } finally {
      P = c;
    }
  };
  exports.unstable_scheduleCallback = function(a, b, c) {
    var d = exports.unstable_now();
    switch (typeof c == "object" && c !== null ? (c = c.delay, c = typeof c == "number" && 0 < c ? d + c : d) : c = d, a) {
      case 1:
        var e = -1;
        break;
      case 2:
        e = 250;
        break;
      case 5:
        e = 1073741823;
        break;
      case 4:
        e = 1e4;
        break;
      default:
        e = 5e3;
    }
    return e = c + e, a = {id: N++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1}, c > d ? (a.sortIndex = c, H(M, a), J(L) === null && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, f(V))), a;
  };
  exports.unstable_wrapCallback = function(a) {
    var b = P;
    return function() {
      var c = P;
      P = b;
      try {
        return a.apply(this, arguments);
      } finally {
        P = c;
      }
    };
  };
});

// node_modules/.pnpm/scheduler@0.20.1/node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports, module) => {
  "use strict";
  module.exports = require_scheduler_production_min();
});

// node_modules/.pnpm/react-dom@17.0.1_react@17.0.1/node_modules/react-dom/cjs/react-dom.production.min.js
var require_react_dom_production_min = __commonJS((exports) => {
  /** @license React v17.0.1
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  "use strict";
  var aa = require_react(), m = require_object_assign(), r = require_scheduler();
  function y(a) {
    for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++)
      b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  if (!aa)
    throw Error(y(227));
  var ba = new Set(), ca = {};
  function da(a, b) {
    ea(a, b), ea(a + "Capture", b);
  }
  function ea(a, b) {
    for (ca[a] = b, a = 0; a < b.length; a++)
      ba.add(b[a]);
  }
  var fa = !(typeof window == "undefined" || typeof window.document == "undefined" || typeof window.document.createElement == "undefined"), ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, ia = Object.prototype.hasOwnProperty, ja = {}, ka = {};
  function la(a) {
    return ia.call(ka, a) ? !0 : ia.call(ja, a) ? !1 : ha.test(a) ? ka[a] = !0 : (ja[a] = !0, !1);
  }
  function ma(a, b, c, d) {
    if (c !== null && c.type === 0)
      return !1;
    switch (typeof b) {
      case "function":
      case "symbol":
        return !0;
      case "boolean":
        return d ? !1 : c !== null ? !c.acceptsBooleans : (a = a.toLowerCase().slice(0, 5), a !== "data-" && a !== "aria-");
      default:
        return !1;
    }
  }
  function na(a, b, c, d) {
    if (b === null || typeof b == "undefined" || ma(a, b, c, d))
      return !0;
    if (d)
      return !1;
    if (c !== null)
      switch (c.type) {
        case 3:
          return !b;
        case 4:
          return b === !1;
        case 5:
          return isNaN(b);
        case 6:
          return isNaN(b) || 1 > b;
      }
    return !1;
  }
  function B(a, b, c, d, e, f, g) {
    this.acceptsBooleans = b === 2 || b === 3 || b === 4, this.attributeName = d, this.attributeNamespace = e, this.mustUseProperty = c, this.propertyName = a, this.type = b, this.sanitizeURL = f, this.removeEmptyString = g;
  }
  var D = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
    D[a] = new B(a, 0, !1, a, null, !1, !1);
  });
  [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
    var b = a[0];
    D[b] = new B(b, 1, !1, a[1], null, !1, !1);
  });
  ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
    D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);
  });
  ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
    D[a] = new B(a, 2, !1, a, null, !1, !1);
  });
  "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
    D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);
  });
  ["checked", "multiple", "muted", "selected"].forEach(function(a) {
    D[a] = new B(a, 3, !0, a, null, !1, !1);
  });
  ["capture", "download"].forEach(function(a) {
    D[a] = new B(a, 4, !1, a, null, !1, !1);
  });
  ["cols", "rows", "size", "span"].forEach(function(a) {
    D[a] = new B(a, 6, !1, a, null, !1, !1);
  });
  ["rowSpan", "start"].forEach(function(a) {
    D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);
  });
  var oa = /[\-:]([a-z])/g;
  function pa(a) {
    return a[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, null, !1, !1);
  });
  "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
  });
  ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
    var b = a.replace(oa, pa);
    D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
  });
  ["tabIndex", "crossOrigin"].forEach(function(a) {
    D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);
  });
  D.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
  ["src", "href", "action", "formAction"].forEach(function(a) {
    D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);
  });
  function qa(a, b, c, d) {
    var e = D.hasOwnProperty(b) ? D[b] : null, f = e !== null ? e.type === 0 : d ? !1 : !(!(2 < b.length) || b[0] !== "o" && b[0] !== "O" || b[1] !== "n" && b[1] !== "N");
    f || (na(b, c, e, d) && (c = null), d || e === null ? la(b) && (c === null ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = c === null ? e.type === 3 ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, c === null ? a.removeAttribute(b) : (e = e.type, c = e === 3 || e === 4 && c === !0 ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
  }
  var ra = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, sa = 60103, ta = 60106, ua = 60107, wa = 60108, xa = 60114, ya = 60109, za = 60110, Aa = 60112, Ba = 60113, Ca = 60120, Da = 60115, Ea = 60116, Fa = 60121, Ga = 60128, Ha = 60129, Ia = 60130, Ja = 60131;
  typeof Symbol == "function" && Symbol.for && (E = Symbol.for, sa = E("react.element"), ta = E("react.portal"), ua = E("react.fragment"), wa = E("react.strict_mode"), xa = E("react.profiler"), ya = E("react.provider"), za = E("react.context"), Aa = E("react.forward_ref"), Ba = E("react.suspense"), Ca = E("react.suspense_list"), Da = E("react.memo"), Ea = E("react.lazy"), Fa = E("react.block"), E("react.scope"), Ga = E("react.opaque.id"), Ha = E("react.debug_trace_mode"), Ia = E("react.offscreen"), Ja = E("react.legacy_hidden"));
  var E, Ka = typeof Symbol == "function" && Symbol.iterator;
  function La(a) {
    return a === null || typeof a != "object" ? null : (a = Ka && a[Ka] || a["@@iterator"], typeof a == "function" ? a : null);
  }
  var Ma;
  function Na(a) {
    if (Ma === void 0)
      try {
        throw Error();
      } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        Ma = b && b[1] || "";
      }
    return `
` + Ma + a;
  }
  var Oa = !1;
  function Pa(a, b) {
    if (!a || Oa)
      return "";
    Oa = !0;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (b)
        if (b = function() {
          throw Error();
        }, Object.defineProperty(b.prototype, "props", {set: function() {
          throw Error();
        }}), typeof Reflect == "object" && Reflect.construct) {
          try {
            Reflect.construct(b, []);
          } catch (k) {
            var d = k;
          }
          Reflect.construct(a, [], b);
        } else {
          try {
            b.call();
          } catch (k) {
            d = k;
          }
          a.call(b.prototype);
        }
      else {
        try {
          throw Error();
        } catch (k) {
          d = k;
        }
        a();
      }
    } catch (k) {
      if (k && d && typeof k.stack == "string") {
        for (var e = k.stack.split(`
`), f = d.stack.split(`
`), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; )
          h--;
        for (; 1 <= g && 0 <= h; g--, h--)
          if (e[g] !== f[h]) {
            if (g !== 1 || h !== 1)
              do
                if (g--, h--, 0 > h || e[g] !== f[h])
                  return `
` + e[g].replace(" at new ", " at ");
              while (1 <= g && 0 <= h);
            break;
          }
      }
    } finally {
      Oa = !1, Error.prepareStackTrace = c;
    }
    return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
  }
  function Qa(a) {
    switch (a.tag) {
      case 5:
        return Na(a.type);
      case 16:
        return Na("Lazy");
      case 13:
        return Na("Suspense");
      case 19:
        return Na("SuspenseList");
      case 0:
      case 2:
      case 15:
        return a = Pa(a.type, !1), a;
      case 11:
        return a = Pa(a.type.render, !1), a;
      case 22:
        return a = Pa(a.type._render, !1), a;
      case 1:
        return a = Pa(a.type, !0), a;
      default:
        return "";
    }
  }
  function Ra(a) {
    if (a == null)
      return null;
    if (typeof a == "function")
      return a.displayName || a.name || null;
    if (typeof a == "string")
      return a;
    switch (a) {
      case ua:
        return "Fragment";
      case ta:
        return "Portal";
      case xa:
        return "Profiler";
      case wa:
        return "StrictMode";
      case Ba:
        return "Suspense";
      case Ca:
        return "SuspenseList";
    }
    if (typeof a == "object")
      switch (a.$$typeof) {
        case za:
          return (a.displayName || "Context") + ".Consumer";
        case ya:
          return (a._context.displayName || "Context") + ".Provider";
        case Aa:
          var b = a.render;
          return b = b.displayName || b.name || "", a.displayName || (b !== "" ? "ForwardRef(" + b + ")" : "ForwardRef");
        case Da:
          return Ra(a.type);
        case Fa:
          return Ra(a._render);
        case Ea:
          b = a._payload, a = a._init;
          try {
            return Ra(a(b));
          } catch (c) {
          }
      }
    return null;
  }
  function Sa(a) {
    switch (typeof a) {
      case "boolean":
      case "number":
      case "object":
      case "string":
      case "undefined":
        return a;
      default:
        return "";
    }
  }
  function Ta(a) {
    var b = a.type;
    return (a = a.nodeName) && a.toLowerCase() === "input" && (b === "checkbox" || b === "radio");
  }
  function Ua(a) {
    var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
    if (!a.hasOwnProperty(b) && typeof c != "undefined" && typeof c.get == "function" && typeof c.set == "function") {
      var e = c.get, f = c.set;
      return Object.defineProperty(a, b, {configurable: !0, get: function() {
        return e.call(this);
      }, set: function(a2) {
        d = "" + a2, f.call(this, a2);
      }}), Object.defineProperty(a, b, {enumerable: c.enumerable}), {getValue: function() {
        return d;
      }, setValue: function(a2) {
        d = "" + a2;
      }, stopTracking: function() {
        a._valueTracker = null, delete a[b];
      }};
    }
  }
  function Va(a) {
    a._valueTracker || (a._valueTracker = Ua(a));
  }
  function Wa(a) {
    if (!a)
      return !1;
    var b = a._valueTracker;
    if (!b)
      return !0;
    var c = b.getValue(), d = "";
    return a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value), a = d, a !== c ? (b.setValue(a), !0) : !1;
  }
  function Xa(a) {
    if (a = a || (typeof document != "undefined" ? document : void 0), typeof a == "undefined")
      return null;
    try {
      return a.activeElement || a.body;
    } catch (b) {
      return a.body;
    }
  }
  function Ya(a, b) {
    var c = b.checked;
    return m({}, b, {defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c ?? a._wrapperState.initialChecked});
  }
  function Za(a, b) {
    var c = b.defaultValue == null ? "" : b.defaultValue, d = b.checked != null ? b.checked : b.defaultChecked;
    c = Sa(b.value != null ? b.value : c), a._wrapperState = {initialChecked: d, initialValue: c, controlled: b.type === "checkbox" || b.type === "radio" ? b.checked != null : b.value != null};
  }
  function $a(a, b) {
    b = b.checked, b != null && qa(a, "checked", b, !1);
  }
  function ab(a, b) {
    $a(a, b);
    var c = Sa(b.value), d = b.type;
    if (c != null)
      d === "number" ? (c === 0 && a.value === "" || a.value != c) && (a.value = "" + c) : a.value !== "" + c && (a.value = "" + c);
    else if (d === "submit" || d === "reset") {
      a.removeAttribute("value");
      return;
    }
    b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue)), b.checked == null && b.defaultChecked != null && (a.defaultChecked = !!b.defaultChecked);
  }
  function cb(a, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
      var d = b.type;
      if (!(d !== "submit" && d !== "reset" || b.value !== void 0 && b.value !== null))
        return;
      b = "" + a._wrapperState.initialValue, c || b === a.value || (a.value = b), a.defaultValue = b;
    }
    c = a.name, c !== "" && (a.name = ""), a.defaultChecked = !!a._wrapperState.initialChecked, c !== "" && (a.name = c);
  }
  function bb(a, b, c) {
    (b !== "number" || Xa(a.ownerDocument) !== a) && (c == null ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c));
  }
  function db(a) {
    var b = "";
    return aa.Children.forEach(a, function(a2) {
      a2 != null && (b += a2);
    }), b;
  }
  function eb(a, b) {
    return a = m({children: void 0}, b), (b = db(b.children)) && (a.children = b), a;
  }
  function fb(a, b, c, d) {
    if (a = a.options, b) {
      b = {};
      for (var e = 0; e < c.length; e++)
        b["$" + c[e]] = !0;
      for (c = 0; c < a.length; c++)
        e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
    } else {
      for (c = "" + Sa(c), b = null, e = 0; e < a.length; e++) {
        if (a[e].value === c) {
          a[e].selected = !0, d && (a[e].defaultSelected = !0);
          return;
        }
        b !== null || a[e].disabled || (b = a[e]);
      }
      b !== null && (b.selected = !0);
    }
  }
  function gb(a, b) {
    if (b.dangerouslySetInnerHTML != null)
      throw Error(y(91));
    return m({}, b, {value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue});
  }
  function hb(a, b) {
    var c = b.value;
    if (c == null) {
      if (c = b.children, b = b.defaultValue, c != null) {
        if (b != null)
          throw Error(y(92));
        if (Array.isArray(c)) {
          if (!(1 >= c.length))
            throw Error(y(93));
          c = c[0];
        }
        b = c;
      }
      b == null && (b = ""), c = b;
    }
    a._wrapperState = {initialValue: Sa(c)};
  }
  function ib(a, b) {
    var c = Sa(b.value), d = Sa(b.defaultValue);
    c != null && (c = "" + c, c !== a.value && (a.value = c), b.defaultValue == null && a.defaultValue !== c && (a.defaultValue = c)), d != null && (a.defaultValue = "" + d);
  }
  function jb(a) {
    var b = a.textContent;
    b === a._wrapperState.initialValue && b !== "" && b !== null && (a.value = b);
  }
  var kb = {html: "http://www.w3.org/1999/xhtml", mathml: "http://www.w3.org/1998/Math/MathML", svg: "http://www.w3.org/2000/svg"};
  function lb(a) {
    switch (a) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function mb(a, b) {
    return a == null || a === "http://www.w3.org/1999/xhtml" ? lb(b) : a === "http://www.w3.org/2000/svg" && b === "foreignObject" ? "http://www.w3.org/1999/xhtml" : a;
  }
  var nb, ob = function(a) {
    return typeof MSApp != "undefined" && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
      MSApp.execUnsafeLocalFunction(function() {
        return a(b, c, d, e);
      });
    } : a;
  }(function(a, b) {
    if (a.namespaceURI !== kb.svg || "innerHTML" in a)
      a.innerHTML = b;
    else {
      for (nb = nb || document.createElement("div"), nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>", b = nb.firstChild; a.firstChild; )
        a.removeChild(a.firstChild);
      for (; b.firstChild; )
        a.appendChild(b.firstChild);
    }
  });
  function pb(a, b) {
    if (b) {
      var c = a.firstChild;
      if (c && c === a.lastChild && c.nodeType === 3) {
        c.nodeValue = b;
        return;
      }
    }
    a.textContent = b;
  }
  var qb = {
    animationIterationCount: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
  }, rb = ["Webkit", "ms", "Moz", "O"];
  Object.keys(qb).forEach(function(a) {
    rb.forEach(function(b) {
      b = b + a.charAt(0).toUpperCase() + a.substring(1), qb[b] = qb[a];
    });
  });
  function sb(a, b, c) {
    return b == null || typeof b == "boolean" || b === "" ? "" : c || typeof b != "number" || b === 0 || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
  }
  function tb(a, b) {
    a = a.style;
    for (var c in b)
      if (b.hasOwnProperty(c)) {
        var d = c.indexOf("--") === 0, e = sb(c, b[c], d);
        c === "float" && (c = "cssFloat"), d ? a.setProperty(c, e) : a[c] = e;
      }
  }
  var ub = m({menuitem: !0}, {area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0});
  function vb(a, b) {
    if (b) {
      if (ub[a] && (b.children != null || b.dangerouslySetInnerHTML != null))
        throw Error(y(137, a));
      if (b.dangerouslySetInnerHTML != null) {
        if (b.children != null)
          throw Error(y(60));
        if (!(typeof b.dangerouslySetInnerHTML == "object" && "__html" in b.dangerouslySetInnerHTML))
          throw Error(y(61));
      }
      if (b.style != null && typeof b.style != "object")
        throw Error(y(62));
    }
  }
  function wb(a, b) {
    if (a.indexOf("-") === -1)
      return typeof b.is == "string";
    switch (a) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return !1;
      default:
        return !0;
    }
  }
  function xb(a) {
    return a = a.target || a.srcElement || window, a.correspondingUseElement && (a = a.correspondingUseElement), a.nodeType === 3 ? a.parentNode : a;
  }
  var yb = null, zb = null, Ab = null;
  function Bb(a) {
    if (a = Cb(a)) {
      if (typeof yb != "function")
        throw Error(y(280));
      var b = a.stateNode;
      b && (b = Db(b), yb(a.stateNode, a.type, b));
    }
  }
  function Eb(a) {
    zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
  }
  function Fb() {
    if (zb) {
      var a = zb, b = Ab;
      if (Ab = zb = null, Bb(a), b)
        for (a = 0; a < b.length; a++)
          Bb(b[a]);
    }
  }
  function Gb(a, b) {
    return a(b);
  }
  function Hb(a, b, c, d, e) {
    return a(b, c, d, e);
  }
  function Ib() {
  }
  var Jb = Gb, Kb = !1, Lb = !1;
  function Mb() {
    (zb !== null || Ab !== null) && (Ib(), Fb());
  }
  function Nb(a, b, c) {
    if (Lb)
      return a(b, c);
    Lb = !0;
    try {
      return Jb(a, b, c);
    } finally {
      Lb = !1, Mb();
    }
  }
  function Ob(a, b) {
    var c = a.stateNode;
    if (c === null)
      return null;
    var d = Db(c);
    if (d === null)
      return null;
    c = d[b];
    a:
      switch (b) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d = !d.disabled) || (a = a.type, d = !(a === "button" || a === "input" || a === "select" || a === "textarea")), a = !d;
          break a;
        default:
          a = !1;
      }
    if (a)
      return null;
    if (c && typeof c != "function")
      throw Error(y(231, b, typeof c));
    return c;
  }
  var Pb = !1;
  if (fa)
    try {
      Qb = {}, Object.defineProperty(Qb, "passive", {get: function() {
        Pb = !0;
      }}), window.addEventListener("test", Qb, Qb), window.removeEventListener("test", Qb, Qb);
    } catch (a) {
      Pb = !1;
    }
  var Qb;
  function Rb(a, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
      b.apply(c, l);
    } catch (n) {
      this.onError(n);
    }
  }
  var Sb = !1, Tb = null, Ub = !1, Vb = null, Wb = {onError: function(a) {
    Sb = !0, Tb = a;
  }};
  function Xb(a, b, c, d, e, f, g, h, k) {
    Sb = !1, Tb = null, Rb.apply(Wb, arguments);
  }
  function Yb(a, b, c, d, e, f, g, h, k) {
    if (Xb.apply(this, arguments), Sb) {
      if (Sb) {
        var l = Tb;
        Sb = !1, Tb = null;
      } else
        throw Error(y(198));
      Ub || (Ub = !0, Vb = l);
    }
  }
  function Zb(a) {
    var b = a, c = a;
    if (a.alternate)
      for (; b.return; )
        b = b.return;
    else {
      a = b;
      do
        b = a, (b.flags & 1026) != 0 && (c = b.return), a = b.return;
      while (a);
    }
    return b.tag === 3 ? c : null;
  }
  function $b(a) {
    if (a.tag === 13) {
      var b = a.memoizedState;
      if (b === null && (a = a.alternate, a !== null && (b = a.memoizedState)), b !== null)
        return b.dehydrated;
    }
    return null;
  }
  function ac(a) {
    if (Zb(a) !== a)
      throw Error(y(188));
  }
  function bc(a) {
    var b = a.alternate;
    if (!b) {
      if (b = Zb(a), b === null)
        throw Error(y(188));
      return b !== a ? null : a;
    }
    for (var c = a, d = b; ; ) {
      var e = c.return;
      if (e === null)
        break;
      var f = e.alternate;
      if (f === null) {
        if (d = e.return, d !== null) {
          c = d;
          continue;
        }
        break;
      }
      if (e.child === f.child) {
        for (f = e.child; f; ) {
          if (f === c)
            return ac(e), a;
          if (f === d)
            return ac(e), b;
          f = f.sibling;
        }
        throw Error(y(188));
      }
      if (c.return !== d.return)
        c = e, d = f;
      else {
        for (var g = !1, h = e.child; h; ) {
          if (h === c) {
            g = !0, c = e, d = f;
            break;
          }
          if (h === d) {
            g = !0, d = e, c = f;
            break;
          }
          h = h.sibling;
        }
        if (!g) {
          for (h = f.child; h; ) {
            if (h === c) {
              g = !0, c = f, d = e;
              break;
            }
            if (h === d) {
              g = !0, d = f, c = e;
              break;
            }
            h = h.sibling;
          }
          if (!g)
            throw Error(y(189));
        }
      }
      if (c.alternate !== d)
        throw Error(y(190));
    }
    if (c.tag !== 3)
      throw Error(y(188));
    return c.stateNode.current === c ? a : b;
  }
  function cc(a) {
    if (a = bc(a), !a)
      return null;
    for (var b = a; ; ) {
      if (b.tag === 5 || b.tag === 6)
        return b;
      if (b.child)
        b.child.return = b, b = b.child;
      else {
        if (b === a)
          break;
        for (; !b.sibling; ) {
          if (!b.return || b.return === a)
            return null;
          b = b.return;
        }
        b.sibling.return = b.return, b = b.sibling;
      }
    }
    return null;
  }
  function dc(a, b) {
    for (var c = a.alternate; b !== null; ) {
      if (b === a || b === c)
        return !0;
      b = b.return;
    }
    return !1;
  }
  var ec, fc, gc, hc, ic = !1, jc = [], kc = null, lc = null, mc = null, nc = new Map(), oc = new Map(), pc = [], qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
  function rc(a, b, c, d, e) {
    return {blockedOn: a, domEventName: b, eventSystemFlags: c | 16, nativeEvent: e, targetContainers: [d]};
  }
  function sc(a, b) {
    switch (a) {
      case "focusin":
      case "focusout":
        kc = null;
        break;
      case "dragenter":
      case "dragleave":
        lc = null;
        break;
      case "mouseover":
      case "mouseout":
        mc = null;
        break;
      case "pointerover":
      case "pointerout":
        nc.delete(b.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        oc.delete(b.pointerId);
    }
  }
  function tc(a, b, c, d, e, f) {
    return a === null || a.nativeEvent !== f ? (a = rc(b, c, d, e, f), b !== null && (b = Cb(b), b !== null && fc(b)), a) : (a.eventSystemFlags |= d, b = a.targetContainers, e !== null && b.indexOf(e) === -1 && b.push(e), a);
  }
  function uc(a, b, c, d, e) {
    switch (b) {
      case "focusin":
        return kc = tc(kc, a, b, c, d, e), !0;
      case "dragenter":
        return lc = tc(lc, a, b, c, d, e), !0;
      case "mouseover":
        return mc = tc(mc, a, b, c, d, e), !0;
      case "pointerover":
        var f = e.pointerId;
        return nc.set(f, tc(nc.get(f) || null, a, b, c, d, e)), !0;
      case "gotpointercapture":
        return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;
    }
    return !1;
  }
  function vc(a) {
    var b = wc(a.target);
    if (b !== null) {
      var c = Zb(b);
      if (c !== null) {
        if (b = c.tag, b === 13) {
          if (b = $b(c), b !== null) {
            a.blockedOn = b, hc(a.lanePriority, function() {
              r.unstable_runWithPriority(a.priority, function() {
                gc(c);
              });
            });
            return;
          }
        } else if (b === 3 && c.stateNode.hydrate) {
          a.blockedOn = c.tag === 3 ? c.stateNode.containerInfo : null;
          return;
        }
      }
    }
    a.blockedOn = null;
  }
  function xc(a) {
    if (a.blockedOn !== null)
      return !1;
    for (var b = a.targetContainers; 0 < b.length; ) {
      var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
      if (c !== null)
        return b = Cb(c), b !== null && fc(b), a.blockedOn = c, !1;
      b.shift();
    }
    return !0;
  }
  function zc(a, b, c) {
    xc(a) && c.delete(b);
  }
  function Ac() {
    for (ic = !1; 0 < jc.length; ) {
      var a = jc[0];
      if (a.blockedOn !== null) {
        a = Cb(a.blockedOn), a !== null && ec(a);
        break;
      }
      for (var b = a.targetContainers; 0 < b.length; ) {
        var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (c !== null) {
          a.blockedOn = c;
          break;
        }
        b.shift();
      }
      a.blockedOn === null && jc.shift();
    }
    kc !== null && xc(kc) && (kc = null), lc !== null && xc(lc) && (lc = null), mc !== null && xc(mc) && (mc = null), nc.forEach(zc), oc.forEach(zc);
  }
  function Bc(a, b) {
    a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, r.unstable_scheduleCallback(r.unstable_NormalPriority, Ac)));
  }
  function Cc(a) {
    function b(b2) {
      return Bc(b2, a);
    }
    if (0 < jc.length) {
      Bc(jc[0], a);
      for (var c = 1; c < jc.length; c++) {
        var d = jc[c];
        d.blockedOn === a && (d.blockedOn = null);
      }
    }
    for (kc !== null && Bc(kc, a), lc !== null && Bc(lc, a), mc !== null && Bc(mc, a), nc.forEach(b), oc.forEach(b), c = 0; c < pc.length; c++)
      d = pc[c], d.blockedOn === a && (d.blockedOn = null);
    for (; 0 < pc.length && (c = pc[0], c.blockedOn === null); )
      vc(c), c.blockedOn === null && pc.shift();
  }
  function Dc(a, b) {
    var c = {};
    return c[a.toLowerCase()] = b.toLowerCase(), c["Webkit" + a] = "webkit" + b, c["Moz" + a] = "moz" + b, c;
  }
  var Ec = {animationend: Dc("Animation", "AnimationEnd"), animationiteration: Dc("Animation", "AnimationIteration"), animationstart: Dc("Animation", "AnimationStart"), transitionend: Dc("Transition", "TransitionEnd")}, Fc = {}, Gc = {};
  fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);
  function Hc(a) {
    if (Fc[a])
      return Fc[a];
    if (!Ec[a])
      return a;
    var b = Ec[a], c;
    for (c in b)
      if (b.hasOwnProperty(c) && c in Gc)
        return Fc[a] = b[c];
    return a;
  }
  var Ic = Hc("animationend"), Jc = Hc("animationiteration"), Kc = Hc("animationstart"), Lc = Hc("transitionend"), Mc = new Map(), Nc = new Map(), Oc = [
    "abort",
    "abort",
    Ic,
    "animationEnd",
    Jc,
    "animationIteration",
    Kc,
    "animationStart",
    "canplay",
    "canPlay",
    "canplaythrough",
    "canPlayThrough",
    "durationchange",
    "durationChange",
    "emptied",
    "emptied",
    "encrypted",
    "encrypted",
    "ended",
    "ended",
    "error",
    "error",
    "gotpointercapture",
    "gotPointerCapture",
    "load",
    "load",
    "loadeddata",
    "loadedData",
    "loadedmetadata",
    "loadedMetadata",
    "loadstart",
    "loadStart",
    "lostpointercapture",
    "lostPointerCapture",
    "playing",
    "playing",
    "progress",
    "progress",
    "seeking",
    "seeking",
    "stalled",
    "stalled",
    "suspend",
    "suspend",
    "timeupdate",
    "timeUpdate",
    Lc,
    "transitionEnd",
    "waiting",
    "waiting"
  ];
  function Pc(a, b) {
    for (var c = 0; c < a.length; c += 2) {
      var d = a[c], e = a[c + 1];
      e = "on" + (e[0].toUpperCase() + e.slice(1)), Nc.set(d, b), Mc.set(d, e), da(e, [d]);
    }
  }
  var Qc = r.unstable_now;
  Qc();
  var F = 8;
  function Rc(a) {
    if ((1 & a) != 0)
      return F = 15, 1;
    if ((2 & a) != 0)
      return F = 14, 2;
    if ((4 & a) != 0)
      return F = 13, 4;
    var b = 24 & a;
    return b !== 0 ? (F = 12, b) : (a & 32) != 0 ? (F = 11, 32) : (b = 192 & a, b !== 0 ? (F = 10, b) : (a & 256) != 0 ? (F = 9, 256) : (b = 3584 & a, b !== 0 ? (F = 8, b) : (a & 4096) != 0 ? (F = 7, 4096) : (b = 4186112 & a, b !== 0 ? (F = 6, b) : (b = 62914560 & a, b !== 0 ? (F = 5, b) : a & 67108864 ? (F = 4, 67108864) : (a & 134217728) != 0 ? (F = 3, 134217728) : (b = 805306368 & a, b !== 0 ? (F = 2, b) : (1073741824 & a) != 0 ? (F = 1, 1073741824) : (F = 8, a))))));
  }
  function Sc(a) {
    switch (a) {
      case 99:
        return 15;
      case 98:
        return 10;
      case 97:
      case 96:
        return 8;
      case 95:
        return 2;
      default:
        return 0;
    }
  }
  function Tc(a) {
    switch (a) {
      case 15:
      case 14:
        return 99;
      case 13:
      case 12:
      case 11:
      case 10:
        return 98;
      case 9:
      case 8:
      case 7:
      case 6:
      case 4:
      case 5:
        return 97;
      case 3:
      case 2:
      case 1:
        return 95;
      case 0:
        return 90;
      default:
        throw Error(y(358, a));
    }
  }
  function Uc(a, b) {
    var c = a.pendingLanes;
    if (c === 0)
      return F = 0;
    var d = 0, e = 0, f = a.expiredLanes, g = a.suspendedLanes, h = a.pingedLanes;
    if (f !== 0)
      d = f, e = F = 15;
    else if (f = c & 134217727, f !== 0) {
      var k = f & ~g;
      k !== 0 ? (d = Rc(k), e = F) : (h &= f, h !== 0 && (d = Rc(h), e = F));
    } else
      f = c & ~g, f !== 0 ? (d = Rc(f), e = F) : h !== 0 && (d = Rc(h), e = F);
    if (d === 0)
      return 0;
    if (d = 31 - Vc(d), d = c & ((0 > d ? 0 : 1 << d) << 1) - 1, b !== 0 && b !== d && (b & g) == 0) {
      if (Rc(b), e <= F)
        return b;
      F = e;
    }
    if (b = a.entangledLanes, b !== 0)
      for (a = a.entanglements, b &= d; 0 < b; )
        c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;
    return d;
  }
  function Wc(a) {
    return a = a.pendingLanes & -1073741825, a !== 0 ? a : a & 1073741824 ? 1073741824 : 0;
  }
  function Xc(a, b) {
    switch (a) {
      case 15:
        return 1;
      case 14:
        return 2;
      case 12:
        return a = Yc(24 & ~b), a === 0 ? Xc(10, b) : a;
      case 10:
        return a = Yc(192 & ~b), a === 0 ? Xc(8, b) : a;
      case 8:
        return a = Yc(3584 & ~b), a === 0 && (a = Yc(4186112 & ~b), a === 0 && (a = 512)), a;
      case 2:
        return b = Yc(805306368 & ~b), b === 0 && (b = 268435456), b;
    }
    throw Error(y(358, a));
  }
  function Yc(a) {
    return a & -a;
  }
  function Zc(a) {
    for (var b = [], c = 0; 31 > c; c++)
      b.push(a);
    return b;
  }
  function $c(a, b, c) {
    a.pendingLanes |= b;
    var d = b - 1;
    a.suspendedLanes &= d, a.pingedLanes &= d, a = a.eventTimes, b = 31 - Vc(b), a[b] = c;
  }
  var Vc = Math.clz32 ? Math.clz32 : ad, bd = Math.log, cd = Math.LN2;
  function ad(a) {
    return a === 0 ? 32 : 31 - (bd(a) / cd | 0) | 0;
  }
  var dd = r.unstable_UserBlockingPriority, ed = r.unstable_runWithPriority, fd = !0;
  function gd(a, b, c, d) {
    Kb || Ib();
    var e = hd, f = Kb;
    Kb = !0;
    try {
      Hb(e, a, b, c, d);
    } finally {
      (Kb = f) || Mb();
    }
  }
  function id(a, b, c, d) {
    ed(dd, hd.bind(null, a, b, c, d));
  }
  function hd(a, b, c, d) {
    if (fd) {
      var e;
      if ((e = (b & 4) == 0) && 0 < jc.length && -1 < qc.indexOf(a))
        a = rc(null, a, b, c, d), jc.push(a);
      else {
        var f = yc(a, b, c, d);
        if (f === null)
          e && sc(a, d);
        else {
          if (e) {
            if (-1 < qc.indexOf(a)) {
              a = rc(f, a, b, c, d), jc.push(a);
              return;
            }
            if (uc(f, a, b, c, d))
              return;
            sc(a, d);
          }
          jd(a, b, d, null, c);
        }
      }
    }
  }
  function yc(a, b, c, d) {
    var e = xb(d);
    if (e = wc(e), e !== null) {
      var f = Zb(e);
      if (f === null)
        e = null;
      else {
        var g = f.tag;
        if (g === 13) {
          if (e = $b(f), e !== null)
            return e;
          e = null;
        } else if (g === 3) {
          if (f.stateNode.hydrate)
            return f.tag === 3 ? f.stateNode.containerInfo : null;
          e = null;
        } else
          f !== e && (e = null);
      }
    }
    return jd(a, b, d, e, c), null;
  }
  var kd = null, ld = null, md = null;
  function nd() {
    if (md)
      return md;
    var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
    for (a = 0; a < c && b[a] === e[a]; a++)
      ;
    var g = c - a;
    for (d = 1; d <= g && b[c - d] === e[f - d]; d++)
      ;
    return md = e.slice(a, 1 < d ? 1 - d : void 0);
  }
  function od(a) {
    var b = a.keyCode;
    return "charCode" in a ? (a = a.charCode, a === 0 && b === 13 && (a = 13)) : a = b, a === 10 && (a = 13), 32 <= a || a === 13 ? a : 0;
  }
  function pd() {
    return !0;
  }
  function qd() {
    return !1;
  }
  function rd(a) {
    function b(b2, d, e, f, g) {
      this._reactName = b2, this._targetInst = e, this.type = d, this.nativeEvent = f, this.target = g, this.currentTarget = null;
      for (var c in a)
        a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f) : f[c]);
      return this.isDefaultPrevented = (f.defaultPrevented != null ? f.defaultPrevented : f.returnValue === !1) ? pd : qd, this.isPropagationStopped = qd, this;
    }
    return m(b.prototype, {preventDefault: function() {
      this.defaultPrevented = !0;
      var a2 = this.nativeEvent;
      a2 && (a2.preventDefault ? a2.preventDefault() : typeof a2.returnValue != "unknown" && (a2.returnValue = !1), this.isDefaultPrevented = pd);
    }, stopPropagation: function() {
      var a2 = this.nativeEvent;
      a2 && (a2.stopPropagation ? a2.stopPropagation() : typeof a2.cancelBubble != "unknown" && (a2.cancelBubble = !0), this.isPropagationStopped = pd);
    }, persist: function() {
    }, isPersistent: pd}), b;
  }
  var sd = {eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
    return a.timeStamp || Date.now();
  }, defaultPrevented: 0, isTrusted: 0}, td = rd(sd), ud = m({}, sd, {view: 0, detail: 0}), vd = rd(ud), wd, xd, yd, Ad = m({}, ud, {screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
    return a.relatedTarget === void 0 ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
  }, movementX: function(a) {
    return "movementX" in a ? a.movementX : (a !== yd && (yd && a.type === "mousemove" ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a), wd);
  }, movementY: function(a) {
    return "movementY" in a ? a.movementY : xd;
  }}), Bd = rd(Ad), Cd = m({}, Ad, {dataTransfer: 0}), Dd = rd(Cd), Ed = m({}, ud, {relatedTarget: 0}), Fd = rd(Ed), Gd = m({}, sd, {animationName: 0, elapsedTime: 0, pseudoElement: 0}), Hd = rd(Gd), Id = m({}, sd, {clipboardData: function(a) {
    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
  }}), Jd = rd(Id), Kd = m({}, sd, {data: 0}), Ld = rd(Kd), Md = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, Nd = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, Od = {Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey"};
  function Pd(a) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
  }
  function zd() {
    return Pd;
  }
  var Qd = m({}, ud, {key: function(a) {
    if (a.key) {
      var b = Md[a.key] || a.key;
      if (b !== "Unidentified")
        return b;
    }
    return a.type === "keypress" ? (a = od(a), a === 13 ? "Enter" : String.fromCharCode(a)) : a.type === "keydown" || a.type === "keyup" ? Nd[a.keyCode] || "Unidentified" : "";
  }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
    return a.type === "keypress" ? od(a) : 0;
  }, keyCode: function(a) {
    return a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
  }, which: function(a) {
    return a.type === "keypress" ? od(a) : a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
  }}), Rd = rd(Qd), Sd = m({}, Ad, {pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0}), Td = rd(Sd), Ud = m({}, ud, {touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd}), Vd = rd(Ud), Wd = m({}, sd, {propertyName: 0, elapsedTime: 0, pseudoElement: 0}), Xd = rd(Wd), Yd = m({}, Ad, {
    deltaX: function(a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function(a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = fa && "CompositionEvent" in window, be = null;
  fa && "documentMode" in document && (be = document.documentMode);
  var ce = fa && "TextEvent" in window && !be, de = fa && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = !1;
  function ge(a, b) {
    switch (a) {
      case "keyup":
        return $d.indexOf(b.keyCode) !== -1;
      case "keydown":
        return b.keyCode !== 229;
      case "keypress":
      case "mousedown":
      case "focusout":
        return !0;
      default:
        return !1;
    }
  }
  function he(a) {
    return a = a.detail, typeof a == "object" && "data" in a ? a.data : null;
  }
  var ie = !1;
  function je(a, b) {
    switch (a) {
      case "compositionend":
        return he(b);
      case "keypress":
        return b.which !== 32 ? null : (fe = !0, ee);
      case "textInput":
        return a = b.data, a === ee && fe ? null : a;
      default:
        return null;
    }
  }
  function ke(a, b) {
    if (ie)
      return a === "compositionend" || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;
    switch (a) {
      case "paste":
        return null;
      case "keypress":
        if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
          if (b.char && 1 < b.char.length)
            return b.char;
          if (b.which)
            return String.fromCharCode(b.which);
        }
        return null;
      case "compositionend":
        return de && b.locale !== "ko" ? null : b.data;
      default:
        return null;
    }
  }
  var le = {color: !0, date: !0, datetime: !0, "datetime-local": !0, email: !0, month: !0, number: !0, password: !0, range: !0, search: !0, tel: !0, text: !0, time: !0, url: !0, week: !0};
  function me(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b === "input" ? !!le[a.type] : b === "textarea";
  }
  function ne(a, b, c, d) {
    Eb(d), b = oe(b, "onChange"), 0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({event: c, listeners: b}));
  }
  var pe = null, qe = null;
  function re(a) {
    se(a, 0);
  }
  function te(a) {
    var b = ue(a);
    if (Wa(b))
      return a;
  }
  function ve(a, b) {
    if (a === "change")
      return b;
  }
  var we = !1;
  fa && (fa ? (ye = "oninput" in document, ye || (ze = document.createElement("div"), ze.setAttribute("oninput", "return;"), ye = typeof ze.oninput == "function"), xe = ye) : xe = !1, we = xe && (!document.documentMode || 9 < document.documentMode));
  var xe, ye, ze;
  function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
  }
  function Be(a) {
    if (a.propertyName === "value" && te(qe)) {
      var b = [];
      if (ne(b, qe, a, xb(a)), a = re, Kb)
        a(b);
      else {
        Kb = !0;
        try {
          Gb(a, b);
        } finally {
          Kb = !1, Mb();
        }
      }
    }
  }
  function Ce(a, b, c) {
    a === "focusin" ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : a === "focusout" && Ae();
  }
  function De(a) {
    if (a === "selectionchange" || a === "keyup" || a === "keydown")
      return te(qe);
  }
  function Ee(a, b) {
    if (a === "click")
      return te(b);
  }
  function Fe(a, b) {
    if (a === "input" || a === "change")
      return te(b);
  }
  function Ge(a, b) {
    return a === b && (a !== 0 || 1 / a == 1 / b) || a !== a && b !== b;
  }
  var He = typeof Object.is == "function" ? Object.is : Ge, Ie = Object.prototype.hasOwnProperty;
  function Je(a, b) {
    if (He(a, b))
      return !0;
    if (typeof a != "object" || a === null || typeof b != "object" || b === null)
      return !1;
    var c = Object.keys(a), d = Object.keys(b);
    if (c.length !== d.length)
      return !1;
    for (d = 0; d < c.length; d++)
      if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]]))
        return !1;
    return !0;
  }
  function Ke(a) {
    for (; a && a.firstChild; )
      a = a.firstChild;
    return a;
  }
  function Le(a, b) {
    var c = Ke(a);
    a = 0;
    for (var d; c; ) {
      if (c.nodeType === 3) {
        if (d = a + c.textContent.length, a <= b && d >= b)
          return {node: c, offset: b - a};
        a = d;
      }
      a: {
        for (; c; ) {
          if (c.nextSibling) {
            c = c.nextSibling;
            break a;
          }
          c = c.parentNode;
        }
        c = void 0;
      }
      c = Ke(c);
    }
  }
  function Me(a, b) {
    return a && b ? a === b ? !0 : a && a.nodeType === 3 ? !1 : b && b.nodeType === 3 ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
  }
  function Ne() {
    for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
      try {
        var c = typeof b.contentWindow.location.href == "string";
      } catch (d) {
        c = !1;
      }
      if (c)
        a = b.contentWindow;
      else
        break;
      b = Xa(a.document);
    }
    return b;
  }
  function Oe(a) {
    var b = a && a.nodeName && a.nodeName.toLowerCase();
    return b && (b === "input" && (a.type === "text" || a.type === "search" || a.type === "tel" || a.type === "url" || a.type === "password") || b === "textarea" || a.contentEditable === "true");
  }
  var Pe = fa && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = !1;
  function Ue(a, b, c) {
    var d = c.window === c ? c.document : c.nodeType === 9 ? c : c.ownerDocument;
    Te || Qe == null || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {start: d.selectionStart, end: d.selectionEnd} : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset}), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({event: b, listeners: d}), b.target = Qe)));
  }
  Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
  Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
  Pc(Oc, 2);
  for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++)
    Nc.set(Ve[We], 0);
  ea("onMouseEnter", ["mouseout", "mouseover"]);
  ea("onMouseLeave", ["mouseout", "mouseover"]);
  ea("onPointerEnter", ["pointerout", "pointerover"]);
  ea("onPointerLeave", ["pointerout", "pointerover"]);
  da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
  da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
  da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
  da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
  da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
  da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
  function Ze(a, b, c) {
    var d = a.type || "unknown-event";
    a.currentTarget = c, Yb(d, b, void 0, a), a.currentTarget = null;
  }
  function se(a, b) {
    b = (b & 4) != 0;
    for (var c = 0; c < a.length; c++) {
      var d = a[c], e = d.event;
      d = d.listeners;
      a: {
        var f = void 0;
        if (b)
          for (var g = d.length - 1; 0 <= g; g--) {
            var h = d[g], k = h.instance, l = h.currentTarget;
            if (h = h.listener, k !== f && e.isPropagationStopped())
              break a;
            Ze(e, h, l), f = k;
          }
        else
          for (g = 0; g < d.length; g++) {
            if (h = d[g], k = h.instance, l = h.currentTarget, h = h.listener, k !== f && e.isPropagationStopped())
              break a;
            Ze(e, h, l), f = k;
          }
      }
    }
    if (Ub)
      throw a = Vb, Ub = !1, Vb = null, a;
  }
  function G(a, b) {
    var c = $e(b), d = a + "__bubble";
    c.has(d) || (af(b, a, 2, !1), c.add(d));
  }
  var bf = "_reactListening" + Math.random().toString(36).slice(2);
  function cf(a) {
    a[bf] || (a[bf] = !0, ba.forEach(function(b) {
      Ye.has(b) || df(b, !1, a, null), df(b, !0, a, null);
    }));
  }
  function df(a, b, c, d) {
    var e = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 0, f = c;
    if (a === "selectionchange" && c.nodeType !== 9 && (f = c.ownerDocument), d !== null && !b && Ye.has(a)) {
      if (a !== "scroll")
        return;
      e |= 2, f = d;
    }
    var g = $e(f), h = a + "__" + (b ? "capture" : "bubble");
    g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));
  }
  function af(a, b, c, d) {
    var e = Nc.get(b);
    switch (e === void 0 ? 2 : e) {
      case 0:
        e = gd;
        break;
      case 1:
        e = id;
        break;
      default:
        e = hd;
    }
    c = e.bind(null, b, c, a), e = void 0, !Pb || b !== "touchstart" && b !== "touchmove" && b !== "wheel" || (e = !0), d ? e !== void 0 ? a.addEventListener(b, c, {capture: !0, passive: e}) : a.addEventListener(b, c, !0) : e !== void 0 ? a.addEventListener(b, c, {passive: e}) : a.addEventListener(b, c, !1);
  }
  function jd(a, b, c, d, e) {
    var f = d;
    if ((b & 1) == 0 && (b & 2) == 0 && d !== null)
      a:
        for (; ; ) {
          if (d === null)
            return;
          var g = d.tag;
          if (g === 3 || g === 4) {
            var h = d.stateNode.containerInfo;
            if (h === e || h.nodeType === 8 && h.parentNode === e)
              break;
            if (g === 4)
              for (g = d.return; g !== null; ) {
                var k = g.tag;
                if ((k === 3 || k === 4) && (k = g.stateNode.containerInfo, k === e || k.nodeType === 8 && k.parentNode === e))
                  return;
                g = g.return;
              }
            for (; h !== null; ) {
              if (g = wc(h), g === null)
                return;
              if (k = g.tag, k === 5 || k === 6) {
                d = f = g;
                continue a;
              }
              h = h.parentNode;
            }
          }
          d = d.return;
        }
    Nb(function() {
      var d2 = f, e2 = xb(c), g2 = [];
      a: {
        var h2 = Mc.get(a);
        if (h2 !== void 0) {
          var k2 = td, x = a;
          switch (a) {
            case "keypress":
              if (od(c) === 0)
                break a;
            case "keydown":
            case "keyup":
              k2 = Rd;
              break;
            case "focusin":
              x = "focus", k2 = Fd;
              break;
            case "focusout":
              x = "blur", k2 = Fd;
              break;
            case "beforeblur":
            case "afterblur":
              k2 = Fd;
              break;
            case "click":
              if (c.button === 2)
                break a;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              k2 = Bd;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              k2 = Dd;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              k2 = Vd;
              break;
            case Ic:
            case Jc:
            case Kc:
              k2 = Hd;
              break;
            case Lc:
              k2 = Xd;
              break;
            case "scroll":
              k2 = vd;
              break;
            case "wheel":
              k2 = Zd;
              break;
            case "copy":
            case "cut":
            case "paste":
              k2 = Jd;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              k2 = Td;
          }
          var w = (b & 4) != 0, z = !w && a === "scroll", u = w ? h2 !== null ? h2 + "Capture" : null : h2;
          w = [];
          for (var t = d2, q; t !== null; ) {
            q = t;
            var v = q.stateNode;
            if (q.tag === 5 && v !== null && (q = v, u !== null && (v = Ob(t, u), v != null && w.push(ef(t, v, q)))), z)
              break;
            t = t.return;
          }
          0 < w.length && (h2 = new k2(h2, x, null, c, e2), g2.push({event: h2, listeners: w}));
        }
      }
      if ((b & 7) == 0) {
        a: {
          if (h2 = a === "mouseover" || a === "pointerover", k2 = a === "mouseout" || a === "pointerout", h2 && (b & 16) == 0 && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff]))
            break a;
          if ((k2 || h2) && (h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window, k2 ? (x = c.relatedTarget || c.toElement, k2 = d2, x = x ? wc(x) : null, x !== null && (z = Zb(x), x !== z || x.tag !== 5 && x.tag !== 6) && (x = null)) : (k2 = null, x = d2), k2 !== x)) {
            if (w = Bd, v = "onMouseLeave", u = "onMouseEnter", t = "mouse", (a === "pointerout" || a === "pointerover") && (w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer"), z = k2 == null ? h2 : ue(k2), q = x == null ? h2 : ue(x), h2 = new w(v, t + "leave", k2, c, e2), h2.target = z, h2.relatedTarget = q, v = null, wc(e2) === d2 && (w = new w(u, t + "enter", x, c, e2), w.target = q, w.relatedTarget = z, v = w), z = v, k2 && x)
              b: {
                for (w = k2, u = x, t = 0, q = w; q; q = gf(q))
                  t++;
                for (q = 0, v = u; v; v = gf(v))
                  q++;
                for (; 0 < t - q; )
                  w = gf(w), t--;
                for (; 0 < q - t; )
                  u = gf(u), q--;
                for (; t--; ) {
                  if (w === u || u !== null && w === u.alternate)
                    break b;
                  w = gf(w), u = gf(u);
                }
                w = null;
              }
            else
              w = null;
            k2 !== null && hf(g2, h2, k2, w, !1), x !== null && z !== null && hf(g2, z, x, w, !0);
          }
        }
        a: {
          if (h2 = d2 ? ue(d2) : window, k2 = h2.nodeName && h2.nodeName.toLowerCase(), k2 === "select" || k2 === "input" && h2.type === "file")
            var J = ve;
          else if (me(h2))
            if (we)
              J = Fe;
            else {
              J = De;
              var K = Ce;
            }
          else
            (k2 = h2.nodeName) && k2.toLowerCase() === "input" && (h2.type === "checkbox" || h2.type === "radio") && (J = Ee);
          if (J && (J = J(a, d2))) {
            ne(g2, J, c, e2);
            break a;
          }
          K && K(a, h2, d2), a === "focusout" && (K = h2._wrapperState) && K.controlled && h2.type === "number" && bb(h2, "number", h2.value);
        }
        switch (K = d2 ? ue(d2) : window, a) {
          case "focusin":
            (me(K) || K.contentEditable === "true") && (Qe = K, Re = d2, Se = null);
            break;
          case "focusout":
            Se = Re = Qe = null;
            break;
          case "mousedown":
            Te = !0;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            Te = !1, Ue(g2, c, e2);
            break;
          case "selectionchange":
            if (Pe)
              break;
          case "keydown":
          case "keyup":
            Ue(g2, c, e2);
        }
        var Q;
        if (ae)
          b: {
            switch (a) {
              case "compositionstart":
                var L = "onCompositionStart";
                break b;
              case "compositionend":
                L = "onCompositionEnd";
                break b;
              case "compositionupdate":
                L = "onCompositionUpdate";
                break b;
            }
            L = void 0;
          }
        else
          ie ? ge(a, c) && (L = "onCompositionEnd") : a === "keydown" && c.keyCode === 229 && (L = "onCompositionStart");
        L && (de && c.locale !== "ko" && (ie || L !== "onCompositionStart" ? L === "onCompositionEnd" && ie && (Q = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d2, L), 0 < K.length && (L = new Ld(L, a, null, c, e2), g2.push({event: L, listeners: K}), Q ? L.data = Q : (Q = he(c), Q !== null && (L.data = Q)))), (Q = ce ? je(a, c) : ke(a, c)) && (d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({event: e2, listeners: d2}), e2.data = Q));
      }
      se(g2, b);
    });
  }
  function ef(a, b, c) {
    return {instance: a, listener: b, currentTarget: c};
  }
  function oe(a, b) {
    for (var c = b + "Capture", d = []; a !== null; ) {
      var e = a, f = e.stateNode;
      e.tag === 5 && f !== null && (e = f, f = Ob(a, c), f != null && d.unshift(ef(a, f, e)), f = Ob(a, b), f != null && d.push(ef(a, f, e))), a = a.return;
    }
    return d;
  }
  function gf(a) {
    if (a === null)
      return null;
    do
      a = a.return;
    while (a && a.tag !== 5);
    return a || null;
  }
  function hf(a, b, c, d, e) {
    for (var f = b._reactName, g = []; c !== null && c !== d; ) {
      var h = c, k = h.alternate, l = h.stateNode;
      if (k !== null && k === d)
        break;
      h.tag === 5 && l !== null && (h = l, e ? (k = Ob(c, f), k != null && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), k != null && g.push(ef(c, k, h)))), c = c.return;
    }
    g.length !== 0 && a.push({event: b, listeners: g});
  }
  function jf() {
  }
  var kf = null, lf = null;
  function mf(a, b) {
    switch (a) {
      case "button":
      case "input":
      case "select":
      case "textarea":
        return !!b.autoFocus;
    }
    return !1;
  }
  function nf(a, b) {
    return a === "textarea" || a === "option" || a === "noscript" || typeof b.children == "string" || typeof b.children == "number" || typeof b.dangerouslySetInnerHTML == "object" && b.dangerouslySetInnerHTML !== null && b.dangerouslySetInnerHTML.__html != null;
  }
  var of = typeof setTimeout == "function" ? setTimeout : void 0, pf = typeof clearTimeout == "function" ? clearTimeout : void 0;
  function qf(a) {
    a.nodeType === 1 ? a.textContent = "" : a.nodeType === 9 && (a = a.body, a != null && (a.textContent = ""));
  }
  function rf(a) {
    for (; a != null; a = a.nextSibling) {
      var b = a.nodeType;
      if (b === 1 || b === 3)
        break;
    }
    return a;
  }
  function sf(a) {
    a = a.previousSibling;
    for (var b = 0; a; ) {
      if (a.nodeType === 8) {
        var c = a.data;
        if (c === "$" || c === "$!" || c === "$?") {
          if (b === 0)
            return a;
          b--;
        } else
          c === "/$" && b++;
      }
      a = a.previousSibling;
    }
    return null;
  }
  var tf = 0;
  function uf(a) {
    return {$$typeof: Ga, toString: a, valueOf: a};
  }
  var vf = Math.random().toString(36).slice(2), wf = "__reactFiber$" + vf, xf = "__reactProps$" + vf, ff = "__reactContainer$" + vf, yf = "__reactEvents$" + vf;
  function wc(a) {
    var b = a[wf];
    if (b)
      return b;
    for (var c = a.parentNode; c; ) {
      if (b = c[ff] || c[wf]) {
        if (c = b.alternate, b.child !== null || c !== null && c.child !== null)
          for (a = sf(a); a !== null; ) {
            if (c = a[wf])
              return c;
            a = sf(a);
          }
        return b;
      }
      a = c, c = a.parentNode;
    }
    return null;
  }
  function Cb(a) {
    return a = a[wf] || a[ff], !a || a.tag !== 5 && a.tag !== 6 && a.tag !== 13 && a.tag !== 3 ? null : a;
  }
  function ue(a) {
    if (a.tag === 5 || a.tag === 6)
      return a.stateNode;
    throw Error(y(33));
  }
  function Db(a) {
    return a[xf] || null;
  }
  function $e(a) {
    var b = a[yf];
    return b === void 0 && (b = a[yf] = new Set()), b;
  }
  var zf = [], Af = -1;
  function Bf(a) {
    return {current: a};
  }
  function H(a) {
    0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
  }
  function I(a, b) {
    Af++, zf[Af] = a.current, a.current = b;
  }
  var Cf = {}, M = Bf(Cf), N = Bf(!1), Df = Cf;
  function Ef(a, b) {
    var c = a.type.contextTypes;
    if (!c)
      return Cf;
    var d = a.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
      return d.__reactInternalMemoizedMaskedChildContext;
    var e = {}, f;
    for (f in c)
      e[f] = b[f];
    return d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e), e;
  }
  function Ff(a) {
    return a = a.childContextTypes, a != null;
  }
  function Gf() {
    H(N), H(M);
  }
  function Hf(a, b, c) {
    if (M.current !== Cf)
      throw Error(y(168));
    I(M, b), I(N, c);
  }
  function If(a, b, c) {
    var d = a.stateNode;
    if (a = b.childContextTypes, typeof d.getChildContext != "function")
      return c;
    d = d.getChildContext();
    for (var e in d)
      if (!(e in a))
        throw Error(y(108, Ra(b) || "Unknown", e));
    return m({}, c, d);
  }
  function Jf(a) {
    return a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf, Df = M.current, I(M, a), I(N, N.current), !0;
  }
  function Kf(a, b, c) {
    var d = a.stateNode;
    if (!d)
      throw Error(y(169));
    c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N), I(N, c);
  }
  var Lf = null, Mf = null, Nf = r.unstable_runWithPriority, Of = r.unstable_scheduleCallback, Pf = r.unstable_cancelCallback, Qf = r.unstable_shouldYield, Rf = r.unstable_requestPaint, Sf = r.unstable_now, Tf = r.unstable_getCurrentPriorityLevel, Uf = r.unstable_ImmediatePriority, Vf = r.unstable_UserBlockingPriority, Wf = r.unstable_NormalPriority, Xf = r.unstable_LowPriority, Yf = r.unstable_IdlePriority, Zf = {}, $f = Rf !== void 0 ? Rf : function() {
  }, ag = null, bg = null, cg = !1, dg = Sf(), O = 1e4 > dg ? Sf : function() {
    return Sf() - dg;
  };
  function eg() {
    switch (Tf()) {
      case Uf:
        return 99;
      case Vf:
        return 98;
      case Wf:
        return 97;
      case Xf:
        return 96;
      case Yf:
        return 95;
      default:
        throw Error(y(332));
    }
  }
  function fg(a) {
    switch (a) {
      case 99:
        return Uf;
      case 98:
        return Vf;
      case 97:
        return Wf;
      case 96:
        return Xf;
      case 95:
        return Yf;
      default:
        throw Error(y(332));
    }
  }
  function gg(a, b) {
    return a = fg(a), Nf(a, b);
  }
  function hg(a, b, c) {
    return a = fg(a), Of(a, b, c);
  }
  function ig() {
    if (bg !== null) {
      var a = bg;
      bg = null, Pf(a);
    }
    jg();
  }
  function jg() {
    if (!cg && ag !== null) {
      cg = !0;
      var a = 0;
      try {
        var b = ag;
        gg(99, function() {
          for (; a < b.length; a++) {
            var c = b[a];
            do
              c = c(!0);
            while (c !== null);
          }
        }), ag = null;
      } catch (c) {
        throw ag !== null && (ag = ag.slice(a + 1)), Of(Uf, ig), c;
      } finally {
        cg = !1;
      }
    }
  }
  var kg = ra.ReactCurrentBatchConfig;
  function lg(a, b) {
    if (a && a.defaultProps) {
      b = m({}, b), a = a.defaultProps;
      for (var c in a)
        b[c] === void 0 && (b[c] = a[c]);
      return b;
    }
    return b;
  }
  var mg = Bf(null), ng = null, og = null, pg = null;
  function qg() {
    pg = og = ng = null;
  }
  function rg(a) {
    var b = mg.current;
    H(mg), a.type._context._currentValue = b;
  }
  function sg(a, b) {
    for (; a !== null; ) {
      var c = a.alternate;
      if ((a.childLanes & b) === b) {
        if (c === null || (c.childLanes & b) === b)
          break;
        c.childLanes |= b;
      } else
        a.childLanes |= b, c !== null && (c.childLanes |= b);
      a = a.return;
    }
  }
  function tg(a, b) {
    ng = a, pg = og = null, a = a.dependencies, a !== null && a.firstContext !== null && ((a.lanes & b) != 0 && (ug = !0), a.firstContext = null);
  }
  function vg(a, b) {
    if (pg !== a && b !== !1 && b !== 0)
      if ((typeof b != "number" || b === 1073741823) && (pg = a, b = 1073741823), b = {context: a, observedBits: b, next: null}, og === null) {
        if (ng === null)
          throw Error(y(308));
        og = b, ng.dependencies = {lanes: 0, firstContext: b, responders: null};
      } else
        og = og.next = b;
    return a._currentValue;
  }
  var wg = !1;
  function xg(a) {
    a.updateQueue = {baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: {pending: null}, effects: null};
  }
  function yg(a, b) {
    a = a.updateQueue, b.updateQueue === a && (b.updateQueue = {baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects});
  }
  function zg(a, b) {
    return {eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null};
  }
  function Ag(a, b) {
    if (a = a.updateQueue, a !== null) {
      a = a.shared;
      var c = a.pending;
      c === null ? b.next = b : (b.next = c.next, c.next = b), a.pending = b;
    }
  }
  function Bg(a, b) {
    var c = a.updateQueue, d = a.alternate;
    if (d !== null && (d = d.updateQueue, c === d)) {
      var e = null, f = null;
      if (c = c.firstBaseUpdate, c !== null) {
        do {
          var g = {eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null};
          f === null ? e = f = g : f = f.next = g, c = c.next;
        } while (c !== null);
        f === null ? e = f = b : f = f.next = b;
      } else
        e = f = b;
      c = {baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects}, a.updateQueue = c;
      return;
    }
    a = c.lastBaseUpdate, a === null ? c.firstBaseUpdate = b : a.next = b, c.lastBaseUpdate = b;
  }
  function Cg(a, b, c, d) {
    var e = a.updateQueue;
    wg = !1;
    var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
    if (h !== null) {
      e.shared.pending = null;
      var k = h, l = k.next;
      k.next = null, g === null ? f = l : g.next = l, g = k;
      var n = a.alternate;
      if (n !== null) {
        n = n.updateQueue;
        var A = n.lastBaseUpdate;
        A !== g && (A === null ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);
      }
    }
    if (f !== null) {
      A = e.baseState, g = 0, n = l = k = null;
      do {
        h = f.lane;
        var p = f.eventTime;
        if ((d & h) === h) {
          n !== null && (n = n.next = {
            eventTime: p,
            lane: 0,
            tag: f.tag,
            payload: f.payload,
            callback: f.callback,
            next: null
          });
          a: {
            var C = a, x = f;
            switch (h = b, p = c, x.tag) {
              case 1:
                if (C = x.payload, typeof C == "function") {
                  A = C.call(p, A, h);
                  break a;
                }
                A = C;
                break a;
              case 3:
                C.flags = C.flags & -4097 | 64;
              case 0:
                if (C = x.payload, h = typeof C == "function" ? C.call(p, A, h) : C, h == null)
                  break a;
                A = m({}, A, h);
                break a;
              case 2:
                wg = !0;
            }
          }
          f.callback !== null && (a.flags |= 32, h = e.effects, h === null ? e.effects = [f] : h.push(f));
        } else
          p = {eventTime: p, lane: h, tag: f.tag, payload: f.payload, callback: f.callback, next: null}, n === null ? (l = n = p, k = A) : n = n.next = p, g |= h;
        if (f = f.next, f === null) {
          if (h = e.shared.pending, h === null)
            break;
          f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;
        }
      } while (1);
      n === null && (k = A), e.baseState = k, e.firstBaseUpdate = l, e.lastBaseUpdate = n, Dg |= g, a.lanes = g, a.memoizedState = A;
    }
  }
  function Eg(a, b, c) {
    if (a = b.effects, b.effects = null, a !== null)
      for (b = 0; b < a.length; b++) {
        var d = a[b], e = d.callback;
        if (e !== null) {
          if (d.callback = null, d = c, typeof e != "function")
            throw Error(y(191, e));
          e.call(d);
        }
      }
  }
  var Fg = new aa.Component().refs;
  function Gg(a, b, c, d) {
    b = a.memoizedState, c = c(d, b), c = c == null ? b : m({}, b, c), a.memoizedState = c, a.lanes === 0 && (a.updateQueue.baseState = c);
  }
  var Kg = {isMounted: function(a) {
    return (a = a._reactInternals) ? Zb(a) === a : !1;
  }, enqueueSetState: function(a, b, c) {
    a = a._reactInternals;
    var d = Hg(), e = Ig(a), f = zg(d, e);
    f.payload = b, c != null && (f.callback = c), Ag(a, f), Jg(a, e, d);
  }, enqueueReplaceState: function(a, b, c) {
    a = a._reactInternals;
    var d = Hg(), e = Ig(a), f = zg(d, e);
    f.tag = 1, f.payload = b, c != null && (f.callback = c), Ag(a, f), Jg(a, e, d);
  }, enqueueForceUpdate: function(a, b) {
    a = a._reactInternals;
    var c = Hg(), d = Ig(a), e = zg(c, d);
    e.tag = 2, b != null && (e.callback = b), Ag(a, e), Jg(a, d, c);
  }};
  function Lg(a, b, c, d, e, f, g) {
    return a = a.stateNode, typeof a.shouldComponentUpdate == "function" ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;
  }
  function Mg(a, b, c) {
    var d = !1, e = Cf, f = b.contextType;
    return typeof f == "object" && f !== null ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = d != null) ? Ef(a, e) : Cf), b = new b(c, f), a.memoizedState = b.state !== null && b.state !== void 0 ? b.state : null, b.updater = Kg, a.stateNode = b, b._reactInternals = a, d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f), b;
  }
  function Ng(a, b, c, d) {
    a = b.state, typeof b.componentWillReceiveProps == "function" && b.componentWillReceiveProps(c, d), typeof b.UNSAFE_componentWillReceiveProps == "function" && b.UNSAFE_componentWillReceiveProps(c, d), b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
  }
  function Og(a, b, c, d) {
    var e = a.stateNode;
    e.props = c, e.state = a.memoizedState, e.refs = Fg, xg(a);
    var f = b.contextType;
    typeof f == "object" && f !== null ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f)), Cg(a, c, e, d), e.state = a.memoizedState, f = b.getDerivedStateFromProps, typeof f == "function" && (Gg(a, b, f, c), e.state = a.memoizedState), typeof b.getDerivedStateFromProps == "function" || typeof e.getSnapshotBeforeUpdate == "function" || typeof e.UNSAFE_componentWillMount != "function" && typeof e.componentWillMount != "function" || (b = e.state, typeof e.componentWillMount == "function" && e.componentWillMount(), typeof e.UNSAFE_componentWillMount == "function" && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState), typeof e.componentDidMount == "function" && (a.flags |= 4);
  }
  var Pg = Array.isArray;
  function Qg(a, b, c) {
    if (a = c.ref, a !== null && typeof a != "function" && typeof a != "object") {
      if (c._owner) {
        if (c = c._owner, c) {
          if (c.tag !== 1)
            throw Error(y(309));
          var d = c.stateNode;
        }
        if (!d)
          throw Error(y(147, a));
        var e = "" + a;
        return b !== null && b.ref !== null && typeof b.ref == "function" && b.ref._stringRef === e ? b.ref : (b = function(a2) {
          var b2 = d.refs;
          b2 === Fg && (b2 = d.refs = {}), a2 === null ? delete b2[e] : b2[e] = a2;
        }, b._stringRef = e, b);
      }
      if (typeof a != "string")
        throw Error(y(284));
      if (!c._owner)
        throw Error(y(290, a));
    }
    return a;
  }
  function Rg(a, b) {
    if (a.type !== "textarea")
      throw Error(y(31, Object.prototype.toString.call(b) === "[object Object]" ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
  }
  function Sg(a) {
    function b(b2, c2) {
      if (a) {
        var d2 = b2.lastEffect;
        d2 !== null ? (d2.nextEffect = c2, b2.lastEffect = c2) : b2.firstEffect = b2.lastEffect = c2, c2.nextEffect = null, c2.flags = 8;
      }
    }
    function c(c2, d2) {
      if (!a)
        return null;
      for (; d2 !== null; )
        b(c2, d2), d2 = d2.sibling;
      return null;
    }
    function d(a2, b2) {
      for (a2 = new Map(); b2 !== null; )
        b2.key !== null ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
      return a2;
    }
    function e(a2, b2) {
      return a2 = Tg(a2, b2), a2.index = 0, a2.sibling = null, a2;
    }
    function f(b2, c2, d2) {
      return b2.index = d2, a ? (d2 = b2.alternate, d2 !== null ? (d2 = d2.index, d2 < c2 ? (b2.flags = 2, c2) : d2) : (b2.flags = 2, c2)) : c2;
    }
    function g(b2) {
      return a && b2.alternate === null && (b2.flags = 2), b2;
    }
    function h(a2, b2, c2, d2) {
      return b2 === null || b2.tag !== 6 ? (b2 = Ug(c2, a2.mode, d2), b2.return = a2, b2) : (b2 = e(b2, c2), b2.return = a2, b2);
    }
    function k(a2, b2, c2, d2) {
      return b2 !== null && b2.elementType === c2.type ? (d2 = e(b2, c2.props), d2.ref = Qg(a2, b2, c2), d2.return = a2, d2) : (d2 = Vg(c2.type, c2.key, c2.props, null, a2.mode, d2), d2.ref = Qg(a2, b2, c2), d2.return = a2, d2);
    }
    function l(a2, b2, c2, d2) {
      return b2 === null || b2.tag !== 4 || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation ? (b2 = Wg(c2, a2.mode, d2), b2.return = a2, b2) : (b2 = e(b2, c2.children || []), b2.return = a2, b2);
    }
    function n(a2, b2, c2, d2, f2) {
      return b2 === null || b2.tag !== 7 ? (b2 = Xg(c2, a2.mode, d2, f2), b2.return = a2, b2) : (b2 = e(b2, c2), b2.return = a2, b2);
    }
    function A(a2, b2, c2) {
      if (typeof b2 == "string" || typeof b2 == "number")
        return b2 = Ug("" + b2, a2.mode, c2), b2.return = a2, b2;
      if (typeof b2 == "object" && b2 !== null) {
        switch (b2.$$typeof) {
          case sa:
            return c2 = Vg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Qg(a2, null, b2), c2.return = a2, c2;
          case ta:
            return b2 = Wg(b2, a2.mode, c2), b2.return = a2, b2;
        }
        if (Pg(b2) || La(b2))
          return b2 = Xg(b2, a2.mode, c2, null), b2.return = a2, b2;
        Rg(a2, b2);
      }
      return null;
    }
    function p(a2, b2, c2, d2) {
      var e2 = b2 !== null ? b2.key : null;
      if (typeof c2 == "string" || typeof c2 == "number")
        return e2 !== null ? null : h(a2, b2, "" + c2, d2);
      if (typeof c2 == "object" && c2 !== null) {
        switch (c2.$$typeof) {
          case sa:
            return c2.key === e2 ? c2.type === ua ? n(a2, b2, c2.props.children, d2, e2) : k(a2, b2, c2, d2) : null;
          case ta:
            return c2.key === e2 ? l(a2, b2, c2, d2) : null;
        }
        if (Pg(c2) || La(c2))
          return e2 !== null ? null : n(a2, b2, c2, d2, null);
        Rg(a2, c2);
      }
      return null;
    }
    function C(a2, b2, c2, d2, e2) {
      if (typeof d2 == "string" || typeof d2 == "number")
        return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
      if (typeof d2 == "object" && d2 !== null) {
        switch (d2.$$typeof) {
          case sa:
            return a2 = a2.get(d2.key === null ? c2 : d2.key) || null, d2.type === ua ? n(b2, a2, d2.props.children, e2, d2.key) : k(b2, a2, d2, e2);
          case ta:
            return a2 = a2.get(d2.key === null ? c2 : d2.key) || null, l(b2, a2, d2, e2);
        }
        if (Pg(d2) || La(d2))
          return a2 = a2.get(c2) || null, n(b2, a2, d2, e2, null);
        Rg(b2, d2);
      }
      return null;
    }
    function x(e2, g2, h2, k2) {
      for (var l2 = null, t = null, u = g2, z = g2 = 0, q = null; u !== null && z < h2.length; z++) {
        u.index > z ? (q = u, u = null) : q = u.sibling;
        var n2 = p(e2, u, h2[z], k2);
        if (n2 === null) {
          u === null && (u = q);
          break;
        }
        a && u && n2.alternate === null && b(e2, u), g2 = f(n2, g2, z), t === null ? l2 = n2 : t.sibling = n2, t = n2, u = q;
      }
      if (z === h2.length)
        return c(e2, u), l2;
      if (u === null) {
        for (; z < h2.length; z++)
          u = A(e2, h2[z], k2), u !== null && (g2 = f(u, g2, z), t === null ? l2 = u : t.sibling = u, t = u);
        return l2;
      }
      for (u = d(e2, u); z < h2.length; z++)
        q = C(u, e2, z, h2[z], k2), q !== null && (a && q.alternate !== null && u.delete(q.key === null ? z : q.key), g2 = f(q, g2, z), t === null ? l2 = q : t.sibling = q, t = q);
      return a && u.forEach(function(a2) {
        return b(e2, a2);
      }), l2;
    }
    function w(e2, g2, h2, k2) {
      var l2 = La(h2);
      if (typeof l2 != "function")
        throw Error(y(150));
      if (h2 = l2.call(h2), h2 == null)
        throw Error(y(151));
      for (var t = l2 = null, u = g2, z = g2 = 0, q = null, n2 = h2.next(); u !== null && !n2.done; z++, n2 = h2.next()) {
        u.index > z ? (q = u, u = null) : q = u.sibling;
        var w2 = p(e2, u, n2.value, k2);
        if (w2 === null) {
          u === null && (u = q);
          break;
        }
        a && u && w2.alternate === null && b(e2, u), g2 = f(w2, g2, z), t === null ? l2 = w2 : t.sibling = w2, t = w2, u = q;
      }
      if (n2.done)
        return c(e2, u), l2;
      if (u === null) {
        for (; !n2.done; z++, n2 = h2.next())
          n2 = A(e2, n2.value, k2), n2 !== null && (g2 = f(n2, g2, z), t === null ? l2 = n2 : t.sibling = n2, t = n2);
        return l2;
      }
      for (u = d(e2, u); !n2.done; z++, n2 = h2.next())
        n2 = C(u, e2, z, n2.value, k2), n2 !== null && (a && n2.alternate !== null && u.delete(n2.key === null ? z : n2.key), g2 = f(n2, g2, z), t === null ? l2 = n2 : t.sibling = n2, t = n2);
      return a && u.forEach(function(a2) {
        return b(e2, a2);
      }), l2;
    }
    return function(a2, d2, f2, h2) {
      var k2 = typeof f2 == "object" && f2 !== null && f2.type === ua && f2.key === null;
      k2 && (f2 = f2.props.children);
      var l2 = typeof f2 == "object" && f2 !== null;
      if (l2)
        switch (f2.$$typeof) {
          case sa:
            a: {
              for (l2 = f2.key, k2 = d2; k2 !== null; ) {
                if (k2.key === l2) {
                  switch (k2.tag) {
                    case 7:
                      if (f2.type === ua) {
                        c(a2, k2.sibling), d2 = e(k2, f2.props.children), d2.return = a2, a2 = d2;
                        break a;
                      }
                      break;
                    default:
                      if (k2.elementType === f2.type) {
                        c(a2, k2.sibling), d2 = e(k2, f2.props), d2.ref = Qg(a2, k2, f2), d2.return = a2, a2 = d2;
                        break a;
                      }
                  }
                  c(a2, k2);
                  break;
                } else
                  b(a2, k2);
                k2 = k2.sibling;
              }
              f2.type === ua ? (d2 = Xg(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = Vg(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = Qg(a2, d2, f2), h2.return = a2, a2 = h2);
            }
            return g(a2);
          case ta:
            a: {
              for (k2 = f2.key; d2 !== null; ) {
                if (d2.key === k2)
                  if (d2.tag === 4 && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                    c(a2, d2.sibling), d2 = e(d2, f2.children || []), d2.return = a2, a2 = d2;
                    break a;
                  } else {
                    c(a2, d2);
                    break;
                  }
                else
                  b(a2, d2);
                d2 = d2.sibling;
              }
              d2 = Wg(f2, a2.mode, h2), d2.return = a2, a2 = d2;
            }
            return g(a2);
        }
      if (typeof f2 == "string" || typeof f2 == "number")
        return f2 = "" + f2, d2 !== null && d2.tag === 6 ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Ug(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2);
      if (Pg(f2))
        return x(a2, d2, f2, h2);
      if (La(f2))
        return w(a2, d2, f2, h2);
      if (l2 && Rg(a2, f2), typeof f2 == "undefined" && !k2)
        switch (a2.tag) {
          case 1:
          case 22:
          case 0:
          case 11:
          case 15:
            throw Error(y(152, Ra(a2.type) || "Component"));
        }
      return c(a2, d2);
    };
  }
  var Yg = Sg(!0), Zg = Sg(!1), $g = {}, ah = Bf($g), bh = Bf($g), ch = Bf($g);
  function dh(a) {
    if (a === $g)
      throw Error(y(174));
    return a;
  }
  function eh(a, b) {
    switch (I(ch, b), I(bh, a), I(ah, $g), a = b.nodeType, a) {
      case 9:
      case 11:
        b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
        break;
      default:
        a = a === 8 ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);
    }
    H(ah), I(ah, b);
  }
  function fh() {
    H(ah), H(bh), H(ch);
  }
  function gh(a) {
    dh(ch.current);
    var b = dh(ah.current), c = mb(b, a.type);
    b !== c && (I(bh, a), I(ah, c));
  }
  function hh(a) {
    bh.current === a && (H(ah), H(bh));
  }
  var P = Bf(0);
  function ih(a) {
    for (var b = a; b !== null; ) {
      if (b.tag === 13) {
        var c = b.memoizedState;
        if (c !== null && (c = c.dehydrated, c === null || c.data === "$?" || c.data === "$!"))
          return b;
      } else if (b.tag === 19 && b.memoizedProps.revealOrder !== void 0) {
        if ((b.flags & 64) != 0)
          return b;
      } else if (b.child !== null) {
        b.child.return = b, b = b.child;
        continue;
      }
      if (b === a)
        break;
      for (; b.sibling === null; ) {
        if (b.return === null || b.return === a)
          return null;
        b = b.return;
      }
      b.sibling.return = b.return, b = b.sibling;
    }
    return null;
  }
  var jh = null, kh = null, lh = !1;
  function mh(a, b) {
    var c = nh(5, null, null, 0);
    c.elementType = "DELETED", c.type = "DELETED", c.stateNode = b, c.return = a, c.flags = 8, a.lastEffect !== null ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
  }
  function oh(a, b) {
    switch (a.tag) {
      case 5:
        var c = a.type;
        return b = b.nodeType !== 1 || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b, b !== null ? (a.stateNode = b, !0) : !1;
      case 6:
        return b = a.pendingProps === "" || b.nodeType !== 3 ? null : b, b !== null ? (a.stateNode = b, !0) : !1;
      case 13:
        return !1;
      default:
        return !1;
    }
  }
  function ph(a) {
    if (lh) {
      var b = kh;
      if (b) {
        var c = b;
        if (!oh(a, b)) {
          if (b = rf(c.nextSibling), !b || !oh(a, b)) {
            a.flags = a.flags & -1025 | 2, lh = !1, jh = a;
            return;
          }
          mh(jh, c);
        }
        jh = a, kh = rf(b.firstChild);
      } else
        a.flags = a.flags & -1025 | 2, lh = !1, jh = a;
    }
  }
  function qh(a) {
    for (a = a.return; a !== null && a.tag !== 5 && a.tag !== 3 && a.tag !== 13; )
      a = a.return;
    jh = a;
  }
  function rh(a) {
    if (a !== jh)
      return !1;
    if (!lh)
      return qh(a), lh = !0, !1;
    var b = a.type;
    if (a.tag !== 5 || b !== "head" && b !== "body" && !nf(b, a.memoizedProps))
      for (b = kh; b; )
        mh(a, b), b = rf(b.nextSibling);
    if (qh(a), a.tag === 13) {
      if (a = a.memoizedState, a = a !== null ? a.dehydrated : null, !a)
        throw Error(y(317));
      a: {
        for (a = a.nextSibling, b = 0; a; ) {
          if (a.nodeType === 8) {
            var c = a.data;
            if (c === "/$") {
              if (b === 0) {
                kh = rf(a.nextSibling);
                break a;
              }
              b--;
            } else
              c !== "$" && c !== "$!" && c !== "$?" || b++;
          }
          a = a.nextSibling;
        }
        kh = null;
      }
    } else
      kh = jh ? rf(a.stateNode.nextSibling) : null;
    return !0;
  }
  function sh() {
    kh = jh = null, lh = !1;
  }
  var th = [];
  function uh() {
    for (var a = 0; a < th.length; a++)
      th[a]._workInProgressVersionPrimary = null;
    th.length = 0;
  }
  var vh = ra.ReactCurrentDispatcher, wh = ra.ReactCurrentBatchConfig, xh = 0, R = null, S = null, T = null, yh = !1, zh = !1;
  function Ah() {
    throw Error(y(321));
  }
  function Bh(a, b) {
    if (b === null)
      return !1;
    for (var c = 0; c < b.length && c < a.length; c++)
      if (!He(a[c], b[c]))
        return !1;
    return !0;
  }
  function Ch(a, b, c, d, e, f) {
    if (xh = f, R = b, b.memoizedState = null, b.updateQueue = null, b.lanes = 0, vh.current = a === null || a.memoizedState === null ? Dh : Eh, a = c(d, e), zh) {
      f = 0;
      do {
        if (zh = !1, !(25 > f))
          throw Error(y(301));
        f += 1, T = S = null, b.updateQueue = null, vh.current = Fh, a = c(d, e);
      } while (zh);
    }
    if (vh.current = Gh, b = S !== null && S.next !== null, xh = 0, T = S = R = null, yh = !1, b)
      throw Error(y(300));
    return a;
  }
  function Hh() {
    var a = {memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null};
    return T === null ? R.memoizedState = T = a : T = T.next = a, T;
  }
  function Ih() {
    if (S === null) {
      var a = R.alternate;
      a = a !== null ? a.memoizedState : null;
    } else
      a = S.next;
    var b = T === null ? R.memoizedState : T.next;
    if (b !== null)
      T = b, S = a;
    else {
      if (a === null)
        throw Error(y(310));
      S = a, a = {memoizedState: S.memoizedState, baseState: S.baseState, baseQueue: S.baseQueue, queue: S.queue, next: null}, T === null ? R.memoizedState = T = a : T = T.next = a;
    }
    return T;
  }
  function Jh(a, b) {
    return typeof b == "function" ? b(a) : b;
  }
  function Kh(a) {
    var b = Ih(), c = b.queue;
    if (c === null)
      throw Error(y(311));
    c.lastRenderedReducer = a;
    var d = S, e = d.baseQueue, f = c.pending;
    if (f !== null) {
      if (e !== null) {
        var g = e.next;
        e.next = f.next, f.next = g;
      }
      d.baseQueue = e = f, c.pending = null;
    }
    if (e !== null) {
      e = e.next, d = d.baseState;
      var h = g = f = null, k = e;
      do {
        var l = k.lane;
        if ((xh & l) === l)
          h !== null && (h = h.next = {lane: 0, action: k.action, eagerReducer: k.eagerReducer, eagerState: k.eagerState, next: null}), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);
        else {
          var n = {
            lane: l,
            action: k.action,
            eagerReducer: k.eagerReducer,
            eagerState: k.eagerState,
            next: null
          };
          h === null ? (g = h = n, f = d) : h = h.next = n, R.lanes |= l, Dg |= l;
        }
        k = k.next;
      } while (k !== null && k !== e);
      h === null ? f = d : h.next = g, He(d, b.memoizedState) || (ug = !0), b.memoizedState = d, b.baseState = f, b.baseQueue = h, c.lastRenderedState = d;
    }
    return [b.memoizedState, c.dispatch];
  }
  function Lh(a) {
    var b = Ih(), c = b.queue;
    if (c === null)
      throw Error(y(311));
    c.lastRenderedReducer = a;
    var d = c.dispatch, e = c.pending, f = b.memoizedState;
    if (e !== null) {
      c.pending = null;
      var g = e = e.next;
      do
        f = a(f, g.action), g = g.next;
      while (g !== e);
      He(f, b.memoizedState) || (ug = !0), b.memoizedState = f, b.baseQueue === null && (b.baseState = f), c.lastRenderedState = f;
    }
    return [f, d];
  }
  function Mh(a, b, c) {
    var d = b._getVersion;
    d = d(b._source);
    var e = b._workInProgressVersionPrimary;
    if (e !== null ? a = e === d : (a = a.mutableReadLanes, (a = (xh & a) === a) && (b._workInProgressVersionPrimary = d, th.push(b))), a)
      return c(b._source);
    throw th.push(b), Error(y(350));
  }
  function Nh(a, b, c, d) {
    var e = U;
    if (e === null)
      throw Error(y(349));
    var f = b._getVersion, g = f(b._source), h = vh.current, k = h.useState(function() {
      return Mh(e, b, c);
    }), l = k[1], n = k[0];
    k = T;
    var A = a.memoizedState, p = A.refs, C = p.getSnapshot, x = A.source;
    A = A.subscribe;
    var w = R;
    return a.memoizedState = {refs: p, source: b, subscribe: d}, h.useEffect(function() {
      p.getSnapshot = c, p.setSnapshot = l;
      var a2 = f(b._source);
      if (!He(g, a2)) {
        a2 = c(b._source), He(n, a2) || (l(a2), a2 = Ig(w), e.mutableReadLanes |= a2 & e.pendingLanes), a2 = e.mutableReadLanes, e.entangledLanes |= a2;
        for (var d2 = e.entanglements, h2 = a2; 0 < h2; ) {
          var k2 = 31 - Vc(h2), v = 1 << k2;
          d2[k2] |= a2, h2 &= ~v;
        }
      }
    }, [c, b, d]), h.useEffect(function() {
      return d(b._source, function() {
        var a2 = p.getSnapshot, c2 = p.setSnapshot;
        try {
          c2(a2(b._source));
          var d2 = Ig(w);
          e.mutableReadLanes |= d2 & e.pendingLanes;
        } catch (q) {
          c2(function() {
            throw q;
          });
        }
      });
    }, [b, d]), He(C, c) && He(x, b) && He(A, d) || (a = {pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: n}, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n), n;
  }
  function Ph(a, b, c) {
    var d = Ih();
    return Nh(d, a, b, c);
  }
  function Qh(a) {
    var b = Hh();
    return typeof a == "function" && (a = a()), b.memoizedState = b.baseState = a, a = b.queue = {pending: null, dispatch: null, lastRenderedReducer: Jh, lastRenderedState: a}, a = a.dispatch = Oh.bind(null, R, a), [b.memoizedState, a];
  }
  function Rh(a, b, c, d) {
    return a = {tag: a, create: b, destroy: c, deps: d, next: null}, b = R.updateQueue, b === null ? (b = {lastEffect: null}, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, c === null ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a)), a;
  }
  function Sh(a) {
    var b = Hh();
    return a = {current: a}, b.memoizedState = a;
  }
  function Th() {
    return Ih().memoizedState;
  }
  function Uh(a, b, c, d) {
    var e = Hh();
    R.flags |= a, e.memoizedState = Rh(1 | b, c, void 0, d === void 0 ? null : d);
  }
  function Vh(a, b, c, d) {
    var e = Ih();
    d = d === void 0 ? null : d;
    var f = void 0;
    if (S !== null) {
      var g = S.memoizedState;
      if (f = g.destroy, d !== null && Bh(d, g.deps)) {
        Rh(b, c, f, d);
        return;
      }
    }
    R.flags |= a, e.memoizedState = Rh(1 | b, c, f, d);
  }
  function Wh(a, b) {
    return Uh(516, 4, a, b);
  }
  function Xh(a, b) {
    return Vh(516, 4, a, b);
  }
  function Yh(a, b) {
    return Vh(4, 2, a, b);
  }
  function Zh(a, b) {
    if (typeof b == "function")
      return a = a(), b(a), function() {
        b(null);
      };
    if (b != null)
      return a = a(), b.current = a, function() {
        b.current = null;
      };
  }
  function $h(a, b, c) {
    return c = c != null ? c.concat([a]) : null, Vh(4, 2, Zh.bind(null, b, a), c);
  }
  function ai() {
  }
  function bi(a, b) {
    var c = Ih();
    b = b === void 0 ? null : b;
    var d = c.memoizedState;
    return d !== null && b !== null && Bh(b, d[1]) ? d[0] : (c.memoizedState = [a, b], a);
  }
  function ci(a, b) {
    var c = Ih();
    b = b === void 0 ? null : b;
    var d = c.memoizedState;
    return d !== null && b !== null && Bh(b, d[1]) ? d[0] : (a = a(), c.memoizedState = [a, b], a);
  }
  function di(a, b) {
    var c = eg();
    gg(98 > c ? 98 : c, function() {
      a(!0);
    }), gg(97 < c ? 97 : c, function() {
      var c2 = wh.transition;
      wh.transition = 1;
      try {
        a(!1), b();
      } finally {
        wh.transition = c2;
      }
    });
  }
  function Oh(a, b, c) {
    var d = Hg(), e = Ig(a), f = {lane: e, action: c, eagerReducer: null, eagerState: null, next: null}, g = b.pending;
    if (g === null ? f.next = f : (f.next = g.next, g.next = f), b.pending = f, g = a.alternate, a === R || g !== null && g === R)
      zh = yh = !0;
    else {
      if (a.lanes === 0 && (g === null || g.lanes === 0) && (g = b.lastRenderedReducer, g !== null))
        try {
          var h = b.lastRenderedState, k = g(h, c);
          if (f.eagerReducer = g, f.eagerState = k, He(k, h))
            return;
        } catch (l) {
        } finally {
        }
      Jg(a, e, d);
    }
  }
  var Gh = {readContext: vg, useCallback: Ah, useContext: Ah, useEffect: Ah, useImperativeHandle: Ah, useLayoutEffect: Ah, useMemo: Ah, useReducer: Ah, useRef: Ah, useState: Ah, useDebugValue: Ah, useDeferredValue: Ah, useTransition: Ah, useMutableSource: Ah, useOpaqueIdentifier: Ah, unstable_isNewReconciler: !1}, Dh = {readContext: vg, useCallback: function(a, b) {
    return Hh().memoizedState = [a, b === void 0 ? null : b], a;
  }, useContext: vg, useEffect: Wh, useImperativeHandle: function(a, b, c) {
    return c = c != null ? c.concat([a]) : null, Uh(4, 2, Zh.bind(null, b, a), c);
  }, useLayoutEffect: function(a, b) {
    return Uh(4, 2, a, b);
  }, useMemo: function(a, b) {
    var c = Hh();
    return b = b === void 0 ? null : b, a = a(), c.memoizedState = [a, b], a;
  }, useReducer: function(a, b, c) {
    var d = Hh();
    return b = c !== void 0 ? c(b) : b, d.memoizedState = d.baseState = b, a = d.queue = {pending: null, dispatch: null, lastRenderedReducer: a, lastRenderedState: b}, a = a.dispatch = Oh.bind(null, R, a), [d.memoizedState, a];
  }, useRef: Sh, useState: Qh, useDebugValue: ai, useDeferredValue: function(a) {
    var b = Qh(a), c = b[0], d = b[1];
    return Wh(function() {
      var b2 = wh.transition;
      wh.transition = 1;
      try {
        d(a);
      } finally {
        wh.transition = b2;
      }
    }, [a]), c;
  }, useTransition: function() {
    var a = Qh(!1), b = a[0];
    return a = di.bind(null, a[1]), Sh(a), [a, b];
  }, useMutableSource: function(a, b, c) {
    var d = Hh();
    return d.memoizedState = {refs: {getSnapshot: b, setSnapshot: null}, source: a, subscribe: c}, Nh(d, a, b, c);
  }, useOpaqueIdentifier: function() {
    if (lh) {
      var a = !1, b = uf(function() {
        throw a || (a = !0, c("r:" + (tf++).toString(36))), Error(y(355));
      }), c = Qh(b)[1];
      return (R.mode & 2) == 0 && (R.flags |= 516, Rh(5, function() {
        c("r:" + (tf++).toString(36));
      }, void 0, null)), b;
    }
    return b = "r:" + (tf++).toString(36), Qh(b), b;
  }, unstable_isNewReconciler: !1}, Eh = {readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Kh, useRef: Th, useState: function() {
    return Kh(Jh);
  }, useDebugValue: ai, useDeferredValue: function(a) {
    var b = Kh(Jh), c = b[0], d = b[1];
    return Xh(function() {
      var b2 = wh.transition;
      wh.transition = 1;
      try {
        d(a);
      } finally {
        wh.transition = b2;
      }
    }, [a]), c;
  }, useTransition: function() {
    var a = Kh(Jh)[0];
    return [
      Th().current,
      a
    ];
  }, useMutableSource: Ph, useOpaqueIdentifier: function() {
    return Kh(Jh)[0];
  }, unstable_isNewReconciler: !1}, Fh = {readContext: vg, useCallback: bi, useContext: vg, useEffect: Xh, useImperativeHandle: $h, useLayoutEffect: Yh, useMemo: ci, useReducer: Lh, useRef: Th, useState: function() {
    return Lh(Jh);
  }, useDebugValue: ai, useDeferredValue: function(a) {
    var b = Lh(Jh), c = b[0], d = b[1];
    return Xh(function() {
      var b2 = wh.transition;
      wh.transition = 1;
      try {
        d(a);
      } finally {
        wh.transition = b2;
      }
    }, [a]), c;
  }, useTransition: function() {
    var a = Lh(Jh)[0];
    return [
      Th().current,
      a
    ];
  }, useMutableSource: Ph, useOpaqueIdentifier: function() {
    return Lh(Jh)[0];
  }, unstable_isNewReconciler: !1}, ei = ra.ReactCurrentOwner, ug = !1;
  function fi(a, b, c, d) {
    b.child = a === null ? Zg(b, null, c, d) : Yg(b, a.child, c, d);
  }
  function gi(a, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    return tg(b, e), d = Ch(a, b, c, d, f, e), a !== null && !ug ? (b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e)) : (b.flags |= 1, fi(a, b, d, e), b.child);
  }
  function ii(a, b, c, d, e, f) {
    if (a === null) {
      var g = c.type;
      return typeof g == "function" && !ji(g) && g.defaultProps === void 0 && c.compare === null && c.defaultProps === void 0 ? (b.tag = 15, b.type = g, ki(a, b, g, d, e, f)) : (a = Vg(c.type, null, d, b, b.mode, f), a.ref = b.ref, a.return = b, b.child = a);
    }
    return g = a.child, (e & f) == 0 && (e = g.memoizedProps, c = c.compare, c = c !== null ? c : Je, c(e, d) && a.ref === b.ref) ? hi(a, b, f) : (b.flags |= 1, a = Tg(g, d), a.ref = b.ref, a.return = b, b.child = a);
  }
  function ki(a, b, c, d, e, f) {
    if (a !== null && Je(a.memoizedProps, d) && a.ref === b.ref)
      if (ug = !1, (f & e) != 0)
        (a.flags & 16384) != 0 && (ug = !0);
      else
        return b.lanes = a.lanes, hi(a, b, f);
    return li(a, b, c, d, f);
  }
  function mi(a, b, c) {
    var d = b.pendingProps, e = d.children, f = a !== null ? a.memoizedState : null;
    if (d.mode === "hidden" || d.mode === "unstable-defer-without-hiding")
      if ((b.mode & 4) == 0)
        b.memoizedState = {baseLanes: 0}, ni(b, c);
      else if ((c & 1073741824) != 0)
        b.memoizedState = {baseLanes: 0}, ni(b, f !== null ? f.baseLanes : c);
      else
        return a = f !== null ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {baseLanes: a}, ni(b, a), null;
    else
      f !== null ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);
    return fi(a, b, e, c), b.child;
  }
  function oi(a, b) {
    var c = b.ref;
    (a === null && c !== null || a !== null && a.ref !== c) && (b.flags |= 128);
  }
  function li(a, b, c, d, e) {
    var f = Ff(c) ? Df : M.current;
    return f = Ef(b, f), tg(b, e), c = Ch(a, b, c, d, f, e), a !== null && !ug ? (b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e)) : (b.flags |= 1, fi(a, b, c, e), b.child);
  }
  function pi(a, b, c, d, e) {
    if (Ff(c)) {
      var f = !0;
      Jf(b);
    } else
      f = !1;
    if (tg(b, e), b.stateNode === null)
      a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;
    else if (a === null) {
      var g = b.stateNode, h = b.memoizedProps;
      g.props = h;
      var k = g.context, l = c.contextType;
      typeof l == "object" && l !== null ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));
      var n = c.getDerivedStateFromProps, A = typeof n == "function" || typeof g.getSnapshotBeforeUpdate == "function";
      A || typeof g.UNSAFE_componentWillReceiveProps != "function" && typeof g.componentWillReceiveProps != "function" || (h !== d || k !== l) && Ng(b, g, d, l), wg = !1;
      var p = b.memoizedState;
      g.state = p, Cg(b, d, g, e), k = b.memoizedState, h !== d || p !== k || N.current || wg ? (typeof n == "function" && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || typeof g.UNSAFE_componentWillMount != "function" && typeof g.componentWillMount != "function" || (typeof g.componentWillMount == "function" && g.componentWillMount(), typeof g.UNSAFE_componentWillMount == "function" && g.UNSAFE_componentWillMount()), typeof g.componentDidMount == "function" && (b.flags |= 4)) : (typeof g.componentDidMount == "function" && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : (typeof g.componentDidMount == "function" && (b.flags |= 4), d = !1);
    } else {
      g = b.stateNode, yg(a, b), h = b.memoizedProps, l = b.type === b.elementType ? h : lg(b.type, h), g.props = l, A = b.pendingProps, p = g.context, k = c.contextType, typeof k == "object" && k !== null ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
      var C = c.getDerivedStateFromProps;
      (n = typeof C == "function" || typeof g.getSnapshotBeforeUpdate == "function") || typeof g.UNSAFE_componentWillReceiveProps != "function" && typeof g.componentWillReceiveProps != "function" || (h !== A || p !== k) && Ng(b, g, d, k), wg = !1, p = b.memoizedState, g.state = p, Cg(b, d, g, e);
      var x = b.memoizedState;
      h !== A || p !== x || N.current || wg ? (typeof C == "function" && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || typeof g.UNSAFE_componentWillUpdate != "function" && typeof g.componentWillUpdate != "function" || (typeof g.componentWillUpdate == "function" && g.componentWillUpdate(d, x, k), typeof g.UNSAFE_componentWillUpdate == "function" && g.UNSAFE_componentWillUpdate(d, x, k)), typeof g.componentDidUpdate == "function" && (b.flags |= 4), typeof g.getSnapshotBeforeUpdate == "function" && (b.flags |= 256)) : (typeof g.componentDidUpdate != "function" || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), typeof g.getSnapshotBeforeUpdate != "function" || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : (typeof g.componentDidUpdate != "function" || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), typeof g.getSnapshotBeforeUpdate != "function" || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);
    }
    return qi(a, b, c, d, f, e);
  }
  function qi(a, b, c, d, e, f) {
    oi(a, b);
    var g = (b.flags & 64) != 0;
    if (!d && !g)
      return e && Kf(b, c, !1), hi(a, b, f);
    d = b.stateNode, ei.current = b;
    var h = g && typeof c.getDerivedStateFromError != "function" ? null : d.render();
    return b.flags |= 1, a !== null && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f), b.memoizedState = d.state, e && Kf(b, c, !0), b.child;
  }
  function ri(a) {
    var b = a.stateNode;
    b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1), eh(a, b.containerInfo);
  }
  var si = {dehydrated: null, retryLane: 0};
  function ti(a, b, c) {
    var d = b.pendingProps, e = P.current, f = !1, g;
    return (g = (b.flags & 64) != 0) || (g = a !== null && a.memoizedState === null ? !1 : (e & 2) != 0), g ? (f = !0, b.flags &= -65) : a !== null && a.memoizedState === null || d.fallback === void 0 || d.unstable_avoidThisFallback === !0 || (e |= 1), I(P, e & 1), a === null ? (d.fallback !== void 0 && ph(b), a = d.children, e = d.fallback, f ? (a = ui(b, a, e, c), b.child.memoizedState = {baseLanes: c}, b.memoizedState = si, a) : typeof d.unstable_expectedLoadTime == "number" ? (a = ui(b, a, e, c), b.child.memoizedState = {baseLanes: c}, b.memoizedState = si, b.lanes = 33554432, a) : (c = vi({mode: "visible", children: a}, b.mode, c, null), c.return = b, b.child = c)) : a.memoizedState !== null ? f ? (d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = e === null ? {baseLanes: c} : {baseLanes: e.baseLanes | c}, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d) : (c = xi(a, b, d.children, c), b.memoizedState = null, c) : f ? (d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = e === null ? {baseLanes: c} : {baseLanes: e.baseLanes | c}, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d) : (c = xi(a, b, d.children, c), b.memoizedState = null, c);
  }
  function ui(a, b, c, d) {
    var e = a.mode, f = a.child;
    return b = {mode: "hidden", children: b}, (e & 2) == 0 && f !== null ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null), c = Xg(c, e, d, null), f.return = a, c.return = a, f.sibling = c, a.child = f, c;
  }
  function xi(a, b, c, d) {
    var e = a.child;
    return a = e.sibling, c = Tg(e, {mode: "visible", children: c}), (b.mode & 2) == 0 && (c.lanes = d), c.return = b, c.sibling = null, a !== null && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a), b.child = c;
  }
  function wi(a, b, c, d, e) {
    var f = b.mode, g = a.child;
    a = g.sibling;
    var h = {mode: "hidden", children: c};
    return (f & 2) == 0 && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, g !== null ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h), a !== null ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2), d.return = b, c.return = b, c.sibling = d, b.child = c, d;
  }
  function yi(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    c !== null && (c.lanes |= b), sg(a.return, b);
  }
  function zi(a, b, c, d, e, f) {
    var g = a.memoizedState;
    g === null ? a.memoizedState = {isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e, lastEffect: f} : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);
  }
  function Ai(a, b, c) {
    var d = b.pendingProps, e = d.revealOrder, f = d.tail;
    if (fi(a, b, d.children, c), d = P.current, (d & 2) != 0)
      d = d & 1 | 2, b.flags |= 64;
    else {
      if (a !== null && (a.flags & 64) != 0)
        a:
          for (a = b.child; a !== null; ) {
            if (a.tag === 13)
              a.memoizedState !== null && yi(a, c);
            else if (a.tag === 19)
              yi(a, c);
            else if (a.child !== null) {
              a.child.return = a, a = a.child;
              continue;
            }
            if (a === b)
              break a;
            for (; a.sibling === null; ) {
              if (a.return === null || a.return === b)
                break a;
              a = a.return;
            }
            a.sibling.return = a.return, a = a.sibling;
          }
      d &= 1;
    }
    if (I(P, d), (b.mode & 2) == 0)
      b.memoizedState = null;
    else
      switch (e) {
        case "forwards":
          for (c = b.child, e = null; c !== null; )
            a = c.alternate, a !== null && ih(a) === null && (e = c), c = c.sibling;
          c = e, c === null ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null), zi(b, !1, e, c, f, b.lastEffect);
          break;
        case "backwards":
          for (c = null, e = b.child, b.child = null; e !== null; ) {
            if (a = e.alternate, a !== null && ih(a) === null) {
              b.child = e;
              break;
            }
            a = e.sibling, e.sibling = c, c = e, e = a;
          }
          zi(b, !0, c, null, f, b.lastEffect);
          break;
        case "together":
          zi(b, !1, null, null, void 0, b.lastEffect);
          break;
        default:
          b.memoizedState = null;
      }
    return b.child;
  }
  function hi(a, b, c) {
    if (a !== null && (b.dependencies = a.dependencies), Dg |= b.lanes, (c & b.childLanes) != 0) {
      if (a !== null && b.child !== a.child)
        throw Error(y(153));
      if (b.child !== null) {
        for (a = b.child, c = Tg(a, a.pendingProps), b.child = c, c.return = b; a.sibling !== null; )
          a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;
        c.sibling = null;
      }
      return b.child;
    }
    return null;
  }
  var Bi, Ci, Di, Ei;
  Bi = function(a, b) {
    for (var c = b.child; c !== null; ) {
      if (c.tag === 5 || c.tag === 6)
        a.appendChild(c.stateNode);
      else if (c.tag !== 4 && c.child !== null) {
        c.child.return = c, c = c.child;
        continue;
      }
      if (c === b)
        break;
      for (; c.sibling === null; ) {
        if (c.return === null || c.return === b)
          return;
        c = c.return;
      }
      c.sibling.return = c.return, c = c.sibling;
    }
  };
  Ci = function() {
  };
  Di = function(a, b, c, d) {
    var e = a.memoizedProps;
    if (e !== d) {
      a = b.stateNode, dh(ah.current);
      var f = null;
      switch (c) {
        case "input":
          e = Ya(a, e), d = Ya(a, d), f = [];
          break;
        case "option":
          e = eb(a, e), d = eb(a, d), f = [];
          break;
        case "select":
          e = m({}, e, {value: void 0}), d = m({}, d, {value: void 0}), f = [];
          break;
        case "textarea":
          e = gb(a, e), d = gb(a, d), f = [];
          break;
        default:
          typeof e.onClick != "function" && typeof d.onClick == "function" && (a.onclick = jf);
      }
      vb(c, d);
      var g;
      c = null;
      for (l in e)
        if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && e[l] != null)
          if (l === "style") {
            var h = e[l];
            for (g in h)
              h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
          } else
            l !== "dangerouslySetInnerHTML" && l !== "children" && l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && l !== "autoFocus" && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
      for (l in d) {
        var k = d[l];
        if (h = e != null ? e[l] : void 0, d.hasOwnProperty(l) && k !== h && (k != null || h != null))
          if (l === "style")
            if (h) {
              for (g in h)
                !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
              for (g in k)
                k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
            } else
              c || (f || (f = []), f.push(l, c)), c = k;
          else
            l === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, k != null && h !== k && (f = f || []).push(l, k)) : l === "children" ? typeof k != "string" && typeof k != "number" || (f = f || []).push(l, "" + k) : l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && (ca.hasOwnProperty(l) ? (k != null && l === "onScroll" && G("scroll", a), f || h === k || (f = [])) : typeof k == "object" && k !== null && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
      }
      c && (f = f || []).push("style", c);
      var l = f;
      (b.updateQueue = l) && (b.flags |= 4);
    }
  };
  Ei = function(a, b, c, d) {
    c !== d && (b.flags |= 4);
  };
  function Fi(a, b) {
    if (!lh)
      switch (a.tailMode) {
        case "hidden":
          b = a.tail;
          for (var c = null; b !== null; )
            b.alternate !== null && (c = b), b = b.sibling;
          c === null ? a.tail = null : c.sibling = null;
          break;
        case "collapsed":
          c = a.tail;
          for (var d = null; c !== null; )
            c.alternate !== null && (d = c), c = c.sibling;
          d === null ? b || a.tail === null ? a.tail = null : a.tail.sibling = null : d.sibling = null;
      }
  }
  function Gi(a, b, c) {
    var d = b.pendingProps;
    switch (b.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return null;
      case 1:
        return Ff(b.type) && Gf(), null;
      case 3:
        return fh(), H(N), H(M), uh(), d = b.stateNode, d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null), (a === null || a.child === null) && (rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256)), Ci(b), null;
      case 5:
        hh(b);
        var e = dh(ch.current);
        if (c = b.type, a !== null && b.stateNode != null)
          Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);
        else {
          if (!d) {
            if (b.stateNode === null)
              throw Error(y(166));
            return null;
          }
          if (a = dh(ah.current), rh(b)) {
            d = b.stateNode, c = b.type;
            var f = b.memoizedProps;
            switch (d[wf] = b, d[xf] = f, c) {
              case "dialog":
                G("cancel", d), G("close", d);
                break;
              case "iframe":
              case "object":
              case "embed":
                G("load", d);
                break;
              case "video":
              case "audio":
                for (a = 0; a < Xe.length; a++)
                  G(Xe[a], d);
                break;
              case "source":
                G("error", d);
                break;
              case "img":
              case "image":
              case "link":
                G("error", d), G("load", d);
                break;
              case "details":
                G("toggle", d);
                break;
              case "input":
                Za(d, f), G("invalid", d);
                break;
              case "select":
                d._wrapperState = {wasMultiple: !!f.multiple}, G("invalid", d);
                break;
              case "textarea":
                hb(d, f), G("invalid", d);
            }
            vb(c, f), a = null;
            for (var g in f)
              f.hasOwnProperty(g) && (e = f[g], g === "children" ? typeof e == "string" ? d.textContent !== e && (a = ["children", e]) : typeof e == "number" && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && e != null && g === "onScroll" && G("scroll", d));
            switch (c) {
              case "input":
                Va(d), cb(d, f, !0);
                break;
              case "textarea":
                Va(d), jb(d);
                break;
              case "select":
              case "option":
                break;
              default:
                typeof f.onClick == "function" && (d.onclick = jf);
            }
            d = a, b.updateQueue = d, d !== null && (b.flags |= 4);
          } else {
            switch (g = e.nodeType === 9 ? e : e.ownerDocument, a === kb.html && (a = lb(c)), a === kb.html ? c === "script" ? (a = g.createElement("div"), a.innerHTML = "<script></script>", a = a.removeChild(a.firstChild)) : typeof d.is == "string" ? a = g.createElement(c, {is: d.is}) : (a = g.createElement(c), c === "select" && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c), a[wf] = b, a[xf] = d, Bi(a, b, !1, !1), b.stateNode = a, g = wb(c, d), c) {
              case "dialog":
                G("cancel", a), G("close", a), e = d;
                break;
              case "iframe":
              case "object":
              case "embed":
                G("load", a), e = d;
                break;
              case "video":
              case "audio":
                for (e = 0; e < Xe.length; e++)
                  G(Xe[e], a);
                e = d;
                break;
              case "source":
                G("error", a), e = d;
                break;
              case "img":
              case "image":
              case "link":
                G("error", a), G("load", a), e = d;
                break;
              case "details":
                G("toggle", a), e = d;
                break;
              case "input":
                Za(a, d), e = Ya(a, d), G("invalid", a);
                break;
              case "option":
                e = eb(a, d);
                break;
              case "select":
                a._wrapperState = {wasMultiple: !!d.multiple}, e = m({}, d, {value: void 0}), G("invalid", a);
                break;
              case "textarea":
                hb(a, d), e = gb(a, d), G("invalid", a);
                break;
              default:
                e = d;
            }
            vb(c, e);
            var h = e;
            for (f in h)
              if (h.hasOwnProperty(f)) {
                var k = h[f];
                f === "style" ? tb(a, k) : f === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, k != null && ob(a, k)) : f === "children" ? typeof k == "string" ? (c !== "textarea" || k !== "") && pb(a, k) : typeof k == "number" && pb(a, "" + k) : f !== "suppressContentEditableWarning" && f !== "suppressHydrationWarning" && f !== "autoFocus" && (ca.hasOwnProperty(f) ? k != null && f === "onScroll" && G("scroll", a) : k != null && qa(a, f, k, g));
              }
            switch (c) {
              case "input":
                Va(a), cb(a, d, !1);
                break;
              case "textarea":
                Va(a), jb(a);
                break;
              case "option":
                d.value != null && a.setAttribute("value", "" + Sa(d.value));
                break;
              case "select":
                a.multiple = !!d.multiple, f = d.value, f != null ? fb(a, !!d.multiple, f, !1) : d.defaultValue != null && fb(a, !!d.multiple, d.defaultValue, !0);
                break;
              default:
                typeof e.onClick == "function" && (a.onclick = jf);
            }
            mf(c, d) && (b.flags |= 4);
          }
          b.ref !== null && (b.flags |= 128);
        }
        return null;
      case 6:
        if (a && b.stateNode != null)
          Ei(a, b, a.memoizedProps, d);
        else {
          if (typeof d != "string" && b.stateNode === null)
            throw Error(y(166));
          c = dh(ch.current), dh(ah.current), rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (c.nodeType === 9 ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);
        }
        return null;
      case 13:
        return H(P), d = b.memoizedState, (b.flags & 64) != 0 ? (b.lanes = c, b) : (d = d !== null, c = !1, a === null ? b.memoizedProps.fallback !== void 0 && rh(b) : c = a.memoizedState !== null, d && !c && (b.mode & 2) != 0 && (a === null && b.memoizedProps.unstable_avoidThisFallback !== !0 || (P.current & 1) != 0 ? V === 0 && (V = 3) : ((V === 0 || V === 3) && (V = 4), U === null || (Dg & 134217727) == 0 && (Hi & 134217727) == 0 || Ii(U, W))), (d || c) && (b.flags |= 4), null);
      case 4:
        return fh(), Ci(b), a === null && cf(b.stateNode.containerInfo), null;
      case 10:
        return rg(b), null;
      case 17:
        return Ff(b.type) && Gf(), null;
      case 19:
        if (H(P), d = b.memoizedState, d === null)
          return null;
        if (f = (b.flags & 64) != 0, g = d.rendering, g === null)
          if (f)
            Fi(d, !1);
          else {
            if (V !== 0 || a !== null && (a.flags & 64) != 0)
              for (a = b.child; a !== null; ) {
                if (g = ih(a), g !== null) {
                  for (b.flags |= 64, Fi(d, !1), f = g.updateQueue, f !== null && (b.updateQueue = f, b.flags |= 4), d.lastEffect === null && (b.firstEffect = null), b.lastEffect = d.lastEffect, d = c, c = b.child; c !== null; )
                    f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, g === null ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = a === null ? null : {lanes: a.lanes, firstContext: a.firstContext}), c = c.sibling;
                  return I(P, P.current & 1 | 2), b.child;
                }
                a = a.sibling;
              }
            d.tail !== null && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
          }
        else {
          if (!f)
            if (a = ih(g), a !== null) {
              if (b.flags |= 64, f = !0, c = a.updateQueue, c !== null && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), d.tail === null && d.tailMode === "hidden" && !g.alternate && !lh)
                return b = b.lastEffect = d.lastEffect, b !== null && (b.nextEffect = null), null;
            } else
              2 * O() - d.renderingStartTime > Ji && c !== 1073741824 && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
          d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, c !== null ? c.sibling = g : b.child = g, d.last = g);
        }
        return d.tail !== null ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;
      case 23:
      case 24:
        return Ki(), a !== null && a.memoizedState !== null != (b.memoizedState !== null) && d.mode !== "unstable-defer-without-hiding" && (b.flags |= 4), null;
    }
    throw Error(y(156, b.tag));
  }
  function Li(a) {
    switch (a.tag) {
      case 1:
        Ff(a.type) && Gf();
        var b = a.flags;
        return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;
      case 3:
        if (fh(), H(N), H(M), uh(), b = a.flags, (b & 64) != 0)
          throw Error(y(285));
        return a.flags = b & -4097 | 64, a;
      case 5:
        return hh(a), null;
      case 13:
        return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;
      case 19:
        return H(P), null;
      case 4:
        return fh(), null;
      case 10:
        return rg(a), null;
      case 23:
      case 24:
        return Ki(), null;
      default:
        return null;
    }
  }
  function Mi(a, b) {
    try {
      var c = "", d = b;
      do
        c += Qa(d), d = d.return;
      while (d);
      var e = c;
    } catch (f) {
      e = `
Error generating stack: ` + f.message + `
` + f.stack;
    }
    return {value: a, source: b, stack: e};
  }
  function Ni(a, b) {
    try {
      console.error(b.value);
    } catch (c) {
      setTimeout(function() {
        throw c;
      });
    }
  }
  var Oi = typeof WeakMap == "function" ? WeakMap : Map;
  function Pi(a, b, c) {
    c = zg(-1, c), c.tag = 3, c.payload = {element: null};
    var d = b.value;
    return c.callback = function() {
      Qi || (Qi = !0, Ri = d), Ni(a, b);
    }, c;
  }
  function Si(a, b, c) {
    c = zg(-1, c), c.tag = 3;
    var d = a.type.getDerivedStateFromError;
    if (typeof d == "function") {
      var e = b.value;
      c.payload = function() {
        return Ni(a, b), d(e);
      };
    }
    var f = a.stateNode;
    return f !== null && typeof f.componentDidCatch == "function" && (c.callback = function() {
      typeof d != "function" && (Ti === null ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));
      var c2 = b.stack;
      this.componentDidCatch(b.value, {componentStack: c2 !== null ? c2 : ""});
    }), c;
  }
  var Ui = typeof WeakSet == "function" ? WeakSet : Set;
  function Vi(a) {
    var b = a.ref;
    if (b !== null)
      if (typeof b == "function")
        try {
          b(null);
        } catch (c) {
          Wi(a, c);
        }
      else
        b.current = null;
  }
  function Xi(a, b) {
    switch (b.tag) {
      case 0:
      case 11:
      case 15:
      case 22:
        return;
      case 1:
        if (b.flags & 256 && a !== null) {
          var c = a.memoizedProps, d = a.memoizedState;
          a = b.stateNode, b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d), a.__reactInternalSnapshotBeforeUpdate = b;
        }
        return;
      case 3:
        b.flags & 256 && qf(b.stateNode.containerInfo);
        return;
      case 5:
      case 6:
      case 4:
      case 17:
        return;
    }
    throw Error(y(163));
  }
  function Yi(a, b, c) {
    switch (c.tag) {
      case 0:
      case 11:
      case 15:
      case 22:
        if (b = c.updateQueue, b = b !== null ? b.lastEffect : null, b !== null) {
          a = b = b.next;
          do {
            if ((a.tag & 3) == 3) {
              var d = a.create;
              a.destroy = d();
            }
            a = a.next;
          } while (a !== b);
        }
        if (b = c.updateQueue, b = b !== null ? b.lastEffect : null, b !== null) {
          a = b = b.next;
          do {
            var e = a;
            d = e.next, e = e.tag, (e & 4) != 0 && (e & 1) != 0 && (Zi(c, a), $i(c, a)), a = d;
          } while (a !== b);
        }
        return;
      case 1:
        a = c.stateNode, c.flags & 4 && (b === null ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate))), b = c.updateQueue, b !== null && Eg(c, b, a);
        return;
      case 3:
        if (b = c.updateQueue, b !== null) {
          if (a = null, c.child !== null)
            switch (c.child.tag) {
              case 5:
                a = c.child.stateNode;
                break;
              case 1:
                a = c.child.stateNode;
            }
          Eg(c, b, a);
        }
        return;
      case 5:
        a = c.stateNode, b === null && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();
        return;
      case 6:
        return;
      case 4:
        return;
      case 12:
        return;
      case 13:
        c.memoizedState === null && (c = c.alternate, c !== null && (c = c.memoizedState, c !== null && (c = c.dehydrated, c !== null && Cc(c))));
        return;
      case 19:
      case 17:
      case 20:
      case 21:
      case 23:
      case 24:
        return;
    }
    throw Error(y(163));
  }
  function aj(a, b) {
    for (var c = a; ; ) {
      if (c.tag === 5) {
        var d = c.stateNode;
        if (b)
          d = d.style, typeof d.setProperty == "function" ? d.setProperty("display", "none", "important") : d.display = "none";
        else {
          d = c.stateNode;
          var e = c.memoizedProps.style;
          e = e != null && e.hasOwnProperty("display") ? e.display : null, d.style.display = sb("display", e);
        }
      } else if (c.tag === 6)
        c.stateNode.nodeValue = b ? "" : c.memoizedProps;
      else if ((c.tag !== 23 && c.tag !== 24 || c.memoizedState === null || c === a) && c.child !== null) {
        c.child.return = c, c = c.child;
        continue;
      }
      if (c === a)
        break;
      for (; c.sibling === null; ) {
        if (c.return === null || c.return === a)
          return;
        c = c.return;
      }
      c.sibling.return = c.return, c = c.sibling;
    }
  }
  function bj(a, b) {
    if (Mf && typeof Mf.onCommitFiberUnmount == "function")
      try {
        Mf.onCommitFiberUnmount(Lf, b);
      } catch (f) {
      }
    switch (b.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
      case 22:
        if (a = b.updateQueue, a !== null && (a = a.lastEffect, a !== null)) {
          var c = a = a.next;
          do {
            var d = c, e = d.destroy;
            if (d = d.tag, e !== void 0)
              if ((d & 4) != 0)
                Zi(b, c);
              else {
                d = b;
                try {
                  e();
                } catch (f) {
                  Wi(d, f);
                }
              }
            c = c.next;
          } while (c !== a);
        }
        break;
      case 1:
        if (Vi(b), a = b.stateNode, typeof a.componentWillUnmount == "function")
          try {
            a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();
          } catch (f) {
            Wi(b, f);
          }
        break;
      case 5:
        Vi(b);
        break;
      case 4:
        cj(a, b);
    }
  }
  function dj(a) {
    a.alternate = null, a.child = null, a.dependencies = null, a.firstEffect = null, a.lastEffect = null, a.memoizedProps = null, a.memoizedState = null, a.pendingProps = null, a.return = null, a.updateQueue = null;
  }
  function ej(a) {
    return a.tag === 5 || a.tag === 3 || a.tag === 4;
  }
  function fj(a) {
    a: {
      for (var b = a.return; b !== null; ) {
        if (ej(b))
          break a;
        b = b.return;
      }
      throw Error(y(160));
    }
    var c = b;
    switch (b = c.stateNode, c.tag) {
      case 5:
        var d = !1;
        break;
      case 3:
        b = b.containerInfo, d = !0;
        break;
      case 4:
        b = b.containerInfo, d = !0;
        break;
      default:
        throw Error(y(161));
    }
    c.flags & 16 && (pb(b, ""), c.flags &= -17);
    a:
      b:
        for (c = a; ; ) {
          for (; c.sibling === null; ) {
            if (c.return === null || ej(c.return)) {
              c = null;
              break a;
            }
            c = c.return;
          }
          for (c.sibling.return = c.return, c = c.sibling; c.tag !== 5 && c.tag !== 6 && c.tag !== 18; ) {
            if (c.flags & 2 || c.child === null || c.tag === 4)
              continue b;
            c.child.return = c, c = c.child;
          }
          if (!(c.flags & 2)) {
            c = c.stateNode;
            break a;
          }
        }
    d ? gj(a, c, b) : hj(a, c, b);
  }
  function gj(a, b, c) {
    var d = a.tag, e = d === 5 || d === 6;
    if (e)
      a = e ? a.stateNode : a.stateNode.instance, b ? c.nodeType === 8 ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (c.nodeType === 8 ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, c != null || b.onclick !== null || (b.onclick = jf));
    else if (d !== 4 && (a = a.child, a !== null))
      for (gj(a, b, c), a = a.sibling; a !== null; )
        gj(a, b, c), a = a.sibling;
  }
  function hj(a, b, c) {
    var d = a.tag, e = d === 5 || d === 6;
    if (e)
      a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);
    else if (d !== 4 && (a = a.child, a !== null))
      for (hj(a, b, c), a = a.sibling; a !== null; )
        hj(a, b, c), a = a.sibling;
  }
  function cj(a, b) {
    for (var c = b, d = !1, e, f; ; ) {
      if (!d) {
        d = c.return;
        a:
          for (; ; ) {
            if (d === null)
              throw Error(y(160));
            switch (e = d.stateNode, d.tag) {
              case 5:
                f = !1;
                break a;
              case 3:
                e = e.containerInfo, f = !0;
                break a;
              case 4:
                e = e.containerInfo, f = !0;
                break a;
            }
            d = d.return;
          }
        d = !0;
      }
      if (c.tag === 5 || c.tag === 6) {
        a:
          for (var g = a, h = c, k = h; ; )
            if (bj(g, k), k.child !== null && k.tag !== 4)
              k.child.return = k, k = k.child;
            else {
              if (k === h)
                break a;
              for (; k.sibling === null; ) {
                if (k.return === null || k.return === h)
                  break a;
                k = k.return;
              }
              k.sibling.return = k.return, k = k.sibling;
            }
        f ? (g = e, h = c.stateNode, g.nodeType === 8 ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
      } else if (c.tag === 4) {
        if (c.child !== null) {
          e = c.stateNode.containerInfo, f = !0, c.child.return = c, c = c.child;
          continue;
        }
      } else if (bj(a, c), c.child !== null) {
        c.child.return = c, c = c.child;
        continue;
      }
      if (c === b)
        break;
      for (; c.sibling === null; ) {
        if (c.return === null || c.return === b)
          return;
        c = c.return, c.tag === 4 && (d = !1);
      }
      c.sibling.return = c.return, c = c.sibling;
    }
  }
  function ij(a, b) {
    switch (b.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
      case 22:
        var c = b.updateQueue;
        if (c = c !== null ? c.lastEffect : null, c !== null) {
          var d = c = c.next;
          do
            (d.tag & 3) == 3 && (a = d.destroy, d.destroy = void 0, a !== void 0 && a()), d = d.next;
          while (d !== c);
        }
        return;
      case 1:
        return;
      case 5:
        if (c = b.stateNode, c != null) {
          d = b.memoizedProps;
          var e = a !== null ? a.memoizedProps : d;
          a = b.type;
          var f = b.updateQueue;
          if (b.updateQueue = null, f !== null) {
            for (c[xf] = d, a === "input" && d.type === "radio" && d.name != null && $a(c, d), wb(a, e), b = wb(a, d), e = 0; e < f.length; e += 2) {
              var g = f[e], h = f[e + 1];
              g === "style" ? tb(c, h) : g === "dangerouslySetInnerHTML" ? ob(c, h) : g === "children" ? pb(c, h) : qa(c, g, h, b);
            }
            switch (a) {
              case "input":
                ab(c, d);
                break;
              case "textarea":
                ib(c, d);
                break;
              case "select":
                a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, f != null ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (d.defaultValue != null ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));
            }
          }
        }
        return;
      case 6:
        if (b.stateNode === null)
          throw Error(y(162));
        b.stateNode.nodeValue = b.memoizedProps;
        return;
      case 3:
        c = b.stateNode, c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));
        return;
      case 12:
        return;
      case 13:
        b.memoizedState !== null && (jj = O(), aj(b.child, !0)), kj(b);
        return;
      case 19:
        kj(b);
        return;
      case 17:
        return;
      case 23:
      case 24:
        aj(b, b.memoizedState !== null);
        return;
    }
    throw Error(y(163));
  }
  function kj(a) {
    var b = a.updateQueue;
    if (b !== null) {
      a.updateQueue = null;
      var c = a.stateNode;
      c === null && (c = a.stateNode = new Ui()), b.forEach(function(b2) {
        var d = lj.bind(null, a, b2);
        c.has(b2) || (c.add(b2), b2.then(d, d));
      });
    }
  }
  function mj(a, b) {
    return a !== null && (a = a.memoizedState, a === null || a.dehydrated !== null) ? (b = b.memoizedState, b !== null && b.dehydrated === null) : !1;
  }
  var nj = Math.ceil, oj = ra.ReactCurrentDispatcher, pj = ra.ReactCurrentOwner, X = 0, U = null, Y = null, W = 0, qj = 0, rj = Bf(0), V = 0, sj = null, tj = 0, Dg = 0, Hi = 0, uj = 0, vj = null, jj = 0, Ji = Infinity;
  function wj() {
    Ji = O() + 500;
  }
  var Z = null, Qi = !1, Ri = null, Ti = null, xj = !1, yj = null, zj = 90, Aj = [], Bj = [], Cj = null, Dj = 0, Ej = null, Fj = -1, Gj = 0, Hj = 0, Ij = null, Jj = !1;
  function Hg() {
    return (X & 48) != 0 ? O() : Fj !== -1 ? Fj : Fj = O();
  }
  function Ig(a) {
    if (a = a.mode, (a & 2) == 0)
      return 1;
    if ((a & 4) == 0)
      return eg() === 99 ? 1 : 2;
    if (Gj === 0 && (Gj = tj), kg.transition !== 0) {
      Hj !== 0 && (Hj = vj !== null ? vj.pendingLanes : 0), a = Gj;
      var b = 4186112 & ~Hj;
      return b &= -b, b === 0 && (a = 4186112 & ~a, b = a & -a, b === 0 && (b = 8192)), b;
    }
    return a = eg(), (X & 4) != 0 && a === 98 ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj)), a;
  }
  function Jg(a, b, c) {
    if (50 < Dj)
      throw Dj = 0, Ej = null, Error(y(185));
    if (a = Kj(a, b), a === null)
      return null;
    $c(a, b, c), a === U && (Hi |= b, V === 4 && Ii(a, W));
    var d = eg();
    b === 1 ? (X & 8) != 0 && (X & 48) == 0 ? Lj(a) : (Mj(a, c), X === 0 && (wj(), ig())) : ((X & 4) == 0 || d !== 98 && d !== 99 || (Cj === null ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c)), vj = a;
  }
  function Kj(a, b) {
    a.lanes |= b;
    var c = a.alternate;
    for (c !== null && (c.lanes |= b), c = a, a = a.return; a !== null; )
      a.childLanes |= b, c = a.alternate, c !== null && (c.childLanes |= b), c = a, a = a.return;
    return c.tag === 3 ? c.stateNode : null;
  }
  function Mj(a, b) {
    for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g; ) {
      var h = 31 - Vc(g), k = 1 << h, l = f[h];
      if (l === -1) {
        if ((k & d) == 0 || (k & e) != 0) {
          l = b, Rc(k);
          var n = F;
          f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5e3 : -1;
        }
      } else
        l <= b && (a.expiredLanes |= k);
      g &= ~k;
    }
    if (d = Uc(a, a === U ? W : 0), b = F, d === 0)
      c !== null && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);
    else {
      if (c !== null) {
        if (a.callbackPriority === b)
          return;
        c !== Zf && Pf(c);
      }
      b === 15 ? (c = Lj.bind(null, a), ag === null ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : b === 14 ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a))), a.callbackPriority = b, a.callbackNode = c;
    }
  }
  function Nj(a) {
    if (Fj = -1, Hj = Gj = 0, (X & 48) != 0)
      throw Error(y(327));
    var b = a.callbackNode;
    if (Oj() && a.callbackNode !== b)
      return null;
    var c = Uc(a, a === U ? W : 0);
    if (c === 0)
      return null;
    var d = c, e = X;
    X |= 16;
    var f = Pj();
    (U !== a || W !== d) && (wj(), Qj(a, d));
    do
      try {
        Rj();
        break;
      } catch (h) {
        Sj(a, h);
      }
    while (1);
    if (qg(), oj.current = f, X = e, Y !== null ? d = 0 : (U = null, W = 0, d = V), (tj & Hi) != 0)
      Qj(a, 0);
    else if (d !== 0) {
      if (d === 2 && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), c !== 0 && (d = Tj(a, c))), d === 1)
        throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;
      switch (a.finishedWork = a.current.alternate, a.finishedLanes = c, d) {
        case 0:
        case 1:
          throw Error(y(345));
        case 2:
          Uj(a);
          break;
        case 3:
          if (Ii(a, c), (c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {
            if (Uc(a, 0) !== 0)
              break;
            if (e = a.suspendedLanes, (e & c) !== c) {
              Hg(), a.pingedLanes |= a.suspendedLanes & e;
              break;
            }
            a.timeoutHandle = of(Uj.bind(null, a), d);
            break;
          }
          Uj(a);
          break;
        case 4:
          if (Ii(a, c), (c & 4186112) === c)
            break;
          for (d = a.eventTimes, e = -1; 0 < c; ) {
            var g = 31 - Vc(c);
            f = 1 << g, g = d[g], g > e && (e = g), c &= ~f;
          }
          if (c = e, c = O() - c, c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3e3 > c ? 3e3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c, 10 < c) {
            a.timeoutHandle = of(Uj.bind(null, a), c);
            break;
          }
          Uj(a);
          break;
        case 5:
          Uj(a);
          break;
        default:
          throw Error(y(329));
      }
    }
    return Mj(a, O()), a.callbackNode === b ? Nj.bind(null, a) : null;
  }
  function Ii(a, b) {
    for (b &= ~uj, b &= ~Hi, a.suspendedLanes |= b, a.pingedLanes &= ~b, a = a.expirationTimes; 0 < b; ) {
      var c = 31 - Vc(b), d = 1 << c;
      a[c] = -1, b &= ~d;
    }
  }
  function Lj(a) {
    if ((X & 48) != 0)
      throw Error(y(327));
    if (Oj(), a === U && (a.expiredLanes & W) != 0) {
      var b = W, c = Tj(a, b);
      (tj & Hi) != 0 && (b = Uc(a, b), c = Tj(a, b));
    } else
      b = Uc(a, 0), c = Tj(a, b);
    if (a.tag !== 0 && c === 2 && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), b !== 0 && (c = Tj(a, b))), c === 1)
      throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;
    return a.finishedWork = a.current.alternate, a.finishedLanes = b, Uj(a), Mj(a, O()), null;
  }
  function Vj() {
    if (Cj !== null) {
      var a = Cj;
      Cj = null, a.forEach(function(a2) {
        a2.expiredLanes |= 24 & a2.pendingLanes, Mj(a2, O());
      });
    }
    ig();
  }
  function Wj(a, b) {
    var c = X;
    X |= 1;
    try {
      return a(b);
    } finally {
      X = c, X === 0 && (wj(), ig());
    }
  }
  function Xj(a, b) {
    var c = X;
    X &= -2, X |= 8;
    try {
      return a(b);
    } finally {
      X = c, X === 0 && (wj(), ig());
    }
  }
  function ni(a, b) {
    I(rj, qj), qj |= b, tj |= b;
  }
  function Ki() {
    qj = rj.current, H(rj);
  }
  function Qj(a, b) {
    a.finishedWork = null, a.finishedLanes = 0;
    var c = a.timeoutHandle;
    if (c !== -1 && (a.timeoutHandle = -1, pf(c)), Y !== null)
      for (c = Y.return; c !== null; ) {
        var d = c;
        switch (d.tag) {
          case 1:
            d = d.type.childContextTypes, d != null && Gf();
            break;
          case 3:
            fh(), H(N), H(M), uh();
            break;
          case 5:
            hh(d);
            break;
          case 4:
            fh();
            break;
          case 13:
            H(P);
            break;
          case 19:
            H(P);
            break;
          case 10:
            rg(d);
            break;
          case 23:
          case 24:
            Ki();
        }
        c = c.return;
      }
    U = a, Y = Tg(a.current, null), W = qj = tj = b, V = 0, sj = null, uj = Hi = Dg = 0;
  }
  function Sj(a, b) {
    do {
      var c = Y;
      try {
        if (qg(), vh.current = Gh, yh) {
          for (var d = R.memoizedState; d !== null; ) {
            var e = d.queue;
            e !== null && (e.pending = null), d = d.next;
          }
          yh = !1;
        }
        if (xh = 0, T = S = R = null, zh = !1, pj.current = null, c === null || c.return === null) {
          V = 1, sj = b, Y = null;
          break;
        }
        a: {
          var f = a, g = c.return, h = c, k = b;
          if (b = W, h.flags |= 2048, h.firstEffect = h.lastEffect = null, k !== null && typeof k == "object" && typeof k.then == "function") {
            var l = k;
            if ((h.mode & 2) == 0) {
              var n = h.alternate;
              n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);
            }
            var A = (P.current & 1) != 0, p = g;
            do {
              var C;
              if (C = p.tag === 13) {
                var x = p.memoizedState;
                if (x !== null)
                  C = x.dehydrated !== null;
                else {
                  var w = p.memoizedProps;
                  C = w.fallback === void 0 ? !1 : w.unstable_avoidThisFallback !== !0 ? !0 : !A;
                }
              }
              if (C) {
                var z = p.updateQueue;
                if (z === null) {
                  var u = new Set();
                  u.add(l), p.updateQueue = u;
                } else
                  z.add(l);
                if ((p.mode & 2) == 0) {
                  if (p.flags |= 64, h.flags |= 16384, h.flags &= -2981, h.tag === 1)
                    if (h.alternate === null)
                      h.tag = 17;
                    else {
                      var t = zg(-1, 1);
                      t.tag = 2, Ag(h, t);
                    }
                  h.lanes |= 1;
                  break a;
                }
                k = void 0, h = b;
                var q = f.pingCache;
                if (q === null ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), k === void 0 && (k = new Set(), q.set(l, k))), !k.has(h)) {
                  k.add(h);
                  var v = Yj.bind(null, f, l, h);
                  l.then(v, v);
                }
                p.flags |= 4096, p.lanes = b;
                break a;
              }
              p = p.return;
            } while (p !== null);
            k = Error((Ra(h.type) || "A React component") + ` suspended while rendering, but no fallback UI was specified.

Add a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.`);
          }
          V !== 5 && (V = 2), k = Mi(k, h), p = g;
          do {
            switch (p.tag) {
              case 3:
                f = k, p.flags |= 4096, b &= -b, p.lanes |= b;
                var J = Pi(p, f, b);
                Bg(p, J);
                break a;
              case 1:
                f = k;
                var K = p.type, Q = p.stateNode;
                if ((p.flags & 64) == 0 && (typeof K.getDerivedStateFromError == "function" || Q !== null && typeof Q.componentDidCatch == "function" && (Ti === null || !Ti.has(Q)))) {
                  p.flags |= 4096, b &= -b, p.lanes |= b;
                  var L = Si(p, f, b);
                  Bg(p, L);
                  break a;
                }
            }
            p = p.return;
          } while (p !== null);
        }
        Zj(c);
      } catch (va) {
        b = va, Y === c && c !== null && (Y = c = c.return);
        continue;
      }
      break;
    } while (1);
  }
  function Pj() {
    var a = oj.current;
    return oj.current = Gh, a === null ? Gh : a;
  }
  function Tj(a, b) {
    var c = X;
    X |= 16;
    var d = Pj();
    U === a && W === b || Qj(a, b);
    do
      try {
        ak();
        break;
      } catch (e) {
        Sj(a, e);
      }
    while (1);
    if (qg(), X = c, oj.current = d, Y !== null)
      throw Error(y(261));
    return U = null, W = 0, V;
  }
  function ak() {
    for (; Y !== null; )
      bk(Y);
  }
  function Rj() {
    for (; Y !== null && !Qf(); )
      bk(Y);
  }
  function bk(a) {
    var b = ck(a.alternate, a, qj);
    a.memoizedProps = a.pendingProps, b === null ? Zj(a) : Y = b, pj.current = null;
  }
  function Zj(a) {
    var b = a;
    do {
      var c = b.alternate;
      if (a = b.return, (b.flags & 2048) == 0) {
        if (c = Gi(c, b, qj), c !== null) {
          Y = c;
          return;
        }
        if (c = b, c.tag !== 24 && c.tag !== 23 || c.memoizedState === null || (qj & 1073741824) != 0 || (c.mode & 4) == 0) {
          for (var d = 0, e = c.child; e !== null; )
            d |= e.lanes | e.childLanes, e = e.sibling;
          c.childLanes = d;
        }
        a !== null && (a.flags & 2048) == 0 && (a.firstEffect === null && (a.firstEffect = b.firstEffect), b.lastEffect !== null && (a.lastEffect !== null && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (a.lastEffect !== null ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));
      } else {
        if (c = Li(b), c !== null) {
          c.flags &= 2047, Y = c;
          return;
        }
        a !== null && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
      }
      if (b = b.sibling, b !== null) {
        Y = b;
        return;
      }
      Y = b = a;
    } while (b !== null);
    V === 0 && (V = 5);
  }
  function Uj(a) {
    var b = eg();
    return gg(99, dk.bind(null, a, b)), null;
  }
  function dk(a, b) {
    do
      Oj();
    while (yj !== null);
    if ((X & 48) != 0)
      throw Error(y(327));
    var c = a.finishedWork;
    if (c === null)
      return null;
    if (a.finishedWork = null, a.finishedLanes = 0, c === a.current)
      throw Error(y(177));
    a.callbackNode = null;
    var d = c.lanes | c.childLanes, e = d, f = a.pendingLanes & ~e;
    a.pendingLanes = e, a.suspendedLanes = 0, a.pingedLanes = 0, a.expiredLanes &= e, a.mutableReadLanes &= e, a.entangledLanes &= e, e = a.entanglements;
    for (var g = a.eventTimes, h = a.expirationTimes; 0 < f; ) {
      var k = 31 - Vc(f), l = 1 << k;
      e[k] = 0, g[k] = -1, h[k] = -1, f &= ~l;
    }
    if (Cj !== null && (d & 24) == 0 && Cj.has(a) && Cj.delete(a), a === U && (Y = U = null, W = 0), 1 < c.flags ? c.lastEffect !== null ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect, d !== null) {
      if (e = X, X |= 32, pj.current = null, kf = fd, g = Ne(), Oe(g)) {
        if ("selectionStart" in g)
          h = {start: g.selectionStart, end: g.selectionEnd};
        else
          a:
            if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && l.rangeCount !== 0) {
              h = l.anchorNode, f = l.anchorOffset, k = l.focusNode, l = l.focusOffset;
              try {
                h.nodeType, k.nodeType;
              } catch (va) {
                h = null;
                break a;
              }
              var n = 0, A = -1, p = -1, C = 0, x = 0, w = g, z = null;
              b:
                for (; ; ) {
                  for (var u; w !== h || f !== 0 && w.nodeType !== 3 || (A = n + f), w !== k || l !== 0 && w.nodeType !== 3 || (p = n + l), w.nodeType === 3 && (n += w.nodeValue.length), (u = w.firstChild) !== null; )
                    z = w, w = u;
                  for (; ; ) {
                    if (w === g)
                      break b;
                    if (z === h && ++C === f && (A = n), z === k && ++x === l && (p = n), (u = w.nextSibling) !== null)
                      break;
                    w = z, z = w.parentNode;
                  }
                  w = u;
                }
              h = A === -1 || p === -1 ? null : {start: A, end: p};
            } else
              h = null;
        h = h || {start: 0, end: 0};
      } else
        h = null;
      lf = {focusedElem: g, selectionRange: h}, fd = !1, Ij = null, Jj = !1, Z = d;
      do
        try {
          ek();
        } catch (va) {
          if (Z === null)
            throw Error(y(330));
          Wi(Z, va), Z = Z.nextEffect;
        }
      while (Z !== null);
      Ij = null, Z = d;
      do
        try {
          for (g = a; Z !== null; ) {
            var t = Z.flags;
            if (t & 16 && pb(Z.stateNode, ""), t & 128) {
              var q = Z.alternate;
              if (q !== null) {
                var v = q.ref;
                v !== null && (typeof v == "function" ? v(null) : v.current = null);
              }
            }
            switch (t & 1038) {
              case 2:
                fj(Z), Z.flags &= -3;
                break;
              case 6:
                fj(Z), Z.flags &= -3, ij(Z.alternate, Z);
                break;
              case 1024:
                Z.flags &= -1025;
                break;
              case 1028:
                Z.flags &= -1025, ij(Z.alternate, Z);
                break;
              case 4:
                ij(Z.alternate, Z);
                break;
              case 8:
                h = Z, cj(g, h);
                var J = h.alternate;
                dj(h), J !== null && dj(J);
            }
            Z = Z.nextEffect;
          }
        } catch (va) {
          if (Z === null)
            throw Error(y(330));
          Wi(Z, va), Z = Z.nextEffect;
        }
      while (Z !== null);
      if (v = lf, q = Ne(), t = v.focusedElem, g = v.selectionRange, q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {
        for (g !== null && Oe(t) && (q = g.start, v = g.end, v === void 0 && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = g.end === void 0 ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (v.rangeCount !== 1 || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q)))))), q = [], v = t; v = v.parentNode; )
          v.nodeType === 1 && q.push({element: v, left: v.scrollLeft, top: v.scrollTop});
        for (typeof t.focus == "function" && t.focus(), t = 0; t < q.length; t++)
          v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
      }
      fd = !!kf, lf = kf = null, a.current = c, Z = d;
      do
        try {
          for (t = a; Z !== null; ) {
            var K = Z.flags;
            if (K & 36 && Yi(t, Z.alternate, Z), K & 128) {
              q = void 0;
              var Q = Z.ref;
              if (Q !== null) {
                var L = Z.stateNode;
                switch (Z.tag) {
                  case 5:
                    q = L;
                    break;
                  default:
                    q = L;
                }
                typeof Q == "function" ? Q(q) : Q.current = q;
              }
            }
            Z = Z.nextEffect;
          }
        } catch (va) {
          if (Z === null)
            throw Error(y(330));
          Wi(Z, va), Z = Z.nextEffect;
        }
      while (Z !== null);
      Z = null, $f(), X = e;
    } else
      a.current = c;
    if (xj)
      xj = !1, yj = a, zj = b;
    else
      for (Z = d; Z !== null; )
        b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;
    if (d = a.pendingLanes, d === 0 && (Ti = null), d === 1 ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0, c = c.stateNode, Mf && typeof Mf.onCommitFiberRoot == "function")
      try {
        Mf.onCommitFiberRoot(Lf, c, void 0, (c.current.flags & 64) == 64);
      } catch (va) {
      }
    if (Mj(a, O()), Qi)
      throw Qi = !1, a = Ri, Ri = null, a;
    return (X & 8) != 0 || ig(), null;
  }
  function ek() {
    for (; Z !== null; ) {
      var a = Z.alternate;
      Jj || Ij === null || ((Z.flags & 8) != 0 ? dc(Z, Ij) && (Jj = !0) : Z.tag === 13 && mj(a, Z) && dc(Z, Ij) && (Jj = !0));
      var b = Z.flags;
      (b & 256) != 0 && Xi(a, Z), (b & 512) == 0 || xj || (xj = !0, hg(97, function() {
        return Oj(), null;
      })), Z = Z.nextEffect;
    }
  }
  function Oj() {
    if (zj !== 90) {
      var a = 97 < zj ? 97 : zj;
      return zj = 90, gg(a, fk);
    }
    return !1;
  }
  function $i(a, b) {
    Aj.push(b, a), xj || (xj = !0, hg(97, function() {
      return Oj(), null;
    }));
  }
  function Zi(a, b) {
    Bj.push(b, a), xj || (xj = !0, hg(97, function() {
      return Oj(), null;
    }));
  }
  function fk() {
    if (yj === null)
      return !1;
    var a = yj;
    if (yj = null, (X & 48) != 0)
      throw Error(y(331));
    var b = X;
    X |= 32;
    var c = Bj;
    Bj = [];
    for (var d = 0; d < c.length; d += 2) {
      var e = c[d], f = c[d + 1], g = e.destroy;
      if (e.destroy = void 0, typeof g == "function")
        try {
          g();
        } catch (k) {
          if (f === null)
            throw Error(y(330));
          Wi(f, k);
        }
    }
    for (c = Aj, Aj = [], d = 0; d < c.length; d += 2) {
      e = c[d], f = c[d + 1];
      try {
        var h = e.create;
        e.destroy = h();
      } catch (k) {
        if (f === null)
          throw Error(y(330));
        Wi(f, k);
      }
    }
    for (h = a.current.firstEffect; h !== null; )
      a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;
    return X = b, ig(), !0;
  }
  function gk(a, b, c) {
    b = Mi(c, b), b = Pi(a, b, 1), Ag(a, b), b = Hg(), a = Kj(a, 1), a !== null && ($c(a, 1, b), Mj(a, b));
  }
  function Wi(a, b) {
    if (a.tag === 3)
      gk(a, a, b);
    else
      for (var c = a.return; c !== null; ) {
        if (c.tag === 3) {
          gk(c, a, b);
          break;
        } else if (c.tag === 1) {
          var d = c.stateNode;
          if (typeof c.type.getDerivedStateFromError == "function" || typeof d.componentDidCatch == "function" && (Ti === null || !Ti.has(d))) {
            a = Mi(b, a);
            var e = Si(c, a, 1);
            if (Ag(c, e), e = Hg(), c = Kj(c, 1), c !== null)
              $c(c, 1, e), Mj(c, e);
            else if (typeof d.componentDidCatch == "function" && (Ti === null || !Ti.has(d)))
              try {
                d.componentDidCatch(b, a);
              } catch (f) {
              }
            break;
          }
        }
        c = c.return;
      }
  }
  function Yj(a, b, c) {
    var d = a.pingCache;
    d !== null && d.delete(b), b = Hg(), a.pingedLanes |= a.suspendedLanes & c, U === a && (W & c) === c && (V === 4 || V === 3 && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c), Mj(a, b);
  }
  function lj(a, b) {
    var c = a.stateNode;
    c !== null && c.delete(b), b = 0, b === 0 && (b = a.mode, (b & 2) == 0 ? b = 1 : (b & 4) == 0 ? b = eg() === 99 ? 1 : 2 : (Gj === 0 && (Gj = tj), b = Yc(62914560 & ~Gj), b === 0 && (b = 4194304))), c = Hg(), a = Kj(a, b), a !== null && ($c(a, b, c), Mj(a, c));
  }
  var ck;
  ck = function(a, b, c) {
    var d = b.lanes;
    if (a !== null)
      if (a.memoizedProps !== b.pendingProps || N.current)
        ug = !0;
      else if ((c & d) != 0)
        ug = (a.flags & 16384) != 0;
      else {
        switch (ug = !1, b.tag) {
          case 3:
            ri(b), sh();
            break;
          case 5:
            gh(b);
            break;
          case 1:
            Ff(b.type) && Jf(b);
            break;
          case 4:
            eh(b, b.stateNode.containerInfo);
            break;
          case 10:
            d = b.memoizedProps.value;
            var e = b.type._context;
            I(mg, e._currentValue), e._currentValue = d;
            break;
          case 13:
            if (b.memoizedState !== null)
              return (c & b.child.childLanes) != 0 ? ti(a, b, c) : (I(P, P.current & 1), b = hi(a, b, c), b !== null ? b.sibling : null);
            I(P, P.current & 1);
            break;
          case 19:
            if (d = (c & b.childLanes) != 0, (a.flags & 64) != 0) {
              if (d)
                return Ai(a, b, c);
              b.flags |= 64;
            }
            if (e = b.memoizedState, e !== null && (e.rendering = null, e.tail = null, e.lastEffect = null), I(P, P.current), d)
              break;
            return null;
          case 23:
          case 24:
            return b.lanes = 0, mi(a, b, c);
        }
        return hi(a, b, c);
      }
    else
      ug = !1;
    switch (b.lanes = 0, b.tag) {
      case 2:
        if (d = b.type, a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2), a = b.pendingProps, e = Ef(b, M.current), tg(b, c), e = Ch(null, b, d, a, e, c), b.flags |= 1, typeof e == "object" && e !== null && typeof e.render == "function" && e.$$typeof === void 0) {
          if (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Ff(d)) {
            var f = !0;
            Jf(b);
          } else
            f = !1;
          b.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null, xg(b);
          var g = d.getDerivedStateFromProps;
          typeof g == "function" && Gg(b, d, g, a), e.updater = Kg, b.stateNode = e, e._reactInternals = b, Og(b, d, a, c), b = qi(null, b, d, !0, f, c);
        } else
          b.tag = 0, fi(null, b, e, c), b = b.child;
        return b;
      case 16:
        e = b.elementType;
        a: {
          switch (a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2), a = b.pendingProps, f = e._init, e = f(e._payload), b.type = e, f = b.tag = hk(e), a = lg(e, a), f) {
            case 0:
              b = li(null, b, e, a, c);
              break a;
            case 1:
              b = pi(null, b, e, a, c);
              break a;
            case 11:
              b = gi(null, b, e, a, c);
              break a;
            case 14:
              b = ii(null, b, e, lg(e.type, a), d, c);
              break a;
          }
          throw Error(y(306, e, ""));
        }
        return b;
      case 0:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);
      case 1:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);
      case 3:
        if (ri(b), d = b.updateQueue, a === null || d === null)
          throw Error(y(282));
        if (d = b.pendingProps, e = b.memoizedState, e = e !== null ? e.element : null, yg(a, b), Cg(b, d, null, c), d = b.memoizedState.element, d === e)
          sh(), b = hi(a, b, c);
        else {
          if (e = b.stateNode, (f = e.hydrate) && (kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0), f) {
            if (a = e.mutableSourceEagerHydrationData, a != null)
              for (e = 0; e < a.length; e += 2)
                f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);
            for (c = Zg(b, null, d, c), b.child = c; c; )
              c.flags = c.flags & -3 | 1024, c = c.sibling;
          } else
            fi(a, b, d, c), sh();
          b = b.child;
        }
        return b;
      case 5:
        return gh(b), a === null && ph(b), d = b.type, e = b.pendingProps, f = a !== null ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : f !== null && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;
      case 6:
        return a === null && ph(b), null;
      case 13:
        return ti(a, b, c);
      case 4:
        return eh(b, b.stateNode.containerInfo), d = b.pendingProps, a === null ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;
      case 11:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);
      case 7:
        return fi(a, b, b.pendingProps, c), b.child;
      case 8:
        return fi(a, b, b.pendingProps.children, c), b.child;
      case 12:
        return fi(a, b, b.pendingProps.children, c), b.child;
      case 10:
        a: {
          d = b.type._context, e = b.pendingProps, g = b.memoizedProps, f = e.value;
          var h = b.type._context;
          if (I(mg, h._currentValue), h._currentValue = f, g !== null)
            if (h = g.value, f = He(h, f) ? 0 : (typeof d._calculateChangedBits == "function" ? d._calculateChangedBits(h, f) : 1073741823) | 0, f === 0) {
              if (g.children === e.children && !N.current) {
                b = hi(a, b, c);
                break a;
              }
            } else
              for (h = b.child, h !== null && (h.return = b); h !== null; ) {
                var k = h.dependencies;
                if (k !== null) {
                  g = h.child;
                  for (var l = k.firstContext; l !== null; ) {
                    if (l.context === d && (l.observedBits & f) != 0) {
                      h.tag === 1 && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l)), h.lanes |= c, l = h.alternate, l !== null && (l.lanes |= c), sg(h.return, c), k.lanes |= c;
                      break;
                    }
                    l = l.next;
                  }
                } else
                  g = h.tag === 10 && h.type === b.type ? null : h.child;
                if (g !== null)
                  g.return = h;
                else
                  for (g = h; g !== null; ) {
                    if (g === b) {
                      g = null;
                      break;
                    }
                    if (h = g.sibling, h !== null) {
                      h.return = g.return, g = h;
                      break;
                    }
                    g = g.return;
                  }
                h = g;
              }
          fi(a, b, e.children, c), b = b.child;
        }
        return b;
      case 9:
        return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;
      case 14:
        return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);
      case 15:
        return ki(a, b, b.type, b.pendingProps, d, c);
      case 17:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), a !== null && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);
      case 19:
        return Ai(a, b, c);
      case 23:
        return mi(a, b, c);
      case 24:
        return mi(a, b, c);
    }
    throw Error(y(156, b.tag));
  };
  function ik(a, b, c, d) {
    this.tag = a, this.key = c, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = b, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = d, this.flags = 0, this.lastEffect = this.firstEffect = this.nextEffect = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function nh(a, b, c, d) {
    return new ik(a, b, c, d);
  }
  function ji(a) {
    return a = a.prototype, !(!a || !a.isReactComponent);
  }
  function hk(a) {
    if (typeof a == "function")
      return ji(a) ? 1 : 0;
    if (a != null) {
      if (a = a.$$typeof, a === Aa)
        return 11;
      if (a === Da)
        return 14;
    }
    return 2;
  }
  function Tg(a, b) {
    var c = a.alternate;
    return c === null ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null), c.childLanes = a.childLanes, c.lanes = a.lanes, c.child = a.child, c.memoizedProps = a.memoizedProps, c.memoizedState = a.memoizedState, c.updateQueue = a.updateQueue, b = a.dependencies, c.dependencies = b === null ? null : {lanes: b.lanes, firstContext: b.firstContext}, c.sibling = a.sibling, c.index = a.index, c.ref = a.ref, c;
  }
  function Vg(a, b, c, d, e, f) {
    var g = 2;
    if (d = a, typeof a == "function")
      ji(a) && (g = 1);
    else if (typeof a == "string")
      g = 5;
    else
      a:
        switch (a) {
          case ua:
            return Xg(c.children, e, f, b);
          case Ha:
            g = 8, e |= 16;
            break;
          case wa:
            g = 8, e |= 1;
            break;
          case xa:
            return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;
          case Ba:
            return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;
          case Ca:
            return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;
          case Ia:
            return vi(c, e, f, b);
          case Ja:
            return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;
          default:
            if (typeof a == "object" && a !== null)
              switch (a.$$typeof) {
                case ya:
                  g = 10;
                  break a;
                case za:
                  g = 9;
                  break a;
                case Aa:
                  g = 11;
                  break a;
                case Da:
                  g = 14;
                  break a;
                case Ea:
                  g = 16, d = null;
                  break a;
                case Fa:
                  g = 22;
                  break a;
              }
            throw Error(y(130, a == null ? a : typeof a, ""));
        }
    return b = nh(g, c, b, e), b.elementType = a, b.type = d, b.lanes = f, b;
  }
  function Xg(a, b, c, d) {
    return a = nh(7, a, d, b), a.lanes = c, a;
  }
  function vi(a, b, c, d) {
    return a = nh(23, a, d, b), a.elementType = Ia, a.lanes = c, a;
  }
  function Ug(a, b, c) {
    return a = nh(6, a, null, b), a.lanes = c, a;
  }
  function Wg(a, b, c) {
    return b = nh(4, a.children !== null ? a.children : [], a.key, b), b.lanes = c, b.stateNode = {containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation}, b;
  }
  function jk(a, b, c) {
    this.tag = b, this.containerInfo = a, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.pendingContext = this.context = null, this.hydrate = c, this.callbackNode = null, this.callbackPriority = 0, this.eventTimes = Zc(0), this.expirationTimes = Zc(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Zc(0), this.mutableSourceEagerHydrationData = null;
  }
  function kk(a, b, c) {
    var d = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return {$$typeof: ta, key: d == null ? null : "" + d, children: a, containerInfo: b, implementation: c};
  }
  function lk(a, b, c, d) {
    var e = b.current, f = Hg(), g = Ig(e);
    a:
      if (c) {
        c = c._reactInternals;
        b: {
          if (Zb(c) !== c || c.tag !== 1)
            throw Error(y(170));
          var h = c;
          do {
            switch (h.tag) {
              case 3:
                h = h.stateNode.context;
                break b;
              case 1:
                if (Ff(h.type)) {
                  h = h.stateNode.__reactInternalMemoizedMergedChildContext;
                  break b;
                }
            }
            h = h.return;
          } while (h !== null);
          throw Error(y(171));
        }
        if (c.tag === 1) {
          var k = c.type;
          if (Ff(k)) {
            c = If(c, k, h);
            break a;
          }
        }
        c = h;
      } else
        c = Cf;
    return b.context === null ? b.context = c : b.pendingContext = c, b = zg(f, g), b.payload = {element: a}, d = d === void 0 ? null : d, d !== null && (b.callback = d), Ag(e, b), Jg(e, g, f), g;
  }
  function mk(a) {
    if (a = a.current, !a.child)
      return null;
    switch (a.child.tag) {
      case 5:
        return a.child.stateNode;
      default:
        return a.child.stateNode;
    }
  }
  function nk(a, b) {
    if (a = a.memoizedState, a !== null && a.dehydrated !== null) {
      var c = a.retryLane;
      a.retryLane = c !== 0 && c < b ? c : b;
    }
  }
  function ok(a, b) {
    nk(a, b), (a = a.alternate) && nk(a, b);
  }
  function pk() {
    return null;
  }
  function qk(a, b, c) {
    var d = c != null && c.hydrationOptions != null && c.hydrationOptions.mutableSources || null;
    if (c = new jk(a, b, c != null && c.hydrate === !0), b = nh(3, null, null, b === 2 ? 7 : b === 1 ? 3 : 0), c.current = b, b.stateNode = c, xg(b), a[ff] = c.current, cf(a.nodeType === 8 ? a.parentNode : a), d)
      for (a = 0; a < d.length; a++) {
        b = d[a];
        var e = b._getVersion;
        e = e(b._source), c.mutableSourceEagerHydrationData == null ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);
      }
    this._internalRoot = c;
  }
  qk.prototype.render = function(a) {
    lk(a, this._internalRoot, null, null);
  };
  qk.prototype.unmount = function() {
    var a = this._internalRoot, b = a.containerInfo;
    lk(null, a, null, function() {
      b[ff] = null;
    });
  };
  function rk(a) {
    return !(!a || a.nodeType !== 1 && a.nodeType !== 9 && a.nodeType !== 11 && (a.nodeType !== 8 || a.nodeValue !== " react-mount-point-unstable "));
  }
  function sk(a, b) {
    if (b || (b = a ? a.nodeType === 9 ? a.documentElement : a.firstChild : null, b = !(!b || b.nodeType !== 1 || !b.hasAttribute("data-reactroot"))), !b)
      for (var c; c = a.lastChild; )
        a.removeChild(c);
    return new qk(a, 0, b ? {hydrate: !0} : void 0);
  }
  function tk(a, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
      var g = f._internalRoot;
      if (typeof e == "function") {
        var h = e;
        e = function() {
          var a2 = mk(g);
          h.call(a2);
        };
      }
      lk(b, g, a, e);
    } else {
      if (f = c._reactRootContainer = sk(c, d), g = f._internalRoot, typeof e == "function") {
        var k = e;
        e = function() {
          var a2 = mk(g);
          k.call(a2);
        };
      }
      Xj(function() {
        lk(b, g, a, e);
      });
    }
    return mk(g);
  }
  ec = function(a) {
    if (a.tag === 13) {
      var b = Hg();
      Jg(a, 4, b), ok(a, 4);
    }
  };
  fc = function(a) {
    if (a.tag === 13) {
      var b = Hg();
      Jg(a, 67108864, b), ok(a, 67108864);
    }
  };
  gc = function(a) {
    if (a.tag === 13) {
      var b = Hg(), c = Ig(a);
      Jg(a, c, b), ok(a, c);
    }
  };
  hc = function(a, b) {
    return b();
  };
  yb = function(a, b, c) {
    switch (b) {
      case "input":
        if (ab(a, c), b = c.name, c.type === "radio" && b != null) {
          for (c = a; c.parentNode; )
            c = c.parentNode;
          for (c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]'), b = 0; b < c.length; b++) {
            var d = c[b];
            if (d !== a && d.form === a.form) {
              var e = Db(d);
              if (!e)
                throw Error(y(90));
              Wa(d), ab(d, e);
            }
          }
        }
        break;
      case "textarea":
        ib(a, c);
        break;
      case "select":
        b = c.value, b != null && fb(a, !!c.multiple, b, !1);
    }
  };
  Gb = Wj;
  Hb = function(a, b, c, d, e) {
    var f = X;
    X |= 4;
    try {
      return gg(98, a.bind(null, b, c, d, e));
    } finally {
      X = f, X === 0 && (wj(), ig());
    }
  };
  Ib = function() {
    (X & 49) == 0 && (Vj(), Oj());
  };
  Jb = function(a, b) {
    var c = X;
    X |= 2;
    try {
      return a(b);
    } finally {
      X = c, X === 0 && (wj(), ig());
    }
  };
  function uk(a, b) {
    var c = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
    if (!rk(b))
      throw Error(y(200));
    return kk(a, b, null, c);
  }
  var vk = {Events: [Cb, ue, Db, Eb, Fb, Oj, {current: !1}]}, wk = {findFiberByHostInstance: wc, bundleType: 0, version: "17.0.1", rendererPackageName: "react-dom"}, xk = {bundleType: wk.bundleType, version: wk.version, rendererPackageName: wk.rendererPackageName, rendererConfig: wk.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ra.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
    return a = cc(a), a === null ? null : a.stateNode;
  }, findFiberByHostInstance: wk.findFiberByHostInstance || pk, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null};
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ != "undefined" && (yk = __REACT_DEVTOOLS_GLOBAL_HOOK__, !yk.isDisabled && yk.supportsFiber))
    try {
      Lf = yk.inject(xk), Mf = yk;
    } catch (a) {
    }
  var yk;
  exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
  exports.createPortal = uk;
  exports.findDOMNode = function(a) {
    if (a == null)
      return null;
    if (a.nodeType === 1)
      return a;
    var b = a._reactInternals;
    if (b === void 0)
      throw typeof a.render == "function" ? Error(y(188)) : Error(y(268, Object.keys(a)));
    return a = cc(b), a = a === null ? null : a.stateNode, a;
  };
  exports.flushSync = function(a, b) {
    var c = X;
    if ((c & 48) != 0)
      return a(b);
    X |= 1;
    try {
      if (a)
        return gg(99, a.bind(null, b));
    } finally {
      X = c, ig();
    }
  };
  exports.hydrate = function(a, b, c) {
    if (!rk(b))
      throw Error(y(200));
    return tk(null, a, b, !0, c);
  };
  exports.render = function(a, b, c) {
    if (!rk(b))
      throw Error(y(200));
    return tk(null, a, b, !1, c);
  };
  exports.unmountComponentAtNode = function(a) {
    if (!rk(a))
      throw Error(y(40));
    return a._reactRootContainer ? (Xj(function() {
      tk(null, null, a, !1, function() {
        a._reactRootContainer = null, a[ff] = null;
      });
    }), !0) : !1;
  };
  exports.unstable_batchedUpdates = Wj;
  exports.unstable_createPortal = function(a, b) {
    return uk(a, b, 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null);
  };
  exports.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
    if (!rk(c))
      throw Error(y(200));
    if (a == null || a._reactInternals === void 0)
      throw Error(y(38));
    return tk(a, b, c, !1, d);
  };
  exports.version = "17.0.1";
});

// node_modules/.pnpm/react-dom@17.0.1_react@17.0.1/node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  "use strict";
  function checkDCE() {
    if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ == "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
  }
  checkDCE(), module.exports = require_react_dom_production_min();
});

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/Mime.js
var require_Mime = __commonJS((exports, module) => {
  "use strict";
  function Mime3() {
    this._types = Object.create(null), this._extensions = Object.create(null);
    for (let i = 0; i < arguments.length; i++)
      this.define(arguments[i]);
    this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
  }
  Mime3.prototype.define = function(typeMap, force) {
    for (let type in typeMap) {
      let extensions = typeMap[type].map(function(t) {
        return t.toLowerCase();
      });
      type = type.toLowerCase();
      for (let i = 0; i < extensions.length; i++) {
        let ext = extensions[i];
        if (ext[0] !== "*") {
          if (!force && ext in this._types)
            throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
          this._types[ext] = type;
        }
      }
      if (force || !this._extensions[type]) {
        let ext = extensions[0];
        this._extensions[type] = ext[0] !== "*" ? ext : ext.substr(1);
      }
    }
  };
  Mime3.prototype.getType = function(path7) {
    path7 = String(path7);
    let last = path7.replace(/^.*[/\\]/, "").toLowerCase(), ext = last.replace(/^.*\./, "").toLowerCase(), hasPath = last.length < path7.length;
    return (ext.length < last.length - 1 || !hasPath) && this._types[ext] || null;
  };
  Mime3.prototype.getExtension = function(type) {
    return type = /^\s*([^;\s]*)/.test(type) && RegExp.$1, type && this._extensions[type.toLowerCase()] || null;
  };
  module.exports = Mime3;
});

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/types/standard.js
var require_standard = __commonJS((exports, module) => {
  module.exports = {"application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma", "es"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/mrb-consumer+xml": ["*xdf"], "application/mrb-publish+xml": ["*xdf"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["*xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-error+xml": ["xer"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"]};
});

// node_modules/.pnpm/mime@2.5.2/node_modules/mime/lite.js
var require_lite = __commonJS((exports, module) => {
  "use strict";
  var Mime3 = require_Mime();
  module.exports = new Mime3(require_standard());
});

// node_modules/.pnpm/path-browserify@1.0.1/node_modules/path-browserify/index.js
var require_path_browserify = __commonJS((exports, module) => {
  "use strict";
  function assertPath(path7) {
    if (typeof path7 != "string")
      throw new TypeError("Path must be a string. Received " + JSON.stringify(path7));
  }
  function normalizeStringPosix(path7, allowAboveRoot) {
    for (var res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, code, i = 0; i <= path7.length; ++i) {
      if (i < path7.length)
        code = path7.charCodeAt(i);
      else {
        if (code === 47)
          break;
        code = 47;
      }
      if (code === 47) {
        if (!(lastSlash === i - 1 || dots === 1))
          if (lastSlash !== i - 1 && dots === 2) {
            if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 || res.charCodeAt(res.length - 2) !== 46) {
              if (res.length > 2) {
                var lastSlashIndex = res.lastIndexOf("/");
                if (lastSlashIndex !== res.length - 1) {
                  lastSlashIndex === -1 ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = i, dots = 0;
                  continue;
                }
              } else if (res.length === 2 || res.length === 1) {
                res = "", lastSegmentLength = 0, lastSlash = i, dots = 0;
                continue;
              }
            }
            allowAboveRoot && (res.length > 0 ? res += "/.." : res = "..", lastSegmentLength = 2);
          } else
            res.length > 0 ? res += "/" + path7.slice(lastSlash + 1, i) : res = path7.slice(lastSlash + 1, i), lastSegmentLength = i - lastSlash - 1;
        lastSlash = i, dots = 0;
      } else
        code === 46 && dots !== -1 ? ++dots : dots = -1;
    }
    return res;
  }
  function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root, base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    return dir ? dir === pathObject.root ? dir + base : dir + sep + base : base;
  }
  var posix = {
    resolve: function() {
      for (var resolvedPath = "", resolvedAbsolute = !1, cwd, i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path7;
        i >= 0 ? path7 = arguments[i] : (cwd === void 0 && (cwd = process.cwd()), path7 = cwd), assertPath(path7), path7.length !== 0 && (resolvedPath = path7 + "/" + resolvedPath, resolvedAbsolute = path7.charCodeAt(0) === 47);
      }
      return resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute), resolvedAbsolute ? resolvedPath.length > 0 ? "/" + resolvedPath : "/" : resolvedPath.length > 0 ? resolvedPath : ".";
    },
    normalize: function(path7) {
      if (assertPath(path7), path7.length === 0)
        return ".";
      var isAbsolute3 = path7.charCodeAt(0) === 47, trailingSeparator = path7.charCodeAt(path7.length - 1) === 47;
      return path7 = normalizeStringPosix(path7, !isAbsolute3), path7.length === 0 && !isAbsolute3 && (path7 = "."), path7.length > 0 && trailingSeparator && (path7 += "/"), isAbsolute3 ? "/" + path7 : path7;
    },
    isAbsolute: function(path7) {
      return assertPath(path7), path7.length > 0 && path7.charCodeAt(0) === 47;
    },
    join: function() {
      if (arguments.length === 0)
        return ".";
      for (var joined, i = 0; i < arguments.length; ++i) {
        var arg = arguments[i];
        assertPath(arg), arg.length > 0 && (joined === void 0 ? joined = arg : joined += "/" + arg);
      }
      return joined === void 0 ? "." : posix.normalize(joined);
    },
    relative: function(from, to) {
      if (assertPath(from), assertPath(to), from === to || (from = posix.resolve(from), to = posix.resolve(to), from === to))
        return "";
      for (var fromStart = 1; fromStart < from.length && from.charCodeAt(fromStart) === 47; ++fromStart)
        ;
      for (var fromEnd = from.length, fromLen = fromEnd - fromStart, toStart = 1; toStart < to.length && to.charCodeAt(toStart) === 47; ++toStart)
        ;
      for (var toEnd = to.length, toLen = toEnd - toStart, length = fromLen < toLen ? fromLen : toLen, lastCommonSep = -1, i = 0; i <= length; ++i) {
        if (i === length) {
          if (toLen > length) {
            if (to.charCodeAt(toStart + i) === 47)
              return to.slice(toStart + i + 1);
            if (i === 0)
              return to.slice(toStart + i);
          } else
            fromLen > length && (from.charCodeAt(fromStart + i) === 47 ? lastCommonSep = i : i === 0 && (lastCommonSep = 0));
          break;
        }
        var fromCode = from.charCodeAt(fromStart + i), toCode = to.charCodeAt(toStart + i);
        if (fromCode !== toCode)
          break;
        fromCode === 47 && (lastCommonSep = i);
      }
      var out = "";
      for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i)
        (i === fromEnd || from.charCodeAt(i) === 47) && (out.length === 0 ? out += ".." : out += "/..");
      return out.length > 0 ? out + to.slice(toStart + lastCommonSep) : (toStart += lastCommonSep, to.charCodeAt(toStart) === 47 && ++toStart, to.slice(toStart));
    },
    _makeLong: function(path7) {
      return path7;
    },
    dirname: function(path7) {
      if (assertPath(path7), path7.length === 0)
        return ".";
      for (var code = path7.charCodeAt(0), hasRoot = code === 47, end = -1, matchedSlash = !0, i = path7.length - 1; i >= 1; --i)
        if (code = path7.charCodeAt(i), code === 47) {
          if (!matchedSlash) {
            end = i;
            break;
          }
        } else
          matchedSlash = !1;
      return end === -1 ? hasRoot ? "/" : "." : hasRoot && end === 1 ? "//" : path7.slice(0, end);
    },
    basename: function(path7, ext) {
      if (ext !== void 0 && typeof ext != "string")
        throw new TypeError('"ext" argument must be a string');
      assertPath(path7);
      var start = 0, end = -1, matchedSlash = !0, i;
      if (ext !== void 0 && ext.length > 0 && ext.length <= path7.length) {
        if (ext.length === path7.length && ext === path7)
          return "";
        var extIdx = ext.length - 1, firstNonSlashEnd = -1;
        for (i = path7.length - 1; i >= 0; --i) {
          var code = path7.charCodeAt(i);
          if (code === 47) {
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else
            firstNonSlashEnd === -1 && (matchedSlash = !1, firstNonSlashEnd = i + 1), extIdx >= 0 && (code === ext.charCodeAt(extIdx) ? --extIdx == -1 && (end = i) : (extIdx = -1, end = firstNonSlashEnd));
        }
        return start === end ? end = firstNonSlashEnd : end === -1 && (end = path7.length), path7.slice(start, end);
      } else {
        for (i = path7.length - 1; i >= 0; --i)
          if (path7.charCodeAt(i) === 47) {
            if (!matchedSlash) {
              start = i + 1;
              break;
            }
          } else
            end === -1 && (matchedSlash = !1, end = i + 1);
        return end === -1 ? "" : path7.slice(start, end);
      }
    },
    extname: function(path7) {
      assertPath(path7);
      for (var startDot = -1, startPart = 0, end = -1, matchedSlash = !0, preDotState = 0, i = path7.length - 1; i >= 0; --i) {
        var code = path7.charCodeAt(i);
        if (code === 47) {
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
        end === -1 && (matchedSlash = !1, end = i + 1), code === 46 ? startDot === -1 ? startDot = i : preDotState !== 1 && (preDotState = 1) : startDot !== -1 && (preDotState = -1);
      }
      return startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1 ? "" : path7.slice(startDot, end);
    },
    format: function(pathObject) {
      if (pathObject === null || typeof pathObject != "object")
        throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
      return _format("/", pathObject);
    },
    parse: function(path7) {
      assertPath(path7);
      var ret = {root: "", dir: "", base: "", ext: "", name: ""};
      if (path7.length === 0)
        return ret;
      var code = path7.charCodeAt(0), isAbsolute3 = code === 47, start;
      isAbsolute3 ? (ret.root = "/", start = 1) : start = 0;
      for (var startDot = -1, startPart = 0, end = -1, matchedSlash = !0, i = path7.length - 1, preDotState = 0; i >= start; --i) {
        if (code = path7.charCodeAt(i), code === 47) {
          if (!matchedSlash) {
            startPart = i + 1;
            break;
          }
          continue;
        }
        end === -1 && (matchedSlash = !1, end = i + 1), code === 46 ? startDot === -1 ? startDot = i : preDotState !== 1 && (preDotState = 1) : startDot !== -1 && (preDotState = -1);
      }
      return startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1 ? end !== -1 && (startPart === 0 && isAbsolute3 ? ret.base = ret.name = path7.slice(1, end) : ret.base = ret.name = path7.slice(startPart, end)) : (startPart === 0 && isAbsolute3 ? (ret.name = path7.slice(1, startDot), ret.base = path7.slice(1, end)) : (ret.name = path7.slice(startPart, startDot), ret.base = path7.slice(startPart, end)), ret.ext = path7.slice(startDot, end)), startPart > 0 ? ret.dir = path7.slice(0, startPart - 1) : isAbsolute3 && (ret.dir = "/"), ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
  };
  posix.posix = posix;
  module.exports = posix;
});

// node_modules/.pnpm/esbuild-wasm@0.9.0/node_modules/esbuild-wasm/lib/browser.js
var require_browser = __commonJS((exports) => {
  ((exports2) => {
    var __defProp2 = Object.defineProperty, __markAsModule2 = (target) => __defProp2(target, "__esModule", {value: !0}), __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, {get: all[name], enumerable: !0});
    }, __async = (__this, __arguments, generator) => new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }, rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      }, step = (result) => result.done ? resolve(result.value) : Promise.resolve(result.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
    __markAsModule2(exports2), __export2(exports2, {
      build: () => build2,
      buildSync: () => buildSync,
      initialize: () => initialize,
      serve: () => serve,
      transform: () => transform,
      transformSync: () => transformSync,
      version: () => version
    });
    function encodePacket(packet) {
      let visit = (value) => {
        if (value === null)
          bb.write8(0);
        else if (typeof value == "boolean")
          bb.write8(1), bb.write8(+value);
        else if (typeof value == "number")
          bb.write8(2), bb.write32(value | 0);
        else if (typeof value == "string")
          bb.write8(3), bb.write(encodeUTF8(value));
        else if (value instanceof Uint8Array)
          bb.write8(4), bb.write(value);
        else if (value instanceof Array) {
          bb.write8(5), bb.write32(value.length);
          for (let item of value)
            visit(item);
        } else {
          let keys2 = Object.keys(value);
          bb.write8(6), bb.write32(keys2.length);
          for (let key of keys2)
            bb.write(encodeUTF8(key)), visit(value[key]);
        }
      }, bb = new ByteBuffer();
      return bb.write32(0), bb.write32(packet.id << 1 | +!packet.isRequest), visit(packet.value), writeUInt32LE(bb.buf, bb.len - 4, 0), bb.buf.subarray(0, bb.len);
    }
    function decodePacket(bytes) {
      let visit = () => {
        switch (bb.read8()) {
          case 0:
            return null;
          case 1:
            return !!bb.read8();
          case 2:
            return bb.read32();
          case 3:
            return decodeUTF8(bb.read());
          case 4:
            return bb.read();
          case 5: {
            let count = bb.read32(), value2 = [];
            for (let i = 0; i < count; i++)
              value2.push(visit());
            return value2;
          }
          case 6: {
            let count = bb.read32(), value2 = {};
            for (let i = 0; i < count; i++)
              value2[decodeUTF8(bb.read())] = visit();
            return value2;
          }
          default:
            throw new Error("Invalid packet");
        }
      }, bb = new ByteBuffer(bytes), id = bb.read32(), isRequest = (id & 1) == 0;
      id >>>= 1;
      let value = visit();
      if (bb.ptr !== bytes.length)
        throw new Error("Invalid packet");
      return {id, isRequest, value};
    }
    var ByteBuffer = class {
      constructor(buf = new Uint8Array(1024)) {
        this.buf = buf, this.len = 0, this.ptr = 0;
      }
      _write(delta) {
        if (this.len + delta > this.buf.length) {
          let clone = new Uint8Array((this.len + delta) * 2);
          clone.set(this.buf), this.buf = clone;
        }
        return this.len += delta, this.len - delta;
      }
      write8(value) {
        let offset = this._write(1);
        this.buf[offset] = value;
      }
      write32(value) {
        let offset = this._write(4);
        writeUInt32LE(this.buf, value, offset);
      }
      write(bytes) {
        let offset = this._write(4 + bytes.length);
        writeUInt32LE(this.buf, bytes.length, offset), this.buf.set(bytes, offset + 4);
      }
      _read(delta) {
        if (this.ptr + delta > this.buf.length)
          throw new Error("Invalid packet");
        return this.ptr += delta, this.ptr - delta;
      }
      read8() {
        return this.buf[this._read(1)];
      }
      read32() {
        return readUInt32LE(this.buf, this._read(4));
      }
      read() {
        let length = this.read32(), bytes = new Uint8Array(length), ptr = this._read(bytes.length);
        return bytes.set(this.buf.subarray(ptr, ptr + length)), bytes;
      }
    }, encodeUTF8, decodeUTF8;
    if (typeof TextEncoder != "undefined" && typeof TextDecoder != "undefined") {
      let encoder = new TextEncoder(), decoder = new TextDecoder();
      encodeUTF8 = (text) => encoder.encode(text), decodeUTF8 = (bytes) => decoder.decode(bytes);
    } else if (typeof Buffer != "undefined")
      encodeUTF8 = (text) => {
        let buffer = Buffer.from(text);
        return buffer instanceof Uint8Array || (buffer = new Uint8Array(buffer)), buffer;
      }, decodeUTF8 = (bytes) => Buffer.from(bytes).toString();
    else
      throw new Error("No UTF-8 codec found");
    function readUInt32LE(buffer, offset) {
      return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
    }
    function writeUInt32LE(buffer, value, offset) {
      buffer[offset++] = value, buffer[offset++] = value >> 8, buffer[offset++] = value >> 16, buffer[offset++] = value >> 24;
    }
    function validateTarget(target) {
      if (target += "", target.indexOf(",") >= 0)
        throw new Error(`Invalid target: ${target}`);
      return target;
    }
    var canBeAnything = () => null, mustBeBoolean = (value) => typeof value == "boolean" ? null : "a boolean", mustBeBooleanOrObject = (value) => typeof value == "boolean" || typeof value == "object" && !Array.isArray(value) ? null : "a boolean or an object", mustBeString = (value) => typeof value == "string" ? null : "a string", mustBeRegExp = (value) => value instanceof RegExp ? null : "a RegExp object", mustBeInteger = (value) => typeof value == "number" && value === (value | 0) ? null : "an integer", mustBeFunction = (value) => typeof value == "function" ? null : "a function", mustBeArray = (value) => Array.isArray(value) ? null : "an array", mustBeObject = (value) => typeof value == "object" && value !== null && !Array.isArray(value) ? null : "an object", mustBeObjectOrNull = (value) => typeof value == "object" && !Array.isArray(value) ? null : "an object or null", mustBeStringOrBoolean = (value) => typeof value == "string" || typeof value == "boolean" ? null : "a string or a boolean", mustBeStringOrObject = (value) => typeof value == "string" || typeof value == "object" && value !== null && !Array.isArray(value) ? null : "a string or an object", mustBeStringOrArray = (value) => typeof value == "string" || Array.isArray(value) ? null : "a string or an array", mustBeStringOrUint8Array = (value) => typeof value == "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array";
    function getFlag(object, keys2, key, mustBeFn) {
      let value = object[key];
      if (keys2[key + ""] = !0, value === void 0)
        return;
      let mustBe = mustBeFn(value);
      if (mustBe !== null)
        throw new Error(`"${key}" must be ${mustBe}`);
      return value;
    }
    function checkForInvalidFlags(object, keys2, where) {
      for (let key in object)
        if (!(key in keys2))
          throw new Error(`Invalid option ${where}: "${key}"`);
    }
    function validateInitializeOptions(options) {
      let keys2 = Object.create(null), wasmURL = getFlag(options, keys2, "wasmURL", mustBeString), worker = getFlag(options, keys2, "worker", mustBeBoolean);
      return checkForInvalidFlags(options, keys2, "in startService() call"), {
        wasmURL,
        worker
      };
    }
    function pushLogFlags(flags, options, keys2, isTTY, logLevelDefault) {
      let color = getFlag(options, keys2, "color", mustBeBoolean), logLevel = getFlag(options, keys2, "logLevel", mustBeString), logLimit = getFlag(options, keys2, "logLimit", mustBeInteger);
      color ? flags.push(`--color=${color}`) : isTTY && flags.push("--color=true"), flags.push(`--log-level=${logLevel || logLevelDefault}`), flags.push(`--log-limit=${logLimit || 0}`);
    }
    function pushCommonFlags(flags, options, keys2) {
      let sourcesContent = getFlag(options, keys2, "sourcesContent", mustBeBoolean), target = getFlag(options, keys2, "target", mustBeStringOrArray), format = getFlag(options, keys2, "format", mustBeString), globalName = getFlag(options, keys2, "globalName", mustBeString), minify = getFlag(options, keys2, "minify", mustBeBoolean), minifySyntax = getFlag(options, keys2, "minifySyntax", mustBeBoolean), minifyWhitespace = getFlag(options, keys2, "minifyWhitespace", mustBeBoolean), minifyIdentifiers = getFlag(options, keys2, "minifyIdentifiers", mustBeBoolean), charset = getFlag(options, keys2, "charset", mustBeString), treeShaking = getFlag(options, keys2, "treeShaking", mustBeStringOrBoolean), jsxFactory = getFlag(options, keys2, "jsxFactory", mustBeString), jsxFragment = getFlag(options, keys2, "jsxFragment", mustBeString), define = getFlag(options, keys2, "define", mustBeObject), pure = getFlag(options, keys2, "pure", mustBeArray), keepNames = getFlag(options, keys2, "keepNames", mustBeBoolean);
      if (sourcesContent !== void 0 && flags.push(`--sources-content=${sourcesContent}`), target && (Array.isArray(target) ? flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`) : flags.push(`--target=${validateTarget(target)}`)), format && flags.push(`--format=${format}`), globalName && flags.push(`--global-name=${globalName}`), minify && flags.push("--minify"), minifySyntax && flags.push("--minify-syntax"), minifyWhitespace && flags.push("--minify-whitespace"), minifyIdentifiers && flags.push("--minify-identifiers"), charset && flags.push(`--charset=${charset}`), treeShaking !== void 0 && treeShaking !== !0 && flags.push(`--tree-shaking=${treeShaking}`), jsxFactory && flags.push(`--jsx-factory=${jsxFactory}`), jsxFragment && flags.push(`--jsx-fragment=${jsxFragment}`), define)
        for (let key in define) {
          if (key.indexOf("=") >= 0)
            throw new Error(`Invalid define: ${key}`);
          flags.push(`--define:${key}=${define[key]}`);
        }
      if (pure)
        for (let fn of pure)
          flags.push(`--pure:${fn}`);
      keepNames && flags.push("--keep-names");
    }
    function flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault) {
      var _a;
      let flags = [], keys2 = Object.create(null), stdinContents = null, stdinResolveDir = null, watchMode = null;
      pushLogFlags(flags, options, keys2, isTTY, logLevelDefault), pushCommonFlags(flags, options, keys2);
      let sourcemap = getFlag(options, keys2, "sourcemap", mustBeStringOrBoolean), bundle = getFlag(options, keys2, "bundle", mustBeBoolean), watch = getFlag(options, keys2, "watch", mustBeBooleanOrObject), splitting = getFlag(options, keys2, "splitting", mustBeBoolean), preserveSymlinks = getFlag(options, keys2, "preserveSymlinks", mustBeBoolean), metafile = getFlag(options, keys2, "metafile", mustBeBoolean), outfile = getFlag(options, keys2, "outfile", mustBeString), outdir = getFlag(options, keys2, "outdir", mustBeString), outbase = getFlag(options, keys2, "outbase", mustBeString), platform = getFlag(options, keys2, "platform", mustBeString), tsconfig = getFlag(options, keys2, "tsconfig", mustBeString), resolveExtensions = getFlag(options, keys2, "resolveExtensions", mustBeArray), nodePathsInput = getFlag(options, keys2, "nodePaths", mustBeArray), mainFields = getFlag(options, keys2, "mainFields", mustBeArray), conditions = getFlag(options, keys2, "conditions", mustBeArray), external = getFlag(options, keys2, "external", mustBeArray), loader = getFlag(options, keys2, "loader", mustBeObject), outExtension = getFlag(options, keys2, "outExtension", mustBeObject), publicPath = getFlag(options, keys2, "publicPath", mustBeString), chunkNames = getFlag(options, keys2, "chunkNames", mustBeString), assetNames = getFlag(options, keys2, "assetNames", mustBeString), inject = getFlag(options, keys2, "inject", mustBeArray), banner = getFlag(options, keys2, "banner", mustBeObject), footer = getFlag(options, keys2, "footer", mustBeObject), entryPoints = getFlag(options, keys2, "entryPoints", mustBeArray), absWorkingDir = getFlag(options, keys2, "absWorkingDir", mustBeString), stdin = getFlag(options, keys2, "stdin", mustBeObject), write = (_a = getFlag(options, keys2, "write", mustBeBoolean)) != null ? _a : writeDefault, incremental = getFlag(options, keys2, "incremental", mustBeBoolean) === !0, plugins = getFlag(options, keys2, "plugins", mustBeArray);
      if (checkForInvalidFlags(options, keys2, `in ${callName}() call`), sourcemap && flags.push(`--sourcemap${sourcemap === !0 ? "" : `=${sourcemap}`}`), bundle && flags.push("--bundle"), watch)
        if (flags.push("--watch"), typeof watch == "boolean")
          watchMode = {};
        else {
          let watchKeys = Object.create(null), onRebuild = getFlag(watch, watchKeys, "onRebuild", mustBeFunction);
          checkForInvalidFlags(watch, watchKeys, `on "watch" in ${callName}() call`), watchMode = {onRebuild};
        }
      if (splitting && flags.push("--splitting"), preserveSymlinks && flags.push("--preserve-symlinks"), metafile && flags.push("--metafile"), outfile && flags.push(`--outfile=${outfile}`), outdir && flags.push(`--outdir=${outdir}`), outbase && flags.push(`--outbase=${outbase}`), platform && flags.push(`--platform=${platform}`), tsconfig && flags.push(`--tsconfig=${tsconfig}`), resolveExtensions) {
        let values = [];
        for (let value of resolveExtensions) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid resolve extension: ${value}`);
          values.push(value);
        }
        flags.push(`--resolve-extensions=${values.join(",")}`);
      }
      if (publicPath && flags.push(`--public-path=${publicPath}`), chunkNames && flags.push(`--chunk-names=${chunkNames}`), assetNames && flags.push(`--asset-names=${assetNames}`), mainFields) {
        let values = [];
        for (let value of mainFields) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid main field: ${value}`);
          values.push(value);
        }
        flags.push(`--main-fields=${values.join(",")}`);
      }
      if (conditions) {
        let values = [];
        for (let value of conditions) {
          if (value += "", value.indexOf(",") >= 0)
            throw new Error(`Invalid condition: ${value}`);
          values.push(value);
        }
        flags.push(`--conditions=${values.join(",")}`);
      }
      if (external)
        for (let name of external)
          flags.push(`--external:${name}`);
      if (banner)
        for (let type in banner) {
          if (type.indexOf("=") >= 0)
            throw new Error(`Invalid banner file type: ${type}`);
          flags.push(`--banner:${type}=${banner[type]}`);
        }
      if (footer)
        for (let type in footer) {
          if (type.indexOf("=") >= 0)
            throw new Error(`Invalid footer file type: ${type}`);
          flags.push(`--footer:${type}=${footer[type]}`);
        }
      if (inject)
        for (let path7 of inject)
          flags.push(`--inject:${path7}`);
      if (loader)
        for (let ext in loader) {
          if (ext.indexOf("=") >= 0)
            throw new Error(`Invalid loader extension: ${ext}`);
          flags.push(`--loader:${ext}=${loader[ext]}`);
        }
      if (outExtension)
        for (let ext in outExtension) {
          if (ext.indexOf("=") >= 0)
            throw new Error(`Invalid out extension: ${ext}`);
          flags.push(`--out-extension:${ext}=${outExtension[ext]}`);
        }
      if (entryPoints)
        for (let entryPoint of entryPoints) {
          if (entryPoint += "", entryPoint.startsWith("-"))
            throw new Error(`Invalid entry point: ${entryPoint}`);
          flags.push(entryPoint);
        }
      if (stdin) {
        let stdinKeys = Object.create(null), contents = getFlag(stdin, stdinKeys, "contents", mustBeString), resolveDir = getFlag(stdin, stdinKeys, "resolveDir", mustBeString), sourcefile = getFlag(stdin, stdinKeys, "sourcefile", mustBeString), loader2 = getFlag(stdin, stdinKeys, "loader", mustBeString);
        checkForInvalidFlags(stdin, stdinKeys, 'in "stdin" object'), sourcefile && flags.push(`--sourcefile=${sourcefile}`), loader2 && flags.push(`--loader=${loader2}`), resolveDir && (stdinResolveDir = resolveDir + ""), stdinContents = contents ? contents + "" : "";
      }
      let nodePaths = [];
      if (nodePathsInput)
        for (let value of nodePathsInput)
          value += "", nodePaths.push(value);
      return {
        flags,
        write,
        plugins,
        stdinContents,
        stdinResolveDir,
        absWorkingDir,
        incremental,
        nodePaths,
        watch: watchMode
      };
    }
    function flagsForTransformOptions(callName, options, isTTY, logLevelDefault) {
      let flags = [], keys2 = Object.create(null);
      pushLogFlags(flags, options, keys2, isTTY, logLevelDefault), pushCommonFlags(flags, options, keys2);
      let sourcemap = getFlag(options, keys2, "sourcemap", mustBeStringOrBoolean), tsconfigRaw = getFlag(options, keys2, "tsconfigRaw", mustBeStringOrObject), sourcefile = getFlag(options, keys2, "sourcefile", mustBeString), loader = getFlag(options, keys2, "loader", mustBeString), banner = getFlag(options, keys2, "banner", mustBeString), footer = getFlag(options, keys2, "footer", mustBeString);
      return checkForInvalidFlags(options, keys2, `in ${callName}() call`), sourcemap && flags.push(`--sourcemap=${sourcemap === !0 ? "external" : sourcemap}`), tsconfigRaw && flags.push(`--tsconfig-raw=${typeof tsconfigRaw == "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`), sourcefile && flags.push(`--sourcefile=${sourcefile}`), loader && flags.push(`--loader=${loader}`), banner && flags.push(`--banner=${banner}`), footer && flags.push(`--footer=${footer}`), flags;
    }
    function createChannel(streamIn) {
      let responseCallbacks = new Map(), pluginCallbacks = new Map(), watchCallbacks = new Map(), serveCallbacks = new Map(), nextServeID = 0, isClosed = !1, nextRequestID = 0, nextBuildKey = 0, stdout = new Uint8Array(16 * 1024), stdoutUsed = 0, readFromStdout = (chunk) => {
        let limit = stdoutUsed + chunk.length;
        if (limit > stdout.length) {
          let swap = new Uint8Array(limit * 2);
          swap.set(stdout), stdout = swap;
        }
        stdout.set(chunk, stdoutUsed), stdoutUsed += chunk.length;
        let offset = 0;
        for (; offset + 4 <= stdoutUsed; ) {
          let length = readUInt32LE(stdout, offset);
          if (offset + 4 + length > stdoutUsed)
            break;
          offset += 4, handleIncomingPacket(stdout.slice(offset, offset + length)), offset += length;
        }
        offset > 0 && (stdout.set(stdout.slice(offset)), stdoutUsed -= offset);
      }, afterClose = () => {
        isClosed = !0;
        for (let callback of responseCallbacks.values())
          callback("The service was stopped", null);
        responseCallbacks.clear();
        for (let callbacks of serveCallbacks.values())
          callbacks.onWait("The service was stopped");
        serveCallbacks.clear();
        for (let callback of watchCallbacks.values())
          try {
            callback(new Error("The service was stopped"), null);
          } catch (e) {
            console.error(e);
          }
        watchCallbacks.clear();
      }, sendRequest = (refs, value, callback) => {
        if (isClosed)
          return callback("The service is no longer running", null);
        let id = nextRequestID++;
        responseCallbacks.set(id, (error, response) => {
          try {
            callback(error, response);
          } finally {
            refs && refs.unref();
          }
        }), refs && refs.ref(), streamIn.writeToStdin(encodePacket({id, isRequest: !0, value}));
      }, sendResponse = (id, value) => {
        if (isClosed)
          throw new Error("The service is no longer running");
        streamIn.writeToStdin(encodePacket({id, isRequest: !1, value}));
      }, handleRequest = (id, request) => __async(this, null, function* () {
        try {
          switch (request.command) {
            case "ping": {
              sendResponse(id, {});
              break;
            }
            case "resolve": {
              let callback = pluginCallbacks.get(request.key);
              callback ? sendResponse(id, yield callback(request)) : sendResponse(id, {});
              break;
            }
            case "load": {
              let callback = pluginCallbacks.get(request.key);
              callback ? sendResponse(id, yield callback(request)) : sendResponse(id, {});
              break;
            }
            case "serve-request": {
              let callbacks = serveCallbacks.get(request.serveID);
              callbacks && callbacks.onRequest && callbacks.onRequest(request.args), sendResponse(id, {});
              break;
            }
            case "serve-wait": {
              let callbacks = serveCallbacks.get(request.serveID);
              callbacks && callbacks.onWait(request.error), sendResponse(id, {});
              break;
            }
            case "watch-rebuild": {
              let callback = watchCallbacks.get(request.watchID);
              try {
                callback && callback(null, request.args);
              } catch (err) {
                console.error(err);
              }
              sendResponse(id, {});
              break;
            }
            default:
              throw new Error("Invalid command: " + request.command);
          }
        } catch (e) {
          sendResponse(id, {errors: [extractErrorMessageV8(e, streamIn, null, void 0)]});
        }
      }), isFirstPacket = !0, handleIncomingPacket = (bytes) => {
        if (isFirstPacket) {
          isFirstPacket = !1;
          let binaryVersion = String.fromCharCode(...bytes);
          if (binaryVersion !== "0.9.0")
            throw new Error(`Cannot start service: Host version "0.9.0" does not match binary version ${JSON.stringify(binaryVersion)}`);
          return;
        }
        let packet = decodePacket(bytes);
        if (packet.isRequest)
          handleRequest(packet.id, packet.value);
        else {
          let callback = responseCallbacks.get(packet.id);
          responseCallbacks.delete(packet.id), packet.value.error ? callback(packet.value.error, {}) : callback(null, packet.value);
        }
      }, handlePlugins = (plugins, request, buildKey, stash) => {
        if (streamIn.isSync)
          throw new Error("Cannot use plugins in synchronous API calls");
        let onResolveCallbacks = {}, onLoadCallbacks = {}, nextCallbackID = 0, i = 0;
        request.plugins = [];
        for (let item of plugins) {
          let keys2 = {};
          if (typeof item != "object")
            throw new Error(`Plugin at index ${i} must be an object`);
          let name = getFlag(item, keys2, "name", mustBeString), setup = getFlag(item, keys2, "setup", mustBeFunction);
          if (typeof name != "string" || name === "")
            throw new Error(`Plugin at index ${i} is missing a name`);
          if (typeof setup != "function")
            throw new Error(`[${name}] Plugin is missing a setup function`);
          checkForInvalidFlags(item, keys2, `on plugin ${JSON.stringify(name)}`);
          let plugin = {
            name,
            onResolve: [],
            onLoad: []
          };
          i++, setup({
            onResolve(options, callback2) {
              let registeredText = 'This error came from the "onResolve" callback registered here', registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onResolve"), keys22 = {}, filter = getFlag(options, keys22, "filter", mustBeRegExp), namespace = getFlag(options, keys22, "namespace", mustBeString);
              if (checkForInvalidFlags(options, keys22, `in onResolve() call for plugin ${JSON.stringify(name)}`), filter == null)
                throw new Error(`[${plugin.name}] onResolve() call is missing a filter`);
              let id = nextCallbackID++;
              onResolveCallbacks[id] = {name, callback: callback2, note: registeredNote}, plugin.onResolve.push({id, filter: filter.source, namespace: namespace || ""});
            },
            onLoad(options, callback2) {
              let registeredText = 'This error came from the "onLoad" callback registered here', registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onLoad"), keys22 = {}, filter = getFlag(options, keys22, "filter", mustBeRegExp), namespace = getFlag(options, keys22, "namespace", mustBeString);
              if (checkForInvalidFlags(options, keys22, `in onLoad() call for plugin ${JSON.stringify(name)}`), filter == null)
                throw new Error(`[${plugin.name}] onLoad() call is missing a filter`);
              let id = nextCallbackID++;
              onLoadCallbacks[id] = {name, callback: callback2, note: registeredNote}, plugin.onLoad.push({id, filter: filter.source, namespace: namespace || ""});
            }
          }), request.plugins.push(plugin);
        }
        let callback = (request2) => __async(this, null, function* () {
          switch (request2.command) {
            case "resolve": {
              let response = {}, name, callback2, note;
              for (let id of request2.ids)
                try {
                  ({name, callback: callback2, note} = onResolveCallbacks[id]);
                  let result = yield callback2({
                    path: request2.path,
                    importer: request2.importer,
                    namespace: request2.namespace,
                    resolveDir: request2.resolveDir,
                    kind: request2.kind,
                    pluginData: stash.load(request2.pluginData)
                  });
                  if (result != null) {
                    if (typeof result != "object")
                      throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);
                    let keys2 = {}, pluginName = getFlag(result, keys2, "pluginName", mustBeString), path7 = getFlag(result, keys2, "path", mustBeString), namespace = getFlag(result, keys2, "namespace", mustBeString), external = getFlag(result, keys2, "external", mustBeBoolean), pluginData = getFlag(result, keys2, "pluginData", canBeAnything), errors = getFlag(result, keys2, "errors", mustBeArray), warnings = getFlag(result, keys2, "warnings", mustBeArray);
                    checkForInvalidFlags(result, keys2, `from onResolve() callback in plugin ${JSON.stringify(name)}`), response.id = id, pluginName != null && (response.pluginName = pluginName), path7 != null && (response.path = path7), namespace != null && (response.namespace = namespace), external != null && (response.external = external), pluginData != null && (response.pluginData = stash.store(pluginData)), errors != null && (response.errors = sanitizeMessages(errors, "errors", stash)), warnings != null && (response.warnings = sanitizeMessages(warnings, "warnings", stash));
                    break;
                  }
                } catch (e) {
                  return {id, errors: [extractErrorMessageV8(e, streamIn, stash, note)]};
                }
              return response;
            }
            case "load": {
              let response = {}, name, callback2, note;
              for (let id of request2.ids)
                try {
                  ({name, callback: callback2, note} = onLoadCallbacks[id]);
                  let result = yield callback2({
                    path: request2.path,
                    namespace: request2.namespace,
                    pluginData: stash.load(request2.pluginData)
                  });
                  if (result != null) {
                    if (typeof result != "object")
                      throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);
                    let keys2 = {}, pluginName = getFlag(result, keys2, "pluginName", mustBeString), contents = getFlag(result, keys2, "contents", mustBeStringOrUint8Array), resolveDir = getFlag(result, keys2, "resolveDir", mustBeString), pluginData = getFlag(result, keys2, "pluginData", canBeAnything), loader = getFlag(result, keys2, "loader", mustBeString), errors = getFlag(result, keys2, "errors", mustBeArray), warnings = getFlag(result, keys2, "warnings", mustBeArray);
                    checkForInvalidFlags(result, keys2, `from onLoad() callback in plugin ${JSON.stringify(name)}`), response.id = id, pluginName != null && (response.pluginName = pluginName), contents instanceof Uint8Array ? response.contents = contents : contents != null && (response.contents = encodeUTF8(contents)), resolveDir != null && (response.resolveDir = resolveDir), pluginData != null && (response.pluginData = stash.store(pluginData)), loader != null && (response.loader = loader), errors != null && (response.errors = sanitizeMessages(errors, "errors", stash)), warnings != null && (response.warnings = sanitizeMessages(warnings, "warnings", stash));
                    break;
                  }
                } catch (e) {
                  return {id, errors: [extractErrorMessageV8(e, streamIn, stash, note)]};
                }
              return response;
            }
            default:
              throw new Error("Invalid command: " + request2.command);
          }
        }), refCount = 0;
        return {
          ref() {
            ++refCount == 1 && pluginCallbacks.set(buildKey, callback);
          },
          unref() {
            --refCount == 0 && pluginCallbacks.delete(buildKey);
          }
        };
      }, buildServeData = (refs, options, request) => {
        let keys2 = {}, port = getFlag(options, keys2, "port", mustBeInteger), host = getFlag(options, keys2, "host", mustBeString), servedir = getFlag(options, keys2, "servedir", mustBeString), onRequest = getFlag(options, keys2, "onRequest", mustBeFunction), serveID = nextServeID++, onWait, wait = new Promise((resolve, reject) => {
          onWait = (error) => {
            serveCallbacks.delete(serveID), error !== null ? reject(new Error(error)) : resolve();
          };
        });
        return request.serve = {serveID}, checkForInvalidFlags(options, keys2, "in serve() call"), port !== void 0 && (request.serve.port = port), host !== void 0 && (request.serve.host = host), servedir !== void 0 && (request.serve.servedir = servedir), serveCallbacks.set(serveID, {
          onRequest,
          onWait
        }), {
          wait,
          stop() {
            sendRequest(refs, {command: "serve-stop", serveID}, () => {
            });
          }
        };
      };
      return {
        readFromStdout,
        afterClose,
        service: {
          buildOrServe(callName, callerRefs, serveOptions, options, isTTY, defaultWD, callback) {
            let pluginRefs, details = createObjectStash(), logLevelDefault = "warning", refs = {
              ref() {
                pluginRefs && pluginRefs.ref(), callerRefs && callerRefs.ref();
              },
              unref() {
                pluginRefs && pluginRefs.unref(), callerRefs && callerRefs.unref();
              }
            };
            try {
              let key = nextBuildKey++, writeDefault = !streamIn.isBrowser, {
                flags,
                write,
                plugins,
                stdinContents,
                stdinResolveDir,
                absWorkingDir,
                incremental,
                nodePaths,
                watch
              } = flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault), request = {
                command: "build",
                key,
                flags,
                write,
                stdinContents,
                stdinResolveDir,
                absWorkingDir: absWorkingDir || defaultWD,
                incremental,
                nodePaths,
                hasOnRebuild: !!(watch && watch.onRebuild)
              }, serve2 = serveOptions && buildServeData(refs, serveOptions, request);
              plugins && plugins.length > 0 && (pluginRefs = handlePlugins(plugins, request, key, details));
              let rebuild, stop, buildResponseToResult = (response, callback2) => {
                let errors = replaceDetailsInMessages(response.errors, details), warnings = replaceDetailsInMessages(response.warnings, details);
                if (errors.length > 0)
                  return callback2(failureErrorWithLog("Build failed", errors, warnings), null);
                let result = {warnings};
                if (response.outputFiles && (result.outputFiles = response.outputFiles.map(convertOutputFiles)), response.metafile && (result.metafile = JSON.parse(response.metafile)), response.writeToStdout !== void 0 && console.log(decodeUTF8(response.writeToStdout).replace(/\n$/, "")), response.rebuildID !== void 0) {
                  if (!rebuild) {
                    let isDisposed = !1;
                    rebuild = () => new Promise((resolve, reject) => {
                      if (isDisposed || isClosed)
                        throw new Error("Cannot rebuild");
                      sendRequest(refs, {command: "rebuild", rebuildID: response.rebuildID}, (error2, response2) => {
                        if (error2)
                          return callback2(new Error(error2), null);
                        buildResponseToResult(response2, (error3, result3) => {
                          error3 ? reject(error3) : resolve(result3);
                        });
                      });
                    }), refs.ref(), rebuild.dispose = () => {
                      isDisposed || (isDisposed = !0, sendRequest(refs, {command: "rebuild-dispose", rebuildID: response.rebuildID}, () => {
                      }), refs.unref());
                    };
                  }
                  result.rebuild = rebuild;
                }
                if (response.watchID !== void 0) {
                  if (!stop) {
                    let isStopped = !1;
                    refs.ref(), stop = () => {
                      isStopped || (isStopped = !0, watchCallbacks.delete(response.watchID), sendRequest(refs, {command: "watch-stop", watchID: response.watchID}, () => {
                      }), refs.unref());
                    }, watch && watch.onRebuild && watchCallbacks.set(response.watchID, (serviceStopError, watchResponse) => {
                      if (serviceStopError)
                        return watch.onRebuild(serviceStopError, null);
                      let errors2 = replaceDetailsInMessages(watchResponse.errors, details), warnings2 = replaceDetailsInMessages(watchResponse.warnings, details);
                      if (errors2.length > 0)
                        return watch.onRebuild(failureErrorWithLog("Build failed", errors2, warnings2), null);
                      let result2 = {warnings: warnings2};
                      watchResponse.outputFiles && (result2.outputFiles = watchResponse.outputFiles.map(convertOutputFiles)), watchResponse.rebuildID !== void 0 && (result2.rebuild = rebuild), result2.stop = stop, watch.onRebuild(null, result2);
                    });
                  }
                  result.stop = stop;
                }
                return callback2(null, result);
              };
              if (write && streamIn.isBrowser)
                throw new Error('Cannot enable "write" in the browser');
              if (incremental && streamIn.isSync)
                throw new Error('Cannot use "incremental" with a synchronous build');
              sendRequest(refs, request, (error, response) => {
                if (error)
                  return callback(new Error(error), null);
                if (serve2) {
                  let serveResponse = response, isStopped = !1;
                  refs.ref();
                  let result = {
                    port: serveResponse.port,
                    host: serveResponse.host,
                    wait: serve2.wait,
                    stop() {
                      isStopped || (isStopped = !0, serve2.stop(), refs.unref());
                    }
                  };
                  return refs.ref(), serve2.wait.then(refs.unref, refs.unref), callback(null, result);
                }
                return buildResponseToResult(response, callback);
              });
            } catch (e) {
              let flags = [];
              try {
                pushLogFlags(flags, options, {}, isTTY, logLevelDefault);
              } catch (e2) {
              }
              let error = extractErrorMessageV8(e, streamIn, details, void 0);
              sendRequest(refs, {command: "error", flags, error}, () => {
                error.detail = details.load(error.detail), callback(failureErrorWithLog("Build failed", [error], []), null);
              });
            }
          },
          transform(callName, refs, input, options, isTTY, fs, callback) {
            let details = createObjectStash(), logLevelDefault = "silent", start = (inputPath) => {
              try {
                if (typeof input != "string")
                  throw new Error('The input to "transform" must be a string');
                let flags = flagsForTransformOptions(callName, options, isTTY, logLevelDefault);
                sendRequest(refs, {
                  command: "transform",
                  flags,
                  inputFS: inputPath !== null,
                  input: inputPath !== null ? inputPath : input
                }, (error, response) => {
                  if (error)
                    return callback(new Error(error), null);
                  let errors = replaceDetailsInMessages(response.errors, details), warnings = replaceDetailsInMessages(response.warnings, details), outstanding = 1, next = () => --outstanding == 0 && callback(null, {warnings, code: response.code, map: response.map});
                  if (errors.length > 0)
                    return callback(failureErrorWithLog("Transform failed", errors, warnings), null);
                  response.codeFS && (outstanding++, fs.readFile(response.code, (err, contents) => {
                    err !== null ? callback(err, null) : (response.code = contents, next());
                  })), response.mapFS && (outstanding++, fs.readFile(response.map, (err, contents) => {
                    err !== null ? callback(err, null) : (response.map = contents, next());
                  })), next();
                });
              } catch (e) {
                let flags = [];
                try {
                  pushLogFlags(flags, options, {}, isTTY, logLevelDefault);
                } catch (e2) {
                }
                let error = extractErrorMessageV8(e, streamIn, details, void 0);
                sendRequest(refs, {command: "error", flags, error}, () => {
                  error.detail = details.load(error.detail), callback(failureErrorWithLog("Transform failed", [error], []), null);
                });
              }
            };
            if (typeof input == "string" && input.length > 1024 * 1024) {
              let next = start;
              start = () => fs.writeFile(input, next);
            }
            start(null);
          }
        }
      };
    }
    function createObjectStash() {
      let map = new Map(), nextID = 0;
      return {
        load(id) {
          return map.get(id);
        },
        store(value) {
          if (value === void 0)
            return -1;
          let id = nextID++;
          return map.set(id, value), id;
        }
      };
    }
    function extractCallerV8(e, streamIn, ident) {
      try {
        let lines = (e.stack + "").split(`
`);
        lines.splice(1, 1);
        let location2 = parseStackLinesV8(streamIn, lines, ident);
        if (location2)
          return {text: e.message, location: location2};
      } catch (e2) {
      }
    }
    function extractErrorMessageV8(e, streamIn, stash, note) {
      let text = "Internal error", location2 = null;
      try {
        text = (e && e.message || e) + "";
      } catch (e2) {
      }
      try {
        location2 = parseStackLinesV8(streamIn, (e.stack + "").split(`
`), "");
      } catch (e2) {
      }
      return {text, location: location2, notes: note ? [note] : [], detail: stash ? stash.store(e) : -1};
    }
    function parseStackLinesV8(streamIn, lines, ident) {
      let at = "    at ";
      if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at))
        for (let i = 1; i < lines.length; i++) {
          let line = lines[i];
          if (!!line.startsWith(at))
            for (line = line.slice(at.length); ; ) {
              let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
              if (match) {
                line = match[1];
                continue;
              }
              if (match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line), match) {
                line = match[1];
                continue;
              }
              if (match = /^(\S+):(\d+):(\d+)$/.exec(line), match) {
                let lineText = streamIn.readFileSync(match[1], "utf8").split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "", column = +match[3] - 1, length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
                return {
                  file: match[1],
                  namespace: "file",
                  line: +match[2],
                  column: encodeUTF8(lineText.slice(0, column)).length,
                  length: encodeUTF8(lineText.slice(column, column + length)).length,
                  lineText: lineText + `
` + lines.slice(1).join(`
`)
                };
              }
              break;
            }
        }
      return null;
    }
    function failureErrorWithLog(text, errors, warnings) {
      let limit = 5, summary = errors.length < 1 ? "" : ` with ${errors.length} error${errors.length < 2 ? "" : "s"}:` + errors.slice(0, limit + 1).map((e, i) => {
        if (i === limit)
          return `
...`;
        if (!e.location)
          return `
error: ${e.text}`;
        let {file, line, column} = e.location;
        return `
${file}:${line}:${column}: error: ${e.text}`;
      }).join(""), error = new Error(`${text}${summary}`);
      return error.errors = errors, error.warnings = warnings, error;
    }
    function replaceDetailsInMessages(messages, stash) {
      for (let message of messages)
        message.detail = stash.load(message.detail);
      return messages;
    }
    function sanitizeLocation(location2, where) {
      if (location2 == null)
        return null;
      let keys2 = {}, file = getFlag(location2, keys2, "file", mustBeString), namespace = getFlag(location2, keys2, "namespace", mustBeString), line = getFlag(location2, keys2, "line", mustBeInteger), column = getFlag(location2, keys2, "column", mustBeInteger), length = getFlag(location2, keys2, "length", mustBeInteger), lineText = getFlag(location2, keys2, "lineText", mustBeString);
      return checkForInvalidFlags(location2, keys2, where), {
        file: file || "",
        namespace: namespace || "",
        line: line || 0,
        column: column || 0,
        length: length || 0,
        lineText: lineText || ""
      };
    }
    function sanitizeMessages(messages, property, stash) {
      let messagesClone = [], index = 0;
      for (let message of messages) {
        let keys2 = {}, text = getFlag(message, keys2, "text", mustBeString), location2 = getFlag(message, keys2, "location", mustBeObjectOrNull), notes = getFlag(message, keys2, "notes", mustBeArray), detail = getFlag(message, keys2, "detail", canBeAnything), where = `in element ${index} of "${property}"`;
        checkForInvalidFlags(message, keys2, where);
        let notesClone = [];
        if (notes)
          for (let note of notes) {
            let noteKeys = {}, noteText = getFlag(note, noteKeys, "text", mustBeString), noteLocation = getFlag(note, noteKeys, "location", mustBeObjectOrNull);
            checkForInvalidFlags(note, noteKeys, where), notesClone.push({
              text: noteText || "",
              location: sanitizeLocation(noteLocation, where)
            });
          }
        messagesClone.push({
          text: text || "",
          location: sanitizeLocation(location2, where),
          notes: notesClone,
          detail: stash.store(detail)
        }), index++;
      }
      return messagesClone;
    }
    function convertOutputFiles({path: path7, contents}) {
      let text = null;
      return {
        path: path7,
        contents,
        get text() {
          return text === null && (text = decodeUTF8(contents)), text;
        }
      };
    }
    var version = "0.9.0", build2 = (options) => ensureServiceIsRunning().build(options), serve = () => {
      throw new Error('The "serve" API only works in node');
    }, transform = (input, options) => ensureServiceIsRunning().transform(input, options), buildSync = () => {
      throw new Error('The "buildSync" API only works in node');
    }, transformSync = () => {
      throw new Error('The "transformSync" API only works in node');
    }, initializePromise, longLivedService, ensureServiceIsRunning = () => {
      if (longLivedService)
        return longLivedService;
      throw initializePromise ? new Error('You need to wait for the promise returned from "initialize" to be resolved before calling this') : new Error('You need to call "initialize" before calling this');
    }, initialize = (options) => {
      options = validateInitializeOptions(options || {});
      let wasmURL = options.wasmURL, useWorker = options.worker !== !1;
      if (!wasmURL)
        throw new Error('Must provide the "wasmURL" option');
      if (wasmURL += "", initializePromise)
        throw new Error('Cannot call "initialize" more than once');
      return initializePromise = startRunningService(wasmURL, useWorker), initializePromise.catch(() => {
        initializePromise = void 0;
      }), initializePromise;
    }, startRunningService = (wasmURL, useWorker) => __async(void 0, null, function* () {
      let res = yield fetch(wasmURL);
      if (!res.ok)
        throw new Error(`Failed to download ${JSON.stringify(wasmURL)}`);
      let wasm = yield res.arrayBuffer(), code = `{let global={};for(let o=self;o;o=Object.getPrototypeOf(o))for(let k of Object.getOwnPropertyNames(o))if(!(k in global))Object.defineProperty(global,k,{get:()=>self[k]});// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

(() => {
	// Map multiple JavaScript environments to a single common API,
	// preferring web standards over Node.js API.
	//
	// Environments considered:
	// - Browsers
	// - Node.js
	// - Electron
	// - Parcel
	// - Webpack

	if (typeof global !== "undefined") {
		// global already exists
	} else if (typeof window !== "undefined") {
		window.global = window;
	} else if (typeof self !== "undefined") {
		self.global = self;
	} else {
		throw new Error("cannot export Go (neither global, window nor self is defined)");
	}

	if (!global.require && typeof require !== "undefined") {
		global.require = require;
	}

	if (!global.fs && global.require) {
		const fs = require("fs");
		if (typeof fs === "object" && fs !== null && Object.keys(fs).length !== 0) {
			
    global.fs = Object.assign({}, fs, {
      // Hack around a Unicode bug in node: https://github.com/nodejs/node/issues/24550
      write(fd, buf, offset, length, position, callback) {
        if (offset === 0 && length === buf.length && position === null) {
          if (fd === process.stdout.fd) {
            try {
              process.stdout.write(buf, err => err ? callback(err, 0, null) : callback(null, length, buf));
            } catch (err) {
              callback(err, 0, null);
            }
            return;
          }
          if (fd === process.stderr.fd) {
            try {
              process.stderr.write(buf, err => err ? callback(err, 0, null) : callback(null, length, buf));
            } catch (err) {
              callback(err, 0, null);
            }
            return;
          }
        }
        fs.write(fd, buf, offset, length, position, callback);
      },
    });
  
		}
	}

	const enosys = () => {
		const err = new Error("not implemented");
		err.code = "ENOSYS";
		return err;
	};

	if (!global.fs) {
		let outputBuf = "";
		global.fs = {
			constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused
			writeSync(fd, buf) {
				outputBuf += decoder.decode(buf);
				const nl = outputBuf.lastIndexOf("\\n");
				if (nl != -1) {
					console.log(outputBuf.substr(0, nl));
					outputBuf = outputBuf.substr(nl + 1);
				}
				return buf.length;
			},
			write(fd, buf, offset, length, position, callback) {
				if (offset !== 0 || length !== buf.length || position !== null) {
					callback(enosys());
					return;
				}
				const n = this.writeSync(fd, buf);
				callback(null, n);
			},
			chmod(path, mode, callback) { callback(enosys()); },
			chown(path, uid, gid, callback) { callback(enosys()); },
			close(fd, callback) { callback(enosys()); },
			fchmod(fd, mode, callback) { callback(enosys()); },
			fchown(fd, uid, gid, callback) { callback(enosys()); },
			fstat(fd, callback) { callback(enosys()); },
			fsync(fd, callback) { callback(null); },
			ftruncate(fd, length, callback) { callback(enosys()); },
			lchown(path, uid, gid, callback) { callback(enosys()); },
			link(path, link, callback) { callback(enosys()); },
			lstat(path, callback) { callback(enosys()); },
			mkdir(path, perm, callback) { callback(enosys()); },
			open(path, flags, mode, callback) { callback(enosys()); },
			read(fd, buffer, offset, length, position, callback) { callback(enosys()); },
			readdir(path, callback) { callback(enosys()); },
			readlink(path, callback) { callback(enosys()); },
			rename(from, to, callback) { callback(enosys()); },
			rmdir(path, callback) { callback(enosys()); },
			stat(path, callback) { callback(enosys()); },
			symlink(path, link, callback) { callback(enosys()); },
			truncate(path, length, callback) { callback(enosys()); },
			unlink(path, callback) { callback(enosys()); },
			utimes(path, atime, mtime, callback) { callback(enosys()); },
		};
	}

	if (!global.process) {
		global.process = {
			getuid() { return -1; },
			getgid() { return -1; },
			geteuid() { return -1; },
			getegid() { return -1; },
			getgroups() { throw enosys(); },
			pid: -1,
			ppid: -1,
			umask() { throw enosys(); },
			cwd() { throw enosys(); },
			chdir() { throw enosys(); },
		}
	}

	if (!global.crypto && global.require) {
		const nodeCrypto = require("crypto");
		global.crypto = {
			getRandomValues(b) {
				nodeCrypto.randomFillSync(b);
			},
		};
	}
	if (!global.crypto) {
		throw new Error("global.crypto is not available, polyfill required (getRandomValues only)");
	}

	if (!global.performance) {
		global.performance = {
			now() {
				const [sec, nsec] = process.hrtime();
				return sec * 1000 + nsec / 1000000;
			},
		};
	}

	if (!global.TextEncoder && global.require) {
		global.TextEncoder = require("util").TextEncoder;
	}
	if (!global.TextEncoder) {
		throw new Error("global.TextEncoder is not available, polyfill required");
	}

	if (!global.TextDecoder && global.require) {
		global.TextDecoder = require("util").TextDecoder;
	}
	if (!global.TextDecoder) {
		throw new Error("global.TextDecoder is not available, polyfill required");
	}

	// End of polyfills for common API.

	const encoder = new TextEncoder("utf-8");
	const decoder = new TextDecoder("utf-8");

	global.Go = class {
		constructor() {
			this.argv = ["js"];
			this.env = {};
			this.exit = (code) => {
				if (code !== 0) {
					console.warn("exit code:", code);
				}
			};
			this._exitPromise = new Promise((resolve) => {
				this._resolveExitPromise = resolve;
			});
			this._pendingEvent = null;
			this._scheduledTimeouts = new Map();
			this._nextCallbackTimeoutID = 1;

			const setInt64 = (addr, v) => {
				this.mem.setUint32(addr + 0, v, true);
				this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);
			}

			const getInt64 = (addr) => {
				const low = this.mem.getUint32(addr + 0, true);
				const high = this.mem.getInt32(addr + 4, true);
				return low + high * 4294967296;
			}

			const loadValue = (addr) => {
				const f = this.mem.getFloat64(addr, true);
				if (f === 0) {
					return undefined;
				}
				if (!isNaN(f)) {
					return f;
				}

				const id = this.mem.getUint32(addr, true);
				return this._values[id];
			}

			const storeValue = (addr, v) => {
				const nanHead = 0x7FF80000;

				if (typeof v === "number" && v !== 0) {
					if (isNaN(v)) {
						this.mem.setUint32(addr + 4, nanHead, true);
						this.mem.setUint32(addr, 0, true);
						return;
					}
					this.mem.setFloat64(addr, v, true);
					return;
				}

				if (v === undefined) {
					this.mem.setFloat64(addr, 0, true);
					return;
				}

				let id = this._ids.get(v);
				if (id === undefined) {
					id = this._idPool.pop();
					if (id === undefined) {
						id = this._values.length;
					}
					this._values[id] = v;
					this._goRefCounts[id] = 0;
					this._ids.set(v, id);
				}
				this._goRefCounts[id]++;
				let typeFlag = 0;
				switch (typeof v) {
					case "object":
						if (v !== null) {
							typeFlag = 1;
						}
						break;
					case "string":
						typeFlag = 2;
						break;
					case "symbol":
						typeFlag = 3;
						break;
					case "function":
						typeFlag = 4;
						break;
				}
				this.mem.setUint32(addr + 4, nanHead | typeFlag, true);
				this.mem.setUint32(addr, id, true);
			}

			const loadSlice = (addr) => {
				const array = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				return new Uint8Array(this._inst.exports.mem.buffer, array, len);
			}

			const loadSliceOfValues = (addr) => {
				const array = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				const a = new Array(len);
				for (let i = 0; i < len; i++) {
					a[i] = loadValue(array + i * 8);
				}
				return a;
			}

			const loadString = (addr) => {
				const saddr = getInt64(addr + 0);
				const len = getInt64(addr + 8);
				return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));
			}

			const timeOrigin = Date.now() - performance.now();
			this.importObject = {
				go: {
					// Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)
					// may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported
					// function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).
					// This changes the SP, thus we have to update the SP used by the imported function.

					// func wasmExit(code int32)
					"runtime.wasmExit": (sp) => {
						sp >>>= 0;
						const code = this.mem.getInt32(sp + 8, true);
						this.exited = true;
						delete this._inst;
						delete this._values;
						delete this._goRefCounts;
						delete this._ids;
						delete this._idPool;
						this.exit(code);
					},

					// func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)
					"runtime.wasmWrite": (sp) => {
						sp >>>= 0;
						const fd = getInt64(sp + 8);
						const p = getInt64(sp + 16);
						const n = this.mem.getInt32(sp + 24, true);
						fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));
					},

					// func resetMemoryDataView()
					"runtime.resetMemoryDataView": (sp) => {
						sp >>>= 0;
						this.mem = new DataView(this._inst.exports.mem.buffer);
					},

					// func nanotime1() int64
					"runtime.nanotime1": (sp) => {
						sp >>>= 0;
						setInt64(sp + 8, (timeOrigin + performance.now()) * 1000000);
					},

					// func walltime1() (sec int64, nsec int32)
					"runtime.walltime1": (sp) => {
						sp >>>= 0;
						const msec = (new Date).getTime();
						setInt64(sp + 8, msec / 1000);
						this.mem.setInt32(sp + 16, (msec % 1000) * 1000000, true);
					},

					// func scheduleTimeoutEvent(delay int64) int32
					"runtime.scheduleTimeoutEvent": (sp) => {
						sp >>>= 0;
						const id = this._nextCallbackTimeoutID;
						this._nextCallbackTimeoutID++;
						this._scheduledTimeouts.set(id, setTimeout(
							() => {
								this._resume();
								while (this._scheduledTimeouts.has(id)) {
									// for some reason Go failed to register the timeout event, log and try again
									// (temporary workaround for https://github.com/golang/go/issues/28975)
									console.warn("scheduleTimeoutEvent: missed timeout event");
									this._resume();
								}
							},
							getInt64(sp + 8) + 1, // setTimeout has been seen to fire up to 1 millisecond early
						));
						this.mem.setInt32(sp + 16, id, true);
					},

					// func clearTimeoutEvent(id int32)
					"runtime.clearTimeoutEvent": (sp) => {
						sp >>>= 0;
						const id = this.mem.getInt32(sp + 8, true);
						clearTimeout(this._scheduledTimeouts.get(id));
						this._scheduledTimeouts.delete(id);
					},

					// func getRandomData(r []byte)
					"runtime.getRandomData": (sp) => {
						sp >>>= 0;
						crypto.getRandomValues(loadSlice(sp + 8));
					},

					// func finalizeRef(v ref)
					"syscall/js.finalizeRef": (sp) => {
						sp >>>= 0;
						const id = this.mem.getUint32(sp + 8, true);
						this._goRefCounts[id]--;
						if (this._goRefCounts[id] === 0) {
							const v = this._values[id];
							this._values[id] = null;
							this._ids.delete(v);
							this._idPool.push(id);
						}
					},

					// func stringVal(value string) ref
					"syscall/js.stringVal": (sp) => {
						sp >>>= 0;
						storeValue(sp + 24, loadString(sp + 8));
					},

					// func valueGet(v ref, p string) ref
					"syscall/js.valueGet": (sp) => {
						sp >>>= 0;
						const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));
						sp = this._inst.exports.getsp() >>> 0; // see comment above
						storeValue(sp + 32, result);
					},

					// func valueSet(v ref, p string, x ref)
					"syscall/js.valueSet": (sp) => {
						sp >>>= 0;
						Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));
					},

					// func valueDelete(v ref, p string)
					"syscall/js.valueDelete": (sp) => {
						sp >>>= 0;
						Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));
					},

					// func valueIndex(v ref, i int) ref
					"syscall/js.valueIndex": (sp) => {
						sp >>>= 0;
						storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));
					},

					// valueSetIndex(v ref, i int, x ref)
					"syscall/js.valueSetIndex": (sp) => {
						sp >>>= 0;
						Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));
					},

					// func valueCall(v ref, m string, args []ref) (ref, bool)
					"syscall/js.valueCall": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const m = Reflect.get(v, loadString(sp + 16));
							const args = loadSliceOfValues(sp + 32);
							const result = Reflect.apply(m, v, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 56, result);
							this.mem.setUint8(sp + 64, 1);
						} catch (err) {
							storeValue(sp + 56, err);
							this.mem.setUint8(sp + 64, 0);
						}
					},

					// func valueInvoke(v ref, args []ref) (ref, bool)
					"syscall/js.valueInvoke": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const args = loadSliceOfValues(sp + 16);
							const result = Reflect.apply(v, undefined, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, result);
							this.mem.setUint8(sp + 48, 1);
						} catch (err) {
							storeValue(sp + 40, err);
							this.mem.setUint8(sp + 48, 0);
						}
					},

					// func valueNew(v ref, args []ref) (ref, bool)
					"syscall/js.valueNew": (sp) => {
						sp >>>= 0;
						try {
							const v = loadValue(sp + 8);
							const args = loadSliceOfValues(sp + 16);
							const result = Reflect.construct(v, args);
							sp = this._inst.exports.getsp() >>> 0; // see comment above
							storeValue(sp + 40, result);
							this.mem.setUint8(sp + 48, 1);
						} catch (err) {
							storeValue(sp + 40, err);
							this.mem.setUint8(sp + 48, 0);
						}
					},

					// func valueLength(v ref) int
					"syscall/js.valueLength": (sp) => {
						sp >>>= 0;
						setInt64(sp + 16, parseInt(loadValue(sp + 8).length));
					},

					// valuePrepareString(v ref) (ref, int)
					"syscall/js.valuePrepareString": (sp) => {
						sp >>>= 0;
						const str = encoder.encode(String(loadValue(sp + 8)));
						storeValue(sp + 16, str);
						setInt64(sp + 24, str.length);
					},

					// valueLoadString(v ref, b []byte)
					"syscall/js.valueLoadString": (sp) => {
						sp >>>= 0;
						const str = loadValue(sp + 8);
						loadSlice(sp + 16).set(str);
					},

					// func valueInstanceOf(v ref, t ref) bool
					"syscall/js.valueInstanceOf": (sp) => {
						sp >>>= 0;
						this.mem.setUint8(sp + 24, (loadValue(sp + 8) instanceof loadValue(sp + 16)) ? 1 : 0);
					},

					// func copyBytesToGo(dst []byte, src ref) (int, bool)
					"syscall/js.copyBytesToGo": (sp) => {
						sp >>>= 0;
						const dst = loadSlice(sp + 8);
						const src = loadValue(sp + 32);
						if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {
							this.mem.setUint8(sp + 48, 0);
							return;
						}
						const toCopy = src.subarray(0, dst.length);
						dst.set(toCopy);
						setInt64(sp + 40, toCopy.length);
						this.mem.setUint8(sp + 48, 1);
					},

					// func copyBytesToJS(dst ref, src []byte) (int, bool)
					"syscall/js.copyBytesToJS": (sp) => {
						sp >>>= 0;
						const dst = loadValue(sp + 8);
						const src = loadSlice(sp + 16);
						if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {
							this.mem.setUint8(sp + 48, 0);
							return;
						}
						const toCopy = src.subarray(0, dst.length);
						dst.set(toCopy);
						setInt64(sp + 40, toCopy.length);
						this.mem.setUint8(sp + 48, 1);
					},

					"debug": (value) => {
						console.log(value);
					},
				}
			};
		}

		async run(instance) {
			if (!(instance instanceof WebAssembly.Instance)) {
				throw new Error("Go.run: WebAssembly.Instance expected");
			}
			this._inst = instance;
			this.mem = new DataView(this._inst.exports.mem.buffer);
			this._values = [ // JS values that Go currently has references to, indexed by reference id
				NaN,
				0,
				null,
				true,
				false,
				global,
				this,
			];
			this._goRefCounts = new Array(this._values.length).fill(Infinity); // number of references that Go has to a JS value, indexed by reference id
			this._ids = new Map([ // mapping from JS values to reference ids
				[0, 1],
				[null, 2],
				[true, 3],
				[false, 4],
				[global, 5],
				[this, 6],
			]);
			this._idPool = [];   // unused ids that have been garbage collected
			this.exited = false; // whether the Go program has exited

			// Pass command line arguments and environment variables to WebAssembly by writing them to the linear memory.
			let offset = 4096;

			const strPtr = (str) => {
				const ptr = offset;
				const bytes = encoder.encode(str + "\\0");
				new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);
				offset += bytes.length;
				if (offset % 8 !== 0) {
					offset += 8 - (offset % 8);
				}
				return ptr;
			};

			const argc = this.argv.length;

			const argvPtrs = [];
			this.argv.forEach((arg) => {
				argvPtrs.push(strPtr(arg));
			});
			argvPtrs.push(0);

			const keys = Object.keys(this.env).sort();
			keys.forEach((key) => {
				argvPtrs.push(strPtr(\`\${key}=\${this.env[key]}\`));
			});
			argvPtrs.push(0);

			const argv = offset;
			argvPtrs.forEach((ptr) => {
				this.mem.setUint32(offset, ptr, true);
				this.mem.setUint32(offset + 4, 0, true);
				offset += 8;
			});

			this._inst.exports.run(argc, argv);
			if (this.exited) {
				this._resolveExitPromise();
			}
			await this._exitPromise;
		}

		_resume() {
			if (this.exited) {
				throw new Error("Go program has already exited");
			}
			this._inst.exports.resume();
			if (this.exited) {
				this._resolveExitPromise();
			}
		}

		_makeFuncWrapper(id) {
			const go = this;
			return function () {
				const event = { id: id, this: this, args: arguments };
				go._pendingEvent = event;
				go._resume();
				return event.result;
			};
		}
	}

	if (
		typeof module !== "undefined" &&
		global.require &&
		global.require.main === module &&
		global.process &&
		global.process.versions &&
		!global.process.versions.electron
	) {
		if (process.argv.length < 3) {
			console.error("usage: go_js_wasm_exec [wasm binary] [arguments]");
			process.exit(1);
		}

		const go = new Go();
		go.argv = process.argv.slice(2);
		go.env = Object.assign({ TMPDIR: require("os").tmpdir() }, process.env);
		go.exit = process.exit;
		WebAssembly.instantiate(fs.readFileSync(process.argv[2]), go.importObject).then((result) => {
			process.on("exit", (code) => { // Node.js exits if no event handler is pending
				if (code === 0 && !go.exited) {
					// deadlock, make Go print error and stack traces
					go._pendingEvent = { id: 0 };
					go._resume();
				}
			});
			return go.run(result.instance);
		}).catch((err) => {
			console.error(err);
			process.exit(1);
		});
	}
})();
onmessage = ({data: wasm}) => {
  let decoder = new TextDecoder();
  let fs = global.fs;
  let stderr = "";
  fs.writeSync = (fd, buffer) => {
    if (fd === 1) {
      postMessage(buffer);
    } else if (fd === 2) {
      stderr += decoder.decode(buffer);
      let parts = stderr.split("\\n");
      if (parts.length > 1)
        console.log(parts.slice(0, -1).join("\\n"));
      stderr = parts[parts.length - 1];
    } else {
      throw new Error("Bad write");
    }
    return buffer.length;
  };
  let stdin = [];
  let resumeStdin;
  let stdinPos = 0;
  onmessage = ({data}) => {
    if (data.length > 0) {
      stdin.push(data);
      if (resumeStdin)
        resumeStdin();
    }
  };
  fs.read = (fd, buffer, offset, length, position, callback) => {
    if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {
      throw new Error("Bad read");
    }
    if (stdin.length === 0) {
      resumeStdin = () => fs.read(fd, buffer, offset, length, position, callback);
      return;
    }
    let first = stdin[0];
    let count = Math.max(0, Math.min(length, first.length - stdinPos));
    buffer.set(first.subarray(stdinPos, stdinPos + count), offset);
    stdinPos += count;
    if (stdinPos === first.length) {
      stdin.shift();
      stdinPos = 0;
    }
    callback(null, count);
  };
  let go = new global.Go();
  go.argv = ["", \`--service=\${"0.9.0"}\`];
  WebAssembly.instantiate(wasm, go.importObject).then(({instance}) => go.run(instance));
};}`, worker;
      if (useWorker) {
        let blob = new Blob([code], {type: "text/javascript"});
        worker = new Worker(URL.createObjectURL(blob));
      } else {
        let onmessage = new Function("postMessage", code + "var onmessage; return m => onmessage(m)")((data) => worker.onmessage({data}));
        worker = {
          onmessage: null,
          postMessage: (data) => onmessage({data}),
          terminate() {
          }
        };
      }
      worker.postMessage(wasm), worker.onmessage = ({data}) => readFromStdout(data);
      let {readFromStdout, service} = createChannel({
        writeToStdin(bytes) {
          worker.postMessage(bytes);
        },
        isSync: !1,
        isBrowser: !0
      });
      longLivedService = {
        build: (options) => new Promise((resolve, reject) => service.buildOrServe("build", null, null, options, !1, "/", (err, res2) => err ? reject(err) : resolve(res2))),
        transform: (input, options) => new Promise((resolve, reject) => service.transform("transform", null, input, options || {}, !1, {
          readFile(_, callback) {
            callback(new Error("Internal error"), null);
          },
          writeFile(_, callback) {
            callback(null);
          }
        }, (err, res2) => err ? reject(err) : resolve(res2)))
      };
    });
  })(typeof exports == "object" ? exports : (typeof self != "undefined" ? self : exports).esbuild = {});
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isBuffer.js
var require_isBuffer = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => isBuffer_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, Buffer2 = moduleExports ? root_default.Buffer : void 0, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, isBuffer3 = nativeIsBuffer || stubFalse_default, isBuffer_default = isBuffer3;
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nodeUtil.js
var require_nodeUtil = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => nodeUtil_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, freeProcess = moduleExports && freeGlobal_default.process, nodeUtil4 = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      return types || freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }(), nodeUtil_default = nodeUtil4;
});

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneBuffer.js
var require_cloneBuffer = __commonJS((exports, module) => {
  __markAsModule(exports);
  __export(exports, {
    default: () => cloneBuffer_default
  });
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports, freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module, moduleExports = freeModule && freeModule.exports === freeExports, Buffer2 = moduleExports ? root_default.Buffer : void 0, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
  function cloneBuffer2(buffer, isDeep) {
    if (isDeep)
      return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    return buffer.copy(result), result;
  }
  var cloneBuffer_default = cloneBuffer2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/constants.js
var require_constants = __commonJS((exports, module) => {
  var SEMVER_SPEC_VERSION = "2.0.0", MAX_LENGTH = 256, MAX_SAFE_INTEGER3 = Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_COMPONENT_LENGTH = 16;
  module.exports = {
    SEMVER_SPEC_VERSION,
    MAX_LENGTH,
    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER3,
    MAX_SAFE_COMPONENT_LENGTH
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/debug.js
var require_debug = __commonJS((exports, module) => {
  var debug = typeof process == "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
  };
  module.exports = debug;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/re.js
var require_re = __commonJS((exports, module) => {
  var {MAX_SAFE_COMPONENT_LENGTH} = require_constants(), debug = require_debug();
  exports = module.exports = {};
  var re = exports.re = [], src = exports.src = [], t = exports.t = {}, R = 0, createToken = (name, value, isGlobal) => {
    let index = R++;
    debug(index, value), t[name] = index, src[index] = value, re[index] = new RegExp(value, isGlobal ? "g" : void 0);
  };
  createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
  createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
  createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
  createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
  createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
  createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
  createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
  createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
  createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
  createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
  createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
  createToken("FULL", `^${src[t.FULLPLAIN]}$`);
  createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
  createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
  createToken("GTLT", "((?:<|>)?=?)");
  createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
  createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
  createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
  createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
  createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
  createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
  createToken("COERCERTL", src[t.COERCE], !0);
  createToken("LONETILDE", "(?:~>?)");
  createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, !0);
  exports.tildeTrimReplace = "$1~";
  createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
  createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("LONECARET", "(?:\\^)");
  createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, !0);
  exports.caretTrimReplace = "$1^";
  createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
  createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
  createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
  createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
  createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, !0);
  exports.comparatorTrimReplace = "$1$2$3";
  createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
  createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
  createToken("STAR", "(<|>)?=?\\s*\\*");
  createToken("GTE0", "^\\s*>=\\s*0.0.0\\s*$");
  createToken("GTE0PRE", "^\\s*>=\\s*0.0.0-0\\s*$");
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS((exports, module) => {
  var opts = ["includePrerelease", "loose", "rtl"], parseOptions = (options) => options ? typeof options != "object" ? {loose: !0} : opts.filter((k) => options[k]).reduce((options2, k) => (options2[k] = !0, options2), {}) : {};
  module.exports = parseOptions;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS((exports, module) => {
  var numeric = /^[0-9]+$/, compareIdentifiers = (a, b) => {
    let anum = numeric.test(a), bnum = numeric.test(b);
    return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }, rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
  module.exports = {
    compareIdentifiers,
    rcompareIdentifiers
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/semver.js
var require_semver = __commonJS((exports, module) => {
  var debug = require_debug(), {MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER3} = require_constants(), {re, t} = require_re(), parseOptions = require_parse_options(), {compareIdentifiers} = require_identifiers(), SemVer = class {
    constructor(version, options) {
      if (options = parseOptions(options), version instanceof SemVer) {
        if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease)
          return version;
        version = version.version;
      } else if (typeof version != "string")
        throw new TypeError(`Invalid Version: ${version}`);
      if (version.length > MAX_LENGTH)
        throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
      debug("SemVer", version, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
      let m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m)
        throw new TypeError(`Invalid Version: ${version}`);
      if (this.raw = version, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER3 || this.major < 0)
        throw new TypeError("Invalid major version");
      if (this.minor > MAX_SAFE_INTEGER3 || this.minor < 0)
        throw new TypeError("Invalid minor version");
      if (this.patch > MAX_SAFE_INTEGER3 || this.patch < 0)
        throw new TypeError("Invalid patch version");
      m[4] ? this.prerelease = m[4].split(".").map((id) => {
        if (/^[0-9]+$/.test(id)) {
          let num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER3)
            return num;
        }
        return id;
      }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
    }
    format() {
      return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
    }
    toString() {
      return this.version;
    }
    compare(other) {
      if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer)) {
        if (typeof other == "string" && other === this.version)
          return 0;
        other = new SemVer(other, this.options);
      }
      return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
      return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
      if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
        return -1;
      if (!this.prerelease.length && other.prerelease.length)
        return 1;
      if (!this.prerelease.length && !other.prerelease.length)
        return 0;
      let i = 0;
      do {
        let a = this.prerelease[i], b = other.prerelease[i];
        if (debug("prerelease compare", i, a, b), a === void 0 && b === void 0)
          return 0;
        if (b === void 0)
          return 1;
        if (a === void 0)
          return -1;
        if (a === b)
          continue;
        return compareIdentifiers(a, b);
      } while (++i);
    }
    compareBuild(other) {
      other instanceof SemVer || (other = new SemVer(other, this.options));
      let i = 0;
      do {
        let a = this.build[i], b = other.build[i];
        if (debug("prerelease compare", i, a, b), a === void 0 && b === void 0)
          return 0;
        if (b === void 0)
          return 1;
        if (a === void 0)
          return -1;
        if (a === b)
          continue;
        return compareIdentifiers(a, b);
      } while (++i);
    }
    inc(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
          break;
        case "prerelease":
          this.prerelease.length === 0 && this.inc("patch", identifier), this.inc("pre", identifier);
          break;
        case "major":
          (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) && this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
          break;
        case "minor":
          (this.patch !== 0 || this.prerelease.length === 0) && this.minor++, this.patch = 0, this.prerelease = [];
          break;
        case "patch":
          this.prerelease.length === 0 && this.patch++, this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0)
            this.prerelease = [0];
          else {
            let i = this.prerelease.length;
            for (; --i >= 0; )
              typeof this.prerelease[i] == "number" && (this.prerelease[i]++, i = -2);
            i === -1 && this.prerelease.push(0);
          }
          identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
          break;
        default:
          throw new Error(`invalid increment argument: ${release}`);
      }
      return this.format(), this.raw = this.version, this;
    }
  };
  module.exports = SemVer;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/parse.js
var require_parse = __commonJS((exports, module) => {
  var {MAX_LENGTH} = require_constants(), {re, t} = require_re(), SemVer = require_semver(), parseOptions = require_parse_options(), parse = (version, options) => {
    if (options = parseOptions(options), version instanceof SemVer)
      return version;
    if (typeof version != "string" || version.length > MAX_LENGTH || !(options.loose ? re[t.LOOSE] : re[t.FULL]).test(version))
      return null;
    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  };
  module.exports = parse;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/valid.js
var require_valid = __commonJS((exports, module) => {
  var parse = require_parse(), valid = (version, options) => {
    let v = parse(version, options);
    return v ? v.version : null;
  };
  module.exports = valid;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/clean.js
var require_clean = __commonJS((exports, module) => {
  var parse = require_parse(), clean2 = (version, options) => {
    let s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
  };
  module.exports = clean2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/inc.js
var require_inc = __commonJS((exports, module) => {
  var SemVer = require_semver(), inc = (version, release, options, identifier) => {
    typeof options == "string" && (identifier = options, options = void 0);
    try {
      return new SemVer(version, options).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  };
  module.exports = inc;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare.js
var require_compare = __commonJS((exports, module) => {
  var SemVer = require_semver(), compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
  module.exports = compare;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/eq.js
var require_eq = __commonJS((exports, module) => {
  var compare = require_compare(), eq2 = (a, b, loose) => compare(a, b, loose) === 0;
  module.exports = eq2;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/diff.js
var require_diff = __commonJS((exports, module) => {
  var parse = require_parse(), eq2 = require_eq(), diff = (version1, version2) => {
    if (eq2(version1, version2))
      return null;
    {
      let v1 = parse(version1), v2 = parse(version2), hasPre = v1.prerelease.length || v2.prerelease.length, prefix = hasPre ? "pre" : "", defaultResult = hasPre ? "prerelease" : "";
      for (let key in v1)
        if ((key === "major" || key === "minor" || key === "patch") && v1[key] !== v2[key])
          return prefix + key;
      return defaultResult;
    }
  };
  module.exports = diff;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/major.js
var require_major = __commonJS((exports, module) => {
  var SemVer = require_semver(), major = (a, loose) => new SemVer(a, loose).major;
  module.exports = major;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/minor.js
var require_minor = __commonJS((exports, module) => {
  var SemVer = require_semver(), minor = (a, loose) => new SemVer(a, loose).minor;
  module.exports = minor;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/patch.js
var require_patch = __commonJS((exports, module) => {
  var SemVer = require_semver(), patch = (a, loose) => new SemVer(a, loose).patch;
  module.exports = patch;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS((exports, module) => {
  var parse = require_parse(), prerelease = (version, options) => {
    let parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  };
  module.exports = prerelease;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS((exports, module) => {
  var compare = require_compare(), rcompare = (a, b, loose) => compare(b, a, loose);
  module.exports = rcompare;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS((exports, module) => {
  var compare = require_compare(), compareLoose = (a, b) => compare(a, b, !0);
  module.exports = compareLoose;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS((exports, module) => {
  var SemVer = require_semver(), compareBuild = (a, b, loose) => {
    let versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  };
  module.exports = compareBuild;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/sort.js
var require_sort = __commonJS((exports, module) => {
  var compareBuild = require_compare_build(), sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
  module.exports = sort;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS((exports, module) => {
  var compareBuild = require_compare_build(), rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
  module.exports = rsort;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/gt.js
var require_gt = __commonJS((exports, module) => {
  var compare = require_compare(), gt = (a, b, loose) => compare(a, b, loose) > 0;
  module.exports = gt;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/lt.js
var require_lt = __commonJS((exports, module) => {
  var compare = require_compare(), lt = (a, b, loose) => compare(a, b, loose) < 0;
  module.exports = lt;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/neq.js
var require_neq = __commonJS((exports, module) => {
  var compare = require_compare(), neq = (a, b, loose) => compare(a, b, loose) !== 0;
  module.exports = neq;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/gte.js
var require_gte = __commonJS((exports, module) => {
  var compare = require_compare(), gte = (a, b, loose) => compare(a, b, loose) >= 0;
  module.exports = gte;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/lte.js
var require_lte = __commonJS((exports, module) => {
  var compare = require_compare(), lte = (a, b, loose) => compare(a, b, loose) <= 0;
  module.exports = lte;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS((exports, module) => {
  var eq2 = require_eq(), neq = require_neq(), gt = require_gt(), gte = require_gte(), lt = require_lt(), lte = require_lte(), cmp = (a, op, b, loose) => {
    switch (op) {
      case "===":
        return typeof a == "object" && (a = a.version), typeof b == "object" && (b = b.version), a === b;
      case "!==":
        return typeof a == "object" && (a = a.version), typeof b == "object" && (b = b.version), a !== b;
      case "":
      case "=":
      case "==":
        return eq2(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError(`Invalid operator: ${op}`);
    }
  };
  module.exports = cmp;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS((exports, module) => {
  var SemVer = require_semver(), parse = require_parse(), {re, t} = require_re(), coerce = (version, options) => {
    if (version instanceof SemVer)
      return version;
    if (typeof version == "number" && (version = String(version)), typeof version != "string")
      return null;
    options = options || {};
    let match = null;
    if (!options.rtl)
      match = version.match(re[t.COERCE]);
    else {
      let next;
      for (; (next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length); )
        (!match || next.index + next[0].length !== match.index + match[0].length) && (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
      re[t.COERCERTL].lastIndex = -1;
    }
    return match === null ? null : parse(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
  };
  module.exports = coerce;
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js
var require_iterator = __commonJS((exports, module) => {
  "use strict";
  module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next)
        yield walker.value;
    };
  };
});

// node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js
var require_yallist = __commonJS((exports, module) => {
  "use strict";
  module.exports = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self2 = this;
    if (self2 instanceof Yallist || (self2 = new Yallist()), self2.tail = null, self2.head = null, self2.length = 0, list && typeof list.forEach == "function")
      list.forEach(function(item) {
        self2.push(item);
      });
    else if (arguments.length > 0)
      for (var i = 0, l = arguments.length; i < l; i++)
        self2.push(arguments[i]);
    return self2;
  }
  Yallist.prototype.removeNode = function(node) {
    if (node.list !== this)
      throw new Error("removing node which does not belong to this list");
    var next = node.next, prev = node.prev;
    return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
  };
  Yallist.prototype.unshiftNode = function(node) {
    if (node !== this.head) {
      node.list && node.list.removeNode(node);
      var head = this.head;
      node.list = this, node.next = head, head && (head.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
    }
  };
  Yallist.prototype.pushNode = function(node) {
    if (node !== this.tail) {
      node.list && node.list.removeNode(node);
      var tail = this.tail;
      node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
    }
  };
  Yallist.prototype.push = function() {
    for (var i = 0, l = arguments.length; i < l; i++)
      push(this, arguments[i]);
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0, l = arguments.length; i < l; i++)
      unshift(this, arguments[i]);
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!!this.tail) {
      var res = this.tail.value;
      return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
    }
  };
  Yallist.prototype.shift = function() {
    if (!!this.head) {
      var res = this.head.value;
      return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
    }
  };
  Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++)
      fn.call(thisp, walker.value, i, this), walker = walker.next;
  };
  Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--)
      fn.call(thisp, walker.value, i, this), walker = walker.prev;
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++)
      walker = walker.next;
    if (i === n && walker !== null)
      return walker.value;
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++)
      walker = walker.prev;
    if (i === n && walker !== null)
      return walker.value;
  };
  Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    for (var res = new Yallist(), walker = this.head; walker !== null; )
      res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
    return res;
  };
  Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var res = new Yallist(), walker = this.tail; walker !== null; )
      res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
    return res;
  };
  Yallist.prototype.reduce = function(fn, initial) {
    var acc, walker = this.head;
    if (arguments.length > 1)
      acc = initial;
    else if (this.head)
      walker = this.head.next, acc = this.head.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var i = 0; walker !== null; i++)
      acc = fn(acc, walker.value, i), walker = walker.next;
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc, walker = this.tail;
    if (arguments.length > 1)
      acc = initial;
    else if (this.tail)
      walker = this.tail.prev, acc = this.tail.value;
    else
      throw new TypeError("Reduce of empty list with no initial value");
    for (var i = this.length - 1; walker !== null; i--)
      acc = fn(acc, walker.value, i), walker = walker.prev;
    return acc;
  };
  Yallist.prototype.toArray = function() {
    for (var arr = new Array(this.length), i = 0, walker = this.head; walker !== null; i++)
      arr[i] = walker.value, walker = walker.next;
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    for (var arr = new Array(this.length), i = 0, walker = this.tail; walker !== null; i++)
      arr[i] = walker.value, walker = walker.prev;
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length, to < 0 && (to += this.length), from = from || 0, from < 0 && (from += this.length);
    var ret = new Yallist();
    if (to < from || to < 0)
      return ret;
    from < 0 && (from = 0), to > this.length && (to = this.length);
    for (var i = 0, walker = this.head; walker !== null && i < from; i++)
      walker = walker.next;
    for (; walker !== null && i < to; i++, walker = walker.next)
      ret.push(walker.value);
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length, to < 0 && (to += this.length), from = from || 0, from < 0 && (from += this.length);
    var ret = new Yallist();
    if (to < from || to < 0)
      return ret;
    from < 0 && (from = 0), to > this.length && (to = this.length);
    for (var i = this.length, walker = this.tail; walker !== null && i > to; i--)
      walker = walker.prev;
    for (; walker !== null && i > from; i--, walker = walker.prev)
      ret.push(walker.value);
    return ret;
  };
  Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
    for (var i = 0, walker = this.head; walker !== null && i < start; i++)
      walker = walker.next;
    for (var ret = [], i = 0; walker && i < deleteCount; i++)
      ret.push(walker.value), walker = this.removeNode(walker);
    walker === null && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
    for (var i = 0; i < nodes.length; i++)
      walker = insert(this, walker, nodes[i]);
    return ret;
  };
  Yallist.prototype.reverse = function() {
    for (var head = this.head, tail = this.tail, walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next, walker.next = p;
    }
    return this.head = tail, this.tail = head, this;
  };
  function insert(self2, node, value) {
    var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
    return inserted.next === null && (self2.tail = inserted), inserted.prev === null && (self2.head = inserted), self2.length++, inserted;
  }
  function push(self2, item) {
    self2.tail = new Node(item, self2.tail, null, self2), self2.head || (self2.head = self2.tail), self2.length++;
  }
  function unshift(self2, item) {
    self2.head = new Node(item, null, self2.head, self2), self2.tail || (self2.tail = self2.head), self2.length++;
  }
  function Node(value, prev, next, list) {
    if (!(this instanceof Node))
      return new Node(value, prev, next, list);
    this.list = list, this.value = value, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
  }
  try {
    require_iterator()(Yallist);
  } catch (er) {
  }
});

// node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js
var require_lru_cache = __commonJS((exports, module) => {
  "use strict";
  var Yallist = require_yallist(), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1, LRUCache = class {
    constructor(options) {
      if (typeof options == "number" && (options = {max: options}), options || (options = {}), options.max && (typeof options.max != "number" || options.max < 0))
        throw new TypeError("max must be a non-negative number");
      let max = this[MAX] = options.max || Infinity, lc = options.length || naiveLength;
      if (this[LENGTH_CALCULATOR] = typeof lc != "function" ? naiveLength : lc, this[ALLOW_STALE] = options.stale || !1, options.maxAge && typeof options.maxAge != "number")
        throw new TypeError("maxAge must be a number");
      this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || !1, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || !1, this.reset();
    }
    set max(mL) {
      if (typeof mL != "number" || mL < 0)
        throw new TypeError("max must be a non-negative number");
      this[MAX] = mL || Infinity, trim(this);
    }
    get max() {
      return this[MAX];
    }
    set allowStale(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
      return this[ALLOW_STALE];
    }
    set maxAge(mA) {
      if (typeof mA != "number")
        throw new TypeError("maxAge must be a non-negative number");
      this[MAX_AGE] = mA, trim(this);
    }
    get maxAge() {
      return this[MAX_AGE];
    }
    set lengthCalculator(lC) {
      typeof lC != "function" && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
      })), trim(this);
    }
    get lengthCalculator() {
      return this[LENGTH_CALCULATOR];
    }
    get length() {
      return this[LENGTH];
    }
    get itemCount() {
      return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].tail; walker !== null; ) {
        let prev = walker.prev;
        forEachStep(this, fn, walker, thisp), walker = prev;
      }
    }
    forEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].head; walker !== null; ) {
        let next = walker.next;
        forEachStep(this, fn, walker, thisp), walker = next;
      }
    }
    keys() {
      return this[LRU_LIST].toArray().map((k) => k.key);
    }
    values() {
      return this[LRU_LIST].toArray().map((k) => k.value);
    }
    reset() {
      this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
    }
    dump() {
      return this[LRU_LIST].map((hit) => isStale(this, hit) ? !1 : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter((h) => h);
    }
    dumpLru() {
      return this[LRU_LIST];
    }
    set(key, value, maxAge) {
      if (maxAge = maxAge || this[MAX_AGE], maxAge && typeof maxAge != "number")
        throw new TypeError("maxAge must be a number");
      let now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value, key);
      if (this[CACHE].has(key)) {
        if (len > this[MAX])
          return del(this, this[CACHE].get(key)), !1;
        let item = this[CACHE].get(key).value;
        return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), !0;
      }
      let hit = new Entry(key, value, len, now, maxAge);
      return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value), !1) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), !0);
    }
    has(key) {
      if (!this[CACHE].has(key))
        return !1;
      let hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
    get(key) {
      return get(this, key, !0);
    }
    peek(key) {
      return get(this, key, !1);
    }
    pop() {
      let node = this[LRU_LIST].tail;
      return node ? (del(this, node), node.value) : null;
    }
    del(key) {
      del(this, this[CACHE].get(key));
    }
    load(arr) {
      this.reset();
      let now = Date.now();
      for (let l = arr.length - 1; l >= 0; l--) {
        let hit = arr[l], expiresAt = hit.e || 0;
        if (expiresAt === 0)
          this.set(hit.k, hit.v);
        else {
          let maxAge = expiresAt - now;
          maxAge > 0 && this.set(hit.k, hit.v, maxAge);
        }
      }
    }
    prune() {
      this[CACHE].forEach((value, key) => get(this, key, !1));
    }
  }, get = (self2, key, doUse) => {
    let node = self2[CACHE].get(key);
    if (node) {
      let hit = node.value;
      if (isStale(self2, hit)) {
        if (del(self2, node), !self2[ALLOW_STALE])
          return;
      } else
        doUse && (self2[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self2[LRU_LIST].unshiftNode(node));
      return hit.value;
    }
  }, isStale = (self2, hit) => {
    if (!hit || !hit.maxAge && !self2[MAX_AGE])
      return !1;
    let diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
  }, trim = (self2) => {
    if (self2[LENGTH] > self2[MAX])
      for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
        let prev = walker.prev;
        del(self2, walker), walker = prev;
      }
  }, del = (self2, node) => {
    if (node) {
      let hit = node.value;
      self2[DISPOSE] && self2[DISPOSE](hit.key, hit.value), self2[LENGTH] -= hit.length, self2[CACHE].delete(hit.key), self2[LRU_LIST].removeNode(node);
    }
  }, Entry = class {
    constructor(key, value, length, now, maxAge) {
      this.key = key, this.value = value, this.length = length, this.now = now, this.maxAge = maxAge || 0;
    }
  }, forEachStep = (self2, fn, node, thisp) => {
    let hit = node.value;
    isStale(self2, hit) && (del(self2, node), self2[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self2);
  };
  module.exports = LRUCache;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/range.js
var require_range = __commonJS((exports, module) => {
  var Range = class {
    constructor(range, options) {
      if (options = parseOptions(options), range instanceof Range)
        return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
      if (range instanceof Comparator)
        return this.raw = range.value, this.set = [[range]], this.format(), this;
      if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range, this.set = range.split(/\s*\|\|\s*/).map((range2) => this.parseRange(range2.trim())).filter((c) => c.length), !this.set.length)
        throw new TypeError(`Invalid SemVer Range: ${range}`);
      if (this.set.length > 1) {
        let first = this.set[0];
        if (this.set = this.set.filter((c) => !isNullSet(c[0])), this.set.length === 0)
          this.set = [first];
        else if (this.set.length > 1) {
          for (let c of this.set)
            if (c.length === 1 && isAny(c[0])) {
              this.set = [c];
              break;
            }
        }
      }
      this.format();
    }
    format() {
      return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
    }
    toString() {
      return this.range;
    }
    parseRange(range) {
      range = range.trim();
      let memoKey = `parseRange:${Object.keys(this.options).join(",")}:${range}`, cached = cache.get(memoKey);
      if (cached)
        return cached;
      let loose = this.options.loose, hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace(this.options.includePrerelease)), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace), debug("comparator trim", range, re[t.COMPARATORTRIM]), range = range.replace(re[t.TILDETRIM], tildeTrimReplace), range = range.replace(re[t.CARETTRIM], caretTrimReplace), range = range.split(/\s+/).join(" ");
      let compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options)).filter(this.options.loose ? (comp) => !!comp.match(compRe) : () => !0).map((comp) => new Comparator(comp, this.options)), l = rangeList.length, rangeMap = new Map();
      for (let comp of rangeList) {
        if (isNullSet(comp))
          return [comp];
        rangeMap.set(comp.value, comp);
      }
      rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
      let result = [...rangeMap.values()];
      return cache.set(memoKey, result), result;
    }
    intersects(range, options) {
      if (!(range instanceof Range))
        throw new TypeError("a Range is required");
      return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
    }
    test(version) {
      if (!version)
        return !1;
      if (typeof version == "string")
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return !1;
        }
      for (let i = 0; i < this.set.length; i++)
        if (testSet(this.set[i], version, this.options))
          return !0;
      return !1;
    }
  };
  module.exports = Range;
  var LRU = require_lru_cache(), cache = new LRU({max: 1e3}), parseOptions = require_parse_options(), Comparator = require_comparator(), debug = require_debug(), SemVer = require_semver(), {
    re,
    t,
    comparatorTrimReplace,
    tildeTrimReplace,
    caretTrimReplace
  } = require_re(), isNullSet = (c) => c.value === "<0.0.0-0", isAny = (c) => c.value === "", isSatisfiable = (comparators, options) => {
    let result = !0, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop();
    for (; result && remainingComparators.length; )
      result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
    return result;
  }, parseComparator = (comp, options) => (debug("comp", comp, options), comp = replaceCarets(comp, options), debug("caret", comp), comp = replaceTildes(comp, options), debug("tildes", comp), comp = replaceXRanges(comp, options), debug("xrange", comp), comp = replaceStars(comp, options), debug("stars", comp), comp), isX = (id) => !id || id.toLowerCase() === "x" || id === "*", replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((comp2) => replaceTilde(comp2, options)).join(" "), replaceTilde = (comp, options) => {
    let r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, (_, M, m, p, pr) => {
      debug("tilde", comp, _, M, m, p, pr);
      let ret;
      return isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0` : pr ? (debug("replaceTilde pr", pr), ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`) : ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`, debug("tilde return", ret), ret;
    });
  }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((comp2) => replaceCaret(comp2, options)).join(" "), replaceCaret = (comp, options) => {
    debug("caret", comp, options);
    let r = options.loose ? re[t.CARETLOOSE] : re[t.CARET], z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr) => {
      debug("caret", comp, _, M, m, p, pr);
      let ret;
      return isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? M === "0" ? ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0` : pr ? (debug("replaceCaret pr", pr), M === "0" ? m === "0" ? ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0` : ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug("no pr"), M === "0" ? m === "0" ? ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0` : ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0` : ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`), debug("caret return", ret), ret;
    });
  }, replaceXRanges = (comp, options) => (debug("replaceXRanges", comp, options), comp.split(/\s+/).map((comp2) => replaceXRange(comp2, options)).join(" ")), replaceXRange = (comp, options) => {
    comp = comp.trim();
    let r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
      debug("xRange", comp, ret, gtlt, M, m, p, pr);
      let xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
      return gtlt === "=" && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? gtlt === ">" || gtlt === "<" ? ret = "<0.0.0-0" : ret = "*" : gtlt && anyX ? (xm && (m = 0), p = 0, gtlt === ">" ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : gtlt === "<=" && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), gtlt === "<" && (pr = "-0"), ret = `${gtlt + M}.${m}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`), debug("xRange return", ret), ret;
    });
  }, replaceStars = (comp, options) => (debug("replaceStars", comp, options), comp.trim().replace(re[t.STAR], "")), replaceGTE0 = (comp, options) => (debug("replaceGTE0", comp, options), comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => (isX(fM) ? from = "" : isX(fm) ? from = `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? from = `>=${from}` : from = `>=${from}${incPr ? "-0" : ""}`, isX(tM) ? to = "" : isX(tm) ? to = `<${+tM + 1}.0.0-0` : isX(tp) ? to = `<${tM}.${+tm + 1}.0-0` : tpr ? to = `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? to = `<${tM}.${tm}.${+tp + 1}-0` : to = `<=${to}`, `${from} ${to}`.trim()), testSet = (set, version, options) => {
    for (let i = 0; i < set.length; i++)
      if (!set[i].test(version))
        return !1;
    if (version.prerelease.length && !options.includePrerelease) {
      for (let i = 0; i < set.length; i++)
        if (debug(set[i].semver), set[i].semver !== Comparator.ANY && set[i].semver.prerelease.length > 0) {
          let allowed = set[i].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch)
            return !0;
        }
      return !1;
    }
    return !0;
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS((exports, module) => {
  var ANY = Symbol("SemVer ANY"), Comparator = class {
    static get ANY() {
      return ANY;
    }
    constructor(comp, options) {
      if (options = parseOptions(options), comp instanceof Comparator) {
        if (comp.loose === !!options.loose)
          return comp;
        comp = comp.value;
      }
      debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
    }
    parse(comp) {
      let r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m = comp.match(r);
      if (!m)
        throw new TypeError(`Invalid comparator: ${comp}`);
      this.operator = m[1] !== void 0 ? m[1] : "", this.operator === "=" && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
    }
    toString() {
      return this.value;
    }
    test(version) {
      if (debug("Comparator.test", version, this.options.loose), this.semver === ANY || version === ANY)
        return !0;
      if (typeof version == "string")
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return !1;
        }
      return cmp(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
      if (!(comp instanceof Comparator))
        throw new TypeError("a Comparator is required");
      if ((!options || typeof options != "object") && (options = {
        loose: !!options,
        includePrerelease: !1
      }), this.operator === "")
        return this.value === "" ? !0 : new Range(comp.value, options).test(this.value);
      if (comp.operator === "")
        return comp.value === "" ? !0 : new Range(this.value, options).test(comp.semver);
      let sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">"), sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<"), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<="), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    }
  };
  module.exports = Comparator;
  var parseOptions = require_parse_options(), {re, t} = require_re(), cmp = require_cmp(), debug = require_debug(), SemVer = require_semver(), Range = require_range();
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS((exports, module) => {
  var Range = require_range(), satisfies = (version, range, options) => {
    try {
      range = new Range(range, options);
    } catch (er) {
      return !1;
    }
    return range.test(version);
  };
  module.exports = satisfies;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS((exports, module) => {
  var Range = require_range(), toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
  module.exports = toComparators;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), maxSatisfying = (versions, range, options) => {
    let max = null, maxSV = null, rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    return versions.forEach((v) => {
      rangeObj.test(v) && (!max || maxSV.compare(v) === -1) && (max = v, maxSV = new SemVer(max, options));
    }), max;
  };
  module.exports = maxSatisfying;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), minSatisfying = (versions, range, options) => {
    let min = null, minSV = null, rangeObj = null;
    try {
      rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    return versions.forEach((v) => {
      rangeObj.test(v) && (!min || minSV.compare(v) === 1) && (min = v, minSV = new SemVer(min, options));
    }), min;
  };
  module.exports = minSatisfying;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS((exports, module) => {
  var SemVer = require_semver(), Range = require_range(), gt = require_gt(), minVersion = (range, loose) => {
    range = new Range(range, loose);
    let minver = new SemVer("0.0.0");
    if (range.test(minver) || (minver = new SemVer("0.0.0-0"), range.test(minver)))
      return minver;
    minver = null;
    for (let i = 0; i < range.set.length; ++i) {
      let comparators = range.set[i], setMin = null;
      comparators.forEach((comparator) => {
        let compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            compver.prerelease.length === 0 ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
          case "":
          case ">=":
            (!setMin || gt(compver, setMin)) && (setMin = compver);
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error(`Unexpected operation: ${comparator.operator}`);
        }
      }), setMin && (!minver || gt(minver, setMin)) && (minver = setMin);
    }
    return minver && range.test(minver) ? minver : null;
  };
  module.exports = minVersion;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS((exports, module) => {
  var Range = require_range(), validRange = (range, options) => {
    try {
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  };
  module.exports = validRange;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/outside.js
var require_outside = __commonJS((exports, module) => {
  var SemVer = require_semver(), Comparator = require_comparator(), {ANY} = Comparator, Range = require_range(), satisfies = require_satisfies(), gt = require_gt(), lt = require_lt(), lte = require_lte(), gte = require_gte(), outside = (version, range, hilo, options) => {
    version = new SemVer(version, options), range = new Range(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
        break;
      case "<":
        gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options))
      return !1;
    for (let i = 0; i < range.set.length; ++i) {
      let comparators = range.set[i], high = null, low = null;
      if (comparators.forEach((comparator) => {
        comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
      }), high.operator === comp || high.operator === ecomp || (!low.operator || low.operator === comp) && ltefn(version, low.semver))
        return !1;
      if (low.operator === ecomp && ltfn(version, low.semver))
        return !1;
    }
    return !0;
  };
  module.exports = outside;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS((exports, module) => {
  var outside = require_outside(), gtr = (version, range, options) => outside(version, range, ">", options);
  module.exports = gtr;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS((exports, module) => {
  var outside = require_outside(), ltr = (version, range, options) => outside(version, range, "<", options);
  module.exports = ltr;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS((exports, module) => {
  var Range = require_range(), intersects = (r1, r2, options) => (r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2));
  module.exports = intersects;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS((exports, module) => {
  var satisfies = require_satisfies(), compare = require_compare();
  module.exports = (versions, range, options) => {
    let set = [], min = null, prev = null, v = versions.sort((a, b) => compare(a, b, options));
    for (let version of v)
      satisfies(version, range, options) ? (prev = version, min || (min = version)) : (prev && set.push([min, prev]), prev = null, min = null);
    min && set.push([min, null]);
    let ranges = [];
    for (let [min2, max] of set)
      min2 === max ? ranges.push(min2) : !max && min2 === v[0] ? ranges.push("*") : max ? min2 === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min2} - ${max}`) : ranges.push(`>=${min2}`);
    let simplified = ranges.join(" || "), original = typeof range.raw == "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
  };
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/ranges/subset.js
var require_subset = __commonJS((exports, module) => {
  var Range = require_range(), {ANY} = require_comparator(), satisfies = require_satisfies(), compare = require_compare(), subset = (sub, dom, options) => {
    if (sub === dom)
      return !0;
    sub = new Range(sub, options), dom = new Range(dom, options);
    let sawNonNull = !1;
    OUTER:
      for (let simpleSub of sub.set) {
        for (let simpleDom of dom.set) {
          let isSub = simpleSubset(simpleSub, simpleDom, options);
          if (sawNonNull = sawNonNull || isSub !== null, isSub)
            continue OUTER;
        }
        if (sawNonNull)
          return !1;
      }
    return !0;
  }, simpleSubset = (sub, dom, options) => {
    if (sub === dom)
      return !0;
    if (sub.length === 1 && sub[0].semver === ANY)
      return dom.length === 1 && dom[0].semver === ANY;
    let eqSet = new Set(), gt, lt;
    for (let c of sub)
      c.operator === ">" || c.operator === ">=" ? gt = higherGT(gt, c, options) : c.operator === "<" || c.operator === "<=" ? lt = lowerLT(lt, c, options) : eqSet.add(c.semver);
    if (eqSet.size > 1)
      return null;
    let gtltComp;
    if (gt && lt) {
      if (gtltComp = compare(gt.semver, lt.semver, options), gtltComp > 0)
        return null;
      if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<="))
        return null;
    }
    for (let eq2 of eqSet) {
      if (gt && !satisfies(eq2, String(gt), options) || lt && !satisfies(eq2, String(lt), options))
        return null;
      for (let c of dom)
        if (!satisfies(eq2, String(c), options))
          return !1;
      return !0;
    }
    let higher, lower, hasDomLT, hasDomGT;
    for (let c of dom) {
      if (hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=", hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=", gt) {
        if (c.operator === ">" || c.operator === ">=") {
          if (higher = higherGT(gt, c, options), higher === c && higher !== gt)
            return !1;
        } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options))
          return !1;
      }
      if (lt) {
        if (c.operator === "<" || c.operator === "<=") {
          if (lower = lowerLT(lt, c, options), lower === c && lower !== lt)
            return !1;
        } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options))
          return !1;
      }
      if (!c.operator && (lt || gt) && gtltComp !== 0)
        return !1;
    }
    return !(gt && hasDomLT && !lt && gtltComp !== 0 || lt && hasDomGT && !gt && gtltComp !== 0);
  }, higherGT = (a, b, options) => {
    if (!a)
      return b;
    let comp = compare(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 || b.operator === ">" && a.operator === ">=" ? b : a;
  }, lowerLT = (a, b, options) => {
    if (!a)
      return b;
    let comp = compare(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 || b.operator === "<" && a.operator === "<=" ? b : a;
  };
  module.exports = subset;
});

// node_modules/.pnpm/semver@7.3.4/node_modules/semver/index.js
var require_semver2 = __commonJS((exports, module) => {
  var internalRe = require_re();
  module.exports = {
    re: internalRe.re,
    src: internalRe.src,
    tokens: internalRe.t,
    SEMVER_SPEC_VERSION: require_constants().SEMVER_SPEC_VERSION,
    SemVer: require_semver(),
    compareIdentifiers: require_identifiers().compareIdentifiers,
    rcompareIdentifiers: require_identifiers().rcompareIdentifiers,
    parse: require_parse(),
    valid: require_valid(),
    clean: require_clean(),
    inc: require_inc(),
    diff: require_diff(),
    major: require_major(),
    minor: require_minor(),
    patch: require_patch(),
    prerelease: require_prerelease(),
    compare: require_compare(),
    rcompare: require_rcompare(),
    compareLoose: require_compare_loose(),
    compareBuild: require_compare_build(),
    sort: require_sort(),
    rsort: require_rsort(),
    gt: require_gt(),
    lt: require_lt(),
    eq: require_eq(),
    neq: require_neq(),
    gte: require_gte(),
    lte: require_lte(),
    cmp: require_cmp(),
    coerce: require_coerce(),
    Comparator: require_comparator(),
    Range: require_range(),
    satisfies: require_satisfies(),
    toComparators: require_to_comparators(),
    maxSatisfying: require_max_satisfying(),
    minSatisfying: require_min_satisfying(),
    minVersion: require_min_version(),
    validRange: require_valid2(),
    outside: require_outside(),
    gtr: require_gtr(),
    ltr: require_ltr(),
    intersects: require_intersects(),
    simplifyRange: require_simplify(),
    subset: require_subset()
  };
});

// node_modules/.pnpm/domelementtype@2.1.0/node_modules/domelementtype/lib/index.js
var require_lib = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = void 0;
  function isTag(elem) {
    return elem.type === "tag" || elem.type === "script" || elem.type === "style";
  }
  exports.isTag = isTag;
  exports.Root = "root";
  exports.Text = "text";
  exports.Directive = "directive";
  exports.Comment = "comment";
  exports.Script = "script";
  exports.Style = "style";
  exports.Tag = "tag";
  exports.CDATA = "cdata";
  exports.Doctype = "doctype";
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS((exports, module) => {
  module.exports = '{"Aacute":"\xC1","aacute":"\xE1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\xC2","acirc":"\xE2","acute":"\xB4","Acy":"\u0410","acy":"\u0430","AElig":"\xC6","aelig":"\xE6","af":"\u2061","Afr":"\u{1D504}","afr":"\u{1D51E}","Agrave":"\xC0","agrave":"\xE0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\xC5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\u{1D538}","aopf":"\u{1D552}","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"\'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\xC5","aring":"\xE5","Ascr":"\u{1D49C}","ascr":"\u{1D4B6}","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\xC3","atilde":"\xE3","Auml":"\xC4","auml":"\xE4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\u{1D505}","bfr":"\u{1D51F}","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\u{1D539}","bopf":"\u{1D553}","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\xA6","bscr":"\u{1D4B7}","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\xC7","ccedil":"\xE7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\xB8","Cedilla":"\xB8","cemptyv":"\u29B2","cent":"\xA2","centerdot":"\xB7","CenterDot":"\xB7","cfr":"\u{1D520}","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\xAE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\u{1D554}","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\xA9","COPY":"\xA9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\u{1D49E}","cscr":"\u{1D4B8}","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\xA4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\xB0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\u{1D507}","dfr":"\u{1D521}","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\xB4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\xA8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\xF7","divide":"\xF7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\u{1D53B}","dopf":"\u{1D555}","Dot":"\xA8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\xA8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\u{1D49F}","dscr":"\u{1D4B9}","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\xC9","eacute":"\xE9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\xCA","ecirc":"\xEA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\u{1D508}","efr":"\u{1D522}","eg":"\u2A9A","Egrave":"\xC8","egrave":"\xE8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\u{1D53C}","eopf":"\u{1D556}","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\xD0","eth":"\xF0","Euml":"\xCB","euml":"\xEB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\u{1D509}","ffr":"\u{1D523}","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\u{1D53D}","fopf":"\u{1D557}","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\xBD","frac13":"\u2153","frac14":"\xBC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\xBE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\u{1D4BB}","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\u{1D50A}","gfr":"\u{1D524}","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\u{1D53E}","gopf":"\u{1D558}","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\u{1D4A2}","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\xBD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\u{1D525}","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\u{1D559}","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\u{1D4BD}","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\xCD","iacute":"\xED","ic":"\u2063","Icirc":"\xCE","icirc":"\xEE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\xA1","iff":"\u21D4","ifr":"\u{1D526}","Ifr":"\u2111","Igrave":"\xCC","igrave":"\xEC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\u{1D540}","iopf":"\u{1D55A}","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\xBF","iscr":"\u{1D4BE}","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\xCF","iuml":"\xEF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\u{1D50D}","jfr":"\u{1D527}","jmath":"\u0237","Jopf":"\u{1D541}","jopf":"\u{1D55B}","Jscr":"\u{1D4A5}","jscr":"\u{1D4BF}","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\u{1D50E}","kfr":"\u{1D528}","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\u{1D542}","kopf":"\u{1D55C}","Kscr":"\u{1D4A6}","kscr":"\u{1D4C0}","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\xAB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\u{1D50F}","lfr":"\u{1D529}","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\u{1D543}","lopf":"\u{1D55D}","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\u{1D4C1}","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\xAF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\u{1D510}","mfr":"\u{1D52A}","mho":"\u2127","micro":"\xB5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\xB7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\u{1D544}","mopf":"\u{1D55E}","mp":"\u2213","mscr":"\u{1D4C2}","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\xA0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\u{1D511}","nfr":"\u{1D52B}","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\xA0","nopf":"\u{1D55F}","Nopf":"\u2115","Not":"\u2AEC","not":"\xAC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\u{1D4A9}","nscr":"\u{1D4C3}","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\xD1","ntilde":"\xF1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\xD3","oacute":"\xF3","oast":"\u229B","Ocirc":"\xD4","ocirc":"\xF4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\u{1D512}","ofr":"\u{1D52C}","ogon":"\u02DB","Ograve":"\xD2","ograve":"\xF2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\u{1D546}","oopf":"\u{1D560}","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\xAA","ordm":"\xBA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\u{1D4AA}","oscr":"\u2134","Oslash":"\xD8","oslash":"\xF8","osol":"\u2298","Otilde":"\xD5","otilde":"\xF5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\xD6","ouml":"\xF6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\xB6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\u{1D513}","pfr":"\u{1D52D}","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\xB1","plusmn":"\xB1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\xB1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\u{1D561}","Popf":"\u2119","pound":"\xA3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\u{1D4AB}","pscr":"\u{1D4C5}","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\u{1D514}","qfr":"\u{1D52E}","qint":"\u2A0C","qopf":"\u{1D562}","Qopf":"\u211A","qprime":"\u2057","Qscr":"\u{1D4AC}","qscr":"\u{1D4C6}","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\\"","QUOT":"\\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\xBB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\xAE","REG":"\xAE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\u{1D52F}","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\u{1D563}","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\u{1D4C7}","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\xA7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\u{1D516}","sfr":"\u{1D530}","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\xAD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\u{1D54A}","sopf":"\u{1D564}","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\u{1D4AE}","sscr":"\u{1D4C8}","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\xAF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\xB9","sup2":"\xB2","sup3":"\xB3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\xDF","Tab":"\\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\u{1D517}","tfr":"\u{1D531}","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\xDE","thorn":"\xFE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\xD7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\u{1D54B}","topf":"\u{1D565}","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\u{1D4AF}","tscr":"\u{1D4C9}","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\xDA","uacute":"\xFA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\xDB","ucirc":"\xFB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\u{1D518}","ufr":"\u{1D532}","Ugrave":"\xD9","ugrave":"\xF9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\xA8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\u{1D54C}","uopf":"\u{1D566}","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\u{1D4B0}","uscr":"\u{1D4CA}","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\xDC","uuml":"\xFC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\u{1D519}","vfr":"\u{1D533}","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\u{1D54D}","vopf":"\u{1D567}","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\u{1D4B1}","vscr":"\u{1D4CB}","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\u{1D51A}","wfr":"\u{1D534}","Wopf":"\u{1D54E}","wopf":"\u{1D568}","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\u{1D4B2}","wscr":"\u{1D4CC}","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\u{1D51B}","xfr":"\u{1D535}","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\u{1D54F}","xopf":"\u{1D569}","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\u{1D4B3}","xscr":"\u{1D4CD}","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\xDD","yacute":"\xFD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\xA5","Yfr":"\u{1D51C}","yfr":"\u{1D536}","YIcy":"\u0407","yicy":"\u0457","Yopf":"\u{1D550}","yopf":"\u{1D56A}","Yscr":"\u{1D4B4}","yscr":"\u{1D4CE}","YUcy":"\u042E","yucy":"\u044E","yuml":"\xFF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\u{1D537}","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\u{1D56B}","Zopf":"\u2124","Zscr":"\u{1D4B5}","zscr":"\u{1D4CF}","zwj":"\u200D","zwnj":"\u200C"}\n';
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS((exports, module) => {
  module.exports = `{"Aacute":"\xC1","aacute":"\xE1","Acirc":"\xC2","acirc":"\xE2","acute":"\xB4","AElig":"\xC6","aelig":"\xE6","Agrave":"\xC0","agrave":"\xE0","amp":"&","AMP":"&","Aring":"\xC5","aring":"\xE5","Atilde":"\xC3","atilde":"\xE3","Auml":"\xC4","auml":"\xE4","brvbar":"\xA6","Ccedil":"\xC7","ccedil":"\xE7","cedil":"\xB8","cent":"\xA2","copy":"\xA9","COPY":"\xA9","curren":"\xA4","deg":"\xB0","divide":"\xF7","Eacute":"\xC9","eacute":"\xE9","Ecirc":"\xCA","ecirc":"\xEA","Egrave":"\xC8","egrave":"\xE8","ETH":"\xD0","eth":"\xF0","Euml":"\xCB","euml":"\xEB","frac12":"\xBD","frac14":"\xBC","frac34":"\xBE","gt":">","GT":">","Iacute":"\xCD","iacute":"\xED","Icirc":"\xCE","icirc":"\xEE","iexcl":"\xA1","Igrave":"\xCC","igrave":"\xEC","iquest":"\xBF","Iuml":"\xCF","iuml":"\xEF","laquo":"\xAB","lt":"<","LT":"<","macr":"\xAF","micro":"\xB5","middot":"\xB7","nbsp":"\xA0","not":"\xAC","Ntilde":"\xD1","ntilde":"\xF1","Oacute":"\xD3","oacute":"\xF3","Ocirc":"\xD4","ocirc":"\xF4","Ograve":"\xD2","ograve":"\xF2","ordf":"\xAA","ordm":"\xBA","Oslash":"\xD8","oslash":"\xF8","Otilde":"\xD5","otilde":"\xF5","Ouml":"\xD6","ouml":"\xF6","para":"\xB6","plusmn":"\xB1","pound":"\xA3","quot":"\\"","QUOT":"\\"","raquo":"\xBB","reg":"\xAE","REG":"\xAE","sect":"\xA7","shy":"\xAD","sup1":"\xB9","sup2":"\xB2","sup3":"\xB3","szlig":"\xDF","THORN":"\xDE","thorn":"\xFE","times":"\xD7","Uacute":"\xDA","uacute":"\xFA","Ucirc":"\xDB","ucirc":"\xFB","Ugrave":"\xD9","ugrave":"\xF9","uml":"\xA8","Uuml":"\xDC","uuml":"\xFC","Yacute":"\xDD","yacute":"\xFD","yen":"\xA5","yuml":"\xFF"}
`;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS((exports, module) => {
  module.exports = `{"amp":"&","apos":"'","gt":">","lt":"<","quot":"\\""}
`;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS((exports, module) => {
  module.exports = `{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
`;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var decode_json_1 = __importDefault(require_decode()), fromCodePoint = String.fromCodePoint || function(codePoint) {
    var output = "";
    return codePoint > 65535 && (codePoint -= 65536, output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296), codePoint = 56320 | codePoint & 1023), output += String.fromCharCode(codePoint), output;
  };
  function decodeCodePoint(codePoint) {
    return codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111 ? "\uFFFD" : (codePoint in decode_json_1.default && (codePoint = decode_json_1.default[codePoint]), fromCodePoint(codePoint));
  }
  exports.default = decodeCodePoint;
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/decode.js
var require_decode2 = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;
  var entities_json_1 = __importDefault(require_entities()), legacy_json_1 = __importDefault(require_legacy()), xml_json_1 = __importDefault(require_xml()), decode_codepoint_1 = __importDefault(require_decode_codepoint()), strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
  exports.decodeXML = getStrictDecoder(xml_json_1.default);
  exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
  function getStrictDecoder(map) {
    var replace = getReplacer(map);
    return function(str) {
      return String(str).replace(strictEntityRe, replace);
    };
  }
  var sorter = function(a, b) {
    return a < b ? 1 : -1;
  };
  exports.decodeHTML = function() {
    for (var legacy = Object.keys(legacy_json_1.default).sort(sorter), keys2 = Object.keys(entities_json_1.default).sort(sorter), i = 0, j = 0; i < keys2.length; i++)
      legacy[j] === keys2[i] ? (keys2[i] += ";?", j++) : keys2[i] += ";";
    var re = new RegExp("&(?:" + keys2.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"), replace = getReplacer(entities_json_1.default);
    function replacer(str) {
      return str.substr(-1) !== ";" && (str += ";"), replace(str);
    }
    return function(str) {
      return String(str).replace(re, replacer);
    };
  }();
  function getReplacer(map) {
    return function(str) {
      if (str.charAt(1) === "#") {
        var secondChar = str.charAt(2);
        return secondChar === "X" || secondChar === "x" ? decode_codepoint_1.default(parseInt(str.substr(3), 16)) : decode_codepoint_1.default(parseInt(str.substr(2), 10));
      }
      return map[str.slice(1, -1)] || str;
    };
  }
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/encode.js
var require_encode = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;
  var xml_json_1 = __importDefault(require_xml()), inverseXML = getInverseObj(xml_json_1.default), xmlReplacer = getInverseReplacer(inverseXML);
  exports.encodeXML = getASCIIEncoder(inverseXML);
  var entities_json_1 = __importDefault(require_entities()), inverseHTML = getInverseObj(entities_json_1.default), htmlReplacer = getInverseReplacer(inverseHTML);
  exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);
  exports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
  function getInverseObj(obj) {
    return Object.keys(obj).sort().reduce(function(inverse, name) {
      return inverse[obj[name]] = "&" + name + ";", inverse;
    }, {});
  }
  function getInverseReplacer(inverse) {
    for (var single = [], multiple = [], _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
      var k = _a[_i];
      k.length === 1 ? single.push("\\" + k) : multiple.push(k);
    }
    single.sort();
    for (var start = 0; start < single.length - 1; start++) {
      for (var end = start; end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1); )
        end += 1;
      var count = 1 + end - start;
      count < 3 || single.splice(start, count, single[start] + "-" + single[end]);
    }
    return multiple.unshift("[" + single.join("") + "]"), new RegExp(multiple.join("|"), "g");
  }
  var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g, getCodePoint = String.prototype.codePointAt != null ? function(str) {
    return str.codePointAt(0);
  } : function(c) {
    return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
  };
  function singleCharReplacer(c) {
    return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
  }
  function getInverse(inverse, re) {
    return function(data) {
      return data.replace(re, function(name) {
        return inverse[name];
      }).replace(reNonASCII, singleCharReplacer);
    };
  }
  var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
  function escape(data) {
    return data.replace(reEscapeChars, singleCharReplacer);
  }
  exports.escape = escape;
  function escapeUTF8(data) {
    return data.replace(xmlReplacer, singleCharReplacer);
  }
  exports.escapeUTF8 = escapeUTF8;
  function getASCIIEncoder(obj) {
    return function(data) {
      return data.replace(reEscapeChars, function(c) {
        return obj[c] || singleCharReplacer(c);
      });
    };
  }
});

// node_modules/.pnpm/entities@2.2.0/node_modules/entities/lib/index.js
var require_lib2 = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.encodeHTML5 = exports.encodeHTML4 = exports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = void 0;
  var decode_1 = require_decode2(), encode_1 = require_encode();
  function decode(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
  }
  exports.decode = decode;
  function decodeStrict(data, level) {
    return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
  }
  exports.decodeStrict = decodeStrict;
  function encode(data, level) {
    return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
  }
  exports.encode = encode;
  var encode_2 = require_encode();
  Object.defineProperty(exports, "encodeXML", {enumerable: !0, get: function() {
    return encode_2.encodeXML;
  }});
  Object.defineProperty(exports, "encodeHTML", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  Object.defineProperty(exports, "encodeNonAsciiHTML", {enumerable: !0, get: function() {
    return encode_2.encodeNonAsciiHTML;
  }});
  Object.defineProperty(exports, "escape", {enumerable: !0, get: function() {
    return encode_2.escape;
  }});
  Object.defineProperty(exports, "escapeUTF8", {enumerable: !0, get: function() {
    return encode_2.escapeUTF8;
  }});
  Object.defineProperty(exports, "encodeHTML4", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  Object.defineProperty(exports, "encodeHTML5", {enumerable: !0, get: function() {
    return encode_2.encodeHTML;
  }});
  var decode_2 = require_decode2();
  Object.defineProperty(exports, "decodeXML", {enumerable: !0, get: function() {
    return decode_2.decodeXML;
  }});
  Object.defineProperty(exports, "decodeHTML", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTMLStrict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeHTML4", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTML5", {enumerable: !0, get: function() {
    return decode_2.decodeHTML;
  }});
  Object.defineProperty(exports, "decodeHTML4Strict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeHTML5Strict", {enumerable: !0, get: function() {
    return decode_2.decodeHTMLStrict;
  }});
  Object.defineProperty(exports, "decodeXMLStrict", {enumerable: !0, get: function() {
    return decode_2.decodeXML;
  }});
});

// node_modules/.pnpm/dom-serializer@1.2.0/node_modules/dom-serializer/lib/foreignNames.js
var require_foreignNames = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.attributeNames = exports.elementNames = void 0;
  exports.elementNames = new Map([
    ["altglyph", "altGlyph"],
    ["altglyphdef", "altGlyphDef"],
    ["altglyphitem", "altGlyphItem"],
    ["animatecolor", "animateColor"],
    ["animatemotion", "animateMotion"],
    ["animatetransform", "animateTransform"],
    ["clippath", "clipPath"],
    ["feblend", "feBlend"],
    ["fecolormatrix", "feColorMatrix"],
    ["fecomponenttransfer", "feComponentTransfer"],
    ["fecomposite", "feComposite"],
    ["feconvolvematrix", "feConvolveMatrix"],
    ["fediffuselighting", "feDiffuseLighting"],
    ["fedisplacementmap", "feDisplacementMap"],
    ["fedistantlight", "feDistantLight"],
    ["fedropshadow", "feDropShadow"],
    ["feflood", "feFlood"],
    ["fefunca", "feFuncA"],
    ["fefuncb", "feFuncB"],
    ["fefuncg", "feFuncG"],
    ["fefuncr", "feFuncR"],
    ["fegaussianblur", "feGaussianBlur"],
    ["feimage", "feImage"],
    ["femerge", "feMerge"],
    ["femergenode", "feMergeNode"],
    ["femorphology", "feMorphology"],
    ["feoffset", "feOffset"],
    ["fepointlight", "fePointLight"],
    ["fespecularlighting", "feSpecularLighting"],
    ["fespotlight", "feSpotLight"],
    ["fetile", "feTile"],
    ["feturbulence", "feTurbulence"],
    ["foreignobject", "foreignObject"],
    ["glyphref", "glyphRef"],
    ["lineargradient", "linearGradient"],
    ["radialgradient", "radialGradient"],
    ["textpath", "textPath"]
  ]);
  exports.attributeNames = new Map([
    ["definitionurl", "definitionURL"],
    ["attributename", "attributeName"],
    ["attributetype", "attributeType"],
    ["basefrequency", "baseFrequency"],
    ["baseprofile", "baseProfile"],
    ["calcmode", "calcMode"],
    ["clippathunits", "clipPathUnits"],
    ["diffuseconstant", "diffuseConstant"],
    ["edgemode", "edgeMode"],
    ["filterunits", "filterUnits"],
    ["glyphref", "glyphRef"],
    ["gradienttransform", "gradientTransform"],
    ["gradientunits", "gradientUnits"],
    ["kernelmatrix", "kernelMatrix"],
    ["kernelunitlength", "kernelUnitLength"],
    ["keypoints", "keyPoints"],
    ["keysplines", "keySplines"],
    ["keytimes", "keyTimes"],
    ["lengthadjust", "lengthAdjust"],
    ["limitingconeangle", "limitingConeAngle"],
    ["markerheight", "markerHeight"],
    ["markerunits", "markerUnits"],
    ["markerwidth", "markerWidth"],
    ["maskcontentunits", "maskContentUnits"],
    ["maskunits", "maskUnits"],
    ["numoctaves", "numOctaves"],
    ["pathlength", "pathLength"],
    ["patterncontentunits", "patternContentUnits"],
    ["patterntransform", "patternTransform"],
    ["patternunits", "patternUnits"],
    ["pointsatx", "pointsAtX"],
    ["pointsaty", "pointsAtY"],
    ["pointsatz", "pointsAtZ"],
    ["preservealpha", "preserveAlpha"],
    ["preserveaspectratio", "preserveAspectRatio"],
    ["primitiveunits", "primitiveUnits"],
    ["refx", "refX"],
    ["refy", "refY"],
    ["repeatcount", "repeatCount"],
    ["repeatdur", "repeatDur"],
    ["requiredextensions", "requiredExtensions"],
    ["requiredfeatures", "requiredFeatures"],
    ["specularconstant", "specularConstant"],
    ["specularexponent", "specularExponent"],
    ["spreadmethod", "spreadMethod"],
    ["startoffset", "startOffset"],
    ["stddeviation", "stdDeviation"],
    ["stitchtiles", "stitchTiles"],
    ["surfacescale", "surfaceScale"],
    ["systemlanguage", "systemLanguage"],
    ["tablevalues", "tableValues"],
    ["targetx", "targetX"],
    ["targety", "targetY"],
    ["textlength", "textLength"],
    ["viewbox", "viewBox"],
    ["viewtarget", "viewTarget"],
    ["xchannelselector", "xChannelSelector"],
    ["ychannelselector", "yChannelSelector"],
    ["zoomandpan", "zoomAndPan"]
  ]);
});

// node_modules/.pnpm/dom-serializer@1.2.0/node_modules/dom-serializer/lib/index.js
var require_lib3 = __commonJS((exports) => {
  "use strict";
  var __assign = exports && exports.__assign || function() {
    return __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
      }
      return t;
    }, __assign.apply(this, arguments);
  }, __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: !0, value: v});
  } : function(o, v) {
    o.default = v;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var ElementType = __importStar(require_lib()), entities_1 = require_lib2(), foreignNames_1 = require_foreignNames(), unencodedElements = new Set([
    "style",
    "script",
    "xmp",
    "iframe",
    "noembed",
    "noframes",
    "plaintext",
    "noscript"
  ]);
  function formatAttributes(attributes, opts) {
    if (!!attributes)
      return Object.keys(attributes).map(function(key) {
        var _a, _b, value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        return opts.xmlMode === "foreign" && (key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key), !opts.emptyAttrs && !opts.xmlMode && value === "" ? key : key + '="' + (opts.decodeEntities ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + '"';
      }).join(" ");
  }
  var singleTag = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]);
  function render3(node, options) {
    options === void 0 && (options = {});
    for (var nodes = Array.isArray(node) || node.cheerio ? node : [node], output = "", i = 0; i < nodes.length; i++)
      output += renderNode(nodes[i], options);
    return output;
  }
  exports.default = render3;
  function renderNode(node, options) {
    switch (node.type) {
      case ElementType.Root:
        return render3(node.children, options);
      case ElementType.Directive:
      case ElementType.Doctype:
        return renderDirective(node);
      case ElementType.Comment:
        return renderComment(node);
      case ElementType.CDATA:
        return renderCdata(node);
      case ElementType.Script:
      case ElementType.Style:
      case ElementType.Tag:
        return renderTag(node, options);
      case ElementType.Text:
        return renderText(node, options);
    }
  }
  var foreignModeIntegrationPoints = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
  ]), foreignElements = new Set(["svg", "math"]);
  function renderTag(elem, opts) {
    var _a;
    opts.xmlMode === "foreign" && (elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name, elem.parent && foreignModeIntegrationPoints.has(elem.parent.name) && (opts = __assign(__assign({}, opts), {xmlMode: !1}))), !opts.xmlMode && foreignElements.has(elem.name) && (opts = __assign(__assign({}, opts), {xmlMode: "foreign"}));
    var tag = "<" + elem.name, attribs = formatAttributes(elem.attribs, opts);
    return attribs && (tag += " " + attribs), elem.children.length === 0 && (opts.xmlMode ? opts.selfClosingTags !== !1 : opts.selfClosingTags && singleTag.has(elem.name)) ? (opts.xmlMode || (tag += " "), tag += "/>") : (tag += ">", elem.children.length > 0 && (tag += render3(elem.children, opts)), (opts.xmlMode || !singleTag.has(elem.name)) && (tag += "</" + elem.name + ">")), tag;
  }
  function renderDirective(elem) {
    return "<" + elem.data + ">";
  }
  function renderText(elem, opts) {
    var data = elem.data || "";
    return opts.decodeEntities && !(elem.parent && unencodedElements.has(elem.parent.name)) && (data = entities_1.encodeXML(data)), data;
  }
  function renderCdata(elem) {
    return "<![CDATA[" + elem.children[0].data + "]]>";
  }
  function renderComment(elem) {
    return "<!--" + elem.data + "-->";
  }
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/Tokenizer.js
var require_Tokenizer = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  var decode_codepoint_1 = __importDefault(require_decode_codepoint()), entities_json_1 = __importDefault(require_entities()), legacy_json_1 = __importDefault(require_legacy()), xml_json_1 = __importDefault(require_xml());
  function whitespace(c) {
    return c === " " || c === `
` || c === "	" || c === "\f" || c === "\r";
  }
  function isASCIIAlpha(c) {
    return c >= "a" && c <= "z" || c >= "A" && c <= "Z";
  }
  function ifElseState(upper, SUCCESS, FAILURE) {
    var lower = upper.toLowerCase();
    return upper === lower ? function(t, c) {
      c === lower ? t._state = SUCCESS : (t._state = FAILURE, t._index--);
    } : function(t, c) {
      c === lower || c === upper ? t._state = SUCCESS : (t._state = FAILURE, t._index--);
    };
  }
  function consumeSpecialNameChar(upper, NEXT_STATE) {
    var lower = upper.toLowerCase();
    return function(t, c) {
      c === lower || c === upper ? t._state = NEXT_STATE : (t._state = 3, t._index--);
    };
  }
  var stateBeforeCdata1 = ifElseState("C", 24, 16), stateBeforeCdata2 = ifElseState("D", 25, 16), stateBeforeCdata3 = ifElseState("A", 26, 16), stateBeforeCdata4 = ifElseState("T", 27, 16), stateBeforeCdata5 = ifElseState("A", 28, 16), stateBeforeScript1 = consumeSpecialNameChar("R", 35), stateBeforeScript2 = consumeSpecialNameChar("I", 36), stateBeforeScript3 = consumeSpecialNameChar("P", 37), stateBeforeScript4 = consumeSpecialNameChar("T", 38), stateAfterScript1 = ifElseState("R", 40, 1), stateAfterScript2 = ifElseState("I", 41, 1), stateAfterScript3 = ifElseState("P", 42, 1), stateAfterScript4 = ifElseState("T", 43, 1), stateBeforeStyle1 = consumeSpecialNameChar("Y", 45), stateBeforeStyle2 = consumeSpecialNameChar("L", 46), stateBeforeStyle3 = consumeSpecialNameChar("E", 47), stateAfterStyle1 = ifElseState("Y", 49, 1), stateAfterStyle2 = ifElseState("L", 50, 1), stateAfterStyle3 = ifElseState("E", 51, 1), stateBeforeSpecialT = consumeSpecialNameChar("I", 54), stateBeforeTitle1 = consumeSpecialNameChar("T", 55), stateBeforeTitle2 = consumeSpecialNameChar("L", 56), stateBeforeTitle3 = consumeSpecialNameChar("E", 57), stateAfterSpecialTEnd = ifElseState("I", 58, 1), stateAfterTitle1 = ifElseState("T", 59, 1), stateAfterTitle2 = ifElseState("L", 60, 1), stateAfterTitle3 = ifElseState("E", 61, 1), stateBeforeEntity = ifElseState("#", 63, 64), stateBeforeNumericEntity = ifElseState("X", 66, 65), Tokenizer = function() {
    function Tokenizer2(options, cbs) {
      var _a;
      this._state = 1, this.buffer = "", this.sectionStart = 0, this._index = 0, this.bufferOffset = 0, this.baseState = 1, this.special = 1, this.running = !0, this.ended = !1, this.cbs = cbs, this.xmlMode = !!(options == null ? void 0 : options.xmlMode), this.decodeEntities = (_a = options == null ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : !0;
    }
    return Tokenizer2.prototype.reset = function() {
      this._state = 1, this.buffer = "", this.sectionStart = 0, this._index = 0, this.bufferOffset = 0, this.baseState = 1, this.special = 1, this.running = !0, this.ended = !1;
    }, Tokenizer2.prototype.write = function(chunk) {
      this.ended && this.cbs.onerror(Error(".write() after done!")), this.buffer += chunk, this.parse();
    }, Tokenizer2.prototype.end = function(chunk) {
      this.ended && this.cbs.onerror(Error(".end() after done!")), chunk && this.write(chunk), this.ended = !0, this.running && this.finish();
    }, Tokenizer2.prototype.pause = function() {
      this.running = !1;
    }, Tokenizer2.prototype.resume = function() {
      this.running = !0, this._index < this.buffer.length && this.parse(), this.ended && this.finish();
    }, Tokenizer2.prototype.getAbsoluteIndex = function() {
      return this.bufferOffset + this._index;
    }, Tokenizer2.prototype.stateText = function(c) {
      c === "<" ? (this._index > this.sectionStart && this.cbs.ontext(this.getSection()), this._state = 2, this.sectionStart = this._index) : this.decodeEntities && c === "&" && (this.special === 1 || this.special === 4) && (this._index > this.sectionStart && this.cbs.ontext(this.getSection()), this.baseState = 1, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeTagName = function(c) {
      c === "/" ? this._state = 5 : c === "<" ? (this.cbs.ontext(this.getSection()), this.sectionStart = this._index) : c === ">" || this.special !== 1 || whitespace(c) ? this._state = 1 : c === "!" ? (this._state = 15, this.sectionStart = this._index + 1) : c === "?" ? (this._state = 17, this.sectionStart = this._index + 1) : isASCIIAlpha(c) ? (this._state = !this.xmlMode && (c === "s" || c === "S") ? 32 : !this.xmlMode && (c === "t" || c === "T") ? 52 : 3, this.sectionStart = this._index) : this._state = 1;
    }, Tokenizer2.prototype.stateInTagName = function(c) {
      (c === "/" || c === ">" || whitespace(c)) && (this.emitToken("onopentagname"), this._state = 8, this._index--);
    }, Tokenizer2.prototype.stateBeforeClosingTagName = function(c) {
      whitespace(c) || (c === ">" ? this._state = 1 : this.special !== 1 ? this.special !== 4 && (c === "s" || c === "S") ? this._state = 33 : this.special === 4 && (c === "t" || c === "T") ? this._state = 53 : (this._state = 1, this._index--) : isASCIIAlpha(c) ? (this._state = 6, this.sectionStart = this._index) : (this._state = 20, this.sectionStart = this._index));
    }, Tokenizer2.prototype.stateInClosingTagName = function(c) {
      (c === ">" || whitespace(c)) && (this.emitToken("onclosetag"), this._state = 7, this._index--);
    }, Tokenizer2.prototype.stateAfterClosingTagName = function(c) {
      c === ">" && (this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateBeforeAttributeName = function(c) {
      c === ">" ? (this.cbs.onopentagend(), this._state = 1, this.sectionStart = this._index + 1) : c === "/" ? this._state = 4 : whitespace(c) || (this._state = 9, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateInSelfClosingTag = function(c) {
      c === ">" ? (this.cbs.onselfclosingtag(), this._state = 1, this.sectionStart = this._index + 1, this.special = 1) : whitespace(c) || (this._state = 8, this._index--);
    }, Tokenizer2.prototype.stateInAttributeName = function(c) {
      (c === "=" || c === "/" || c === ">" || whitespace(c)) && (this.cbs.onattribname(this.getSection()), this.sectionStart = -1, this._state = 10, this._index--);
    }, Tokenizer2.prototype.stateAfterAttributeName = function(c) {
      c === "=" ? this._state = 11 : c === "/" || c === ">" ? (this.cbs.onattribend(void 0), this._state = 8, this._index--) : whitespace(c) || (this.cbs.onattribend(void 0), this._state = 9, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeAttributeValue = function(c) {
      c === '"' ? (this._state = 12, this.sectionStart = this._index + 1) : c === "'" ? (this._state = 13, this.sectionStart = this._index + 1) : whitespace(c) || (this._state = 14, this.sectionStart = this._index, this._index--);
    }, Tokenizer2.prototype.handleInAttributeValue = function(c, quote) {
      c === quote ? (this.emitToken("onattribdata"), this.cbs.onattribend(quote), this._state = 8) : this.decodeEntities && c === "&" && (this.emitToken("onattribdata"), this.baseState = this._state, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateInAttributeValueDoubleQuotes = function(c) {
      this.handleInAttributeValue(c, '"');
    }, Tokenizer2.prototype.stateInAttributeValueSingleQuotes = function(c) {
      this.handleInAttributeValue(c, "'");
    }, Tokenizer2.prototype.stateInAttributeValueNoQuotes = function(c) {
      whitespace(c) || c === ">" ? (this.emitToken("onattribdata"), this.cbs.onattribend(null), this._state = 8, this._index--) : this.decodeEntities && c === "&" && (this.emitToken("onattribdata"), this.baseState = this._state, this._state = 62, this.sectionStart = this._index);
    }, Tokenizer2.prototype.stateBeforeDeclaration = function(c) {
      this._state = c === "[" ? 23 : c === "-" ? 18 : 16;
    }, Tokenizer2.prototype.stateInDeclaration = function(c) {
      c === ">" && (this.cbs.ondeclaration(this.getSection()), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateInProcessingInstruction = function(c) {
      c === ">" && (this.cbs.onprocessinginstruction(this.getSection()), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateBeforeComment = function(c) {
      c === "-" ? (this._state = 19, this.sectionStart = this._index + 1) : this._state = 16;
    }, Tokenizer2.prototype.stateInComment = function(c) {
      c === "-" && (this._state = 21);
    }, Tokenizer2.prototype.stateInSpecialComment = function(c) {
      c === ">" && (this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index)), this._state = 1, this.sectionStart = this._index + 1);
    }, Tokenizer2.prototype.stateAfterComment1 = function(c) {
      c === "-" ? this._state = 22 : this._state = 19;
    }, Tokenizer2.prototype.stateAfterComment2 = function(c) {
      c === ">" ? (this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2)), this._state = 1, this.sectionStart = this._index + 1) : c !== "-" && (this._state = 19);
    }, Tokenizer2.prototype.stateBeforeCdata6 = function(c) {
      c === "[" ? (this._state = 29, this.sectionStart = this._index + 1) : (this._state = 16, this._index--);
    }, Tokenizer2.prototype.stateInCdata = function(c) {
      c === "]" && (this._state = 30);
    }, Tokenizer2.prototype.stateAfterCdata1 = function(c) {
      c === "]" ? this._state = 31 : this._state = 29;
    }, Tokenizer2.prototype.stateAfterCdata2 = function(c) {
      c === ">" ? (this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2)), this._state = 1, this.sectionStart = this._index + 1) : c !== "]" && (this._state = 29);
    }, Tokenizer2.prototype.stateBeforeSpecialS = function(c) {
      c === "c" || c === "C" ? this._state = 34 : c === "t" || c === "T" ? this._state = 44 : (this._state = 3, this._index--);
    }, Tokenizer2.prototype.stateBeforeSpecialSEnd = function(c) {
      this.special === 2 && (c === "c" || c === "C") ? this._state = 39 : this.special === 3 && (c === "t" || c === "T") ? this._state = 48 : this._state = 1;
    }, Tokenizer2.prototype.stateBeforeSpecialLast = function(c, special) {
      (c === "/" || c === ">" || whitespace(c)) && (this.special = special), this._state = 3, this._index--;
    }, Tokenizer2.prototype.stateAfterSpecialLast = function(c, sectionStartOffset) {
      c === ">" || whitespace(c) ? (this.special = 1, this._state = 6, this.sectionStart = this._index - sectionStartOffset, this._index--) : this._state = 1;
    }, Tokenizer2.prototype.parseFixedEntity = function(map) {
      if (map === void 0 && (map = this.xmlMode ? xml_json_1.default : entities_json_1.default), this.sectionStart + 1 < this._index) {
        var entity = this.buffer.substring(this.sectionStart + 1, this._index);
        Object.prototype.hasOwnProperty.call(map, entity) && (this.emitPartial(map[entity]), this.sectionStart = this._index + 1);
      }
    }, Tokenizer2.prototype.parseLegacyEntity = function() {
      for (var start = this.sectionStart + 1, limit = Math.min(this._index - start, 6); limit >= 2; ) {
        var entity = this.buffer.substr(start, limit);
        if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {
          this.emitPartial(legacy_json_1.default[entity]), this.sectionStart += limit + 1;
          return;
        }
        limit--;
      }
    }, Tokenizer2.prototype.stateInNamedEntity = function(c) {
      c === ";" ? (this.parseFixedEntity(), this.baseState === 1 && this.sectionStart + 1 < this._index && !this.xmlMode && this.parseLegacyEntity(), this._state = this.baseState) : (c < "0" || c > "9") && !isASCIIAlpha(c) && (this.xmlMode || this.sectionStart + 1 === this._index || (this.baseState !== 1 ? c !== "=" && this.parseFixedEntity(legacy_json_1.default) : this.parseLegacyEntity()), this._state = this.baseState, this._index--);
    }, Tokenizer2.prototype.decodeNumericEntity = function(offset, base, strict) {
      var sectionStart = this.sectionStart + offset;
      if (sectionStart !== this._index) {
        var entity = this.buffer.substring(sectionStart, this._index), parsed = parseInt(entity, base);
        this.emitPartial(decode_codepoint_1.default(parsed)), this.sectionStart = strict ? this._index + 1 : this._index;
      }
      this._state = this.baseState;
    }, Tokenizer2.prototype.stateInNumericEntity = function(c) {
      c === ";" ? this.decodeNumericEntity(2, 10, !0) : (c < "0" || c > "9") && (this.xmlMode ? this._state = this.baseState : this.decodeNumericEntity(2, 10, !1), this._index--);
    }, Tokenizer2.prototype.stateInHexEntity = function(c) {
      c === ";" ? this.decodeNumericEntity(3, 16, !0) : (c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9") && (this.xmlMode ? this._state = this.baseState : this.decodeNumericEntity(3, 16, !1), this._index--);
    }, Tokenizer2.prototype.cleanup = function() {
      this.sectionStart < 0 ? (this.buffer = "", this.bufferOffset += this._index, this._index = 0) : this.running && (this._state === 1 ? (this.sectionStart !== this._index && this.cbs.ontext(this.buffer.substr(this.sectionStart)), this.buffer = "", this.bufferOffset += this._index, this._index = 0) : this.sectionStart === this._index ? (this.buffer = "", this.bufferOffset += this._index, this._index = 0) : (this.buffer = this.buffer.substr(this.sectionStart), this._index -= this.sectionStart, this.bufferOffset += this.sectionStart), this.sectionStart = 0);
    }, Tokenizer2.prototype.parse = function() {
      for (; this._index < this.buffer.length && this.running; ) {
        var c = this.buffer.charAt(this._index);
        this._state === 1 ? this.stateText(c) : this._state === 12 ? this.stateInAttributeValueDoubleQuotes(c) : this._state === 9 ? this.stateInAttributeName(c) : this._state === 19 ? this.stateInComment(c) : this._state === 20 ? this.stateInSpecialComment(c) : this._state === 8 ? this.stateBeforeAttributeName(c) : this._state === 3 ? this.stateInTagName(c) : this._state === 6 ? this.stateInClosingTagName(c) : this._state === 2 ? this.stateBeforeTagName(c) : this._state === 10 ? this.stateAfterAttributeName(c) : this._state === 13 ? this.stateInAttributeValueSingleQuotes(c) : this._state === 11 ? this.stateBeforeAttributeValue(c) : this._state === 5 ? this.stateBeforeClosingTagName(c) : this._state === 7 ? this.stateAfterClosingTagName(c) : this._state === 32 ? this.stateBeforeSpecialS(c) : this._state === 21 ? this.stateAfterComment1(c) : this._state === 14 ? this.stateInAttributeValueNoQuotes(c) : this._state === 4 ? this.stateInSelfClosingTag(c) : this._state === 16 ? this.stateInDeclaration(c) : this._state === 15 ? this.stateBeforeDeclaration(c) : this._state === 22 ? this.stateAfterComment2(c) : this._state === 18 ? this.stateBeforeComment(c) : this._state === 33 ? this.stateBeforeSpecialSEnd(c) : this._state === 53 ? stateAfterSpecialTEnd(this, c) : this._state === 39 ? stateAfterScript1(this, c) : this._state === 40 ? stateAfterScript2(this, c) : this._state === 41 ? stateAfterScript3(this, c) : this._state === 34 ? stateBeforeScript1(this, c) : this._state === 35 ? stateBeforeScript2(this, c) : this._state === 36 ? stateBeforeScript3(this, c) : this._state === 37 ? stateBeforeScript4(this, c) : this._state === 38 ? this.stateBeforeSpecialLast(c, 2) : this._state === 42 ? stateAfterScript4(this, c) : this._state === 43 ? this.stateAfterSpecialLast(c, 6) : this._state === 44 ? stateBeforeStyle1(this, c) : this._state === 29 ? this.stateInCdata(c) : this._state === 45 ? stateBeforeStyle2(this, c) : this._state === 46 ? stateBeforeStyle3(this, c) : this._state === 47 ? this.stateBeforeSpecialLast(c, 3) : this._state === 48 ? stateAfterStyle1(this, c) : this._state === 49 ? stateAfterStyle2(this, c) : this._state === 50 ? stateAfterStyle3(this, c) : this._state === 51 ? this.stateAfterSpecialLast(c, 5) : this._state === 52 ? stateBeforeSpecialT(this, c) : this._state === 54 ? stateBeforeTitle1(this, c) : this._state === 55 ? stateBeforeTitle2(this, c) : this._state === 56 ? stateBeforeTitle3(this, c) : this._state === 57 ? this.stateBeforeSpecialLast(c, 4) : this._state === 58 ? stateAfterTitle1(this, c) : this._state === 59 ? stateAfterTitle2(this, c) : this._state === 60 ? stateAfterTitle3(this, c) : this._state === 61 ? this.stateAfterSpecialLast(c, 5) : this._state === 17 ? this.stateInProcessingInstruction(c) : this._state === 64 ? this.stateInNamedEntity(c) : this._state === 23 ? stateBeforeCdata1(this, c) : this._state === 62 ? stateBeforeEntity(this, c) : this._state === 24 ? stateBeforeCdata2(this, c) : this._state === 25 ? stateBeforeCdata3(this, c) : this._state === 30 ? this.stateAfterCdata1(c) : this._state === 31 ? this.stateAfterCdata2(c) : this._state === 26 ? stateBeforeCdata4(this, c) : this._state === 27 ? stateBeforeCdata5(this, c) : this._state === 28 ? this.stateBeforeCdata6(c) : this._state === 66 ? this.stateInHexEntity(c) : this._state === 65 ? this.stateInNumericEntity(c) : this._state === 63 ? stateBeforeNumericEntity(this, c) : this.cbs.onerror(Error("unknown _state"), this._state), this._index++;
      }
      this.cleanup();
    }, Tokenizer2.prototype.finish = function() {
      this.sectionStart < this._index && this.handleTrailingData(), this.cbs.onend();
    }, Tokenizer2.prototype.handleTrailingData = function() {
      var data = this.buffer.substr(this.sectionStart);
      this._state === 29 || this._state === 30 || this._state === 31 ? this.cbs.oncdata(data) : this._state === 19 || this._state === 21 || this._state === 22 ? this.cbs.oncomment(data) : this._state === 64 && !this.xmlMode ? (this.parseLegacyEntity(), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state === 65 && !this.xmlMode ? (this.decodeNumericEntity(2, 10, !1), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state === 66 && !this.xmlMode ? (this.decodeNumericEntity(3, 16, !1), this.sectionStart < this._index && (this._state = this.baseState, this.handleTrailingData())) : this._state !== 3 && this._state !== 8 && this._state !== 11 && this._state !== 10 && this._state !== 9 && this._state !== 13 && this._state !== 12 && this._state !== 14 && this._state !== 6 && this.cbs.ontext(data);
    }, Tokenizer2.prototype.getSection = function() {
      return this.buffer.substring(this.sectionStart, this._index);
    }, Tokenizer2.prototype.emitToken = function(name) {
      this.cbs[name](this.getSection()), this.sectionStart = -1;
    }, Tokenizer2.prototype.emitPartial = function(value) {
      this.baseState !== 1 ? this.cbs.onattribdata(value) : this.cbs.ontext(value);
    }, Tokenizer2;
  }();
  exports.default = Tokenizer;
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/Parser.js
var require_Parser = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.Parser = void 0;
  var Tokenizer_1 = __importDefault(require_Tokenizer()), formTags = new Set([
    "input",
    "option",
    "optgroup",
    "select",
    "button",
    "datalist",
    "textarea"
  ]), pTag = new Set(["p"]), openImpliesClose = {
    tr: new Set(["tr", "th", "td"]),
    th: new Set(["th"]),
    td: new Set(["thead", "th", "td"]),
    body: new Set(["head", "link", "script"]),
    li: new Set(["li"]),
    p: pTag,
    h1: pTag,
    h2: pTag,
    h3: pTag,
    h4: pTag,
    h5: pTag,
    h6: pTag,
    select: formTags,
    input: formTags,
    output: formTags,
    button: formTags,
    datalist: formTags,
    textarea: formTags,
    option: new Set(["option"]),
    optgroup: new Set(["optgroup", "option"]),
    dd: new Set(["dt", "dd"]),
    dt: new Set(["dt", "dd"]),
    address: pTag,
    article: pTag,
    aside: pTag,
    blockquote: pTag,
    details: pTag,
    div: pTag,
    dl: pTag,
    fieldset: pTag,
    figcaption: pTag,
    figure: pTag,
    footer: pTag,
    form: pTag,
    header: pTag,
    hr: pTag,
    main: pTag,
    nav: pTag,
    ol: pTag,
    pre: pTag,
    section: pTag,
    table: pTag,
    ul: pTag,
    rt: new Set(["rt", "rp"]),
    rp: new Set(["rt", "rp"]),
    tbody: new Set(["thead", "tbody"]),
    tfoot: new Set(["thead", "tbody"])
  }, voidElements = new Set([
    "area",
    "base",
    "basefont",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr"
  ]), foreignContextElements = new Set(["math", "svg"]), htmlIntegrationElements = new Set([
    "mi",
    "mo",
    "mn",
    "ms",
    "mtext",
    "annotation-xml",
    "foreignObject",
    "desc",
    "title"
  ]), reNameEnd = /\s|\//, Parser2 = function() {
    function Parser3(cbs, options) {
      options === void 0 && (options = {});
      var _a, _b, _c, _d, _e;
      this.startIndex = 0, this.endIndex = null, this.tagname = "", this.attribname = "", this.attribvalue = "", this.attribs = null, this.stack = [], this.foreignContext = [], this.options = options, this.cbs = cbs ?? {}, this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode, this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode, this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_1.default)(this.options, this), (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 || _e.call(_d, this);
    }
    return Parser3.prototype.updatePosition = function(initialOffset) {
      this.endIndex === null ? this.tokenizer.sectionStart <= initialOffset ? this.startIndex = 0 : this.startIndex = this.tokenizer.sectionStart - initialOffset : this.startIndex = this.endIndex + 1, this.endIndex = this.tokenizer.getAbsoluteIndex();
    }, Parser3.prototype.ontext = function(data) {
      var _a, _b;
      this.updatePosition(1), this.endIndex--, (_b = (_a = this.cbs).ontext) === null || _b === void 0 || _b.call(_a, data);
    }, Parser3.prototype.onopentagname = function(name) {
      var _a, _b;
      if (this.lowerCaseTagNames && (name = name.toLowerCase()), this.tagname = name, !this.options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name))
        for (var el = void 0; this.stack.length > 0 && openImpliesClose[name].has(el = this.stack[this.stack.length - 1]); )
          this.onclosetag(el);
      (this.options.xmlMode || !voidElements.has(name)) && (this.stack.push(name), foreignContextElements.has(name) ? this.foreignContext.push(!0) : htmlIntegrationElements.has(name) && this.foreignContext.push(!1)), (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 || _b.call(_a, name), this.cbs.onopentag && (this.attribs = {});
    }, Parser3.prototype.onopentagend = function() {
      var _a, _b;
      this.updatePosition(1), this.attribs && ((_b = (_a = this.cbs).onopentag) === null || _b === void 0 || _b.call(_a, this.tagname, this.attribs), this.attribs = null), !this.options.xmlMode && this.cbs.onclosetag && voidElements.has(this.tagname) && this.cbs.onclosetag(this.tagname), this.tagname = "";
    }, Parser3.prototype.onclosetag = function(name) {
      if (this.updatePosition(1), this.lowerCaseTagNames && (name = name.toLowerCase()), (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) && this.foreignContext.pop(), this.stack.length && (this.options.xmlMode || !voidElements.has(name))) {
        var pos = this.stack.lastIndexOf(name);
        if (pos !== -1)
          if (this.cbs.onclosetag)
            for (pos = this.stack.length - pos; pos--; )
              this.cbs.onclosetag(this.stack.pop());
          else
            this.stack.length = pos;
        else
          name === "p" && !this.options.xmlMode && (this.onopentagname(name), this.closeCurrentTag());
      } else
        !this.options.xmlMode && (name === "br" || name === "p") && (this.onopentagname(name), this.closeCurrentTag());
    }, Parser3.prototype.onselfclosingtag = function() {
      this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1] ? this.closeCurrentTag() : this.onopentagend();
    }, Parser3.prototype.closeCurrentTag = function() {
      var _a, _b, name = this.tagname;
      this.onopentagend(), this.stack[this.stack.length - 1] === name && ((_b = (_a = this.cbs).onclosetag) === null || _b === void 0 || _b.call(_a, name), this.stack.pop());
    }, Parser3.prototype.onattribname = function(name) {
      this.lowerCaseAttributeNames && (name = name.toLowerCase()), this.attribname = name;
    }, Parser3.prototype.onattribdata = function(value) {
      this.attribvalue += value;
    }, Parser3.prototype.onattribend = function(quote) {
      var _a, _b;
      (_b = (_a = this.cbs).onattribute) === null || _b === void 0 || _b.call(_a, this.attribname, this.attribvalue, quote), this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname) && (this.attribs[this.attribname] = this.attribvalue), this.attribname = "", this.attribvalue = "";
    }, Parser3.prototype.getInstructionName = function(value) {
      var idx = value.search(reNameEnd), name = idx < 0 ? value : value.substr(0, idx);
      return this.lowerCaseTagNames && (name = name.toLowerCase()), name;
    }, Parser3.prototype.ondeclaration = function(value) {
      if (this.cbs.onprocessinginstruction) {
        var name_1 = this.getInstructionName(value);
        this.cbs.onprocessinginstruction("!" + name_1, "!" + value);
      }
    }, Parser3.prototype.onprocessinginstruction = function(value) {
      if (this.cbs.onprocessinginstruction) {
        var name_2 = this.getInstructionName(value);
        this.cbs.onprocessinginstruction("?" + name_2, "?" + value);
      }
    }, Parser3.prototype.oncomment = function(value) {
      var _a, _b, _c, _d;
      this.updatePosition(4), (_b = (_a = this.cbs).oncomment) === null || _b === void 0 || _b.call(_a, value), (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 || _d.call(_c);
    }, Parser3.prototype.oncdata = function(value) {
      var _a, _b, _c, _d, _e, _f;
      this.updatePosition(1), this.options.xmlMode || this.options.recognizeCDATA ? ((_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 || _b.call(_a), (_d = (_c = this.cbs).ontext) === null || _d === void 0 || _d.call(_c, value), (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 || _f.call(_e)) : this.oncomment("[CDATA[" + value + "]]");
    }, Parser3.prototype.onerror = function(err) {
      var _a, _b;
      (_b = (_a = this.cbs).onerror) === null || _b === void 0 || _b.call(_a, err);
    }, Parser3.prototype.onend = function() {
      var _a, _b;
      if (this.cbs.onclosetag)
        for (var i = this.stack.length; i > 0; this.cbs.onclosetag(this.stack[--i]))
          ;
      (_b = (_a = this.cbs).onend) === null || _b === void 0 || _b.call(_a);
    }, Parser3.prototype.reset = function() {
      var _a, _b, _c, _d;
      (_b = (_a = this.cbs).onreset) === null || _b === void 0 || _b.call(_a), this.tokenizer.reset(), this.tagname = "", this.attribname = "", this.attribs = null, this.stack = [], (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 || _d.call(_c, this);
    }, Parser3.prototype.parseComplete = function(data) {
      this.reset(), this.end(data);
    }, Parser3.prototype.write = function(chunk) {
      this.tokenizer.write(chunk);
    }, Parser3.prototype.end = function(chunk) {
      this.tokenizer.end(chunk);
    }, Parser3.prototype.pause = function() {
      this.tokenizer.pause();
    }, Parser3.prototype.resume = function() {
      this.tokenizer.resume();
    }, Parser3.prototype.parseChunk = function(chunk) {
      this.write(chunk);
    }, Parser3.prototype.done = function(chunk) {
      this.end(chunk);
    }, Parser3;
  }();
  exports.Parser = Parser2;
});

// node_modules/.pnpm/domhandler@4.0.0/node_modules/domhandler/lib/node.js
var require_node = __commonJS((exports) => {
  "use strict";
  var __extends = exports && exports.__extends || function() {
    var extendStatics = function(d, b) {
      return extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          Object.prototype.hasOwnProperty.call(b2, p) && (d2[p] = b2[p]);
      }, extendStatics(d, b);
    };
    return function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }(), __assign = exports && exports.__assign || function() {
    return __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
      }
      return t;
    }, __assign.apply(this, arguments);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.cloneNode = exports.Element = exports.Document = exports.NodeWithChildren = exports.ProcessingInstruction = exports.Comment = exports.Text = exports.DataNode = exports.Node = void 0;
  var nodeTypes = new Map([
    ["tag", 1],
    ["script", 1],
    ["style", 1],
    ["directive", 1],
    ["text", 3],
    ["cdata", 4],
    ["comment", 8],
    ["root", 9]
  ]), Node = function() {
    function Node2(type) {
      this.type = type, this.parent = null, this.prev = null, this.next = null, this.startIndex = null, this.endIndex = null;
    }
    return Object.defineProperty(Node2.prototype, "nodeType", {
      get: function() {
        var _a;
        return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "parentNode", {
      get: function() {
        return this.parent;
      },
      set: function(parent) {
        this.parent = parent;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "previousSibling", {
      get: function() {
        return this.prev;
      },
      set: function(prev) {
        this.prev = prev;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Node2.prototype, "nextSibling", {
      get: function() {
        return this.next;
      },
      set: function(next) {
        this.next = next;
      },
      enumerable: !1,
      configurable: !0
    }), Node2.prototype.cloneNode = function(recursive) {
      return recursive === void 0 && (recursive = !1), cloneNode(this, recursive);
    }, Node2;
  }();
  exports.Node = Node;
  var DataNode = function(_super) {
    __extends(DataNode2, _super);
    function DataNode2(type, data) {
      var _this = _super.call(this, type) || this;
      return _this.data = data, _this;
    }
    return Object.defineProperty(DataNode2.prototype, "nodeValue", {
      get: function() {
        return this.data;
      },
      set: function(data) {
        this.data = data;
      },
      enumerable: !1,
      configurable: !0
    }), DataNode2;
  }(Node);
  exports.DataNode = DataNode;
  var Text = function(_super) {
    __extends(Text2, _super);
    function Text2(data) {
      return _super.call(this, "text", data) || this;
    }
    return Text2;
  }(DataNode);
  exports.Text = Text;
  var Comment = function(_super) {
    __extends(Comment2, _super);
    function Comment2(data) {
      return _super.call(this, "comment", data) || this;
    }
    return Comment2;
  }(DataNode);
  exports.Comment = Comment;
  var ProcessingInstruction = function(_super) {
    __extends(ProcessingInstruction2, _super);
    function ProcessingInstruction2(name, data) {
      var _this = _super.call(this, "directive", data) || this;
      return _this.name = name, _this;
    }
    return ProcessingInstruction2;
  }(DataNode);
  exports.ProcessingInstruction = ProcessingInstruction;
  var NodeWithChildren = function(_super) {
    __extends(NodeWithChildren2, _super);
    function NodeWithChildren2(type, children) {
      var _this = _super.call(this, type) || this;
      return _this.children = children, _this;
    }
    return Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
      get: function() {
        var _a;
        return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
      get: function() {
        return this.children.length > 0 ? this.children[this.children.length - 1] : null;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
      get: function() {
        return this.children;
      },
      set: function(children) {
        this.children = children;
      },
      enumerable: !1,
      configurable: !0
    }), NodeWithChildren2;
  }(Node);
  exports.NodeWithChildren = NodeWithChildren;
  var Document = function(_super) {
    __extends(Document2, _super);
    function Document2(children) {
      return _super.call(this, "root", children) || this;
    }
    return Document2;
  }(NodeWithChildren);
  exports.Document = Document;
  var Element = function(_super) {
    __extends(Element2, _super);
    function Element2(name, attribs, children) {
      children === void 0 && (children = []);
      var _this = _super.call(this, name === "script" ? "script" : name === "style" ? "style" : "tag", children) || this;
      return _this.name = name, _this.attribs = attribs, _this.attribs = attribs, _this;
    }
    return Object.defineProperty(Element2.prototype, "tagName", {
      get: function() {
        return this.name;
      },
      set: function(name) {
        this.name = name;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(Element2.prototype, "attributes", {
      get: function() {
        var _this = this;
        return Object.keys(this.attribs).map(function(name) {
          var _a, _b;
          return {
            name,
            value: _this.attribs[name],
            namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
            prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
          };
        });
      },
      enumerable: !1,
      configurable: !0
    }), Element2;
  }(NodeWithChildren);
  exports.Element = Element;
  function cloneNode(node, recursive) {
    recursive === void 0 && (recursive = !1);
    var result;
    switch (node.type) {
      case "text":
        result = new Text(node.data);
        break;
      case "directive": {
        var instr = node;
        result = new ProcessingInstruction(instr.name, instr.data), instr["x-name"] != null && (result["x-name"] = instr["x-name"], result["x-publicId"] = instr["x-publicId"], result["x-systemId"] = instr["x-systemId"]);
        break;
      }
      case "comment":
        result = new Comment(node.data);
        break;
      case "tag":
      case "script":
      case "style": {
        var elem = node, children = recursive ? cloneChildren(elem.children) : [], clone_1 = new Element(elem.name, __assign({}, elem.attribs), children);
        children.forEach(function(child) {
          return child.parent = clone_1;
        }), elem["x-attribsNamespace"] && (clone_1["x-attribsNamespace"] = __assign({}, elem["x-attribsNamespace"])), elem["x-attribsPrefix"] && (clone_1["x-attribsPrefix"] = __assign({}, elem["x-attribsPrefix"])), result = clone_1;
        break;
      }
      case "cdata": {
        var cdata = node, children = recursive ? cloneChildren(cdata.children) : [], clone_2 = new NodeWithChildren(node.type, children);
        children.forEach(function(child) {
          return child.parent = clone_2;
        }), result = clone_2;
        break;
      }
      case "root": {
        var doc = node, children = recursive ? cloneChildren(doc.children) : [], clone_3 = new Document(children);
        children.forEach(function(child) {
          return child.parent = clone_3;
        }), doc["x-mode"] && (clone_3["x-mode"] = doc["x-mode"]), result = clone_3;
        break;
      }
      case "doctype":
        throw new Error("Not implemented yet: ElementType.Doctype case");
    }
    return result.startIndex = node.startIndex, result.endIndex = node.endIndex, result;
  }
  exports.cloneNode = cloneNode;
  function cloneChildren(childs) {
    for (var children = childs.map(function(child) {
      return cloneNode(child, !0);
    }), i = 1; i < children.length; i++)
      children[i].prev = children[i - 1], children[i - 1].next = children[i];
    return children;
  }
});

// node_modules/.pnpm/domhandler@4.0.0/node_modules/domhandler/lib/index.js
var require_lib4 = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.DomHandler = void 0;
  var node_1 = require_node();
  __exportStar2(require_node(), exports);
  var reWhitespace = /\s+/g, defaultOpts = {
    normalizeWhitespace: !1,
    withStartIndices: !1,
    withEndIndices: !1
  }, DomHandler2 = function() {
    function DomHandler3(callback, options, elementCB) {
      this.dom = [], this.root = new node_1.Document(this.dom), this.done = !1, this.tagStack = [this.root], this.lastNode = null, this.parser = null, typeof options == "function" && (elementCB = options, options = defaultOpts), typeof callback == "object" && (options = callback, callback = void 0), this.callback = callback ?? null, this.options = options ?? defaultOpts, this.elementCB = elementCB ?? null;
    }
    return DomHandler3.prototype.onparserinit = function(parser) {
      this.parser = parser;
    }, DomHandler3.prototype.onreset = function() {
      var _a;
      this.dom = [], this.root = new node_1.Document(this.dom), this.done = !1, this.tagStack = [this.root], this.lastNode = null, this.parser = (_a = this.parser) !== null && _a !== void 0 ? _a : null;
    }, DomHandler3.prototype.onend = function() {
      this.done || (this.done = !0, this.parser = null, this.handleCallback(null));
    }, DomHandler3.prototype.onerror = function(error) {
      this.handleCallback(error);
    }, DomHandler3.prototype.onclosetag = function() {
      this.lastNode = null;
      var elem = this.tagStack.pop();
      this.options.withEndIndices && (elem.endIndex = this.parser.endIndex), this.elementCB && this.elementCB(elem);
    }, DomHandler3.prototype.onopentag = function(name, attribs) {
      var element = new node_1.Element(name, attribs);
      this.addNode(element), this.tagStack.push(element);
    }, DomHandler3.prototype.ontext = function(data) {
      var normalizeWhitespace = this.options.normalizeWhitespace, lastNode = this.lastNode;
      if (lastNode && lastNode.type === "text")
        normalizeWhitespace ? lastNode.data = (lastNode.data + data).replace(reWhitespace, " ") : lastNode.data += data;
      else {
        normalizeWhitespace && (data = data.replace(reWhitespace, " "));
        var node = new node_1.Text(data);
        this.addNode(node), this.lastNode = node;
      }
    }, DomHandler3.prototype.oncomment = function(data) {
      if (this.lastNode && this.lastNode.type === "comment") {
        this.lastNode.data += data;
        return;
      }
      var node = new node_1.Comment(data);
      this.addNode(node), this.lastNode = node;
    }, DomHandler3.prototype.oncommentend = function() {
      this.lastNode = null;
    }, DomHandler3.prototype.oncdatastart = function() {
      var text = new node_1.Text(""), node = new node_1.NodeWithChildren("cdata", [text]);
      this.addNode(node), text.parent = node, this.lastNode = text;
    }, DomHandler3.prototype.oncdataend = function() {
      this.lastNode = null;
    }, DomHandler3.prototype.onprocessinginstruction = function(name, data) {
      var node = new node_1.ProcessingInstruction(name, data);
      this.addNode(node);
    }, DomHandler3.prototype.handleCallback = function(error) {
      if (typeof this.callback == "function")
        this.callback(error, this.dom);
      else if (error)
        throw error;
    }, DomHandler3.prototype.addNode = function(node) {
      var parent = this.tagStack[this.tagStack.length - 1], previousSibling = parent.children[parent.children.length - 1];
      this.options.withStartIndices && (node.startIndex = this.parser.startIndex), this.options.withEndIndices && (node.endIndex = this.parser.endIndex), parent.children.push(node), previousSibling && (node.prev = previousSibling, previousSibling.next = node), node.parent = parent, this.lastNode = null;
    }, DomHandler3.prototype.addDataNode = function(node) {
      this.addNode(node), this.lastNode = node;
    }, DomHandler3;
  }();
  exports.DomHandler = DomHandler2;
  exports.default = DomHandler2;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/tagtypes.js
var require_tagtypes = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.hasChildren = exports.isComment = exports.isText = exports.isCDATA = exports.isTag = void 0;
  var domelementtype_1 = require_lib();
  function isTag(node) {
    return domelementtype_1.isTag(node);
  }
  exports.isTag = isTag;
  function isCDATA(node) {
    return node.type === "cdata";
  }
  exports.isCDATA = isCDATA;
  function isText(node) {
    return node.type === "text";
  }
  exports.isText = isText;
  function isComment(node) {
    return node.type === "comment";
  }
  exports.isComment = isComment;
  function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, "children");
  }
  exports.hasChildren = hasChildren;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/stringify.js
var require_stringify = __commonJS((exports) => {
  "use strict";
  var __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;
  var tagtypes_1 = require_tagtypes(), dom_serializer_1 = __importDefault(require_lib3());
  function getOuterHTML(node, options) {
    return dom_serializer_1.default(node, options);
  }
  exports.getOuterHTML = getOuterHTML;
  function getInnerHTML(node, options) {
    return tagtypes_1.hasChildren(node) ? node.children.map(function(node2) {
      return getOuterHTML(node2, options);
    }).join("") : "";
  }
  exports.getInnerHTML = getInnerHTML;
  function getText(node) {
    return Array.isArray(node) ? node.map(getText).join("") : tagtypes_1.isTag(node) ? node.name === "br" ? `
` : getText(node.children) : tagtypes_1.isCDATA(node) ? getText(node.children) : tagtypes_1.isText(node) ? node.data : "";
  }
  exports.getText = getText;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/traversal.js
var require_traversal = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;
  var tagtypes_1 = require_tagtypes(), emptyArray = [];
  function getChildren(elem) {
    var _a;
    return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
  }
  exports.getChildren = getChildren;
  function getParent(elem) {
    return elem.parent || null;
  }
  exports.getParent = getParent;
  function getSiblings(elem) {
    var _a, _b, parent = getParent(elem);
    if (parent != null)
      return getChildren(parent);
    for (var siblings = [elem], prev = elem.prev, next = elem.next; prev != null; )
      siblings.unshift(prev), _a = prev, prev = _a.prev;
    for (; next != null; )
      siblings.push(next), _b = next, next = _b.next;
    return siblings;
  }
  exports.getSiblings = getSiblings;
  function getAttributeValue(elem, name) {
    var _a;
    return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
  }
  exports.getAttributeValue = getAttributeValue;
  function hasAttrib(elem, name) {
    return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
  }
  exports.hasAttrib = hasAttrib;
  function getName(elem) {
    return elem.name;
  }
  exports.getName = getName;
  function nextElementSibling(elem) {
    for (var _a, next = elem.next; next !== null && !tagtypes_1.isTag(next); )
      _a = next, next = _a.next;
    return next;
  }
  exports.nextElementSibling = nextElementSibling;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/manipulation.js
var require_manipulation = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.prepend = exports.prependChild = exports.append = exports.appendChild = exports.replaceElement = exports.removeElement = void 0;
  function removeElement(elem) {
    if (elem.prev && (elem.prev.next = elem.next), elem.next && (elem.next.prev = elem.prev), elem.parent) {
      var childs = elem.parent.children;
      childs.splice(childs.lastIndexOf(elem), 1);
    }
  }
  exports.removeElement = removeElement;
  function replaceElement(elem, replacement) {
    var prev = replacement.prev = elem.prev;
    prev && (prev.next = replacement);
    var next = replacement.next = elem.next;
    next && (next.prev = replacement);
    var parent = replacement.parent = elem.parent;
    if (parent) {
      var childs = parent.children;
      childs[childs.lastIndexOf(elem)] = replacement;
    }
  }
  exports.replaceElement = replaceElement;
  function appendChild(elem, child) {
    if (removeElement(child), child.next = null, child.parent = elem, elem.children.push(child) > 1) {
      var sibling = elem.children[elem.children.length - 2];
      sibling.next = child, child.prev = sibling;
    } else
      child.prev = null;
  }
  exports.appendChild = appendChild;
  function append(elem, next) {
    removeElement(next);
    var parent = elem.parent, currNext = elem.next;
    if (next.next = currNext, next.prev = elem, elem.next = next, next.parent = parent, currNext) {
      if (currNext.prev = next, parent) {
        var childs = parent.children;
        childs.splice(childs.lastIndexOf(currNext), 0, next);
      }
    } else
      parent && parent.children.push(next);
  }
  exports.append = append;
  function prependChild(elem, child) {
    if (removeElement(child), child.parent = elem, child.prev = null, elem.children.unshift(child) !== 1) {
      var sibling = elem.children[1];
      sibling.prev = child, child.next = sibling;
    } else
      child.next = null;
  }
  exports.prependChild = prependChild;
  function prepend(elem, prev) {
    removeElement(prev);
    var parent = elem.parent;
    if (parent) {
      var childs = parent.children;
      childs.splice(childs.indexOf(elem), 0, prev);
    }
    elem.prev && (elem.prev.next = prev), prev.parent = parent, prev.prev = elem.prev, prev.next = elem, elem.prev = prev;
  }
  exports.prepend = prepend;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/querying.js
var require_querying = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
  var tagtypes_1 = require_tagtypes();
  function filter(test, node, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), Array.isArray(node) || (node = [node]), find(test, node, recurse, limit);
  }
  exports.filter = filter;
  function find(test, nodes, recurse, limit) {
    for (var result = [], _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
      var elem = nodes_1[_i];
      if (test(elem) && (result.push(elem), --limit <= 0))
        break;
      if (recurse && tagtypes_1.hasChildren(elem) && elem.children.length > 0) {
        var children = find(test, elem.children, recurse, limit);
        if (result.push.apply(result, children), limit -= children.length, limit <= 0)
          break;
      }
    }
    return result;
  }
  exports.find = find;
  function findOneChild(test, nodes) {
    return nodes.find(test);
  }
  exports.findOneChild = findOneChild;
  function findOne(test, nodes, recurse) {
    recurse === void 0 && (recurse = !0);
    for (var elem = null, i = 0; i < nodes.length && !elem; i++) {
      var checked = nodes[i];
      if (tagtypes_1.isTag(checked))
        test(checked) ? elem = checked : recurse && checked.children.length > 0 && (elem = findOne(test, checked.children));
      else
        continue;
    }
    return elem;
  }
  exports.findOne = findOne;
  function existsOne(test, nodes) {
    return nodes.some(function(checked) {
      return tagtypes_1.isTag(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));
    });
  }
  exports.existsOne = existsOne;
  function findAll(test, nodes) {
    for (var _a, result = [], stack = nodes.filter(tagtypes_1.isTag), elem; elem = stack.shift(); ) {
      var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(tagtypes_1.isTag);
      children && children.length > 0 && stack.unshift.apply(stack, children), test(elem) && result.push(elem);
    }
    return result;
  }
  exports.findAll = findAll;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/legacy.js
var require_legacy2 = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
  var querying_1 = require_querying(), tagtypes_1 = require_tagtypes(), Checks = {
    tag_name: function(name) {
      return typeof name == "function" ? function(elem) {
        return tagtypes_1.isTag(elem) && name(elem.name);
      } : name === "*" ? tagtypes_1.isTag : function(elem) {
        return tagtypes_1.isTag(elem) && elem.name === name;
      };
    },
    tag_type: function(type) {
      return typeof type == "function" ? function(elem) {
        return type(elem.type);
      } : function(elem) {
        return elem.type === type;
      };
    },
    tag_contains: function(data) {
      return typeof data == "function" ? function(elem) {
        return tagtypes_1.isText(elem) && data(elem.data);
      } : function(elem) {
        return tagtypes_1.isText(elem) && elem.data === data;
      };
    }
  };
  function getAttribCheck(attrib, value) {
    return typeof value == "function" ? function(elem) {
      return tagtypes_1.isTag(elem) && value(elem.attribs[attrib]);
    } : function(elem) {
      return tagtypes_1.isTag(elem) && elem.attribs[attrib] === value;
    };
  }
  function combineFuncs(a, b) {
    return function(elem) {
      return a(elem) || b(elem);
    };
  }
  function compileTest(options) {
    var funcs = Object.keys(options).map(function(key) {
      var value = options[key];
      return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
  }
  function testElement(options, node) {
    var test = compileTest(options);
    return test ? test(node) : !0;
  }
  exports.testElement = testElement;
  function getElements(options, nodes, recurse, limit) {
    limit === void 0 && (limit = Infinity);
    var test = compileTest(options);
    return test ? querying_1.filter(test, nodes, recurse, limit) : [];
  }
  exports.getElements = getElements;
  function getElementById(id, nodes, recurse) {
    return recurse === void 0 && (recurse = !0), Array.isArray(nodes) || (nodes = [nodes]), querying_1.findOne(getAttribCheck("id", id), nodes, recurse);
  }
  exports.getElementById = getElementById;
  function getElementsByTagName(tagName, nodes, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), querying_1.filter(Checks.tag_name(tagName), nodes, recurse, limit);
  }
  exports.getElementsByTagName = getElementsByTagName;
  function getElementsByTagType(type, nodes, recurse, limit) {
    return recurse === void 0 && (recurse = !0), limit === void 0 && (limit = Infinity), querying_1.filter(Checks.tag_type(type), nodes, recurse, limit);
  }
  exports.getElementsByTagType = getElementsByTagType;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/helpers.js
var require_helpers = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.uniqueSort = exports.compareDocumentPosition = exports.removeSubsets = void 0;
  var tagtypes_1 = require_tagtypes();
  function removeSubsets(nodes) {
    for (var idx = nodes.length; --idx >= 0; ) {
      var node = nodes[idx];
      if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
        nodes.splice(idx, 1);
        continue;
      }
      for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent)
        if (nodes.includes(ancestor)) {
          nodes.splice(idx, 1);
          break;
        }
    }
    return nodes;
  }
  exports.removeSubsets = removeSubsets;
  function compareDocumentPosition(nodeA, nodeB) {
    var aParents = [], bParents = [];
    if (nodeA === nodeB)
      return 0;
    for (var current = tagtypes_1.hasChildren(nodeA) ? nodeA : nodeA.parent; current; )
      aParents.unshift(current), current = current.parent;
    for (current = tagtypes_1.hasChildren(nodeB) ? nodeB : nodeB.parent; current; )
      bParents.unshift(current), current = current.parent;
    for (var maxIdx = Math.min(aParents.length, bParents.length), idx = 0; idx < maxIdx && aParents[idx] === bParents[idx]; )
      idx++;
    if (idx === 0)
      return 1;
    var sharedParent = aParents[idx - 1], siblings = sharedParent.children, aSibling = aParents[idx], bSibling = bParents[idx];
    return siblings.indexOf(aSibling) > siblings.indexOf(bSibling) ? sharedParent === nodeB ? 4 | 16 : 4 : sharedParent === nodeA ? 2 | 8 : 2;
  }
  exports.compareDocumentPosition = compareDocumentPosition;
  function uniqueSort(nodes) {
    return nodes = nodes.filter(function(node, i, arr) {
      return !arr.includes(node, i + 1);
    }), nodes.sort(function(a, b) {
      var relative = compareDocumentPosition(a, b);
      return relative & 2 ? -1 : relative & 4 ? 1 : 0;
    }), nodes;
  }
  exports.uniqueSort = uniqueSort;
});

// node_modules/.pnpm/domutils@2.4.4/node_modules/domutils/lib/index.js
var require_lib5 = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  __exportStar2(require_stringify(), exports);
  __exportStar2(require_traversal(), exports);
  __exportStar2(require_manipulation(), exports);
  __exportStar2(require_querying(), exports);
  __exportStar2(require_legacy2(), exports);
  __exportStar2(require_helpers(), exports);
  __exportStar2(require_tagtypes(), exports);
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/FeedHandler.js
var require_FeedHandler = __commonJS((exports) => {
  "use strict";
  var __extends = exports && exports.__extends || function() {
    var extendStatics = function(d, b) {
      return extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          Object.prototype.hasOwnProperty.call(b2, p) && (d2[p] = b2[p]);
      }, extendStatics(d, b);
    };
    return function(d, b) {
      if (typeof b != "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
  }(), __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: !0, value: v});
  } : function(o, v) {
    o.default = v;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
  }, __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.parseFeed = exports.FeedHandler = void 0;
  var domhandler_1 = __importDefault(require_lib4()), DomUtils2 = __importStar(require_lib5()), Parser_1 = require_Parser(), FeedItemMediaMedium;
  (function(FeedItemMediaMedium2) {
    FeedItemMediaMedium2[FeedItemMediaMedium2.image = 0] = "image", FeedItemMediaMedium2[FeedItemMediaMedium2.audio = 1] = "audio", FeedItemMediaMedium2[FeedItemMediaMedium2.video = 2] = "video", FeedItemMediaMedium2[FeedItemMediaMedium2.document = 3] = "document", FeedItemMediaMedium2[FeedItemMediaMedium2.executable = 4] = "executable";
  })(FeedItemMediaMedium || (FeedItemMediaMedium = {}));
  var FeedItemMediaExpression;
  (function(FeedItemMediaExpression2) {
    FeedItemMediaExpression2[FeedItemMediaExpression2.sample = 0] = "sample", FeedItemMediaExpression2[FeedItemMediaExpression2.full = 1] = "full", FeedItemMediaExpression2[FeedItemMediaExpression2.nonstop = 2] = "nonstop";
  })(FeedItemMediaExpression || (FeedItemMediaExpression = {}));
  var FeedHandler = function(_super) {
    __extends(FeedHandler2, _super);
    function FeedHandler2(callback, options) {
      var _this = this;
      return typeof callback == "object" && (callback = void 0, options = callback), _this = _super.call(this, callback, options) || this, _this;
    }
    return FeedHandler2.prototype.onend = function() {
      var _a, _b, feedRoot = getOneElement(isValidFeed, this.dom);
      if (!feedRoot) {
        this.handleCallback(new Error("couldn't find root of feed"));
        return;
      }
      var feed = {};
      if (feedRoot.name === "feed") {
        var childs = feedRoot.children;
        feed.type = "atom", addConditionally(feed, "id", "id", childs), addConditionally(feed, "title", "title", childs);
        var href = getAttribute("href", getOneElement("link", childs));
        href && (feed.link = href), addConditionally(feed, "description", "subtitle", childs);
        var updated = fetch2("updated", childs);
        updated && (feed.updated = new Date(updated)), addConditionally(feed, "author", "email", childs, !0), feed.items = getElements("entry", childs).map(function(item) {
          var entry = {}, children = item.children;
          addConditionally(entry, "id", "id", children), addConditionally(entry, "title", "title", children);
          var href2 = getAttribute("href", getOneElement("link", children));
          href2 && (entry.link = href2);
          var description = fetch2("summary", children) || fetch2("content", children);
          description && (entry.description = description);
          var pubDate = fetch2("updated", children);
          return pubDate && (entry.pubDate = new Date(pubDate)), entry.media = getMediaElements(children), entry;
        });
      } else {
        var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
        feed.type = feedRoot.name.substr(0, 3), feed.id = "", addConditionally(feed, "title", "title", childs), addConditionally(feed, "link", "link", childs), addConditionally(feed, "description", "description", childs);
        var updated = fetch2("lastBuildDate", childs);
        updated && (feed.updated = new Date(updated)), addConditionally(feed, "author", "managingEditor", childs, !0), feed.items = getElements("item", feedRoot.children).map(function(item) {
          var entry = {}, children = item.children;
          addConditionally(entry, "id", "guid", children), addConditionally(entry, "title", "title", children), addConditionally(entry, "link", "link", children), addConditionally(entry, "description", "description", children);
          var pubDate = fetch2("pubDate", children);
          return pubDate && (entry.pubDate = new Date(pubDate)), entry.media = getMediaElements(children), entry;
        });
      }
      this.feed = feed, this.handleCallback(null);
    }, FeedHandler2;
  }(domhandler_1.default);
  exports.FeedHandler = FeedHandler;
  function getMediaElements(where) {
    return getElements("media:content", where).map(function(elem) {
      var media = {
        medium: elem.attribs.medium,
        isDefault: !!elem.attribs.isDefault
      };
      return elem.attribs.url && (media.url = elem.attribs.url), elem.attribs.fileSize && (media.fileSize = parseInt(elem.attribs.fileSize, 10)), elem.attribs.type && (media.type = elem.attribs.type), elem.attribs.expression && (media.expression = elem.attribs.expression), elem.attribs.bitrate && (media.bitrate = parseInt(elem.attribs.bitrate, 10)), elem.attribs.framerate && (media.framerate = parseInt(elem.attribs.framerate, 10)), elem.attribs.samplingrate && (media.samplingrate = parseInt(elem.attribs.samplingrate, 10)), elem.attribs.channels && (media.channels = parseInt(elem.attribs.channels, 10)), elem.attribs.duration && (media.duration = parseInt(elem.attribs.duration, 10)), elem.attribs.height && (media.height = parseInt(elem.attribs.height, 10)), elem.attribs.width && (media.width = parseInt(elem.attribs.width, 10)), elem.attribs.lang && (media.lang = elem.attribs.lang), media;
    });
  }
  function getElements(tagName, where) {
    return DomUtils2.getElementsByTagName(tagName, where, !0);
  }
  function getOneElement(tagName, node) {
    return DomUtils2.getElementsByTagName(tagName, node, !0, 1)[0];
  }
  function fetch2(tagName, where, recurse) {
    return recurse === void 0 && (recurse = !1), DomUtils2.getText(DomUtils2.getElementsByTagName(tagName, where, recurse, 1)).trim();
  }
  function getAttribute(name, elem) {
    if (!elem)
      return null;
    var attribs = elem.attribs;
    return attribs[name];
  }
  function addConditionally(obj, prop, what, where, recurse) {
    recurse === void 0 && (recurse = !1);
    var tmp = fetch2(what, where, recurse);
    tmp && (obj[prop] = tmp);
  }
  function isValidFeed(value) {
    return value === "rss" || value === "feed" || value === "rdf:RDF";
  }
  function parseFeed(feed, options) {
    options === void 0 && (options = {xmlMode: !0});
    var handler = new FeedHandler(options);
    return new Parser_1.Parser(handler, options).end(feed), handler.feed;
  }
  exports.parseFeed = parseFeed;
});

// node_modules/.pnpm/htmlparser2@6.0.1/node_modules/htmlparser2/lib/index.js
var require_lib6 = __commonJS((exports) => {
  "use strict";
  var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), Object.defineProperty(o, k2, {enumerable: !0, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    k2 === void 0 && (k2 = k), o[k2] = m[k];
  }), __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: !0, value: v});
  } : function(o, v) {
    o.default = v;
  }), __importStar = exports && exports.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        k !== "default" && Object.prototype.hasOwnProperty.call(mod, k) && __createBinding(result, mod, k);
    return __setModuleDefault(result, mod), result;
  }, __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
    for (var p in m)
      p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p) && __createBinding(exports2, m, p);
  }, __importDefault = exports && exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports, "__esModule", {value: !0});
  exports.RssHandler = exports.DefaultHandler = exports.DomUtils = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DomHandler = exports.Parser = void 0;
  var Parser_1 = require_Parser();
  Object.defineProperty(exports, "Parser", {enumerable: !0, get: function() {
    return Parser_1.Parser;
  }});
  var domhandler_1 = require_lib4();
  Object.defineProperty(exports, "DomHandler", {enumerable: !0, get: function() {
    return domhandler_1.DomHandler;
  }});
  Object.defineProperty(exports, "DefaultHandler", {enumerable: !0, get: function() {
    return domhandler_1.DomHandler;
  }});
  function parseDocument2(data, options) {
    var handler = new domhandler_1.DomHandler(void 0, options);
    return new Parser_1.Parser(handler, options).end(data), handler.root;
  }
  exports.parseDocument = parseDocument2;
  function parseDOM(data, options) {
    return parseDocument2(data, options).children;
  }
  exports.parseDOM = parseDOM;
  function createDomStream(cb, options, elementCb) {
    var handler = new domhandler_1.DomHandler(cb, options, elementCb);
    return new Parser_1.Parser(handler, options);
  }
  exports.createDomStream = createDomStream;
  var Tokenizer_1 = require_Tokenizer();
  Object.defineProperty(exports, "Tokenizer", {enumerable: !0, get: function() {
    return __importDefault(Tokenizer_1).default;
  }});
  var ElementType = __importStar(require_lib());
  exports.ElementType = ElementType;
  __exportStar2(require_FeedHandler(), exports);
  exports.DomUtils = __importStar(require_lib5());
  var FeedHandler_1 = require_FeedHandler();
  Object.defineProperty(exports, "RssHandler", {enumerable: !0, get: function() {
    return FeedHandler_1.FeedHandler;
  }});
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS((exports, module) => {
  "use strict";
  var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  module.exports = ReactPropTypesSecret;
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/factoryWithThrowingShims.js
var require_factoryWithThrowingShims = __commonJS((exports, module) => {
  "use strict";
  var ReactPropTypesSecret = require_ReactPropTypesSecret();
  function emptyFunction() {
  }
  function emptyFunctionWithReset() {
  }
  emptyFunctionWithReset.resetWarningCache = emptyFunction;
  module.exports = function() {
    function shim(props, propName, componentName, location2, propFullName, secret) {
      if (secret !== ReactPropTypesSecret) {
        var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
        throw err.name = "Invariant Violation", err;
      }
    }
    shim.isRequired = shim;
    function getShim() {
      return shim;
    }
    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,
      any: shim,
      arrayOf: getShim,
      element: shim,
      elementType: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim,
      exact: getShim,
      checkPropTypes: emptyFunctionWithReset,
      resetWarningCache: emptyFunction
    };
    return ReactPropTypes.PropTypes = ReactPropTypes, ReactPropTypes;
  };
});

// node_modules/.pnpm/prop-types@15.7.2/node_modules/prop-types/index.js
var require_prop_types = __commonJS((exports, module) => {
  module.exports = require_factoryWithThrowingShims()();
  var ReactIs, throwOnDirectAccess;
});

// src/lib/launchIdleWorker.ts
typeof SharedWorker != "undefined" && !globalThis.IDLE_WORKER;

// src/lib/injectServiceWorker.ts
globalThis.navigator.serviceWorker && globalThis.navigator.serviceWorker.register("/_dev_/service-worker.js", {scope: "/"}).then(function(registration) {
  console.log("ServiceWorker registration successful!"), globalThis.navigator.serviceWorker.startMessages(), globalThis.navigator.serviceWorker.controller.addEventListener("message", () => {
  });
}).catch(function(err) {
  console.log("ServiceWorker registration failed: ", err);
});

// src/_dev_/NewProjectPage.tsx
var React10 = __toModule(require_react()), ReactDOM4 = __toModule(require_react_dom());

// node_modules/.pnpm/idb@6.0.0/node_modules/idb/build/esm/wrap-idb-value.js
var instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c), idbProxyableTypes, cursorAdvanceMethods;
function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
var cursorRequestMap = new WeakMap(), transactionDoneMap = new WeakMap(), transactionStoreNamesMap = new WeakMap(), transformCache = new WeakMap(), reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
  let promise = new Promise((resolve, reject) => {
    let unlisten = () => {
      request.removeEventListener("success", success), request.removeEventListener("error", error);
    }, success = () => {
      resolve(wrap(request.result)), unlisten();
    }, error = () => {
      reject(request.error), unlisten();
    };
    request.addEventListener("success", success), request.addEventListener("error", error);
  });
  return promise.then((value) => {
    value instanceof IDBCursor && cursorRequestMap.set(value, request);
  }).catch(() => {
  }), reverseTransformCache.set(promise, request), promise;
}
function cacheDonePromiseForTransaction(tx) {
  if (transactionDoneMap.has(tx))
    return;
  let done = new Promise((resolve, reject) => {
    let unlisten = () => {
      tx.removeEventListener("complete", complete), tx.removeEventListener("error", error), tx.removeEventListener("abort", error);
    }, complete = () => {
      resolve(), unlisten();
    }, error = () => {
      reject(tx.error || new DOMException("AbortError", "AbortError")), unlisten();
    };
    tx.addEventListener("complete", complete), tx.addEventListener("error", error), tx.addEventListener("abort", error);
  });
  transactionDoneMap.set(tx, done);
}
var idbProxyTraps = {
  get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      if (prop === "done")
        return transactionDoneMap.get(target);
      if (prop === "objectStoreNames")
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      if (prop === "store")
        return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
    }
    return wrap(target[prop]);
  },
  set(target, prop, value) {
    return target[prop] = value, !0;
  },
  has(target, prop) {
    return target instanceof IDBTransaction && (prop === "done" || prop === "store") ? !0 : prop in target;
  }
};
function replaceTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
  return func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype) ? function(storeNames, ...args) {
    let tx = func.call(unwrap(this), storeNames, ...args);
    return transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]), wrap(tx);
  } : getCursorAdvanceMethods().includes(func) ? function(...args) {
    return func.apply(unwrap(this), args), wrap(cursorRequestMap.get(this));
  } : function(...args) {
    return wrap(func.apply(unwrap(this), args));
  };
}
function transformCachableValue(value) {
  return typeof value == "function" ? wrapFunction(value) : (value instanceof IDBTransaction && cacheDonePromiseForTransaction(value), instanceOfAny(value, getIdbProxyableTypes()) ? new Proxy(value, idbProxyTraps) : value);
}
function wrap(value) {
  if (value instanceof IDBRequest)
    return promisifyRequest(value);
  if (transformCache.has(value))
    return transformCache.get(value);
  let newValue = transformCachableValue(value);
  return newValue !== value && (transformCache.set(value, newValue), reverseTransformCache.set(newValue, value)), newValue;
}
var unwrap = (value) => reverseTransformCache.get(value);

// node_modules/.pnpm/idb@6.0.0/node_modules/idb/build/esm/index.js
function openDB(name, version, {blocked, upgrade, blocking, terminated} = {}) {
  let request = indexedDB.open(name, version), openPromise = wrap(request);
  return upgrade && request.addEventListener("upgradeneeded", (event) => {
    upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));
  }), blocked && request.addEventListener("blocked", () => blocked()), openPromise.then((db) => {
    terminated && db.addEventListener("close", () => terminated()), blocking && db.addEventListener("versionchange", () => blocking());
  }).catch(() => {
  }), openPromise;
}
var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"], writeMethods = ["put", "add", "delete", "clear"], cachedMethods = new Map();
function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop == "string"))
    return;
  if (cachedMethods.get(prop))
    return cachedMethods.get(prop);
  let targetFuncName = prop.replace(/FromIndex$/, ""), useIndex = prop !== targetFuncName, isWrite = writeMethods.includes(targetFuncName);
  if (!(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName)))
    return;
  let method = async function(storeName, ...args) {
    let tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly"), target2 = tx.store;
    return useIndex && (target2 = target2.index(args.shift())), (await Promise.all([
      target2[targetFuncName](...args),
      isWrite && tx.done
    ]))[0];
  };
  return cachedMethods.set(prop, method), method;
}
replaceTraps((oldTraps) => ({
  ...oldTraps,
  get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
  has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
}));

// src/_dev_/getPackageID.tsx
function getPackageID() {
  return location.origin.substring(location.protocol.length + "//".length, location.origin.indexOf("."));
}

// src/lib/StoredPackage.ts
var import_lite2 = __toModule(require_lite()), path5 = __toModule(require_path_browserify());

// src/lib/ErrorCode.tsx
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2[ErrorCode2.invalidPackageJSON = 0] = "invalidPackageJSON", ErrorCode2[ErrorCode2.emptyDir = 1] = "emptyDir", ErrorCode2[ErrorCode2.missingEntryFiles = 2] = "missingEntryFiles", ErrorCode2[ErrorCode2.missing = 3] = "missing", ErrorCode2[ErrorCode2.genericError = 4] = "genericError", ErrorCode2[ErrorCode2.errorFetchingPackageJSON = 5] = "errorFetchingPackageJSON", ErrorCode2[ErrorCode2.errorGettingPackageJSONFile = 6] = "errorGettingPackageJSONFile", ErrorCode2[ErrorCode2.parsingPackageJSON = 7] = "parsingPackageJSON", ErrorCode2[ErrorCode2.requirePermission = 8] = "requirePermission", ErrorCode2[ErrorCode2.noEntryPoints = 9] = "noEntryPoints", ErrorCode2[ErrorCode2.resolveFile = 10] = "resolveFile", ErrorCode2[ErrorCode2.fileNotFound = 11] = "fileNotFound", ErrorCode2[ErrorCode2.fileAccessDenied = 12] = "fileAccessDenied", ErrorCode2[ErrorCode2.buildFailed = 13] = "buildFailed", ErrorCode2[ErrorCode2.invalidTSConfig = 14] = "invalidTSConfig", ErrorCode2[ErrorCode2.routeNotFound = 15] = "routeNotFound", ErrorCode2[ErrorCode2.needsConfig = 16] = "needsConfig", ErrorCode2[ErrorCode2.failedToResolveNPMPackage = 17] = "failedToResolveNPMPackage";
})(ErrorCode || (ErrorCode = {}));

// src/lib/ESBuildPackage.tsx
var import_esbuild_wasm = __toModule(require_browser()), import_lite = __toModule(require_lite()), import_path_browserify = __toModule(require_path_browserify());

// src/lib/getCache.tsx
var _cache;
async function getCache() {
  return _cache || (_cache = await globalThis.caches.open("bundles")), _cache;
}

// src/lib/ESBuildPackage.tsx
var PackagerError = class extends Error {
  constructor(code, ...args) {
    super(...args);
    this.code = code;
  }
  static with(code, error) {
    let packager2 = new PackagerError(code);
    return Object.assign(packager2, error), packager2;
  }
}, PackagerPermissionError = class extends PackagerError {
}, _ESBuildPackage = class {
  constructor(root2, pkg) {
    this.extensionsToTry = [
      ".js",
      ".ts",
      ".tsx",
      ".jsx",
      ".css",
      ".png",
      ".jpg",
      ".webp"
    ];
    this.textExtensionsToTry = [".js", ".ts", ".tsx", ".jsx", ".css"];
    this.binaryExtensionsToTry = [".png", ".jpg", ".webp"];
    this.alwaysRequestPermissions = !1;
    this.resolveFile = async (opts) => {
      let components = opts.path.split("/"), pkgName = components[0];
      if (this.pkg.allDependencies.has(pkgName)) {
        let file = components.length > 1 ? `/${components.slice(1).join("/")}` : "";
        return {
          path: `https://jspm.dev/${this.pkg.allDependencies.get(pkgName)}${file}`,
          external: !0
        };
      }
      let resolvedPath = import_path_browserify.default.join(opts.resolveDir, import_path_browserify.default.normalize(opts.path));
      !import_path_browserify.default.isAbsolute(resolvedPath) && opts.importer ? resolvedPath = import_path_browserify.default.join(resolvedPath, opts.importer) : !import_path_browserify.default.isAbsolute(resolvedPath) && !opts.importer && (resolvedPath = import_path_browserify.default.join(resolvedPath, opts.importer));
      let doesExist = await this.root.exists(resolvedPath);
      if (!doesExist && import_path_browserify.default.extname(resolvedPath) === "") {
        let origPath = resolvedPath;
        for (let extension of this.textExtensionsToTry)
          if (resolvedPath = origPath + extension, await this.root.exists(resolvedPath))
            return {
              path: resolvedPath,
              external: !1
            };
      }
      return doesExist ? {
        path: resolvedPath,
        external: !1
      } : {
        errors: [
          {
            text: `404 - File not found: ${opts.path}`
          }
        ]
      };
    };
    this.loadFile = async (opts) => (console.log("[Load]", opts), opts.namespace === "file" || import_lite.default.getType(import_path_browserify.default.extname(opts.path))?.includes("image") ? {
      contents: new Uint8Array(await this.root.readFileBinary(opts.path)),
      loader: "default"
    } : {
      contents: await this.root.readFileText(opts.path),
      loader: "default"
    });
    this.root = root2, this.pkg = pkg;
  }
  async resolve(_path, importer, resolveDir, canRetry = !0) {
    debugger;
    _path.includes("//") && (_path = _path.replace(/\/+/gm, "/"));
    let fs = this.root;
    if (await fs.exists(_path) || importer && !_path.startsWith("/") && (_path = import_path_browserify.default.normalize(import_path_browserify.default.join(import_path_browserify.default.dirname(importer), "../", _path)), await fs.exists(_path)))
      return _path;
    let newPath = "";
    for (let ext of this.extensionsToTry)
      if (newPath = _path + ext, await fs.exists(newPath))
        return newPath;
    if (importer && importer.startsWith("/") && canRetry)
      return this.resolve(import_path_browserify.default.join(resolveDir, _path), importer, resolveDir, !1);
  }
  emitResolveError({
    message,
    location: location2,
    code,
    path: path7,
    exception,
    namespace,
    external
  }) {
    return {
      pluginName: _ESBuildPackage.pluginName,
      errors: [
        {
          text: message || exception?.toString() || "",
          detail: message && exception ? exception.toString() : "",
          location: location2 || void 0
        }
      ],
      path: path7,
      external,
      namespace,
      pluginData: {code}
    };
  }
  async saveResultToCache(result, route) {
    let outResults = new Array(result.outputFiles.length), i = 0, cache = await getCache();
    for (let file of result.outputFiles) {
      let dest = globalThis.location.origin + file.path, headers = new Headers();
      headers.set("Content-Length", file.contents.byteLength.toString(10)), headers.set("Content-Type", import_lite.default.getType(file.path).toString()), await cache.put(dest, new Response(new Blob([file.text], {
        type: import_lite.default.getType(file.path)
      }), {headers})), outResults[i++] = dest;
    }
    return {entryPoints: outResults};
  }
  generateRelativePath() {
    return "/";
  }
  async build(route) {
    this.relativePath = route.absWorkingDirectory;
    let tsconfigFile = await this.root.nativeFile("tsconfig.json"), tsconfig;
    if (tsconfigFile)
      try {
        tsconfig = await tsconfigFile.text();
      } catch (exception) {
        let err = PackagerError.with(ErrorCode.invalidTSConfig, exception);
        throw err.build = this, err;
      }
    let entryPoints = route.entryPoints, result, config = {
      ...this.pkg.esbuild,
      format: "esm",
      tsconfig,
      metafile: !0,
      entryPoints,
      publicPath: _ESBuildPackage.origin + this.relativePath,
      plugins: [this.asPlugin()],
      write: !1,
      loader: this.pkg.esbuild.loader ? this.pkg.esbuild.loader : {
        ".js": "jsx",
        ".ts": "tsx",
        ".tsx": "tsx"
      },
      absWorkingDir: this.relativePath,
      nodePaths: ["/node_modules"],
      outdir: this.relativePath,
      bundle: !0
    };
    try {
      result = await (0, import_esbuild_wasm.build)(config);
    } catch (e) {
      let err = PackagerError.with(ErrorCode.buildFailed, e);
      throw err.build = this, err;
    }
    for (let script of route.builder.scripts.values())
      script.attribs.type = "module", script.attribs.defer = "", script.attribs["data-src"] = script.attribs.src;
    let html = route.renderToString(result, config);
    return {
      warnings: result.warnings,
      ...await this.saveResultToCache(result, route),
      html
    };
  }
  async getFileForLocation(location2) {
    return await this.root.nativeFile(location2.file);
  }
  asPlugin() {
    let resolveFile = this.resolveFile, loadFile = this.loadFile;
    return {
      name: _ESBuildPackage.pluginName,
      setup(build2) {
        build2.onResolve({filter: /.*/}, resolveFile), build2.onLoad({filter: /.*/}, loadFile);
      }
    };
  }
}, ESBuildPackage = _ESBuildPackage;
ESBuildPackage.pluginName = "devserverless", ESBuildPackage.permissionMode = {mode: "read"};

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global, freeGlobal_default = freeGlobal;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self, root = freeGlobal_default || freeSelf || Function("return this")(), root_default = root;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol, Symbol_default = Symbol2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype, hasOwnProperty = objectProto.hasOwnProperty, nativeObjectToString = objectProto.toString, symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = !0;
  } catch (e) {
  }
  var result = nativeObjectToString.call(value);
  return unmasked && (isOwn ? value[symToStringTag] = tag : delete value[symToStringTag]), result;
}
var getRawTag_default = getRawTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype, nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]", undefinedTag = "[object Undefined]", symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  return value == null ? value === void 0 ? undefinedTag : nullTag : symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArray.js
var isArray = Array.isArray, isArray_default = isArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value))
    return !1;
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"], coreJsData_default = coreJsData;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}
var isMasked_default = isMasked;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_toSource.js
var funcProto = Function.prototype, funcToString = funcProto.toString;
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {
    }
    try {
      return func + "";
    } catch (e) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reIsHostCtor = /^\[object .+?Constructor\]$/, funcProto2 = Function.prototype, objectProto3 = Object.prototype, funcToString2 = funcProto2.toString, hasOwnProperty2 = objectProto3.hasOwnProperty, reIsNative = RegExp("^" + funcToString2.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value))
    return !1;
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getValue.js
function getValue(object, key) {
  return object == null ? void 0 : object[key];
}
var getValue_default = getValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getNative.js
function getNative(object, key) {
  var value = getValue_default(object, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_WeakMap.js
var WeakMap2 = getNative_default(root_default, "WeakMap"), WeakMap_default = WeakMap2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseCreate.js
var objectCreate = Object.create, baseCreate = function() {
  function object() {
  }
  return function(proto) {
    if (!isObject_default(proto))
      return {};
    if (objectCreate)
      return objectCreate(proto);
    object.prototype = proto;
    var result = new object();
    return object.prototype = void 0, result;
  };
}(), baseCreate_default = baseCreate;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copyArray.js
function copyArray(source, array) {
  var index = -1, length = source.length;
  for (array || (array = Array(length)); ++index < length; )
    array[index] = source[index];
  return array;
}
var copyArray_default = copyArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_defineProperty.js
var defineProperty = function() {
  try {
    var func = getNative_default(Object, "defineProperty");
    return func({}, "", {}), func;
  } catch (e) {
  }
}(), defineProperty_default = defineProperty;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayEach.js
function arrayEach(array, iteratee) {
  for (var index = -1, length = array == null ? 0 : array.length; ++index < length && iteratee(array[index], index, array) !== !1; )
    ;
  return array;
}
var arrayEach_default = arrayEach;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isIndex.js
var MAX_SAFE_INTEGER = 9007199254740991, reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  return length = length ?? MAX_SAFE_INTEGER, !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
var isIndex_default = isIndex;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssignValue.js
function baseAssignValue(object, key, value) {
  key == "__proto__" && defineProperty_default ? defineProperty_default(object, key, {
    configurable: !0,
    enumerable: !0,
    value,
    writable: !0
  }) : object[key] = value;
}
var baseAssignValue_default = baseAssignValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_assignValue.js
var objectProto4 = Object.prototype, hasOwnProperty3 = objectProto4.hasOwnProperty;
function assignValue(object, key, value) {
  var objValue = object[key];
  (!(hasOwnProperty3.call(object, key) && eq_default(objValue, value)) || value === void 0 && !(key in object)) && baseAssignValue_default(object, key, value);
}
var assignValue_default = assignValue;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copyObject.js
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  for (var index = -1, length = props.length; ++index < length; ) {
    var key = props[index], newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
    newValue === void 0 && (newValue = source[key]), isNew ? baseAssignValue_default(object, key, newValue) : assignValue_default(object, key, newValue);
  }
  return object;
}
var copyObject_default = copyObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isLength.js
var MAX_SAFE_INTEGER2 = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
}
var isLength_default = isLength;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArrayLike.js
function isArrayLike(value) {
  return value != null && isLength_default(value.length) && !isFunction_default(value);
}
var isArrayLike_default = isArrayLike;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isPrototype.js
var objectProto5 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto5;
  return value === proto;
}
var isPrototype_default = isPrototype;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseTimes.js
function baseTimes(n, iteratee) {
  for (var index = -1, result = Array(n); ++index < n; )
    result[index] = iteratee(index);
  return result;
}
var baseTimes_default = baseTimes;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsArguments.js
var argsTag = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
}
var baseIsArguments_default = baseIsArguments;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isArguments.js
var objectProto6 = Object.prototype, hasOwnProperty4 = objectProto6.hasOwnProperty, propertyIsEnumerable = objectProto6.propertyIsEnumerable, isArguments = baseIsArguments_default(function() {
  return arguments;
}()) ? baseIsArguments_default : function(value) {
  return isObjectLike_default(value) && hasOwnProperty4.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
}, isArguments_default = isArguments;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/stubFalse.js
function stubFalse() {
  return !1;
}
var stubFalse_default = stubFalse;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayLikeKeys.js
var import_isBuffer = __toModule(require_isBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsTypedArray.js
var argsTag2 = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag2 = "[object Function]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", weakMapTag = "[object WeakMap]", arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]", typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = !0;
typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = !1;
function baseIsTypedArray(value) {
  return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
}
var baseIsTypedArray_default = baseIsTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseUnary.js
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isTypedArray.js
var import_nodeUtil = __toModule(require_nodeUtil()), nodeIsTypedArray = import_nodeUtil.default && import_nodeUtil.default.isTypedArray, isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default, isTypedArray_default = isTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayLikeKeys.js
var objectProto7 = Object.prototype, hasOwnProperty5 = objectProto7.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && (0, import_isBuffer.default)(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
  for (var key in value)
    (inherited || hasOwnProperty5.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex_default(key, length))) && result.push(key);
  return result;
}
var arrayLikeKeys_default = arrayLikeKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_overArg.js
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}
var overArg_default = overArg;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeKeys.js
var nativeKeys = overArg_default(Object.keys, Object), nativeKeys_default = nativeKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseKeys.js
var objectProto8 = Object.prototype, hasOwnProperty6 = objectProto8.hasOwnProperty;
function baseKeys(object) {
  if (!isPrototype_default(object))
    return nativeKeys_default(object);
  var result = [];
  for (var key in Object(object))
    hasOwnProperty6.call(object, key) && key != "constructor" && result.push(key);
  return result;
}
var baseKeys_default = baseKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/keys.js
function keys(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object) : baseKeys_default(object);
}
var keys_default = keys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeKeysIn.js
function nativeKeysIn(object) {
  var result = [];
  if (object != null)
    for (var key in Object(object))
      result.push(key);
  return result;
}
var nativeKeysIn_default = nativeKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseKeysIn.js
var objectProto9 = Object.prototype, hasOwnProperty7 = objectProto9.hasOwnProperty;
function baseKeysIn(object) {
  if (!isObject_default(object))
    return nativeKeysIn_default(object);
  var isProto = isPrototype_default(object), result = [];
  for (var key in object)
    key == "constructor" && (isProto || !hasOwnProperty7.call(object, key)) || result.push(key);
  return result;
}
var baseKeysIn_default = baseKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/keysIn.js
function keysIn(object) {
  return isArrayLike_default(object) ? arrayLikeKeys_default(object, !0) : baseKeysIn_default(object);
}
var keysIn_default = keysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create"), nativeCreate_default = nativeCreate;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {}, this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  return this.size -= result ? 1 : 0, result;
}
var hashDelete_default = hashDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__", objectProto10 = Object.prototype, hasOwnProperty8 = objectProto10.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty8.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashHas.js
var objectProto11 = Object.prototype, hasOwnProperty9 = objectProto11.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty9.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  return this.size += this.has(key) ? 0 : 1, data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value, this;
}
var hashSet_default = hashSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype.delete = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [], this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array, key) {
  for (var length = array.length; length--; )
    if (eq_default(array[length][0], key))
      return length;
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype, splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0)
    return !1;
  var lastIndex = data.length - 1;
  return index == lastIndex ? data.pop() : splice.call(data, index, 1), --this.size, !0;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? (++this.size, data.push([key, value])) : data[index][1] = value, this;
}
var listCacheSet_default = listCacheSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype.delete = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map"), Map_default = Map2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0, this.__data__ = {
    hash: new Hash_default(),
    map: new (Map_default || ListCache_default)(),
    string: new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getMapData.js
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key).delete(key);
  return this.size -= result ? 1 : 0, result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  return data.set(key, value), this.size += data.size == size ? 0 : 1, this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  for (this.clear(); ++index < length; ) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype.delete = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayPush.js
function arrayPush(array, values) {
  for (var index = -1, length = values.length, offset = array.length; ++index < length; )
    array[offset + index] = values[index];
  return array;
}
var arrayPush_default = arrayPush;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getPrototype.js
var getPrototype = overArg_default(Object.getPrototypeOf, Object), getPrototype_default = getPrototype;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackClear.js
function stackClear() {
  this.__data__ = new ListCache_default(), this.size = 0;
}
var stackClear_default = stackClear;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackDelete.js
function stackDelete(key) {
  var data = this.__data__, result = data.delete(key);
  return this.size = data.size, result;
}
var stackDelete_default = stackDelete;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackGet.js
function stackGet(key) {
  return this.__data__.get(key);
}
var stackGet_default = stackGet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackHas.js
function stackHas(key) {
  return this.__data__.has(key);
}
var stackHas_default = stackHas;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_stackSet.js
var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache_default) {
    var pairs = data.__data__;
    if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1)
      return pairs.push([key, value]), this.size = ++data.size, this;
    data = this.__data__ = new MapCache_default(pairs);
  }
  return data.set(key, value), this.size = data.size, this;
}
var stackSet_default = stackSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Stack.js
function Stack(entries) {
  var data = this.__data__ = new ListCache_default(entries);
  this.size = data.size;
}
Stack.prototype.clear = stackClear_default;
Stack.prototype.delete = stackDelete_default;
Stack.prototype.get = stackGet_default;
Stack.prototype.has = stackHas_default;
Stack.prototype.set = stackSet_default;
var Stack_default = Stack;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssign.js
function baseAssign(object, source) {
  return object && copyObject_default(source, keys_default(source), object);
}
var baseAssign_default = baseAssign;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseAssignIn.js
function baseAssignIn(object, source) {
  return object && copyObject_default(source, keysIn_default(source), object);
}
var baseAssignIn_default = baseAssignIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var import_cloneBuffer = __toModule(require_cloneBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_arrayFilter.js
function arrayFilter(array, predicate) {
  for (var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = []; ++index < length; ) {
    var value = array[index];
    predicate(value, index, array) && (result[resIndex++] = value);
  }
  return result;
}
var arrayFilter_default = arrayFilter;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/stubArray.js
function stubArray() {
  return [];
}
var stubArray_default = stubArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getSymbols.js
var objectProto12 = Object.prototype, propertyIsEnumerable2 = objectProto12.propertyIsEnumerable, nativeGetSymbols = Object.getOwnPropertySymbols, getSymbols = nativeGetSymbols ? function(object) {
  return object == null ? [] : (object = Object(object), arrayFilter_default(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable2.call(object, symbol);
  }));
} : stubArray_default, getSymbols_default = getSymbols;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copySymbols.js
function copySymbols(source, object) {
  return copyObject_default(source, getSymbols_default(source), object);
}
var copySymbols_default = copySymbols;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getSymbolsIn.js
var nativeGetSymbols2 = Object.getOwnPropertySymbols, getSymbolsIn = nativeGetSymbols2 ? function(object) {
  for (var result = []; object; )
    arrayPush_default(result, getSymbols_default(object)), object = getPrototype_default(object);
  return result;
} : stubArray_default, getSymbolsIn_default = getSymbolsIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_copySymbolsIn.js
function copySymbolsIn(source, object) {
  return copyObject_default(source, getSymbolsIn_default(source), object);
}
var copySymbolsIn_default = copySymbolsIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseGetAllKeys.js
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray_default(object) ? result : arrayPush_default(result, symbolsFunc(object));
}
var baseGetAllKeys_default = baseGetAllKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getAllKeys.js
function getAllKeys(object) {
  return baseGetAllKeys_default(object, keys_default, getSymbols_default);
}
var getAllKeys_default = getAllKeys;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getAllKeysIn.js
function getAllKeysIn(object) {
  return baseGetAllKeys_default(object, keysIn_default, getSymbolsIn_default);
}
var getAllKeysIn_default = getAllKeysIn;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_DataView.js
var DataView = getNative_default(root_default, "DataView"), DataView_default = DataView;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Promise.js
var Promise2 = getNative_default(root_default, "Promise"), Promise_default = Promise2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Set.js
var Set2 = getNative_default(root_default, "Set"), Set_default = Set2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_getTag.js
var mapTag2 = "[object Map]", objectTag2 = "[object Object]", promiseTag = "[object Promise]", setTag2 = "[object Set]", weakMapTag2 = "[object WeakMap]", dataViewTag2 = "[object DataView]", dataViewCtorString = toSource_default(DataView_default), mapCtorString = toSource_default(Map_default), promiseCtorString = toSource_default(Promise_default), setCtorString = toSource_default(Set_default), weakMapCtorString = toSource_default(WeakMap_default), getTag = baseGetTag_default;
(DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag2 || Map_default && getTag(new Map_default()) != mapTag2 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag2 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) && (getTag = function(value) {
  var result = baseGetTag_default(value), Ctor = result == objectTag2 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
  if (ctorString)
    switch (ctorString) {
      case dataViewCtorString:
        return dataViewTag2;
      case mapCtorString:
        return mapTag2;
      case promiseCtorString:
        return promiseTag;
      case setCtorString:
        return setTag2;
      case weakMapCtorString:
        return weakMapTag2;
    }
  return result;
});
var getTag_default = getTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneArray.js
var objectProto13 = Object.prototype, hasOwnProperty10 = objectProto13.hasOwnProperty;
function initCloneArray(array) {
  var length = array.length, result = new array.constructor(length);
  return length && typeof array[0] == "string" && hasOwnProperty10.call(array, "index") && (result.index = array.index, result.input = array.input), result;
}
var initCloneArray_default = initCloneArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_Uint8Array.js
var Uint8Array2 = root_default.Uint8Array, Uint8Array_default = Uint8Array2;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneArrayBuffer.js
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  return new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer)), result;
}
var cloneArrayBuffer_default = cloneArrayBuffer;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneDataView.js
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var cloneDataView_default = cloneDataView;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneRegExp.js
var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  return result.lastIndex = regexp.lastIndex, result;
}
var cloneRegExp_default = cloneRegExp;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneSymbol.js
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
var cloneSymbol_default = cloneSymbol;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_cloneTypedArray.js
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var cloneTypedArray_default = cloneTypedArray;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneByTag.js
var boolTag2 = "[object Boolean]", dateTag2 = "[object Date]", mapTag3 = "[object Map]", numberTag2 = "[object Number]", regexpTag2 = "[object RegExp]", setTag3 = "[object Set]", stringTag2 = "[object String]", symbolTag = "[object Symbol]", arrayBufferTag2 = "[object ArrayBuffer]", dataViewTag3 = "[object DataView]", float32Tag2 = "[object Float32Array]", float64Tag2 = "[object Float64Array]", int8Tag2 = "[object Int8Array]", int16Tag2 = "[object Int16Array]", int32Tag2 = "[object Int32Array]", uint8Tag2 = "[object Uint8Array]", uint8ClampedTag2 = "[object Uint8ClampedArray]", uint16Tag2 = "[object Uint16Array]", uint32Tag2 = "[object Uint32Array]";
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag2:
      return cloneArrayBuffer_default(object);
    case boolTag2:
    case dateTag2:
      return new Ctor(+object);
    case dataViewTag3:
      return cloneDataView_default(object, isDeep);
    case float32Tag2:
    case float64Tag2:
    case int8Tag2:
    case int16Tag2:
    case int32Tag2:
    case uint8Tag2:
    case uint8ClampedTag2:
    case uint16Tag2:
    case uint32Tag2:
      return cloneTypedArray_default(object, isDeep);
    case mapTag3:
      return new Ctor();
    case numberTag2:
    case stringTag2:
      return new Ctor(object);
    case regexpTag2:
      return cloneRegExp_default(object);
    case setTag3:
      return new Ctor();
    case symbolTag:
      return cloneSymbol_default(object);
  }
}
var initCloneByTag_default = initCloneByTag;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_initCloneObject.js
function initCloneObject(object) {
  return typeof object.constructor == "function" && !isPrototype_default(object) ? baseCreate_default(getPrototype_default(object)) : {};
}
var initCloneObject_default = initCloneObject;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var import_isBuffer2 = __toModule(require_isBuffer());

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsMap.js
var mapTag4 = "[object Map]";
function baseIsMap(value) {
  return isObjectLike_default(value) && getTag_default(value) == mapTag4;
}
var baseIsMap_default = baseIsMap;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isMap.js
var import_nodeUtil2 = __toModule(require_nodeUtil()), nodeIsMap = import_nodeUtil2.default && import_nodeUtil2.default.isMap, isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default, isMap_default = isMap;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseIsSet.js
var setTag4 = "[object Set]";
function baseIsSet(value) {
  return isObjectLike_default(value) && getTag_default(value) == setTag4;
}
var baseIsSet_default = baseIsSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isSet.js
var import_nodeUtil3 = __toModule(require_nodeUtil()), nodeIsSet = import_nodeUtil3.default && import_nodeUtil3.default.isSet, isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default, isSet_default = isSet;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseClone.js
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4, argsTag3 = "[object Arguments]", arrayTag2 = "[object Array]", boolTag3 = "[object Boolean]", dateTag3 = "[object Date]", errorTag2 = "[object Error]", funcTag3 = "[object Function]", genTag2 = "[object GeneratorFunction]", mapTag5 = "[object Map]", numberTag3 = "[object Number]", objectTag3 = "[object Object]", regexpTag3 = "[object RegExp]", setTag5 = "[object Set]", stringTag3 = "[object String]", symbolTag2 = "[object Symbol]", weakMapTag3 = "[object WeakMap]", arrayBufferTag3 = "[object ArrayBuffer]", dataViewTag4 = "[object DataView]", float32Tag3 = "[object Float32Array]", float64Tag3 = "[object Float64Array]", int8Tag3 = "[object Int8Array]", int16Tag3 = "[object Int16Array]", int32Tag3 = "[object Int32Array]", uint8Tag3 = "[object Uint8Array]", uint8ClampedTag3 = "[object Uint8ClampedArray]", uint16Tag3 = "[object Uint16Array]", uint32Tag3 = "[object Uint32Array]", cloneableTags = {};
cloneableTags[argsTag3] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag5] = cloneableTags[numberTag3] = cloneableTags[objectTag3] = cloneableTags[regexpTag3] = cloneableTags[setTag5] = cloneableTags[stringTag3] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = !0;
cloneableTags[errorTag2] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = !1;
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
  if (customizer && (result = object ? customizer(value, key, object, stack) : customizer(value)), result !== void 0)
    return result;
  if (!isObject_default(value))
    return value;
  var isArr = isArray_default(value);
  if (isArr) {
    if (result = initCloneArray_default(value), !isDeep)
      return copyArray_default(value, result);
  } else {
    var tag = getTag_default(value), isFunc = tag == funcTag3 || tag == genTag2;
    if ((0, import_isBuffer2.default)(value))
      return (0, import_cloneBuffer.default)(value, isDeep);
    if (tag == objectTag3 || tag == argsTag3 || isFunc && !object) {
      if (result = isFlat || isFunc ? {} : initCloneObject_default(value), !isDeep)
        return isFlat ? copySymbolsIn_default(value, baseAssignIn_default(result, value)) : copySymbols_default(value, baseAssign_default(result, value));
    } else {
      if (!cloneableTags[tag])
        return object ? value : {};
      result = initCloneByTag_default(value, tag, isDeep);
    }
  }
  stack || (stack = new Stack_default());
  var stacked = stack.get(value);
  if (stacked)
    return stacked;
  stack.set(value, result), isSet_default(value) ? value.forEach(function(subValue) {
    result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
  }) : isMap_default(value) && value.forEach(function(subValue, key2) {
    result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  });
  var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default, props = isArr ? void 0 : keysFunc(value);
  return arrayEach_default(props || value, function(subValue, key2) {
    props && (key2 = subValue, subValue = value[key2]), assignValue_default(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
  }), result;
}
var baseClone_default = baseClone;

// node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/cloneDeep.js
var CLONE_DEEP_FLAG2 = 1, CLONE_SYMBOLS_FLAG2 = 4;
function cloneDeep(value) {
  return baseClone_default(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG2);
}
var cloneDeep_default = cloneDeep;

// src/lib/PackageJSON.ts
var semver = __toModule(require_semver2()), AUTO_DEPENDENCIES = ["react", "react-dom", "prop-types", "object-assign"], dependencyKeys = [
  "dependencies",
  "optionalDependencies",
  "peerDependencies",
  "devDependencies"
], eachIteratorValue = ["", ""], PackageJSON = class {
  constructor() {
    this.allDependencies = new Map();
  }
  *eachDependency() {
    for (let depKey of dependencyKeys) {
      let deps = this[depKey];
      if (deps)
        for (let key in deps)
          eachIteratorValue[0] = key, eachIteratorValue[1] = deps[key], yield eachIteratorValue;
    }
  }
  normalizeDependencies() {
    for (let depKey of dependencyKeys) {
      let deps = this[depKey];
      if (deps)
        for (let moduleId in deps) {
          let version = deps[moduleId];
          version = version.replace(/\^/gm, ""), semver.clean(version, !1) ? this.allDependencies.set(moduleId, `${moduleId}@${semver.clean(version, !1)}`) : this.allDependencies.set(moduleId, moduleId);
        }
    }
    for (let autodep of AUTO_DEPENDENCIES)
      this.allDependencies.has(autodep) || this.allDependencies.set(autodep, autodep);
  }
  static parse(json, ClassName = PackageJSON) {
    let pkg = new ClassName();
    return pkg.process(json, ClassName), pkg;
  }
  process(json, ClassName = PackageJSON) {
    let parsed = JSON.parse(json);
    return typeof parsed.handle != "undefined" && delete parsed.handle, parsed.run = ClassName.normalizeRun(parsed.run || {}), parsed.esbuild = ClassName.normalizeESBuild(parsed.esbuild || {}), Object.assign(this, parsed), this.normalizeDependencies(), this;
  }
  static normalizeRun(run) {
    return typeof run.router == "string" && run.router ? (run.router = run.router.toLowerCase().trim(), run.isRouterUnset = !1) : (run.isRouterUnset = !0, run.router = ""), run;
  }
  toJSON() {
    let json = cloneDeep_default(this);
    return delete json.run.isRouterUnset, delete json.allDependencies, json;
  }
  static normalizeESBuild(esbuild) {
    return {};
  }
}, PackageJSONFile = class extends PackageJSON {
  constructor() {
    super();
  }
  static async fromHandle(handle) {
    let pkg = PackageJSONFile.parse(await (await handle.getFile()).text());
    return pkg.handle = handle, pkg;
  }
  async save() {
    let perm = await this.handle.createWritable({
      keepExistingData: !1
    }), json = this.toJSON();
    console.log(json);
    let text = JSON.stringify(json, null, 2), writer = perm.getWriter();
    await writer.write(text), await writer.close();
  }
  process(json, ClassName = PackageJSON) {
    return super.process(json, PackageJSONFile);
  }
  async reload() {
    this.process(await (await this.handle.getFile()).text(), PackageJSONFile);
  }
  static parse(json) {
    return super.parse(json, PackageJSONFile);
  }
  toJSON() {
    let json = super.toJSON();
    return delete json.handle, json;
  }
};

// node_modules/.pnpm/@jarred/htmlbuild@1.0.2/node_modules/@jarred/htmlbuild/index.mjs
var serializer = __toModule(require_lib3()), import_htmlparser2 = __toModule(require_lib6()), path2 = __toModule(require_path_browserify()), HTML2ESBuild = class {
  constructor() {
    this.scripts = new Map(), this.links = new Map();
  }
  generate(source, resolve) {
    let dom = (0, import_htmlparser2.parseDocument)(source);
    this.dom = dom;
    let config = {
      bundle: !0,
      metafile: !0,
      entryPoints: []
    }, src = "";
    for (let script of import_htmlparser2.DomUtils.getElementsByTagName("script", dom))
      src = script.attribs.src, src && !src.includes("://") && (src = resolve(src), this.scripts.set(src, script), config.entryPoints.push(src));
    for (let link of import_htmlparser2.DomUtils.getElementsByTagName("link", dom))
      (!link.attribs.rel || link.attribs.rel === "stylesheet") && link.attribs.href && !link.attribs.href.includes("://") && (src = resolve(link.attribs.href), this.links.set(src, link), config.entryPoints.push(src));
    return this.config = config, config;
  }
  renderToString(build2, config = this.config, resolveFrom, resolveTo) {
    if (!build2.metafile)
      throw "Build is missing metafile.";
    let {links, scripts} = this, meta = build2.metafile, cssOutputs = new Map(), file;
    for (let output in meta.outputs)
      file = meta.outputs[output], path2.extname(output) === ".css" && cssOutputs.set(output, file);
    let stylesheetsToInsert = new Map(), prefix = config.publicPath ? config.publicPath : "";
    for (let output in meta.outputs) {
      if (file = meta.outputs[output], !file.entryPoint)
        continue;
      let entryPoint = resolveFrom(file.entryPoint);
      if (scripts.has(entryPoint)) {
        let ext = path2.extname(output), cssName = output.substring(0, output.length - ext.length) + ".css", script = scripts.get(entryPoint);
        cssOutputs.has(cssName) && (!cssOutputs.get(cssName).entryPoint || !links.has(cssOutputs.get(cssName).entryPoint)) && stylesheetsToInsert.set(cssName, script), script.attribs.src = resolveTo(output);
      } else
        links.has(entryPoint) && (links.get(entryPoint).attribs.href = resolveTo(output));
    }
    for (let [stylesheetName, above] of stylesheetsToInsert.entries()) {
      var parser = new import_htmlparser2.Parser(new import_htmlparser2.DomHandler((err, elems) => {
        import_htmlparser2.DomUtils.prepend(above, elems[0]);
      }));
      parser.write(`<link rel="stylesheet" href="${resolveTo(stylesheetName)}" />`), parser.end();
    }
    return serializer.default(this.dom, {});
  }
};

// src/lib/Route.ts
var path3 = __toModule(require_path_browserify()), Route = class {
  constructor() {
    this.entryPoints = [];
    this.absWorkingDirectory = "";
    this.builder = new HTML2ESBuild();
    this.outDestination = "/";
    this.resolveFrom = (..._path) => path3.join(this.absWorkingDirectory, ..._path);
    this.resolveTo = (..._path) => path3.join(this.outDestination, ..._path);
  }
  static from(root2, pathname) {
    let route = new Route();
    return route.root = root2, route.absWorkingDirectory = pathname.endsWith(".html") ? path3.join(pathname, "../") : pathname, route;
  }
  async generateConfig(file) {
    let {entryPoints} = this.builder.generate(await file.text(), this.resolveFrom);
    this.entryPoints = entryPoints;
  }
  renderToString(result, config) {
    return this.builder.renderToString(result, config, this.resolveFrom, this.resolveTo);
  }
}, FilesystemRouter = class {
  constructor(packageRoot, pagesRoot) {
    this.packageRoot = packageRoot, this.pagesRoot = pagesRoot;
  }
  async routeFor(file, pathname) {
    let route = Route.from(this.packageRoot, pathname);
    return await route.generateConfig(file), route;
  }
  async resolve(pathname) {
    let {pagesRoot: fs} = this, target = pathname, file;
    if (pathname.indexOf("//") > -1 && (pathname = pathname.replace(/\/+/g, "/")), pathname.endsWith("/"))
      return target = pathname.slice(0, -1) + ".html", file = await fs.nativeFile(target), file ? await this.routeFor(file, target) : (target = pathname + "index.html", file = await fs.nativeFile(target), file ? await this.routeFor(file, target) : null);
    if (pathname.endsWith(".html") || (target = pathname + ".html"), file = await fs.nativeFile(target), file)
      return await this.routeFor(file, target);
    if (target = path3.normalize(path3.join(pathname, "../")), target.startsWith(".."))
      return null;
    for (let _result of await fs.readdir(target)) {
      let result = _result;
      if (result.kind === "file" && result.name.startsWith("[") && result.name.endsWith("].html")) {
        file = result;
        break;
      }
    }
    return file ? await this.routeFor(file, target) : null;
  }
}, SinglePageAppRouter = class extends FilesystemRouter {
  constructor() {
    super(...arguments);
    this.destination = "";
  }
  async resolve(pathname) {
    let {pagesRoot: fs} = this;
    return await this.routeFor(await fs.nativeFile(this.destination), "/");
  }
}, RouterType;
(function(RouterType2) {
  RouterType2.unknown = "", RouterType2.spa = "spa", RouterType2.filesystem = "filesystem";
})(RouterType || (RouterType = {}));

// src/lib/router/fs-native.ts
var path4 = __toModule(require_path_browserify()), NativeFS = class {
  constructor(root2) {
    this.relativePath = "/";
    this.handleCache = new Map();
    this.root = root2;
  }
  async nativeFile(_path) {
    if (this.handleCache.has(_path))
      return await this.handleCache.get(_path).getFile();
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), await handle.getFile()) : null;
  }
  async fileHandleFor(_path) {
    if (this.handleCache.has(_path))
      return this.handleCache.get(_path);
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), handle) : null;
  }
  async exists(_path) {
    if (this.handleCache.has(_path))
      return !0;
    let handle = await this.resolveFileHandle(_path);
    return handle ? (this.handleCache.set(_path, handle), !0) : !1;
  }
  async resolveFileHandle(__path, from = this.root) {
    let _path = __path;
    (!path4.isAbsolute(_path) || !_path.startsWith("/")) && (_path = path4.join("/", _path)), _path = path4.normalize(_path);
    let component = _path;
    for (; _path.includes("/") && _path.length > 1 && from; )
      try {
        if (_path = _path.startsWith("/") ? _path.substring(1) : _path, component = _path.substring(0, _path.indexOf("/")), _path.length - component.length > 0) {
          if (_path = _path.substring(component.length), !_path.includes("/")) {
            let hasMatch = !1;
            for await (let filename of from.keys())
              if (filename === _path) {
                hasMatch = !0;
                break;
              }
            return hasMatch ? await from.getFileHandle(_path) : null;
          }
          from = await from.getDirectoryHandle(component);
        } else {
          let hasMatch = !1;
          for await (let filename of from.keys())
            if (filename === component) {
              hasMatch = !0;
              break;
            }
          return hasMatch ? await from.getFileHandle(component) : null;
        }
      } catch (exception) {
        return console.error(__path, exception), null;
      }
    return null;
  }
  async resolveDirectoryHandle(_path, from = this.root) {
    (!path4.isAbsolute(_path) || !_path.startsWith("/")) && (_path = path4.join("/", _path)), _path = path4.normalize(_path);
    let component = _path;
    for (; _path.includes("/") && _path.length > 1 && from; )
      try {
        if (component = _path.substring(0, _path.indexOf("/")), _path.length - component.length > 0)
          _path = _path.substring(component.length), from = await from.getDirectoryHandle(component);
        else
          return await from.getDirectoryHandle(component);
      } catch (exception) {
        return console.error(exception), null;
      }
    return null;
  }
  async *readdir(_path) {
    let dir = await this.resolveDirectoryHandle(_path);
    !dir || (yield* dir.values());
  }
  async readFile(_path, encoding = "binary") {
    switch (encoding) {
      case "utf8":
        return this.readFileText(_path);
      case "binary":
        return this.readFileBinary(_path);
    }
  }
  async readFileBinary(_path) {
    return await (await this.nativeFile(_path)).arrayBuffer();
  }
  async readFileText(_path) {
    return await (await this.nativeFile(_path)).text();
  }
  async createReadStream(_path) {
    return (await this.nativeFile(_path)).stream();
  }
  realpath(_path) {
    return path4.normalize(_path);
  }
};

// src/lib/StoredPackage.ts
var permissionMode = {mode: "read"}, StoredPackage = class {
  constructor() {
    this.routerType = RouterType.unknown;
  }
  toRecord() {
    return {
      id: this.id,
      lastBuild: this.lastBuild || null,
      handle: this.handle,
      staticHandle: this.staticHandle,
      routerType: this.routerType
    };
  }
  static fromRecord(record) {
    let stored = new StoredPackage();
    return Object.assign(stored, record), stored.root = record.handle ? new NativeFS(record.handle) : null, stored.static = record.staticHandle ? new NativeFS(record.staticHandle) : null, stored;
  }
  static async fromJSON(opts) {
    let pkg = new StoredPackage();
    return Object.assign(pkg, opts), pkg.root = opts.handle ? new NativeFS(opts.handle) : null, pkg.static = opts.staticHandle ? new NativeFS(opts.staticHandle) : null, pkg;
  }
  async load() {
    await this.loadPackageJSON(), this.loadRouter();
  }
  loadRouter() {
    path5.extname(this.pkg.run?.router) === ".html" ? (this.routerType = RouterType.spa, this.router = new SinglePageAppRouter(this.root, this.static), this.router.destination = path5.basename(this.pkg.run.router)) : (this.routerType = RouterType.filesystem, this.router = new FilesystemRouter(this.root, this.static));
  }
  async loadPackageJSON() {
    let dir = this.root;
    if (await dir.root.queryPermission(permissionMode) !== "granted") {
      let error = new PackagerPermissionError(ErrorCode.requirePermission);
      throw error.directoryName = dir.root.name, error;
    }
    let packageJSONFileHandle;
    try {
      packageJSONFileHandle = await dir.fileHandleFor("package.json");
    } catch (exception) {
      throw PackagerError.with(ErrorCode.errorFetchingPackageJSON, exception);
    }
    this.pkg = await PackageJSONFile.fromHandle(packageJSONFileHandle);
  }
  loadConfig() {
  }
  normalizeURL(url) {
    return !url.startsWith("/") || !path5.isAbsolute(url) ? path5.normalize(path5.join("/" + url)) : path5.normalize(url);
  }
  async resolveStaticFile(url) {
    let file;
    if (file = await this.static.nativeFile(url), console.log(url), !file) {
      let headers2 = new Headers();
      return headers2.set("Cache-Control", "private"), headers2.set("Content-Type", "text/plain"), new Response(new Blob([`404 Not Found \u2013 ${url}
`]), {
        status: 404,
        headers: headers2
      });
    }
    let headers = new Headers();
    return headers.set("Content-Type", import_lite2.default.getType(file.name).toString()), typeof file.size == "number" && headers.set("Content-Length", file.size.toString()), new Response(file, {headers, status: 200});
  }
};

// src/lib/Database.ts
var Database = class {
  async load() {
    this.db || (this.db = await openDB("handles", 7, {
      upgrade(database, oldVersion, newVersion, transaction) {
        database.objectStoreNames.contains("packages") || database.createObjectStore("packages"), database.objectStoreNames.contains("dirs") || database.createObjectStore("dirs");
      }
    }));
  }
  async savePackage(pkg) {
    await this.load(), await this.db.put("packages", pkg.toRecord(), pkg.id);
  }
  async saveDir(directory) {
    await this.load(), await this.db.put("dirs", {directory, id: getPackageID()}, getPackageID());
  }
  async loadDir() {
    return await this.load(), (await this.db.get("dirs", getPackageID()))?.directory || null;
  }
  async loadPackage(id) {
    await this.load();
    let rec = await this.db.get("packages", id);
    return rec ? StoredPackage.fromRecord(rec) : null;
  }
};

// src/lib/rpc.ts
var Method;
(function(Method2) {
  Method2[Method2.bundle = 0] = "bundle", Method2[Method2.output = 1] = "output", Method2[Method2.bundleById = 2] = "bundleById", Method2[Method2.setPort = 3] = "setPort";
})(Method || (Method = {}));

// dist/_dev_/worker.jsurl
var worker_default = "/_dev_/worker.UXCYUCI7.jsurl";

// src/lib/Packager.ts
var Packager = class {
  constructor() {
    this._onMessage = (event) => {
      switch (event.data.method) {
        case Method.output: {
          this.onBundleComplete(event.data.params);
          break;
        }
        default:
          throw "Unknown message from worker.";
      }
    };
  }
  start() {
    let worker = new SharedWorker(worker_default, {type: "module"});
    worker.port.addEventListener("message", this._onMessage), worker.port.addEventListener("error", (message) => console.error(message.error)), this.port = worker.port, worker.port.start();
  }
  bundleById(id, origin) {
    this.port.postMessage({
      method: Method.bundleById,
      params: {
        origin,
        id
      }
    });
  }
  bundle(handle, origin) {
    this.port.postMessage({
      method: Method.bundle,
      params: {
        handle,
        origin
      }
    });
  }
};

// src/lib/InitialPackager.ts
var InitialPackager = class extends Packager {
  constructor() {
    super(...arguments);
    this.database = new Database();
  }
  async loadStoredPackage() {
    if (await this.database.load(), !await this.database.loadPackage(getPackageID()))
      return null;
  }
  async verify(handle) {
    return !0;
  }
};

// src/icons/GearIcon.tsx
var React = __toModule(require_react());
function GearIcon(props) {
  return /* @__PURE__ */ React.createElement("svg", {
    viewBox: "0 0 64 64",
    xmlns: "http://www.w3.org/2000/svg",
    ...props
  }, /* @__PURE__ */ React.createElement("path", {
    d: "M57.284 34.228l-3.988 1.14c-.36.105-.632.404-.702.773a20.72 20.72 0 01-.701 2.599 1 1 0 00.221 1.022l2.888 2.984c.31.321.37.81.148 1.197l-1.245 2.156a1 1 0 01-1.11.47l-4.05-1.014a1 1 0 00-.995.318 21.207 21.207 0 01-1.886 1.891 1 1 0 00-.318.994l1.013 4.047a1 1 0 01-.47 1.11l-2.157 1.245a1 1 0 01-1.196-.148l-3-2.901a1 1 0 00-1.021-.223c-.845.29-1.707.524-2.582.703-.368.07-.666.341-.772.701l-1.143 4.003c-.123.43-.516.726-.963.726h-2.49c-.447 0-.84-.296-.962-.726l-1.143-4.002a1.001 1.001 0 00-.774-.702 20.764 20.764 0 01-2.587-.696 1 1 0 00-1.02.222l-2.994 2.896a1 1 0 01-1.196.147l-2.157-1.245a1.001 1.001 0 01-.47-1.11l1.015-4.052c.09-.366-.033-.75-.318-.996a21.143 21.143 0 01-1.894-1.884 1 1 0 00-.994-.316l-4.044 1.013a1.001 1.001 0 01-1.11-.47l-1.246-2.157a1.001 1.001 0 01.148-1.197l2.893-2.99a1 1 0 00.222-1.023 20.774 20.774 0 01-.707-2.592 1.001 1.001 0 00-.702-.772l-3.989-1.14a1 1 0 01-.726-.963v-2.49a1 1 0 01.726-.963l3.989-1.14c.36-.105.631-.404.702-.773.177-.88.411-1.749.701-2.599a1 1 0 00-.222-1.022L9.02 21.296c-.311-.322-.371-.81-.148-1.197l1.245-2.156a1.001 1.001 0 011.11-.47l4.05 1.014a1 1 0 00.995-.318 21.19 21.19 0 011.886-1.891 1 1 0 00.318-.994l-1.014-4.047a1 1 0 01.47-1.11l2.157-1.245a1.001 1.001 0 011.196.148l3 2.902a1 1 0 001.022.222c.844-.29 1.706-.524 2.58-.703.37-.07.667-.341.773-.701l1.143-4.003c.123-.43.516-.726.963-.726h2.49c.447 0 .84.297.962.726l1.144 4.002c.105.36.404.632.773.702.877.176 1.74.409 2.587.696a1 1 0 001.021-.222l2.993-2.895a1 1 0 011.197-.148l2.156 1.245a1 1 0 01.47 1.11l-1.014 4.052a1 1 0 00.318.996c.67.587 1.303 1.216 1.894 1.884a1 1 0 00.993.316l4.045-1.012a1 1 0 011.11.47l1.244 2.156a1 1 0 01-.147 1.197l-2.893 2.99a1 1 0 00-.222 1.023c.291.848.527 1.714.707 2.592.07.369.341.667.701.773l3.99 1.14a1 1 0 01.725.962v2.49a1 1 0 01-.725.962zM22.642 19.795a.506.506 0 00-.753-.144c-6.832 5.563-7.86 15.612-2.296 22.444.686.841 1.455 1.61 2.296 2.296a.506.506 0 00.753-.145l5.76-9.976a4.5 4.5 0 000-4.5zm9.368-3.775a15.959 15.959 0 00-5.666 1.033.503.503 0 00-.25.721l5.771 9.996a4.5 4.5 0 003.898 2.25h11.525a.506.506 0 00.502-.58 15.993 15.993 0 00-15.78-13.42zm15.278 18H35.763a4.5 4.5 0 00-3.897 2.25l-5.771 9.996a.503.503 0 00.25.721c8.264 3.124 17.496-1.043 20.62-9.308.377-.996.653-2.028.825-3.079a.506.506 0 00-.502-.58z",
    fillRule: "evenodd"
  }));
}

// docs/PackageJSONEditor.tsx
var React5 = __toModule(require_react());

// node_modules/.pnpm/react-portal@4.2.1_react@17.0.1/node_modules/react-portal/es/PortalCompat.js
var import_react_dom3 = __toModule(require_react_dom());

// node_modules/.pnpm/react-portal@4.2.1_react@17.0.1/node_modules/react-portal/es/Portal.js
var import_react = __toModule(require_react()), import_prop_types = __toModule(require_prop_types()), import_react_dom = __toModule(require_react_dom());

// node_modules/.pnpm/react-portal@4.2.1_react@17.0.1/node_modules/react-portal/es/utils.js
var canUseDOM = !!(typeof window != "undefined" && window.document && window.document.createElement);

// node_modules/.pnpm/react-portal@4.2.1_react@17.0.1/node_modules/react-portal/es/Portal.js
var _createClass = function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
  };
}();
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn(self2, call) {
  if (!self2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return call && (typeof call == "object" || typeof call == "function") ? call : self2;
}
function _inherits(subClass, superClass) {
  if (typeof superClass != "function" && superClass !== null)
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: !1, writable: !0, configurable: !0}}), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}
var Portal = function(_React$Component) {
  _inherits(Portal4, _React$Component);
  function Portal4() {
    return _classCallCheck(this, Portal4), _possibleConstructorReturn(this, (Portal4.__proto__ || Object.getPrototypeOf(Portal4)).apply(this, arguments));
  }
  return _createClass(Portal4, [{
    key: "componentWillUnmount",
    value: function() {
      this.defaultNode && document.body.removeChild(this.defaultNode), this.defaultNode = null;
    }
  }, {
    key: "render",
    value: function() {
      return canUseDOM ? (!this.props.node && !this.defaultNode && (this.defaultNode = document.createElement("div"), document.body.appendChild(this.defaultNode)), import_react_dom.default.createPortal(this.props.children, this.props.node || this.defaultNode)) : null;
    }
  }]), Portal4;
}(import_react.default.Component);
Portal.propTypes = {
  children: import_prop_types.default.node.isRequired,
  node: import_prop_types.default.any
};
var Portal_default = Portal;

// node_modules/.pnpm/react-portal@4.2.1_react@17.0.1/node_modules/react-portal/es/LegacyPortal.js
var import_react2 = __toModule(require_react()), import_react_dom2 = __toModule(require_react_dom()), import_prop_types2 = __toModule(require_prop_types()), _createClass2 = function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
  };
}();
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor))
    throw new TypeError("Cannot call a class as a function");
}
function _possibleConstructorReturn2(self2, call) {
  if (!self2)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return call && (typeof call == "object" || typeof call == "function") ? call : self2;
}
function _inherits2(subClass, superClass) {
  if (typeof superClass != "function" && superClass !== null)
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, enumerable: !1, writable: !0, configurable: !0}}), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}
var Portal2 = function(_React$Component) {
  _inherits2(Portal4, _React$Component);
  function Portal4() {
    return _classCallCheck2(this, Portal4), _possibleConstructorReturn2(this, (Portal4.__proto__ || Object.getPrototypeOf(Portal4)).apply(this, arguments));
  }
  return _createClass2(Portal4, [{
    key: "componentDidMount",
    value: function() {
      this.renderPortal();
    }
  }, {
    key: "componentDidUpdate",
    value: function(props) {
      this.renderPortal();
    }
  }, {
    key: "componentWillUnmount",
    value: function() {
      import_react_dom2.default.unmountComponentAtNode(this.defaultNode || this.props.node), this.defaultNode && document.body.removeChild(this.defaultNode), this.defaultNode = null, this.portal = null;
    }
  }, {
    key: "renderPortal",
    value: function(props) {
      !this.props.node && !this.defaultNode && (this.defaultNode = document.createElement("div"), document.body.appendChild(this.defaultNode));
      var children = this.props.children;
      typeof this.props.children.type == "function" && (children = import_react2.default.cloneElement(this.props.children)), this.portal = import_react_dom2.default.unstable_renderSubtreeIntoContainer(this, children, this.props.node || this.defaultNode);
    }
  }, {
    key: "render",
    value: function() {
      return null;
    }
  }]), Portal4;
}(import_react2.default.Component), LegacyPortal_default = Portal2;
Portal2.propTypes = {
  children: import_prop_types2.default.node.isRequired,
  node: import_prop_types2.default.any
};

// node_modules/.pnpm/react-portal@4.2.1_react@17.0.1/node_modules/react-portal/es/PortalCompat.js
var Portal3 = void 0;
import_react_dom3.default.createPortal ? Portal3 = Portal_default : Portal3 = LegacyPortal_default;
var PortalCompat_default = Portal3;

// src/icons/Folder.tsx
var React4 = __toModule(require_react()), Folder = (props) => /* @__PURE__ */ React4.createElement("svg", {
  viewBox: "0 0 64 64",
  xmlns: "http://www.w3.org/2000/svg",
  ...props
}, /* @__PURE__ */ React4.createElement("path", {
  d: "M56.011 28.174l-1.623 21.077a3.002 3.002 0 01-2.995 2.77H12.649a3.003 3.003 0 01-2.995-2.77L8.03 28.174a2.001 2.001 0 011.997-2.153h43.988a2.001 2.001 0 011.997 2.153zm-1.99-8.153v3a1 1 0 01-1 1h-42a1 1 0 01-1-1v-9a2 2 0 012-2h11.343a4 4 0 012.828 1.172l3.657 3.656a4 4 0 002.829 1.172H52.02a2 2 0 012 2z",
  fillRule: "evenodd",
  fill: "currentColor"
}));

// docs/PackageJSONEditor.tsx
var PropertyBindingType;
(function(PropertyBindingType2) {
  PropertyBindingType2[PropertyBindingType2.router = 0] = "router";
})(PropertyBindingType || (PropertyBindingType = {}));
var QuoteLiteral = ({}) => /* @__PURE__ */ React5.createElement("span", {
  className: "CodeBox-token CodeBox-token--Quote"
}, '"'), PropertyName = ({children}) => /* @__PURE__ */ React5.createElement("span", {
  className: "CodeBox-token CodeBox-token--PropertyName"
}, children), StringKey = ({name}) => /* @__PURE__ */ React5.createElement("div", {
  className: "StringKey"
}, /* @__PURE__ */ React5.createElement(QuoteLiteral, null), /* @__PURE__ */ React5.createElement(PropertyName, null, `${name}`), /* @__PURE__ */ React5.createElement(QuoteLiteral, null), /* @__PURE__ */ React5.createElement(Colon, null)), Colon = ({}) => /* @__PURE__ */ React5.createElement("span", {
  className: "CodeBox-token CodeBox-token--Colon"
}, ":"), OpeningBrace = ({}) => /* @__PURE__ */ React5.createElement("span", {
  className: "CodeBox-token CodeBox-token--OpeningBrace"
}, "{"), ClosingBrace = ({}) => /* @__PURE__ */ React5.createElement("span", {
  className: "CodeBox-token CodeBox-token--ClosingBrace"
}, "}"), AutoCompleter = React5.forwardRef((props, ref) => {
  let _ref = React5.useRef();
  return React5.useImperativeHandle(ref, () => _ref), React5.useLayoutEffect(() => {
    _ref.current.innerText = props.defaultValue || "";
  }, [_ref, props.defaultValue]), /* @__PURE__ */ React5.createElement(React5.Fragment, null, /* @__PURE__ */ React5.createElement("div", {
    ref: _ref,
    contentEditable: !0,
    "data-focusable": !0,
    suppressContentEditableWarning: !0,
    className: "AutoCompletePropertyValue"
  }));
}), AutocompleteListItem = ({icon, label, value, selectedLength}) => /* @__PURE__ */ React5.createElement("div", {
  className: "AutocompleteListItem",
  "data-value": value
}, icon, /* @__PURE__ */ React5.createElement("div", {
  className: "AutocompleteListItem-label"
}, /* @__PURE__ */ React5.createElement("span", {
  className: "AutocompleteListItem-highlight"
}, label.substring(0, selectedLength)), label.substring(selectedLength))), HTMLIcon = (props) => /* @__PURE__ */ React5.createElement("svg", {
  viewBox: "0 0 640 512",
  ...props
}, /* @__PURE__ */ React5.createElement("path", {
  fill: "currentColor",
  d: "M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z"
})), htmlIcon = /* @__PURE__ */ React5.createElement(HTMLIcon, {
  width: 18
}), folderIcon = /* @__PURE__ */ React5.createElement(Folder, {
  width: 18
}), BANNED_DIR_NAMES = [
  "node_modules",
  "bower_components",
  "test",
  "spec",
  "__test__",
  "__spec__",
  "vendor"
], routeTuple = [null, ""];
async function* walkRouteFiles(handle, parentName, isRoot = !0) {
  let relativeName = isRoot ? "" : parentName.length ? `${parentName}/${handle.name}` : handle.name;
  for await (let _entry of handle.values()) {
    let entry = _entry;
    if (!entry.name.startsWith("."))
      switch (entry.kind) {
        case "file": {
          entry.name.endsWith(".html") && (routeTuple[1] = `${relativeName}/${entry.name}`, routeTuple[0] = entry, yield routeTuple);
          break;
        }
        case "directory": {
          BANNED_DIR_NAMES.includes(entry.name) || (routeTuple[1] = `${relativeName}/${entry.name}/`, routeTuple[0] = entry, yield* await walkRouteFiles(entry, relativeName, !1));
          break;
        }
      }
  }
  routeTuple[1] = relativeName || "/", routeTuple[1].endsWith("/") || (routeTuple[1] += "/"), routeTuple[0] = handle, yield routeTuple;
}
async function getRouteFilesForHandle(handle) {
  let handles = [];
  for await (let [route, value] of walkRouteFiles(handle, ""))
    handles.push({
      handle: route,
      label: value,
      value,
      key: value,
      selectedLength: 0,
      icon: route.kind === "file" ? htmlIcon : folderIcon
    });
  return handles;
}
function viewSorter({props: aProps}, {props: bProps}) {
  return aProps.label === bProps.label ? 0 : aProps.label > bProps.label ? 1 : -1;
}
var AutoCompleteBox = React5.forwardRef(({editRef, values, query = ""}, ref) => {
  let container = React5.useRef();
  React5.useImperativeHandle(ref, () => container.current);
  let views;
  if (query.length) {
    let selectedLength = query.length, count = Math.min(values.length, 14);
    views = [];
    for (let i = 0; i < values.length; i++)
      values[i].label.startsWith(query) ? (values[i].selectedLength = selectedLength, views.push(React5.createElement(AutocompleteListItem, values[i]))) : query.startsWith("/") && !values[i].label.startsWith("/") && values[i].label.startsWith(query.substring(1)) && (values[i].selectedLength = selectedLength - 1, views.push(React5.createElement(AutocompleteListItem, values[i])));
    views.sort(viewSorter), views.length > count && (views.length = count);
  } else {
    let count = Math.min(values.length, 14);
    views = new Array(values.length);
    for (let i = 0; i < values.length; i++)
      values[i].selectedLength = 0, views[i] = React5.createElement(AutocompleteListItem, values[i]);
    views.sort(viewSorter), views.length > count && (views.length = count);
  }
  return /* @__PURE__ */ React5.createElement("div", {
    ref: container,
    className: "AutoCompleteBox"
  }, views);
});
function setCaretToEnd(target) {
  let range = document.createRange(), sel = window.getSelection();
  sel.removeAllRanges(), range.setStart(target, 0), sel.addRange(range), target.focus(), range.detach(), target.scrollTop = target.scrollHeight;
}
function blur(content) {
  content.blur(), content.dispatchEvent(new Event("blur", {bubbles: !0}));
}
function setSelectedIndex(container, index, ref) {
  ref.current = index;
  let node = container.childNodes.item(index), selected = container.querySelector("[data-selected]");
  if (selected !== node && selected)
    selected.removeAttribute("data-selected");
  else if (selected === node)
    return;
  node.setAttribute("data-selected", "true");
}
var AutoCompletePropertyValue = ({values, onChange, defaultValue}) => {
  let [hasFocus, setHasFocus] = React5.useState(!1), [route, setRoute] = React5.useState(defaultValue), editRef = React5.useRef(), boxRef = React5.useRef(), selectedIndex = React5.useRef(0), currentValue = React5.useRef(defaultValue);
  React5.useLayoutEffect(() => {
    let becomeFocus = () => setHasFocus(!0), resignFocus = () => {
      console.trace("t"), document.activeElement?.hasAttribute("contenteditable") || (setHasFocus(!1), onChange(currentValue.current), boxRef?.current && (boxRef.current.hidden = !0));
    };
    function checkClickOutside(event) {
      event.defaultPrevented || setHasFocus(!1);
    }
    return editRef.current.addEventListener("focusin", becomeFocus), editRef.current.addEventListener("focusout", resignFocus), () => {
      editRef.current.removeEventListener("focusin", becomeFocus), editRef.current.removeEventListener("focusout", resignFocus);
    };
  }, [editRef, setHasFocus, boxRef, onChange, currentValue]);
  let frameRef = React5.useRef();
  return React5.useLayoutEffect(() => {
    boxRef.current && setSelectedIndex(boxRef.current, 0, selectedIndex);
  }, [route, boxRef, values]), React5.useLayoutEffect(() => {
    if (!boxRef.current || !editRef.current)
      return;
    function onSelectionChange(event) {
      let selection = getSelection(), boundingRectEl = event.currentTarget.querySelector("[contenteditable]"), text = boundingRectEl.innerText;
      text ? setRoute(currentValue.current = text) : (setRoute(""), currentValue.current = ""), frameRef.current && cancelAnimationFrame(frameRef.current), frameRef.current = requestAnimationFrame(() => {
        setSelectedIndex(boxRef.current, 0, selectedIndex);
        let rect = boundingRectEl.getBoundingClientRect();
        boxRef.current.style.setProperty("--offset-x", `${rect.right}px`), boxRef.current.style.setProperty("--offset-y", `${rect.bottom}px`);
      });
    }
    let el = editRef.current.querySelector("[contenteditable]");
    if (setCaretToEnd(el), console.log(el), el.innerText) {
      let rect = el.getBoundingClientRect();
      boxRef.current.style.setProperty("--offset-x", `${rect.right}px`), boxRef.current.style.setProperty("--offset-y", `${rect.bottom}px`);
    } else {
      let rect = el.getBoundingClientRect();
      boxRef.current.style.setProperty("--offset-x", `${rect.right}px`), boxRef.current.style.setProperty("--offset-y", `${rect.bottom}px`);
    }
    function onMouseOver(event) {
      let listItem = event.target.closest(".AutoCompleteListItem");
      if (!listItem)
        return;
      let index = Array.prototype.indexOf.call(listItem.parentElement.childNodes, listItem);
      return setSelectedIndex(boxRef.current, index, selectedIndex), listItem;
    }
    function onKeyDown(event) {
      switch (event.key) {
        case "ArrowUp": {
          let newIndex = selectedIndex.current - 1;
          newIndex = newIndex < 0 ? boxRef.current.childElementCount - 1 : newIndex, event.preventDefault(), setSelectedIndex(boxRef.current, newIndex, selectedIndex);
          break;
        }
        case "ArrowDown": {
          event.preventDefault();
          let newIndex = selectedIndex.current + 1;
          newIndex = newIndex > boxRef.current.childElementCount - 1 ? 0 : newIndex, setSelectedIndex(boxRef.current, newIndex, selectedIndex);
          break;
        }
        case "Escape": {
          event.preventDefault();
          let content = editRef.current.querySelector("[contenteditable]");
          blur(content);
          break;
        }
        case "Enter": {
          event.preventDefault();
          let content = editRef.current.querySelector("[contenteditable]");
          onSelectValue(content, boxRef.current.childNodes.item(selectedIndex.current).getAttribute("data-value"));
          break;
        }
      }
    }
    function doFocus(event) {
      event.preventDefault(), editRef.current.querySelector("[contenteditable]").focus();
    }
    function onSelectValue(content, value) {
      currentValue.current = content.innerText = value, getSelection().modify("move", "right", "line"), blur(content);
    }
    function onClickItem(event) {
      let item = onMouseOver(event);
      if (item) {
        event.preventDefault();
        let content = editRef.current.querySelector("[contenteditable]");
        onSelectValue(content, item.getAttribute("data-value"));
      }
    }
    return editRef.current.addEventListener("keydown", onKeyDown), editRef.current.addEventListener("click", doFocus), editRef.current.addEventListener("input", onSelectionChange), boxRef.current.addEventListener("mouseover", onMouseOver), boxRef.current.addEventListener("mousedown", onClickItem), () => {
      cancelAnimationFrame(frameRef.current), editRef.current && (editRef.current.removeEventListener("input", onSelectionChange), editRef.current.removeEventListener("click", doFocus), editRef.current.removeEventListener("keydown", onKeyDown)), boxRef.current && (boxRef.current.removeEventListener("mousedown", onClickItem), boxRef.current.removeEventListener("mouseover", onMouseOver));
    };
  }, [
    editRef,
    boxRef,
    frameRef,
    selectedIndex,
    currentValue,
    hasFocus,
    setRoute
  ]), React5.useLayoutEffect(() => {
    hasFocus && (editRef.current.querySelector("[contenteditable]").innerText = currentValue.current, setSelectedIndex(boxRef.current, 0, selectedIndex));
  }, [currentValue, hasFocus, editRef, boxRef]), /* @__PURE__ */ React5.createElement("div", {
    ref: editRef,
    className: "AutoCompleteContainer"
  }, /* @__PURE__ */ React5.createElement(QuoteLiteral, null), /* @__PURE__ */ React5.createElement(AutoCompleter, {
    defaultValue
  }), /* @__PURE__ */ React5.createElement(QuoteLiteral, null), hasFocus && /* @__PURE__ */ React5.createElement(PortalCompat_default, null, /* @__PURE__ */ React5.createElement(AutoCompleteBox, {
    query: route,
    values,
    ref: boxRef
  })));
}, Unimportant = ({children}) => /* @__PURE__ */ React5.createElement("span", {
  className: "CodeBox-token CodeBox-token--unimportant"
}, children);
function lineFocuser(event) {
  let focusLine = event.target.closest(".CodeBox-line");
  if (focusLine) {
    let focusable = focusLine.querySelector("[data-focusable]");
    focusable && document.activeElement !== focusable && focusable.focus();
  }
}
var PackageJSONEditor = ({
  pkg,
  folderName,
  values,
  onChange,
  defaultValue,
  onSave,
  hasChanged,
  propertyBinding = 0
}) => {
  let [isExpanded, setExpanded] = React5.useState(!1);
  return pkg.name ? /* @__PURE__ */ React5.createElement("div", {
    className: "CodeBox-container"
  }, /* @__PURE__ */ React5.createElement("div", {
    className: "CodeBox-heading"
  }, /* @__PURE__ */ React5.createElement("div", {
    className: "CodeBox-filename"
  }, /* @__PURE__ */ React5.createElement(Unimportant, null, folderName, "/"), "package.json")), /* @__PURE__ */ React5.createElement("div", {
    onClick: lineFocuser,
    className: "CodeBox"
  }, /* @__PURE__ */ React5.createElement("div", {
    className: "CodeBox-line CodeBox-Indent"
  }, /* @__PURE__ */ React5.createElement("div", {
    className: "Ellipsis"
  }, "...")), /* @__PURE__ */ React5.createElement("div", {
    className: "CodeBox-line CodeBox-Indent"
  }, /* @__PURE__ */ React5.createElement(StringKey, {
    name: "run"
  }), /* @__PURE__ */ React5.createElement(OpeningBrace, null)), /* @__PURE__ */ React5.createElement("div", {
    className: `CodeBox-line CodeBox-line--enabled ${defaultValue ? "" : "CodeBox-line--enabled--invalid"} CodeBox-line--flex CodeBox-Indent CodeBox-Indent--2`
  }, /* @__PURE__ */ React5.createElement(StringKey, {
    name: "router"
  }), /* @__PURE__ */ React5.createElement(AutoCompletePropertyValue, {
    values,
    onChange,
    defaultValue
  })), /* @__PURE__ */ React5.createElement("div", {
    className: "CodeBox-line CodeBox-Indent"
  }, /* @__PURE__ */ React5.createElement(ClosingBrace, null)), /* @__PURE__ */ React5.createElement("div", {
    className: "CodeBox-line CodeBox-Indent"
  }, /* @__PURE__ */ React5.createElement("div", {
    className: "Ellipsis"
  }, "..."))), /* @__PURE__ */ React5.createElement("div", {
    className: "CodeBox-heading CodeBox-heading--footer"
  }, /* @__PURE__ */ React5.createElement("div", {
    onClick: hasChanged ? onSave : void 0,
    "data-disabled": !hasChanged,
    className: "CodeBox-action"
  }, "Save changes"))) : null;
};

// src/icons/filetypes/CSSFileType.tsx
var React6 = __toModule(require_react());
function CSSFileType(props) {
  return /* @__PURE__ */ React6.createElement("svg", {
    viewBox: "0 0 32 32",
    ...props
  }, /* @__PURE__ */ React6.createElement("path", {
    fill: "#1572b6",
    d: "M5.902 27.201L3.656 2h24.688l-2.249 25.197L15.985 30 5.902 27.201z"
  }), /* @__PURE__ */ React6.createElement("path", {
    fill: "#33a9dc",
    d: "M16 27.858l8.17-2.265 1.922-21.532H16v23.797z"
  }), /* @__PURE__ */ React6.createElement("path", {
    fill: "#fff",
    d: "M16 13.191h4.09l.282-3.165H16V6.935h7.75l-.074.829-.759 8.518H16v-3.091z"
  }), /* @__PURE__ */ React6.createElement("path", {
    fill: "#ebebeb",
    d: "M16.019 21.218l-.014.004-3.442-.93-.22-2.465H9.24l.433 4.853 6.331 1.758.015-.004v-3.216z"
  }), /* @__PURE__ */ React6.createElement("path", {
    fill: "#fff",
    d: "M19.827 16.151l-.372 4.139-3.447.93v3.216l6.336-1.756.047-.522.537-6.007h-3.101z"
  }), /* @__PURE__ */ React6.createElement("path", {
    fill: "#ebebeb",
    d: "M16.011 6.935v3.091H8.545l-.062-.695-.141-1.567-.074-.829h7.743zM16 13.191v3.091H12.601l-.062-.695-.14-1.567-.074-.829H16z"
  }));
}

// src/icons/filetypes/HTMLFileType.tsx
var React7 = __toModule(require_react()), HTMLFileType = ({width, height, className}) => /* @__PURE__ */ React7.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  width,
  height,
  className,
  viewBox: "0 0 32 32"
}, /* @__PURE__ */ React7.createElement("path", {
  fill: "#e44f26",
  d: "M5.902 27.201L3.655 2 28.345 2 26.095 27.197 15.985 30 5.902 27.201z"
}), /* @__PURE__ */ React7.createElement("path", {
  fill: "#f1662a",
  d: "M16 27.858L24.17 25.593 26.092 4.061 16 4.061 16 27.858z"
}), /* @__PURE__ */ React7.createElement("path", {
  fill: "#ebebeb",
  d: "M16 13.407L11.91 13.407 11.628 10.242 16 10.242 16 7.151 15.989 7.151 8.25 7.151 8.324 7.981 9.083 16.498 16 16.498 16 13.407z"
}), /* @__PURE__ */ React7.createElement("path", {
  fill: "#ebebeb",
  d: "M16 21.434L15.986 21.438 12.544 20.509 12.324 18.044 10.651 18.044 9.221 18.044 9.654 22.896 15.986 24.654 16 24.65 16 21.434z"
}), /* @__PURE__ */ React7.createElement("path", {
  fill: "#fff",
  d: "M15.989 13.407L15.989 16.498 19.795 16.498 19.437 20.507 15.989 21.437 15.989 24.653 22.326 22.896 22.372 22.374 23.098 14.237 23.174 13.407 22.341 13.407 15.989 13.407z"
}), /* @__PURE__ */ React7.createElement("path", {
  fill: "#fff",
  d: "M15.989 7.151L15.989 9.071 15.989 10.235 15.989 10.242 23.445 10.242 23.445 10.242 23.455 10.242 23.517 9.548 23.658 7.981 23.732 7.151 15.989 7.151z"
}));

// src/icons/filetypes/JavaScriptFileType.tsx
var React8 = __toModule(require_react());
function JavaScriptFileType(props) {
  return /* @__PURE__ */ React8.createElement("svg", {
    viewBox: "0 0 32 32",
    ...props
  }, /* @__PURE__ */ React8.createElement("path", {
    d: "M18.774 19.7a3.727 3.727 0 003.376 2.078c1.418 0 2.324-.709 2.324-1.688 0-1.173-.931-1.589-2.491-2.272l-.856-.367c-2.469-1.052-4.11-2.37-4.11-5.156 0-2.567 1.956-4.52 5.012-4.52A5.058 5.058 0 0126.9 10.52l-2.665 1.711a2.327 2.327 0 00-2.2-1.467 1.489 1.489 0 00-1.638 1.467c0 1.027.636 1.442 2.1 2.078l.856.366c2.908 1.247 4.549 2.518 4.549 5.376 0 3.081-2.42 4.769-5.671 4.769a6.575 6.575 0 01-6.236-3.5zM6.686 20c.538.954 1.027 1.76 2.2 1.76 1.124 0 1.834-.44 1.834-2.15V7.975h3.422v11.683c0 3.543-2.078 5.156-5.11 5.156A5.312 5.312 0 013.9 21.688z",
    fill: "#f5de19"
  }));
}

// src/icons/filetypes/TypeScriptFileType.tsx
var React9 = __toModule(require_react());
function TypeScriptFileType(props) {
  return /* @__PURE__ */ React9.createElement("svg", {
    viewBox: "0 0 32 32",
    ...props
  }, /* @__PURE__ */ React9.createElement("rect", {
    x: 2,
    y: 2,
    width: 28,
    height: 28,
    rx: 1.312,
    fill: "#3178c6"
  }), /* @__PURE__ */ React9.createElement("path", {
    d: "M18.245 23.759v3.068a6.492 6.492 0 001.764.575 11.56 11.56 0 002.146.192 9.968 9.968 0 002.088-.211 5.11 5.11 0 001.735-.7 3.542 3.542 0 001.181-1.266 4.469 4.469 0 00.186-3.394 3.409 3.409 0 00-.717-1.117 5.236 5.236 0 00-1.123-.877 12.027 12.027 0 00-1.477-.734q-.6-.249-1.08-.484a5.5 5.5 0 01-.813-.479 2.089 2.089 0 01-.516-.518 1.091 1.091 0 01-.181-.618 1.039 1.039 0 01.162-.571 1.4 1.4 0 01.459-.436 2.439 2.439 0 01.726-.283 4.211 4.211 0 01.956-.1 5.942 5.942 0 01.808.058 6.292 6.292 0 01.856.177 5.994 5.994 0 01.836.3 4.657 4.657 0 01.751.422V13.9a7.509 7.509 0 00-1.525-.4 12.426 12.426 0 00-1.9-.129 8.767 8.767 0 00-2.064.235 5.239 5.239 0 00-1.716.733 3.655 3.655 0 00-1.171 1.271 3.731 3.731 0 00-.431 1.845 3.588 3.588 0 00.789 2.34 6 6 0 002.395 1.639q.63.26 1.175.509a6.458 6.458 0 01.942.517 2.463 2.463 0 01.626.585 1.2 1.2 0 01.23.719 1.1 1.1 0 01-.144.552 1.269 1.269 0 01-.435.441 2.381 2.381 0 01-.726.292 4.377 4.377 0 01-1.018.105 5.773 5.773 0 01-1.969-.35 5.874 5.874 0 01-1.805-1.045zm-5.154-7.638h4v-2.527H5.938v2.527H9.92v11.254h3.171z",
    fill: "#fff",
    fillRule: "evenodd"
  }));
}

// src/icons/filetypes/filetypes.tsx
var filetypes = {
  ".js": JavaScriptFileType,
  ".jsx": JavaScriptFileType,
  ".mjs": JavaScriptFileType,
  ".cjs": JavaScriptFileType,
  ".html": HTMLFileType,
  ".ts": TypeScriptFileType,
  ".tsx": TypeScriptFileType,
  ".css": CSSFileType
};

// src/_dev_/NewProjectPage.tsx
var path6 = __toModule(require_path_browserify());
var packager = new InitialPackager(), DirectoryLoadState;
(function(DirectoryLoadState2) {
  DirectoryLoadState2[DirectoryLoadState2.loading = 0] = "loading", DirectoryLoadState2[DirectoryLoadState2.loaded = 1] = "loaded";
})(DirectoryLoadState || (DirectoryLoadState = {}));
var pkgJSON = new PackageJSONFile(), PackageContext = React10.createContext({
  directory: null,
  packager,
  id: getPackageID(),
  setDirectory: () => {
  },
  pkgJSON,
  directoryLoadingState: 0
}), PackageProvider = ({children}) => {
  let [directory, _setDirectory] = React10.useState(null), [directoryLoadingState, setDirectoryLoadState] = React10.useState(0), setDirectory = React10.useCallback((dirHandle) => {
    _setDirectory(dirHandle), dirHandle && packager.database.saveDir(dirHandle).then((a) => console.log("Saved dirHandle")), setDirectoryLoadState(1);
  }, [_setDirectory, setDirectoryLoadState]);
  React10.useEffect(() => {
    packager.database.loadDir().then(async (dir) => {
      if (dir && await dir.queryPermission({mode: "read"}) !== "granted" && await dir.requestPermission({mode: "read"}) === "denied")
        return null;
      if (dir)
        return pkgJSON.handle = await dir.getFileHandle("package.json"), pkgJSON.process(await (await pkgJSON.handle.getFile()).text()), dir;
    }).then((dir) => {
      dir && _setDirectory(dir), setDirectoryLoadState(1);
    }, (e) => {
      console.error(e), setDirectoryLoadState(1);
    });
  }, [setDirectoryLoadState, packager, _setDirectory, pkgJSON]);
  let contextValue = React10.useMemo(() => ({
    packager,
    directory,
    setDirectory,
    pkgJSON,
    id: getPackageID(),
    directoryLoadingState
  }), [packager, directory, setDirectory, getPackageID, directoryLoadingState]);
  return /* @__PURE__ */ React10.createElement(PackageContext.Provider, {
    value: contextValue
  }, children);
}, Title = ({children}) => /* @__PURE__ */ React10.createElement("div", {
  className: "Title"
}, children), Monospace = ({children}) => /* @__PURE__ */ React10.createElement("span", {
  className: "Monospace"
}, children), Highlight = ({children}) => /* @__PURE__ */ React10.createElement("span", {
  className: "Highlight"
}, children), Instructions = ({children}) => /* @__PURE__ */ React10.createElement("div", {
  className: "Paragraph"
}, children), Dropbox = ({children, dragState, onClick}) => /* @__PURE__ */ React10.createElement("div", {
  onClick,
  className: `Dropbox ${DragStateClasses[dragState]}`
}, /* @__PURE__ */ React10.createElement("div", {
  className: "Dropbox-background"
}, /* @__PURE__ */ React10.createElement("svg", {
  width: "100%",
  height: "100%"
}, /* @__PURE__ */ React10.createElement("rect", {
  x: "0",
  y: "0",
  width: "100%",
  height: "100%",
  r: "20"
}))), /* @__PURE__ */ React10.createElement("div", {
  className: "Dropbox-foreground"
}, children)), HelpText = ({children}) => /* @__PURE__ */ React10.createElement("div", {
  className: "HelpText"
}, children), StatusLightLevel;
(function(StatusLightLevel2) {
  StatusLightLevel2[StatusLightLevel2.unknown = 0] = "unknown", StatusLightLevel2[StatusLightLevel2.verifying = 1] = "verifying", StatusLightLevel2[StatusLightLevel2.built = 2] = "built", StatusLightLevel2[StatusLightLevel2.error = 3] = "error";
})(StatusLightLevel || (StatusLightLevel = {}));
var StatusLightLevelClassNames = [
  "StatusLightLevel--unknown",
  "StatusLightLevel--verifying",
  "StatusLightLevel--building",
  "StatusLightLevel--error"
], StatusLight = ({level}) => /* @__PURE__ */ React10.createElement("span", {
  className: `StatusLight ${StatusLightLevelClassNames[level]}`
}), AttachFolderStep = ({dragState, onClickDropbox}) => /* @__PURE__ */ React10.createElement("main", {
  className: "NewProjectPage"
}, /* @__PURE__ */ React10.createElement("div", {
  className: "TitleContainer"
}, /* @__PURE__ */ React10.createElement(StatusLight, {
  level: 0
}), /* @__PURE__ */ React10.createElement("div", {
  className: "TitleGroup"
}, /* @__PURE__ */ React10.createElement(Title, null, "Start ", /* @__PURE__ */ React10.createElement(Monospace, null, getPackageID())), /* @__PURE__ */ React10.createElement(Instructions, null, "Drag and drop a ", /* @__PURE__ */ React10.createElement(Highlight, null, "\u{1F4C2} folder"), " with a", " ", /* @__PURE__ */ React10.createElement(Monospace, null, "package.json"), " inside."))), /* @__PURE__ */ React10.createElement(Dropbox, {
  onClick: onClickDropbox,
  dragState
}, "Drop folder with a package.json in here"), /* @__PURE__ */ React10.createElement(HelpText, null, "Code with your local editor, and your dev server syncs automatically. There's nothing to install. There are no commands to run. Your code stays on your local computer."), /* @__PURE__ */ React10.createElement(Footer, null)), Footer = () => /* @__PURE__ */ React10.createElement("div", {
  className: "Footer"
}, /* @__PURE__ */ React10.createElement("div", null, new Intl.DateTimeFormat(["lookup"], {
  dateStyle: "short",
  timeStyle: "long"
}).format(new Date())), /* @__PURE__ */ React10.createElement("div", null, getPackageID())), ProjectStep;
(function(ProjectStep2) {
  ProjectStep2[ProjectStep2.attach = 0] = "attach", ProjectStep2[ProjectStep2.verifyFolder = 1] = "verifyFolder", ProjectStep2[ProjectStep2.config = 2] = "config", ProjectStep2[ProjectStep2.ready = 3] = "ready", ProjectStep2[ProjectStep2.loadFolder = 4] = "loadFolder", ProjectStep2[ProjectStep2.petitionMozilla = 5] = "petitionMozilla", ProjectStep2[ProjectStep2.petitionWebkit = 6] = "petitionWebkit";
})(ProjectStep || (ProjectStep = {}));
var PetitionMozilla = ({}) => /* @__PURE__ */ React10.createElement("div", {
  className: "Petition"
}, /* @__PURE__ */ React10.createElement(Title, null, "Firefox doesn't support the Filesystem Access API"), /* @__PURE__ */ React10.createElement(Instructions, null, "In the meantime, you'll have to use a Chromium-based browser. Voice your support for the Filesystem Access API."), /* @__PURE__ */ React10.createElement(GitHubButton, {
  href: "https://github.com/mozilla/standards-positions/issues/154"
}, "Petition Mozilla")), GitHubButton = ({children, href}) => /* @__PURE__ */ React10.createElement("a", {
  href,
  target: "_blank",
  rel: "noopener",
  className: "GitHubButton"
}, children), TweetButton = ({children, href}) => /* @__PURE__ */ React10.createElement("a", {
  href,
  target: "_blank",
  rel: "noopener",
  className: "TweetButton"
}, children), PetitionWebkit = ({}) => /* @__PURE__ */ React10.createElement("div", {
  className: "Petition"
}, /* @__PURE__ */ React10.createElement(Title, null, "Apple won't let you do that."), /* @__PURE__ */ React10.createElement(Instructions, null, "By", " ", /* @__PURE__ */ React10.createElement("a", {
  target: "_blank",
  rel: "noopener",
  href: "https://lists.webkit.org/pipermail/webkit-dev/2020-August/031362.html"
}, "refusing"), " ", "to support the filesystem access API, Apple is holding back the free and open internet."), /* @__PURE__ */ React10.createElement(Instructions, null, "20% of Apple's revenue comes from Software & Services. Apple's stance on the filesystem access API helps ensure a future where only software Apple can monetize runs on devices you own."), /* @__PURE__ */ React10.createElement(TweetButton, null, "Tweet")), BrowserType;
(function(BrowserType2) {
  BrowserType2[BrowserType2.unknown = 0] = "unknown", BrowserType2[BrowserType2.firefox = 1] = "firefox", BrowserType2[BrowserType2.webkit = 2] = "webkit";
})(BrowserType || (BrowserType = {}));
var DragState;
(function(DragState2) {
  DragState2[DragState2.none = 0] = "none", DragState2[DragState2.drag = 1] = "drag", DragState2[DragState2.drop = 2] = "drop", DragState2[DragState2.success = 3] = "success";
})(DragState || (DragState = {}));
var DragStateClasses = [
  "DragState--none",
  "DragState--drag",
  "DragState--drop",
  "DragState--success"
], getBrowserType = () => typeof InstallTrigger != "undefined" ? 1 : navigator?.userAgent?.toLowerCase()?.includes("webkit") && !navigator?.userAgent?.toLowerCase()?.includes("chrome") ? 2 : 0, FileSystemRouteDescriptor = ({router, values}) => (console.log(router, values), null), EntryPoint = ({
  entryPoint,
  route
}) => {
  let IconComponent = filetypes[path6.extname(entryPoint)], [errorCode, setErrorCode] = React10.useState(-1);
  return React10.useEffect(() => {
    let didClose = !1;
    async function doesFileExist() {
      if (didClose)
        return;
      let doesExist = await route.root.exists(entryPoint);
      didClose || doesExist || setErrorCode(ErrorCode.missingEntryFiles);
    }
    return doesFileExist(), () => {
      didClose = !0;
    };
  }, [route, entryPoint, setErrorCode]), /* @__PURE__ */ React10.createElement("div", {
    className: `EntryPoint ${IconComponent ? "EntryPoint--withIcon" : ""} ${ErrorCode.missingEntryFiles === errorCode ? "EntryPoint--withError" : ""}`
  }, /* @__PURE__ */ React10.createElement("div", {
    className: "EntryPoint-icon"
  }, IconComponent && /* @__PURE__ */ React10.createElement(IconComponent, {
    width: 24,
    height: 24
  })), /* @__PURE__ */ React10.createElement("div", {
    className: "EntryPoint-label"
  }, entryPoint), errorCode === ErrorCode.missingEntryFiles && /* @__PURE__ */ React10.createElement("div", {
    className: "EntryPoint-error"
  }, "Missing file"));
}, Lowercase = ({children}) => /* @__PURE__ */ React10.createElement("span", {
  className: "Lowercase"
}, children), SPARouteDescriptor = ({
  router: {handle, value: filepath, icon},
  values: tree
}) => {
  let route = React10.useRef(), {directory} = React10.useContext(PackageContext), [entryPoints, setEntryPoints] = React10.useState([]), [errorCode, setErrorCode] = React10.useState(-1);
  React10.useEffect(() => {
    let didCancel = !1;
    route.current || (route.current = Route.from(new NativeFS(directory), filepath));
    async function load() {
      if (didCancel)
        return;
      let _route = route.current;
      await _route.generateConfig(await handle.getFile()), setEntryPoints(_route.entryPoints);
    }
    return load(), () => {
      didCancel = !0;
    };
  }, [route, handle, filepath, setEntryPoints, directory]);
  let entryPointViews = new Array(entryPoints.length);
  for (let i = 0; i < entryPointViews.length; i++)
    entryPointViews[i] = /* @__PURE__ */ React10.createElement(EntryPoint, {
      entryPoint: entryPoints[i],
      key: entryPoints[i] + (route?.current?.absWorkingDirectory ?? ""),
      route: route.current
    });
  return /* @__PURE__ */ React10.createElement("div", {
    className: "SPARouteDescriptor"
  }, /* @__PURE__ */ React10.createElement("a", {
    href: "/",
    target: "_blank",
    className: "Section-label Section-label--url"
  }, /* @__PURE__ */ React10.createElement("span", {
    className: "Section-label--url-indicator"
  }, location.origin, "/"), "*"), /* @__PURE__ */ React10.createElement("div", {
    className: "Routing-explanation"
  }, "Navigation requests route to\xA0", /* @__PURE__ */ React10.createElement(Monospace, null, filepath), ". Open any url in ", location.origin, "/ from your browser to bundle & render."), /* @__PURE__ */ React10.createElement("div", {
    className: "Section-label Section-label--level-2"
  }, "Entry points", " ", /* @__PURE__ */ React10.createElement(Lowercase, null, /* @__PURE__ */ React10.createElement(Monospace, null, "<script>"), " &", " ", /* @__PURE__ */ React10.createElement(Monospace, null, "<link>"), " in", " ", /* @__PURE__ */ React10.createElement(Monospace, null, filepath))), /* @__PURE__ */ React10.createElement("div", {
    className: "EntryPointList"
  }, entryPointViews));
}, NewProjectPage = () => {
  let [step, setStep] = React10.useState(() => location.pathname.endsWith("/setup") ? 0 : 1), {
    directory,
    directoryLoadingState,
    packager: packager2,
    pkgJSON: pkgJSON2,
    id,
    setDirectory: _setDirectory
  } = React10.useContext(PackageContext), [dragState, setDragState] = React10.useState(0);
  React10.useEffect(() => {
    function onPopState(event) {
      let question = location.pathname.indexOf("?");
      switch (location.pathname.substring(0, question > -1 ? question : void 0)) {
        case "/_dev_/config": {
          setStep(1);
          break;
        }
        case "/_dev_/setup": {
          setStep(0);
          break;
        }
        default:
          location.reload();
      }
    }
    return window.addEventListener("popstate", onPopState), () => {
      window.removeEventListener("popstate", onPopState);
    };
  }, [setStep]);
  let setDirectory = React10.useCallback(async (handle) => {
    try {
      let file = await handle.getFileHandle("package.json");
      if (!file)
        return !1;
      pkgJSON2.process(await (await file.getFile()).text());
    } catch (exception) {
      return console.error(exception), alert("Please choose a folder with a valid package.json inside. More specific exception is in the console"), !1;
    }
    return _setDirectory(handle), setStep(1), !0;
  }, [_setDirectory, setStep, pkgJSON2]), handleClick = React10.useCallback(async (evt) => {
    if (evt.preventDefault(), typeof window.showDirectoryPicker != "function") {
      switch (getBrowserType()) {
        case 1: {
          setStep(5);
          break;
        }
        case 2: {
          setStep(6);
          break;
        }
        default:
          alert("Your browser doesn't support the Filesystem Access API. Sorry.");
      }
      return;
    }
    let handle = await window.showDirectoryPicker();
    await setDirectory(handle) && history.pushState({}, document.title, "/_dev_/config");
  }, [setDirectory, setStep]);
  switch (React10.useLayoutEffect(() => {
    let onDragOver = (e) => {
      setDragState(1), e.preventDefault();
    }, onDragEnd = (e) => {
      setDragState(0);
    };
    return document.body.addEventListener("dragover", onDragOver), document.body.addEventListener("dragend", onDragEnd), document.body.addEventListener("dragleave", onDragEnd), document.body.addEventListener("dragexit", onDragEnd), () => {
      document.body.removeEventListener("dragover", onDragOver), document.body.removeEventListener("dragend", onDragEnd), document.body.removeEventListener("dragleave", onDragEnd), document.body.removeEventListener("dragexit", onDragEnd);
    };
  }, [setDragState]), React10.useLayoutEffect(() => {
    let onDrop = async (e) => {
      e.preventDefault();
      let filesCount = 0, directory2;
      for (let item of e.dataTransfer.items) {
        if (item.kind === "file") {
          if (!item.getAsFileSystemHandle) {
            switch (getBrowserType()) {
              case 1: {
                setDragState(0), setStep(5);
                break;
              }
              case 2: {
                setDragState(0), setStep(6);
                break;
              }
              default:
                alert("Your browser doesn't support the Filesystem Access API. Sorry.");
            }
            return;
          }
          let entry = await item.getAsFileSystemHandle();
          if (entry.kind === "directory")
            directory2 = entry;
          else {
            setDragState(0), alert("Please drop the folder instead of files in the folder (it needs folder access)");
            return;
          }
        }
        directory2 && (setDirectory(directory2), setDragState(3));
      }
    };
    return document.body.addEventListener("drop", onDrop), () => {
      document.body.removeEventListener("drop", onDrop);
    };
  }, [setDirectory, setStep, setDragState]), step) {
    case 0:
      return /* @__PURE__ */ React10.createElement(AttachFolderStep, {
        dragState,
        onClickDropbox: handleClick
      });
    case 5:
      return /* @__PURE__ */ React10.createElement(PetitionMozilla, null);
    case 6:
      return /* @__PURE__ */ React10.createElement(PetitionWebkit, null);
    case 1:
      return /* @__PURE__ */ React10.createElement(VerifyFolder, {
        packager: packager2,
        directory
      });
  }
}, RoutingSection = ({}) => {
  let {directory, directoryLoadingState, pkgJSON: pkgJSON2} = React10.useContext(PackageContext), [route, setRoute] = React10.useState(() => pkgJSON2?.run?.router ? pkgJSON2?.run?.router : ""), [savedRoute, setSavedRoute] = React10.useState(route);
  React10.useEffect(() => {
    directoryLoadingState === 1 && (setRoute(pkgJSON2?.run?.router ?? ""), setSavedRoute(pkgJSON2?.run?.router ?? ""));
  }, [directoryLoadingState, pkgJSON2, setRoute, setSavedRoute]);
  let [values, setValues] = React10.useState([]), routeValue = React10.useMemo(() => {
    for (let value of values)
      if (value.value === route)
        return value;
    return null;
  }, [route, values]), staticHandle = React10.useMemo(() => {
    if (!routeValue)
      return;
    let _route = routeValue.value;
    if (_route.endsWith("/"))
      return routeValue.handle;
    let parentDir = path6.join(_route, "../");
    for (let v of values)
      if (v.value === parentDir)
        return v.handle;
    return null;
  }, [routeValue, values]), routeType = React10.useMemo(() => {
    if (routeValue)
      switch (routeValue.handle.kind) {
        case "file":
          return RouterType.spa;
        case "directory":
          return RouterType.filesystem;
      }
    return RouterType.unknown;
  }, [routeValue]);
  React10.useEffect(() => {
    async function loadValues() {
      let list = await getRouteFilesForHandle(directory);
      setValues(list);
    }
    directory && loadValues();
  }, [setValues, directory, getRouteFilesForHandle]);
  let routeDescriptor;
  switch (routeType) {
    case RouterType.filesystem: {
      routeDescriptor = /* @__PURE__ */ React10.createElement(FileSystemRouteDescriptor, {
        router: routeValue,
        values
      });
      break;
    }
    case RouterType.spa: {
      routeDescriptor = /* @__PURE__ */ React10.createElement(SPARouteDescriptor, {
        router: routeValue,
        values
      });
      break;
    }
    default:
  }
  return /* @__PURE__ */ React10.createElement("section", {
    className: "Section Routing"
  }, /* @__PURE__ */ React10.createElement(PackageJSONEditor, {
    pkg: pkgJSON2,
    key: savedRoute,
    values,
    onChange: setRoute,
    onSave: async () => {
      pkgJSON2.run ? (pkgJSON2.run.router = route, pkgJSON2.run.isRouterUnset = !1) : pkgJSON2.run = {router: route, isRouterUnset: !1}, setSavedRoute(pkgJSON2.run.router), await pkgJSON2.handle.requestPermission({mode: "readwrite"}), await pkgJSON2.save();
      let record = StoredPackage.fromRecord({
        id: getPackageID(),
        lastBuild: null,
        handle: directory,
        staticHandle,
        routerType: path6.extname(pkgJSON2.run.router) === ".html" ? RouterType.spa : RouterType.filesystem
      });
      if (packager.storedPackage)
        Object.assign(packager.storedPackage, record), await packager.database.savePackage(packager.storedPackage);
      else {
        let storedPackage = StoredPackage.fromRecord(record);
        await packager.database.savePackage(storedPackage), packager.storedPackage = storedPackage;
      }
    },
    hasChanged: route && route !== savedRoute,
    defaultValue: route,
    folderName: directory?.name ?? "Loading..."
  }), routeDescriptor);
}, VerifyFolder = ({}) => {
  let {directoryLoadingState, directory} = React10.useContext(PackageContext);
  return /* @__PURE__ */ React10.createElement("main", {
    className: "NewProjectPage"
  }, /* @__PURE__ */ React10.createElement("div", {
    className: "TitleContainer"
  }, /* @__PURE__ */ React10.createElement(GearIcon, {
    width: 64,
    height: 64,
    fill: "white",
    stroke: "rgb(64, 2, 209)"
  }), /* @__PURE__ */ React10.createElement("div", {
    className: "TitleGroup"
  }, /* @__PURE__ */ React10.createElement(Title, null, "Configure dev server"), /* @__PURE__ */ React10.createElement(Instructions, null, "Your configuration will save to ", /* @__PURE__ */ React10.createElement(Monospace, null, "package.json")))), /* @__PURE__ */ React10.createElement(RoutingSection, null), /* @__PURE__ */ React10.createElement(Footer, null));
}, Page = () => /* @__PURE__ */ React10.createElement(PackageProvider, null, /* @__PURE__ */ React10.createElement(NewProjectPage, null));
function render2() {
  ReactDOM4.render(/* @__PURE__ */ React10.createElement(Page, null), document.body.querySelector("#root"));
}
window.addEventListener("unhandledRejection", console.error);

// src/_dev_/setup.tsx
window.addEventListener("DOMContentLoaded", render2);
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL29iamVjdC1hc3NpZ25ANC4xLjEvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0QDE3LjAuMS9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWFjdEAxNy4wLjEvbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zY2hlZHVsZXJAMC4yMC4xL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2NoZWR1bGVyQDAuMjAuMS9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9yZWFjdC1kb21AMTcuMC4xX3JlYWN0QDE3LjAuMS9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LWRvbUAxNy4wLjFfcmVhY3RAMTcuMC4xL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21pbWVAMi41LjIvbm9kZV9tb2R1bGVzL21pbWUvTWltZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWltZUAyLjUuMi9ub2RlX21vZHVsZXMvbWltZS90eXBlcy9zdGFuZGFyZC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbWltZUAyLjUuMi9ub2RlX21vZHVsZXMvbWltZS9saXRlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9wYXRoLWJyb3dzZXJpZnlAMS4wLjEvbm9kZV9tb2R1bGVzL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZXNidWlsZC13YXNtQDAuOS4wL25vZGVfbW9kdWxlcy9lc2J1aWxkLXdhc20vbGliL2Jyb3dzZXIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNCdWZmZXIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25vZGVVdGlsLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZUJ1ZmZlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvY29uc3RhbnRzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9pbnRlcm5hbC9kZWJ1Zy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvaW50ZXJuYWwvcmUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL3BhcnNlLW9wdGlvbnMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2ludGVybmFsL2lkZW50aWZpZXJzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9jbGFzc2VzL3NlbXZlci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3BhcnNlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvdmFsaWQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jbGVhbi5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2luYy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2NvbXBhcmUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9lcS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2RpZmYuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9tYWpvci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL21pbm9yLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcGF0Y2guanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9wcmVyZWxlYXNlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvcmNvbXBhcmUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jb21wYXJlLWxvb3NlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvY29tcGFyZS1idWlsZC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NvcnQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9yc29ydC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL2d0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9mdW5jdGlvbnMvbHQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9uZXEuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9ndGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9sdGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jbXAuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2Z1bmN0aW9ucy9jb2VyY2UuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3lhbGxpc3RANC4wLjAvbm9kZV9tb2R1bGVzL3lhbGxpc3QvaXRlcmF0b3IuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3lhbGxpc3RANC4wLjAvbm9kZV9tb2R1bGVzL3lhbGxpc3QveWFsbGlzdC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbHJ1LWNhY2hlQDYuMC4wL25vZGVfbW9kdWxlcy9scnUtY2FjaGUvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2NsYXNzZXMvcmFuZ2UuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL2NsYXNzZXMvY29tcGFyYXRvci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvZnVuY3Rpb25zL3NhdGlzZmllcy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3RvLWNvbXBhcmF0b3JzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbWF4LXNhdGlzZnlpbmcuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9taW4tc2F0aXNmeWluZy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL21pbi12ZXJzaW9uLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvdmFsaWQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3NlbXZlckA3LjMuNC9ub2RlX21vZHVsZXMvc2VtdmVyL3Jhbmdlcy9vdXRzaWRlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvZ3RyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvbHRyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvaW50ZXJzZWN0cy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vc2VtdmVyQDcuMy40L25vZGVfbW9kdWxlcy9zZW12ZXIvcmFuZ2VzL3NpbXBsaWZ5LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9yYW5nZXMvc3Vic2V0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9zZW12ZXJANy4zLjQvbm9kZV9tb2R1bGVzL3NlbXZlci9pbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tZWxlbWVudHR5cGVAMi4xLjAvbm9kZV9tb2R1bGVzL2RvbWVsZW1lbnR0eXBlL2xpYi9pbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZW50aXRpZXNAMi4yLjAvbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9kZWNvZGVfY29kZXBvaW50LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9lbnRpdGllc0AyLjIuMC9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2RlY29kZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZW50aXRpZXNAMi4yLjAvbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9lbmNvZGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2VudGl0aWVzQDIuMi4wL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvaW5kZXguanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RvbS1zZXJpYWxpemVyQDEuMi4wL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9saWIvZm9yZWlnbk5hbWVzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb20tc2VyaWFsaXplckAxLjIuMC9ub2RlX21vZHVsZXMvZG9tLXNlcmlhbGl6ZXIvbGliL2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odG1scGFyc2VyMkA2LjAuMS9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1Rva2VuaXplci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vaHRtbHBhcnNlcjJANi4wLjEvbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9QYXJzZXIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RvbWhhbmRsZXJANC4wLjAvbm9kZV9tb2R1bGVzL2RvbWhhbmRsZXIvbGliL25vZGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RvbWhhbmRsZXJANC4wLjAvbm9kZV9tb2R1bGVzL2RvbWhhbmRsZXIvbGliL2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb211dGlsc0AyLjQuNC9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3RhZ3R5cGVzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb211dGlsc0AyLjQuNC9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3N0cmluZ2lmeS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tdXRpbHNAMi40LjQvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi90cmF2ZXJzYWwuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2RvbXV0aWxzQDIuNC40L25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvbWFuaXB1bGF0aW9uLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb211dGlsc0AyLjQuNC9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3F1ZXJ5aW5nLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb211dGlsc0AyLjQuNC9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2xlZ2FjeS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vZG9tdXRpbHNAMi40LjQvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9oZWxwZXJzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9kb211dGlsc0AyLjQuNC9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odG1scGFyc2VyMkA2LjAuMS9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL0ZlZWRIYW5kbGVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9odG1scGFyc2VyMkA2LjAuMS9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2luZGV4LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9wcm9wLXR5cGVzQDE1LjcuMi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Byb3AtdHlwZXNAMTUuNy4yL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcHJvcC10eXBlc0AxNS43LjIvbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCAiLi4vLi4vc3JjL2xpYi9sYXVuY2hJZGxlV29ya2VyLnRzIiwgIi4uLy4uL3NyYy9saWIvaW5qZWN0U2VydmljZVdvcmtlci50cyIsICIuLi8uLi9zcmMvX2Rldl8vTmV3UHJvamVjdFBhZ2UudHN4IiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9pZGJANi4wLjAvbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9lc20vd3JhcC1pZGItdmFsdWUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2lkYkA2LjAuMC9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2VzbS9pbmRleC5qcyIsICIuLi8uLi9zcmMvX2Rldl8vZ2V0UGFja2FnZUlELnRzeCIsICIuLi8uLi9zcmMvbGliL1N0b3JlZFBhY2thZ2UudHMiLCAiLi4vLi4vc3JjL2xpYi9FcnJvckNvZGUudHN4IiwgIi4uLy4uL3NyYy9saWIvRVNCdWlsZFBhY2thZ2UudHN4IiwgIi4uLy4uL3NyYy9saWIvZ2V0Q2FjaGUudHN4IiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yb290LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFJhd1RhZy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3RMaWtlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXkuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3QuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNGdW5jdGlvbi5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29yZUpzRGF0YS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNNYXNrZWQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvU291cmNlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNOYXRpdmUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFZhbHVlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXROYXRpdmUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1dlYWtNYXAuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VDcmVhdGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVmaW5lUHJvcGVydHkuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5RWFjaC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJbmRleC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2VxLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NpZ25WYWx1ZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weU9iamVjdC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0xlbmd0aC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0FycmF5TGlrZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNQcm90b3R5cGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VUaW1lcy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzQXJndW1lbnRzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJndW1lbnRzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJGYWxzZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzVHlwZWRBcnJheS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVVuYXJ5LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzVHlwZWRBcnJheS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb3ZlckFyZy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5cy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUtleXMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMva2V5cy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5c0luLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlS2V5c0luLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXNJbi5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlQ3JlYXRlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoQ2xlYXIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hEZWxldGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hHZXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hIYXMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hTZXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0hhc2guanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUNsZWFyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NvY0luZGV4T2YuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZURlbGV0ZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlR2V0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVIYXMuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZVNldC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fTGlzdENhY2hlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXAuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlQ2xlYXIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzS2V5YWJsZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TWFwRGF0YS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVEZWxldGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlR2V0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUhhcy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVTZXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX01hcENhY2hlLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheVB1c2guanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tDbGVhci5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tEZWxldGUuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrR2V0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0hhcy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tTZXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N0YWNrLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQXNzaWduLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlQXNzaWduSW4uanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VDbG9uZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlGaWx0ZXIuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvc3R1YkFycmF5LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3B5U3ltYm9scy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0U3ltYm9sc0luLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb3B5U3ltYm9sc0luLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0QWxsS2V5cy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0QWxsS2V5cy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0QWxsS2V5c0luLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19EYXRhVmlldy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fUHJvbWlzZS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU2V0LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRUYWcuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2luaXRDbG9uZUFycmF5LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19VaW50OEFycmF5LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZUFycmF5QnVmZmVyLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZURhdGFWaWV3LmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVJlZ0V4cC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVTeW1ib2wuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lVHlwZWRBcnJheS5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lQnlUYWcuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2luaXRDbG9uZU9iamVjdC5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbG9kYXNoLWVzQDQuMTcuMjEvbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTWFwLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzTWFwLmpzIiwgIi4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9sb2Rhc2gtZXNANC4xNy4yMS9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNTZXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTZXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xvZGFzaC1lc0A0LjE3LjIxL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY2xvbmVEZWVwLmpzIiwgIi4uLy4uL3NyYy9saWIvUGFja2FnZUpTT04udHMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BqYXJyZWQvaHRtbGJ1aWxkQDEuMC4yL25vZGVfbW9kdWxlcy9AamFycmVkL2h0bWxidWlsZC9pbmRleC5tanMiLCAiLi4vLi4vc3JjL2xpYi9Sb3V0ZS50cyIsICIuLi8uLi9zcmMvbGliL3JvdXRlci9mcy1uYXRpdmUudHMiLCAiLi4vLi4vc3JjL2xpYi9EYXRhYmFzZS50cyIsICIuLi8uLi9zcmMvbGliL3JwYy50cyIsICIuLi8uLi9zcmMvbGliL1BhY2thZ2VyLnRzIiwgIi4uLy4uL3NyYy9saWIvSW5pdGlhbFBhY2thZ2VyLnRzIiwgIi4uLy4uL3NyYy9pY29ucy9HZWFySWNvbi50c3giLCAiLi4vLi4vZG9jcy9QYWNrYWdlSlNPTkVkaXRvci50c3giLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LXBvcnRhbEA0LjIuMV9yZWFjdEAxNy4wLjEvbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9lcy9Qb3J0YWxDb21wYXQuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LXBvcnRhbEA0LjIuMV9yZWFjdEAxNy4wLjEvbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9lcy9Qb3J0YWwuanMiLCAiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3JlYWN0LXBvcnRhbEA0LjIuMV9yZWFjdEAxNy4wLjEvbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9lcy91dGlscy5qcyIsICIuLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vcmVhY3QtcG9ydGFsQDQuMi4xX3JlYWN0QDE3LjAuMS9ub2RlX21vZHVsZXMvcmVhY3QtcG9ydGFsL2VzL0xlZ2FjeVBvcnRhbC5qcyIsICIuLi8uLi9zcmMvaWNvbnMvRm9sZGVyLnRzeCIsICIuLi8uLi9zcmMvaWNvbnMvZmlsZXR5cGVzL0NTU0ZpbGVUeXBlLnRzeCIsICIuLi8uLi9zcmMvaWNvbnMvZmlsZXR5cGVzL0hUTUxGaWxlVHlwZS50c3giLCAiLi4vLi4vc3JjL2ljb25zL2ZpbGV0eXBlcy9KYXZhU2NyaXB0RmlsZVR5cGUudHN4IiwgIi4uLy4uL3NyYy9pY29ucy9maWxldHlwZXMvVHlwZVNjcmlwdEZpbGVUeXBlLnRzeCIsICIuLi8uLi9zcmMvaWNvbnMvZmlsZXR5cGVzL2ZpbGV0eXBlcy50c3giLCAiLi4vLi4vc3JjL19kZXZfL3NldHVwLnRzeCJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsICIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsICIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsICIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjFcIjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB0eXBlTWFwIFtPYmplY3RdIE1hcCBvZiBNSU1FIHR5cGUgLT4gQXJyYXlbZXh0ZW5zaW9uc11cbiAqIEBwYXJhbSAuLi5cbiAqL1xuZnVuY3Rpb24gTWltZSgpIHtcbiAgdGhpcy5fdHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9leHRlbnNpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHRoaXMuZGVmaW5lKGFyZ3VtZW50c1tpXSk7XG4gIH1cblxuICB0aGlzLmRlZmluZSA9IHRoaXMuZGVmaW5lLmJpbmQodGhpcyk7XG4gIHRoaXMuZ2V0VHlwZSA9IHRoaXMuZ2V0VHlwZS5iaW5kKHRoaXMpO1xuICB0aGlzLmdldEV4dGVuc2lvbiA9IHRoaXMuZ2V0RXh0ZW5zaW9uLmJpbmQodGhpcyk7XG59XG5cbi8qKlxuICogRGVmaW5lIG1pbWV0eXBlIC0+IGV4dGVuc2lvbiBtYXBwaW5ncy4gIEVhY2gga2V5IGlzIGEgbWltZS10eXBlIHRoYXQgbWFwc1xuICogdG8gYW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIHR5cGUuICBUaGUgZmlyc3QgZXh0ZW5zaW9uIGlzXG4gKiB1c2VkIGFzIHRoZSBkZWZhdWx0IGV4dGVuc2lvbiBmb3IgdGhlIHR5cGUuXG4gKlxuICogZS5nLiBtaW1lLmRlZmluZSh7J2F1ZGlvL29nZycsIFsnb2dhJywgJ29nZycsICdzcHgnXX0pO1xuICpcbiAqIElmIGEgdHlwZSBkZWNsYXJlcyBhbiBleHRlbnNpb24gdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQsIGFuIGVycm9yIHdpbGxcbiAqIGJlIHRocm93bi4gIFRvIHN1cHByZXNzIHRoaXMgZXJyb3IgYW5kIGZvcmNlIHRoZSBleHRlbnNpb24gdG8gYmUgYXNzb2NpYXRlZFxuICogd2l0aCB0aGUgbmV3IHR5cGUsIHBhc3MgYGZvcmNlYD10cnVlLiAgQWx0ZXJuYXRpdmVseSwgeW91IG1heSBwcmVmaXggdGhlXG4gKiBleHRlbnNpb24gd2l0aCBcIipcIiB0byBtYXAgdGhlIHR5cGUgdG8gZXh0ZW5zaW9uLCB3aXRob3V0IG1hcHBpbmcgdGhlXG4gKiBleHRlbnNpb24gdG8gdGhlIHR5cGUuXG4gKlxuICogZS5nLiBtaW1lLmRlZmluZSh7J2F1ZGlvL3dhdicsIFsnd2F2J119LCB7J2F1ZGlvL3gtd2F2JywgWycqd2F2J119KTtcbiAqXG4gKlxuICogQHBhcmFtIG1hcCAoT2JqZWN0KSB0eXBlIGRlZmluaXRpb25zXG4gKiBAcGFyYW0gZm9yY2UgKEJvb2xlYW4pIGlmIHRydWUsIGZvcmNlIG92ZXJyaWRpbmcgb2YgZXhpc3RpbmcgZGVmaW5pdGlvbnNcbiAqL1xuTWltZS5wcm90b3R5cGUuZGVmaW5lID0gZnVuY3Rpb24odHlwZU1hcCwgZm9yY2UpIHtcbiAgZm9yIChsZXQgdHlwZSBpbiB0eXBlTWFwKSB7XG4gICAgbGV0IGV4dGVuc2lvbnMgPSB0eXBlTWFwW3R5cGVdLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4dGVuc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGV4dCA9IGV4dGVuc2lvbnNbaV07XG5cbiAgICAgIC8vICcqJyBwcmVmaXggPSBub3QgdGhlIHByZWZlcnJlZCB0eXBlIGZvciB0aGlzIGV4dGVuc2lvbi4gIFNvIGZpeHVwIHRoZVxuICAgICAgLy8gZXh0ZW5zaW9uLCBhbmQgc2tpcCBpdC5cbiAgICAgIGlmIChleHRbMF0gPT09ICcqJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmb3JjZSAmJiAoZXh0IGluIHRoaXMuX3R5cGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0F0dGVtcHQgdG8gY2hhbmdlIG1hcHBpbmcgZm9yIFwiJyArIGV4dCArXG4gICAgICAgICAgJ1wiIGV4dGVuc2lvbiBmcm9tIFwiJyArIHRoaXMuX3R5cGVzW2V4dF0gKyAnXCIgdG8gXCInICsgdHlwZSArXG4gICAgICAgICAgJ1wiLiBQYXNzIGBmb3JjZT10cnVlYCB0byBhbGxvdyB0aGlzLCBvdGhlcndpc2UgcmVtb3ZlIFwiJyArIGV4dCArXG4gICAgICAgICAgJ1wiIGZyb20gdGhlIGxpc3Qgb2YgZXh0ZW5zaW9ucyBmb3IgXCInICsgdHlwZSArICdcIi4nXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3R5cGVzW2V4dF0gPSB0eXBlO1xuICAgIH1cblxuICAgIC8vIFVzZSBmaXJzdCBleHRlbnNpb24gYXMgZGVmYXVsdFxuICAgIGlmIChmb3JjZSB8fCAhdGhpcy5fZXh0ZW5zaW9uc1t0eXBlXSkge1xuICAgICAgY29uc3QgZXh0ID0gZXh0ZW5zaW9uc1swXTtcbiAgICAgIHRoaXMuX2V4dGVuc2lvbnNbdHlwZV0gPSAoZXh0WzBdICE9PSAnKicpID8gZXh0IDogZXh0LnN1YnN0cigxKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTG9va3VwIGEgbWltZSB0eXBlIGJhc2VkIG9uIGV4dGVuc2lvblxuICovXG5NaW1lLnByb3RvdHlwZS5nZXRUeXBlID0gZnVuY3Rpb24ocGF0aCkge1xuICBwYXRoID0gU3RyaW5nKHBhdGgpO1xuICBsZXQgbGFzdCA9IHBhdGgucmVwbGFjZSgvXi4qWy9cXFxcXS8sICcnKS50b0xvd2VyQ2FzZSgpO1xuICBsZXQgZXh0ID0gbGFzdC5yZXBsYWNlKC9eLipcXC4vLCAnJykudG9Mb3dlckNhc2UoKTtcblxuICBsZXQgaGFzUGF0aCA9IGxhc3QubGVuZ3RoIDwgcGF0aC5sZW5ndGg7XG4gIGxldCBoYXNEb3QgPSBleHQubGVuZ3RoIDwgbGFzdC5sZW5ndGggLSAxO1xuXG4gIHJldHVybiAoaGFzRG90IHx8ICFoYXNQYXRoKSAmJiB0aGlzLl90eXBlc1tleHRdIHx8IG51bGw7XG59O1xuXG4vKipcbiAqIFJldHVybiBmaWxlIGV4dGVuc2lvbiBhc3NvY2lhdGVkIHdpdGggYSBtaW1lIHR5cGVcbiAqL1xuTWltZS5wcm90b3R5cGUuZ2V0RXh0ZW5zaW9uID0gZnVuY3Rpb24odHlwZSkge1xuICB0eXBlID0gL15cXHMqKFteO1xcc10qKS8udGVzdCh0eXBlKSAmJiBSZWdFeHAuJDE7XG4gIHJldHVybiB0eXBlICYmIHRoaXMuX2V4dGVuc2lvbnNbdHlwZS50b0xvd2VyQ2FzZSgpXSB8fCBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNaW1lO1xuIiwgIm1vZHVsZS5leHBvcnRzID0ge1wiYXBwbGljYXRpb24vYW5kcmV3LWluc2V0XCI6W1wiZXpcIl0sXCJhcHBsaWNhdGlvbi9hcHBsaXh3YXJlXCI6W1wiYXdcIl0sXCJhcHBsaWNhdGlvbi9hdG9tK3htbFwiOltcImF0b21cIl0sXCJhcHBsaWNhdGlvbi9hdG9tY2F0K3htbFwiOltcImF0b21jYXRcIl0sXCJhcHBsaWNhdGlvbi9hdG9tZGVsZXRlZCt4bWxcIjpbXCJhdG9tZGVsZXRlZFwiXSxcImFwcGxpY2F0aW9uL2F0b21zdmMreG1sXCI6W1wiYXRvbXN2Y1wiXSxcImFwcGxpY2F0aW9uL2F0c2MtZHdkK3htbFwiOltcImR3ZFwiXSxcImFwcGxpY2F0aW9uL2F0c2MtaGVsZCt4bWxcIjpbXCJoZWxkXCJdLFwiYXBwbGljYXRpb24vYXRzYy1yc2F0K3htbFwiOltcInJzYXRcIl0sXCJhcHBsaWNhdGlvbi9iZG9jXCI6W1wiYmRvY1wiXSxcImFwcGxpY2F0aW9uL2NhbGVuZGFyK3htbFwiOltcInhjc1wiXSxcImFwcGxpY2F0aW9uL2NjeG1sK3htbFwiOltcImNjeG1sXCJdLFwiYXBwbGljYXRpb24vY2RmeCt4bWxcIjpbXCJjZGZ4XCJdLFwiYXBwbGljYXRpb24vY2RtaS1jYXBhYmlsaXR5XCI6W1wiY2RtaWFcIl0sXCJhcHBsaWNhdGlvbi9jZG1pLWNvbnRhaW5lclwiOltcImNkbWljXCJdLFwiYXBwbGljYXRpb24vY2RtaS1kb21haW5cIjpbXCJjZG1pZFwiXSxcImFwcGxpY2F0aW9uL2NkbWktb2JqZWN0XCI6W1wiY2RtaW9cIl0sXCJhcHBsaWNhdGlvbi9jZG1pLXF1ZXVlXCI6W1wiY2RtaXFcIl0sXCJhcHBsaWNhdGlvbi9jdS1zZWVtZVwiOltcImN1XCJdLFwiYXBwbGljYXRpb24vZGFzaCt4bWxcIjpbXCJtcGRcIl0sXCJhcHBsaWNhdGlvbi9kYXZtb3VudCt4bWxcIjpbXCJkYXZtb3VudFwiXSxcImFwcGxpY2F0aW9uL2RvY2Jvb2sreG1sXCI6W1wiZGJrXCJdLFwiYXBwbGljYXRpb24vZHNzYytkZXJcIjpbXCJkc3NjXCJdLFwiYXBwbGljYXRpb24vZHNzYyt4bWxcIjpbXCJ4ZHNzY1wiXSxcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHRcIjpbXCJlY21hXCIsXCJlc1wiXSxcImFwcGxpY2F0aW9uL2VtbWEreG1sXCI6W1wiZW1tYVwiXSxcImFwcGxpY2F0aW9uL2Vtb3Rpb25tbCt4bWxcIjpbXCJlbW90aW9ubWxcIl0sXCJhcHBsaWNhdGlvbi9lcHViK3ppcFwiOltcImVwdWJcIl0sXCJhcHBsaWNhdGlvbi9leGlcIjpbXCJleGlcIl0sXCJhcHBsaWNhdGlvbi9mZHQreG1sXCI6W1wiZmR0XCJdLFwiYXBwbGljYXRpb24vZm9udC10ZHBmclwiOltcInBmclwiXSxcImFwcGxpY2F0aW9uL2dlbytqc29uXCI6W1wiZ2VvanNvblwiXSxcImFwcGxpY2F0aW9uL2dtbCt4bWxcIjpbXCJnbWxcIl0sXCJhcHBsaWNhdGlvbi9ncHgreG1sXCI6W1wiZ3B4XCJdLFwiYXBwbGljYXRpb24vZ3hmXCI6W1wiZ3hmXCJdLFwiYXBwbGljYXRpb24vZ3ppcFwiOltcImd6XCJdLFwiYXBwbGljYXRpb24vaGpzb25cIjpbXCJoanNvblwiXSxcImFwcGxpY2F0aW9uL2h5cGVyc3R1ZGlvXCI6W1wic3RrXCJdLFwiYXBwbGljYXRpb24vaW5rbWwreG1sXCI6W1wiaW5rXCIsXCJpbmttbFwiXSxcImFwcGxpY2F0aW9uL2lwZml4XCI6W1wiaXBmaXhcIl0sXCJhcHBsaWNhdGlvbi9pdHMreG1sXCI6W1wiaXRzXCJdLFwiYXBwbGljYXRpb24vamF2YS1hcmNoaXZlXCI6W1wiamFyXCIsXCJ3YXJcIixcImVhclwiXSxcImFwcGxpY2F0aW9uL2phdmEtc2VyaWFsaXplZC1vYmplY3RcIjpbXCJzZXJcIl0sXCJhcHBsaWNhdGlvbi9qYXZhLXZtXCI6W1wiY2xhc3NcIl0sXCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0XCI6W1wianNcIixcIm1qc1wiXSxcImFwcGxpY2F0aW9uL2pzb25cIjpbXCJqc29uXCIsXCJtYXBcIl0sXCJhcHBsaWNhdGlvbi9qc29uNVwiOltcImpzb241XCJdLFwiYXBwbGljYXRpb24vanNvbm1sK2pzb25cIjpbXCJqc29ubWxcIl0sXCJhcHBsaWNhdGlvbi9sZCtqc29uXCI6W1wianNvbmxkXCJdLFwiYXBwbGljYXRpb24vbGdyK3htbFwiOltcImxnclwiXSxcImFwcGxpY2F0aW9uL2xvc3QreG1sXCI6W1wibG9zdHhtbFwiXSxcImFwcGxpY2F0aW9uL21hYy1iaW5oZXg0MFwiOltcImhxeFwiXSxcImFwcGxpY2F0aW9uL21hYy1jb21wYWN0cHJvXCI6W1wiY3B0XCJdLFwiYXBwbGljYXRpb24vbWFkcyt4bWxcIjpbXCJtYWRzXCJdLFwiYXBwbGljYXRpb24vbWFuaWZlc3QranNvblwiOltcIndlYm1hbmlmZXN0XCJdLFwiYXBwbGljYXRpb24vbWFyY1wiOltcIm1yY1wiXSxcImFwcGxpY2F0aW9uL21hcmN4bWwreG1sXCI6W1wibXJjeFwiXSxcImFwcGxpY2F0aW9uL21hdGhlbWF0aWNhXCI6W1wibWFcIixcIm5iXCIsXCJtYlwiXSxcImFwcGxpY2F0aW9uL21hdGhtbCt4bWxcIjpbXCJtYXRobWxcIl0sXCJhcHBsaWNhdGlvbi9tYm94XCI6W1wibWJveFwiXSxcImFwcGxpY2F0aW9uL21lZGlhc2VydmVyY29udHJvbCt4bWxcIjpbXCJtc2NtbFwiXSxcImFwcGxpY2F0aW9uL21ldGFsaW5rK3htbFwiOltcIm1ldGFsaW5rXCJdLFwiYXBwbGljYXRpb24vbWV0YWxpbms0K3htbFwiOltcIm1ldGE0XCJdLFwiYXBwbGljYXRpb24vbWV0cyt4bWxcIjpbXCJtZXRzXCJdLFwiYXBwbGljYXRpb24vbW10LWFlaSt4bWxcIjpbXCJtYWVpXCJdLFwiYXBwbGljYXRpb24vbW10LXVzZCt4bWxcIjpbXCJtdXNkXCJdLFwiYXBwbGljYXRpb24vbW9kcyt4bWxcIjpbXCJtb2RzXCJdLFwiYXBwbGljYXRpb24vbXAyMVwiOltcIm0yMVwiLFwibXAyMVwiXSxcImFwcGxpY2F0aW9uL21wNFwiOltcIm1wNHNcIixcIm00cFwiXSxcImFwcGxpY2F0aW9uL21yYi1jb25zdW1lcit4bWxcIjpbXCIqeGRmXCJdLFwiYXBwbGljYXRpb24vbXJiLXB1Ymxpc2greG1sXCI6W1wiKnhkZlwiXSxcImFwcGxpY2F0aW9uL21zd29yZFwiOltcImRvY1wiLFwiZG90XCJdLFwiYXBwbGljYXRpb24vbXhmXCI6W1wibXhmXCJdLFwiYXBwbGljYXRpb24vbi1xdWFkc1wiOltcIm5xXCJdLFwiYXBwbGljYXRpb24vbi10cmlwbGVzXCI6W1wibnRcIl0sXCJhcHBsaWNhdGlvbi9ub2RlXCI6W1wiY2pzXCJdLFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI6W1wiYmluXCIsXCJkbXNcIixcImxyZlwiLFwibWFyXCIsXCJzb1wiLFwiZGlzdFwiLFwiZGlzdHpcIixcInBrZ1wiLFwiYnBrXCIsXCJkdW1wXCIsXCJlbGNcIixcImRlcGxveVwiLFwiZXhlXCIsXCJkbGxcIixcImRlYlwiLFwiZG1nXCIsXCJpc29cIixcImltZ1wiLFwibXNpXCIsXCJtc3BcIixcIm1zbVwiLFwiYnVmZmVyXCJdLFwiYXBwbGljYXRpb24vb2RhXCI6W1wib2RhXCJdLFwiYXBwbGljYXRpb24vb2VicHMtcGFja2FnZSt4bWxcIjpbXCJvcGZcIl0sXCJhcHBsaWNhdGlvbi9vZ2dcIjpbXCJvZ3hcIl0sXCJhcHBsaWNhdGlvbi9vbWRvYyt4bWxcIjpbXCJvbWRvY1wiXSxcImFwcGxpY2F0aW9uL29uZW5vdGVcIjpbXCJvbmV0b2NcIixcIm9uZXRvYzJcIixcIm9uZXRtcFwiLFwib25lcGtnXCJdLFwiYXBwbGljYXRpb24vb3hwc1wiOltcIm94cHNcIl0sXCJhcHBsaWNhdGlvbi9wMnAtb3ZlcmxheSt4bWxcIjpbXCJyZWxvXCJdLFwiYXBwbGljYXRpb24vcGF0Y2gtb3BzLWVycm9yK3htbFwiOltcIip4ZXJcIl0sXCJhcHBsaWNhdGlvbi9wZGZcIjpbXCJwZGZcIl0sXCJhcHBsaWNhdGlvbi9wZ3AtZW5jcnlwdGVkXCI6W1wicGdwXCJdLFwiYXBwbGljYXRpb24vcGdwLXNpZ25hdHVyZVwiOltcImFzY1wiLFwic2lnXCJdLFwiYXBwbGljYXRpb24vcGljcy1ydWxlc1wiOltcInByZlwiXSxcImFwcGxpY2F0aW9uL3BrY3MxMFwiOltcInAxMFwiXSxcImFwcGxpY2F0aW9uL3BrY3M3LW1pbWVcIjpbXCJwN21cIixcInA3Y1wiXSxcImFwcGxpY2F0aW9uL3BrY3M3LXNpZ25hdHVyZVwiOltcInA3c1wiXSxcImFwcGxpY2F0aW9uL3BrY3M4XCI6W1wicDhcIl0sXCJhcHBsaWNhdGlvbi9wa2l4LWF0dHItY2VydFwiOltcImFjXCJdLFwiYXBwbGljYXRpb24vcGtpeC1jZXJ0XCI6W1wiY2VyXCJdLFwiYXBwbGljYXRpb24vcGtpeC1jcmxcIjpbXCJjcmxcIl0sXCJhcHBsaWNhdGlvbi9wa2l4LXBraXBhdGhcIjpbXCJwa2lwYXRoXCJdLFwiYXBwbGljYXRpb24vcGtpeGNtcFwiOltcInBraVwiXSxcImFwcGxpY2F0aW9uL3Bscyt4bWxcIjpbXCJwbHNcIl0sXCJhcHBsaWNhdGlvbi9wb3N0c2NyaXB0XCI6W1wiYWlcIixcImVwc1wiLFwicHNcIl0sXCJhcHBsaWNhdGlvbi9wcm92ZW5hbmNlK3htbFwiOltcInByb3Z4XCJdLFwiYXBwbGljYXRpb24vcHNrYyt4bWxcIjpbXCJwc2tjeG1sXCJdLFwiYXBwbGljYXRpb24vcmFtbCt5YW1sXCI6W1wicmFtbFwiXSxcImFwcGxpY2F0aW9uL3JkZit4bWxcIjpbXCJyZGZcIixcIm93bFwiXSxcImFwcGxpY2F0aW9uL3JlZ2luZm8reG1sXCI6W1wicmlmXCJdLFwiYXBwbGljYXRpb24vcmVsYXgtbmctY29tcGFjdC1zeW50YXhcIjpbXCJybmNcIl0sXCJhcHBsaWNhdGlvbi9yZXNvdXJjZS1saXN0cyt4bWxcIjpbXCJybFwiXSxcImFwcGxpY2F0aW9uL3Jlc291cmNlLWxpc3RzLWRpZmYreG1sXCI6W1wicmxkXCJdLFwiYXBwbGljYXRpb24vcmxzLXNlcnZpY2VzK3htbFwiOltcInJzXCJdLFwiYXBwbGljYXRpb24vcm91dGUtYXBkK3htbFwiOltcInJhcGRcIl0sXCJhcHBsaWNhdGlvbi9yb3V0ZS1zLXRzaWQreG1sXCI6W1wic2xzXCJdLFwiYXBwbGljYXRpb24vcm91dGUtdXNkK3htbFwiOltcInJ1c2RcIl0sXCJhcHBsaWNhdGlvbi9ycGtpLWdob3N0YnVzdGVyc1wiOltcImdiclwiXSxcImFwcGxpY2F0aW9uL3Jwa2ktbWFuaWZlc3RcIjpbXCJtZnRcIl0sXCJhcHBsaWNhdGlvbi9ycGtpLXJvYVwiOltcInJvYVwiXSxcImFwcGxpY2F0aW9uL3JzZCt4bWxcIjpbXCJyc2RcIl0sXCJhcHBsaWNhdGlvbi9yc3MreG1sXCI6W1wicnNzXCJdLFwiYXBwbGljYXRpb24vcnRmXCI6W1wicnRmXCJdLFwiYXBwbGljYXRpb24vc2JtbCt4bWxcIjpbXCJzYm1sXCJdLFwiYXBwbGljYXRpb24vc2N2cC1jdi1yZXF1ZXN0XCI6W1wic2NxXCJdLFwiYXBwbGljYXRpb24vc2N2cC1jdi1yZXNwb25zZVwiOltcInNjc1wiXSxcImFwcGxpY2F0aW9uL3NjdnAtdnAtcmVxdWVzdFwiOltcInNwcVwiXSxcImFwcGxpY2F0aW9uL3NjdnAtdnAtcmVzcG9uc2VcIjpbXCJzcHBcIl0sXCJhcHBsaWNhdGlvbi9zZHBcIjpbXCJzZHBcIl0sXCJhcHBsaWNhdGlvbi9zZW5tbCt4bWxcIjpbXCJzZW5tbHhcIl0sXCJhcHBsaWNhdGlvbi9zZW5zbWwreG1sXCI6W1wic2Vuc21seFwiXSxcImFwcGxpY2F0aW9uL3NldC1wYXltZW50LWluaXRpYXRpb25cIjpbXCJzZXRwYXlcIl0sXCJhcHBsaWNhdGlvbi9zZXQtcmVnaXN0cmF0aW9uLWluaXRpYXRpb25cIjpbXCJzZXRyZWdcIl0sXCJhcHBsaWNhdGlvbi9zaGYreG1sXCI6W1wic2hmXCJdLFwiYXBwbGljYXRpb24vc2lldmVcIjpbXCJzaXZcIixcInNpZXZlXCJdLFwiYXBwbGljYXRpb24vc21pbCt4bWxcIjpbXCJzbWlcIixcInNtaWxcIl0sXCJhcHBsaWNhdGlvbi9zcGFycWwtcXVlcnlcIjpbXCJycVwiXSxcImFwcGxpY2F0aW9uL3NwYXJxbC1yZXN1bHRzK3htbFwiOltcInNyeFwiXSxcImFwcGxpY2F0aW9uL3NyZ3NcIjpbXCJncmFtXCJdLFwiYXBwbGljYXRpb24vc3Jncyt4bWxcIjpbXCJncnhtbFwiXSxcImFwcGxpY2F0aW9uL3NydSt4bWxcIjpbXCJzcnVcIl0sXCJhcHBsaWNhdGlvbi9zc2RsK3htbFwiOltcInNzZGxcIl0sXCJhcHBsaWNhdGlvbi9zc21sK3htbFwiOltcInNzbWxcIl0sXCJhcHBsaWNhdGlvbi9zd2lkK3htbFwiOltcInN3aWR0YWdcIl0sXCJhcHBsaWNhdGlvbi90ZWkreG1sXCI6W1widGVpXCIsXCJ0ZWljb3JwdXNcIl0sXCJhcHBsaWNhdGlvbi90aHJhdWQreG1sXCI6W1widGZpXCJdLFwiYXBwbGljYXRpb24vdGltZXN0YW1wZWQtZGF0YVwiOltcInRzZFwiXSxcImFwcGxpY2F0aW9uL3RvbWxcIjpbXCJ0b21sXCJdLFwiYXBwbGljYXRpb24vdHRtbCt4bWxcIjpbXCJ0dG1sXCJdLFwiYXBwbGljYXRpb24vdWJqc29uXCI6W1widWJqXCJdLFwiYXBwbGljYXRpb24vdXJjLXJlc3NoZWV0K3htbFwiOltcInJzaGVldFwiXSxcImFwcGxpY2F0aW9uL3VyYy10YXJnZXRkZXNjK3htbFwiOltcInRkXCJdLFwiYXBwbGljYXRpb24vdm9pY2V4bWwreG1sXCI6W1widnhtbFwiXSxcImFwcGxpY2F0aW9uL3dhc21cIjpbXCJ3YXNtXCJdLFwiYXBwbGljYXRpb24vd2lkZ2V0XCI6W1wid2d0XCJdLFwiYXBwbGljYXRpb24vd2luaGxwXCI6W1wiaGxwXCJdLFwiYXBwbGljYXRpb24vd3NkbCt4bWxcIjpbXCJ3c2RsXCJdLFwiYXBwbGljYXRpb24vd3Nwb2xpY3kreG1sXCI6W1wid3Nwb2xpY3lcIl0sXCJhcHBsaWNhdGlvbi94YW1sK3htbFwiOltcInhhbWxcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLWF0dCt4bWxcIjpbXCJ4YXZcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLWNhcHMreG1sXCI6W1wieGNhXCJdLFwiYXBwbGljYXRpb24veGNhcC1kaWZmK3htbFwiOltcInhkZlwiXSxcImFwcGxpY2F0aW9uL3hjYXAtZWwreG1sXCI6W1wieGVsXCJdLFwiYXBwbGljYXRpb24veGNhcC1lcnJvcit4bWxcIjpbXCJ4ZXJcIl0sXCJhcHBsaWNhdGlvbi94Y2FwLW5zK3htbFwiOltcInhuc1wiXSxcImFwcGxpY2F0aW9uL3hlbmMreG1sXCI6W1wieGVuY1wiXSxcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiOltcInhodG1sXCIsXCJ4aHRcIl0sXCJhcHBsaWNhdGlvbi94bGlmZit4bWxcIjpbXCJ4bGZcIl0sXCJhcHBsaWNhdGlvbi94bWxcIjpbXCJ4bWxcIixcInhzbFwiLFwieHNkXCIsXCJybmdcIl0sXCJhcHBsaWNhdGlvbi94bWwtZHRkXCI6W1wiZHRkXCJdLFwiYXBwbGljYXRpb24veG9wK3htbFwiOltcInhvcFwiXSxcImFwcGxpY2F0aW9uL3hwcm9jK3htbFwiOltcInhwbFwiXSxcImFwcGxpY2F0aW9uL3hzbHQreG1sXCI6W1wiKnhzbFwiLFwieHNsdFwiXSxcImFwcGxpY2F0aW9uL3hzcGYreG1sXCI6W1wieHNwZlwiXSxcImFwcGxpY2F0aW9uL3h2K3htbFwiOltcIm14bWxcIixcInhodm1sXCIsXCJ4dm1sXCIsXCJ4dm1cIl0sXCJhcHBsaWNhdGlvbi95YW5nXCI6W1wieWFuZ1wiXSxcImFwcGxpY2F0aW9uL3lpbit4bWxcIjpbXCJ5aW5cIl0sXCJhcHBsaWNhdGlvbi96aXBcIjpbXCJ6aXBcIl0sXCJhdWRpby8zZ3BwXCI6W1wiKjNncHBcIl0sXCJhdWRpby9hZHBjbVwiOltcImFkcFwiXSxcImF1ZGlvL2FtclwiOltcImFtclwiXSxcImF1ZGlvL2Jhc2ljXCI6W1wiYXVcIixcInNuZFwiXSxcImF1ZGlvL21pZGlcIjpbXCJtaWRcIixcIm1pZGlcIixcImthclwiLFwicm1pXCJdLFwiYXVkaW8vbW9iaWxlLXhtZlwiOltcIm14bWZcIl0sXCJhdWRpby9tcDNcIjpbXCIqbXAzXCJdLFwiYXVkaW8vbXA0XCI6W1wibTRhXCIsXCJtcDRhXCJdLFwiYXVkaW8vbXBlZ1wiOltcIm1wZ2FcIixcIm1wMlwiLFwibXAyYVwiLFwibXAzXCIsXCJtMmFcIixcIm0zYVwiXSxcImF1ZGlvL29nZ1wiOltcIm9nYVwiLFwib2dnXCIsXCJzcHhcIixcIm9wdXNcIl0sXCJhdWRpby9zM21cIjpbXCJzM21cIl0sXCJhdWRpby9zaWxrXCI6W1wic2lsXCJdLFwiYXVkaW8vd2F2XCI6W1wid2F2XCJdLFwiYXVkaW8vd2F2ZVwiOltcIip3YXZcIl0sXCJhdWRpby93ZWJtXCI6W1wid2ViYVwiXSxcImF1ZGlvL3htXCI6W1wieG1cIl0sXCJmb250L2NvbGxlY3Rpb25cIjpbXCJ0dGNcIl0sXCJmb250L290ZlwiOltcIm90ZlwiXSxcImZvbnQvdHRmXCI6W1widHRmXCJdLFwiZm9udC93b2ZmXCI6W1wid29mZlwiXSxcImZvbnQvd29mZjJcIjpbXCJ3b2ZmMlwiXSxcImltYWdlL2FjZXNcIjpbXCJleHJcIl0sXCJpbWFnZS9hcG5nXCI6W1wiYXBuZ1wiXSxcImltYWdlL2F2aWZcIjpbXCJhdmlmXCJdLFwiaW1hZ2UvYm1wXCI6W1wiYm1wXCJdLFwiaW1hZ2UvY2dtXCI6W1wiY2dtXCJdLFwiaW1hZ2UvZGljb20tcmxlXCI6W1wiZHJsZVwiXSxcImltYWdlL2VtZlwiOltcImVtZlwiXSxcImltYWdlL2ZpdHNcIjpbXCJmaXRzXCJdLFwiaW1hZ2UvZzNmYXhcIjpbXCJnM1wiXSxcImltYWdlL2dpZlwiOltcImdpZlwiXSxcImltYWdlL2hlaWNcIjpbXCJoZWljXCJdLFwiaW1hZ2UvaGVpYy1zZXF1ZW5jZVwiOltcImhlaWNzXCJdLFwiaW1hZ2UvaGVpZlwiOltcImhlaWZcIl0sXCJpbWFnZS9oZWlmLXNlcXVlbmNlXCI6W1wiaGVpZnNcIl0sXCJpbWFnZS9oZWoya1wiOltcImhlajJcIl0sXCJpbWFnZS9oc2oyXCI6W1wiaHNqMlwiXSxcImltYWdlL2llZlwiOltcImllZlwiXSxcImltYWdlL2psc1wiOltcImpsc1wiXSxcImltYWdlL2pwMlwiOltcImpwMlwiLFwianBnMlwiXSxcImltYWdlL2pwZWdcIjpbXCJqcGVnXCIsXCJqcGdcIixcImpwZVwiXSxcImltYWdlL2pwaFwiOltcImpwaFwiXSxcImltYWdlL2pwaGNcIjpbXCJqaGNcIl0sXCJpbWFnZS9qcG1cIjpbXCJqcG1cIl0sXCJpbWFnZS9qcHhcIjpbXCJqcHhcIixcImpwZlwiXSxcImltYWdlL2p4clwiOltcImp4clwiXSxcImltYWdlL2p4cmFcIjpbXCJqeHJhXCJdLFwiaW1hZ2Uvanhyc1wiOltcImp4cnNcIl0sXCJpbWFnZS9qeHNcIjpbXCJqeHNcIl0sXCJpbWFnZS9qeHNjXCI6W1wianhzY1wiXSxcImltYWdlL2p4c2lcIjpbXCJqeHNpXCJdLFwiaW1hZ2Uvanhzc1wiOltcImp4c3NcIl0sXCJpbWFnZS9rdHhcIjpbXCJrdHhcIl0sXCJpbWFnZS9rdHgyXCI6W1wia3R4MlwiXSxcImltYWdlL3BuZ1wiOltcInBuZ1wiXSxcImltYWdlL3NnaVwiOltcInNnaVwiXSxcImltYWdlL3N2Zyt4bWxcIjpbXCJzdmdcIixcInN2Z3pcIl0sXCJpbWFnZS90MzhcIjpbXCJ0MzhcIl0sXCJpbWFnZS90aWZmXCI6W1widGlmXCIsXCJ0aWZmXCJdLFwiaW1hZ2UvdGlmZi1meFwiOltcInRmeFwiXSxcImltYWdlL3dlYnBcIjpbXCJ3ZWJwXCJdLFwiaW1hZ2Uvd21mXCI6W1wid21mXCJdLFwibWVzc2FnZS9kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjpbXCJkaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIl0sXCJtZXNzYWdlL2dsb2JhbFwiOltcInU4bXNnXCJdLFwibWVzc2FnZS9nbG9iYWwtZGVsaXZlcnktc3RhdHVzXCI6W1widThkc25cIl0sXCJtZXNzYWdlL2dsb2JhbC1kaXNwb3NpdGlvbi1ub3RpZmljYXRpb25cIjpbXCJ1OG1kblwiXSxcIm1lc3NhZ2UvZ2xvYmFsLWhlYWRlcnNcIjpbXCJ1OGhkclwiXSxcIm1lc3NhZ2UvcmZjODIyXCI6W1wiZW1sXCIsXCJtaW1lXCJdLFwibW9kZWwvM21mXCI6W1wiM21mXCJdLFwibW9kZWwvZ2x0Zitqc29uXCI6W1wiZ2x0ZlwiXSxcIm1vZGVsL2dsdGYtYmluYXJ5XCI6W1wiZ2xiXCJdLFwibW9kZWwvaWdlc1wiOltcImlnc1wiLFwiaWdlc1wiXSxcIm1vZGVsL21lc2hcIjpbXCJtc2hcIixcIm1lc2hcIixcInNpbG9cIl0sXCJtb2RlbC9tdGxcIjpbXCJtdGxcIl0sXCJtb2RlbC9vYmpcIjpbXCJvYmpcIl0sXCJtb2RlbC9zdGxcIjpbXCJzdGxcIl0sXCJtb2RlbC92cm1sXCI6W1wid3JsXCIsXCJ2cm1sXCJdLFwibW9kZWwveDNkK2JpbmFyeVwiOltcIip4M2RiXCIsXCJ4M2RielwiXSxcIm1vZGVsL3gzZCtmYXN0aW5mb3NldFwiOltcIngzZGJcIl0sXCJtb2RlbC94M2QrdnJtbFwiOltcIip4M2R2XCIsXCJ4M2R2elwiXSxcIm1vZGVsL3gzZCt4bWxcIjpbXCJ4M2RcIixcIngzZHpcIl0sXCJtb2RlbC94M2QtdnJtbFwiOltcIngzZHZcIl0sXCJ0ZXh0L2NhY2hlLW1hbmlmZXN0XCI6W1wiYXBwY2FjaGVcIixcIm1hbmlmZXN0XCJdLFwidGV4dC9jYWxlbmRhclwiOltcImljc1wiLFwiaWZiXCJdLFwidGV4dC9jb2ZmZWVzY3JpcHRcIjpbXCJjb2ZmZWVcIixcImxpdGNvZmZlZVwiXSxcInRleHQvY3NzXCI6W1wiY3NzXCJdLFwidGV4dC9jc3ZcIjpbXCJjc3ZcIl0sXCJ0ZXh0L2h0bWxcIjpbXCJodG1sXCIsXCJodG1cIixcInNodG1sXCJdLFwidGV4dC9qYWRlXCI6W1wiamFkZVwiXSxcInRleHQvanN4XCI6W1wianN4XCJdLFwidGV4dC9sZXNzXCI6W1wibGVzc1wiXSxcInRleHQvbWFya2Rvd25cIjpbXCJtYXJrZG93blwiLFwibWRcIl0sXCJ0ZXh0L21hdGhtbFwiOltcIm1tbFwiXSxcInRleHQvbWR4XCI6W1wibWR4XCJdLFwidGV4dC9uM1wiOltcIm4zXCJdLFwidGV4dC9wbGFpblwiOltcInR4dFwiLFwidGV4dFwiLFwiY29uZlwiLFwiZGVmXCIsXCJsaXN0XCIsXCJsb2dcIixcImluXCIsXCJpbmlcIl0sXCJ0ZXh0L3JpY2h0ZXh0XCI6W1wicnR4XCJdLFwidGV4dC9ydGZcIjpbXCIqcnRmXCJdLFwidGV4dC9zZ21sXCI6W1wic2dtbFwiLFwic2dtXCJdLFwidGV4dC9zaGV4XCI6W1wic2hleFwiXSxcInRleHQvc2xpbVwiOltcInNsaW1cIixcInNsbVwiXSxcInRleHQvc3BkeFwiOltcInNwZHhcIl0sXCJ0ZXh0L3N0eWx1c1wiOltcInN0eWx1c1wiLFwic3R5bFwiXSxcInRleHQvdGFiLXNlcGFyYXRlZC12YWx1ZXNcIjpbXCJ0c3ZcIl0sXCJ0ZXh0L3Ryb2ZmXCI6W1widFwiLFwidHJcIixcInJvZmZcIixcIm1hblwiLFwibWVcIixcIm1zXCJdLFwidGV4dC90dXJ0bGVcIjpbXCJ0dGxcIl0sXCJ0ZXh0L3VyaS1saXN0XCI6W1widXJpXCIsXCJ1cmlzXCIsXCJ1cmxzXCJdLFwidGV4dC92Y2FyZFwiOltcInZjYXJkXCJdLFwidGV4dC92dHRcIjpbXCJ2dHRcIl0sXCJ0ZXh0L3htbFwiOltcIip4bWxcIl0sXCJ0ZXh0L3lhbWxcIjpbXCJ5YW1sXCIsXCJ5bWxcIl0sXCJ2aWRlby8zZ3BwXCI6W1wiM2dwXCIsXCIzZ3BwXCJdLFwidmlkZW8vM2dwcDJcIjpbXCIzZzJcIl0sXCJ2aWRlby9oMjYxXCI6W1wiaDI2MVwiXSxcInZpZGVvL2gyNjNcIjpbXCJoMjYzXCJdLFwidmlkZW8vaDI2NFwiOltcImgyNjRcIl0sXCJ2aWRlby9pc28uc2VnbWVudFwiOltcIm00c1wiXSxcInZpZGVvL2pwZWdcIjpbXCJqcGd2XCJdLFwidmlkZW8vanBtXCI6W1wiKmpwbVwiLFwianBnbVwiXSxcInZpZGVvL21qMlwiOltcIm1qMlwiLFwibWpwMlwiXSxcInZpZGVvL21wMnRcIjpbXCJ0c1wiXSxcInZpZGVvL21wNFwiOltcIm1wNFwiLFwibXA0dlwiLFwibXBnNFwiXSxcInZpZGVvL21wZWdcIjpbXCJtcGVnXCIsXCJtcGdcIixcIm1wZVwiLFwibTF2XCIsXCJtMnZcIl0sXCJ2aWRlby9vZ2dcIjpbXCJvZ3ZcIl0sXCJ2aWRlby9xdWlja3RpbWVcIjpbXCJxdFwiLFwibW92XCJdLFwidmlkZW8vd2VibVwiOltcIndlYm1cIl19OyIsICIndXNlIHN0cmljdCc7XG5cbmxldCBNaW1lID0gcmVxdWlyZSgnLi9NaW1lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNaW1lKHJlcXVpcmUoJy4vdHlwZXMvc3RhbmRhcmQnKSk7XG4iLCAiLy8gJ3BhdGgnIG1vZHVsZSBleHRyYWN0ZWQgZnJvbSBOb2RlLmpzIHY4LjExLjEgKG9ubHkgdGhlIHBvc2l4IHBhcnQpXG4vLyB0cmFuc3BsaXRlZCB3aXRoIEJhYmVsXG5cbi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGFzc2VydFBhdGgocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUGF0aCBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCAnICsgSlNPTi5zdHJpbmdpZnkocGF0aCkpO1xuICB9XG59XG5cbi8vIFJlc29sdmVzIC4gYW5kIC4uIGVsZW1lbnRzIGluIGEgcGF0aCB3aXRoIGRpcmVjdG9yeSBuYW1lc1xuZnVuY3Rpb24gbm9ybWFsaXplU3RyaW5nUG9zaXgocGF0aCwgYWxsb3dBYm92ZVJvb3QpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbGFzdFNlZ21lbnRMZW5ndGggPSAwO1xuICB2YXIgbGFzdFNsYXNoID0gLTE7XG4gIHZhciBkb3RzID0gMDtcbiAgdmFyIGNvZGU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDw9IHBhdGgubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoaSA8IHBhdGgubGVuZ3RoKVxuICAgICAgY29kZSA9IHBhdGguY2hhckNvZGVBdChpKTtcbiAgICBlbHNlIGlmIChjb2RlID09PSA0NyAvKi8qLylcbiAgICAgIGJyZWFrO1xuICAgIGVsc2VcbiAgICAgIGNvZGUgPSA0NyAvKi8qLztcbiAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgIGlmIChsYXN0U2xhc2ggPT09IGkgLSAxIHx8IGRvdHMgPT09IDEpIHtcbiAgICAgICAgLy8gTk9PUFxuICAgICAgfSBlbHNlIGlmIChsYXN0U2xhc2ggIT09IGkgLSAxICYmIGRvdHMgPT09IDIpIHtcbiAgICAgICAgaWYgKHJlcy5sZW5ndGggPCAyIHx8IGxhc3RTZWdtZW50TGVuZ3RoICE9PSAyIHx8IHJlcy5jaGFyQ29kZUF0KHJlcy5sZW5ndGggLSAxKSAhPT0gNDYgLyouKi8gfHwgcmVzLmNoYXJDb2RlQXQocmVzLmxlbmd0aCAtIDIpICE9PSA0NiAvKi4qLykge1xuICAgICAgICAgIGlmIChyZXMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgdmFyIGxhc3RTbGFzaEluZGV4ID0gcmVzLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICAgICAgICBpZiAobGFzdFNsYXNoSW5kZXggIT09IHJlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgIGlmIChsYXN0U2xhc2hJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzID0gcmVzLnNsaWNlKDAsIGxhc3RTbGFzaEluZGV4KTtcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IHJlcy5sZW5ndGggLSAxIC0gcmVzLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFNsYXNoID0gaTtcbiAgICAgICAgICAgICAgZG90cyA9IDA7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAocmVzLmxlbmd0aCA9PT0gMiB8fCByZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXMgPSAnJztcbiAgICAgICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGxhc3RTbGFzaCA9IGk7XG4gICAgICAgICAgICBkb3RzID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICAgICAgICBpZiAocmVzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXMgKz0gJy8uLic7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmVzID0gJy4uJztcbiAgICAgICAgICBsYXN0U2VnbWVudExlbmd0aCA9IDI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZXMubGVuZ3RoID4gMClcbiAgICAgICAgICByZXMgKz0gJy8nICsgcGF0aC5zbGljZShsYXN0U2xhc2ggKyAxLCBpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlcyA9IHBhdGguc2xpY2UobGFzdFNsYXNoICsgMSwgaSk7XG4gICAgICAgIGxhc3RTZWdtZW50TGVuZ3RoID0gaSAtIGxhc3RTbGFzaCAtIDE7XG4gICAgICB9XG4gICAgICBsYXN0U2xhc2ggPSBpO1xuICAgICAgZG90cyA9IDA7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSA0NiAvKi4qLyAmJiBkb3RzICE9PSAtMSkge1xuICAgICAgKytkb3RzO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb3RzID0gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIF9mb3JtYXQoc2VwLCBwYXRoT2JqZWN0KSB7XG4gIHZhciBkaXIgPSBwYXRoT2JqZWN0LmRpciB8fCBwYXRoT2JqZWN0LnJvb3Q7XG4gIHZhciBiYXNlID0gcGF0aE9iamVjdC5iYXNlIHx8IChwYXRoT2JqZWN0Lm5hbWUgfHwgJycpICsgKHBhdGhPYmplY3QuZXh0IHx8ICcnKTtcbiAgaWYgKCFkaXIpIHtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuICBpZiAoZGlyID09PSBwYXRoT2JqZWN0LnJvb3QpIHtcbiAgICByZXR1cm4gZGlyICsgYmFzZTtcbiAgfVxuICByZXR1cm4gZGlyICsgc2VwICsgYmFzZTtcbn1cblxudmFyIHBvc2l4ID0ge1xuICAvLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgdmFyIHJlc29sdmVkUGF0aCA9ICcnO1xuICAgIHZhciByZXNvbHZlZEFic29sdXRlID0gZmFsc2U7XG4gICAgdmFyIGN3ZDtcblxuICAgIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgICB2YXIgcGF0aDtcbiAgICAgIGlmIChpID49IDApXG4gICAgICAgIHBhdGggPSBhcmd1bWVudHNbaV07XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGN3ZCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgIGN3ZCA9IHByb2Nlc3MuY3dkKCk7XG4gICAgICAgIHBhdGggPSBjd2Q7XG4gICAgICB9XG5cbiAgICAgIGFzc2VydFBhdGgocGF0aCk7XG5cbiAgICAgIC8vIFNraXAgZW1wdHkgZW50cmllc1xuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICByZXNvbHZlZFBhdGggPSBwYXRoICsgJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyovKi87XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgcGF0aCBzaG91bGQgYmUgcmVzb2x2ZWQgdG8gYSBmdWxsIGFic29sdXRlIHBhdGgsIGJ1dFxuICAgIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gICAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gICAgcmVzb2x2ZWRQYXRoID0gbm9ybWFsaXplU3RyaW5nUG9zaXgocmVzb2x2ZWRQYXRoLCAhcmVzb2x2ZWRBYnNvbHV0ZSk7XG5cbiAgICBpZiAocmVzb2x2ZWRBYnNvbHV0ZSkge1xuICAgICAgaWYgKHJlc29sdmVkUGF0aC5sZW5ndGggPiAwKVxuICAgICAgICByZXR1cm4gJy8nICsgcmVzb2x2ZWRQYXRoO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gJy8nO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZWRQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiByZXNvbHZlZFBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnLic7XG4gICAgfVxuICB9LFxuXG4gIG5vcm1hbGl6ZTogZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gJy4nO1xuXG4gICAgdmFyIGlzQWJzb2x1dGUgPSBwYXRoLmNoYXJDb2RlQXQoMCkgPT09IDQ3IC8qLyovO1xuICAgIHZhciB0cmFpbGluZ1NlcGFyYXRvciA9IHBhdGguY2hhckNvZGVBdChwYXRoLmxlbmd0aCAtIDEpID09PSA0NyAvKi8qLztcblxuICAgIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICAgIHBhdGggPSBub3JtYWxpemVTdHJpbmdQb3NpeChwYXRoLCAhaXNBYnNvbHV0ZSk7XG5cbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDAgJiYgIWlzQWJzb2x1dGUpIHBhdGggPSAnLic7XG4gICAgaWYgKHBhdGgubGVuZ3RoID4gMCAmJiB0cmFpbGluZ1NlcGFyYXRvcikgcGF0aCArPSAnLyc7XG5cbiAgICBpZiAoaXNBYnNvbHV0ZSkgcmV0dXJuICcvJyArIHBhdGg7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0sXG5cbiAgaXNBYnNvbHV0ZTogZnVuY3Rpb24gaXNBYnNvbHV0ZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICByZXR1cm4gcGF0aC5sZW5ndGggPiAwICYmIHBhdGguY2hhckNvZGVBdCgwKSA9PT0gNDcgLyovKi87XG4gIH0sXG5cbiAgam9pbjogZnVuY3Rpb24gam9pbigpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiAnLic7XG4gICAgdmFyIGpvaW5lZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGFzc2VydFBhdGgoYXJnKTtcbiAgICAgIGlmIChhcmcubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoam9pbmVkID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgam9pbmVkID0gYXJnO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgam9pbmVkICs9ICcvJyArIGFyZztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGpvaW5lZCA9PT0gdW5kZWZpbmVkKVxuICAgICAgcmV0dXJuICcuJztcbiAgICByZXR1cm4gcG9zaXgubm9ybWFsaXplKGpvaW5lZCk7XG4gIH0sXG5cbiAgcmVsYXRpdmU6IGZ1bmN0aW9uIHJlbGF0aXZlKGZyb20sIHRvKSB7XG4gICAgYXNzZXJ0UGF0aChmcm9tKTtcbiAgICBhc3NlcnRQYXRoKHRvKTtcblxuICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuICcnO1xuXG4gICAgZnJvbSA9IHBvc2l4LnJlc29sdmUoZnJvbSk7XG4gICAgdG8gPSBwb3NpeC5yZXNvbHZlKHRvKTtcblxuICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuICcnO1xuXG4gICAgLy8gVHJpbSBhbnkgbGVhZGluZyBiYWNrc2xhc2hlc1xuICAgIHZhciBmcm9tU3RhcnQgPSAxO1xuICAgIGZvciAoOyBmcm9tU3RhcnQgPCBmcm9tLmxlbmd0aDsgKytmcm9tU3RhcnQpIHtcbiAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0KSAhPT0gNDcgLyovKi8pXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB2YXIgZnJvbUVuZCA9IGZyb20ubGVuZ3RoO1xuICAgIHZhciBmcm9tTGVuID0gZnJvbUVuZCAtIGZyb21TdGFydDtcblxuICAgIC8vIFRyaW0gYW55IGxlYWRpbmcgYmFja3NsYXNoZXNcbiAgICB2YXIgdG9TdGFydCA9IDE7XG4gICAgZm9yICg7IHRvU3RhcnQgPCB0by5sZW5ndGg7ICsrdG9TdGFydCkge1xuICAgICAgaWYgKHRvLmNoYXJDb2RlQXQodG9TdGFydCkgIT09IDQ3IC8qLyovKVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIHRvRW5kID0gdG8ubGVuZ3RoO1xuICAgIHZhciB0b0xlbiA9IHRvRW5kIC0gdG9TdGFydDtcblxuICAgIC8vIENvbXBhcmUgcGF0aHMgdG8gZmluZCB0aGUgbG9uZ2VzdCBjb21tb24gcGF0aCBmcm9tIHJvb3RcbiAgICB2YXIgbGVuZ3RoID0gZnJvbUxlbiA8IHRvTGVuID8gZnJvbUxlbiA6IHRvTGVuO1xuICAgIHZhciBsYXN0Q29tbW9uU2VwID0gLTE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoOyBpIDw9IGxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoaSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgIGlmICh0b0xlbiA+IGxlbmd0aCkge1xuICAgICAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQgKyBpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGBmcm9tYCBpcyB0aGUgZXhhY3QgYmFzZSBwYXRoIGZvciBgdG9gLlxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGU6IGZyb209Jy9mb28vYmFyJzsgdG89Jy9mb28vYmFyL2JheidcbiAgICAgICAgICAgIHJldHVybiB0by5zbGljZSh0b1N0YXJ0ICsgaSArIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gV2UgZ2V0IGhlcmUgaWYgYGZyb21gIGlzIHRoZSByb290XG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nLyc7IHRvPScvZm9vJ1xuICAgICAgICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQgKyBpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZnJvbUxlbiA+IGxlbmd0aCkge1xuICAgICAgICAgIGlmIChmcm9tLmNoYXJDb2RlQXQoZnJvbVN0YXJ0ICsgaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgICAgICAvLyBXZSBnZXQgaGVyZSBpZiBgdG9gIGlzIHRoZSBleGFjdCBiYXNlIHBhdGggZm9yIGBmcm9tYC5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlOiBmcm9tPScvZm9vL2Jhci9iYXonOyB0bz0nL2Zvby9iYXInXG4gICAgICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIFdlIGdldCBoZXJlIGlmIGB0b2AgaXMgdGhlIHJvb3QuXG4gICAgICAgICAgICAvLyBGb3IgZXhhbXBsZTogZnJvbT0nL2Zvbyc7IHRvPScvJ1xuICAgICAgICAgICAgbGFzdENvbW1vblNlcCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFyIGZyb21Db2RlID0gZnJvbS5jaGFyQ29kZUF0KGZyb21TdGFydCArIGkpO1xuICAgICAgdmFyIHRvQ29kZSA9IHRvLmNoYXJDb2RlQXQodG9TdGFydCArIGkpO1xuICAgICAgaWYgKGZyb21Db2RlICE9PSB0b0NvZGUpXG4gICAgICAgIGJyZWFrO1xuICAgICAgZWxzZSBpZiAoZnJvbUNvZGUgPT09IDQ3IC8qLyovKVxuICAgICAgICBsYXN0Q29tbW9uU2VwID0gaTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgLy8gR2VuZXJhdGUgdGhlIHJlbGF0aXZlIHBhdGggYmFzZWQgb24gdGhlIHBhdGggZGlmZmVyZW5jZSBiZXR3ZWVuIGB0b2BcbiAgICAvLyBhbmQgYGZyb21gXG4gICAgZm9yIChpID0gZnJvbVN0YXJ0ICsgbGFzdENvbW1vblNlcCArIDE7IGkgPD0gZnJvbUVuZDsgKytpKSB7XG4gICAgICBpZiAoaSA9PT0gZnJvbUVuZCB8fCBmcm9tLmNoYXJDb2RlQXQoaSkgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIGlmIChvdXQubGVuZ3RoID09PSAwKVxuICAgICAgICAgIG91dCArPSAnLi4nO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgb3V0ICs9ICcvLi4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIExhc3RseSwgYXBwZW5kIHRoZSByZXN0IG9mIHRoZSBkZXN0aW5hdGlvbiAoYHRvYCkgcGF0aCB0aGF0IGNvbWVzIGFmdGVyXG4gICAgLy8gdGhlIGNvbW1vbiBwYXRoIHBhcnRzXG4gICAgaWYgKG91dC5sZW5ndGggPiAwKVxuICAgICAgcmV0dXJuIG91dCArIHRvLnNsaWNlKHRvU3RhcnQgKyBsYXN0Q29tbW9uU2VwKTtcbiAgICBlbHNlIHtcbiAgICAgIHRvU3RhcnQgKz0gbGFzdENvbW1vblNlcDtcbiAgICAgIGlmICh0by5jaGFyQ29kZUF0KHRvU3RhcnQpID09PSA0NyAvKi8qLylcbiAgICAgICAgKyt0b1N0YXJ0O1xuICAgICAgcmV0dXJuIHRvLnNsaWNlKHRvU3RhcnQpO1xuICAgIH1cbiAgfSxcblxuICBfbWFrZUxvbmc6IGZ1bmN0aW9uIF9tYWtlTG9uZyhwYXRoKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0sXG5cbiAgZGlybmFtZTogZnVuY3Rpb24gZGlybmFtZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIGhhc1Jvb3QgPSBjb2RlID09PSA0NyAvKi8qLztcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAxOyAtLWkpIHtcbiAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3JcbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVuZCA9PT0gLTEpIHJldHVybiBoYXNSb290ID8gJy8nIDogJy4nO1xuICAgIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkgcmV0dXJuICcvLyc7XG4gICAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbiAgfSxcblxuICBiYXNlbmFtZTogZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gICAgaWYgKGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBleHQgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImV4dFwiIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgICBhc3NlcnRQYXRoKHBhdGgpO1xuXG4gICAgdmFyIHN0YXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgdmFyIGk7XG5cbiAgICBpZiAoZXh0ICE9PSB1bmRlZmluZWQgJiYgZXh0Lmxlbmd0aCA+IDAgJiYgZXh0Lmxlbmd0aCA8PSBwYXRoLmxlbmd0aCkge1xuICAgICAgaWYgKGV4dC5sZW5ndGggPT09IHBhdGgubGVuZ3RoICYmIGV4dCA9PT0gcGF0aCkgcmV0dXJuICcnO1xuICAgICAgdmFyIGV4dElkeCA9IGV4dC5sZW5ndGggLSAxO1xuICAgICAgdmFyIGZpcnN0Tm9uU2xhc2hFbmQgPSAtMTtcbiAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjb2RlID09PSA0NyAvKi8qLykge1xuICAgICAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgICAgaWYgKCFtYXRjaGVkU2xhc2gpIHtcbiAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZmlyc3ROb25TbGFzaEVuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCByZW1lbWJlciB0aGlzIGluZGV4IGluIGNhc2VcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgaXQgaWYgdGhlIGV4dGVuc2lvbiBlbmRzIHVwIG5vdCBtYXRjaGluZ1xuICAgICAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICBmaXJzdE5vblNsYXNoRW5kID0gaSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChleHRJZHggPj0gMCkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIG1hdGNoIHRoZSBleHBsaWNpdCBleHRlbnNpb25cbiAgICAgICAgICAgIGlmIChjb2RlID09PSBleHQuY2hhckNvZGVBdChleHRJZHgpKSB7XG4gICAgICAgICAgICAgIGlmICgtLWV4dElkeCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBleHRlbnNpb24sIHNvIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91ciBwYXRoXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gRXh0ZW5zaW9uIGRvZXMgbm90IG1hdGNoLCBzbyBvdXIgcmVzdWx0IGlzIHRoZSBlbnRpcmUgcGF0aFxuICAgICAgICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgICAgICAgZXh0SWR4ID0gLTE7XG4gICAgICAgICAgICAgIGVuZCA9IGZpcnN0Tm9uU2xhc2hFbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFydCA9PT0gZW5kKSBlbmQgPSBmaXJzdE5vblNsYXNoRW5kO2Vsc2UgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IHBhdGgubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsIGVuZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IHBhdGgubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgICAgICAvLyBzZXBhcmF0b3JzIGF0IHRoZSBlbmQgb2YgdGhlIHN0cmluZywgc3RvcCBub3dcbiAgICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yLCBtYXJrIHRoaXMgYXMgdGhlIGVuZCBvZiBvdXJcbiAgICAgICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmQgPT09IC0xKSByZXR1cm4gJyc7XG4gICAgICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbiAgICB9XG4gIH0sXG5cbiAgZXh0bmFtZTogZnVuY3Rpb24gZXh0bmFtZShwYXRoKSB7XG4gICAgYXNzZXJ0UGF0aChwYXRoKTtcbiAgICB2YXIgc3RhcnREb3QgPSAtMTtcbiAgICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgLy8gVHJhY2sgdGhlIHN0YXRlIG9mIGNoYXJhY3RlcnMgKGlmIGFueSkgd2Ugc2VlIGJlZm9yZSBvdXIgZmlyc3QgZG90IGFuZFxuICAgIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gICAgdmFyIHByZURvdFN0YXRlID0gMDtcbiAgICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAvLyBleHRlbnNpb25cbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IDQ2IC8qLiovKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSlcbiAgICAgICAgICAgIHN0YXJ0RG90ID0gaTtcbiAgICAgICAgICBlbHNlIGlmIChwcmVEb3RTdGF0ZSAhPT0gMSlcbiAgICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgY2hhcmFjdGVyIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgZG90XG4gICAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICAgICAgcHJlRG90U3RhdGUgPT09IDEgJiYgc3RhcnREb3QgPT09IGVuZCAtIDEgJiYgc3RhcnREb3QgPT09IHN0YXJ0UGFydCArIDEpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsIGVuZCk7XG4gIH0sXG5cbiAgZm9ybWF0OiBmdW5jdGlvbiBmb3JtYXQocGF0aE9iamVjdCkge1xuICAgIGlmIChwYXRoT2JqZWN0ID09PSBudWxsIHx8IHR5cGVvZiBwYXRoT2JqZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwicGF0aE9iamVjdFwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBwYXRoT2JqZWN0KTtcbiAgICB9XG4gICAgcmV0dXJuIF9mb3JtYXQoJy8nLCBwYXRoT2JqZWN0KTtcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24gcGFyc2UocGF0aCkge1xuICAgIGFzc2VydFBhdGgocGF0aCk7XG5cbiAgICB2YXIgcmV0ID0geyByb290OiAnJywgZGlyOiAnJywgYmFzZTogJycsIGV4dDogJycsIG5hbWU6ICcnIH07XG4gICAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSByZXR1cm4gcmV0O1xuICAgIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBpc0Fic29sdXRlID0gY29kZSA9PT0gNDcgLyovKi87XG4gICAgdmFyIHN0YXJ0O1xuICAgIGlmIChpc0Fic29sdXRlKSB7XG4gICAgICByZXQucm9vdCA9ICcvJztcbiAgICAgIHN0YXJ0ID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICB2YXIgc3RhcnREb3QgPSAtMTtcbiAgICB2YXIgc3RhcnRQYXJ0ID0gMDtcbiAgICB2YXIgZW5kID0gLTE7XG4gICAgdmFyIG1hdGNoZWRTbGFzaCA9IHRydWU7XG4gICAgdmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7XG5cbiAgICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gICAgLy8gYWZ0ZXIgYW55IHBhdGggc2VwYXJhdG9yIHdlIGZpbmRcbiAgICB2YXIgcHJlRG90U3RhdGUgPSAwO1xuXG4gICAgLy8gR2V0IG5vbi1kaXIgaW5mb1xuICAgIGZvciAoOyBpID49IHN0YXJ0OyAtLWkpIHtcbiAgICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY29kZSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgcGF0aCBzZXBhcmF0b3IgdGhhdCB3YXMgbm90IHBhcnQgb2YgYSBzZXQgb2YgcGF0aFxuICAgICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgICBzdGFydFBhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgaWYgKGVuZCA9PT0gLTEpIHtcbiAgICAgICAgLy8gV2Ugc2F3IHRoZSBmaXJzdCBub24tcGF0aCBzZXBhcmF0b3IsIG1hcmsgdGhpcyBhcyB0aGUgZW5kIG9mIG91clxuICAgICAgICAvLyBleHRlbnNpb25cbiAgICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICAgIGVuZCA9IGkgKyAxO1xuICAgICAgfVxuICAgICAgaWYgKGNvZGUgPT09IDQ2IC8qLiovKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBvdXIgZmlyc3QgZG90LCBtYXJrIGl0IGFzIHRoZSBzdGFydCBvZiBvdXIgZXh0ZW5zaW9uXG4gICAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSkgc3RhcnREb3QgPSBpO2Vsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKSBwcmVEb3RTdGF0ZSA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnREb3QgIT09IC0xKSB7XG4gICAgICAgIC8vIFdlIHNhdyBhIG5vbi1kb3QgYW5kIG5vbi1wYXRoIHNlcGFyYXRvciBiZWZvcmUgb3VyIGRvdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICAgIHByZURvdFN0YXRlID0gLTE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RG90ID09PSAtMSB8fCBlbmQgPT09IC0xIHx8XG4gICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICBwcmVEb3RTdGF0ZSA9PT0gMCB8fFxuICAgIC8vIFRoZSAocmlnaHQtbW9zdCkgdHJpbW1lZCBwYXRoIGNvbXBvbmVudCBpcyBleGFjdGx5ICcuLidcbiAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgICAgaWYgKGVuZCAhPT0gLTEpIHtcbiAgICAgICAgaWYgKHN0YXJ0UGFydCA9PT0gMCAmJiBpc0Fic29sdXRlKSByZXQuYmFzZSA9IHJldC5uYW1lID0gcGF0aC5zbGljZSgxLCBlbmQpO2Vsc2UgcmV0LmJhc2UgPSByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBlbmQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhcnRQYXJ0ID09PSAwICYmIGlzQWJzb2x1dGUpIHtcbiAgICAgICAgcmV0Lm5hbWUgPSBwYXRoLnNsaWNlKDEsIHN0YXJ0RG90KTtcbiAgICAgICAgcmV0LmJhc2UgPSBwYXRoLnNsaWNlKDEsIGVuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQubmFtZSA9IHBhdGguc2xpY2Uoc3RhcnRQYXJ0LCBzdGFydERvdCk7XG4gICAgICAgIHJldC5iYXNlID0gcGF0aC5zbGljZShzdGFydFBhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgICByZXQuZXh0ID0gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhcnRQYXJ0ID4gMCkgcmV0LmRpciA9IHBhdGguc2xpY2UoMCwgc3RhcnRQYXJ0IC0gMSk7ZWxzZSBpZiAoaXNBYnNvbHV0ZSkgcmV0LmRpciA9ICcvJztcblxuICAgIHJldHVybiByZXQ7XG4gIH0sXG5cbiAgc2VwOiAnLycsXG4gIGRlbGltaXRlcjogJzonLFxuICB3aW4zMjogbnVsbCxcbiAgcG9zaXg6IG51bGxcbn07XG5cbnBvc2l4LnBvc2l4ID0gcG9zaXg7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9zaXg7XG4iLCAiKGV4cG9ydHM9PntcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19tYXJrQXNNb2R1bGUgPSAodGFyZ2V0KSA9PiBfX2RlZlByb3AodGFyZ2V0LCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSk7XG52YXIgX19leHBvcnQgPSAodGFyZ2V0LCBhbGwpID0+IHtcbiAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwge2dldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlfSk7XG59O1xudmFyIF9fYXN5bmMgPSAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdmFyIGZ1bGZpbGxlZCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcmVqZWN0ZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGVwID0gKHJlc3VsdCkgPT4ge1xuICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTtcbiAgICB9O1xuICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcbiAgfSk7XG59O1xuXG4vLyBsaWIvYnJvd3Nlci50c1xuX19tYXJrQXNNb2R1bGUoZXhwb3J0cyk7XG5fX2V4cG9ydChleHBvcnRzLCB7XG4gIGJ1aWxkOiAoKSA9PiBidWlsZCxcbiAgYnVpbGRTeW5jOiAoKSA9PiBidWlsZFN5bmMsXG4gIGluaXRpYWxpemU6ICgpID0+IGluaXRpYWxpemUsXG4gIHNlcnZlOiAoKSA9PiBzZXJ2ZSxcbiAgdHJhbnNmb3JtOiAoKSA9PiB0cmFuc2Zvcm0sXG4gIHRyYW5zZm9ybVN5bmM6ICgpID0+IHRyYW5zZm9ybVN5bmMsXG4gIHZlcnNpb246ICgpID0+IHZlcnNpb25cbn0pO1xuXG4vLyBsaWIvc3RkaW9fcHJvdG9jb2wudHNcbmZ1bmN0aW9uIGVuY29kZVBhY2tldChwYWNrZXQpIHtcbiAgbGV0IHZpc2l0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICBiYi53cml0ZTgoMCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICBiYi53cml0ZTgoMSk7XG4gICAgICBiYi53cml0ZTgoK3ZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgYmIud3JpdGU4KDIpO1xuICAgICAgYmIud3JpdGUzMih2YWx1ZSB8IDApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBiYi53cml0ZTgoMyk7XG4gICAgICBiYi53cml0ZShlbmNvZGVVVEY4KHZhbHVlKSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgIGJiLndyaXRlOCg0KTtcbiAgICAgIGJiLndyaXRlKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGJiLndyaXRlOCg1KTtcbiAgICAgIGJiLndyaXRlMzIodmFsdWUubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgdmlzaXQoaXRlbSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICAgICAgYmIud3JpdGU4KDYpO1xuICAgICAgYmIud3JpdGUzMihrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgICAgICBiYi53cml0ZShlbmNvZGVVVEY4KGtleSkpO1xuICAgICAgICB2aXNpdCh2YWx1ZVtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGxldCBiYiA9IG5ldyBCeXRlQnVmZmVyKCk7XG4gIGJiLndyaXRlMzIoMCk7XG4gIGJiLndyaXRlMzIocGFja2V0LmlkIDw8IDEgfCArIXBhY2tldC5pc1JlcXVlc3QpO1xuICB2aXNpdChwYWNrZXQudmFsdWUpO1xuICB3cml0ZVVJbnQzMkxFKGJiLmJ1ZiwgYmIubGVuIC0gNCwgMCk7XG4gIHJldHVybiBiYi5idWYuc3ViYXJyYXkoMCwgYmIubGVuKTtcbn1cbmZ1bmN0aW9uIGRlY29kZVBhY2tldChieXRlcykge1xuICBsZXQgdmlzaXQgPSAoKSA9PiB7XG4gICAgc3dpdGNoIChiYi5yZWFkOCgpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gISFiYi5yZWFkOCgpO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gYmIucmVhZDMyKCk7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBkZWNvZGVVVEY4KGJiLnJlYWQoKSk7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiBiYi5yZWFkKCk7XG4gICAgICBjYXNlIDU6IHtcbiAgICAgICAgbGV0IGNvdW50ID0gYmIucmVhZDMyKCk7XG4gICAgICAgIGxldCB2YWx1ZTIgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgdmFsdWUyLnB1c2godmlzaXQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlMjtcbiAgICAgIH1cbiAgICAgIGNhc2UgNjoge1xuICAgICAgICBsZXQgY291bnQgPSBiYi5yZWFkMzIoKTtcbiAgICAgICAgbGV0IHZhbHVlMiA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICB2YWx1ZTJbZGVjb2RlVVRGOChiYi5yZWFkKCkpXSA9IHZpc2l0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlMjtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0XCIpO1xuICAgIH1cbiAgfTtcbiAgbGV0IGJiID0gbmV3IEJ5dGVCdWZmZXIoYnl0ZXMpO1xuICBsZXQgaWQgPSBiYi5yZWFkMzIoKTtcbiAgbGV0IGlzUmVxdWVzdCA9IChpZCAmIDEpID09PSAwO1xuICBpZCA+Pj49IDE7XG4gIGxldCB2YWx1ZSA9IHZpc2l0KCk7XG4gIGlmIChiYi5wdHIgIT09IGJ5dGVzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0XCIpO1xuICB9XG4gIHJldHVybiB7aWQsIGlzUmVxdWVzdCwgdmFsdWV9O1xufVxudmFyIEJ5dGVCdWZmZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGJ1ZiA9IG5ldyBVaW50OEFycmF5KDEwMjQpKSB7XG4gICAgdGhpcy5idWYgPSBidWY7XG4gICAgdGhpcy5sZW4gPSAwO1xuICAgIHRoaXMucHRyID0gMDtcbiAgfVxuICBfd3JpdGUoZGVsdGEpIHtcbiAgICBpZiAodGhpcy5sZW4gKyBkZWx0YSA+IHRoaXMuYnVmLmxlbmd0aCkge1xuICAgICAgbGV0IGNsb25lID0gbmV3IFVpbnQ4QXJyYXkoKHRoaXMubGVuICsgZGVsdGEpICogMik7XG4gICAgICBjbG9uZS5zZXQodGhpcy5idWYpO1xuICAgICAgdGhpcy5idWYgPSBjbG9uZTtcbiAgICB9XG4gICAgdGhpcy5sZW4gKz0gZGVsdGE7XG4gICAgcmV0dXJuIHRoaXMubGVuIC0gZGVsdGE7XG4gIH1cbiAgd3JpdGU4KHZhbHVlKSB7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMuX3dyaXRlKDEpO1xuICAgIHRoaXMuYnVmW29mZnNldF0gPSB2YWx1ZTtcbiAgfVxuICB3cml0ZTMyKHZhbHVlKSB7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMuX3dyaXRlKDQpO1xuICAgIHdyaXRlVUludDMyTEUodGhpcy5idWYsIHZhbHVlLCBvZmZzZXQpO1xuICB9XG4gIHdyaXRlKGJ5dGVzKSB7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMuX3dyaXRlKDQgKyBieXRlcy5sZW5ndGgpO1xuICAgIHdyaXRlVUludDMyTEUodGhpcy5idWYsIGJ5dGVzLmxlbmd0aCwgb2Zmc2V0KTtcbiAgICB0aGlzLmJ1Zi5zZXQoYnl0ZXMsIG9mZnNldCArIDQpO1xuICB9XG4gIF9yZWFkKGRlbHRhKSB7XG4gICAgaWYgKHRoaXMucHRyICsgZGVsdGEgPiB0aGlzLmJ1Zi5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFja2V0XCIpO1xuICAgIH1cbiAgICB0aGlzLnB0ciArPSBkZWx0YTtcbiAgICByZXR1cm4gdGhpcy5wdHIgLSBkZWx0YTtcbiAgfVxuICByZWFkOCgpIHtcbiAgICByZXR1cm4gdGhpcy5idWZbdGhpcy5fcmVhZCgxKV07XG4gIH1cbiAgcmVhZDMyKCkge1xuICAgIHJldHVybiByZWFkVUludDMyTEUodGhpcy5idWYsIHRoaXMuX3JlYWQoNCkpO1xuICB9XG4gIHJlYWQoKSB7XG4gICAgbGV0IGxlbmd0aCA9IHRoaXMucmVhZDMyKCk7XG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICBsZXQgcHRyID0gdGhpcy5fcmVhZChieXRlcy5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldCh0aGlzLmJ1Zi5zdWJhcnJheShwdHIsIHB0ciArIGxlbmd0aCkpO1xuICAgIHJldHVybiBieXRlcztcbiAgfVxufTtcbnZhciBlbmNvZGVVVEY4O1xudmFyIGRlY29kZVVURjg7XG5pZiAodHlwZW9mIFRleHRFbmNvZGVyICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBsZXQgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICBsZXQgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuICBlbmNvZGVVVEY4ID0gKHRleHQpID0+IGVuY29kZXIuZW5jb2RlKHRleHQpO1xuICBkZWNvZGVVVEY4ID0gKGJ5dGVzKSA9PiBkZWNvZGVyLmRlY29kZShieXRlcyk7XG59IGVsc2UgaWYgKHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgZW5jb2RlVVRGOCA9ICh0ZXh0KSA9PiB7XG4gICAgbGV0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHRleHQpO1xuICAgIGlmICghKGJ1ZmZlciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKSB7XG4gICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyO1xuICB9O1xuICBkZWNvZGVVVEY4ID0gKGJ5dGVzKSA9PiBCdWZmZXIuZnJvbShieXRlcykudG9TdHJpbmcoKTtcbn0gZWxzZSB7XG4gIHRocm93IG5ldyBFcnJvcihcIk5vIFVURi04IGNvZGVjIGZvdW5kXCIpO1xufVxuZnVuY3Rpb24gcmVhZFVJbnQzMkxFKGJ1ZmZlciwgb2Zmc2V0KSB7XG4gIHJldHVybiBidWZmZXJbb2Zmc2V0KytdIHwgYnVmZmVyW29mZnNldCsrXSA8PCA4IHwgYnVmZmVyW29mZnNldCsrXSA8PCAxNiB8IGJ1ZmZlcltvZmZzZXQrK10gPDwgMjQ7XG59XG5mdW5jdGlvbiB3cml0ZVVJbnQzMkxFKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCkge1xuICBidWZmZXJbb2Zmc2V0KytdID0gdmFsdWU7XG4gIGJ1ZmZlcltvZmZzZXQrK10gPSB2YWx1ZSA+PiA4O1xuICBidWZmZXJbb2Zmc2V0KytdID0gdmFsdWUgPj4gMTY7XG4gIGJ1ZmZlcltvZmZzZXQrK10gPSB2YWx1ZSA+PiAyNDtcbn1cblxuLy8gbGliL2NvbW1vbi50c1xuZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXQodGFyZ2V0KSB7XG4gIHRhcmdldCArPSBcIlwiO1xuICBpZiAodGFyZ2V0LmluZGV4T2YoXCIsXCIpID49IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRhcmdldDogJHt0YXJnZXR9YCk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG52YXIgY2FuQmVBbnl0aGluZyA9ICgpID0+IG51bGw7XG52YXIgbXVzdEJlQm9vbGVhbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiA/IG51bGwgOiBcImEgYm9vbGVhblwiO1xudmFyIG11c3RCZUJvb2xlYW5Pck9iamVjdCA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpID8gbnVsbCA6IFwiYSBib29sZWFuIG9yIGFuIG9iamVjdFwiO1xudmFyIG11c3RCZVN0cmluZyA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gbnVsbCA6IFwiYSBzdHJpbmdcIjtcbnZhciBtdXN0QmVSZWdFeHAgPSAodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgUmVnRXhwID8gbnVsbCA6IFwiYSBSZWdFeHAgb2JqZWN0XCI7XG52YXIgbXVzdEJlSW50ZWdlciA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIHZhbHVlID09PSAodmFsdWUgfCAwKSA/IG51bGwgOiBcImFuIGludGVnZXJcIjtcbnZhciBtdXN0QmVGdW5jdGlvbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyBudWxsIDogXCJhIGZ1bmN0aW9uXCI7XG52YXIgbXVzdEJlQXJyYXkgPSAodmFsdWUpID0+IEFycmF5LmlzQXJyYXkodmFsdWUpID8gbnVsbCA6IFwiYW4gYXJyYXlcIjtcbnZhciBtdXN0QmVPYmplY3QgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBudWxsIDogXCJhbiBvYmplY3RcIjtcbnZhciBtdXN0QmVPYmplY3RPck51bGwgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBudWxsIDogXCJhbiBvYmplY3Qgb3IgbnVsbFwiO1xudmFyIG11c3RCZVN0cmluZ09yQm9vbGVhbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgPyBudWxsIDogXCJhIHN0cmluZyBvciBhIGJvb2xlYW5cIjtcbnZhciBtdXN0QmVTdHJpbmdPck9iamVjdCA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBudWxsIDogXCJhIHN0cmluZyBvciBhbiBvYmplY3RcIjtcbnZhciBtdXN0QmVTdHJpbmdPckFycmF5ID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyBudWxsIDogXCJhIHN0cmluZyBvciBhbiBhcnJheVwiO1xudmFyIG11c3RCZVN0cmluZ09yVWludDhBcnJheSA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSA/IG51bGwgOiBcImEgc3RyaW5nIG9yIGEgVWludDhBcnJheVwiO1xuZnVuY3Rpb24gZ2V0RmxhZyhvYmplY3QsIGtleXMsIGtleSwgbXVzdEJlRm4pIHtcbiAgbGV0IHZhbHVlID0gb2JqZWN0W2tleV07XG4gIGtleXNba2V5ICsgXCJcIl0gPSB0cnVlO1xuICBpZiAodmFsdWUgPT09IHZvaWQgMClcbiAgICByZXR1cm4gdm9pZCAwO1xuICBsZXQgbXVzdEJlID0gbXVzdEJlRm4odmFsdWUpO1xuICBpZiAobXVzdEJlICE9PSBudWxsKVxuICAgIHRocm93IG5ldyBFcnJvcihgXCIke2tleX1cIiBtdXN0IGJlICR7bXVzdEJlfWApO1xuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja0ZvckludmFsaWRGbGFncyhvYmplY3QsIGtleXMsIHdoZXJlKSB7XG4gIGZvciAobGV0IGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgaW4ga2V5cykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBvcHRpb24gJHt3aGVyZX06IFwiJHtrZXl9XCJgKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlSW5pdGlhbGl6ZU9wdGlvbnMob3B0aW9ucykge1xuICBsZXQga2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGxldCB3YXNtVVJMID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIndhc21VUkxcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IHdvcmtlciA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJ3b3JrZXJcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGNoZWNrRm9ySW52YWxpZEZsYWdzKG9wdGlvbnMsIGtleXMsIFwiaW4gc3RhcnRTZXJ2aWNlKCkgY2FsbFwiKTtcbiAgcmV0dXJuIHtcbiAgICB3YXNtVVJMLFxuICAgIHdvcmtlclxuICB9O1xufVxuZnVuY3Rpb24gcHVzaExvZ0ZsYWdzKGZsYWdzLCBvcHRpb25zLCBrZXlzLCBpc1RUWSwgbG9nTGV2ZWxEZWZhdWx0KSB7XG4gIGxldCBjb2xvciA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJjb2xvclwiLCBtdXN0QmVCb29sZWFuKTtcbiAgbGV0IGxvZ0xldmVsID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImxvZ0xldmVsXCIsIG11c3RCZVN0cmluZyk7XG4gIGxldCBsb2dMaW1pdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJsb2dMaW1pdFwiLCBtdXN0QmVJbnRlZ2VyKTtcbiAgaWYgKGNvbG9yKVxuICAgIGZsYWdzLnB1c2goYC0tY29sb3I9JHtjb2xvcn1gKTtcbiAgZWxzZSBpZiAoaXNUVFkpXG4gICAgZmxhZ3MucHVzaChgLS1jb2xvcj10cnVlYCk7XG4gIGZsYWdzLnB1c2goYC0tbG9nLWxldmVsPSR7bG9nTGV2ZWwgfHwgbG9nTGV2ZWxEZWZhdWx0fWApO1xuICBmbGFncy5wdXNoKGAtLWxvZy1saW1pdD0ke2xvZ0xpbWl0IHx8IDB9YCk7XG59XG5mdW5jdGlvbiBwdXNoQ29tbW9uRmxhZ3MoZmxhZ3MsIG9wdGlvbnMsIGtleXMpIHtcbiAgbGV0IHNvdXJjZXNDb250ZW50ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInNvdXJjZXNDb250ZW50XCIsIG11c3RCZUJvb2xlYW4pO1xuICBsZXQgdGFyZ2V0ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInRhcmdldFwiLCBtdXN0QmVTdHJpbmdPckFycmF5KTtcbiAgbGV0IGZvcm1hdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJmb3JtYXRcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IGdsb2JhbE5hbWUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwiZ2xvYmFsTmFtZVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgbWluaWZ5ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm1pbmlmeVwiLCBtdXN0QmVCb29sZWFuKTtcbiAgbGV0IG1pbmlmeVN5bnRheCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJtaW5pZnlTeW50YXhcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGxldCBtaW5pZnlXaGl0ZXNwYWNlID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm1pbmlmeVdoaXRlc3BhY2VcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGxldCBtaW5pZnlJZGVudGlmaWVycyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJtaW5pZnlJZGVudGlmaWVyc1wiLCBtdXN0QmVCb29sZWFuKTtcbiAgbGV0IGNoYXJzZXQgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwiY2hhcnNldFwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgdHJlZVNoYWtpbmcgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwidHJlZVNoYWtpbmdcIiwgbXVzdEJlU3RyaW5nT3JCb29sZWFuKTtcbiAgbGV0IGpzeEZhY3RvcnkgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwianN4RmFjdG9yeVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQganN4RnJhZ21lbnQgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwianN4RnJhZ21lbnRcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IGRlZmluZSA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJkZWZpbmVcIiwgbXVzdEJlT2JqZWN0KTtcbiAgbGV0IHB1cmUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwicHVyZVwiLCBtdXN0QmVBcnJheSk7XG4gIGxldCBrZWVwTmFtZXMgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwia2VlcE5hbWVzXCIsIG11c3RCZUJvb2xlYW4pO1xuICBpZiAoc291cmNlc0NvbnRlbnQgIT09IHZvaWQgMClcbiAgICBmbGFncy5wdXNoKGAtLXNvdXJjZXMtY29udGVudD0ke3NvdXJjZXNDb250ZW50fWApO1xuICBpZiAodGFyZ2V0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSlcbiAgICAgIGZsYWdzLnB1c2goYC0tdGFyZ2V0PSR7QXJyYXkuZnJvbSh0YXJnZXQpLm1hcCh2YWxpZGF0ZVRhcmdldCkuam9pbihcIixcIil9YCk7XG4gICAgZWxzZVxuICAgICAgZmxhZ3MucHVzaChgLS10YXJnZXQ9JHt2YWxpZGF0ZVRhcmdldCh0YXJnZXQpfWApO1xuICB9XG4gIGlmIChmb3JtYXQpXG4gICAgZmxhZ3MucHVzaChgLS1mb3JtYXQ9JHtmb3JtYXR9YCk7XG4gIGlmIChnbG9iYWxOYW1lKVxuICAgIGZsYWdzLnB1c2goYC0tZ2xvYmFsLW5hbWU9JHtnbG9iYWxOYW1lfWApO1xuICBpZiAobWluaWZ5KVxuICAgIGZsYWdzLnB1c2goXCItLW1pbmlmeVwiKTtcbiAgaWYgKG1pbmlmeVN5bnRheClcbiAgICBmbGFncy5wdXNoKFwiLS1taW5pZnktc3ludGF4XCIpO1xuICBpZiAobWluaWZ5V2hpdGVzcGFjZSlcbiAgICBmbGFncy5wdXNoKFwiLS1taW5pZnktd2hpdGVzcGFjZVwiKTtcbiAgaWYgKG1pbmlmeUlkZW50aWZpZXJzKVxuICAgIGZsYWdzLnB1c2goXCItLW1pbmlmeS1pZGVudGlmaWVyc1wiKTtcbiAgaWYgKGNoYXJzZXQpXG4gICAgZmxhZ3MucHVzaChgLS1jaGFyc2V0PSR7Y2hhcnNldH1gKTtcbiAgaWYgKHRyZWVTaGFraW5nICE9PSB2b2lkIDAgJiYgdHJlZVNoYWtpbmcgIT09IHRydWUpXG4gICAgZmxhZ3MucHVzaChgLS10cmVlLXNoYWtpbmc9JHt0cmVlU2hha2luZ31gKTtcbiAgaWYgKGpzeEZhY3RvcnkpXG4gICAgZmxhZ3MucHVzaChgLS1qc3gtZmFjdG9yeT0ke2pzeEZhY3Rvcnl9YCk7XG4gIGlmIChqc3hGcmFnbWVudClcbiAgICBmbGFncy5wdXNoKGAtLWpzeC1mcmFnbWVudD0ke2pzeEZyYWdtZW50fWApO1xuICBpZiAoZGVmaW5lKSB7XG4gICAgZm9yIChsZXQga2V5IGluIGRlZmluZSkge1xuICAgICAgaWYgKGtleS5pbmRleE9mKFwiPVwiKSA+PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZGVmaW5lOiAke2tleX1gKTtcbiAgICAgIGZsYWdzLnB1c2goYC0tZGVmaW5lOiR7a2V5fT0ke2RlZmluZVtrZXldfWApO1xuICAgIH1cbiAgfVxuICBpZiAocHVyZSlcbiAgICBmb3IgKGxldCBmbiBvZiBwdXJlKVxuICAgICAgZmxhZ3MucHVzaChgLS1wdXJlOiR7Zm59YCk7XG4gIGlmIChrZWVwTmFtZXMpXG4gICAgZmxhZ3MucHVzaChgLS1rZWVwLW5hbWVzYCk7XG59XG5mdW5jdGlvbiBmbGFnc0ZvckJ1aWxkT3B0aW9ucyhjYWxsTmFtZSwgb3B0aW9ucywgaXNUVFksIGxvZ0xldmVsRGVmYXVsdCwgd3JpdGVEZWZhdWx0KSB7XG4gIHZhciBfYTtcbiAgbGV0IGZsYWdzID0gW107XG4gIGxldCBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgbGV0IHN0ZGluQ29udGVudHMgPSBudWxsO1xuICBsZXQgc3RkaW5SZXNvbHZlRGlyID0gbnVsbDtcbiAgbGV0IHdhdGNoTW9kZSA9IG51bGw7XG4gIHB1c2hMb2dGbGFncyhmbGFncywgb3B0aW9ucywga2V5cywgaXNUVFksIGxvZ0xldmVsRGVmYXVsdCk7XG4gIHB1c2hDb21tb25GbGFncyhmbGFncywgb3B0aW9ucywga2V5cyk7XG4gIGxldCBzb3VyY2VtYXAgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwic291cmNlbWFwXCIsIG11c3RCZVN0cmluZ09yQm9vbGVhbik7XG4gIGxldCBidW5kbGUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwiYnVuZGxlXCIsIG11c3RCZUJvb2xlYW4pO1xuICBsZXQgd2F0Y2ggPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwid2F0Y2hcIiwgbXVzdEJlQm9vbGVhbk9yT2JqZWN0KTtcbiAgbGV0IHNwbGl0dGluZyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJzcGxpdHRpbmdcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGxldCBwcmVzZXJ2ZVN5bWxpbmtzID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInByZXNlcnZlU3ltbGlua3NcIiwgbXVzdEJlQm9vbGVhbik7XG4gIGxldCBtZXRhZmlsZSA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJtZXRhZmlsZVwiLCBtdXN0QmVCb29sZWFuKTtcbiAgbGV0IG91dGZpbGUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwib3V0ZmlsZVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgb3V0ZGlyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm91dGRpclwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgb3V0YmFzZSA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJvdXRiYXNlXCIsIG11c3RCZVN0cmluZyk7XG4gIGxldCBwbGF0Zm9ybSA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJwbGF0Zm9ybVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgdHNjb25maWcgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwidHNjb25maWdcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IHJlc29sdmVFeHRlbnNpb25zID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInJlc29sdmVFeHRlbnNpb25zXCIsIG11c3RCZUFycmF5KTtcbiAgbGV0IG5vZGVQYXRoc0lucHV0ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm5vZGVQYXRoc1wiLCBtdXN0QmVBcnJheSk7XG4gIGxldCBtYWluRmllbGRzID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcIm1haW5GaWVsZHNcIiwgbXVzdEJlQXJyYXkpO1xuICBsZXQgY29uZGl0aW9ucyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJjb25kaXRpb25zXCIsIG11c3RCZUFycmF5KTtcbiAgbGV0IGV4dGVybmFsID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImV4dGVybmFsXCIsIG11c3RCZUFycmF5KTtcbiAgbGV0IGxvYWRlciA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJsb2FkZXJcIiwgbXVzdEJlT2JqZWN0KTtcbiAgbGV0IG91dEV4dGVuc2lvbiA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJvdXRFeHRlbnNpb25cIiwgbXVzdEJlT2JqZWN0KTtcbiAgbGV0IHB1YmxpY1BhdGggPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwicHVibGljUGF0aFwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgY2h1bmtOYW1lcyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJjaHVua05hbWVzXCIsIG11c3RCZVN0cmluZyk7XG4gIGxldCBhc3NldE5hbWVzID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImFzc2V0TmFtZXNcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IGluamVjdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJpbmplY3RcIiwgbXVzdEJlQXJyYXkpO1xuICBsZXQgYmFubmVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImJhbm5lclwiLCBtdXN0QmVPYmplY3QpO1xuICBsZXQgZm9vdGVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImZvb3RlclwiLCBtdXN0QmVPYmplY3QpO1xuICBsZXQgZW50cnlQb2ludHMgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwiZW50cnlQb2ludHNcIiwgbXVzdEJlQXJyYXkpO1xuICBsZXQgYWJzV29ya2luZ0RpciA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJhYnNXb3JraW5nRGlyXCIsIG11c3RCZVN0cmluZyk7XG4gIGxldCBzdGRpbiA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJzdGRpblwiLCBtdXN0QmVPYmplY3QpO1xuICBsZXQgd3JpdGUgPSAoX2EgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwid3JpdGVcIiwgbXVzdEJlQm9vbGVhbikpICE9IG51bGwgPyBfYSA6IHdyaXRlRGVmYXVsdDtcbiAgbGV0IGluY3JlbWVudGFsID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImluY3JlbWVudGFsXCIsIG11c3RCZUJvb2xlYW4pID09PSB0cnVlO1xuICBsZXQgcGx1Z2lucyA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJwbHVnaW5zXCIsIG11c3RCZUFycmF5KTtcbiAgY2hlY2tGb3JJbnZhbGlkRmxhZ3Mob3B0aW9ucywga2V5cywgYGluICR7Y2FsbE5hbWV9KCkgY2FsbGApO1xuICBpZiAoc291cmNlbWFwKVxuICAgIGZsYWdzLnB1c2goYC0tc291cmNlbWFwJHtzb3VyY2VtYXAgPT09IHRydWUgPyBcIlwiIDogYD0ke3NvdXJjZW1hcH1gfWApO1xuICBpZiAoYnVuZGxlKVxuICAgIGZsYWdzLnB1c2goXCItLWJ1bmRsZVwiKTtcbiAgaWYgKHdhdGNoKSB7XG4gICAgZmxhZ3MucHVzaChcIi0td2F0Y2hcIik7XG4gICAgaWYgKHR5cGVvZiB3YXRjaCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHdhdGNoTW9kZSA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgd2F0Y2hLZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIGxldCBvblJlYnVpbGQgPSBnZXRGbGFnKHdhdGNoLCB3YXRjaEtleXMsIFwib25SZWJ1aWxkXCIsIG11c3RCZUZ1bmN0aW9uKTtcbiAgICAgIGNoZWNrRm9ySW52YWxpZEZsYWdzKHdhdGNoLCB3YXRjaEtleXMsIGBvbiBcIndhdGNoXCIgaW4gJHtjYWxsTmFtZX0oKSBjYWxsYCk7XG4gICAgICB3YXRjaE1vZGUgPSB7b25SZWJ1aWxkfTtcbiAgICB9XG4gIH1cbiAgaWYgKHNwbGl0dGluZylcbiAgICBmbGFncy5wdXNoKFwiLS1zcGxpdHRpbmdcIik7XG4gIGlmIChwcmVzZXJ2ZVN5bWxpbmtzKVxuICAgIGZsYWdzLnB1c2goXCItLXByZXNlcnZlLXN5bWxpbmtzXCIpO1xuICBpZiAobWV0YWZpbGUpXG4gICAgZmxhZ3MucHVzaChgLS1tZXRhZmlsZWApO1xuICBpZiAob3V0ZmlsZSlcbiAgICBmbGFncy5wdXNoKGAtLW91dGZpbGU9JHtvdXRmaWxlfWApO1xuICBpZiAob3V0ZGlyKVxuICAgIGZsYWdzLnB1c2goYC0tb3V0ZGlyPSR7b3V0ZGlyfWApO1xuICBpZiAob3V0YmFzZSlcbiAgICBmbGFncy5wdXNoKGAtLW91dGJhc2U9JHtvdXRiYXNlfWApO1xuICBpZiAocGxhdGZvcm0pXG4gICAgZmxhZ3MucHVzaChgLS1wbGF0Zm9ybT0ke3BsYXRmb3JtfWApO1xuICBpZiAodHNjb25maWcpXG4gICAgZmxhZ3MucHVzaChgLS10c2NvbmZpZz0ke3RzY29uZmlnfWApO1xuICBpZiAocmVzb2x2ZUV4dGVuc2lvbnMpIHtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgcmVzb2x2ZUV4dGVuc2lvbnMpIHtcbiAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICBpZiAodmFsdWUuaW5kZXhPZihcIixcIikgPj0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJlc29sdmUgZXh0ZW5zaW9uOiAke3ZhbHVlfWApO1xuICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBmbGFncy5wdXNoKGAtLXJlc29sdmUtZXh0ZW5zaW9ucz0ke3ZhbHVlcy5qb2luKFwiLFwiKX1gKTtcbiAgfVxuICBpZiAocHVibGljUGF0aClcbiAgICBmbGFncy5wdXNoKGAtLXB1YmxpYy1wYXRoPSR7cHVibGljUGF0aH1gKTtcbiAgaWYgKGNodW5rTmFtZXMpXG4gICAgZmxhZ3MucHVzaChgLS1jaHVuay1uYW1lcz0ke2NodW5rTmFtZXN9YCk7XG4gIGlmIChhc3NldE5hbWVzKVxuICAgIGZsYWdzLnB1c2goYC0tYXNzZXQtbmFtZXM9JHthc3NldE5hbWVzfWApO1xuICBpZiAobWFpbkZpZWxkcykge1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGxldCB2YWx1ZSBvZiBtYWluRmllbGRzKSB7XG4gICAgICB2YWx1ZSArPSBcIlwiO1xuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoXCIsXCIpID49IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtYWluIGZpZWxkOiAke3ZhbHVlfWApO1xuICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBmbGFncy5wdXNoKGAtLW1haW4tZmllbGRzPSR7dmFsdWVzLmpvaW4oXCIsXCIpfWApO1xuICB9XG4gIGlmIChjb25kaXRpb25zKSB7XG4gICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIGNvbmRpdGlvbnMpIHtcbiAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICBpZiAodmFsdWUuaW5kZXhPZihcIixcIikgPj0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbmRpdGlvbjogJHt2YWx1ZX1gKTtcbiAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZmxhZ3MucHVzaChgLS1jb25kaXRpb25zPSR7dmFsdWVzLmpvaW4oXCIsXCIpfWApO1xuICB9XG4gIGlmIChleHRlcm5hbClcbiAgICBmb3IgKGxldCBuYW1lIG9mIGV4dGVybmFsKVxuICAgICAgZmxhZ3MucHVzaChgLS1leHRlcm5hbDoke25hbWV9YCk7XG4gIGlmIChiYW5uZXIpIHtcbiAgICBmb3IgKGxldCB0eXBlIGluIGJhbm5lcikge1xuICAgICAgaWYgKHR5cGUuaW5kZXhPZihcIj1cIikgPj0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGJhbm5lciBmaWxlIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgIGZsYWdzLnB1c2goYC0tYmFubmVyOiR7dHlwZX09JHtiYW5uZXJbdHlwZV19YCk7XG4gICAgfVxuICB9XG4gIGlmIChmb290ZXIpIHtcbiAgICBmb3IgKGxldCB0eXBlIGluIGZvb3Rlcikge1xuICAgICAgaWYgKHR5cGUuaW5kZXhPZihcIj1cIikgPj0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGZvb3RlciBmaWxlIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgIGZsYWdzLnB1c2goYC0tZm9vdGVyOiR7dHlwZX09JHtmb290ZXJbdHlwZV19YCk7XG4gICAgfVxuICB9XG4gIGlmIChpbmplY3QpXG4gICAgZm9yIChsZXQgcGF0aCBvZiBpbmplY3QpXG4gICAgICBmbGFncy5wdXNoKGAtLWluamVjdDoke3BhdGh9YCk7XG4gIGlmIChsb2FkZXIpIHtcbiAgICBmb3IgKGxldCBleHQgaW4gbG9hZGVyKSB7XG4gICAgICBpZiAoZXh0LmluZGV4T2YoXCI9XCIpID49IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBsb2FkZXIgZXh0ZW5zaW9uOiAke2V4dH1gKTtcbiAgICAgIGZsYWdzLnB1c2goYC0tbG9hZGVyOiR7ZXh0fT0ke2xvYWRlcltleHRdfWApO1xuICAgIH1cbiAgfVxuICBpZiAob3V0RXh0ZW5zaW9uKSB7XG4gICAgZm9yIChsZXQgZXh0IGluIG91dEV4dGVuc2lvbikge1xuICAgICAgaWYgKGV4dC5pbmRleE9mKFwiPVwiKSA+PSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgb3V0IGV4dGVuc2lvbjogJHtleHR9YCk7XG4gICAgICBmbGFncy5wdXNoKGAtLW91dC1leHRlbnNpb246JHtleHR9PSR7b3V0RXh0ZW5zaW9uW2V4dF19YCk7XG4gICAgfVxuICB9XG4gIGlmIChlbnRyeVBvaW50cykge1xuICAgIGZvciAobGV0IGVudHJ5UG9pbnQgb2YgZW50cnlQb2ludHMpIHtcbiAgICAgIGVudHJ5UG9pbnQgKz0gXCJcIjtcbiAgICAgIGlmIChlbnRyeVBvaW50LnN0YXJ0c1dpdGgoXCItXCIpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZW50cnkgcG9pbnQ6ICR7ZW50cnlQb2ludH1gKTtcbiAgICAgIGZsYWdzLnB1c2goZW50cnlQb2ludCk7XG4gICAgfVxuICB9XG4gIGlmIChzdGRpbikge1xuICAgIGxldCBzdGRpbktleXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGxldCBjb250ZW50cyA9IGdldEZsYWcoc3RkaW4sIHN0ZGluS2V5cywgXCJjb250ZW50c1wiLCBtdXN0QmVTdHJpbmcpO1xuICAgIGxldCByZXNvbHZlRGlyID0gZ2V0RmxhZyhzdGRpbiwgc3RkaW5LZXlzLCBcInJlc29sdmVEaXJcIiwgbXVzdEJlU3RyaW5nKTtcbiAgICBsZXQgc291cmNlZmlsZSA9IGdldEZsYWcoc3RkaW4sIHN0ZGluS2V5cywgXCJzb3VyY2VmaWxlXCIsIG11c3RCZVN0cmluZyk7XG4gICAgbGV0IGxvYWRlcjIgPSBnZXRGbGFnKHN0ZGluLCBzdGRpbktleXMsIFwibG9hZGVyXCIsIG11c3RCZVN0cmluZyk7XG4gICAgY2hlY2tGb3JJbnZhbGlkRmxhZ3Moc3RkaW4sIHN0ZGluS2V5cywgJ2luIFwic3RkaW5cIiBvYmplY3QnKTtcbiAgICBpZiAoc291cmNlZmlsZSlcbiAgICAgIGZsYWdzLnB1c2goYC0tc291cmNlZmlsZT0ke3NvdXJjZWZpbGV9YCk7XG4gICAgaWYgKGxvYWRlcjIpXG4gICAgICBmbGFncy5wdXNoKGAtLWxvYWRlcj0ke2xvYWRlcjJ9YCk7XG4gICAgaWYgKHJlc29sdmVEaXIpXG4gICAgICBzdGRpblJlc29sdmVEaXIgPSByZXNvbHZlRGlyICsgXCJcIjtcbiAgICBzdGRpbkNvbnRlbnRzID0gY29udGVudHMgPyBjb250ZW50cyArIFwiXCIgOiBcIlwiO1xuICB9XG4gIGxldCBub2RlUGF0aHMgPSBbXTtcbiAgaWYgKG5vZGVQYXRoc0lucHV0KSB7XG4gICAgZm9yIChsZXQgdmFsdWUgb2Ygbm9kZVBhdGhzSW5wdXQpIHtcbiAgICAgIHZhbHVlICs9IFwiXCI7XG4gICAgICBub2RlUGF0aHMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgZmxhZ3MsXG4gICAgd3JpdGUsXG4gICAgcGx1Z2lucyxcbiAgICBzdGRpbkNvbnRlbnRzLFxuICAgIHN0ZGluUmVzb2x2ZURpcixcbiAgICBhYnNXb3JraW5nRGlyLFxuICAgIGluY3JlbWVudGFsLFxuICAgIG5vZGVQYXRocyxcbiAgICB3YXRjaDogd2F0Y2hNb2RlXG4gIH07XG59XG5mdW5jdGlvbiBmbGFnc0ZvclRyYW5zZm9ybU9wdGlvbnMoY2FsbE5hbWUsIG9wdGlvbnMsIGlzVFRZLCBsb2dMZXZlbERlZmF1bHQpIHtcbiAgbGV0IGZsYWdzID0gW107XG4gIGxldCBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcHVzaExvZ0ZsYWdzKGZsYWdzLCBvcHRpb25zLCBrZXlzLCBpc1RUWSwgbG9nTGV2ZWxEZWZhdWx0KTtcbiAgcHVzaENvbW1vbkZsYWdzKGZsYWdzLCBvcHRpb25zLCBrZXlzKTtcbiAgbGV0IHNvdXJjZW1hcCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJzb3VyY2VtYXBcIiwgbXVzdEJlU3RyaW5nT3JCb29sZWFuKTtcbiAgbGV0IHRzY29uZmlnUmF3ID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInRzY29uZmlnUmF3XCIsIG11c3RCZVN0cmluZ09yT2JqZWN0KTtcbiAgbGV0IHNvdXJjZWZpbGUgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwic291cmNlZmlsZVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgbG9hZGVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImxvYWRlclwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgYmFubmVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImJhbm5lclwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgZm9vdGVyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcImZvb3RlclwiLCBtdXN0QmVTdHJpbmcpO1xuICBjaGVja0ZvckludmFsaWRGbGFncyhvcHRpb25zLCBrZXlzLCBgaW4gJHtjYWxsTmFtZX0oKSBjYWxsYCk7XG4gIGlmIChzb3VyY2VtYXApXG4gICAgZmxhZ3MucHVzaChgLS1zb3VyY2VtYXA9JHtzb3VyY2VtYXAgPT09IHRydWUgPyBcImV4dGVybmFsXCIgOiBzb3VyY2VtYXB9YCk7XG4gIGlmICh0c2NvbmZpZ1JhdylcbiAgICBmbGFncy5wdXNoKGAtLXRzY29uZmlnLXJhdz0ke3R5cGVvZiB0c2NvbmZpZ1JhdyA9PT0gXCJzdHJpbmdcIiA/IHRzY29uZmlnUmF3IDogSlNPTi5zdHJpbmdpZnkodHNjb25maWdSYXcpfWApO1xuICBpZiAoc291cmNlZmlsZSlcbiAgICBmbGFncy5wdXNoKGAtLXNvdXJjZWZpbGU9JHtzb3VyY2VmaWxlfWApO1xuICBpZiAobG9hZGVyKVxuICAgIGZsYWdzLnB1c2goYC0tbG9hZGVyPSR7bG9hZGVyfWApO1xuICBpZiAoYmFubmVyKVxuICAgIGZsYWdzLnB1c2goYC0tYmFubmVyPSR7YmFubmVyfWApO1xuICBpZiAoZm9vdGVyKVxuICAgIGZsYWdzLnB1c2goYC0tZm9vdGVyPSR7Zm9vdGVyfWApO1xuICByZXR1cm4gZmxhZ3M7XG59XG5mdW5jdGlvbiBjcmVhdGVDaGFubmVsKHN0cmVhbUluKSB7XG4gIGxldCByZXNwb25zZUNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbiAgbGV0IHBsdWdpbkNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcbiAgbGV0IHdhdGNoQ2FsbGJhY2tzID0gbmV3IE1hcCgpO1xuICBsZXQgc2VydmVDYWxsYmFja3MgPSBuZXcgTWFwKCk7XG4gIGxldCBuZXh0U2VydmVJRCA9IDA7XG4gIGxldCBpc0Nsb3NlZCA9IGZhbHNlO1xuICBsZXQgbmV4dFJlcXVlc3RJRCA9IDA7XG4gIGxldCBuZXh0QnVpbGRLZXkgPSAwO1xuICBsZXQgc3Rkb3V0ID0gbmV3IFVpbnQ4QXJyYXkoMTYgKiAxMDI0KTtcbiAgbGV0IHN0ZG91dFVzZWQgPSAwO1xuICBsZXQgcmVhZEZyb21TdGRvdXQgPSAoY2h1bmspID0+IHtcbiAgICBsZXQgbGltaXQgPSBzdGRvdXRVc2VkICsgY2h1bmsubGVuZ3RoO1xuICAgIGlmIChsaW1pdCA+IHN0ZG91dC5sZW5ndGgpIHtcbiAgICAgIGxldCBzd2FwID0gbmV3IFVpbnQ4QXJyYXkobGltaXQgKiAyKTtcbiAgICAgIHN3YXAuc2V0KHN0ZG91dCk7XG4gICAgICBzdGRvdXQgPSBzd2FwO1xuICAgIH1cbiAgICBzdGRvdXQuc2V0KGNodW5rLCBzdGRvdXRVc2VkKTtcbiAgICBzdGRvdXRVc2VkICs9IGNodW5rLmxlbmd0aDtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAob2Zmc2V0ICsgNCA8PSBzdGRvdXRVc2VkKSB7XG4gICAgICBsZXQgbGVuZ3RoID0gcmVhZFVJbnQzMkxFKHN0ZG91dCwgb2Zmc2V0KTtcbiAgICAgIGlmIChvZmZzZXQgKyA0ICsgbGVuZ3RoID4gc3Rkb3V0VXNlZCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG9mZnNldCArPSA0O1xuICAgICAgaGFuZGxlSW5jb21pbmdQYWNrZXQoc3Rkb3V0LnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKSk7XG4gICAgICBvZmZzZXQgKz0gbGVuZ3RoO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgc3Rkb3V0LnNldChzdGRvdXQuc2xpY2Uob2Zmc2V0KSk7XG4gICAgICBzdGRvdXRVc2VkIC09IG9mZnNldDtcbiAgICB9XG4gIH07XG4gIGxldCBhZnRlckNsb3NlID0gKCkgPT4ge1xuICAgIGlzQ2xvc2VkID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBjYWxsYmFjayBvZiByZXNwb25zZUNhbGxiYWNrcy52YWx1ZXMoKSkge1xuICAgICAgY2FsbGJhY2soXCJUaGUgc2VydmljZSB3YXMgc3RvcHBlZFwiLCBudWxsKTtcbiAgICB9XG4gICAgcmVzcG9uc2VDYWxsYmFja3MuY2xlYXIoKTtcbiAgICBmb3IgKGxldCBjYWxsYmFja3Mgb2Ygc2VydmVDYWxsYmFja3MudmFsdWVzKCkpIHtcbiAgICAgIGNhbGxiYWNrcy5vbldhaXQoXCJUaGUgc2VydmljZSB3YXMgc3RvcHBlZFwiKTtcbiAgICB9XG4gICAgc2VydmVDYWxsYmFja3MuY2xlYXIoKTtcbiAgICBmb3IgKGxldCBjYWxsYmFjayBvZiB3YXRjaENhbGxiYWNrcy52YWx1ZXMoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2sobmV3IEVycm9yKFwiVGhlIHNlcnZpY2Ugd2FzIHN0b3BwZWRcIiksIG51bGwpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgfVxuICAgIH1cbiAgICB3YXRjaENhbGxiYWNrcy5jbGVhcigpO1xuICB9O1xuICBsZXQgc2VuZFJlcXVlc3QgPSAocmVmcywgdmFsdWUsIGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKGlzQ2xvc2VkKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKFwiVGhlIHNlcnZpY2UgaXMgbm8gbG9uZ2VyIHJ1bm5pbmdcIiwgbnVsbCk7XG4gICAgbGV0IGlkID0gbmV4dFJlcXVlc3RJRCsrO1xuICAgIHJlc3BvbnNlQ2FsbGJhY2tzLnNldChpZCwgKGVycm9yLCByZXNwb25zZSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IsIHJlc3BvbnNlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChyZWZzKVxuICAgICAgICAgIHJlZnMudW5yZWYoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAocmVmcylcbiAgICAgIHJlZnMucmVmKCk7XG4gICAgc3RyZWFtSW4ud3JpdGVUb1N0ZGluKGVuY29kZVBhY2tldCh7aWQsIGlzUmVxdWVzdDogdHJ1ZSwgdmFsdWV9KSk7XG4gIH07XG4gIGxldCBzZW5kUmVzcG9uc2UgPSAoaWQsIHZhbHVlKSA9PiB7XG4gICAgaWYgKGlzQ2xvc2VkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHNlcnZpY2UgaXMgbm8gbG9uZ2VyIHJ1bm5pbmdcIik7XG4gICAgc3RyZWFtSW4ud3JpdGVUb1N0ZGluKGVuY29kZVBhY2tldCh7aWQsIGlzUmVxdWVzdDogZmFsc2UsIHZhbHVlfSkpO1xuICB9O1xuICBsZXQgaGFuZGxlUmVxdWVzdCA9IChpZCwgcmVxdWVzdCkgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgIHRyeSB7XG4gICAgICBzd2l0Y2ggKHJlcXVlc3QuY29tbWFuZCkge1xuICAgICAgICBjYXNlIFwicGluZ1wiOiB7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKGlkLCB7fSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJlc29sdmVcIjoge1xuICAgICAgICAgIGxldCBjYWxsYmFjayA9IHBsdWdpbkNhbGxiYWNrcy5nZXQocmVxdWVzdC5rZXkpO1xuICAgICAgICAgIGlmICghY2FsbGJhY2spXG4gICAgICAgICAgICBzZW5kUmVzcG9uc2UoaWQsIHt9KTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBzZW5kUmVzcG9uc2UoaWQsIHlpZWxkIGNhbGxiYWNrKHJlcXVlc3QpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwibG9hZFwiOiB7XG4gICAgICAgICAgbGV0IGNhbGxiYWNrID0gcGx1Z2luQ2FsbGJhY2tzLmdldChyZXF1ZXN0LmtleSk7XG4gICAgICAgICAgaWYgKCFjYWxsYmFjaylcbiAgICAgICAgICAgIHNlbmRSZXNwb25zZShpZCwge30pO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHNlbmRSZXNwb25zZShpZCwgeWllbGQgY2FsbGJhY2socmVxdWVzdCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzZXJ2ZS1yZXF1ZXN0XCI6IHtcbiAgICAgICAgICBsZXQgY2FsbGJhY2tzID0gc2VydmVDYWxsYmFja3MuZ2V0KHJlcXVlc3Quc2VydmVJRCk7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrcyAmJiBjYWxsYmFja3Mub25SZXF1ZXN0KVxuICAgICAgICAgICAgY2FsbGJhY2tzLm9uUmVxdWVzdChyZXF1ZXN0LmFyZ3MpO1xuICAgICAgICAgIHNlbmRSZXNwb25zZShpZCwge30pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJzZXJ2ZS13YWl0XCI6IHtcbiAgICAgICAgICBsZXQgY2FsbGJhY2tzID0gc2VydmVDYWxsYmFja3MuZ2V0KHJlcXVlc3Quc2VydmVJRCk7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrcylcbiAgICAgICAgICAgIGNhbGxiYWNrcy5vbldhaXQocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgc2VuZFJlc3BvbnNlKGlkLCB7fSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIndhdGNoLXJlYnVpbGRcIjoge1xuICAgICAgICAgIGxldCBjYWxsYmFjayA9IHdhdGNoQ2FsbGJhY2tzLmdldChyZXF1ZXN0LndhdGNoSUQpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spXG4gICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlcXVlc3QuYXJncyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlbmRSZXNwb25zZShpZCwge30pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbW1hbmQ6IGAgKyByZXF1ZXN0LmNvbW1hbmQpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNlbmRSZXNwb25zZShpZCwge2Vycm9yczogW2V4dHJhY3RFcnJvck1lc3NhZ2VWOChlLCBzdHJlYW1JbiwgbnVsbCwgdm9pZCAwKV19KTtcbiAgICB9XG4gIH0pO1xuICBsZXQgaXNGaXJzdFBhY2tldCA9IHRydWU7XG4gIGxldCBoYW5kbGVJbmNvbWluZ1BhY2tldCA9IChieXRlcykgPT4ge1xuICAgIGlmIChpc0ZpcnN0UGFja2V0KSB7XG4gICAgICBpc0ZpcnN0UGFja2V0ID0gZmFsc2U7XG4gICAgICBsZXQgYmluYXJ5VmVyc2lvbiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uYnl0ZXMpO1xuICAgICAgaWYgKGJpbmFyeVZlcnNpb24gIT09IFwiMC45LjBcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBzdGFydCBzZXJ2aWNlOiBIb3N0IHZlcnNpb24gXCIke1wiMC45LjBcIn1cIiBkb2VzIG5vdCBtYXRjaCBiaW5hcnkgdmVyc2lvbiAke0pTT04uc3RyaW5naWZ5KGJpbmFyeVZlcnNpb24pfWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcGFja2V0ID0gZGVjb2RlUGFja2V0KGJ5dGVzKTtcbiAgICBpZiAocGFja2V0LmlzUmVxdWVzdCkge1xuICAgICAgaGFuZGxlUmVxdWVzdChwYWNrZXQuaWQsIHBhY2tldC52YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBjYWxsYmFjayA9IHJlc3BvbnNlQ2FsbGJhY2tzLmdldChwYWNrZXQuaWQpO1xuICAgICAgcmVzcG9uc2VDYWxsYmFja3MuZGVsZXRlKHBhY2tldC5pZCk7XG4gICAgICBpZiAocGFja2V0LnZhbHVlLmVycm9yKVxuICAgICAgICBjYWxsYmFjayhwYWNrZXQudmFsdWUuZXJyb3IsIHt9KTtcbiAgICAgIGVsc2VcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcGFja2V0LnZhbHVlKTtcbiAgICB9XG4gIH07XG4gIGxldCBoYW5kbGVQbHVnaW5zID0gKHBsdWdpbnMsIHJlcXVlc3QsIGJ1aWxkS2V5LCBzdGFzaCkgPT4ge1xuICAgIGlmIChzdHJlYW1Jbi5pc1N5bmMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgdXNlIHBsdWdpbnMgaW4gc3luY2hyb25vdXMgQVBJIGNhbGxzXCIpO1xuICAgIGxldCBvblJlc29sdmVDYWxsYmFja3MgPSB7fTtcbiAgICBsZXQgb25Mb2FkQ2FsbGJhY2tzID0ge307XG4gICAgbGV0IG5leHRDYWxsYmFja0lEID0gMDtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmVxdWVzdC5wbHVnaW5zID0gW107XG4gICAgZm9yIChsZXQgaXRlbSBvZiBwbHVnaW5zKSB7XG4gICAgICBsZXQga2V5cyA9IHt9O1xuICAgICAgaWYgKHR5cGVvZiBpdGVtICE9PSBcIm9iamVjdFwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBsdWdpbiBhdCBpbmRleCAke2l9IG11c3QgYmUgYW4gb2JqZWN0YCk7XG4gICAgICBsZXQgbmFtZSA9IGdldEZsYWcoaXRlbSwga2V5cywgXCJuYW1lXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICBsZXQgc2V0dXAgPSBnZXRGbGFnKGl0ZW0sIGtleXMsIFwic2V0dXBcIiwgbXVzdEJlRnVuY3Rpb24pO1xuICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiIHx8IG5hbWUgPT09IFwiXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUGx1Z2luIGF0IGluZGV4ICR7aX0gaXMgbWlzc2luZyBhIG5hbWVgKTtcbiAgICAgIGlmICh0eXBlb2Ygc2V0dXAgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbJHtuYW1lfV0gUGx1Z2luIGlzIG1pc3NpbmcgYSBzZXR1cCBmdW5jdGlvbmApO1xuICAgICAgY2hlY2tGb3JJbnZhbGlkRmxhZ3MoaXRlbSwga2V5cywgYG9uIHBsdWdpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWApO1xuICAgICAgbGV0IHBsdWdpbiA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgb25SZXNvbHZlOiBbXSxcbiAgICAgICAgb25Mb2FkOiBbXVxuICAgICAgfTtcbiAgICAgIGkrKztcbiAgICAgIHNldHVwKHtcbiAgICAgICAgb25SZXNvbHZlKG9wdGlvbnMsIGNhbGxiYWNrMikge1xuICAgICAgICAgIGxldCByZWdpc3RlcmVkVGV4dCA9IGBUaGlzIGVycm9yIGNhbWUgZnJvbSB0aGUgXCJvblJlc29sdmVcIiBjYWxsYmFjayByZWdpc3RlcmVkIGhlcmVgO1xuICAgICAgICAgIGxldCByZWdpc3RlcmVkTm90ZSA9IGV4dHJhY3RDYWxsZXJWOChuZXcgRXJyb3IocmVnaXN0ZXJlZFRleHQpLCBzdHJlYW1JbiwgXCJvblJlc29sdmVcIik7XG4gICAgICAgICAgbGV0IGtleXMyID0ge307XG4gICAgICAgICAgbGV0IGZpbHRlciA9IGdldEZsYWcob3B0aW9ucywga2V5czIsIFwiZmlsdGVyXCIsIG11c3RCZVJlZ0V4cCk7XG4gICAgICAgICAgbGV0IG5hbWVzcGFjZSA9IGdldEZsYWcob3B0aW9ucywga2V5czIsIFwibmFtZXNwYWNlXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgICAgY2hlY2tGb3JJbnZhbGlkRmxhZ3Mob3B0aW9ucywga2V5czIsIGBpbiBvblJlc29sdmUoKSBjYWxsIGZvciBwbHVnaW4gJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gKTtcbiAgICAgICAgICBpZiAoZmlsdGVyID09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske3BsdWdpbi5uYW1lfV0gb25SZXNvbHZlKCkgY2FsbCBpcyBtaXNzaW5nIGEgZmlsdGVyYCk7XG4gICAgICAgICAgbGV0IGlkID0gbmV4dENhbGxiYWNrSUQrKztcbiAgICAgICAgICBvblJlc29sdmVDYWxsYmFja3NbaWRdID0ge25hbWUsIGNhbGxiYWNrOiBjYWxsYmFjazIsIG5vdGU6IHJlZ2lzdGVyZWROb3RlfTtcbiAgICAgICAgICBwbHVnaW4ub25SZXNvbHZlLnB1c2goe2lkLCBmaWx0ZXI6IGZpbHRlci5zb3VyY2UsIG5hbWVzcGFjZTogbmFtZXNwYWNlIHx8IFwiXCJ9KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Mb2FkKG9wdGlvbnMsIGNhbGxiYWNrMikge1xuICAgICAgICAgIGxldCByZWdpc3RlcmVkVGV4dCA9IGBUaGlzIGVycm9yIGNhbWUgZnJvbSB0aGUgXCJvbkxvYWRcIiBjYWxsYmFjayByZWdpc3RlcmVkIGhlcmVgO1xuICAgICAgICAgIGxldCByZWdpc3RlcmVkTm90ZSA9IGV4dHJhY3RDYWxsZXJWOChuZXcgRXJyb3IocmVnaXN0ZXJlZFRleHQpLCBzdHJlYW1JbiwgXCJvbkxvYWRcIik7XG4gICAgICAgICAgbGV0IGtleXMyID0ge307XG4gICAgICAgICAgbGV0IGZpbHRlciA9IGdldEZsYWcob3B0aW9ucywga2V5czIsIFwiZmlsdGVyXCIsIG11c3RCZVJlZ0V4cCk7XG4gICAgICAgICAgbGV0IG5hbWVzcGFjZSA9IGdldEZsYWcob3B0aW9ucywga2V5czIsIFwibmFtZXNwYWNlXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgICAgY2hlY2tGb3JJbnZhbGlkRmxhZ3Mob3B0aW9ucywga2V5czIsIGBpbiBvbkxvYWQoKSBjYWxsIGZvciBwbHVnaW4gJHtKU09OLnN0cmluZ2lmeShuYW1lKX1gKTtcbiAgICAgICAgICBpZiAoZmlsdGVyID09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske3BsdWdpbi5uYW1lfV0gb25Mb2FkKCkgY2FsbCBpcyBtaXNzaW5nIGEgZmlsdGVyYCk7XG4gICAgICAgICAgbGV0IGlkID0gbmV4dENhbGxiYWNrSUQrKztcbiAgICAgICAgICBvbkxvYWRDYWxsYmFja3NbaWRdID0ge25hbWUsIGNhbGxiYWNrOiBjYWxsYmFjazIsIG5vdGU6IHJlZ2lzdGVyZWROb3RlfTtcbiAgICAgICAgICBwbHVnaW4ub25Mb2FkLnB1c2goe2lkLCBmaWx0ZXI6IGZpbHRlci5zb3VyY2UsIG5hbWVzcGFjZTogbmFtZXNwYWNlIHx8IFwiXCJ9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXF1ZXN0LnBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgIH1cbiAgICBjb25zdCBjYWxsYmFjayA9IChyZXF1ZXN0MikgPT4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiogKCkge1xuICAgICAgc3dpdGNoIChyZXF1ZXN0Mi5jb21tYW5kKSB7XG4gICAgICAgIGNhc2UgXCJyZXNvbHZlXCI6IHtcbiAgICAgICAgICBsZXQgcmVzcG9uc2UgPSB7fSwgbmFtZSwgY2FsbGJhY2syLCBub3RlO1xuICAgICAgICAgIGZvciAobGV0IGlkIG9mIHJlcXVlc3QyLmlkcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgKHtuYW1lLCBjYWxsYmFjazogY2FsbGJhY2syLCBub3RlfSA9IG9uUmVzb2x2ZUNhbGxiYWNrc1tpZF0pO1xuICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgY2FsbGJhY2syKHtcbiAgICAgICAgICAgICAgICBwYXRoOiByZXF1ZXN0Mi5wYXRoLFxuICAgICAgICAgICAgICAgIGltcG9ydGVyOiByZXF1ZXN0Mi5pbXBvcnRlcixcbiAgICAgICAgICAgICAgICBuYW1lc3BhY2U6IHJlcXVlc3QyLm5hbWVzcGFjZSxcbiAgICAgICAgICAgICAgICByZXNvbHZlRGlyOiByZXF1ZXN0Mi5yZXNvbHZlRGlyLFxuICAgICAgICAgICAgICAgIGtpbmQ6IHJlcXVlc3QyLmtpbmQsXG4gICAgICAgICAgICAgICAgcGx1Z2luRGF0YTogc3Rhc2gubG9hZChyZXF1ZXN0Mi5wbHVnaW5EYXRhKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIG9uUmVzb2x2ZSgpIGNhbGxiYWNrIGluIHBsdWdpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfSB0byByZXR1cm4gYW4gb2JqZWN0YCk7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSB7fTtcbiAgICAgICAgICAgICAgICBsZXQgcGx1Z2luTmFtZSA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcInBsdWdpbk5hbWVcIiwgbXVzdEJlU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcInBhdGhcIiwgbXVzdEJlU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZXNwYWNlID0gZ2V0RmxhZyhyZXN1bHQsIGtleXMsIFwibmFtZXNwYWNlXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgbGV0IGV4dGVybmFsID0gZ2V0RmxhZyhyZXN1bHQsIGtleXMsIFwiZXh0ZXJuYWxcIiwgbXVzdEJlQm9vbGVhbik7XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpbkRhdGEgPSBnZXRGbGFnKHJlc3VsdCwga2V5cywgXCJwbHVnaW5EYXRhXCIsIGNhbkJlQW55dGhpbmcpO1xuICAgICAgICAgICAgICAgIGxldCBlcnJvcnMgPSBnZXRGbGFnKHJlc3VsdCwga2V5cywgXCJlcnJvcnNcIiwgbXVzdEJlQXJyYXkpO1xuICAgICAgICAgICAgICAgIGxldCB3YXJuaW5ncyA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcIndhcm5pbmdzXCIsIG11c3RCZUFycmF5KTtcbiAgICAgICAgICAgICAgICBjaGVja0ZvckludmFsaWRGbGFncyhyZXN1bHQsIGtleXMsIGBmcm9tIG9uUmVzb2x2ZSgpIGNhbGxiYWNrIGluIHBsdWdpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWApO1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlkID0gaWQ7XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbk5hbWUgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnBsdWdpbk5hbWUgPSBwbHVnaW5OYW1lO1xuICAgICAgICAgICAgICAgIGlmIChwYXRoICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5wYXRoID0gcGF0aDtcbiAgICAgICAgICAgICAgICBpZiAobmFtZXNwYWNlICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgICAgICAgICAgICAgaWYgKGV4dGVybmFsICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5leHRlcm5hbCA9IGV4dGVybmFsO1xuICAgICAgICAgICAgICAgIGlmIChwbHVnaW5EYXRhICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5wbHVnaW5EYXRhID0gc3Rhc2guc3RvcmUocGx1Z2luRGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycyAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3JzID0gc2FuaXRpemVNZXNzYWdlcyhlcnJvcnMsIFwiZXJyb3JzXCIsIHN0YXNoKTtcbiAgICAgICAgICAgICAgICBpZiAod2FybmluZ3MgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLndhcm5pbmdzID0gc2FuaXRpemVNZXNzYWdlcyh3YXJuaW5ncywgXCJ3YXJuaW5nc1wiLCBzdGFzaCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtpZCwgZXJyb3JzOiBbZXh0cmFjdEVycm9yTWVzc2FnZVY4KGUsIHN0cmVhbUluLCBzdGFzaCwgbm90ZSldfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJsb2FkXCI6IHtcbiAgICAgICAgICBsZXQgcmVzcG9uc2UgPSB7fSwgbmFtZSwgY2FsbGJhY2syLCBub3RlO1xuICAgICAgICAgIGZvciAobGV0IGlkIG9mIHJlcXVlc3QyLmlkcykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgKHtuYW1lLCBjYWxsYmFjazogY2FsbGJhY2syLCBub3RlfSA9IG9uTG9hZENhbGxiYWNrc1tpZF0pO1xuICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgY2FsbGJhY2syKHtcbiAgICAgICAgICAgICAgICBwYXRoOiByZXF1ZXN0Mi5wYXRoLFxuICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogcmVxdWVzdDIubmFtZXNwYWNlLFxuICAgICAgICAgICAgICAgIHBsdWdpbkRhdGE6IHN0YXNoLmxvYWQocmVxdWVzdDIucGx1Z2luRGF0YSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBvbkxvYWQoKSBjYWxsYmFjayBpbiBwbHVnaW4gJHtKU09OLnN0cmluZ2lmeShuYW1lKX0gdG8gcmV0dXJuIGFuIG9iamVjdGApO1xuICAgICAgICAgICAgICAgIGxldCBrZXlzID0ge307XG4gICAgICAgICAgICAgICAgbGV0IHBsdWdpbk5hbWUgPSBnZXRGbGFnKHJlc3VsdCwga2V5cywgXCJwbHVnaW5OYW1lXCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnRzID0gZ2V0RmxhZyhyZXN1bHQsIGtleXMsIFwiY29udGVudHNcIiwgbXVzdEJlU3RyaW5nT3JVaW50OEFycmF5KTtcbiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZURpciA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcInJlc29sdmVEaXJcIiwgbXVzdEJlU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBsZXQgcGx1Z2luRGF0YSA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcInBsdWdpbkRhdGFcIiwgY2FuQmVBbnl0aGluZyk7XG4gICAgICAgICAgICAgICAgbGV0IGxvYWRlciA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcImxvYWRlclwiLCBtdXN0QmVTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGxldCBlcnJvcnMgPSBnZXRGbGFnKHJlc3VsdCwga2V5cywgXCJlcnJvcnNcIiwgbXVzdEJlQXJyYXkpO1xuICAgICAgICAgICAgICAgIGxldCB3YXJuaW5ncyA9IGdldEZsYWcocmVzdWx0LCBrZXlzLCBcIndhcm5pbmdzXCIsIG11c3RCZUFycmF5KTtcbiAgICAgICAgICAgICAgICBjaGVja0ZvckludmFsaWRGbGFncyhyZXN1bHQsIGtleXMsIGBmcm9tIG9uTG9hZCgpIGNhbGxiYWNrIGluIHBsdWdpbiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfWApO1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLmlkID0gaWQ7XG4gICAgICAgICAgICAgICAgaWYgKHBsdWdpbk5hbWUgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnBsdWdpbk5hbWUgPSBwbHVnaW5OYW1lO1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50cyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5jb250ZW50cyA9IGNvbnRlbnRzO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRlbnRzICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5jb250ZW50cyA9IGVuY29kZVVURjgoY29udGVudHMpO1xuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlRGlyICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5yZXNvbHZlRGlyID0gcmVzb2x2ZURpcjtcbiAgICAgICAgICAgICAgICBpZiAocGx1Z2luRGF0YSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucGx1Z2luRGF0YSA9IHN0YXNoLnN0b3JlKHBsdWdpbkRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChsb2FkZXIgIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmxvYWRlciA9IGxvYWRlcjtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3JzICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICByZXNwb25zZS5lcnJvcnMgPSBzYW5pdGl6ZU1lc3NhZ2VzKGVycm9ycywgXCJlcnJvcnNcIiwgc3Rhc2gpO1xuICAgICAgICAgICAgICAgIGlmICh3YXJuaW5ncyAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgcmVzcG9uc2Uud2FybmluZ3MgPSBzYW5pdGl6ZU1lc3NhZ2VzKHdhcm5pbmdzLCBcIndhcm5pbmdzXCIsIHN0YXNoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICByZXR1cm4ge2lkLCBlcnJvcnM6IFtleHRyYWN0RXJyb3JNZXNzYWdlVjgoZSwgc3RyZWFtSW4sIHN0YXNoLCBub3RlKV19O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY29tbWFuZDogYCArIHJlcXVlc3QyLmNvbW1hbmQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCByZWZDb3VudCA9IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZigpIHtcbiAgICAgICAgaWYgKCsrcmVmQ291bnQgPT09IDEpXG4gICAgICAgICAgcGx1Z2luQ2FsbGJhY2tzLnNldChidWlsZEtleSwgY2FsbGJhY2spO1xuICAgICAgfSxcbiAgICAgIHVucmVmKCkge1xuICAgICAgICBpZiAoLS1yZWZDb3VudCA9PT0gMClcbiAgICAgICAgICBwbHVnaW5DYWxsYmFja3MuZGVsZXRlKGJ1aWxkS2V5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICBsZXQgYnVpbGRTZXJ2ZURhdGEgPSAocmVmcywgb3B0aW9ucywgcmVxdWVzdCkgPT4ge1xuICAgIGxldCBrZXlzID0ge307XG4gICAgbGV0IHBvcnQgPSBnZXRGbGFnKG9wdGlvbnMsIGtleXMsIFwicG9ydFwiLCBtdXN0QmVJbnRlZ2VyKTtcbiAgICBsZXQgaG9zdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJob3N0XCIsIG11c3RCZVN0cmluZyk7XG4gICAgbGV0IHNlcnZlZGlyID0gZ2V0RmxhZyhvcHRpb25zLCBrZXlzLCBcInNlcnZlZGlyXCIsIG11c3RCZVN0cmluZyk7XG4gICAgbGV0IG9uUmVxdWVzdCA9IGdldEZsYWcob3B0aW9ucywga2V5cywgXCJvblJlcXVlc3RcIiwgbXVzdEJlRnVuY3Rpb24pO1xuICAgIGxldCBzZXJ2ZUlEID0gbmV4dFNlcnZlSUQrKztcbiAgICBsZXQgb25XYWl0O1xuICAgIGxldCB3YWl0ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgb25XYWl0ID0gKGVycm9yKSA9PiB7XG4gICAgICAgIHNlcnZlQ2FsbGJhY2tzLmRlbGV0ZShzZXJ2ZUlEKTtcbiAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKVxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXJyb3IpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmVxdWVzdC5zZXJ2ZSA9IHtzZXJ2ZUlEfTtcbiAgICBjaGVja0ZvckludmFsaWRGbGFncyhvcHRpb25zLCBrZXlzLCBgaW4gc2VydmUoKSBjYWxsYCk7XG4gICAgaWYgKHBvcnQgIT09IHZvaWQgMClcbiAgICAgIHJlcXVlc3Quc2VydmUucG9ydCA9IHBvcnQ7XG4gICAgaWYgKGhvc3QgIT09IHZvaWQgMClcbiAgICAgIHJlcXVlc3Quc2VydmUuaG9zdCA9IGhvc3Q7XG4gICAgaWYgKHNlcnZlZGlyICE9PSB2b2lkIDApXG4gICAgICByZXF1ZXN0LnNlcnZlLnNlcnZlZGlyID0gc2VydmVkaXI7XG4gICAgc2VydmVDYWxsYmFja3Muc2V0KHNlcnZlSUQsIHtcbiAgICAgIG9uUmVxdWVzdCxcbiAgICAgIG9uV2FpdFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB3YWl0LFxuICAgICAgc3RvcCgpIHtcbiAgICAgICAgc2VuZFJlcXVlc3QocmVmcywge2NvbW1hbmQ6IFwic2VydmUtc3RvcFwiLCBzZXJ2ZUlEfSwgKCkgPT4ge1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuICByZXR1cm4ge1xuICAgIHJlYWRGcm9tU3Rkb3V0LFxuICAgIGFmdGVyQ2xvc2UsXG4gICAgc2VydmljZToge1xuICAgICAgYnVpbGRPclNlcnZlKGNhbGxOYW1lLCBjYWxsZXJSZWZzLCBzZXJ2ZU9wdGlvbnMsIG9wdGlvbnMsIGlzVFRZLCBkZWZhdWx0V0QsIGNhbGxiYWNrKSB7XG4gICAgICAgIGxldCBwbHVnaW5SZWZzO1xuICAgICAgICBjb25zdCBkZXRhaWxzID0gY3JlYXRlT2JqZWN0U3Rhc2goKTtcbiAgICAgICAgY29uc3QgbG9nTGV2ZWxEZWZhdWx0ID0gXCJ3YXJuaW5nXCI7XG4gICAgICAgIGNvbnN0IHJlZnMgPSB7XG4gICAgICAgICAgcmVmKCkge1xuICAgICAgICAgICAgaWYgKHBsdWdpblJlZnMpXG4gICAgICAgICAgICAgIHBsdWdpblJlZnMucmVmKCk7XG4gICAgICAgICAgICBpZiAoY2FsbGVyUmVmcylcbiAgICAgICAgICAgICAgY2FsbGVyUmVmcy5yZWYoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVucmVmKCkge1xuICAgICAgICAgICAgaWYgKHBsdWdpblJlZnMpXG4gICAgICAgICAgICAgIHBsdWdpblJlZnMudW5yZWYoKTtcbiAgICAgICAgICAgIGlmIChjYWxsZXJSZWZzKVxuICAgICAgICAgICAgICBjYWxsZXJSZWZzLnVucmVmKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxldCBrZXkgPSBuZXh0QnVpbGRLZXkrKztcbiAgICAgICAgICBsZXQgd3JpdGVEZWZhdWx0ID0gIXN0cmVhbUluLmlzQnJvd3NlcjtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgZmxhZ3MsXG4gICAgICAgICAgICB3cml0ZSxcbiAgICAgICAgICAgIHBsdWdpbnMsXG4gICAgICAgICAgICBzdGRpbkNvbnRlbnRzLFxuICAgICAgICAgICAgc3RkaW5SZXNvbHZlRGlyLFxuICAgICAgICAgICAgYWJzV29ya2luZ0RpcixcbiAgICAgICAgICAgIGluY3JlbWVudGFsLFxuICAgICAgICAgICAgbm9kZVBhdGhzLFxuICAgICAgICAgICAgd2F0Y2hcbiAgICAgICAgICB9ID0gZmxhZ3NGb3JCdWlsZE9wdGlvbnMoY2FsbE5hbWUsIG9wdGlvbnMsIGlzVFRZLCBsb2dMZXZlbERlZmF1bHQsIHdyaXRlRGVmYXVsdCk7XG4gICAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBjb21tYW5kOiBcImJ1aWxkXCIsXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBmbGFncyxcbiAgICAgICAgICAgIHdyaXRlLFxuICAgICAgICAgICAgc3RkaW5Db250ZW50cyxcbiAgICAgICAgICAgIHN0ZGluUmVzb2x2ZURpcixcbiAgICAgICAgICAgIGFic1dvcmtpbmdEaXI6IGFic1dvcmtpbmdEaXIgfHwgZGVmYXVsdFdELFxuICAgICAgICAgICAgaW5jcmVtZW50YWwsXG4gICAgICAgICAgICBub2RlUGF0aHMsXG4gICAgICAgICAgICBoYXNPblJlYnVpbGQ6ICEhKHdhdGNoICYmIHdhdGNoLm9uUmVidWlsZClcbiAgICAgICAgICB9O1xuICAgICAgICAgIGxldCBzZXJ2ZTIgPSBzZXJ2ZU9wdGlvbnMgJiYgYnVpbGRTZXJ2ZURhdGEocmVmcywgc2VydmVPcHRpb25zLCByZXF1ZXN0KTtcbiAgICAgICAgICBpZiAocGx1Z2lucyAmJiBwbHVnaW5zLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBwbHVnaW5SZWZzID0gaGFuZGxlUGx1Z2lucyhwbHVnaW5zLCByZXF1ZXN0LCBrZXksIGRldGFpbHMpO1xuICAgICAgICAgIGxldCByZWJ1aWxkO1xuICAgICAgICAgIGxldCBzdG9wO1xuICAgICAgICAgIGxldCBidWlsZFJlc3BvbnNlVG9SZXN1bHQgPSAocmVzcG9uc2UsIGNhbGxiYWNrMikgPT4ge1xuICAgICAgICAgICAgbGV0IGVycm9ycyA9IHJlcGxhY2VEZXRhaWxzSW5NZXNzYWdlcyhyZXNwb25zZS5lcnJvcnMsIGRldGFpbHMpO1xuICAgICAgICAgICAgbGV0IHdhcm5pbmdzID0gcmVwbGFjZURldGFpbHNJbk1lc3NhZ2VzKHJlc3BvbnNlLndhcm5pbmdzLCBkZXRhaWxzKTtcbiAgICAgICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrMihmYWlsdXJlRXJyb3JXaXRoTG9nKFwiQnVpbGQgZmFpbGVkXCIsIGVycm9ycywgd2FybmluZ3MpLCBudWxsKTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSB7d2FybmluZ3N9O1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm91dHB1dEZpbGVzKVxuICAgICAgICAgICAgICByZXN1bHQub3V0cHV0RmlsZXMgPSByZXNwb25zZS5vdXRwdXRGaWxlcy5tYXAoY29udmVydE91dHB1dEZpbGVzKTtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5tZXRhZmlsZSlcbiAgICAgICAgICAgICAgcmVzdWx0Lm1ldGFmaWxlID0gSlNPTi5wYXJzZShyZXNwb25zZS5tZXRhZmlsZSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uud3JpdGVUb1N0ZG91dCAhPT0gdm9pZCAwKVxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkZWNvZGVVVEY4KHJlc3BvbnNlLndyaXRlVG9TdGRvdXQpLnJlcGxhY2UoL1xcbiQvLCBcIlwiKSk7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UucmVidWlsZElEICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgaWYgKCFyZWJ1aWxkKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZWJ1aWxkID0gKCkgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGlzRGlzcG9zZWQgfHwgaXNDbG9zZWQpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZWJ1aWxkXCIpO1xuICAgICAgICAgICAgICAgICAgc2VuZFJlcXVlc3QocmVmcywge2NvbW1hbmQ6IFwicmVidWlsZFwiLCByZWJ1aWxkSUQ6IHJlc3BvbnNlLnJlYnVpbGRJRH0sIChlcnJvcjIsIHJlc3BvbnNlMikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IyKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjazIobmV3IEVycm9yKGVycm9yMiksIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBidWlsZFJlc3BvbnNlVG9SZXN1bHQocmVzcG9uc2UyLCAoZXJyb3IzLCByZXN1bHQzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yMylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcjMpO1xuICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0Myk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5yZWYoKTtcbiAgICAgICAgICAgICAgICByZWJ1aWxkLmRpc3Bvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoaXNEaXNwb3NlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdChyZWZzLCB7Y29tbWFuZDogXCJyZWJ1aWxkLWRpc3Bvc2VcIiwgcmVidWlsZElEOiByZXNwb25zZS5yZWJ1aWxkSUR9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJlZnMudW5yZWYoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdC5yZWJ1aWxkID0gcmVidWlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS53YXRjaElEICE9PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgaWYgKCFzdG9wKSB7XG4gICAgICAgICAgICAgICAgbGV0IGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlZnMucmVmKCk7XG4gICAgICAgICAgICAgICAgc3RvcCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChpc1N0b3BwZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgIGlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB3YXRjaENhbGxiYWNrcy5kZWxldGUocmVzcG9uc2Uud2F0Y2hJRCk7XG4gICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdChyZWZzLCB7Y29tbWFuZDogXCJ3YXRjaC1zdG9wXCIsIHdhdGNoSUQ6IHJlc3BvbnNlLndhdGNoSUR9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJlZnMudW5yZWYoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh3YXRjaCAmJiB3YXRjaC5vblJlYnVpbGQpIHtcbiAgICAgICAgICAgICAgICAgIHdhdGNoQ2FsbGJhY2tzLnNldChyZXNwb25zZS53YXRjaElELCAoc2VydmljZVN0b3BFcnJvciwgd2F0Y2hSZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VydmljZVN0b3BFcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2F0Y2gub25SZWJ1aWxkKHNlcnZpY2VTdG9wRXJyb3IsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JzMiA9IHJlcGxhY2VEZXRhaWxzSW5NZXNzYWdlcyh3YXRjaFJlc3BvbnNlLmVycm9ycywgZGV0YWlscyk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB3YXJuaW5nczIgPSByZXBsYWNlRGV0YWlsc0luTWVzc2FnZXMod2F0Y2hSZXNwb25zZS53YXJuaW5ncywgZGV0YWlscyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcnMyLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdhdGNoLm9uUmVidWlsZChmYWlsdXJlRXJyb3JXaXRoTG9nKFwiQnVpbGQgZmFpbGVkXCIsIGVycm9yczIsIHdhcm5pbmdzMiksIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0MiA9IHt3YXJuaW5nczogd2FybmluZ3MyfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdhdGNoUmVzcG9uc2Uub3V0cHV0RmlsZXMpXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Mi5vdXRwdXRGaWxlcyA9IHdhdGNoUmVzcG9uc2Uub3V0cHV0RmlsZXMubWFwKGNvbnZlcnRPdXRwdXRGaWxlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3YXRjaFJlc3BvbnNlLnJlYnVpbGRJRCAhPT0gdm9pZCAwKVxuICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDIucmVidWlsZCA9IHJlYnVpbGQ7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDIuc3RvcCA9IHN0b3A7XG4gICAgICAgICAgICAgICAgICAgIHdhdGNoLm9uUmVidWlsZChudWxsLCByZXN1bHQyKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHQuc3RvcCA9IHN0b3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2syKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAod3JpdGUgJiYgc3RyZWFtSW4uaXNCcm93c2VyKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZW5hYmxlIFwid3JpdGVcIiBpbiB0aGUgYnJvd3NlcmApO1xuICAgICAgICAgIGlmIChpbmNyZW1lbnRhbCAmJiBzdHJlYW1Jbi5pc1N5bmMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCB1c2UgXCJpbmNyZW1lbnRhbFwiIHdpdGggYSBzeW5jaHJvbm91cyBidWlsZGApO1xuICAgICAgICAgIHNlbmRSZXF1ZXN0KHJlZnMsIHJlcXVlc3QsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihlcnJvciksIG51bGwpO1xuICAgICAgICAgICAgaWYgKHNlcnZlMikge1xuICAgICAgICAgICAgICBsZXQgc2VydmVSZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICAgICAgICBsZXQgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJlZnMucmVmKCk7XG4gICAgICAgICAgICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgcG9ydDogc2VydmVSZXNwb25zZS5wb3J0LFxuICAgICAgICAgICAgICAgIGhvc3Q6IHNlcnZlUmVzcG9uc2UuaG9zdCxcbiAgICAgICAgICAgICAgICB3YWl0OiBzZXJ2ZTIud2FpdCxcbiAgICAgICAgICAgICAgICBzdG9wKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKGlzU3RvcHBlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHNlcnZlMi5zdG9wKCk7XG4gICAgICAgICAgICAgICAgICByZWZzLnVucmVmKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZWZzLnJlZigpO1xuICAgICAgICAgICAgICBzZXJ2ZTIud2FpdC50aGVuKHJlZnMudW5yZWYsIHJlZnMudW5yZWYpO1xuICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBidWlsZFJlc3BvbnNlVG9SZXN1bHQocmVzcG9uc2UsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGxldCBmbGFncyA9IFtdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwdXNoTG9nRmxhZ3MoZmxhZ3MsIG9wdGlvbnMsIHt9LCBpc1RUWSwgbG9nTGV2ZWxEZWZhdWx0KTtcbiAgICAgICAgICB9IGNhdGNoIChlMikge1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBlcnJvciA9IGV4dHJhY3RFcnJvck1lc3NhZ2VWOChlLCBzdHJlYW1JbiwgZGV0YWlscywgdm9pZCAwKTtcbiAgICAgICAgICBzZW5kUmVxdWVzdChyZWZzLCB7Y29tbWFuZDogXCJlcnJvclwiLCBmbGFncywgZXJyb3J9LCAoKSA9PiB7XG4gICAgICAgICAgICBlcnJvci5kZXRhaWwgPSBkZXRhaWxzLmxvYWQoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGZhaWx1cmVFcnJvcldpdGhMb2coXCJCdWlsZCBmYWlsZWRcIiwgW2Vycm9yXSwgW10pLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zZm9ybShjYWxsTmFtZSwgcmVmcywgaW5wdXQsIG9wdGlvbnMsIGlzVFRZLCBmcywgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgZGV0YWlscyA9IGNyZWF0ZU9iamVjdFN0YXNoKCk7XG4gICAgICAgIGNvbnN0IGxvZ0xldmVsRGVmYXVsdCA9IFwic2lsZW50XCI7XG4gICAgICAgIGxldCBzdGFydCA9IChpbnB1dFBhdGgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5wdXQgdG8gXCJ0cmFuc2Zvcm1cIiBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSBmbGFnc0ZvclRyYW5zZm9ybU9wdGlvbnMoY2FsbE5hbWUsIG9wdGlvbnMsIGlzVFRZLCBsb2dMZXZlbERlZmF1bHQpO1xuICAgICAgICAgICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgIGNvbW1hbmQ6IFwidHJhbnNmb3JtXCIsXG4gICAgICAgICAgICAgIGZsYWdzLFxuICAgICAgICAgICAgICBpbnB1dEZTOiBpbnB1dFBhdGggIT09IG51bGwsXG4gICAgICAgICAgICAgIGlucHV0OiBpbnB1dFBhdGggIT09IG51bGwgPyBpbnB1dFBhdGggOiBpbnB1dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNlbmRSZXF1ZXN0KHJlZnMsIHJlcXVlc3QsIChlcnJvciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoZXJyb3IpLCBudWxsKTtcbiAgICAgICAgICAgICAgbGV0IGVycm9ycyA9IHJlcGxhY2VEZXRhaWxzSW5NZXNzYWdlcyhyZXNwb25zZS5lcnJvcnMsIGRldGFpbHMpO1xuICAgICAgICAgICAgICBsZXQgd2FybmluZ3MgPSByZXBsYWNlRGV0YWlsc0luTWVzc2FnZXMocmVzcG9uc2Uud2FybmluZ3MsIGRldGFpbHMpO1xuICAgICAgICAgICAgICBsZXQgb3V0c3RhbmRpbmcgPSAxO1xuICAgICAgICAgICAgICBsZXQgbmV4dCA9ICgpID0+IC0tb3V0c3RhbmRpbmcgPT09IDAgJiYgY2FsbGJhY2sobnVsbCwge3dhcm5pbmdzLCBjb2RlOiByZXNwb25zZS5jb2RlLCBtYXA6IHJlc3BvbnNlLm1hcH0pO1xuICAgICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGZhaWx1cmVFcnJvcldpdGhMb2coXCJUcmFuc2Zvcm0gZmFpbGVkXCIsIGVycm9ycywgd2FybmluZ3MpLCBudWxsKTtcbiAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmNvZGVGUykge1xuICAgICAgICAgICAgICAgIG91dHN0YW5kaW5nKys7XG4gICAgICAgICAgICAgICAgZnMucmVhZEZpbGUocmVzcG9uc2UuY29kZSwgKGVyciwgY29udGVudHMpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlcnIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmNvZGUgPSBjb250ZW50cztcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyZXNwb25zZS5tYXBGUykge1xuICAgICAgICAgICAgICAgIG91dHN0YW5kaW5nKys7XG4gICAgICAgICAgICAgICAgZnMucmVhZEZpbGUocmVzcG9uc2UubWFwLCAoZXJyLCBjb250ZW50cykgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGVyciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UubWFwID0gY29udGVudHM7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsZXQgZmxhZ3MgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHB1c2hMb2dGbGFncyhmbGFncywgb3B0aW9ucywge30sIGlzVFRZLCBsb2dMZXZlbERlZmF1bHQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZTIpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZXh0cmFjdEVycm9yTWVzc2FnZVY4KGUsIHN0cmVhbUluLCBkZXRhaWxzLCB2b2lkIDApO1xuICAgICAgICAgICAgc2VuZFJlcXVlc3QocmVmcywge2NvbW1hbmQ6IFwiZXJyb3JcIiwgZmxhZ3MsIGVycm9yfSwgKCkgPT4ge1xuICAgICAgICAgICAgICBlcnJvci5kZXRhaWwgPSBkZXRhaWxzLmxvYWQoZXJyb3IuZGV0YWlsKTtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZmFpbHVyZUVycm9yV2l0aExvZyhcIlRyYW5zZm9ybSBmYWlsZWRcIiwgW2Vycm9yXSwgW10pLCBudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gXCJzdHJpbmdcIiAmJiBpbnB1dC5sZW5ndGggPiAxMDI0ICogMTAyNCkge1xuICAgICAgICAgIGxldCBuZXh0ID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAoKSA9PiBmcy53cml0ZUZpbGUoaW5wdXQsIG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0KG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdFN0YXNoKCkge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gIGxldCBuZXh0SUQgPSAwO1xuICByZXR1cm4ge1xuICAgIGxvYWQoaWQpIHtcbiAgICAgIHJldHVybiBtYXAuZ2V0KGlkKTtcbiAgICB9LFxuICAgIHN0b3JlKHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT09IHZvaWQgMClcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgY29uc3QgaWQgPSBuZXh0SUQrKztcbiAgICAgIG1hcC5zZXQoaWQsIHZhbHVlKTtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBleHRyYWN0Q2FsbGVyVjgoZSwgc3RyZWFtSW4sIGlkZW50KSB7XG4gIHRyeSB7XG4gICAgbGV0IGxpbmVzID0gKGUuc3RhY2sgKyBcIlwiKS5zcGxpdChcIlxcblwiKTtcbiAgICBsaW5lcy5zcGxpY2UoMSwgMSk7XG4gICAgbGV0IGxvY2F0aW9uID0gcGFyc2VTdGFja0xpbmVzVjgoc3RyZWFtSW4sIGxpbmVzLCBpZGVudCk7XG4gICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4ge3RleHQ6IGUubWVzc2FnZSwgbG9jYXRpb259O1xuICAgIH1cbiAgfSBjYXRjaCAoZTIpIHtcbiAgfVxufVxuZnVuY3Rpb24gZXh0cmFjdEVycm9yTWVzc2FnZVY4KGUsIHN0cmVhbUluLCBzdGFzaCwgbm90ZSkge1xuICBsZXQgdGV4dCA9IFwiSW50ZXJuYWwgZXJyb3JcIjtcbiAgbGV0IGxvY2F0aW9uID0gbnVsbDtcbiAgdHJ5IHtcbiAgICB0ZXh0ID0gKGUgJiYgZS5tZXNzYWdlIHx8IGUpICsgXCJcIjtcbiAgfSBjYXRjaCAoZTIpIHtcbiAgfVxuICB0cnkge1xuICAgIGxvY2F0aW9uID0gcGFyc2VTdGFja0xpbmVzVjgoc3RyZWFtSW4sIChlLnN0YWNrICsgXCJcIikuc3BsaXQoXCJcXG5cIiksIFwiXCIpO1xuICB9IGNhdGNoIChlMikge1xuICB9XG4gIHJldHVybiB7dGV4dCwgbG9jYXRpb24sIG5vdGVzOiBub3RlID8gW25vdGVdIDogW10sIGRldGFpbDogc3Rhc2ggPyBzdGFzaC5zdG9yZShlKSA6IC0xfTtcbn1cbmZ1bmN0aW9uIHBhcnNlU3RhY2tMaW5lc1Y4KHN0cmVhbUluLCBsaW5lcywgaWRlbnQpIHtcbiAgbGV0IGF0ID0gXCIgICAgYXQgXCI7XG4gIGlmIChzdHJlYW1Jbi5yZWFkRmlsZVN5bmMgJiYgIWxpbmVzWzBdLnN0YXJ0c1dpdGgoYXQpICYmIGxpbmVzWzFdLnN0YXJ0c1dpdGgoYXQpKSB7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGxpbmUgPSBsaW5lc1tpXTtcbiAgICAgIGlmICghbGluZS5zdGFydHNXaXRoKGF0KSlcbiAgICAgICAgY29udGludWU7XG4gICAgICBsaW5lID0gbGluZS5zbGljZShhdC5sZW5ndGgpO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gL14oPzpuZXcgfGFzeW5jICk/XFxTKyBcXCgoLiopXFwpJC8uZXhlYyhsaW5lKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgbGluZSA9IG1hdGNoWzFdO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoID0gL15ldmFsIGF0IFxcUysgXFwoKC4qKVxcKSg/OiwgXFxTKzpcXGQrOlxcZCspPyQvLmV4ZWMobGluZSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGxpbmUgPSBtYXRjaFsxXTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaCA9IC9eKFxcUyspOihcXGQrKTooXFxkKykkLy5leGVjKGxpbmUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBsZXQgY29udGVudHMgPSBzdHJlYW1Jbi5yZWFkRmlsZVN5bmMobWF0Y2hbMV0sIFwidXRmOFwiKTtcbiAgICAgICAgICBsZXQgbGluZVRleHQgPSBjb250ZW50cy5zcGxpdCgvXFxyXFxufFxccnxcXG58XFx1MjAyOHxcXHUyMDI5LylbK21hdGNoWzJdIC0gMV0gfHwgXCJcIjtcbiAgICAgICAgICBsZXQgY29sdW1uID0gK21hdGNoWzNdIC0gMTtcbiAgICAgICAgICBsZXQgbGVuZ3RoID0gbGluZVRleHQuc2xpY2UoY29sdW1uLCBjb2x1bW4gKyBpZGVudC5sZW5ndGgpID09PSBpZGVudCA/IGlkZW50Lmxlbmd0aCA6IDA7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGU6IG1hdGNoWzFdLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiBcImZpbGVcIixcbiAgICAgICAgICAgIGxpbmU6ICttYXRjaFsyXSxcbiAgICAgICAgICAgIGNvbHVtbjogZW5jb2RlVVRGOChsaW5lVGV4dC5zbGljZSgwLCBjb2x1bW4pKS5sZW5ndGgsXG4gICAgICAgICAgICBsZW5ndGg6IGVuY29kZVVURjgobGluZVRleHQuc2xpY2UoY29sdW1uLCBjb2x1bW4gKyBsZW5ndGgpKS5sZW5ndGgsXG4gICAgICAgICAgICBsaW5lVGV4dDogbGluZVRleHQgKyBcIlxcblwiICsgbGluZXMuc2xpY2UoMSkuam9pbihcIlxcblwiKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZmFpbHVyZUVycm9yV2l0aExvZyh0ZXh0LCBlcnJvcnMsIHdhcm5pbmdzKSB7XG4gIGxldCBsaW1pdCA9IDU7XG4gIGxldCBzdW1tYXJ5ID0gZXJyb3JzLmxlbmd0aCA8IDEgPyBcIlwiIDogYCB3aXRoICR7ZXJyb3JzLmxlbmd0aH0gZXJyb3Ike2Vycm9ycy5sZW5ndGggPCAyID8gXCJcIiA6IFwic1wifTpgICsgZXJyb3JzLnNsaWNlKDAsIGxpbWl0ICsgMSkubWFwKChlLCBpKSA9PiB7XG4gICAgaWYgKGkgPT09IGxpbWl0KVxuICAgICAgcmV0dXJuIFwiXFxuLi4uXCI7XG4gICAgaWYgKCFlLmxvY2F0aW9uKVxuICAgICAgcmV0dXJuIGBcbmVycm9yOiAke2UudGV4dH1gO1xuICAgIGxldCB7ZmlsZSwgbGluZSwgY29sdW1ufSA9IGUubG9jYXRpb247XG4gICAgcmV0dXJuIGBcbiR7ZmlsZX06JHtsaW5lfToke2NvbHVtbn06IGVycm9yOiAke2UudGV4dH1gO1xuICB9KS5qb2luKFwiXCIpO1xuICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoYCR7dGV4dH0ke3N1bW1hcnl9YCk7XG4gIGVycm9yLmVycm9ycyA9IGVycm9ycztcbiAgZXJyb3Iud2FybmluZ3MgPSB3YXJuaW5ncztcbiAgcmV0dXJuIGVycm9yO1xufVxuZnVuY3Rpb24gcmVwbGFjZURldGFpbHNJbk1lc3NhZ2VzKG1lc3NhZ2VzLCBzdGFzaCkge1xuICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICBtZXNzYWdlLmRldGFpbCA9IHN0YXNoLmxvYWQobWVzc2FnZS5kZXRhaWwpO1xuICB9XG4gIHJldHVybiBtZXNzYWdlcztcbn1cbmZ1bmN0aW9uIHNhbml0aXplTG9jYXRpb24obG9jYXRpb24sIHdoZXJlKSB7XG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuICBsZXQga2V5cyA9IHt9O1xuICBsZXQgZmlsZSA9IGdldEZsYWcobG9jYXRpb24sIGtleXMsIFwiZmlsZVwiLCBtdXN0QmVTdHJpbmcpO1xuICBsZXQgbmFtZXNwYWNlID0gZ2V0RmxhZyhsb2NhdGlvbiwga2V5cywgXCJuYW1lc3BhY2VcIiwgbXVzdEJlU3RyaW5nKTtcbiAgbGV0IGxpbmUgPSBnZXRGbGFnKGxvY2F0aW9uLCBrZXlzLCBcImxpbmVcIiwgbXVzdEJlSW50ZWdlcik7XG4gIGxldCBjb2x1bW4gPSBnZXRGbGFnKGxvY2F0aW9uLCBrZXlzLCBcImNvbHVtblwiLCBtdXN0QmVJbnRlZ2VyKTtcbiAgbGV0IGxlbmd0aCA9IGdldEZsYWcobG9jYXRpb24sIGtleXMsIFwibGVuZ3RoXCIsIG11c3RCZUludGVnZXIpO1xuICBsZXQgbGluZVRleHQgPSBnZXRGbGFnKGxvY2F0aW9uLCBrZXlzLCBcImxpbmVUZXh0XCIsIG11c3RCZVN0cmluZyk7XG4gIGNoZWNrRm9ySW52YWxpZEZsYWdzKGxvY2F0aW9uLCBrZXlzLCB3aGVyZSk7XG4gIHJldHVybiB7XG4gICAgZmlsZTogZmlsZSB8fCBcIlwiLFxuICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlIHx8IFwiXCIsXG4gICAgbGluZTogbGluZSB8fCAwLFxuICAgIGNvbHVtbjogY29sdW1uIHx8IDAsXG4gICAgbGVuZ3RoOiBsZW5ndGggfHwgMCxcbiAgICBsaW5lVGV4dDogbGluZVRleHQgfHwgXCJcIlxuICB9O1xufVxuZnVuY3Rpb24gc2FuaXRpemVNZXNzYWdlcyhtZXNzYWdlcywgcHJvcGVydHksIHN0YXNoKSB7XG4gIGxldCBtZXNzYWdlc0Nsb25lID0gW107XG4gIGxldCBpbmRleCA9IDA7XG4gIGZvciAoY29uc3QgbWVzc2FnZSBvZiBtZXNzYWdlcykge1xuICAgIGxldCBrZXlzID0ge307XG4gICAgbGV0IHRleHQgPSBnZXRGbGFnKG1lc3NhZ2UsIGtleXMsIFwidGV4dFwiLCBtdXN0QmVTdHJpbmcpO1xuICAgIGxldCBsb2NhdGlvbiA9IGdldEZsYWcobWVzc2FnZSwga2V5cywgXCJsb2NhdGlvblwiLCBtdXN0QmVPYmplY3RPck51bGwpO1xuICAgIGxldCBub3RlcyA9IGdldEZsYWcobWVzc2FnZSwga2V5cywgXCJub3Rlc1wiLCBtdXN0QmVBcnJheSk7XG4gICAgbGV0IGRldGFpbCA9IGdldEZsYWcobWVzc2FnZSwga2V5cywgXCJkZXRhaWxcIiwgY2FuQmVBbnl0aGluZyk7XG4gICAgbGV0IHdoZXJlID0gYGluIGVsZW1lbnQgJHtpbmRleH0gb2YgXCIke3Byb3BlcnR5fVwiYDtcbiAgICBjaGVja0ZvckludmFsaWRGbGFncyhtZXNzYWdlLCBrZXlzLCB3aGVyZSk7XG4gICAgbGV0IG5vdGVzQ2xvbmUgPSBbXTtcbiAgICBpZiAobm90ZXMpIHtcbiAgICAgIGZvciAoY29uc3Qgbm90ZSBvZiBub3Rlcykge1xuICAgICAgICBsZXQgbm90ZUtleXMgPSB7fTtcbiAgICAgICAgbGV0IG5vdGVUZXh0ID0gZ2V0RmxhZyhub3RlLCBub3RlS2V5cywgXCJ0ZXh0XCIsIG11c3RCZVN0cmluZyk7XG4gICAgICAgIGxldCBub3RlTG9jYXRpb24gPSBnZXRGbGFnKG5vdGUsIG5vdGVLZXlzLCBcImxvY2F0aW9uXCIsIG11c3RCZU9iamVjdE9yTnVsbCk7XG4gICAgICAgIGNoZWNrRm9ySW52YWxpZEZsYWdzKG5vdGUsIG5vdGVLZXlzLCB3aGVyZSk7XG4gICAgICAgIG5vdGVzQ2xvbmUucHVzaCh7XG4gICAgICAgICAgdGV4dDogbm90ZVRleHQgfHwgXCJcIixcbiAgICAgICAgICBsb2NhdGlvbjogc2FuaXRpemVMb2NhdGlvbihub3RlTG9jYXRpb24sIHdoZXJlKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVzc2FnZXNDbG9uZS5wdXNoKHtcbiAgICAgIHRleHQ6IHRleHQgfHwgXCJcIixcbiAgICAgIGxvY2F0aW9uOiBzYW5pdGl6ZUxvY2F0aW9uKGxvY2F0aW9uLCB3aGVyZSksXG4gICAgICBub3Rlczogbm90ZXNDbG9uZSxcbiAgICAgIGRldGFpbDogc3Rhc2guc3RvcmUoZGV0YWlsKVxuICAgIH0pO1xuICAgIGluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2VzQ2xvbmU7XG59XG5mdW5jdGlvbiBjb252ZXJ0T3V0cHV0RmlsZXMoe3BhdGgsIGNvbnRlbnRzfSkge1xuICBsZXQgdGV4dCA9IG51bGw7XG4gIHJldHVybiB7XG4gICAgcGF0aCxcbiAgICBjb250ZW50cyxcbiAgICBnZXQgdGV4dCgpIHtcbiAgICAgIGlmICh0ZXh0ID09PSBudWxsKVxuICAgICAgICB0ZXh0ID0gZGVjb2RlVVRGOChjb250ZW50cyk7XG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gIH07XG59XG5cbi8vIGxpYi9icm93c2VyLnRzXG52YXIgdmVyc2lvbiA9IFwiMC45LjBcIjtcbnZhciBidWlsZCA9IChvcHRpb25zKSA9PiBlbnN1cmVTZXJ2aWNlSXNSdW5uaW5nKCkuYnVpbGQob3B0aW9ucyk7XG52YXIgc2VydmUgPSAoKSA9PiB7XG4gIHRocm93IG5ldyBFcnJvcihgVGhlIFwic2VydmVcIiBBUEkgb25seSB3b3JrcyBpbiBub2RlYCk7XG59O1xudmFyIHRyYW5zZm9ybSA9IChpbnB1dCwgb3B0aW9ucykgPT4gZW5zdXJlU2VydmljZUlzUnVubmluZygpLnRyYW5zZm9ybShpbnB1dCwgb3B0aW9ucyk7XG52YXIgYnVpbGRTeW5jID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBcImJ1aWxkU3luY1wiIEFQSSBvbmx5IHdvcmtzIGluIG5vZGVgKTtcbn07XG52YXIgdHJhbnNmb3JtU3luYyA9ICgpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKGBUaGUgXCJ0cmFuc2Zvcm1TeW5jXCIgQVBJIG9ubHkgd29ya3MgaW4gbm9kZWApO1xufTtcbnZhciBpbml0aWFsaXplUHJvbWlzZTtcbnZhciBsb25nTGl2ZWRTZXJ2aWNlO1xudmFyIGVuc3VyZVNlcnZpY2VJc1J1bm5pbmcgPSAoKSA9PiB7XG4gIGlmIChsb25nTGl2ZWRTZXJ2aWNlKVxuICAgIHJldHVybiBsb25nTGl2ZWRTZXJ2aWNlO1xuICBpZiAoaW5pdGlhbGl6ZVByb21pc2UpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byB3YWl0IGZvciB0aGUgcHJvbWlzZSByZXR1cm5lZCBmcm9tIFwiaW5pdGlhbGl6ZVwiIHRvIGJlIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIHRoaXMnKTtcbiAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBjYWxsIFwiaW5pdGlhbGl6ZVwiIGJlZm9yZSBjYWxsaW5nIHRoaXMnKTtcbn07XG52YXIgaW5pdGlhbGl6ZSA9IChvcHRpb25zKSA9PiB7XG4gIG9wdGlvbnMgPSB2YWxpZGF0ZUluaXRpYWxpemVPcHRpb25zKG9wdGlvbnMgfHwge30pO1xuICBsZXQgd2FzbVVSTCA9IG9wdGlvbnMud2FzbVVSTDtcbiAgbGV0IHVzZVdvcmtlciA9IG9wdGlvbnMud29ya2VyICE9PSBmYWxzZTtcbiAgaWYgKCF3YXNtVVJMKVxuICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIHRoZSBcIndhc21VUkxcIiBvcHRpb24nKTtcbiAgd2FzbVVSTCArPSBcIlwiO1xuICBpZiAoaW5pdGlhbGl6ZVByb21pc2UpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgY2FsbCBcImluaXRpYWxpemVcIiBtb3JlIHRoYW4gb25jZScpO1xuICBpbml0aWFsaXplUHJvbWlzZSA9IHN0YXJ0UnVubmluZ1NlcnZpY2Uod2FzbVVSTCwgdXNlV29ya2VyKTtcbiAgaW5pdGlhbGl6ZVByb21pc2UuY2F0Y2goKCkgPT4ge1xuICAgIGluaXRpYWxpemVQcm9taXNlID0gdm9pZCAwO1xuICB9KTtcbiAgcmV0dXJuIGluaXRpYWxpemVQcm9taXNlO1xufTtcbnZhciBzdGFydFJ1bm5pbmdTZXJ2aWNlID0gKHdhc21VUkwsIHVzZVdvcmtlcikgPT4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gIGxldCByZXMgPSB5aWVsZCBmZXRjaCh3YXNtVVJMKTtcbiAgaWYgKCFyZXMub2spXG4gICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZG93bmxvYWQgJHtKU09OLnN0cmluZ2lmeSh3YXNtVVJMKX1gKTtcbiAgbGV0IHdhc20gPSB5aWVsZCByZXMuYXJyYXlCdWZmZXIoKTtcbiAgbGV0IGNvZGUgPSBge2xldCBnbG9iYWw9e307Zm9yKGxldCBvPXNlbGY7bztvPU9iamVjdC5nZXRQcm90b3R5cGVPZihvKSlmb3IobGV0IGsgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobykpaWYoIShrIGluIGdsb2JhbCkpT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbCxrLHtnZXQ6KCk9PnNlbGZba119KTsvLyBDb3B5cmlnaHQgMjAxOCBUaGUgR28gQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGEgQlNELXN0eWxlXG4vLyBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbigoKSA9PiB7XG5cdC8vIE1hcCBtdWx0aXBsZSBKYXZhU2NyaXB0IGVudmlyb25tZW50cyB0byBhIHNpbmdsZSBjb21tb24gQVBJLFxuXHQvLyBwcmVmZXJyaW5nIHdlYiBzdGFuZGFyZHMgb3ZlciBOb2RlLmpzIEFQSS5cblx0Ly9cblx0Ly8gRW52aXJvbm1lbnRzIGNvbnNpZGVyZWQ6XG5cdC8vIC0gQnJvd3NlcnNcblx0Ly8gLSBOb2RlLmpzXG5cdC8vIC0gRWxlY3Ryb25cblx0Ly8gLSBQYXJjZWxcblx0Ly8gLSBXZWJwYWNrXG5cblx0aWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHQvLyBnbG9iYWwgYWxyZWFkeSBleGlzdHNcblx0fSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0d2luZG93Lmdsb2JhbCA9IHdpbmRvdztcblx0fSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdHNlbGYuZ2xvYmFsID0gc2VsZjtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZXhwb3J0IEdvIChuZWl0aGVyIGdsb2JhbCwgd2luZG93IG5vciBzZWxmIGlzIGRlZmluZWQpXCIpO1xuXHR9XG5cblx0aWYgKCFnbG9iYWwucmVxdWlyZSAmJiB0eXBlb2YgcmVxdWlyZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdGdsb2JhbC5yZXF1aXJlID0gcmVxdWlyZTtcblx0fVxuXG5cdGlmICghZ2xvYmFsLmZzICYmIGdsb2JhbC5yZXF1aXJlKSB7XG5cdFx0Y29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5cdFx0aWYgKHR5cGVvZiBmcyA9PT0gXCJvYmplY3RcIiAmJiBmcyAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyhmcykubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHRcbiAgICBnbG9iYWwuZnMgPSBPYmplY3QuYXNzaWduKHt9LCBmcywge1xuICAgICAgLy8gSGFjayBhcm91bmQgYSBVbmljb2RlIGJ1ZyBpbiBub2RlOiBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvaXNzdWVzLzI0NTUwXG4gICAgICB3cml0ZShmZCwgYnVmLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChvZmZzZXQgPT09IDAgJiYgbGVuZ3RoID09PSBidWYubGVuZ3RoICYmIHBvc2l0aW9uID09PSBudWxsKSB7XG4gICAgICAgICAgaWYgKGZkID09PSBwcm9jZXNzLnN0ZG91dC5mZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoYnVmLCBlcnIgPT4gZXJyID8gY2FsbGJhY2soZXJyLCAwLCBudWxsKSA6IGNhbGxiYWNrKG51bGwsIGxlbmd0aCwgYnVmKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCAwLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZkID09PSBwcm9jZXNzLnN0ZGVyci5mZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUoYnVmLCBlcnIgPT4gZXJyID8gY2FsbGJhY2soZXJyLCAwLCBudWxsKSA6IGNhbGxiYWNrKG51bGwsIGxlbmd0aCwgYnVmKSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCAwLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnMud3JpdGUoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjayk7XG4gICAgICB9LFxuICAgIH0pO1xuICBcblx0XHR9XG5cdH1cblxuXHRjb25zdCBlbm9zeXMgPSAoKSA9PiB7XG5cdFx0Y29uc3QgZXJyID0gbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpO1xuXHRcdGVyci5jb2RlID0gXCJFTk9TWVNcIjtcblx0XHRyZXR1cm4gZXJyO1xuXHR9O1xuXG5cdGlmICghZ2xvYmFsLmZzKSB7XG5cdFx0bGV0IG91dHB1dEJ1ZiA9IFwiXCI7XG5cdFx0Z2xvYmFsLmZzID0ge1xuXHRcdFx0Y29uc3RhbnRzOiB7IE9fV1JPTkxZOiAtMSwgT19SRFdSOiAtMSwgT19DUkVBVDogLTEsIE9fVFJVTkM6IC0xLCBPX0FQUEVORDogLTEsIE9fRVhDTDogLTEgfSwgLy8gdW51c2VkXG5cdFx0XHR3cml0ZVN5bmMoZmQsIGJ1Zikge1xuXHRcdFx0XHRvdXRwdXRCdWYgKz0gZGVjb2Rlci5kZWNvZGUoYnVmKTtcblx0XHRcdFx0Y29uc3QgbmwgPSBvdXRwdXRCdWYubGFzdEluZGV4T2YoXCJcXFxcblwiKTtcblx0XHRcdFx0aWYgKG5sICE9IC0xKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2cob3V0cHV0QnVmLnN1YnN0cigwLCBubCkpO1xuXHRcdFx0XHRcdG91dHB1dEJ1ZiA9IG91dHB1dEJ1Zi5zdWJzdHIobmwgKyAxKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYnVmLmxlbmd0aDtcblx0XHRcdH0sXG5cdFx0XHR3cml0ZShmZCwgYnVmLCBvZmZzZXQsIGxlbmd0aCwgcG9zaXRpb24sIGNhbGxiYWNrKSB7XG5cdFx0XHRcdGlmIChvZmZzZXQgIT09IDAgfHwgbGVuZ3RoICE9PSBidWYubGVuZ3RoIHx8IHBvc2l0aW9uICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soZW5vc3lzKCkpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb25zdCBuID0gdGhpcy53cml0ZVN5bmMoZmQsIGJ1Zik7XG5cdFx0XHRcdGNhbGxiYWNrKG51bGwsIG4pO1xuXHRcdFx0fSxcblx0XHRcdGNobW9kKHBhdGgsIG1vZGUsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdGNob3duKHBhdGgsIHVpZCwgZ2lkLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRjbG9zZShmZCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0ZmNobW9kKGZkLCBtb2RlLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRmY2hvd24oZmQsIHVpZCwgZ2lkLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRmc3RhdChmZCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0ZnN5bmMoZmQsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKG51bGwpOyB9LFxuXHRcdFx0ZnRydW5jYXRlKGZkLCBsZW5ndGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdGxjaG93bihwYXRoLCB1aWQsIGdpZCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0bGluayhwYXRoLCBsaW5rLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRsc3RhdChwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRta2RpcihwYXRoLCBwZXJtLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRvcGVuKHBhdGgsIGZsYWdzLCBtb2RlLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRyZWFkKGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0cmVhZGRpcihwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRyZWFkbGluayhwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHRyZW5hbWUoZnJvbSwgdG8sIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHJtZGlyKHBhdGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHN0YXQocGF0aCwgY2FsbGJhY2spIHsgY2FsbGJhY2soZW5vc3lzKCkpOyB9LFxuXHRcdFx0c3ltbGluayhwYXRoLCBsaW5rLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHR0cnVuY2F0ZShwYXRoLCBsZW5ndGgsIGNhbGxiYWNrKSB7IGNhbGxiYWNrKGVub3N5cygpKTsgfSxcblx0XHRcdHVubGluayhwYXRoLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0XHR1dGltZXMocGF0aCwgYXRpbWUsIG10aW1lLCBjYWxsYmFjaykgeyBjYWxsYmFjayhlbm9zeXMoKSk7IH0sXG5cdFx0fTtcblx0fVxuXG5cdGlmICghZ2xvYmFsLnByb2Nlc3MpIHtcblx0XHRnbG9iYWwucHJvY2VzcyA9IHtcblx0XHRcdGdldHVpZCgpIHsgcmV0dXJuIC0xOyB9LFxuXHRcdFx0Z2V0Z2lkKCkgeyByZXR1cm4gLTE7IH0sXG5cdFx0XHRnZXRldWlkKCkgeyByZXR1cm4gLTE7IH0sXG5cdFx0XHRnZXRlZ2lkKCkgeyByZXR1cm4gLTE7IH0sXG5cdFx0XHRnZXRncm91cHMoKSB7IHRocm93IGVub3N5cygpOyB9LFxuXHRcdFx0cGlkOiAtMSxcblx0XHRcdHBwaWQ6IC0xLFxuXHRcdFx0dW1hc2soKSB7IHRocm93IGVub3N5cygpOyB9LFxuXHRcdFx0Y3dkKCkgeyB0aHJvdyBlbm9zeXMoKTsgfSxcblx0XHRcdGNoZGlyKCkgeyB0aHJvdyBlbm9zeXMoKTsgfSxcblx0XHR9XG5cdH1cblxuXHRpZiAoIWdsb2JhbC5jcnlwdG8gJiYgZ2xvYmFsLnJlcXVpcmUpIHtcblx0XHRjb25zdCBub2RlQ3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcblx0XHRnbG9iYWwuY3J5cHRvID0ge1xuXHRcdFx0Z2V0UmFuZG9tVmFsdWVzKGIpIHtcblx0XHRcdFx0bm9kZUNyeXB0by5yYW5kb21GaWxsU3luYyhiKTtcblx0XHRcdH0sXG5cdFx0fTtcblx0fVxuXHRpZiAoIWdsb2JhbC5jcnlwdG8pIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJnbG9iYWwuY3J5cHRvIGlzIG5vdCBhdmFpbGFibGUsIHBvbHlmaWxsIHJlcXVpcmVkIChnZXRSYW5kb21WYWx1ZXMgb25seSlcIik7XG5cdH1cblxuXHRpZiAoIWdsb2JhbC5wZXJmb3JtYW5jZSkge1xuXHRcdGdsb2JhbC5wZXJmb3JtYW5jZSA9IHtcblx0XHRcdG5vdygpIHtcblx0XHRcdFx0Y29uc3QgW3NlYywgbnNlY10gPSBwcm9jZXNzLmhydGltZSgpO1xuXHRcdFx0XHRyZXR1cm4gc2VjICogMTAwMCArIG5zZWMgLyAxMDAwMDAwO1xuXHRcdFx0fSxcblx0XHR9O1xuXHR9XG5cblx0aWYgKCFnbG9iYWwuVGV4dEVuY29kZXIgJiYgZ2xvYmFsLnJlcXVpcmUpIHtcblx0XHRnbG9iYWwuVGV4dEVuY29kZXIgPSByZXF1aXJlKFwidXRpbFwiKS5UZXh0RW5jb2Rlcjtcblx0fVxuXHRpZiAoIWdsb2JhbC5UZXh0RW5jb2Rlcikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImdsb2JhbC5UZXh0RW5jb2RlciBpcyBub3QgYXZhaWxhYmxlLCBwb2x5ZmlsbCByZXF1aXJlZFwiKTtcblx0fVxuXG5cdGlmICghZ2xvYmFsLlRleHREZWNvZGVyICYmIGdsb2JhbC5yZXF1aXJlKSB7XG5cdFx0Z2xvYmFsLlRleHREZWNvZGVyID0gcmVxdWlyZShcInV0aWxcIikuVGV4dERlY29kZXI7XG5cdH1cblx0aWYgKCFnbG9iYWwuVGV4dERlY29kZXIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJnbG9iYWwuVGV4dERlY29kZXIgaXMgbm90IGF2YWlsYWJsZSwgcG9seWZpbGwgcmVxdWlyZWRcIik7XG5cdH1cblxuXHQvLyBFbmQgb2YgcG9seWZpbGxzIGZvciBjb21tb24gQVBJLlxuXG5cdGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoXCJ1dGYtOFwiKTtcblx0Y29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihcInV0Zi04XCIpO1xuXG5cdGdsb2JhbC5HbyA9IGNsYXNzIHtcblx0XHRjb25zdHJ1Y3RvcigpIHtcblx0XHRcdHRoaXMuYXJndiA9IFtcImpzXCJdO1xuXHRcdFx0dGhpcy5lbnYgPSB7fTtcblx0XHRcdHRoaXMuZXhpdCA9IChjb2RlKSA9PiB7XG5cdFx0XHRcdGlmIChjb2RlICE9PSAwKSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKFwiZXhpdCBjb2RlOlwiLCBjb2RlKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHRoaXMuX2V4aXRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblx0XHRcdFx0dGhpcy5fcmVzb2x2ZUV4aXRQcm9taXNlID0gcmVzb2x2ZTtcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5fcGVuZGluZ0V2ZW50ID0gbnVsbDtcblx0XHRcdHRoaXMuX3NjaGVkdWxlZFRpbWVvdXRzID0gbmV3IE1hcCgpO1xuXHRcdFx0dGhpcy5fbmV4dENhbGxiYWNrVGltZW91dElEID0gMTtcblxuXHRcdFx0Y29uc3Qgc2V0SW50NjQgPSAoYWRkciwgdikgPT4ge1xuXHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50MzIoYWRkciArIDAsIHYsIHRydWUpO1xuXHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50MzIoYWRkciArIDQsIE1hdGguZmxvb3IodiAvIDQyOTQ5NjcyOTYpLCB0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgZ2V0SW50NjQgPSAoYWRkcikgPT4ge1xuXHRcdFx0XHRjb25zdCBsb3cgPSB0aGlzLm1lbS5nZXRVaW50MzIoYWRkciArIDAsIHRydWUpO1xuXHRcdFx0XHRjb25zdCBoaWdoID0gdGhpcy5tZW0uZ2V0SW50MzIoYWRkciArIDQsIHRydWUpO1xuXHRcdFx0XHRyZXR1cm4gbG93ICsgaGlnaCAqIDQyOTQ5NjcyOTY7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvYWRWYWx1ZSA9IChhZGRyKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGYgPSB0aGlzLm1lbS5nZXRGbG9hdDY0KGFkZHIsIHRydWUpO1xuXHRcdFx0XHRpZiAoZiA9PT0gMCkge1xuXHRcdFx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFpc05hTihmKSkge1xuXHRcdFx0XHRcdHJldHVybiBmO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgaWQgPSB0aGlzLm1lbS5nZXRVaW50MzIoYWRkciwgdHJ1ZSk7XG5cdFx0XHRcdHJldHVybiB0aGlzLl92YWx1ZXNbaWRdO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBzdG9yZVZhbHVlID0gKGFkZHIsIHYpID0+IHtcblx0XHRcdFx0Y29uc3QgbmFuSGVhZCA9IDB4N0ZGODAwMDA7XG5cblx0XHRcdFx0aWYgKHR5cGVvZiB2ID09PSBcIm51bWJlclwiICYmIHYgIT09IDApIHtcblx0XHRcdFx0XHRpZiAoaXNOYU4odikpIHtcblx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihhZGRyICsgNCwgbmFuSGVhZCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50MzIoYWRkciwgMCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMubWVtLnNldEZsb2F0NjQoYWRkciwgdiwgdHJ1ZSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHYgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHRoaXMubWVtLnNldEZsb2F0NjQoYWRkciwgMCwgdHJ1ZSk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IGlkID0gdGhpcy5faWRzLmdldCh2KTtcblx0XHRcdFx0aWYgKGlkID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRpZCA9IHRoaXMuX2lkUG9vbC5wb3AoKTtcblx0XHRcdFx0XHRpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0aWQgPSB0aGlzLl92YWx1ZXMubGVuZ3RoO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl92YWx1ZXNbaWRdID0gdjtcblx0XHRcdFx0XHR0aGlzLl9nb1JlZkNvdW50c1tpZF0gPSAwO1xuXHRcdFx0XHRcdHRoaXMuX2lkcy5zZXQodiwgaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2dvUmVmQ291bnRzW2lkXSsrO1xuXHRcdFx0XHRsZXQgdHlwZUZsYWcgPSAwO1xuXHRcdFx0XHRzd2l0Y2ggKHR5cGVvZiB2KSB7XG5cdFx0XHRcdFx0Y2FzZSBcIm9iamVjdFwiOlxuXHRcdFx0XHRcdFx0aWYgKHYgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0dHlwZUZsYWcgPSAxO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdFx0dHlwZUZsYWcgPSAyO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInN5bWJvbFwiOlxuXHRcdFx0XHRcdFx0dHlwZUZsYWcgPSAzO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcImZ1bmN0aW9uXCI6XG5cdFx0XHRcdFx0XHR0eXBlRmxhZyA9IDQ7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50MzIoYWRkciArIDQsIG5hbkhlYWQgfCB0eXBlRmxhZywgdHJ1ZSk7XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihhZGRyLCBpZCwgdHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvYWRTbGljZSA9IChhZGRyKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGFycmF5ID0gZ2V0SW50NjQoYWRkciArIDApO1xuXHRcdFx0XHRjb25zdCBsZW4gPSBnZXRJbnQ2NChhZGRyICsgOCk7XG5cdFx0XHRcdHJldHVybiBuZXcgVWludDhBcnJheSh0aGlzLl9pbnN0LmV4cG9ydHMubWVtLmJ1ZmZlciwgYXJyYXksIGxlbik7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGxvYWRTbGljZU9mVmFsdWVzID0gKGFkZHIpID0+IHtcblx0XHRcdFx0Y29uc3QgYXJyYXkgPSBnZXRJbnQ2NChhZGRyICsgMCk7XG5cdFx0XHRcdGNvbnN0IGxlbiA9IGdldEludDY0KGFkZHIgKyA4KTtcblx0XHRcdFx0Y29uc3QgYSA9IG5ldyBBcnJheShsZW4pO1xuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdFx0YVtpXSA9IGxvYWRWYWx1ZShhcnJheSArIGkgKiA4KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgbG9hZFN0cmluZyA9IChhZGRyKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHNhZGRyID0gZ2V0SW50NjQoYWRkciArIDApO1xuXHRcdFx0XHRjb25zdCBsZW4gPSBnZXRJbnQ2NChhZGRyICsgOCk7XG5cdFx0XHRcdHJldHVybiBkZWNvZGVyLmRlY29kZShuZXcgRGF0YVZpZXcodGhpcy5faW5zdC5leHBvcnRzLm1lbS5idWZmZXIsIHNhZGRyLCBsZW4pKTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdGltZU9yaWdpbiA9IERhdGUubm93KCkgLSBwZXJmb3JtYW5jZS5ub3coKTtcblx0XHRcdHRoaXMuaW1wb3J0T2JqZWN0ID0ge1xuXHRcdFx0XHRnbzoge1xuXHRcdFx0XHRcdC8vIEdvJ3MgU1AgZG9lcyBub3QgY2hhbmdlIGFzIGxvbmcgYXMgbm8gR28gY29kZSBpcyBydW5uaW5nLiBTb21lIG9wZXJhdGlvbnMgKGUuZy4gY2FsbHMsIGdldHRlcnMgYW5kIHNldHRlcnMpXG5cdFx0XHRcdFx0Ly8gbWF5IHN5bmNocm9ub3VzbHkgdHJpZ2dlciBhIEdvIGV2ZW50IGhhbmRsZXIuIFRoaXMgbWFrZXMgR28gY29kZSBnZXQgZXhlY3V0ZWQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgaW1wb3J0ZWRcblx0XHRcdFx0XHQvLyBmdW5jdGlvbi4gQSBnb3JvdXRpbmUgY2FuIHN3aXRjaCB0byBhIG5ldyBzdGFjayBpZiB0aGUgY3VycmVudCBzdGFjayBpcyB0b28gc21hbGwgKHNlZSBtb3Jlc3RhY2sgZnVuY3Rpb24pLlxuXHRcdFx0XHRcdC8vIFRoaXMgY2hhbmdlcyB0aGUgU1AsIHRodXMgd2UgaGF2ZSB0byB1cGRhdGUgdGhlIFNQIHVzZWQgYnkgdGhlIGltcG9ydGVkIGZ1bmN0aW9uLlxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB3YXNtRXhpdChjb2RlIGludDMyKVxuXHRcdFx0XHRcdFwicnVudGltZS53YXNtRXhpdFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGNvZGUgPSB0aGlzLm1lbS5nZXRJbnQzMihzcCArIDgsIHRydWUpO1xuXHRcdFx0XHRcdFx0dGhpcy5leGl0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2luc3Q7XG5cdFx0XHRcdFx0XHRkZWxldGUgdGhpcy5fdmFsdWVzO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2dvUmVmQ291bnRzO1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2lkcztcblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLl9pZFBvb2w7XG5cdFx0XHRcdFx0XHR0aGlzLmV4aXQoY29kZSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgd2FzbVdyaXRlKGZkIHVpbnRwdHIsIHAgdW5zYWZlLlBvaW50ZXIsIG4gaW50MzIpXG5cdFx0XHRcdFx0XCJydW50aW1lLndhc21Xcml0ZVwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGZkID0gZ2V0SW50NjQoc3AgKyA4KTtcblx0XHRcdFx0XHRcdGNvbnN0IHAgPSBnZXRJbnQ2NChzcCArIDE2KTtcblx0XHRcdFx0XHRcdGNvbnN0IG4gPSB0aGlzLm1lbS5nZXRJbnQzMihzcCArIDI0LCB0cnVlKTtcblx0XHRcdFx0XHRcdGZzLndyaXRlU3luYyhmZCwgbmV3IFVpbnQ4QXJyYXkodGhpcy5faW5zdC5leHBvcnRzLm1lbS5idWZmZXIsIHAsIG4pKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyByZXNldE1lbW9yeURhdGFWaWV3KClcblx0XHRcdFx0XHRcInJ1bnRpbWUucmVzZXRNZW1vcnlEYXRhVmlld1wiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHRoaXMubWVtID0gbmV3IERhdGFWaWV3KHRoaXMuX2luc3QuZXhwb3J0cy5tZW0uYnVmZmVyKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyBuYW5vdGltZTEoKSBpbnQ2NFxuXHRcdFx0XHRcdFwicnVudGltZS5uYW5vdGltZTFcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHRzZXRJbnQ2NChzcCArIDgsICh0aW1lT3JpZ2luICsgcGVyZm9ybWFuY2Uubm93KCkpICogMTAwMDAwMCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgd2FsbHRpbWUxKCkgKHNlYyBpbnQ2NCwgbnNlYyBpbnQzMilcblx0XHRcdFx0XHRcInJ1bnRpbWUud2FsbHRpbWUxXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgbXNlYyA9IChuZXcgRGF0ZSkuZ2V0VGltZSgpO1xuXHRcdFx0XHRcdFx0c2V0SW50NjQoc3AgKyA4LCBtc2VjIC8gMTAwMCk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRJbnQzMihzcCArIDE2LCAobXNlYyAlIDEwMDApICogMTAwMDAwMCwgdHJ1ZSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgc2NoZWR1bGVUaW1lb3V0RXZlbnQoZGVsYXkgaW50NjQpIGludDMyXG5cdFx0XHRcdFx0XCJydW50aW1lLnNjaGVkdWxlVGltZW91dEV2ZW50XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgaWQgPSB0aGlzLl9uZXh0Q2FsbGJhY2tUaW1lb3V0SUQ7XG5cdFx0XHRcdFx0XHR0aGlzLl9uZXh0Q2FsbGJhY2tUaW1lb3V0SUQrKztcblx0XHRcdFx0XHRcdHRoaXMuX3NjaGVkdWxlZFRpbWVvdXRzLnNldChpZCwgc2V0VGltZW91dChcblx0XHRcdFx0XHRcdFx0KCkgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3Jlc3VtZSgpO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICh0aGlzLl9zY2hlZHVsZWRUaW1lb3V0cy5oYXMoaWQpKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBmb3Igc29tZSByZWFzb24gR28gZmFpbGVkIHRvIHJlZ2lzdGVyIHRoZSB0aW1lb3V0IGV2ZW50LCBsb2cgYW5kIHRyeSBhZ2FpblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gKHRlbXBvcmFyeSB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nL2dvL2lzc3Vlcy8yODk3NSlcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybihcInNjaGVkdWxlVGltZW91dEV2ZW50OiBtaXNzZWQgdGltZW91dCBldmVudFwiKTtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3Jlc3VtZSgpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFx0Z2V0SW50NjQoc3AgKyA4KSArIDEsIC8vIHNldFRpbWVvdXQgaGFzIGJlZW4gc2VlbiB0byBmaXJlIHVwIHRvIDEgbWlsbGlzZWNvbmQgZWFybHlcblx0XHRcdFx0XHRcdCkpO1xuXHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0SW50MzIoc3AgKyAxNiwgaWQsIHRydWUpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGNsZWFyVGltZW91dEV2ZW50KGlkIGludDMyKVxuXHRcdFx0XHRcdFwicnVudGltZS5jbGVhclRpbWVvdXRFdmVudFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGlkID0gdGhpcy5tZW0uZ2V0SW50MzIoc3AgKyA4LCB0cnVlKTtcblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aGlzLl9zY2hlZHVsZWRUaW1lb3V0cy5nZXQoaWQpKTtcblx0XHRcdFx0XHRcdHRoaXMuX3NjaGVkdWxlZFRpbWVvdXRzLmRlbGV0ZShpZCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgZ2V0UmFuZG9tRGF0YShyIFtdYnl0ZSlcblx0XHRcdFx0XHRcInJ1bnRpbWUuZ2V0UmFuZG9tRGF0YVwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobG9hZFNsaWNlKHNwICsgOCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGZpbmFsaXplUmVmKHYgcmVmKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy5maW5hbGl6ZVJlZlwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGlkID0gdGhpcy5tZW0uZ2V0VWludDMyKHNwICsgOCwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR0aGlzLl9nb1JlZkNvdW50c1tpZF0tLTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9nb1JlZkNvdW50c1tpZF0gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdiA9IHRoaXMuX3ZhbHVlc1tpZF07XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3ZhbHVlc1tpZF0gPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9pZHMuZGVsZXRlKHYpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9pZFBvb2wucHVzaChpZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgc3RyaW5nVmFsKHZhbHVlIHN0cmluZykgcmVmXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnN0cmluZ1ZhbFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyAyNCwgbG9hZFN0cmluZyhzcCArIDgpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZUdldCh2IHJlZiwgcCBzdHJpbmcpIHJlZlxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUdldFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuZ2V0KGxvYWRWYWx1ZShzcCArIDgpLCBsb2FkU3RyaW5nKHNwICsgMTYpKTtcblx0XHRcdFx0XHRcdHNwID0gdGhpcy5faW5zdC5leHBvcnRzLmdldHNwKCkgPj4+IDA7IC8vIHNlZSBjb21tZW50IGFib3ZlXG5cdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgMzIsIHJlc3VsdCk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVTZXQodiByZWYsIHAgc3RyaW5nLCB4IHJlZilcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVTZXRcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHRSZWZsZWN0LnNldChsb2FkVmFsdWUoc3AgKyA4KSwgbG9hZFN0cmluZyhzcCArIDE2KSwgbG9hZFZhbHVlKHNwICsgMzIpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZURlbGV0ZSh2IHJlZiwgcCBzdHJpbmcpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlRGVsZXRlXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0UmVmbGVjdC5kZWxldGVQcm9wZXJ0eShsb2FkVmFsdWUoc3AgKyA4KSwgbG9hZFN0cmluZyhzcCArIDE2KSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVJbmRleCh2IHJlZiwgaSBpbnQpIHJlZlxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUluZGV4XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0c3RvcmVWYWx1ZShzcCArIDI0LCBSZWZsZWN0LmdldChsb2FkVmFsdWUoc3AgKyA4KSwgZ2V0SW50NjQoc3AgKyAxNikpKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gdmFsdWVTZXRJbmRleCh2IHJlZiwgaSBpbnQsIHggcmVmKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZVNldEluZGV4XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0UmVmbGVjdC5zZXQobG9hZFZhbHVlKHNwICsgOCksIGdldEludDY0KHNwICsgMTYpLCBsb2FkVmFsdWUoc3AgKyAyNCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIHZhbHVlQ2FsbCh2IHJlZiwgbSBzdHJpbmcsIGFyZ3MgW11yZWYpIChyZWYsIGJvb2wpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlQ2FsbFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHYgPSBsb2FkVmFsdWUoc3AgKyA4KTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbSA9IFJlZmxlY3QuZ2V0KHYsIGxvYWRTdHJpbmcoc3AgKyAxNikpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBhcmdzID0gbG9hZFNsaWNlT2ZWYWx1ZXMoc3AgKyAzMik7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuYXBwbHkobSwgdiwgYXJncyk7XG5cdFx0XHRcdFx0XHRcdHNwID0gdGhpcy5faW5zdC5leHBvcnRzLmdldHNwKCkgPj4+IDA7IC8vIHNlZSBjb21tZW50IGFib3ZlXG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA1NiwgcmVzdWx0KTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA2NCwgMSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0c3RvcmVWYWx1ZShzcCArIDU2LCBlcnIpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDY0LCAwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gZnVuYyB2YWx1ZUludm9rZSh2IHJlZiwgYXJncyBbXXJlZikgKHJlZiwgYm9vbClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVJbnZva2VcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCB2ID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGFyZ3MgPSBsb2FkU2xpY2VPZlZhbHVlcyhzcCArIDE2KTtcblx0XHRcdFx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gUmVmbGVjdC5hcHBseSh2LCB1bmRlZmluZWQsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRzcCA9IHRoaXMuX2luc3QuZXhwb3J0cy5nZXRzcCgpID4+PiAwOyAvLyBzZWUgY29tbWVudCBhYm92ZVxuXHRcdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgNDAsIHJlc3VsdCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQ4KHNwICsgNDgsIDEpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA0MCwgZXJyKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVOZXcodiByZWYsIGFyZ3MgW11yZWYpIChyZWYsIGJvb2wpXG5cdFx0XHRcdFx0XCJzeXNjYWxsL2pzLnZhbHVlTmV3XCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgdiA9IGxvYWRWYWx1ZShzcCArIDgpO1xuXHRcdFx0XHRcdFx0XHRjb25zdCBhcmdzID0gbG9hZFNsaWNlT2ZWYWx1ZXMoc3AgKyAxNik7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KHYsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0XHRzcCA9IHRoaXMuX2luc3QuZXhwb3J0cy5nZXRzcCgpID4+PiAwOyAvLyBzZWUgY29tbWVudCBhYm92ZVxuXHRcdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgNDAsIHJlc3VsdCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMubWVtLnNldFVpbnQ4KHNwICsgNDgsIDEpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdHN0b3JlVmFsdWUoc3AgKyA0MCwgZXJyKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVMZW5ndGgodiByZWYpIGludFxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUxlbmd0aFwiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdHNldEludDY0KHNwICsgMTYsIHBhcnNlSW50KGxvYWRWYWx1ZShzcCArIDgpLmxlbmd0aCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyB2YWx1ZVByZXBhcmVTdHJpbmcodiByZWYpIChyZWYsIGludClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVQcmVwYXJlU3RyaW5nXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyID0gZW5jb2Rlci5lbmNvZGUoU3RyaW5nKGxvYWRWYWx1ZShzcCArIDgpKSk7XG5cdFx0XHRcdFx0XHRzdG9yZVZhbHVlKHNwICsgMTYsIHN0cik7XG5cdFx0XHRcdFx0XHRzZXRJbnQ2NChzcCArIDI0LCBzdHIubGVuZ3RoKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gdmFsdWVMb2FkU3RyaW5nKHYgcmVmLCBiIFtdYnl0ZSlcblx0XHRcdFx0XHRcInN5c2NhbGwvanMudmFsdWVMb2FkU3RyaW5nXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3RyID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRsb2FkU2xpY2Uoc3AgKyAxNikuc2V0KHN0cik7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgdmFsdWVJbnN0YW5jZU9mKHYgcmVmLCB0IHJlZikgYm9vbFxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy52YWx1ZUluc3RhbmNlT2ZcIjogKHNwKSA9PiB7XG5cdFx0XHRcdFx0XHRzcCA+Pj49IDA7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDI0LCAobG9hZFZhbHVlKHNwICsgOCkgaW5zdGFuY2VvZiBsb2FkVmFsdWUoc3AgKyAxNikpID8gMSA6IDApO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyBmdW5jIGNvcHlCeXRlc1RvR28oZHN0IFtdYnl0ZSwgc3JjIHJlZikgKGludCwgYm9vbClcblx0XHRcdFx0XHRcInN5c2NhbGwvanMuY29weUJ5dGVzVG9Hb1wiOiAoc3ApID0+IHtcblx0XHRcdFx0XHRcdHNwID4+Pj0gMDtcblx0XHRcdFx0XHRcdGNvbnN0IGRzdCA9IGxvYWRTbGljZShzcCArIDgpO1xuXHRcdFx0XHRcdFx0Y29uc3Qgc3JjID0gbG9hZFZhbHVlKHNwICsgMzIpO1xuXHRcdFx0XHRcdFx0aWYgKCEoc3JjIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBzcmMgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbnN0IHRvQ29weSA9IHNyYy5zdWJhcnJheSgwLCBkc3QubGVuZ3RoKTtcblx0XHRcdFx0XHRcdGRzdC5zZXQodG9Db3B5KTtcblx0XHRcdFx0XHRcdHNldEludDY0KHNwICsgNDAsIHRvQ29weS5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0dGhpcy5tZW0uc2V0VWludDgoc3AgKyA0OCwgMSk7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIGZ1bmMgY29weUJ5dGVzVG9KUyhkc3QgcmVmLCBzcmMgW11ieXRlKSAoaW50LCBib29sKVxuXHRcdFx0XHRcdFwic3lzY2FsbC9qcy5jb3B5Qnl0ZXNUb0pTXCI6IChzcCkgPT4ge1xuXHRcdFx0XHRcdFx0c3AgPj4+PSAwO1xuXHRcdFx0XHRcdFx0Y29uc3QgZHN0ID0gbG9hZFZhbHVlKHNwICsgOCk7XG5cdFx0XHRcdFx0XHRjb25zdCBzcmMgPSBsb2FkU2xpY2Uoc3AgKyAxNik7XG5cdFx0XHRcdFx0XHRpZiAoIShkc3QgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGRzdCBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDQ4LCAwKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y29uc3QgdG9Db3B5ID0gc3JjLnN1YmFycmF5KDAsIGRzdC5sZW5ndGgpO1xuXHRcdFx0XHRcdFx0ZHN0LnNldCh0b0NvcHkpO1xuXHRcdFx0XHRcdFx0c2V0SW50NjQoc3AgKyA0MCwgdG9Db3B5Lmxlbmd0aCk7XG5cdFx0XHRcdFx0XHR0aGlzLm1lbS5zZXRVaW50OChzcCArIDQ4LCAxKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XCJkZWJ1Z1wiOiAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHZhbHVlKTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGFzeW5jIHJ1bihpbnN0YW5jZSkge1xuXHRcdFx0aWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBXZWJBc3NlbWJseS5JbnN0YW5jZSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiR28ucnVuOiBXZWJBc3NlbWJseS5JbnN0YW5jZSBleHBlY3RlZFwiKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2luc3QgPSBpbnN0YW5jZTtcblx0XHRcdHRoaXMubWVtID0gbmV3IERhdGFWaWV3KHRoaXMuX2luc3QuZXhwb3J0cy5tZW0uYnVmZmVyKTtcblx0XHRcdHRoaXMuX3ZhbHVlcyA9IFsgLy8gSlMgdmFsdWVzIHRoYXQgR28gY3VycmVudGx5IGhhcyByZWZlcmVuY2VzIHRvLCBpbmRleGVkIGJ5IHJlZmVyZW5jZSBpZFxuXHRcdFx0XHROYU4sXG5cdFx0XHRcdDAsXG5cdFx0XHRcdG51bGwsXG5cdFx0XHRcdHRydWUsXG5cdFx0XHRcdGZhbHNlLFxuXHRcdFx0XHRnbG9iYWwsXG5cdFx0XHRcdHRoaXMsXG5cdFx0XHRdO1xuXHRcdFx0dGhpcy5fZ29SZWZDb3VudHMgPSBuZXcgQXJyYXkodGhpcy5fdmFsdWVzLmxlbmd0aCkuZmlsbChJbmZpbml0eSk7IC8vIG51bWJlciBvZiByZWZlcmVuY2VzIHRoYXQgR28gaGFzIHRvIGEgSlMgdmFsdWUsIGluZGV4ZWQgYnkgcmVmZXJlbmNlIGlkXG5cdFx0XHR0aGlzLl9pZHMgPSBuZXcgTWFwKFsgLy8gbWFwcGluZyBmcm9tIEpTIHZhbHVlcyB0byByZWZlcmVuY2UgaWRzXG5cdFx0XHRcdFswLCAxXSxcblx0XHRcdFx0W251bGwsIDJdLFxuXHRcdFx0XHRbdHJ1ZSwgM10sXG5cdFx0XHRcdFtmYWxzZSwgNF0sXG5cdFx0XHRcdFtnbG9iYWwsIDVdLFxuXHRcdFx0XHRbdGhpcywgNl0sXG5cdFx0XHRdKTtcblx0XHRcdHRoaXMuX2lkUG9vbCA9IFtdOyAgIC8vIHVudXNlZCBpZHMgdGhhdCBoYXZlIGJlZW4gZ2FyYmFnZSBjb2xsZWN0ZWRcblx0XHRcdHRoaXMuZXhpdGVkID0gZmFsc2U7IC8vIHdoZXRoZXIgdGhlIEdvIHByb2dyYW0gaGFzIGV4aXRlZFxuXG5cdFx0XHQvLyBQYXNzIGNvbW1hbmQgbGluZSBhcmd1bWVudHMgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byBXZWJBc3NlbWJseSBieSB3cml0aW5nIHRoZW0gdG8gdGhlIGxpbmVhciBtZW1vcnkuXG5cdFx0XHRsZXQgb2Zmc2V0ID0gNDA5NjtcblxuXHRcdFx0Y29uc3Qgc3RyUHRyID0gKHN0cikgPT4ge1xuXHRcdFx0XHRjb25zdCBwdHIgPSBvZmZzZXQ7XG5cdFx0XHRcdGNvbnN0IGJ5dGVzID0gZW5jb2Rlci5lbmNvZGUoc3RyICsgXCJcXFxcMFwiKTtcblx0XHRcdFx0bmV3IFVpbnQ4QXJyYXkodGhpcy5tZW0uYnVmZmVyLCBvZmZzZXQsIGJ5dGVzLmxlbmd0aCkuc2V0KGJ5dGVzKTtcblx0XHRcdFx0b2Zmc2V0ICs9IGJ5dGVzLmxlbmd0aDtcblx0XHRcdFx0aWYgKG9mZnNldCAlIDggIT09IDApIHtcblx0XHRcdFx0XHRvZmZzZXQgKz0gOCAtIChvZmZzZXQgJSA4KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHRyO1xuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3QgYXJnYyA9IHRoaXMuYXJndi5sZW5ndGg7XG5cblx0XHRcdGNvbnN0IGFyZ3ZQdHJzID0gW107XG5cdFx0XHR0aGlzLmFyZ3YuZm9yRWFjaCgoYXJnKSA9PiB7XG5cdFx0XHRcdGFyZ3ZQdHJzLnB1c2goc3RyUHRyKGFyZykpO1xuXHRcdFx0fSk7XG5cdFx0XHRhcmd2UHRycy5wdXNoKDApO1xuXG5cdFx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5lbnYpLnNvcnQoKTtcblx0XHRcdGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHRcdGFyZ3ZQdHJzLnB1c2goc3RyUHRyKFxcYFxcJHtrZXl9PVxcJHt0aGlzLmVudltrZXldfVxcYCkpO1xuXHRcdFx0fSk7XG5cdFx0XHRhcmd2UHRycy5wdXNoKDApO1xuXG5cdFx0XHRjb25zdCBhcmd2ID0gb2Zmc2V0O1xuXHRcdFx0YXJndlB0cnMuZm9yRWFjaCgocHRyKSA9PiB7XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihvZmZzZXQsIHB0ciwgdHJ1ZSk7XG5cdFx0XHRcdHRoaXMubWVtLnNldFVpbnQzMihvZmZzZXQgKyA0LCAwLCB0cnVlKTtcblx0XHRcdFx0b2Zmc2V0ICs9IDg7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5faW5zdC5leHBvcnRzLnJ1bihhcmdjLCBhcmd2KTtcblx0XHRcdGlmICh0aGlzLmV4aXRlZCkge1xuXHRcdFx0XHR0aGlzLl9yZXNvbHZlRXhpdFByb21pc2UoKTtcblx0XHRcdH1cblx0XHRcdGF3YWl0IHRoaXMuX2V4aXRQcm9taXNlO1xuXHRcdH1cblxuXHRcdF9yZXN1bWUoKSB7XG5cdFx0XHRpZiAodGhpcy5leGl0ZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiR28gcHJvZ3JhbSBoYXMgYWxyZWFkeSBleGl0ZWRcIik7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9pbnN0LmV4cG9ydHMucmVzdW1lKCk7XG5cdFx0XHRpZiAodGhpcy5leGl0ZWQpIHtcblx0XHRcdFx0dGhpcy5fcmVzb2x2ZUV4aXRQcm9taXNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0X21ha2VGdW5jV3JhcHBlcihpZCkge1xuXHRcdFx0Y29uc3QgZ28gPSB0aGlzO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0Y29uc3QgZXZlbnQgPSB7IGlkOiBpZCwgdGhpczogdGhpcywgYXJnczogYXJndW1lbnRzIH07XG5cdFx0XHRcdGdvLl9wZW5kaW5nRXZlbnQgPSBldmVudDtcblx0XHRcdFx0Z28uX3Jlc3VtZSgpO1xuXHRcdFx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHRcdFx0fTtcblx0XHR9XG5cdH1cblxuXHRpZiAoXG5cdFx0dHlwZW9mIG1vZHVsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdGdsb2JhbC5yZXF1aXJlICYmXG5cdFx0Z2xvYmFsLnJlcXVpcmUubWFpbiA9PT0gbW9kdWxlICYmXG5cdFx0Z2xvYmFsLnByb2Nlc3MgJiZcblx0XHRnbG9iYWwucHJvY2Vzcy52ZXJzaW9ucyAmJlxuXHRcdCFnbG9iYWwucHJvY2Vzcy52ZXJzaW9ucy5lbGVjdHJvblxuXHQpIHtcblx0XHRpZiAocHJvY2Vzcy5hcmd2Lmxlbmd0aCA8IDMpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJ1c2FnZTogZ29fanNfd2FzbV9leGVjIFt3YXNtIGJpbmFyeV0gW2FyZ3VtZW50c11cIik7XG5cdFx0XHRwcm9jZXNzLmV4aXQoMSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZ28gPSBuZXcgR28oKTtcblx0XHRnby5hcmd2ID0gcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXHRcdGdvLmVudiA9IE9iamVjdC5hc3NpZ24oeyBUTVBESVI6IHJlcXVpcmUoXCJvc1wiKS50bXBkaXIoKSB9LCBwcm9jZXNzLmVudik7XG5cdFx0Z28uZXhpdCA9IHByb2Nlc3MuZXhpdDtcblx0XHRXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShmcy5yZWFkRmlsZVN5bmMocHJvY2Vzcy5hcmd2WzJdKSwgZ28uaW1wb3J0T2JqZWN0KS50aGVuKChyZXN1bHQpID0+IHtcblx0XHRcdHByb2Nlc3Mub24oXCJleGl0XCIsIChjb2RlKSA9PiB7IC8vIE5vZGUuanMgZXhpdHMgaWYgbm8gZXZlbnQgaGFuZGxlciBpcyBwZW5kaW5nXG5cdFx0XHRcdGlmIChjb2RlID09PSAwICYmICFnby5leGl0ZWQpIHtcblx0XHRcdFx0XHQvLyBkZWFkbG9jaywgbWFrZSBHbyBwcmludCBlcnJvciBhbmQgc3RhY2sgdHJhY2VzXG5cdFx0XHRcdFx0Z28uX3BlbmRpbmdFdmVudCA9IHsgaWQ6IDAgfTtcblx0XHRcdFx0XHRnby5fcmVzdW1lKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGdvLnJ1bihyZXN1bHQuaW5zdGFuY2UpO1xuXHRcdH0pLmNhdGNoKChlcnIpID0+IHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRcdHByb2Nlc3MuZXhpdCgxKTtcblx0XHR9KTtcblx0fVxufSkoKTtcbm9ubWVzc2FnZSA9ICh7ZGF0YTogd2FzbX0pID0+IHtcbiAgbGV0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgbGV0IGZzID0gZ2xvYmFsLmZzO1xuICBsZXQgc3RkZXJyID0gXCJcIjtcbiAgZnMud3JpdGVTeW5jID0gKGZkLCBidWZmZXIpID0+IHtcbiAgICBpZiAoZmQgPT09IDEpIHtcbiAgICAgIHBvc3RNZXNzYWdlKGJ1ZmZlcik7XG4gICAgfSBlbHNlIGlmIChmZCA9PT0gMikge1xuICAgICAgc3RkZXJyICs9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlcik7XG4gICAgICBsZXQgcGFydHMgPSBzdGRlcnIuc3BsaXQoXCJcXFxcblwiKTtcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAxKVxuICAgICAgICBjb25zb2xlLmxvZyhwYXJ0cy5zbGljZSgwLCAtMSkuam9pbihcIlxcXFxuXCIpKTtcbiAgICAgIHN0ZGVyciA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgd3JpdGVcIik7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXIubGVuZ3RoO1xuICB9O1xuICBsZXQgc3RkaW4gPSBbXTtcbiAgbGV0IHJlc3VtZVN0ZGluO1xuICBsZXQgc3RkaW5Qb3MgPSAwO1xuICBvbm1lc3NhZ2UgPSAoe2RhdGF9KSA9PiB7XG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgc3RkaW4ucHVzaChkYXRhKTtcbiAgICAgIGlmIChyZXN1bWVTdGRpbilcbiAgICAgICAgcmVzdW1lU3RkaW4oKTtcbiAgICB9XG4gIH07XG4gIGZzLnJlYWQgPSAoZmQsIGJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgsIHBvc2l0aW9uLCBjYWxsYmFjaykgPT4ge1xuICAgIGlmIChmZCAhPT0gMCB8fCBvZmZzZXQgIT09IDAgfHwgbGVuZ3RoICE9PSBidWZmZXIubGVuZ3RoIHx8IHBvc2l0aW9uICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgcmVhZFwiKTtcbiAgICB9XG4gICAgaWYgKHN0ZGluLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmVzdW1lU3RkaW4gPSAoKSA9PiBmcy5yZWFkKGZkLCBidWZmZXIsIG9mZnNldCwgbGVuZ3RoLCBwb3NpdGlvbiwgY2FsbGJhY2spO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZmlyc3QgPSBzdGRpblswXTtcbiAgICBsZXQgY291bnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsZW5ndGgsIGZpcnN0Lmxlbmd0aCAtIHN0ZGluUG9zKSk7XG4gICAgYnVmZmVyLnNldChmaXJzdC5zdWJhcnJheShzdGRpblBvcywgc3RkaW5Qb3MgKyBjb3VudCksIG9mZnNldCk7XG4gICAgc3RkaW5Qb3MgKz0gY291bnQ7XG4gICAgaWYgKHN0ZGluUG9zID09PSBmaXJzdC5sZW5ndGgpIHtcbiAgICAgIHN0ZGluLnNoaWZ0KCk7XG4gICAgICBzdGRpblBvcyA9IDA7XG4gICAgfVxuICAgIGNhbGxiYWNrKG51bGwsIGNvdW50KTtcbiAgfTtcbiAgbGV0IGdvID0gbmV3IGdsb2JhbC5HbygpO1xuICBnby5hcmd2ID0gW1wiXCIsIFxcYC0tc2VydmljZT1cXCR7XCIwLjkuMFwifVxcYF07XG4gIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKHdhc20sIGdvLmltcG9ydE9iamVjdCkudGhlbigoe2luc3RhbmNlfSkgPT4gZ28ucnVuKGluc3RhbmNlKSk7XG59O31gO1xuICBsZXQgd29ya2VyO1xuICBpZiAodXNlV29ya2VyKSB7XG4gICAgbGV0IGJsb2IgPSBuZXcgQmxvYihbY29kZV0sIHt0eXBlOiBcInRleHQvamF2YXNjcmlwdFwifSk7XG4gICAgd29ya2VyID0gbmV3IFdvcmtlcihVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZm4gPSBuZXcgRnVuY3Rpb24oXCJwb3N0TWVzc2FnZVwiLCBjb2RlICsgYHZhciBvbm1lc3NhZ2U7IHJldHVybiBtID0+IG9ubWVzc2FnZShtKWApO1xuICAgIGxldCBvbm1lc3NhZ2UgPSBmbigoZGF0YSkgPT4gd29ya2VyLm9ubWVzc2FnZSh7ZGF0YX0pKTtcbiAgICB3b3JrZXIgPSB7XG4gICAgICBvbm1lc3NhZ2U6IG51bGwsXG4gICAgICBwb3N0TWVzc2FnZTogKGRhdGEpID0+IG9ubWVzc2FnZSh7ZGF0YX0pLFxuICAgICAgdGVybWluYXRlKCkge1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgd29ya2VyLnBvc3RNZXNzYWdlKHdhc20pO1xuICB3b3JrZXIub25tZXNzYWdlID0gKHtkYXRhfSkgPT4gcmVhZEZyb21TdGRvdXQoZGF0YSk7XG4gIGxldCB7cmVhZEZyb21TdGRvdXQsIHNlcnZpY2V9ID0gY3JlYXRlQ2hhbm5lbCh7XG4gICAgd3JpdGVUb1N0ZGluKGJ5dGVzKSB7XG4gICAgICB3b3JrZXIucG9zdE1lc3NhZ2UoYnl0ZXMpO1xuICAgIH0sXG4gICAgaXNTeW5jOiBmYWxzZSxcbiAgICBpc0Jyb3dzZXI6IHRydWVcbiAgfSk7XG4gIGxvbmdMaXZlZFNlcnZpY2UgPSB7XG4gICAgYnVpbGQ6IChvcHRpb25zKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBzZXJ2aWNlLmJ1aWxkT3JTZXJ2ZShcImJ1aWxkXCIsIG51bGwsIG51bGwsIG9wdGlvbnMsIGZhbHNlLCBcIi9cIiwgKGVyciwgcmVzMikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlczIpKSksXG4gICAgdHJhbnNmb3JtOiAoaW5wdXQsIG9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiBzZXJ2aWNlLnRyYW5zZm9ybShcInRyYW5zZm9ybVwiLCBudWxsLCBpbnB1dCwgb3B0aW9ucyB8fCB7fSwgZmFsc2UsIHtcbiAgICAgICAgcmVhZEZpbGUoXywgY2FsbGJhY2spIHtcbiAgICAgICAgICBjYWxsYmFjayhuZXcgRXJyb3IoXCJJbnRlcm5hbCBlcnJvclwiKSwgbnVsbCk7XG4gICAgICAgIH0sXG4gICAgICAgIHdyaXRlRmlsZShfLCBjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9LCAoZXJyLCByZXMyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUocmVzMikpKTtcbiAgICB9XG4gIH07XG59KTtcbn0pKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIj9leHBvcnRzOih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCI/c2VsZjp0aGlzKS5lc2J1aWxkPXt9KTtcbiIsICJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcbmltcG9ydCBzdHViRmFsc2UgZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnVmZmVyO1xuIiwgImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBub2RlVXRpbDtcbiIsICJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVCdWZmZXI7XG4iLCAiLy8gTm90ZTogdGhpcyBpcyB0aGUgc2VtdmVyLm9yZyB2ZXJzaW9uIG9mIHRoZSBzcGVjIHRoYXQgaXQgaW1wbGVtZW50c1xuLy8gTm90IG5lY2Vzc2FyaWx5IHRoZSBwYWNrYWdlIHZlcnNpb24gb2YgdGhpcyBjb2RlLlxuY29uc3QgU0VNVkVSX1NQRUNfVkVSU0lPTiA9ICcyLjAuMCdcblxuY29uc3QgTUFYX0xFTkdUSCA9IDI1NlxuY29uc3QgTUFYX1NBRkVfSU5URUdFUiA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIDkwMDcxOTkyNTQ3NDA5OTFcblxuLy8gTWF4IHNhZmUgc2VnbWVudCBsZW5ndGggZm9yIGNvZXJjaW9uLlxuY29uc3QgTUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSCA9IDE2XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBTRU1WRVJfU1BFQ19WRVJTSU9OLFxuICBNQVhfTEVOR1RILFxuICBNQVhfU0FGRV9JTlRFR0VSLFxuICBNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIXG59XG4iLCAiY29uc3QgZGVidWcgPSAoXG4gIHR5cGVvZiBwcm9jZXNzID09PSAnb2JqZWN0JyAmJlxuICBwcm9jZXNzLmVudiAmJlxuICBwcm9jZXNzLmVudi5OT0RFX0RFQlVHICYmXG4gIC9cXGJzZW12ZXJcXGIvaS50ZXN0KHByb2Nlc3MuZW52Lk5PREVfREVCVUcpXG4pID8gKC4uLmFyZ3MpID0+IGNvbnNvbGUuZXJyb3IoJ1NFTVZFUicsIC4uLmFyZ3MpXG4gIDogKCkgPT4ge31cblxubW9kdWxlLmV4cG9ydHMgPSBkZWJ1Z1xuIiwgImNvbnN0IHsgTUFYX1NBRkVfQ09NUE9ORU5UX0xFTkdUSCB9ID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKVxuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuL2RlYnVnJylcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9XG5cbi8vIFRoZSBhY3R1YWwgcmVnZXhwcyBnbyBvbiBleHBvcnRzLnJlXG5jb25zdCByZSA9IGV4cG9ydHMucmUgPSBbXVxuY29uc3Qgc3JjID0gZXhwb3J0cy5zcmMgPSBbXVxuY29uc3QgdCA9IGV4cG9ydHMudCA9IHt9XG5sZXQgUiA9IDBcblxuY29uc3QgY3JlYXRlVG9rZW4gPSAobmFtZSwgdmFsdWUsIGlzR2xvYmFsKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gUisrXG4gIGRlYnVnKGluZGV4LCB2YWx1ZSlcbiAgdFtuYW1lXSA9IGluZGV4XG4gIHNyY1tpbmRleF0gPSB2YWx1ZVxuICByZVtpbmRleF0gPSBuZXcgUmVnRXhwKHZhbHVlLCBpc0dsb2JhbCA/ICdnJyA6IHVuZGVmaW5lZClcbn1cblxuLy8gVGhlIGZvbGxvd2luZyBSZWd1bGFyIEV4cHJlc3Npb25zIGNhbiBiZSB1c2VkIGZvciB0b2tlbml6aW5nLFxuLy8gdmFsaWRhdGluZywgYW5kIHBhcnNpbmcgU2VtVmVyIHZlcnNpb24gc3RyaW5ncy5cblxuLy8gIyMgTnVtZXJpYyBJZGVudGlmaWVyXG4vLyBBIHNpbmdsZSBgMGAsIG9yIGEgbm9uLXplcm8gZGlnaXQgZm9sbG93ZWQgYnkgemVybyBvciBtb3JlIGRpZ2l0cy5cblxuY3JlYXRlVG9rZW4oJ05VTUVSSUNJREVOVElGSUVSJywgJzB8WzEtOV1cXFxcZConKVxuY3JlYXRlVG9rZW4oJ05VTUVSSUNJREVOVElGSUVSTE9PU0UnLCAnWzAtOV0rJylcblxuLy8gIyMgTm9uLW51bWVyaWMgSWRlbnRpZmllclxuLy8gWmVybyBvciBtb3JlIGRpZ2l0cywgZm9sbG93ZWQgYnkgYSBsZXR0ZXIgb3IgaHlwaGVuLCBhbmQgdGhlbiB6ZXJvIG9yXG4vLyBtb3JlIGxldHRlcnMsIGRpZ2l0cywgb3IgaHlwaGVucy5cblxuY3JlYXRlVG9rZW4oJ05PTk5VTUVSSUNJREVOVElGSUVSJywgJ1xcXFxkKlthLXpBLVotXVthLXpBLVowLTktXSonKVxuXG4vLyAjIyBNYWluIFZlcnNpb25cbi8vIFRocmVlIGRvdC1zZXBhcmF0ZWQgbnVtZXJpYyBpZGVudGlmaWVycy5cblxuY3JlYXRlVG9rZW4oJ01BSU5WRVJTSU9OJywgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSXX0pXFxcXC5gICtcbiAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgIGAoJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUl19KWApXG5cbmNyZWF0ZVRva2VuKCdNQUlOVkVSU0lPTkxPT1NFJywgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdfSlcXFxcLmAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCgke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSTE9PU0VdfSlgKVxuXG4vLyAjIyBQcmUtcmVsZWFzZSBWZXJzaW9uIElkZW50aWZpZXJcbi8vIEEgbnVtZXJpYyBpZGVudGlmaWVyLCBvciBhIG5vbi1udW1lcmljIGlkZW50aWZpZXIuXG5cbmNyZWF0ZVRva2VuKCdQUkVSRUxFQVNFSURFTlRJRklFUicsIGAoPzoke3NyY1t0Lk5VTUVSSUNJREVOVElGSUVSXVxufXwke3NyY1t0Lk5PTk5VTUVSSUNJREVOVElGSUVSXX0pYClcblxuY3JlYXRlVG9rZW4oJ1BSRVJFTEVBU0VJREVOVElGSUVSTE9PU0UnLCBgKD86JHtzcmNbdC5OVU1FUklDSURFTlRJRklFUkxPT1NFXVxufXwke3NyY1t0Lk5PTk5VTUVSSUNJREVOVElGSUVSXX0pYClcblxuLy8gIyMgUHJlLXJlbGVhc2UgVmVyc2lvblxuLy8gSHlwaGVuLCBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZSBkb3Qtc2VwYXJhdGVkIHByZS1yZWxlYXNlIHZlcnNpb25cbi8vIGlkZW50aWZpZXJzLlxuXG5jcmVhdGVUb2tlbignUFJFUkVMRUFTRScsIGAoPzotKCR7c3JjW3QuUFJFUkVMRUFTRUlERU5USUZJRVJdXG59KD86XFxcXC4ke3NyY1t0LlBSRVJFTEVBU0VJREVOVElGSUVSXX0pKikpYClcblxuY3JlYXRlVG9rZW4oJ1BSRVJFTEVBU0VMT09TRScsIGAoPzotPygke3NyY1t0LlBSRVJFTEVBU0VJREVOVElGSUVSTE9PU0VdXG59KD86XFxcXC4ke3NyY1t0LlBSRVJFTEVBU0VJREVOVElGSUVSTE9PU0VdfSkqKSlgKVxuXG4vLyAjIyBCdWlsZCBNZXRhZGF0YSBJZGVudGlmaWVyXG4vLyBBbnkgY29tYmluYXRpb24gb2YgZGlnaXRzLCBsZXR0ZXJzLCBvciBoeXBoZW5zLlxuXG5jcmVhdGVUb2tlbignQlVJTERJREVOVElGSUVSJywgJ1swLTlBLVphLXotXSsnKVxuXG4vLyAjIyBCdWlsZCBNZXRhZGF0YVxuLy8gUGx1cyBzaWduLCBmb2xsb3dlZCBieSBvbmUgb3IgbW9yZSBwZXJpb2Qtc2VwYXJhdGVkIGJ1aWxkIG1ldGFkYXRhXG4vLyBpZGVudGlmaWVycy5cblxuY3JlYXRlVG9rZW4oJ0JVSUxEJywgYCg/OlxcXFwrKCR7c3JjW3QuQlVJTERJREVOVElGSUVSXVxufSg/OlxcXFwuJHtzcmNbdC5CVUlMRElERU5USUZJRVJdfSkqKSlgKVxuXG4vLyAjIyBGdWxsIFZlcnNpb24gU3RyaW5nXG4vLyBBIG1haW4gdmVyc2lvbiwgZm9sbG93ZWQgb3B0aW9uYWxseSBieSBhIHByZS1yZWxlYXNlIHZlcnNpb24gYW5kXG4vLyBidWlsZCBtZXRhZGF0YS5cblxuLy8gTm90ZSB0aGF0IHRoZSBvbmx5IG1ham9yLCBtaW5vciwgcGF0Y2gsIGFuZCBwcmUtcmVsZWFzZSBzZWN0aW9ucyBvZlxuLy8gdGhlIHZlcnNpb24gc3RyaW5nIGFyZSBjYXB0dXJpbmcgZ3JvdXBzLiAgVGhlIGJ1aWxkIG1ldGFkYXRhIGlzIG5vdCBhXG4vLyBjYXB0dXJpbmcgZ3JvdXAsIGJlY2F1c2UgaXQgc2hvdWxkIG5vdCBldmVyIGJlIHVzZWQgaW4gdmVyc2lvblxuLy8gY29tcGFyaXNvbi5cblxuY3JlYXRlVG9rZW4oJ0ZVTExQTEFJTicsIGB2PyR7c3JjW3QuTUFJTlZFUlNJT05dXG59JHtzcmNbdC5QUkVSRUxFQVNFXX0/JHtcbiAgc3JjW3QuQlVJTERdfT9gKVxuXG5jcmVhdGVUb2tlbignRlVMTCcsIGBeJHtzcmNbdC5GVUxMUExBSU5dfSRgKVxuXG4vLyBsaWtlIGZ1bGwsIGJ1dCBhbGxvd3MgdjEuMi4zIGFuZCA9MS4yLjMsIHdoaWNoIHBlb3BsZSBkbyBzb21ldGltZXMuXG4vLyBhbHNvLCAxLjAuMGFscGhhMSAocHJlcmVsZWFzZSB3aXRob3V0IHRoZSBoeXBoZW4pIHdoaWNoIGlzIHByZXR0eVxuLy8gY29tbW9uIGluIHRoZSBucG0gcmVnaXN0cnkuXG5jcmVhdGVUb2tlbignTE9PU0VQTEFJTicsIGBbdj1cXFxcc10qJHtzcmNbdC5NQUlOVkVSU0lPTkxPT1NFXVxufSR7c3JjW3QuUFJFUkVMRUFTRUxPT1NFXX0/JHtcbiAgc3JjW3QuQlVJTERdfT9gKVxuXG5jcmVhdGVUb2tlbignTE9PU0UnLCBgXiR7c3JjW3QuTE9PU0VQTEFJTl19JGApXG5cbmNyZWF0ZVRva2VuKCdHVExUJywgJygoPzo8fD4pPz0/KScpXG5cbi8vIFNvbWV0aGluZyBsaWtlIFwiMi4qXCIgb3IgXCIxLjIueFwiLlxuLy8gTm90ZSB0aGF0IFwieC54XCIgaXMgYSB2YWxpZCB4UmFuZ2UgaWRlbnRpZmVyLCBtZWFuaW5nIFwiYW55IHZlcnNpb25cIlxuLy8gT25seSB0aGUgZmlyc3QgaXRlbSBpcyBzdHJpY3RseSByZXF1aXJlZC5cbmNyZWF0ZVRva2VuKCdYUkFOR0VJREVOVElGSUVSTE9PU0UnLCBgJHtzcmNbdC5OVU1FUklDSURFTlRJRklFUkxPT1NFXX18eHxYfFxcXFwqYClcbmNyZWF0ZVRva2VuKCdYUkFOR0VJREVOVElGSUVSJywgYCR7c3JjW3QuTlVNRVJJQ0lERU5USUZJRVJdfXx4fFh8XFxcXCpgKVxuXG5jcmVhdGVUb2tlbignWFJBTkdFUExBSU4nLCBgW3Y9XFxcXHNdKigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJdfSlgICtcbiAgICAgICAgICAgICAgICAgICBgKD86XFxcXC4oJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSXX0pYCArXG4gICAgICAgICAgICAgICAgICAgYCg/OlxcXFwuKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUl19KWAgK1xuICAgICAgICAgICAgICAgICAgIGAoPzoke3NyY1t0LlBSRVJFTEVBU0VdfSk/JHtcbiAgICAgICAgICAgICAgICAgICAgIHNyY1t0LkJVSUxEXX0/YCArXG4gICAgICAgICAgICAgICAgICAgYCk/KT9gKVxuXG5jcmVhdGVUb2tlbignWFJBTkdFUExBSU5MT09TRScsIGBbdj1cXFxcc10qKCR7c3JjW3QuWFJBTkdFSURFTlRJRklFUkxPT1NFXX0pYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKD86XFxcXC4oJHtzcmNbdC5YUkFOR0VJREVOVElGSUVSTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGAoPzpcXFxcLigke3NyY1t0LlhSQU5HRUlERU5USUZJRVJMT09TRV19KWAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCg/OiR7c3JjW3QuUFJFUkVMRUFTRUxPT1NFXX0pPyR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1t0LkJVSUxEXX0/YCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgKT8pP2ApXG5cbmNyZWF0ZVRva2VuKCdYUkFOR0UnLCBgXiR7c3JjW3QuR1RMVF19XFxcXHMqJHtzcmNbdC5YUkFOR0VQTEFJTl19JGApXG5jcmVhdGVUb2tlbignWFJBTkdFTE9PU0UnLCBgXiR7c3JjW3QuR1RMVF19XFxcXHMqJHtzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXX0kYClcblxuLy8gQ29lcmNpb24uXG4vLyBFeHRyYWN0IGFueXRoaW5nIHRoYXQgY291bGQgY29uY2VpdmFibHkgYmUgYSBwYXJ0IG9mIGEgdmFsaWQgc2VtdmVyXG5jcmVhdGVUb2tlbignQ09FUkNFJywgYCR7JyhefFteXFxcXGRdKScgK1xuICAgICAgICAgICAgICAnKFxcXFxkezEsJ30ke01BWF9TQUZFX0NPTVBPTkVOVF9MRU5HVEh9fSlgICtcbiAgICAgICAgICAgICAgYCg/OlxcXFwuKFxcXFxkezEsJHtNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIfX0pKT9gICtcbiAgICAgICAgICAgICAgYCg/OlxcXFwuKFxcXFxkezEsJHtNQVhfU0FGRV9DT01QT05FTlRfTEVOR1RIfX0pKT9gICtcbiAgICAgICAgICAgICAgYCg/OiR8W15cXFxcZF0pYClcbmNyZWF0ZVRva2VuKCdDT0VSQ0VSVEwnLCBzcmNbdC5DT0VSQ0VdLCB0cnVlKVxuXG4vLyBUaWxkZSByYW5nZXMuXG4vLyBNZWFuaW5nIGlzIFwicmVhc29uYWJseSBhdCBvciBncmVhdGVyIHRoYW5cIlxuY3JlYXRlVG9rZW4oJ0xPTkVUSUxERScsICcoPzp+Pj8pJylcblxuY3JlYXRlVG9rZW4oJ1RJTERFVFJJTScsIGAoXFxcXHMqKSR7c3JjW3QuTE9ORVRJTERFXX1cXFxccytgLCB0cnVlKVxuZXhwb3J0cy50aWxkZVRyaW1SZXBsYWNlID0gJyQxfidcblxuY3JlYXRlVG9rZW4oJ1RJTERFJywgYF4ke3NyY1t0LkxPTkVUSUxERV19JHtzcmNbdC5YUkFOR0VQTEFJTl19JGApXG5jcmVhdGVUb2tlbignVElMREVMT09TRScsIGBeJHtzcmNbdC5MT05FVElMREVdfSR7c3JjW3QuWFJBTkdFUExBSU5MT09TRV19JGApXG5cbi8vIENhcmV0IHJhbmdlcy5cbi8vIE1lYW5pbmcgaXMgXCJhdCBsZWFzdCBhbmQgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aFwiXG5jcmVhdGVUb2tlbignTE9ORUNBUkVUJywgJyg/OlxcXFxeKScpXG5cbmNyZWF0ZVRva2VuKCdDQVJFVFRSSU0nLCBgKFxcXFxzKikke3NyY1t0LkxPTkVDQVJFVF19XFxcXHMrYCwgdHJ1ZSlcbmV4cG9ydHMuY2FyZXRUcmltUmVwbGFjZSA9ICckMV4nXG5cbmNyZWF0ZVRva2VuKCdDQVJFVCcsIGBeJHtzcmNbdC5MT05FQ0FSRVRdfSR7c3JjW3QuWFJBTkdFUExBSU5dfSRgKVxuY3JlYXRlVG9rZW4oJ0NBUkVUTE9PU0UnLCBgXiR7c3JjW3QuTE9ORUNBUkVUXX0ke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSRgKVxuXG4vLyBBIHNpbXBsZSBndC9sdC9lcSB0aGluZywgb3IganVzdCBcIlwiIHRvIGluZGljYXRlIFwiYW55IHZlcnNpb25cIlxuY3JlYXRlVG9rZW4oJ0NPTVBBUkFUT1JMT09TRScsIGBeJHtzcmNbdC5HVExUXX1cXFxccyooJHtzcmNbdC5MT09TRVBMQUlOXX0pJHxeJGApXG5jcmVhdGVUb2tlbignQ09NUEFSQVRPUicsIGBeJHtzcmNbdC5HVExUXX1cXFxccyooJHtzcmNbdC5GVUxMUExBSU5dfSkkfF4kYClcblxuLy8gQW4gZXhwcmVzc2lvbiB0byBzdHJpcCBhbnkgd2hpdGVzcGFjZSBiZXR3ZWVuIHRoZSBndGx0IGFuZCB0aGUgdGhpbmdcbi8vIGl0IG1vZGlmaWVzLCBzbyB0aGF0IGA+IDEuMi4zYCA9PT4gYD4xLjIuM2BcbmNyZWF0ZVRva2VuKCdDT01QQVJBVE9SVFJJTScsIGAoXFxcXHMqKSR7c3JjW3QuR1RMVF1cbn1cXFxccyooJHtzcmNbdC5MT09TRVBMQUlOXX18JHtzcmNbdC5YUkFOR0VQTEFJTl19KWAsIHRydWUpXG5leHBvcnRzLmNvbXBhcmF0b3JUcmltUmVwbGFjZSA9ICckMSQyJDMnXG5cbi8vIFNvbWV0aGluZyBsaWtlIGAxLjIuMyAtIDEuMi40YFxuLy8gTm90ZSB0aGF0IHRoZXNlIGFsbCB1c2UgdGhlIGxvb3NlIGZvcm0sIGJlY2F1c2UgdGhleSdsbCBiZVxuLy8gY2hlY2tlZCBhZ2FpbnN0IGVpdGhlciB0aGUgc3RyaWN0IG9yIGxvb3NlIGNvbXBhcmF0b3IgZm9ybVxuLy8gbGF0ZXIuXG5jcmVhdGVUb2tlbignSFlQSEVOUkFOR0UnLCBgXlxcXFxzKigke3NyY1t0LlhSQU5HRVBMQUlOXX0pYCArXG4gICAgICAgICAgICAgICAgICAgYFxcXFxzKy1cXFxccytgICtcbiAgICAgICAgICAgICAgICAgICBgKCR7c3JjW3QuWFJBTkdFUExBSU5dfSlgICtcbiAgICAgICAgICAgICAgICAgICBgXFxcXHMqJGApXG5cbmNyZWF0ZVRva2VuKCdIWVBIRU5SQU5HRUxPT1NFJywgYF5cXFxccyooJHtzcmNbdC5YUkFOR0VQTEFJTkxPT1NFXX0pYCArXG4gICAgICAgICAgICAgICAgICAgICAgICBgXFxcXHMrLVxcXFxzK2AgK1xuICAgICAgICAgICAgICAgICAgICAgICAgYCgke3NyY1t0LlhSQU5HRVBMQUlOTE9PU0VdfSlgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcXFxccyokYClcblxuLy8gU3RhciByYW5nZXMgYmFzaWNhbGx5IGp1c3QgYWxsb3cgYW55dGhpbmcgYXQgYWxsLlxuY3JlYXRlVG9rZW4oJ1NUQVInLCAnKDx8Pik/PT9cXFxccypcXFxcKicpXG4vLyA+PTAuMC4wIGlzIGxpa2UgYSBzdGFyXG5jcmVhdGVUb2tlbignR1RFMCcsICdeXFxcXHMqPj1cXFxccyowXFwuMFxcLjBcXFxccyokJylcbmNyZWF0ZVRva2VuKCdHVEUwUFJFJywgJ15cXFxccyo+PVxcXFxzKjBcXC4wXFwuMC0wXFxcXHMqJCcpXG4iLCAiLy8gcGFyc2Ugb3V0IGp1c3QgdGhlIG9wdGlvbnMgd2UgY2FyZSBhYm91dCBzbyB3ZSBhbHdheXMgZ2V0IGEgY29uc2lzdGVudFxuLy8gb2JqIHdpdGgga2V5cyBpbiBhIGNvbnNpc3RlbnQgb3JkZXIuXG5jb25zdCBvcHRzID0gWydpbmNsdWRlUHJlcmVsZWFzZScsICdsb29zZScsICdydGwnXVxuY29uc3QgcGFyc2VPcHRpb25zID0gb3B0aW9ucyA9PlxuICAhb3B0aW9ucyA/IHt9XG4gIDogdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnID8geyBsb29zZTogdHJ1ZSB9XG4gIDogb3B0cy5maWx0ZXIoayA9PiBvcHRpb25zW2tdKS5yZWR1Y2UoKG9wdGlvbnMsIGspID0+IHtcbiAgICBvcHRpb25zW2tdID0gdHJ1ZVxuICAgIHJldHVybiBvcHRpb25zXG4gIH0sIHt9KVxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZU9wdGlvbnNcbiIsICJjb25zdCBudW1lcmljID0gL15bMC05XSskL1xuY29uc3QgY29tcGFyZUlkZW50aWZpZXJzID0gKGEsIGIpID0+IHtcbiAgY29uc3QgYW51bSA9IG51bWVyaWMudGVzdChhKVxuICBjb25zdCBibnVtID0gbnVtZXJpYy50ZXN0KGIpXG5cbiAgaWYgKGFudW0gJiYgYm51bSkge1xuICAgIGEgPSArYVxuICAgIGIgPSArYlxuICB9XG5cbiAgcmV0dXJuIGEgPT09IGIgPyAwXG4gICAgOiAoYW51bSAmJiAhYm51bSkgPyAtMVxuICAgIDogKGJudW0gJiYgIWFudW0pID8gMVxuICAgIDogYSA8IGIgPyAtMVxuICAgIDogMVxufVxuXG5jb25zdCByY29tcGFyZUlkZW50aWZpZXJzID0gKGEsIGIpID0+IGNvbXBhcmVJZGVudGlmaWVycyhiLCBhKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY29tcGFyZUlkZW50aWZpZXJzLFxuICByY29tcGFyZUlkZW50aWZpZXJzXG59XG4iLCAiY29uc3QgZGVidWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9kZWJ1ZycpXG5jb25zdCB7IE1BWF9MRU5HVEgsIE1BWF9TQUZFX0lOVEVHRVIgfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2NvbnN0YW50cycpXG5jb25zdCB7IHJlLCB0IH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9yZScpXG5cbmNvbnN0IHBhcnNlT3B0aW9ucyA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3BhcnNlLW9wdGlvbnMnKVxuY29uc3QgeyBjb21wYXJlSWRlbnRpZmllcnMgfSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL2lkZW50aWZpZXJzJylcbmNsYXNzIFNlbVZlciB7XG4gIGNvbnN0cnVjdG9yICh2ZXJzaW9uLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKVxuXG4gICAgaWYgKHZlcnNpb24gaW5zdGFuY2VvZiBTZW1WZXIpIHtcbiAgICAgIGlmICh2ZXJzaW9uLmxvb3NlID09PSAhIW9wdGlvbnMubG9vc2UgJiZcbiAgICAgICAgICB2ZXJzaW9uLmluY2x1ZGVQcmVyZWxlYXNlID09PSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UpIHtcbiAgICAgICAgcmV0dXJuIHZlcnNpb25cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlcnNpb24gPSB2ZXJzaW9uLnZlcnNpb25cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2ZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBWZXJzaW9uOiAke3ZlcnNpb259YClcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbi5sZW5ndGggPiBNQVhfTEVOR1RIKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgdmVyc2lvbiBpcyBsb25nZXIgdGhhbiAke01BWF9MRU5HVEh9IGNoYXJhY3RlcnNgXG4gICAgICApXG4gICAgfVxuXG4gICAgZGVidWcoJ1NlbVZlcicsIHZlcnNpb24sIG9wdGlvbnMpXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9uc1xuICAgIHRoaXMubG9vc2UgPSAhIW9wdGlvbnMubG9vc2VcbiAgICAvLyB0aGlzIGlzbid0IGFjdHVhbGx5IHJlbGV2YW50IGZvciB2ZXJzaW9ucywgYnV0IGtlZXAgaXQgc28gdGhhdCB3ZVxuICAgIC8vIGRvbid0IHJ1biBpbnRvIHRyb3VibGUgcGFzc2luZyB0aGlzLm9wdGlvbnMgYXJvdW5kLlxuICAgIHRoaXMuaW5jbHVkZVByZXJlbGVhc2UgPSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2VcblxuICAgIGNvbnN0IG0gPSB2ZXJzaW9uLnRyaW0oKS5tYXRjaChvcHRpb25zLmxvb3NlID8gcmVbdC5MT09TRV0gOiByZVt0LkZVTExdKVxuXG4gICAgaWYgKCFtKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIFZlcnNpb246ICR7dmVyc2lvbn1gKVxuICAgIH1cblxuICAgIHRoaXMucmF3ID0gdmVyc2lvblxuXG4gICAgLy8gdGhlc2UgYXJlIGFjdHVhbGx5IG51bWJlcnNcbiAgICB0aGlzLm1ham9yID0gK21bMV1cbiAgICB0aGlzLm1pbm9yID0gK21bMl1cbiAgICB0aGlzLnBhdGNoID0gK21bM11cblxuICAgIGlmICh0aGlzLm1ham9yID4gTUFYX1NBRkVfSU5URUdFUiB8fCB0aGlzLm1ham9yIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBtYWpvciB2ZXJzaW9uJylcbiAgICB9XG5cbiAgICBpZiAodGhpcy5taW5vciA+IE1BWF9TQUZFX0lOVEVHRVIgfHwgdGhpcy5taW5vciA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbWlub3IgdmVyc2lvbicpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGF0Y2ggPiBNQVhfU0FGRV9JTlRFR0VSIHx8IHRoaXMucGF0Y2ggPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHBhdGNoIHZlcnNpb24nKVxuICAgIH1cblxuICAgIC8vIG51bWJlcmlmeSBhbnkgcHJlcmVsZWFzZSBudW1lcmljIGlkc1xuICAgIGlmICghbVs0XSkge1xuICAgICAgdGhpcy5wcmVyZWxlYXNlID0gW11cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wcmVyZWxlYXNlID0gbVs0XS5zcGxpdCgnLicpLm1hcCgoaWQpID0+IHtcbiAgICAgICAgaWYgKC9eWzAtOV0rJC8udGVzdChpZCkpIHtcbiAgICAgICAgICBjb25zdCBudW0gPSAraWRcbiAgICAgICAgICBpZiAobnVtID49IDAgJiYgbnVtIDwgTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICAgICAgcmV0dXJuIG51bVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWRcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5idWlsZCA9IG1bNV0gPyBtWzVdLnNwbGl0KCcuJykgOiBbXVxuICAgIHRoaXMuZm9ybWF0KClcbiAgfVxuXG4gIGZvcm1hdCAoKSB7XG4gICAgdGhpcy52ZXJzaW9uID0gYCR7dGhpcy5tYWpvcn0uJHt0aGlzLm1pbm9yfS4ke3RoaXMucGF0Y2h9YFxuICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoKSB7XG4gICAgICB0aGlzLnZlcnNpb24gKz0gYC0ke3RoaXMucHJlcmVsZWFzZS5qb2luKCcuJyl9YFxuICAgIH1cbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uXG4gIH1cblxuICB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVyc2lvblxuICB9XG5cbiAgY29tcGFyZSAob3RoZXIpIHtcbiAgICBkZWJ1ZygnU2VtVmVyLmNvbXBhcmUnLCB0aGlzLnZlcnNpb24sIHRoaXMub3B0aW9ucywgb3RoZXIpXG4gICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBTZW1WZXIpKSB7XG4gICAgICBpZiAodHlwZW9mIG90aGVyID09PSAnc3RyaW5nJyAmJiBvdGhlciA9PT0gdGhpcy52ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgICBvdGhlciA9IG5ldyBTZW1WZXIob3RoZXIsIHRoaXMub3B0aW9ucylcbiAgICB9XG5cbiAgICBpZiAob3RoZXIudmVyc2lvbiA9PT0gdGhpcy52ZXJzaW9uKSB7XG4gICAgICByZXR1cm4gMFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmNvbXBhcmVNYWluKG90aGVyKSB8fCB0aGlzLmNvbXBhcmVQcmUob3RoZXIpXG4gIH1cblxuICBjb21wYXJlTWFpbiAob3RoZXIpIHtcbiAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5tYWpvciwgb3RoZXIubWFqb3IpIHx8XG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5taW5vciwgb3RoZXIubWlub3IpIHx8XG4gICAgICBjb21wYXJlSWRlbnRpZmllcnModGhpcy5wYXRjaCwgb3RoZXIucGF0Y2gpXG4gICAgKVxuICB9XG5cbiAgY29tcGFyZVByZSAob3RoZXIpIHtcbiAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFNlbVZlcikpIHtcbiAgICAgIG90aGVyID0gbmV3IFNlbVZlcihvdGhlciwgdGhpcy5vcHRpb25zKVxuICAgIH1cblxuICAgIC8vIE5PVCBoYXZpbmcgYSBwcmVyZWxlYXNlIGlzID4gaGF2aW5nIG9uZVxuICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoICYmICFvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfSBlbHNlIGlmICghdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCAmJiBvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9IGVsc2UgaWYgKCF0aGlzLnByZXJlbGVhc2UubGVuZ3RoICYmICFvdGhlci5wcmVyZWxlYXNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIDBcbiAgICB9XG5cbiAgICBsZXQgaSA9IDBcbiAgICBkbyB7XG4gICAgICBjb25zdCBhID0gdGhpcy5wcmVyZWxlYXNlW2ldXG4gICAgICBjb25zdCBiID0gb3RoZXIucHJlcmVsZWFzZVtpXVxuICAgICAgZGVidWcoJ3ByZXJlbGVhc2UgY29tcGFyZScsIGksIGEsIGIpXG4gICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfSBlbHNlIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfSBlbHNlIGlmIChhID09PSBiKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyZUlkZW50aWZpZXJzKGEsIGIpXG4gICAgICB9XG4gICAgfSB3aGlsZSAoKytpKVxuICB9XG5cbiAgY29tcGFyZUJ1aWxkIChvdGhlcikge1xuICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgU2VtVmVyKSkge1xuICAgICAgb3RoZXIgPSBuZXcgU2VtVmVyKG90aGVyLCB0aGlzLm9wdGlvbnMpXG4gICAgfVxuXG4gICAgbGV0IGkgPSAwXG4gICAgZG8ge1xuICAgICAgY29uc3QgYSA9IHRoaXMuYnVpbGRbaV1cbiAgICAgIGNvbnN0IGIgPSBvdGhlci5idWlsZFtpXVxuICAgICAgZGVidWcoJ3ByZXJlbGVhc2UgY29tcGFyZScsIGksIGEsIGIpXG4gICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfSBlbHNlIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfSBlbHNlIGlmIChhID09PSBiKSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY29tcGFyZUlkZW50aWZpZXJzKGEsIGIpXG4gICAgICB9XG4gICAgfSB3aGlsZSAoKytpKVxuICB9XG5cbiAgLy8gcHJlbWlub3Igd2lsbCBidW1wIHRoZSB2ZXJzaW9uIHVwIHRvIHRoZSBuZXh0IG1pbm9yIHJlbGVhc2UsIGFuZCBpbW1lZGlhdGVseVxuICAvLyBkb3duIHRvIHByZS1yZWxlYXNlLiBwcmVtYWpvciBhbmQgcHJlcGF0Y2ggd29yayB0aGUgc2FtZSB3YXkuXG4gIGluYyAocmVsZWFzZSwgaWRlbnRpZmllcikge1xuICAgIHN3aXRjaCAocmVsZWFzZSkge1xuICAgICAgY2FzZSAncHJlbWFqb3InOlxuICAgICAgICB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID0gMFxuICAgICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgICB0aGlzLm1pbm9yID0gMFxuICAgICAgICB0aGlzLm1ham9yKytcbiAgICAgICAgdGhpcy5pbmMoJ3ByZScsIGlkZW50aWZpZXIpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdwcmVtaW5vcic6XG4gICAgICAgIHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPSAwXG4gICAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICAgIHRoaXMubWlub3IrK1xuICAgICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3ByZXBhdGNoJzpcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbHJlYWR5IGEgcHJlcmVsZWFzZSwgaXQgd2lsbCBidW1wIHRvIHRoZSBuZXh0IHZlcnNpb25cbiAgICAgICAgLy8gZHJvcCBhbnkgcHJlcmVsZWFzZXMgdGhhdCBtaWdodCBhbHJlYWR5IGV4aXN0LCBzaW5jZSB0aGV5IGFyZSBub3RcbiAgICAgICAgLy8gcmVsZXZhbnQgYXQgdGhpcyBwb2ludC5cbiAgICAgICAgdGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9IDBcbiAgICAgICAgdGhpcy5pbmMoJ3BhdGNoJywgaWRlbnRpZmllcilcbiAgICAgICAgdGhpcy5pbmMoJ3ByZScsIGlkZW50aWZpZXIpXG4gICAgICAgIGJyZWFrXG4gICAgICAvLyBJZiB0aGUgaW5wdXQgaXMgYSBub24tcHJlcmVsZWFzZSB2ZXJzaW9uLCB0aGlzIGFjdHMgdGhlIHNhbWUgYXNcbiAgICAgIC8vIHByZXBhdGNoLlxuICAgICAgY2FzZSAncHJlcmVsZWFzZSc6XG4gICAgICAgIGlmICh0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5pbmMoJ3BhdGNoJywgaWRlbnRpZmllcilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluYygncHJlJywgaWRlbnRpZmllcilcbiAgICAgICAgYnJlYWtcblxuICAgICAgY2FzZSAnbWFqb3InOlxuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgcHJlLW1ham9yIHZlcnNpb24sIGJ1bXAgdXAgdG8gdGhlIHNhbWUgbWFqb3IgdmVyc2lvbi5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGluY3JlbWVudCBtYWpvci5cbiAgICAgICAgLy8gMS4wLjAtNSBidW1wcyB0byAxLjAuMFxuICAgICAgICAvLyAxLjEuMCBidW1wcyB0byAyLjAuMFxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy5taW5vciAhPT0gMCB8fFxuICAgICAgICAgIHRoaXMucGF0Y2ggIT09IDAgfHxcbiAgICAgICAgICB0aGlzLnByZXJlbGVhc2UubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMubWFqb3IrK1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWlub3IgPSAwXG4gICAgICAgIHRoaXMucGF0Y2ggPSAwXG4gICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtdXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdtaW5vcic6XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYSBwcmUtbWlub3IgdmVyc2lvbiwgYnVtcCB1cCB0byB0aGUgc2FtZSBtaW5vciB2ZXJzaW9uLlxuICAgICAgICAvLyBPdGhlcndpc2UgaW5jcmVtZW50IG1pbm9yLlxuICAgICAgICAvLyAxLjIuMC01IGJ1bXBzIHRvIDEuMi4wXG4gICAgICAgIC8vIDEuMi4xIGJ1bXBzIHRvIDEuMy4wXG4gICAgICAgIGlmICh0aGlzLnBhdGNoICE9PSAwIHx8IHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLm1pbm9yKytcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhdGNoID0gMFxuICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbXVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncGF0Y2gnOlxuICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCBhIHByZS1yZWxlYXNlIHZlcnNpb24sIGl0IHdpbGwgaW5jcmVtZW50IHRoZSBwYXRjaC5cbiAgICAgICAgLy8gSWYgaXQgaXMgYSBwcmUtcmVsZWFzZSBpdCB3aWxsIGJ1bXAgdXAgdG8gdGhlIHNhbWUgcGF0Y2ggdmVyc2lvbi5cbiAgICAgICAgLy8gMS4yLjAtNSBwYXRjaGVzIHRvIDEuMi4wXG4gICAgICAgIC8vIDEuMi4wIHBhdGNoZXMgdG8gMS4yLjFcbiAgICAgICAgaWYgKHRoaXMucHJlcmVsZWFzZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLnBhdGNoKytcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbXVxuICAgICAgICBicmVha1xuICAgICAgLy8gVGhpcyBwcm9iYWJseSBzaG91bGRuJ3QgYmUgdXNlZCBwdWJsaWNseS5cbiAgICAgIC8vIDEuMC4wICdwcmUnIHdvdWxkIGJlY29tZSAxLjAuMC0wIHdoaWNoIGlzIHRoZSB3cm9uZyBkaXJlY3Rpb24uXG4gICAgICBjYXNlICdwcmUnOlxuICAgICAgICBpZiAodGhpcy5wcmVyZWxlYXNlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFswXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBpID0gdGhpcy5wcmVyZWxlYXNlLmxlbmd0aFxuICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnByZXJlbGVhc2VbaV0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZVtpXSsrXG4gICAgICAgICAgICAgIGkgPSAtMlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIGRpZG4ndCBpbmNyZW1lbnQgYW55dGhpbmdcbiAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZS5wdXNoKDApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgICAgLy8gMS4yLjAtYmV0YS4xIGJ1bXBzIHRvIDEuMi4wLWJldGEuMixcbiAgICAgICAgICAvLyAxLjIuMC1iZXRhLmZvb2JseiBvciAxLjIuMC1iZXRhIGJ1bXBzIHRvIDEuMi4wLWJldGEuMFxuICAgICAgICAgIGlmICh0aGlzLnByZXJlbGVhc2VbMF0gPT09IGlkZW50aWZpZXIpIHtcbiAgICAgICAgICAgIGlmIChpc05hTih0aGlzLnByZXJlbGVhc2VbMV0pKSB7XG4gICAgICAgICAgICAgIHRoaXMucHJlcmVsZWFzZSA9IFtpZGVudGlmaWVyLCAwXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByZXJlbGVhc2UgPSBbaWRlbnRpZmllciwgMF1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGluY3JlbWVudCBhcmd1bWVudDogJHtyZWxlYXNlfWApXG4gICAgfVxuICAgIHRoaXMuZm9ybWF0KClcbiAgICB0aGlzLnJhdyA9IHRoaXMudmVyc2lvblxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZW1WZXJcbiIsICJjb25zdCB7TUFYX0xFTkdUSH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9jb25zdGFudHMnKVxuY29uc3QgeyByZSwgdCB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcmUnKVxuY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuXG5jb25zdCBwYXJzZU9wdGlvbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9wYXJzZS1vcHRpb25zJylcbmNvbnN0IHBhcnNlID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgb3B0aW9ucyA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKVxuXG4gIGlmICh2ZXJzaW9uIGluc3RhbmNlb2YgU2VtVmVyKSB7XG4gICAgcmV0dXJuIHZlcnNpb25cbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgaWYgKHZlcnNpb24ubGVuZ3RoID4gTUFYX0xFTkdUSCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICBjb25zdCByID0gb3B0aW9ucy5sb29zZSA/IHJlW3QuTE9PU0VdIDogcmVbdC5GVUxMXVxuICBpZiAoIXIudGVzdCh2ZXJzaW9uKSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlXG4iLCAiY29uc3QgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJylcbmNvbnN0IHZhbGlkID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgdiA9IHBhcnNlKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJldHVybiB2ID8gdi52ZXJzaW9uIDogbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSB2YWxpZFxuIiwgImNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCBjbGVhbiA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHMgPSBwYXJzZSh2ZXJzaW9uLnRyaW0oKS5yZXBsYWNlKC9eWz12XSsvLCAnJyksIG9wdGlvbnMpXG4gIHJldHVybiBzID8gcy52ZXJzaW9uIDogbnVsbFxufVxubW9kdWxlLmV4cG9ydHMgPSBjbGVhblxuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcblxuY29uc3QgaW5jID0gKHZlcnNpb24sIHJlbGVhc2UsIG9wdGlvbnMsIGlkZW50aWZpZXIpID0+IHtcbiAgaWYgKHR5cGVvZiAob3B0aW9ucykgPT09ICdzdHJpbmcnKSB7XG4gICAgaWRlbnRpZmllciA9IG9wdGlvbnNcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkXG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpLmluYyhyZWxlYXNlLCBpZGVudGlmaWVyKS52ZXJzaW9uXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBpbmNcbiIsICJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBjb21wYXJlID0gKGEsIGIsIGxvb3NlKSA9PlxuICBuZXcgU2VtVmVyKGEsIGxvb3NlKS5jb21wYXJlKG5ldyBTZW1WZXIoYiwgbG9vc2UpKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVcbiIsICJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGVxID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA9PT0gMFxubW9kdWxlLmV4cG9ydHMgPSBlcVxuIiwgImNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpXG5jb25zdCBlcSA9IHJlcXVpcmUoJy4vZXEnKVxuXG5jb25zdCBkaWZmID0gKHZlcnNpb24xLCB2ZXJzaW9uMikgPT4ge1xuICBpZiAoZXEodmVyc2lvbjEsIHZlcnNpb24yKSkge1xuICAgIHJldHVybiBudWxsXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdjEgPSBwYXJzZSh2ZXJzaW9uMSlcbiAgICBjb25zdCB2MiA9IHBhcnNlKHZlcnNpb24yKVxuICAgIGNvbnN0IGhhc1ByZSA9IHYxLnByZXJlbGVhc2UubGVuZ3RoIHx8IHYyLnByZXJlbGVhc2UubGVuZ3RoXG4gICAgY29uc3QgcHJlZml4ID0gaGFzUHJlID8gJ3ByZScgOiAnJ1xuICAgIGNvbnN0IGRlZmF1bHRSZXN1bHQgPSBoYXNQcmUgPyAncHJlcmVsZWFzZScgOiAnJ1xuICAgIGZvciAoY29uc3Qga2V5IGluIHYxKSB7XG4gICAgICBpZiAoa2V5ID09PSAnbWFqb3InIHx8IGtleSA9PT0gJ21pbm9yJyB8fCBrZXkgPT09ICdwYXRjaCcpIHtcbiAgICAgICAgaWYgKHYxW2tleV0gIT09IHYyW2tleV0pIHtcbiAgICAgICAgICByZXR1cm4gcHJlZml4ICsga2V5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRSZXN1bHQgLy8gbWF5IGJlIHVuZGVmaW5lZFxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRpZmZcbiIsICJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBtYWpvciA9IChhLCBsb29zZSkgPT4gbmV3IFNlbVZlcihhLCBsb29zZSkubWFqb3Jcbm1vZHVsZS5leHBvcnRzID0gbWFqb3JcbiIsICJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBtaW5vciA9IChhLCBsb29zZSkgPT4gbmV3IFNlbVZlcihhLCBsb29zZSkubWlub3Jcbm1vZHVsZS5leHBvcnRzID0gbWlub3JcbiIsICJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBwYXRjaCA9IChhLCBsb29zZSkgPT4gbmV3IFNlbVZlcihhLCBsb29zZSkucGF0Y2hcbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hcbiIsICJjb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3QgcHJlcmVsZWFzZSA9ICh2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHBhcnNlKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJldHVybiAocGFyc2VkICYmIHBhcnNlZC5wcmVyZWxlYXNlLmxlbmd0aCkgPyBwYXJzZWQucHJlcmVsZWFzZSA6IG51bGxcbn1cbm1vZHVsZS5leHBvcnRzID0gcHJlcmVsZWFzZVxuIiwgImNvbnN0IGNvbXBhcmUgPSByZXF1aXJlKCcuL2NvbXBhcmUnKVxuY29uc3QgcmNvbXBhcmUgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYiwgYSwgbG9vc2UpXG5tb2R1bGUuZXhwb3J0cyA9IHJjb21wYXJlXG4iLCAiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBjb21wYXJlTG9vc2UgPSAoYSwgYikgPT4gY29tcGFyZShhLCBiLCB0cnVlKVxubW9kdWxlLmV4cG9ydHMgPSBjb21wYXJlTG9vc2VcbiIsICJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBjb21wYXJlQnVpbGQgPSAoYSwgYiwgbG9vc2UpID0+IHtcbiAgY29uc3QgdmVyc2lvbkEgPSBuZXcgU2VtVmVyKGEsIGxvb3NlKVxuICBjb25zdCB2ZXJzaW9uQiA9IG5ldyBTZW1WZXIoYiwgbG9vc2UpXG4gIHJldHVybiB2ZXJzaW9uQS5jb21wYXJlKHZlcnNpb25CKSB8fCB2ZXJzaW9uQS5jb21wYXJlQnVpbGQodmVyc2lvbkIpXG59XG5tb2R1bGUuZXhwb3J0cyA9IGNvbXBhcmVCdWlsZFxuIiwgImNvbnN0IGNvbXBhcmVCdWlsZCA9IHJlcXVpcmUoJy4vY29tcGFyZS1idWlsZCcpXG5jb25zdCBzb3J0ID0gKGxpc3QsIGxvb3NlKSA9PiBsaXN0LnNvcnQoKGEsIGIpID0+IGNvbXBhcmVCdWlsZChhLCBiLCBsb29zZSkpXG5tb2R1bGUuZXhwb3J0cyA9IHNvcnRcbiIsICJjb25zdCBjb21wYXJlQnVpbGQgPSByZXF1aXJlKCcuL2NvbXBhcmUtYnVpbGQnKVxuY29uc3QgcnNvcnQgPSAobGlzdCwgbG9vc2UpID0+IGxpc3Quc29ydCgoYSwgYikgPT4gY29tcGFyZUJ1aWxkKGIsIGEsIGxvb3NlKSlcbm1vZHVsZS5leHBvcnRzID0gcnNvcnRcbiIsICJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGd0ID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA+IDBcbm1vZHVsZS5leHBvcnRzID0gZ3RcbiIsICJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IGx0ID0gKGEsIGIsIGxvb3NlKSA9PiBjb21wYXJlKGEsIGIsIGxvb3NlKSA8IDBcbm1vZHVsZS5leHBvcnRzID0gbHRcbiIsICJjb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi9jb21wYXJlJylcbmNvbnN0IG5lcSA9IChhLCBiLCBsb29zZSkgPT4gY29tcGFyZShhLCBiLCBsb29zZSkgIT09IDBcbm1vZHVsZS5leHBvcnRzID0gbmVxXG4iLCAiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBndGUgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpID49IDBcbm1vZHVsZS5leHBvcnRzID0gZ3RlXG4iLCAiY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4vY29tcGFyZScpXG5jb25zdCBsdGUgPSAoYSwgYiwgbG9vc2UpID0+IGNvbXBhcmUoYSwgYiwgbG9vc2UpIDw9IDBcbm1vZHVsZS5leHBvcnRzID0gbHRlXG4iLCAiY29uc3QgZXEgPSByZXF1aXJlKCcuL2VxJylcbmNvbnN0IG5lcSA9IHJlcXVpcmUoJy4vbmVxJylcbmNvbnN0IGd0ID0gcmVxdWlyZSgnLi9ndCcpXG5jb25zdCBndGUgPSByZXF1aXJlKCcuL2d0ZScpXG5jb25zdCBsdCA9IHJlcXVpcmUoJy4vbHQnKVxuY29uc3QgbHRlID0gcmVxdWlyZSgnLi9sdGUnKVxuXG5jb25zdCBjbXAgPSAoYSwgb3AsIGIsIGxvb3NlKSA9PiB7XG4gIHN3aXRjaCAob3ApIHtcbiAgICBjYXNlICc9PT0nOlxuICAgICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JylcbiAgICAgICAgYSA9IGEudmVyc2lvblxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnb2JqZWN0JylcbiAgICAgICAgYiA9IGIudmVyc2lvblxuICAgICAgcmV0dXJuIGEgPT09IGJcblxuICAgIGNhc2UgJyE9PSc6XG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnKVxuICAgICAgICBhID0gYS52ZXJzaW9uXG4gICAgICBpZiAodHlwZW9mIGIgPT09ICdvYmplY3QnKVxuICAgICAgICBiID0gYi52ZXJzaW9uXG4gICAgICByZXR1cm4gYSAhPT0gYlxuXG4gICAgY2FzZSAnJzpcbiAgICBjYXNlICc9JzpcbiAgICBjYXNlICc9PSc6XG4gICAgICByZXR1cm4gZXEoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICchPSc6XG4gICAgICByZXR1cm4gbmVxKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPic6XG4gICAgICByZXR1cm4gZ3QoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc+PSc6XG4gICAgICByZXR1cm4gZ3RlKGEsIGIsIGxvb3NlKVxuXG4gICAgY2FzZSAnPCc6XG4gICAgICByZXR1cm4gbHQoYSwgYiwgbG9vc2UpXG5cbiAgICBjYXNlICc8PSc6XG4gICAgICByZXR1cm4gbHRlKGEsIGIsIGxvb3NlKVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgb3BlcmF0b3I6ICR7b3B9YClcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBjbXBcbiIsICJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKVxuY29uc3Qge3JlLCB0fSA9IHJlcXVpcmUoJy4uL2ludGVybmFsL3JlJylcblxuY29uc3QgY29lcmNlID0gKHZlcnNpb24sIG9wdGlvbnMpID0+IHtcbiAgaWYgKHZlcnNpb24gaW5zdGFuY2VvZiBTZW1WZXIpIHtcbiAgICByZXR1cm4gdmVyc2lvblxuICB9XG5cbiAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnbnVtYmVyJykge1xuICAgIHZlcnNpb24gPSBTdHJpbmcodmVyc2lvbilcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBsZXQgbWF0Y2ggPSBudWxsXG4gIGlmICghb3B0aW9ucy5ydGwpIHtcbiAgICBtYXRjaCA9IHZlcnNpb24ubWF0Y2gocmVbdC5DT0VSQ0VdKVxuICB9IGVsc2Uge1xuICAgIC8vIEZpbmQgdGhlIHJpZ2h0LW1vc3QgY29lcmNpYmxlIHN0cmluZyB0aGF0IGRvZXMgbm90IHNoYXJlXG4gICAgLy8gYSB0ZXJtaW51cyB3aXRoIGEgbW9yZSBsZWZ0LXdhcmQgY29lcmNpYmxlIHN0cmluZy5cbiAgICAvLyBFZywgJzEuMi4zLjQnIHdhbnRzIHRvIGNvZXJjZSAnMi4zLjQnLCBub3QgJzMuNCcgb3IgJzQnXG4gICAgLy9cbiAgICAvLyBXYWxrIHRocm91Z2ggdGhlIHN0cmluZyBjaGVja2luZyB3aXRoIGEgL2cgcmVnZXhwXG4gICAgLy8gTWFudWFsbHkgc2V0IHRoZSBpbmRleCBzbyBhcyB0byBwaWNrIHVwIG92ZXJsYXBwaW5nIG1hdGNoZXMuXG4gICAgLy8gU3RvcCB3aGVuIHdlIGdldCBhIG1hdGNoIHRoYXQgZW5kcyBhdCB0aGUgc3RyaW5nIGVuZCwgc2luY2Ugbm9cbiAgICAvLyBjb2VyY2libGUgc3RyaW5nIGNhbiBiZSBtb3JlIHJpZ2h0LXdhcmQgd2l0aG91dCB0aGUgc2FtZSB0ZXJtaW51cy5cbiAgICBsZXQgbmV4dFxuICAgIHdoaWxlICgobmV4dCA9IHJlW3QuQ09FUkNFUlRMXS5leGVjKHZlcnNpb24pKSAmJlxuICAgICAgICAoIW1hdGNoIHx8IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoICE9PSB2ZXJzaW9uLmxlbmd0aClcbiAgICApIHtcbiAgICAgIGlmICghbWF0Y2ggfHxcbiAgICAgICAgICAgIG5leHQuaW5kZXggKyBuZXh0WzBdLmxlbmd0aCAhPT0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpIHtcbiAgICAgICAgbWF0Y2ggPSBuZXh0XG4gICAgICB9XG4gICAgICByZVt0LkNPRVJDRVJUTF0ubGFzdEluZGV4ID0gbmV4dC5pbmRleCArIG5leHRbMV0ubGVuZ3RoICsgbmV4dFsyXS5sZW5ndGhcbiAgICB9XG4gICAgLy8gbGVhdmUgaXQgaW4gYSBjbGVhbiBzdGF0ZVxuICAgIHJlW3QuQ09FUkNFUlRMXS5sYXN0SW5kZXggPSAtMVxuICB9XG5cbiAgaWYgKG1hdGNoID09PSBudWxsKVxuICAgIHJldHVybiBudWxsXG5cbiAgcmV0dXJuIHBhcnNlKGAke21hdGNoWzJdfS4ke21hdGNoWzNdIHx8ICcwJ30uJHttYXRjaFs0XSB8fCAnMCd9YCwgb3B0aW9ucylcbn1cbm1vZHVsZS5leHBvcnRzID0gY29lcmNlXG4iLCAiJ3VzZSBzdHJpY3QnXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChZYWxsaXN0KSB7XG4gIFlhbGxpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiogKCkge1xuICAgIGZvciAobGV0IHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyOyB3YWxrZXIgPSB3YWxrZXIubmV4dCkge1xuICAgICAgeWllbGQgd2Fsa2VyLnZhbHVlXG4gICAgfVxuICB9XG59XG4iLCAiJ3VzZSBzdHJpY3QnXG5tb2R1bGUuZXhwb3J0cyA9IFlhbGxpc3RcblxuWWFsbGlzdC5Ob2RlID0gTm9kZVxuWWFsbGlzdC5jcmVhdGUgPSBZYWxsaXN0XG5cbmZ1bmN0aW9uIFlhbGxpc3QgKGxpc3QpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGlmICghKHNlbGYgaW5zdGFuY2VvZiBZYWxsaXN0KSkge1xuICAgIHNlbGYgPSBuZXcgWWFsbGlzdCgpXG4gIH1cblxuICBzZWxmLnRhaWwgPSBudWxsXG4gIHNlbGYuaGVhZCA9IG51bGxcbiAgc2VsZi5sZW5ndGggPSAwXG5cbiAgaWYgKGxpc3QgJiYgdHlwZW9mIGxpc3QuZm9yRWFjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgc2VsZi5wdXNoKGl0ZW0pXG4gICAgfSlcbiAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgc2VsZi5wdXNoKGFyZ3VtZW50c1tpXSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VsZlxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5yZW1vdmVOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgaWYgKG5vZGUubGlzdCAhPT0gdGhpcykge1xuICAgIHRocm93IG5ldyBFcnJvcigncmVtb3Zpbmcgbm9kZSB3aGljaCBkb2VzIG5vdCBiZWxvbmcgdG8gdGhpcyBsaXN0JylcbiAgfVxuXG4gIHZhciBuZXh0ID0gbm9kZS5uZXh0XG4gIHZhciBwcmV2ID0gbm9kZS5wcmV2XG5cbiAgaWYgKG5leHQpIHtcbiAgICBuZXh0LnByZXYgPSBwcmV2XG4gIH1cblxuICBpZiAocHJldikge1xuICAgIHByZXYubmV4dCA9IG5leHRcbiAgfVxuXG4gIGlmIChub2RlID09PSB0aGlzLmhlYWQpIHtcbiAgICB0aGlzLmhlYWQgPSBuZXh0XG4gIH1cbiAgaWYgKG5vZGUgPT09IHRoaXMudGFpbCkge1xuICAgIHRoaXMudGFpbCA9IHByZXZcbiAgfVxuXG4gIG5vZGUubGlzdC5sZW5ndGgtLVxuICBub2RlLm5leHQgPSBudWxsXG4gIG5vZGUucHJldiA9IG51bGxcbiAgbm9kZS5saXN0ID0gbnVsbFxuXG4gIHJldHVybiBuZXh0XG59XG5cbllhbGxpc3QucHJvdG90eXBlLnVuc2hpZnROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IHRoaXMuaGVhZCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKG5vZGUubGlzdCkge1xuICAgIG5vZGUubGlzdC5yZW1vdmVOb2RlKG5vZGUpXG4gIH1cblxuICB2YXIgaGVhZCA9IHRoaXMuaGVhZFxuICBub2RlLmxpc3QgPSB0aGlzXG4gIG5vZGUubmV4dCA9IGhlYWRcbiAgaWYgKGhlYWQpIHtcbiAgICBoZWFkLnByZXYgPSBub2RlXG4gIH1cblxuICB0aGlzLmhlYWQgPSBub2RlXG4gIGlmICghdGhpcy50YWlsKSB7XG4gICAgdGhpcy50YWlsID0gbm9kZVxuICB9XG4gIHRoaXMubGVuZ3RoKytcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucHVzaE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICBpZiAobm9kZSA9PT0gdGhpcy50YWlsKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAobm9kZS5saXN0KSB7XG4gICAgbm9kZS5saXN0LnJlbW92ZU5vZGUobm9kZSlcbiAgfVxuXG4gIHZhciB0YWlsID0gdGhpcy50YWlsXG4gIG5vZGUubGlzdCA9IHRoaXNcbiAgbm9kZS5wcmV2ID0gdGFpbFxuICBpZiAodGFpbCkge1xuICAgIHRhaWwubmV4dCA9IG5vZGVcbiAgfVxuXG4gIHRoaXMudGFpbCA9IG5vZGVcbiAgaWYgKCF0aGlzLmhlYWQpIHtcbiAgICB0aGlzLmhlYWQgPSBub2RlXG4gIH1cbiAgdGhpcy5sZW5ndGgrK1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBwdXNoKHRoaXMsIGFyZ3VtZW50c1tpXSlcbiAgfVxuICByZXR1cm4gdGhpcy5sZW5ndGhcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUudW5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdW5zaGlmdCh0aGlzLCBhcmd1bWVudHNbaV0pXG4gIH1cbiAgcmV0dXJuIHRoaXMubGVuZ3RoXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKCF0aGlzLnRhaWwpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICB2YXIgcmVzID0gdGhpcy50YWlsLnZhbHVlXG4gIHRoaXMudGFpbCA9IHRoaXMudGFpbC5wcmV2XG4gIGlmICh0aGlzLnRhaWwpIHtcbiAgICB0aGlzLnRhaWwubmV4dCA9IG51bGxcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhlYWQgPSBudWxsXG4gIH1cbiAgdGhpcy5sZW5ndGgtLVxuICByZXR1cm4gcmVzXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMuaGVhZCkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIHZhciByZXMgPSB0aGlzLmhlYWQudmFsdWVcbiAgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHRcbiAgaWYgKHRoaXMuaGVhZCkge1xuICAgIHRoaXMuaGVhZC5wcmV2ID0gbnVsbFxuICB9IGVsc2Uge1xuICAgIHRoaXMudGFpbCA9IG51bGxcbiAgfVxuICB0aGlzLmxlbmd0aC0tXG4gIHJldHVybiByZXNcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChmbiwgdGhpc3ApIHtcbiAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gIGZvciAodmFyIHdhbGtlciA9IHRoaXMuaGVhZCwgaSA9IDA7IHdhbGtlciAhPT0gbnVsbDsgaSsrKSB7XG4gICAgZm4uY2FsbCh0aGlzcCwgd2Fsa2VyLnZhbHVlLCBpLCB0aGlzKVxuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuZm9yRWFjaFJldmVyc2UgPSBmdW5jdGlvbiAoZm4sIHRoaXNwKSB7XG4gIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICBmb3IgKHZhciB3YWxrZXIgPSB0aGlzLnRhaWwsIGkgPSB0aGlzLmxlbmd0aCAtIDE7IHdhbGtlciAhPT0gbnVsbDsgaS0tKSB7XG4gICAgZm4uY2FsbCh0aGlzcCwgd2Fsa2VyLnZhbHVlLCBpLCB0aGlzKVxuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cbn1cblxuWWFsbGlzdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG4pIHtcbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPCBuOyBpKyspIHtcbiAgICAvLyBhYm9ydCBvdXQgb2YgdGhlIGxpc3QgZWFybHkgaWYgd2UgaGl0IGEgY3ljbGVcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG4gIGlmIChpID09PSBuICYmIHdhbGtlciAhPT0gbnVsbCkge1xuICAgIHJldHVybiB3YWxrZXIudmFsdWVcbiAgfVxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5nZXRSZXZlcnNlID0gZnVuY3Rpb24gKG4pIHtcbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMudGFpbDsgd2Fsa2VyICE9PSBudWxsICYmIGkgPCBuOyBpKyspIHtcbiAgICAvLyBhYm9ydCBvdXQgb2YgdGhlIGxpc3QgZWFybHkgaWYgd2UgaGl0IGEgY3ljbGVcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG4gIGlmIChpID09PSBuICYmIHdhbGtlciAhPT0gbnVsbCkge1xuICAgIHJldHVybiB3YWxrZXIudmFsdWVcbiAgfVxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoZm4sIHRoaXNwKSB7XG4gIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICB2YXIgcmVzID0gbmV3IFlhbGxpc3QoKVxuICBmb3IgKHZhciB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICByZXMucHVzaChmbi5jYWxsKHRoaXNwLCB3YWxrZXIudmFsdWUsIHRoaXMpKVxuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5tYXBSZXZlcnNlID0gZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICB0aGlzcCA9IHRoaXNwIHx8IHRoaXNcbiAgdmFyIHJlcyA9IG5ldyBZYWxsaXN0KClcbiAgZm9yICh2YXIgd2Fsa2VyID0gdGhpcy50YWlsOyB3YWxrZXIgIT09IG51bGw7KSB7XG4gICAgcmVzLnB1c2goZm4uY2FsbCh0aGlzcCwgd2Fsa2VyLnZhbHVlLCB0aGlzKSlcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG4gIHJldHVybiByZXNcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucmVkdWNlID0gZnVuY3Rpb24gKGZuLCBpbml0aWFsKSB7XG4gIHZhciBhY2NcbiAgdmFyIHdhbGtlciA9IHRoaXMuaGVhZFxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICBhY2MgPSBpbml0aWFsXG4gIH0gZWxzZSBpZiAodGhpcy5oZWFkKSB7XG4gICAgd2Fsa2VyID0gdGhpcy5oZWFkLm5leHRcbiAgICBhY2MgPSB0aGlzLmhlYWQudmFsdWVcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgbGlzdCB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IHdhbGtlciAhPT0gbnVsbDsgaSsrKSB7XG4gICAgYWNjID0gZm4oYWNjLCB3YWxrZXIudmFsdWUsIGkpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLm5leHRcbiAgfVxuXG4gIHJldHVybiBhY2Ncbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucmVkdWNlUmV2ZXJzZSA9IGZ1bmN0aW9uIChmbiwgaW5pdGlhbCkge1xuICB2YXIgYWNjXG4gIHZhciB3YWxrZXIgPSB0aGlzLnRhaWxcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgYWNjID0gaW5pdGlhbFxuICB9IGVsc2UgaWYgKHRoaXMudGFpbCkge1xuICAgIHdhbGtlciA9IHRoaXMudGFpbC5wcmV2XG4gICAgYWNjID0gdGhpcy50YWlsLnZhbHVlXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGxpc3Qgd2l0aCBubyBpbml0aWFsIHZhbHVlJylcbiAgfVxuXG4gIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IHdhbGtlciAhPT0gbnVsbDsgaS0tKSB7XG4gICAgYWNjID0gZm4oYWNjLCB3YWxrZXIudmFsdWUsIGkpXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuXG4gIHJldHVybiBhY2Ncbn1cblxuWWFsbGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyciA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDAsIHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyICE9PSBudWxsOyBpKyspIHtcbiAgICBhcnJbaV0gPSB3YWxrZXIudmFsdWVcbiAgICB3YWxrZXIgPSB3YWxrZXIubmV4dFxuICB9XG4gIHJldHVybiBhcnJcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUudG9BcnJheVJldmVyc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnIgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLnRhaWw7IHdhbGtlciAhPT0gbnVsbDsgaSsrKSB7XG4gICAgYXJyW2ldID0gd2Fsa2VyLnZhbHVlXG4gICAgd2Fsa2VyID0gd2Fsa2VyLnByZXZcbiAgfVxuICByZXR1cm4gYXJyXG59XG5cbllhbGxpc3QucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG4gIHRvID0gdG8gfHwgdGhpcy5sZW5ndGhcbiAgaWYgKHRvIDwgMCkge1xuICAgIHRvICs9IHRoaXMubGVuZ3RoXG4gIH1cbiAgZnJvbSA9IGZyb20gfHwgMFxuICBpZiAoZnJvbSA8IDApIHtcbiAgICBmcm9tICs9IHRoaXMubGVuZ3RoXG4gIH1cbiAgdmFyIHJldCA9IG5ldyBZYWxsaXN0KClcbiAgaWYgKHRvIDwgZnJvbSB8fCB0byA8IDApIHtcbiAgICByZXR1cm4gcmV0XG4gIH1cbiAgaWYgKGZyb20gPCAwKSB7XG4gICAgZnJvbSA9IDBcbiAgfVxuICBpZiAodG8gPiB0aGlzLmxlbmd0aCkge1xuICAgIHRvID0gdGhpcy5sZW5ndGhcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgd2Fsa2VyID0gdGhpcy5oZWFkOyB3YWxrZXIgIT09IG51bGwgJiYgaSA8IGZyb207IGkrKykge1xuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cbiAgZm9yICg7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgdG87IGkrKywgd2Fsa2VyID0gd2Fsa2VyLm5leHQpIHtcbiAgICByZXQucHVzaCh3YWxrZXIudmFsdWUpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5zbGljZVJldmVyc2UgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgdG8gPSB0byB8fCB0aGlzLmxlbmd0aFxuICBpZiAodG8gPCAwKSB7XG4gICAgdG8gKz0gdGhpcy5sZW5ndGhcbiAgfVxuICBmcm9tID0gZnJvbSB8fCAwXG4gIGlmIChmcm9tIDwgMCkge1xuICAgIGZyb20gKz0gdGhpcy5sZW5ndGhcbiAgfVxuICB2YXIgcmV0ID0gbmV3IFlhbGxpc3QoKVxuICBpZiAodG8gPCBmcm9tIHx8IHRvIDwgMCkge1xuICAgIHJldHVybiByZXRcbiAgfVxuICBpZiAoZnJvbSA8IDApIHtcbiAgICBmcm9tID0gMFxuICB9XG4gIGlmICh0byA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdG8gPSB0aGlzLmxlbmd0aFxuICB9XG4gIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCwgd2Fsa2VyID0gdGhpcy50YWlsOyB3YWxrZXIgIT09IG51bGwgJiYgaSA+IHRvOyBpLS0pIHtcbiAgICB3YWxrZXIgPSB3YWxrZXIucHJldlxuICB9XG4gIGZvciAoOyB3YWxrZXIgIT09IG51bGwgJiYgaSA+IGZyb207IGktLSwgd2Fsa2VyID0gd2Fsa2VyLnByZXYpIHtcbiAgICByZXQucHVzaCh3YWxrZXIudmFsdWUpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5ZYWxsaXN0LnByb3RvdHlwZS5zcGxpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGRlbGV0ZUNvdW50LCAuLi5ub2Rlcykge1xuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHN0YXJ0ID0gdGhpcy5sZW5ndGggLSAxXG4gIH1cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gdGhpcy5sZW5ndGggKyBzdGFydDtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCB3YWxrZXIgPSB0aGlzLmhlYWQ7IHdhbGtlciAhPT0gbnVsbCAmJiBpIDwgc3RhcnQ7IGkrKykge1xuICAgIHdhbGtlciA9IHdhbGtlci5uZXh0XG4gIH1cblxuICB2YXIgcmV0ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IHdhbGtlciAmJiBpIDwgZGVsZXRlQ291bnQ7IGkrKykge1xuICAgIHJldC5wdXNoKHdhbGtlci52YWx1ZSlcbiAgICB3YWxrZXIgPSB0aGlzLnJlbW92ZU5vZGUod2Fsa2VyKVxuICB9XG4gIGlmICh3YWxrZXIgPT09IG51bGwpIHtcbiAgICB3YWxrZXIgPSB0aGlzLnRhaWxcbiAgfVxuXG4gIGlmICh3YWxrZXIgIT09IHRoaXMuaGVhZCAmJiB3YWxrZXIgIT09IHRoaXMudGFpbCkge1xuICAgIHdhbGtlciA9IHdhbGtlci5wcmV2XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgd2Fsa2VyID0gaW5zZXJ0KHRoaXMsIHdhbGtlciwgbm9kZXNbaV0pXG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuWWFsbGlzdC5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQgPSB0aGlzLmhlYWRcbiAgdmFyIHRhaWwgPSB0aGlzLnRhaWxcbiAgZm9yICh2YXIgd2Fsa2VyID0gaGVhZDsgd2Fsa2VyICE9PSBudWxsOyB3YWxrZXIgPSB3YWxrZXIucHJldikge1xuICAgIHZhciBwID0gd2Fsa2VyLnByZXZcbiAgICB3YWxrZXIucHJldiA9IHdhbGtlci5uZXh0XG4gICAgd2Fsa2VyLm5leHQgPSBwXG4gIH1cbiAgdGhpcy5oZWFkID0gdGFpbFxuICB0aGlzLnRhaWwgPSBoZWFkXG4gIHJldHVybiB0aGlzXG59XG5cbmZ1bmN0aW9uIGluc2VydCAoc2VsZiwgbm9kZSwgdmFsdWUpIHtcbiAgdmFyIGluc2VydGVkID0gbm9kZSA9PT0gc2VsZi5oZWFkID9cbiAgICBuZXcgTm9kZSh2YWx1ZSwgbnVsbCwgbm9kZSwgc2VsZikgOlxuICAgIG5ldyBOb2RlKHZhbHVlLCBub2RlLCBub2RlLm5leHQsIHNlbGYpXG5cbiAgaWYgKGluc2VydGVkLm5leHQgPT09IG51bGwpIHtcbiAgICBzZWxmLnRhaWwgPSBpbnNlcnRlZFxuICB9XG4gIGlmIChpbnNlcnRlZC5wcmV2ID09PSBudWxsKSB7XG4gICAgc2VsZi5oZWFkID0gaW5zZXJ0ZWRcbiAgfVxuXG4gIHNlbGYubGVuZ3RoKytcblxuICByZXR1cm4gaW5zZXJ0ZWRcbn1cblxuZnVuY3Rpb24gcHVzaCAoc2VsZiwgaXRlbSkge1xuICBzZWxmLnRhaWwgPSBuZXcgTm9kZShpdGVtLCBzZWxmLnRhaWwsIG51bGwsIHNlbGYpXG4gIGlmICghc2VsZi5oZWFkKSB7XG4gICAgc2VsZi5oZWFkID0gc2VsZi50YWlsXG4gIH1cbiAgc2VsZi5sZW5ndGgrK1xufVxuXG5mdW5jdGlvbiB1bnNoaWZ0IChzZWxmLCBpdGVtKSB7XG4gIHNlbGYuaGVhZCA9IG5ldyBOb2RlKGl0ZW0sIG51bGwsIHNlbGYuaGVhZCwgc2VsZilcbiAgaWYgKCFzZWxmLnRhaWwpIHtcbiAgICBzZWxmLnRhaWwgPSBzZWxmLmhlYWRcbiAgfVxuICBzZWxmLmxlbmd0aCsrXG59XG5cbmZ1bmN0aW9uIE5vZGUgKHZhbHVlLCBwcmV2LCBuZXh0LCBsaXN0KSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBOb2RlKSkge1xuICAgIHJldHVybiBuZXcgTm9kZSh2YWx1ZSwgcHJldiwgbmV4dCwgbGlzdClcbiAgfVxuXG4gIHRoaXMubGlzdCA9IGxpc3RcbiAgdGhpcy52YWx1ZSA9IHZhbHVlXG5cbiAgaWYgKHByZXYpIHtcbiAgICBwcmV2Lm5leHQgPSB0aGlzXG4gICAgdGhpcy5wcmV2ID0gcHJldlxuICB9IGVsc2Uge1xuICAgIHRoaXMucHJldiA9IG51bGxcbiAgfVxuXG4gIGlmIChuZXh0KSB7XG4gICAgbmV4dC5wcmV2ID0gdGhpc1xuICAgIHRoaXMubmV4dCA9IG5leHRcbiAgfSBlbHNlIHtcbiAgICB0aGlzLm5leHQgPSBudWxsXG4gIH1cbn1cblxudHJ5IHtcbiAgLy8gYWRkIGlmIHN1cHBvcnQgZm9yIFN5bWJvbC5pdGVyYXRvciBpcyBwcmVzZW50XG4gIHJlcXVpcmUoJy4vaXRlcmF0b3IuanMnKShZYWxsaXN0KVxufSBjYXRjaCAoZXIpIHt9XG4iLCAiJ3VzZSBzdHJpY3QnXG5cbi8vIEEgbGlua2VkIGxpc3QgdG8ga2VlcCB0cmFjayBvZiByZWNlbnRseS11c2VkLW5lc3NcbmNvbnN0IFlhbGxpc3QgPSByZXF1aXJlKCd5YWxsaXN0JylcblxuY29uc3QgTUFYID0gU3ltYm9sKCdtYXgnKVxuY29uc3QgTEVOR1RIID0gU3ltYm9sKCdsZW5ndGgnKVxuY29uc3QgTEVOR1RIX0NBTENVTEFUT1IgPSBTeW1ib2woJ2xlbmd0aENhbGN1bGF0b3InKVxuY29uc3QgQUxMT1dfU1RBTEUgPSBTeW1ib2woJ2FsbG93U3RhbGUnKVxuY29uc3QgTUFYX0FHRSA9IFN5bWJvbCgnbWF4QWdlJylcbmNvbnN0IERJU1BPU0UgPSBTeW1ib2woJ2Rpc3Bvc2UnKVxuY29uc3QgTk9fRElTUE9TRV9PTl9TRVQgPSBTeW1ib2woJ25vRGlzcG9zZU9uU2V0JylcbmNvbnN0IExSVV9MSVNUID0gU3ltYm9sKCdscnVMaXN0JylcbmNvbnN0IENBQ0hFID0gU3ltYm9sKCdjYWNoZScpXG5jb25zdCBVUERBVEVfQUdFX09OX0dFVCA9IFN5bWJvbCgndXBkYXRlQWdlT25HZXQnKVxuXG5jb25zdCBuYWl2ZUxlbmd0aCA9ICgpID0+IDFcblxuLy8gbHJ1TGlzdCBpcyBhIHlhbGxpc3Qgd2hlcmUgdGhlIGhlYWQgaXMgdGhlIHlvdW5nZXN0XG4vLyBpdGVtLCBhbmQgdGhlIHRhaWwgaXMgdGhlIG9sZGVzdC4gIHRoZSBsaXN0IGNvbnRhaW5zIHRoZSBIaXRcbi8vIG9iamVjdHMgYXMgdGhlIGVudHJpZXMuXG4vLyBFYWNoIEhpdCBvYmplY3QgaGFzIGEgcmVmZXJlbmNlIHRvIGl0cyBZYWxsaXN0Lk5vZGUuICBUaGlzXG4vLyBuZXZlciBjaGFuZ2VzLlxuLy9cbi8vIGNhY2hlIGlzIGEgTWFwIChvciBQc2V1ZG9NYXApIHRoYXQgbWF0Y2hlcyB0aGUga2V5cyB0b1xuLy8gdGhlIFlhbGxpc3QuTm9kZSBvYmplY3QuXG5jbGFzcyBMUlVDYWNoZSB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJylcbiAgICAgIG9wdGlvbnMgPSB7IG1heDogb3B0aW9ucyB9XG5cbiAgICBpZiAoIW9wdGlvbnMpXG4gICAgICBvcHRpb25zID0ge31cblxuICAgIGlmIChvcHRpb25zLm1heCAmJiAodHlwZW9mIG9wdGlvbnMubWF4ICE9PSAnbnVtYmVyJyB8fCBvcHRpb25zLm1heCA8IDApKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyJylcbiAgICAvLyBLaW5kIG9mIHdlaXJkIHRvIGhhdmUgYSBkZWZhdWx0IG1heCBvZiBJbmZpbml0eSwgYnV0IG9oIHdlbGwuXG4gICAgY29uc3QgbWF4ID0gdGhpc1tNQVhdID0gb3B0aW9ucy5tYXggfHwgSW5maW5pdHlcblxuICAgIGNvbnN0IGxjID0gb3B0aW9ucy5sZW5ndGggfHwgbmFpdmVMZW5ndGhcbiAgICB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSA9ICh0eXBlb2YgbGMgIT09ICdmdW5jdGlvbicpID8gbmFpdmVMZW5ndGggOiBsY1xuICAgIHRoaXNbQUxMT1dfU1RBTEVdID0gb3B0aW9ucy5zdGFsZSB8fCBmYWxzZVxuICAgIGlmIChvcHRpb25zLm1heEFnZSAmJiB0eXBlb2Ygb3B0aW9ucy5tYXhBZ2UgIT09ICdudW1iZXInKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4QWdlIG11c3QgYmUgYSBudW1iZXInKVxuICAgIHRoaXNbTUFYX0FHRV0gPSBvcHRpb25zLm1heEFnZSB8fCAwXG4gICAgdGhpc1tESVNQT1NFXSA9IG9wdGlvbnMuZGlzcG9zZVxuICAgIHRoaXNbTk9fRElTUE9TRV9PTl9TRVRdID0gb3B0aW9ucy5ub0Rpc3Bvc2VPblNldCB8fCBmYWxzZVxuICAgIHRoaXNbVVBEQVRFX0FHRV9PTl9HRVRdID0gb3B0aW9ucy51cGRhdGVBZ2VPbkdldCB8fCBmYWxzZVxuICAgIHRoaXMucmVzZXQoKVxuICB9XG5cbiAgLy8gcmVzaXplIHRoZSBjYWNoZSB3aGVuIHRoZSBtYXggY2hhbmdlcy5cbiAgc2V0IG1heCAobUwpIHtcbiAgICBpZiAodHlwZW9mIG1MICE9PSAnbnVtYmVyJyB8fCBtTCA8IDApXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXggbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXInKVxuXG4gICAgdGhpc1tNQVhdID0gbUwgfHwgSW5maW5pdHlcbiAgICB0cmltKHRoaXMpXG4gIH1cbiAgZ2V0IG1heCAoKSB7XG4gICAgcmV0dXJuIHRoaXNbTUFYXVxuICB9XG5cbiAgc2V0IGFsbG93U3RhbGUgKGFsbG93U3RhbGUpIHtcbiAgICB0aGlzW0FMTE9XX1NUQUxFXSA9ICEhYWxsb3dTdGFsZVxuICB9XG4gIGdldCBhbGxvd1N0YWxlICgpIHtcbiAgICByZXR1cm4gdGhpc1tBTExPV19TVEFMRV1cbiAgfVxuXG4gIHNldCBtYXhBZ2UgKG1BKSB7XG4gICAgaWYgKHR5cGVvZiBtQSAhPT0gJ251bWJlcicpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdtYXhBZ2UgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXInKVxuXG4gICAgdGhpc1tNQVhfQUdFXSA9IG1BXG4gICAgdHJpbSh0aGlzKVxuICB9XG4gIGdldCBtYXhBZ2UgKCkge1xuICAgIHJldHVybiB0aGlzW01BWF9BR0VdXG4gIH1cblxuICAvLyByZXNpemUgdGhlIGNhY2hlIHdoZW4gdGhlIGxlbmd0aENhbGN1bGF0b3IgY2hhbmdlcy5cbiAgc2V0IGxlbmd0aENhbGN1bGF0b3IgKGxDKSB7XG4gICAgaWYgKHR5cGVvZiBsQyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgIGxDID0gbmFpdmVMZW5ndGhcblxuICAgIGlmIChsQyAhPT0gdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0pIHtcbiAgICAgIHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdID0gbENcbiAgICAgIHRoaXNbTEVOR1RIXSA9IDBcbiAgICAgIHRoaXNbTFJVX0xJU1RdLmZvckVhY2goaGl0ID0+IHtcbiAgICAgICAgaGl0Lmxlbmd0aCA9IHRoaXNbTEVOR1RIX0NBTENVTEFUT1JdKGhpdC52YWx1ZSwgaGl0LmtleSlcbiAgICAgICAgdGhpc1tMRU5HVEhdICs9IGhpdC5sZW5ndGhcbiAgICAgIH0pXG4gICAgfVxuICAgIHRyaW0odGhpcylcbiAgfVxuICBnZXQgbGVuZ3RoQ2FsY3VsYXRvciAoKSB7IHJldHVybiB0aGlzW0xFTkdUSF9DQUxDVUxBVE9SXSB9XG5cbiAgZ2V0IGxlbmd0aCAoKSB7IHJldHVybiB0aGlzW0xFTkdUSF0gfVxuICBnZXQgaXRlbUNvdW50ICgpIHsgcmV0dXJuIHRoaXNbTFJVX0xJU1RdLmxlbmd0aCB9XG5cbiAgcmZvckVhY2ggKGZuLCB0aGlzcCkge1xuICAgIHRoaXNwID0gdGhpc3AgfHwgdGhpc1xuICAgIGZvciAobGV0IHdhbGtlciA9IHRoaXNbTFJVX0xJU1RdLnRhaWw7IHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICAgIGNvbnN0IHByZXYgPSB3YWxrZXIucHJldlxuICAgICAgZm9yRWFjaFN0ZXAodGhpcywgZm4sIHdhbGtlciwgdGhpc3ApXG4gICAgICB3YWxrZXIgPSBwcmV2XG4gICAgfVxuICB9XG5cbiAgZm9yRWFjaCAoZm4sIHRoaXNwKSB7XG4gICAgdGhpc3AgPSB0aGlzcCB8fCB0aGlzXG4gICAgZm9yIChsZXQgd2Fsa2VyID0gdGhpc1tMUlVfTElTVF0uaGVhZDsgd2Fsa2VyICE9PSBudWxsOykge1xuICAgICAgY29uc3QgbmV4dCA9IHdhbGtlci5uZXh0XG4gICAgICBmb3JFYWNoU3RlcCh0aGlzLCBmbiwgd2Fsa2VyLCB0aGlzcClcbiAgICAgIHdhbGtlciA9IG5leHRcbiAgICB9XG4gIH1cblxuICBrZXlzICgpIHtcbiAgICByZXR1cm4gdGhpc1tMUlVfTElTVF0udG9BcnJheSgpLm1hcChrID0+IGsua2V5KVxuICB9XG5cbiAgdmFsdWVzICgpIHtcbiAgICByZXR1cm4gdGhpc1tMUlVfTElTVF0udG9BcnJheSgpLm1hcChrID0+IGsudmFsdWUpXG4gIH1cblxuICByZXNldCAoKSB7XG4gICAgaWYgKHRoaXNbRElTUE9TRV0gJiZcbiAgICAgICAgdGhpc1tMUlVfTElTVF0gJiZcbiAgICAgICAgdGhpc1tMUlVfTElTVF0ubGVuZ3RoKSB7XG4gICAgICB0aGlzW0xSVV9MSVNUXS5mb3JFYWNoKGhpdCA9PiB0aGlzW0RJU1BPU0VdKGhpdC5rZXksIGhpdC52YWx1ZSkpXG4gICAgfVxuXG4gICAgdGhpc1tDQUNIRV0gPSBuZXcgTWFwKCkgLy8gaGFzaCBvZiBpdGVtcyBieSBrZXlcbiAgICB0aGlzW0xSVV9MSVNUXSA9IG5ldyBZYWxsaXN0KCkgLy8gbGlzdCBvZiBpdGVtcyBpbiBvcmRlciBvZiB1c2UgcmVjZW5jeVxuICAgIHRoaXNbTEVOR1RIXSA9IDAgLy8gbGVuZ3RoIG9mIGl0ZW1zIGluIHRoZSBsaXN0XG4gIH1cblxuICBkdW1wICgpIHtcbiAgICByZXR1cm4gdGhpc1tMUlVfTElTVF0ubWFwKGhpdCA9PlxuICAgICAgaXNTdGFsZSh0aGlzLCBoaXQpID8gZmFsc2UgOiB7XG4gICAgICAgIGs6IGhpdC5rZXksXG4gICAgICAgIHY6IGhpdC52YWx1ZSxcbiAgICAgICAgZTogaGl0Lm5vdyArIChoaXQubWF4QWdlIHx8IDApXG4gICAgICB9KS50b0FycmF5KCkuZmlsdGVyKGggPT4gaClcbiAgfVxuXG4gIGR1bXBMcnUgKCkge1xuICAgIHJldHVybiB0aGlzW0xSVV9MSVNUXVxuICB9XG5cbiAgc2V0IChrZXksIHZhbHVlLCBtYXhBZ2UpIHtcbiAgICBtYXhBZ2UgPSBtYXhBZ2UgfHwgdGhpc1tNQVhfQUdFXVxuXG4gICAgaWYgKG1heEFnZSAmJiB0eXBlb2YgbWF4QWdlICE9PSAnbnVtYmVyJylcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heEFnZSBtdXN0IGJlIGEgbnVtYmVyJylcblxuICAgIGNvbnN0IG5vdyA9IG1heEFnZSA/IERhdGUubm93KCkgOiAwXG4gICAgY29uc3QgbGVuID0gdGhpc1tMRU5HVEhfQ0FMQ1VMQVRPUl0odmFsdWUsIGtleSlcblxuICAgIGlmICh0aGlzW0NBQ0hFXS5oYXMoa2V5KSkge1xuICAgICAgaWYgKGxlbiA+IHRoaXNbTUFYXSkge1xuICAgICAgICBkZWwodGhpcywgdGhpc1tDQUNIRV0uZ2V0KGtleSkpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuXG4gICAgICBjb25zdCBub2RlID0gdGhpc1tDQUNIRV0uZ2V0KGtleSlcbiAgICAgIGNvbnN0IGl0ZW0gPSBub2RlLnZhbHVlXG5cbiAgICAgIC8vIGRpc3Bvc2Ugb2YgdGhlIG9sZCBvbmUgYmVmb3JlIG92ZXJ3cml0aW5nXG4gICAgICAvLyBzcGxpdCBvdXQgaW50byAyIGlmcyBmb3IgYmV0dGVyIGNvdmVyYWdlIHRyYWNraW5nXG4gICAgICBpZiAodGhpc1tESVNQT1NFXSkge1xuICAgICAgICBpZiAoIXRoaXNbTk9fRElTUE9TRV9PTl9TRVRdKVxuICAgICAgICAgIHRoaXNbRElTUE9TRV0oa2V5LCBpdGVtLnZhbHVlKVxuICAgICAgfVxuXG4gICAgICBpdGVtLm5vdyA9IG5vd1xuICAgICAgaXRlbS5tYXhBZ2UgPSBtYXhBZ2VcbiAgICAgIGl0ZW0udmFsdWUgPSB2YWx1ZVxuICAgICAgdGhpc1tMRU5HVEhdICs9IGxlbiAtIGl0ZW0ubGVuZ3RoXG4gICAgICBpdGVtLmxlbmd0aCA9IGxlblxuICAgICAgdGhpcy5nZXQoa2V5KVxuICAgICAgdHJpbSh0aGlzKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBjb25zdCBoaXQgPSBuZXcgRW50cnkoa2V5LCB2YWx1ZSwgbGVuLCBub3csIG1heEFnZSlcblxuICAgIC8vIG92ZXJzaXplZCBvYmplY3RzIGZhbGwgb3V0IG9mIGNhY2hlIGF1dG9tYXRpY2FsbHkuXG4gICAgaWYgKGhpdC5sZW5ndGggPiB0aGlzW01BWF0pIHtcbiAgICAgIGlmICh0aGlzW0RJU1BPU0VdKVxuICAgICAgICB0aGlzW0RJU1BPU0VdKGtleSwgdmFsdWUpXG5cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIHRoaXNbTEVOR1RIXSArPSBoaXQubGVuZ3RoXG4gICAgdGhpc1tMUlVfTElTVF0udW5zaGlmdChoaXQpXG4gICAgdGhpc1tDQUNIRV0uc2V0KGtleSwgdGhpc1tMUlVfTElTVF0uaGVhZClcbiAgICB0cmltKHRoaXMpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGhhcyAoa2V5KSB7XG4gICAgaWYgKCF0aGlzW0NBQ0hFXS5oYXMoa2V5KSkgcmV0dXJuIGZhbHNlXG4gICAgY29uc3QgaGl0ID0gdGhpc1tDQUNIRV0uZ2V0KGtleSkudmFsdWVcbiAgICByZXR1cm4gIWlzU3RhbGUodGhpcywgaGl0KVxuICB9XG5cbiAgZ2V0IChrZXkpIHtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGtleSwgdHJ1ZSlcbiAgfVxuXG4gIHBlZWsgKGtleSkge1xuICAgIHJldHVybiBnZXQodGhpcywga2V5LCBmYWxzZSlcbiAgfVxuXG4gIHBvcCAoKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXNbTFJVX0xJU1RdLnRhaWxcbiAgICBpZiAoIW5vZGUpXG4gICAgICByZXR1cm4gbnVsbFxuXG4gICAgZGVsKHRoaXMsIG5vZGUpXG4gICAgcmV0dXJuIG5vZGUudmFsdWVcbiAgfVxuXG4gIGRlbCAoa2V5KSB7XG4gICAgZGVsKHRoaXMsIHRoaXNbQ0FDSEVdLmdldChrZXkpKVxuICB9XG5cbiAgbG9hZCAoYXJyKSB7XG4gICAgLy8gcmVzZXQgdGhlIGNhY2hlXG4gICAgdGhpcy5yZXNldCgpXG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpXG4gICAgLy8gQSBwcmV2aW91cyBzZXJpYWxpemVkIGNhY2hlIGhhcyB0aGUgbW9zdCByZWNlbnQgaXRlbXMgZmlyc3RcbiAgICBmb3IgKGxldCBsID0gYXJyLmxlbmd0aCAtIDE7IGwgPj0gMDsgbC0tKSB7XG4gICAgICBjb25zdCBoaXQgPSBhcnJbbF1cbiAgICAgIGNvbnN0IGV4cGlyZXNBdCA9IGhpdC5lIHx8IDBcbiAgICAgIGlmIChleHBpcmVzQXQgPT09IDApXG4gICAgICAgIC8vIHRoZSBpdGVtIHdhcyBjcmVhdGVkIHdpdGhvdXQgZXhwaXJhdGlvbiBpbiBhIG5vbiBhZ2VkIGNhY2hlXG4gICAgICAgIHRoaXMuc2V0KGhpdC5rLCBoaXQudilcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtYXhBZ2UgPSBleHBpcmVzQXQgLSBub3dcbiAgICAgICAgLy8gZG9udCBhZGQgYWxyZWFkeSBleHBpcmVkIGl0ZW1zXG4gICAgICAgIGlmIChtYXhBZ2UgPiAwKSB7XG4gICAgICAgICAgdGhpcy5zZXQoaGl0LmssIGhpdC52LCBtYXhBZ2UpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcnVuZSAoKSB7XG4gICAgdGhpc1tDQUNIRV0uZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gZ2V0KHRoaXMsIGtleSwgZmFsc2UpKVxuICB9XG59XG5cbmNvbnN0IGdldCA9IChzZWxmLCBrZXksIGRvVXNlKSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBzZWxmW0NBQ0hFXS5nZXQoa2V5KVxuICBpZiAobm9kZSkge1xuICAgIGNvbnN0IGhpdCA9IG5vZGUudmFsdWVcbiAgICBpZiAoaXNTdGFsZShzZWxmLCBoaXQpKSB7XG4gICAgICBkZWwoc2VsZiwgbm9kZSlcbiAgICAgIGlmICghc2VsZltBTExPV19TVEFMRV0pXG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRvVXNlKSB7XG4gICAgICAgIGlmIChzZWxmW1VQREFURV9BR0VfT05fR0VUXSlcbiAgICAgICAgICBub2RlLnZhbHVlLm5vdyA9IERhdGUubm93KClcbiAgICAgICAgc2VsZltMUlVfTElTVF0udW5zaGlmdE5vZGUobm9kZSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhpdC52YWx1ZVxuICB9XG59XG5cbmNvbnN0IGlzU3RhbGUgPSAoc2VsZiwgaGl0KSA9PiB7XG4gIGlmICghaGl0IHx8ICghaGl0Lm1heEFnZSAmJiAhc2VsZltNQVhfQUdFXSkpXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgY29uc3QgZGlmZiA9IERhdGUubm93KCkgLSBoaXQubm93XG4gIHJldHVybiBoaXQubWF4QWdlID8gZGlmZiA+IGhpdC5tYXhBZ2VcbiAgICA6IHNlbGZbTUFYX0FHRV0gJiYgKGRpZmYgPiBzZWxmW01BWF9BR0VdKVxufVxuXG5jb25zdCB0cmltID0gc2VsZiA9PiB7XG4gIGlmIChzZWxmW0xFTkdUSF0gPiBzZWxmW01BWF0pIHtcbiAgICBmb3IgKGxldCB3YWxrZXIgPSBzZWxmW0xSVV9MSVNUXS50YWlsO1xuICAgICAgc2VsZltMRU5HVEhdID4gc2VsZltNQVhdICYmIHdhbGtlciAhPT0gbnVsbDspIHtcbiAgICAgIC8vIFdlIGtub3cgdGhhdCB3ZSdyZSBhYm91dCB0byBkZWxldGUgdGhpcyBvbmUsIGFuZCBhbHNvXG4gICAgICAvLyB3aGF0IHRoZSBuZXh0IGxlYXN0IHJlY2VudGx5IHVzZWQga2V5IHdpbGwgYmUsIHNvIGp1c3RcbiAgICAgIC8vIGdvIGFoZWFkIGFuZCBzZXQgaXQgbm93LlxuICAgICAgY29uc3QgcHJldiA9IHdhbGtlci5wcmV2XG4gICAgICBkZWwoc2VsZiwgd2Fsa2VyKVxuICAgICAgd2Fsa2VyID0gcHJldlxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBkZWwgPSAoc2VsZiwgbm9kZSkgPT4ge1xuICBpZiAobm9kZSkge1xuICAgIGNvbnN0IGhpdCA9IG5vZGUudmFsdWVcbiAgICBpZiAoc2VsZltESVNQT1NFXSlcbiAgICAgIHNlbGZbRElTUE9TRV0oaGl0LmtleSwgaGl0LnZhbHVlKVxuXG4gICAgc2VsZltMRU5HVEhdIC09IGhpdC5sZW5ndGhcbiAgICBzZWxmW0NBQ0hFXS5kZWxldGUoaGl0LmtleSlcbiAgICBzZWxmW0xSVV9MSVNUXS5yZW1vdmVOb2RlKG5vZGUpXG4gIH1cbn1cblxuY2xhc3MgRW50cnkge1xuICBjb25zdHJ1Y3RvciAoa2V5LCB2YWx1ZSwgbGVuZ3RoLCBub3csIG1heEFnZSkge1xuICAgIHRoaXMua2V5ID0ga2V5XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlXG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGhcbiAgICB0aGlzLm5vdyA9IG5vd1xuICAgIHRoaXMubWF4QWdlID0gbWF4QWdlIHx8IDBcbiAgfVxufVxuXG5jb25zdCBmb3JFYWNoU3RlcCA9IChzZWxmLCBmbiwgbm9kZSwgdGhpc3ApID0+IHtcbiAgbGV0IGhpdCA9IG5vZGUudmFsdWVcbiAgaWYgKGlzU3RhbGUoc2VsZiwgaGl0KSkge1xuICAgIGRlbChzZWxmLCBub2RlKVxuICAgIGlmICghc2VsZltBTExPV19TVEFMRV0pXG4gICAgICBoaXQgPSB1bmRlZmluZWRcbiAgfVxuICBpZiAoaGl0KVxuICAgIGZuLmNhbGwodGhpc3AsIGhpdC52YWx1ZSwgaGl0LmtleSwgc2VsZilcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMUlVDYWNoZVxuIiwgIi8vIGhvaXN0ZWQgY2xhc3MgZm9yIGN5Y2xpYyBkZXBlbmRlbmN5XG5jbGFzcyBSYW5nZSB7XG4gIGNvbnN0cnVjdG9yIChyYW5nZSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBwYXJzZU9wdGlvbnMob3B0aW9ucylcblxuICAgIGlmIChyYW5nZSBpbnN0YW5jZW9mIFJhbmdlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHJhbmdlLmxvb3NlID09PSAhIW9wdGlvbnMubG9vc2UgJiZcbiAgICAgICAgcmFuZ2UuaW5jbHVkZVByZXJlbGVhc2UgPT09ICEhb3B0aW9ucy5pbmNsdWRlUHJlcmVsZWFzZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiByYW5nZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5yYXcsIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJhbmdlIGluc3RhbmNlb2YgQ29tcGFyYXRvcikge1xuICAgICAgLy8ganVzdCBwdXQgaXQgaW4gdGhlIHNldCBhbmQgcmV0dXJuXG4gICAgICB0aGlzLnJhdyA9IHJhbmdlLnZhbHVlXG4gICAgICB0aGlzLnNldCA9IFtbcmFuZ2VdXVxuICAgICAgdGhpcy5mb3JtYXQoKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgdGhpcy5sb29zZSA9ICEhb3B0aW9ucy5sb29zZVxuICAgIHRoaXMuaW5jbHVkZVByZXJlbGVhc2UgPSAhIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2VcblxuICAgIC8vIEZpcnN0LCBzcGxpdCBiYXNlZCBvbiBib29sZWFuIG9yIHx8XG4gICAgdGhpcy5yYXcgPSByYW5nZVxuICAgIHRoaXMuc2V0ID0gcmFuZ2VcbiAgICAgIC5zcGxpdCgvXFxzKlxcfFxcfFxccyovKVxuICAgICAgLy8gbWFwIHRoZSByYW5nZSB0byBhIDJkIGFycmF5IG9mIGNvbXBhcmF0b3JzXG4gICAgICAubWFwKHJhbmdlID0+IHRoaXMucGFyc2VSYW5nZShyYW5nZS50cmltKCkpKVxuICAgICAgLy8gdGhyb3cgb3V0IGFueSBjb21wYXJhdG9yIGxpc3RzIHRoYXQgYXJlIGVtcHR5XG4gICAgICAvLyB0aGlzIGdlbmVyYWxseSBtZWFucyB0aGF0IGl0IHdhcyBub3QgYSB2YWxpZCByYW5nZSwgd2hpY2ggaXMgYWxsb3dlZFxuICAgICAgLy8gaW4gbG9vc2UgbW9kZSwgYnV0IHdpbGwgc3RpbGwgdGhyb3cgaWYgdGhlIFdIT0xFIHJhbmdlIGlzIGludmFsaWQuXG4gICAgICAuZmlsdGVyKGMgPT4gYy5sZW5ndGgpXG5cbiAgICBpZiAoIXRoaXMuc2V0Lmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBTZW1WZXIgUmFuZ2U6ICR7cmFuZ2V9YClcbiAgICB9XG5cbiAgICAvLyBpZiB3ZSBoYXZlIGFueSB0aGF0IGFyZSBub3QgdGhlIG51bGwgc2V0LCB0aHJvdyBvdXQgbnVsbCBzZXRzLlxuICAgIGlmICh0aGlzLnNldC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBrZWVwIHRoZSBmaXJzdCBvbmUsIGluIGNhc2UgdGhleSdyZSBhbGwgbnVsbCBzZXRzXG4gICAgICBjb25zdCBmaXJzdCA9IHRoaXMuc2V0WzBdXG4gICAgICB0aGlzLnNldCA9IHRoaXMuc2V0LmZpbHRlcihjID0+ICFpc051bGxTZXQoY1swXSkpXG4gICAgICBpZiAodGhpcy5zZXQubGVuZ3RoID09PSAwKVxuICAgICAgICB0aGlzLnNldCA9IFtmaXJzdF1cbiAgICAgIGVsc2UgaWYgKHRoaXMuc2V0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhbnkgdGhhdCBhcmUgKiwgdGhlbiB0aGUgcmFuZ2UgaXMganVzdCAqXG4gICAgICAgIGZvciAoY29uc3QgYyBvZiB0aGlzLnNldCkge1xuICAgICAgICAgIGlmIChjLmxlbmd0aCA9PT0gMSAmJiBpc0FueShjWzBdKSkge1xuICAgICAgICAgICAgdGhpcy5zZXQgPSBbY11cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5mb3JtYXQoKVxuICB9XG5cbiAgZm9ybWF0ICgpIHtcbiAgICB0aGlzLnJhbmdlID0gdGhpcy5zZXRcbiAgICAgIC5tYXAoKGNvbXBzKSA9PiB7XG4gICAgICAgIHJldHVybiBjb21wcy5qb2luKCcgJykudHJpbSgpXG4gICAgICB9KVxuICAgICAgLmpvaW4oJ3x8JylcbiAgICAgIC50cmltKClcbiAgICByZXR1cm4gdGhpcy5yYW5nZVxuICB9XG5cbiAgdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLnJhbmdlXG4gIH1cblxuICBwYXJzZVJhbmdlIChyYW5nZSkge1xuICAgIHJhbmdlID0gcmFuZ2UudHJpbSgpXG5cbiAgICAvLyBtZW1vaXplIHJhbmdlIHBhcnNpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgIC8vIHRoaXMgaXMgYSB2ZXJ5IGhvdCBwYXRoLCBhbmQgZnVsbHkgZGV0ZXJtaW5pc3RpYy5cbiAgICBjb25zdCBtZW1vT3B0cyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucykuam9pbignLCcpXG4gICAgY29uc3QgbWVtb0tleSA9IGBwYXJzZVJhbmdlOiR7bWVtb09wdHN9OiR7cmFuZ2V9YFxuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlLmdldChtZW1vS2V5KVxuICAgIGlmIChjYWNoZWQpXG4gICAgICByZXR1cm4gY2FjaGVkXG5cbiAgICBjb25zdCBsb29zZSA9IHRoaXMub3B0aW9ucy5sb29zZVxuICAgIC8vIGAxLjIuMyAtIDEuMi40YCA9PiBgPj0xLjIuMyA8PTEuMi40YFxuICAgIGNvbnN0IGhyID0gbG9vc2UgPyByZVt0LkhZUEhFTlJBTkdFTE9PU0VdIDogcmVbdC5IWVBIRU5SQU5HRV1cbiAgICByYW5nZSA9IHJhbmdlLnJlcGxhY2UoaHIsIGh5cGhlblJlcGxhY2UodGhpcy5vcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlKSlcbiAgICBkZWJ1ZygnaHlwaGVuIHJlcGxhY2UnLCByYW5nZSlcbiAgICAvLyBgPiAxLjIuMyA8IDEuMi41YCA9PiBgPjEuMi4zIDwxLjIuNWBcbiAgICByYW5nZSA9IHJhbmdlLnJlcGxhY2UocmVbdC5DT01QQVJBVE9SVFJJTV0sIGNvbXBhcmF0b3JUcmltUmVwbGFjZSlcbiAgICBkZWJ1ZygnY29tcGFyYXRvciB0cmltJywgcmFuZ2UsIHJlW3QuQ09NUEFSQVRPUlRSSU1dKVxuXG4gICAgLy8gYH4gMS4yLjNgID0+IGB+MS4yLjNgXG4gICAgcmFuZ2UgPSByYW5nZS5yZXBsYWNlKHJlW3QuVElMREVUUklNXSwgdGlsZGVUcmltUmVwbGFjZSlcblxuICAgIC8vIGBeIDEuMi4zYCA9PiBgXjEuMi4zYFxuICAgIHJhbmdlID0gcmFuZ2UucmVwbGFjZShyZVt0LkNBUkVUVFJJTV0sIGNhcmV0VHJpbVJlcGxhY2UpXG5cbiAgICAvLyBub3JtYWxpemUgc3BhY2VzXG4gICAgcmFuZ2UgPSByYW5nZS5zcGxpdCgvXFxzKy8pLmpvaW4oJyAnKVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIHJhbmdlIGlzIGNvbXBsZXRlbHkgdHJpbW1lZCBhbmRcbiAgICAvLyByZWFkeSB0byBiZSBzcGxpdCBpbnRvIGNvbXBhcmF0b3JzLlxuXG4gICAgY29uc3QgY29tcFJlID0gbG9vc2UgPyByZVt0LkNPTVBBUkFUT1JMT09TRV0gOiByZVt0LkNPTVBBUkFUT1JdXG4gICAgY29uc3QgcmFuZ2VMaXN0ID0gcmFuZ2VcbiAgICAgIC5zcGxpdCgnICcpXG4gICAgICAubWFwKGNvbXAgPT4gcGFyc2VDb21wYXJhdG9yKGNvbXAsIHRoaXMub3B0aW9ucykpXG4gICAgICAuam9pbignICcpXG4gICAgICAuc3BsaXQoL1xccysvKVxuICAgICAgLy8gPj0wLjAuMCBpcyBlcXVpdmFsZW50IHRvICpcbiAgICAgIC5tYXAoY29tcCA9PiByZXBsYWNlR1RFMChjb21wLCB0aGlzLm9wdGlvbnMpKVxuICAgICAgLy8gaW4gbG9vc2UgbW9kZSwgdGhyb3cgb3V0IGFueSB0aGF0IGFyZSBub3QgdmFsaWQgY29tcGFyYXRvcnNcbiAgICAgIC5maWx0ZXIodGhpcy5vcHRpb25zLmxvb3NlID8gY29tcCA9PiAhIWNvbXAubWF0Y2goY29tcFJlKSA6ICgpID0+IHRydWUpXG4gICAgICAubWFwKGNvbXAgPT4gbmV3IENvbXBhcmF0b3IoY29tcCwgdGhpcy5vcHRpb25zKSlcblxuICAgIC8vIGlmIGFueSBjb21wYXJhdG9ycyBhcmUgdGhlIG51bGwgc2V0LCB0aGVuIHJlcGxhY2Ugd2l0aCBKVVNUIG51bGwgc2V0XG4gICAgLy8gaWYgbW9yZSB0aGFuIG9uZSBjb21wYXJhdG9yLCByZW1vdmUgYW55ICogY29tcGFyYXRvcnNcbiAgICAvLyBhbHNvLCBkb24ndCBpbmNsdWRlIHRoZSBzYW1lIGNvbXBhcmF0b3IgbW9yZSB0aGFuIG9uY2VcbiAgICBjb25zdCBsID0gcmFuZ2VMaXN0Lmxlbmd0aFxuICAgIGNvbnN0IHJhbmdlTWFwID0gbmV3IE1hcCgpXG4gICAgZm9yIChjb25zdCBjb21wIG9mIHJhbmdlTGlzdCkge1xuICAgICAgaWYgKGlzTnVsbFNldChjb21wKSlcbiAgICAgICAgcmV0dXJuIFtjb21wXVxuICAgICAgcmFuZ2VNYXAuc2V0KGNvbXAudmFsdWUsIGNvbXApXG4gICAgfVxuICAgIGlmIChyYW5nZU1hcC5zaXplID4gMSAmJiByYW5nZU1hcC5oYXMoJycpKVxuICAgICAgcmFuZ2VNYXAuZGVsZXRlKCcnKVxuXG4gICAgY29uc3QgcmVzdWx0ID0gWy4uLnJhbmdlTWFwLnZhbHVlcygpXVxuICAgIGNhY2hlLnNldChtZW1vS2V5LCByZXN1bHQpXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgaW50ZXJzZWN0cyAocmFuZ2UsIG9wdGlvbnMpIHtcbiAgICBpZiAoIShyYW5nZSBpbnN0YW5jZW9mIFJhbmdlKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYSBSYW5nZSBpcyByZXF1aXJlZCcpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2V0LnNvbWUoKHRoaXNDb21wYXJhdG9ycykgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgaXNTYXRpc2ZpYWJsZSh0aGlzQ29tcGFyYXRvcnMsIG9wdGlvbnMpICYmXG4gICAgICAgIHJhbmdlLnNldC5zb21lKChyYW5nZUNvbXBhcmF0b3JzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGlzU2F0aXNmaWFibGUocmFuZ2VDb21wYXJhdG9ycywgb3B0aW9ucykgJiZcbiAgICAgICAgICAgIHRoaXNDb21wYXJhdG9ycy5ldmVyeSgodGhpc0NvbXBhcmF0b3IpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlQ29tcGFyYXRvcnMuZXZlcnkoKHJhbmdlQ29tcGFyYXRvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQ29tcGFyYXRvci5pbnRlcnNlY3RzKHJhbmdlQ29tcGFyYXRvciwgb3B0aW9ucylcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgKVxuICAgIH0pXG4gIH1cblxuICAvLyBpZiBBTlkgb2YgdGhlIHNldHMgbWF0Y2ggQUxMIG9mIGl0cyBjb21wYXJhdG9ycywgdGhlbiBwYXNzXG4gIHRlc3QgKHZlcnNpb24pIHtcbiAgICBpZiAoIXZlcnNpb24pIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZlcnNpb24gPSBuZXcgU2VtVmVyKHZlcnNpb24sIHRoaXMub3B0aW9ucylcbiAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zZXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0ZXN0U2V0KHRoaXMuc2V0W2ldLCB2ZXJzaW9uLCB0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IFJhbmdlXG5cbmNvbnN0IExSVSA9IHJlcXVpcmUoJ2xydS1jYWNoZScpXG5jb25zdCBjYWNoZSA9IG5ldyBMUlUoeyBtYXg6IDEwMDAgfSlcblxuY29uc3QgcGFyc2VPcHRpb25zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcGFyc2Utb3B0aW9ucycpXG5jb25zdCBDb21wYXJhdG9yID0gcmVxdWlyZSgnLi9jb21wYXJhdG9yJylcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvZGVidWcnKVxuY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi9zZW12ZXInKVxuY29uc3Qge1xuICByZSxcbiAgdCxcbiAgY29tcGFyYXRvclRyaW1SZXBsYWNlLFxuICB0aWxkZVRyaW1SZXBsYWNlLFxuICBjYXJldFRyaW1SZXBsYWNlXG59ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvcmUnKVxuXG5jb25zdCBpc051bGxTZXQgPSBjID0+IGMudmFsdWUgPT09ICc8MC4wLjAtMCdcbmNvbnN0IGlzQW55ID0gYyA9PiBjLnZhbHVlID09PSAnJ1xuXG4vLyB0YWtlIGEgc2V0IG9mIGNvbXBhcmF0b3JzIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGVyZVxuLy8gZXhpc3RzIGEgdmVyc2lvbiB3aGljaCBjYW4gc2F0aXNmeSBpdFxuY29uc3QgaXNTYXRpc2ZpYWJsZSA9IChjb21wYXJhdG9ycywgb3B0aW9ucykgPT4ge1xuICBsZXQgcmVzdWx0ID0gdHJ1ZVxuICBjb25zdCByZW1haW5pbmdDb21wYXJhdG9ycyA9IGNvbXBhcmF0b3JzLnNsaWNlKClcbiAgbGV0IHRlc3RDb21wYXJhdG9yID0gcmVtYWluaW5nQ29tcGFyYXRvcnMucG9wKClcblxuICB3aGlsZSAocmVzdWx0ICYmIHJlbWFpbmluZ0NvbXBhcmF0b3JzLmxlbmd0aCkge1xuICAgIHJlc3VsdCA9IHJlbWFpbmluZ0NvbXBhcmF0b3JzLmV2ZXJ5KChvdGhlckNvbXBhcmF0b3IpID0+IHtcbiAgICAgIHJldHVybiB0ZXN0Q29tcGFyYXRvci5pbnRlcnNlY3RzKG90aGVyQ29tcGFyYXRvciwgb3B0aW9ucylcbiAgICB9KVxuXG4gICAgdGVzdENvbXBhcmF0b3IgPSByZW1haW5pbmdDb21wYXJhdG9ycy5wb3AoKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vLyBjb21wcmlzZWQgb2YgeHJhbmdlcywgdGlsZGVzLCBzdGFycywgYW5kIGd0bHQncyBhdCB0aGlzIHBvaW50LlxuLy8gYWxyZWFkeSByZXBsYWNlZCB0aGUgaHlwaGVuIHJhbmdlc1xuLy8gdHVybiBpbnRvIGEgc2V0IG9mIEpVU1QgY29tcGFyYXRvcnMuXG5jb25zdCBwYXJzZUNvbXBhcmF0b3IgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBkZWJ1ZygnY29tcCcsIGNvbXAsIG9wdGlvbnMpXG4gIGNvbXAgPSByZXBsYWNlQ2FyZXRzKGNvbXAsIG9wdGlvbnMpXG4gIGRlYnVnKCdjYXJldCcsIGNvbXApXG4gIGNvbXAgPSByZXBsYWNlVGlsZGVzKGNvbXAsIG9wdGlvbnMpXG4gIGRlYnVnKCd0aWxkZXMnLCBjb21wKVxuICBjb21wID0gcmVwbGFjZVhSYW5nZXMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ3hyYW5nZScsIGNvbXApXG4gIGNvbXAgPSByZXBsYWNlU3RhcnMoY29tcCwgb3B0aW9ucylcbiAgZGVidWcoJ3N0YXJzJywgY29tcClcbiAgcmV0dXJuIGNvbXBcbn1cblxuY29uc3QgaXNYID0gaWQgPT4gIWlkIHx8IGlkLnRvTG93ZXJDYXNlKCkgPT09ICd4JyB8fCBpZCA9PT0gJyonXG5cbi8vIH4sIH4+IC0tPiAqIChhbnksIGtpbmRhIHNpbGx5KVxuLy8gfjIsIH4yLngsIH4yLngueCwgfj4yLCB+PjIueCB+PjIueC54IC0tPiA+PTIuMC4wIDwzLjAuMC0wXG4vLyB+Mi4wLCB+Mi4wLngsIH4+Mi4wLCB+PjIuMC54IC0tPiA+PTIuMC4wIDwyLjEuMC0wXG4vLyB+MS4yLCB+MS4yLngsIH4+MS4yLCB+PjEuMi54IC0tPiA+PTEuMi4wIDwxLjMuMC0wXG4vLyB+MS4yLjMsIH4+MS4yLjMgLS0+ID49MS4yLjMgPDEuMy4wLTBcbi8vIH4xLjIuMCwgfj4xLjIuMCAtLT4gPj0xLjIuMCA8MS4zLjAtMFxuY29uc3QgcmVwbGFjZVRpbGRlcyA9IChjb21wLCBvcHRpb25zKSA9PlxuICBjb21wLnRyaW0oKS5zcGxpdCgvXFxzKy8pLm1hcCgoY29tcCkgPT4ge1xuICAgIHJldHVybiByZXBsYWNlVGlsZGUoY29tcCwgb3B0aW9ucylcbiAgfSkuam9pbignICcpXG5cbmNvbnN0IHJlcGxhY2VUaWxkZSA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHIgPSBvcHRpb25zLmxvb3NlID8gcmVbdC5USUxERUxPT1NFXSA6IHJlW3QuVElMREVdXG4gIHJldHVybiBjb21wLnJlcGxhY2UociwgKF8sIE0sIG0sIHAsIHByKSA9PiB7XG4gICAgZGVidWcoJ3RpbGRlJywgY29tcCwgXywgTSwgbSwgcCwgcHIpXG4gICAgbGV0IHJldFxuXG4gICAgaWYgKGlzWChNKSkge1xuICAgICAgcmV0ID0gJydcbiAgICB9IGVsc2UgaWYgKGlzWChtKSkge1xuICAgICAgcmV0ID0gYD49JHtNfS4wLjAgPCR7K00gKyAxfS4wLjAtMGBcbiAgICB9IGVsc2UgaWYgKGlzWChwKSkge1xuICAgICAgLy8gfjEuMiA9PSA+PTEuMi4wIDwxLjMuMC0wXG4gICAgICByZXQgPSBgPj0ke019LiR7bX0uMCA8JHtNfS4keyttICsgMX0uMC0wYFxuICAgIH0gZWxzZSBpZiAocHIpIHtcbiAgICAgIGRlYnVnKCdyZXBsYWNlVGlsZGUgcHInLCBwcilcbiAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3B9LSR7cHJcbiAgICAgIH0gPCR7TX0uJHsrbSArIDF9LjAtMGBcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gfjEuMi4zID09ID49MS4yLjMgPDEuMy4wLTBcbiAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3BcbiAgICAgIH0gPCR7TX0uJHsrbSArIDF9LjAtMGBcbiAgICB9XG5cbiAgICBkZWJ1ZygndGlsZGUgcmV0dXJuJywgcmV0KVxuICAgIHJldHVybiByZXRcbiAgfSlcbn1cblxuLy8gXiAtLT4gKiAoYW55LCBraW5kYSBzaWxseSlcbi8vIF4yLCBeMi54LCBeMi54LnggLS0+ID49Mi4wLjAgPDMuMC4wLTBcbi8vIF4yLjAsIF4yLjAueCAtLT4gPj0yLjAuMCA8My4wLjAtMFxuLy8gXjEuMiwgXjEuMi54IC0tPiA+PTEuMi4wIDwyLjAuMC0wXG4vLyBeMS4yLjMgLS0+ID49MS4yLjMgPDIuMC4wLTBcbi8vIF4xLjIuMCAtLT4gPj0xLjIuMCA8Mi4wLjAtMFxuY29uc3QgcmVwbGFjZUNhcmV0cyA9IChjb21wLCBvcHRpb25zKSA9PlxuICBjb21wLnRyaW0oKS5zcGxpdCgvXFxzKy8pLm1hcCgoY29tcCkgPT4ge1xuICAgIHJldHVybiByZXBsYWNlQ2FyZXQoY29tcCwgb3B0aW9ucylcbiAgfSkuam9pbignICcpXG5cbmNvbnN0IHJlcGxhY2VDYXJldCA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGRlYnVnKCdjYXJldCcsIGNvbXAsIG9wdGlvbnMpXG4gIGNvbnN0IHIgPSBvcHRpb25zLmxvb3NlID8gcmVbdC5DQVJFVExPT1NFXSA6IHJlW3QuQ0FSRVRdXG4gIGNvbnN0IHogPSBvcHRpb25zLmluY2x1ZGVQcmVyZWxlYXNlID8gJy0wJyA6ICcnXG4gIHJldHVybiBjb21wLnJlcGxhY2UociwgKF8sIE0sIG0sIHAsIHByKSA9PiB7XG4gICAgZGVidWcoJ2NhcmV0JywgY29tcCwgXywgTSwgbSwgcCwgcHIpXG4gICAgbGV0IHJldFxuXG4gICAgaWYgKGlzWChNKSkge1xuICAgICAgcmV0ID0gJydcbiAgICB9IGVsc2UgaWYgKGlzWChtKSkge1xuICAgICAgcmV0ID0gYD49JHtNfS4wLjAke3p9IDwkeytNICsgMX0uMC4wLTBgXG4gICAgfSBlbHNlIGlmIChpc1gocCkpIHtcbiAgICAgIGlmIChNID09PSAnMCcpIHtcbiAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LjAke3p9IDwke019LiR7K20gKyAxfS4wLTBgXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uMCR7en0gPCR7K00gKyAxfS4wLjAtMGBcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByKSB7XG4gICAgICBkZWJ1ZygncmVwbGFjZUNhcmV0IHByJywgcHIpXG4gICAgICBpZiAoTSA9PT0gJzAnKSB7XG4gICAgICAgIGlmIChtID09PSAnMCcpIHtcbiAgICAgICAgICByZXQgPSBgPj0ke019LiR7bX0uJHtwfS0ke3ByXG4gICAgICAgICAgfSA8JHtNfS4ke219LiR7K3AgKyAxfS0wYFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3B9LSR7cHJcbiAgICAgICAgICB9IDwke019LiR7K20gKyAxfS4wLTBgXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3B9LSR7cHJcbiAgICAgICAgfSA8JHsrTSArIDF9LjAuMC0wYFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Zygnbm8gcHInKVxuICAgICAgaWYgKE0gPT09ICcwJykge1xuICAgICAgICBpZiAobSA9PT0gJzAnKSB7XG4gICAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cFxuICAgICAgICAgIH0ke3p9IDwke019LiR7bX0uJHsrcCArIDF9LTBgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0ID0gYD49JHtNfS4ke219LiR7cFxuICAgICAgICAgIH0ke3p9IDwke019LiR7K20gKyAxfS4wLTBgXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IGA+PSR7TX0uJHttfS4ke3BcbiAgICAgICAgfSA8JHsrTSArIDF9LjAuMC0wYFxuICAgICAgfVxuICAgIH1cblxuICAgIGRlYnVnKCdjYXJldCByZXR1cm4nLCByZXQpXG4gICAgcmV0dXJuIHJldFxuICB9KVxufVxuXG5jb25zdCByZXBsYWNlWFJhbmdlcyA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGRlYnVnKCdyZXBsYWNlWFJhbmdlcycsIGNvbXAsIG9wdGlvbnMpXG4gIHJldHVybiBjb21wLnNwbGl0KC9cXHMrLykubWFwKChjb21wKSA9PiB7XG4gICAgcmV0dXJuIHJlcGxhY2VYUmFuZ2UoY29tcCwgb3B0aW9ucylcbiAgfSkuam9pbignICcpXG59XG5cbmNvbnN0IHJlcGxhY2VYUmFuZ2UgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBjb21wID0gY29tcC50cmltKClcbiAgY29uc3QgciA9IG9wdGlvbnMubG9vc2UgPyByZVt0LlhSQU5HRUxPT1NFXSA6IHJlW3QuWFJBTkdFXVxuICByZXR1cm4gY29tcC5yZXBsYWNlKHIsIChyZXQsIGd0bHQsIE0sIG0sIHAsIHByKSA9PiB7XG4gICAgZGVidWcoJ3hSYW5nZScsIGNvbXAsIHJldCwgZ3RsdCwgTSwgbSwgcCwgcHIpXG4gICAgY29uc3QgeE0gPSBpc1goTSlcbiAgICBjb25zdCB4bSA9IHhNIHx8IGlzWChtKVxuICAgIGNvbnN0IHhwID0geG0gfHwgaXNYKHApXG4gICAgY29uc3QgYW55WCA9IHhwXG5cbiAgICBpZiAoZ3RsdCA9PT0gJz0nICYmIGFueVgpIHtcbiAgICAgIGd0bHQgPSAnJ1xuICAgIH1cblxuICAgIC8vIGlmIHdlJ3JlIGluY2x1ZGluZyBwcmVyZWxlYXNlcyBpbiB0aGUgbWF0Y2gsIHRoZW4gd2UgbmVlZFxuICAgIC8vIHRvIGZpeCB0aGlzIHRvIC0wLCB0aGUgbG93ZXN0IHBvc3NpYmxlIHByZXJlbGVhc2UgdmFsdWVcbiAgICBwciA9IG9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UgPyAnLTAnIDogJydcblxuICAgIGlmICh4TSkge1xuICAgICAgaWYgKGd0bHQgPT09ICc+JyB8fCBndGx0ID09PSAnPCcpIHtcbiAgICAgICAgLy8gbm90aGluZyBpcyBhbGxvd2VkXG4gICAgICAgIHJldCA9ICc8MC4wLjAtMCdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vdGhpbmcgaXMgZm9yYmlkZGVuXG4gICAgICAgIHJldCA9ICcqJ1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ3RsdCAmJiBhbnlYKSB7XG4gICAgICAvLyB3ZSBrbm93IHBhdGNoIGlzIGFuIHgsIGJlY2F1c2Ugd2UgaGF2ZSBhbnkgeCBhdCBhbGwuXG4gICAgICAvLyByZXBsYWNlIFggd2l0aCAwXG4gICAgICBpZiAoeG0pIHtcbiAgICAgICAgbSA9IDBcbiAgICAgIH1cbiAgICAgIHAgPSAwXG5cbiAgICAgIGlmIChndGx0ID09PSAnPicpIHtcbiAgICAgICAgLy8gPjEgPT4gPj0yLjAuMFxuICAgICAgICAvLyA+MS4yID0+ID49MS4zLjBcbiAgICAgICAgZ3RsdCA9ICc+PSdcbiAgICAgICAgaWYgKHhtKSB7XG4gICAgICAgICAgTSA9ICtNICsgMVxuICAgICAgICAgIG0gPSAwXG4gICAgICAgICAgcCA9IDBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtID0gK20gKyAxXG4gICAgICAgICAgcCA9IDBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChndGx0ID09PSAnPD0nKSB7XG4gICAgICAgIC8vIDw9MC43LnggaXMgYWN0dWFsbHkgPDAuOC4wLCBzaW5jZSBhbnkgMC43Lnggc2hvdWxkXG4gICAgICAgIC8vIHBhc3MuICBTaW1pbGFybHksIDw9Ny54IGlzIGFjdHVhbGx5IDw4LjAuMCwgZXRjLlxuICAgICAgICBndGx0ID0gJzwnXG4gICAgICAgIGlmICh4bSkge1xuICAgICAgICAgIE0gPSArTSArIDFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtID0gK20gKyAxXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGd0bHQgPT09ICc8JylcbiAgICAgICAgcHIgPSAnLTAnXG5cbiAgICAgIHJldCA9IGAke2d0bHQgKyBNfS4ke219LiR7cH0ke3ByfWBcbiAgICB9IGVsc2UgaWYgKHhtKSB7XG4gICAgICByZXQgPSBgPj0ke019LjAuMCR7cHJ9IDwkeytNICsgMX0uMC4wLTBgXG4gICAgfSBlbHNlIGlmICh4cCkge1xuICAgICAgcmV0ID0gYD49JHtNfS4ke219LjAke3ByXG4gICAgICB9IDwke019LiR7K20gKyAxfS4wLTBgXG4gICAgfVxuXG4gICAgZGVidWcoJ3hSYW5nZSByZXR1cm4nLCByZXQpXG5cbiAgICByZXR1cm4gcmV0XG4gIH0pXG59XG5cbi8vIEJlY2F1c2UgKiBpcyBBTkQtZWQgd2l0aCBldmVyeXRoaW5nIGVsc2UgaW4gdGhlIGNvbXBhcmF0b3IsXG4vLyBhbmQgJycgbWVhbnMgXCJhbnkgdmVyc2lvblwiLCBqdXN0IHJlbW92ZSB0aGUgKnMgZW50aXJlbHkuXG5jb25zdCByZXBsYWNlU3RhcnMgPSAoY29tcCwgb3B0aW9ucykgPT4ge1xuICBkZWJ1ZygncmVwbGFjZVN0YXJzJywgY29tcCwgb3B0aW9ucylcbiAgLy8gTG9vc2VuZXNzIGlzIGlnbm9yZWQgaGVyZS4gIHN0YXIgaXMgYWx3YXlzIGFzIGxvb3NlIGFzIGl0IGdldHMhXG4gIHJldHVybiBjb21wLnRyaW0oKS5yZXBsYWNlKHJlW3QuU1RBUl0sICcnKVxufVxuXG5jb25zdCByZXBsYWNlR1RFMCA9IChjb21wLCBvcHRpb25zKSA9PiB7XG4gIGRlYnVnKCdyZXBsYWNlR1RFMCcsIGNvbXAsIG9wdGlvbnMpXG4gIHJldHVybiBjb21wLnRyaW0oKVxuICAgIC5yZXBsYWNlKHJlW29wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UgPyB0LkdURTBQUkUgOiB0LkdURTBdLCAnJylcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBwYXNzZWQgdG8gc3RyaW5nLnJlcGxhY2UocmVbdC5IWVBIRU5SQU5HRV0pXG4vLyBNLCBtLCBwYXRjaCwgcHJlcmVsZWFzZSwgYnVpbGRcbi8vIDEuMiAtIDMuNC41ID0+ID49MS4yLjAgPD0zLjQuNVxuLy8gMS4yLjMgLSAzLjQgPT4gPj0xLjIuMCA8My41LjAtMCBBbnkgMy40Lnggd2lsbCBkb1xuLy8gMS4yIC0gMy40ID0+ID49MS4yLjAgPDMuNS4wLTBcbmNvbnN0IGh5cGhlblJlcGxhY2UgPSBpbmNQciA9PiAoJDAsXG4gIGZyb20sIGZNLCBmbSwgZnAsIGZwciwgZmIsXG4gIHRvLCB0TSwgdG0sIHRwLCB0cHIsIHRiKSA9PiB7XG4gIGlmIChpc1goZk0pKSB7XG4gICAgZnJvbSA9ICcnXG4gIH0gZWxzZSBpZiAoaXNYKGZtKSkge1xuICAgIGZyb20gPSBgPj0ke2ZNfS4wLjAke2luY1ByID8gJy0wJyA6ICcnfWBcbiAgfSBlbHNlIGlmIChpc1goZnApKSB7XG4gICAgZnJvbSA9IGA+PSR7Zk19LiR7Zm19LjAke2luY1ByID8gJy0wJyA6ICcnfWBcbiAgfSBlbHNlIGlmIChmcHIpIHtcbiAgICBmcm9tID0gYD49JHtmcm9tfWBcbiAgfSBlbHNlIHtcbiAgICBmcm9tID0gYD49JHtmcm9tfSR7aW5jUHIgPyAnLTAnIDogJyd9YFxuICB9XG5cbiAgaWYgKGlzWCh0TSkpIHtcbiAgICB0byA9ICcnXG4gIH0gZWxzZSBpZiAoaXNYKHRtKSkge1xuICAgIHRvID0gYDwkeyt0TSArIDF9LjAuMC0wYFxuICB9IGVsc2UgaWYgKGlzWCh0cCkpIHtcbiAgICB0byA9IGA8JHt0TX0uJHsrdG0gKyAxfS4wLTBgXG4gIH0gZWxzZSBpZiAodHByKSB7XG4gICAgdG8gPSBgPD0ke3RNfS4ke3RtfS4ke3RwfS0ke3Rwcn1gXG4gIH0gZWxzZSBpZiAoaW5jUHIpIHtcbiAgICB0byA9IGA8JHt0TX0uJHt0bX0uJHsrdHAgKyAxfS0wYFxuICB9IGVsc2Uge1xuICAgIHRvID0gYDw9JHt0b31gXG4gIH1cblxuICByZXR1cm4gKGAke2Zyb219ICR7dG99YCkudHJpbSgpXG59XG5cbmNvbnN0IHRlc3RTZXQgPSAoc2V0LCB2ZXJzaW9uLCBvcHRpb25zKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFzZXRbaV0udGVzdCh2ZXJzaW9uKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgaWYgKHZlcnNpb24ucHJlcmVsZWFzZS5sZW5ndGggJiYgIW9wdGlvbnMuaW5jbHVkZVByZXJlbGVhc2UpIHtcbiAgICAvLyBGaW5kIHRoZSBzZXQgb2YgdmVyc2lvbnMgdGhhdCBhcmUgYWxsb3dlZCB0byBoYXZlIHByZXJlbGVhc2VzXG4gICAgLy8gRm9yIGV4YW1wbGUsIF4xLjIuMy1wci4xIGRlc3VnYXJzIHRvID49MS4yLjMtcHIuMSA8Mi4wLjBcbiAgICAvLyBUaGF0IHNob3VsZCBhbGxvdyBgMS4yLjMtcHIuMmAgdG8gcGFzcy5cbiAgICAvLyBIb3dldmVyLCBgMS4yLjQtYWxwaGEubm90cmVhZHlgIHNob3VsZCBOT1QgYmUgYWxsb3dlZCxcbiAgICAvLyBldmVuIHRob3VnaCBpdCdzIHdpdGhpbiB0aGUgcmFuZ2Ugc2V0IGJ5IHRoZSBjb21wYXJhdG9ycy5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykge1xuICAgICAgZGVidWcoc2V0W2ldLnNlbXZlcilcbiAgICAgIGlmIChzZXRbaV0uc2VtdmVyID09PSBDb21wYXJhdG9yLkFOWSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAoc2V0W2ldLnNlbXZlci5wcmVyZWxlYXNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgYWxsb3dlZCA9IHNldFtpXS5zZW12ZXJcbiAgICAgICAgaWYgKGFsbG93ZWQubWFqb3IgPT09IHZlcnNpb24ubWFqb3IgJiZcbiAgICAgICAgICAgIGFsbG93ZWQubWlub3IgPT09IHZlcnNpb24ubWlub3IgJiZcbiAgICAgICAgICAgIGFsbG93ZWQucGF0Y2ggPT09IHZlcnNpb24ucGF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmVyc2lvbiBoYXMgYSAtcHJlLCBidXQgaXQncyBub3Qgb25lIG9mIHRoZSBvbmVzIHdlIGxpa2UuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuIiwgImNvbnN0IEFOWSA9IFN5bWJvbCgnU2VtVmVyIEFOWScpXG4vLyBob2lzdGVkIGNsYXNzIGZvciBjeWNsaWMgZGVwZW5kZW5jeVxuY2xhc3MgQ29tcGFyYXRvciB7XG4gIHN0YXRpYyBnZXQgQU5ZICgpIHtcbiAgICByZXR1cm4gQU5ZXG4gIH1cbiAgY29uc3RydWN0b3IgKGNvbXAsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gcGFyc2VPcHRpb25zKG9wdGlvbnMpXG5cbiAgICBpZiAoY29tcCBpbnN0YW5jZW9mIENvbXBhcmF0b3IpIHtcbiAgICAgIGlmIChjb21wLmxvb3NlID09PSAhIW9wdGlvbnMubG9vc2UpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXAgPSBjb21wLnZhbHVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVidWcoJ2NvbXBhcmF0b3InLCBjb21wLCBvcHRpb25zKVxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgICB0aGlzLmxvb3NlID0gISFvcHRpb25zLmxvb3NlXG4gICAgdGhpcy5wYXJzZShjb21wKVxuXG4gICAgaWYgKHRoaXMuc2VtdmVyID09PSBBTlkpIHtcbiAgICAgIHRoaXMudmFsdWUgPSAnJ1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlID0gdGhpcy5vcGVyYXRvciArIHRoaXMuc2VtdmVyLnZlcnNpb25cbiAgICB9XG5cbiAgICBkZWJ1ZygnY29tcCcsIHRoaXMpXG4gIH1cblxuICBwYXJzZSAoY29tcCkge1xuICAgIGNvbnN0IHIgPSB0aGlzLm9wdGlvbnMubG9vc2UgPyByZVt0LkNPTVBBUkFUT1JMT09TRV0gOiByZVt0LkNPTVBBUkFUT1JdXG4gICAgY29uc3QgbSA9IGNvbXAubWF0Y2gocilcblxuICAgIGlmICghbSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBjb21wYXJhdG9yOiAke2NvbXB9YClcbiAgICB9XG5cbiAgICB0aGlzLm9wZXJhdG9yID0gbVsxXSAhPT0gdW5kZWZpbmVkID8gbVsxXSA6ICcnXG4gICAgaWYgKHRoaXMub3BlcmF0b3IgPT09ICc9Jykge1xuICAgICAgdGhpcy5vcGVyYXRvciA9ICcnXG4gICAgfVxuXG4gICAgLy8gaWYgaXQgbGl0ZXJhbGx5IGlzIGp1c3QgJz4nIG9yICcnIHRoZW4gYWxsb3cgYW55dGhpbmcuXG4gICAgaWYgKCFtWzJdKSB7XG4gICAgICB0aGlzLnNlbXZlciA9IEFOWVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbXZlciA9IG5ldyBTZW1WZXIobVsyXSwgdGhpcy5vcHRpb25zLmxvb3NlKVxuICAgIH1cbiAgfVxuXG4gIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZVxuICB9XG5cbiAgdGVzdCAodmVyc2lvbikge1xuICAgIGRlYnVnKCdDb21wYXJhdG9yLnRlc3QnLCB2ZXJzaW9uLCB0aGlzLm9wdGlvbnMubG9vc2UpXG5cbiAgICBpZiAodGhpcy5zZW12ZXIgPT09IEFOWSB8fCB2ZXJzaW9uID09PSBBTlkpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2ZXJzaW9uID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmVyc2lvbiA9IG5ldyBTZW1WZXIodmVyc2lvbiwgdGhpcy5vcHRpb25zKVxuICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNtcCh2ZXJzaW9uLCB0aGlzLm9wZXJhdG9yLCB0aGlzLnNlbXZlciwgdGhpcy5vcHRpb25zKVxuICB9XG5cbiAgaW50ZXJzZWN0cyAoY29tcCwgb3B0aW9ucykge1xuICAgIGlmICghKGNvbXAgaW5zdGFuY2VvZiBDb21wYXJhdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYSBDb21wYXJhdG9yIGlzIHJlcXVpcmVkJylcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBsb29zZTogISFvcHRpb25zLFxuICAgICAgICBpbmNsdWRlUHJlcmVsZWFzZTogZmFsc2VcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcGVyYXRvciA9PT0gJycpIHtcbiAgICAgIGlmICh0aGlzLnZhbHVlID09PSAnJykge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBSYW5nZShjb21wLnZhbHVlLCBvcHRpb25zKS50ZXN0KHRoaXMudmFsdWUpXG4gICAgfSBlbHNlIGlmIChjb21wLm9wZXJhdG9yID09PSAnJykge1xuICAgICAgaWYgKGNvbXAudmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFJhbmdlKHRoaXMudmFsdWUsIG9wdGlvbnMpLnRlc3QoY29tcC5zZW12ZXIpXG4gICAgfVxuXG4gICAgY29uc3Qgc2FtZURpcmVjdGlvbkluY3JlYXNpbmcgPVxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc+PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJz4nKSAmJlxuICAgICAgKGNvbXAub3BlcmF0b3IgPT09ICc+PScgfHwgY29tcC5vcGVyYXRvciA9PT0gJz4nKVxuICAgIGNvbnN0IHNhbWVEaXJlY3Rpb25EZWNyZWFzaW5nID1cbiAgICAgICh0aGlzLm9wZXJhdG9yID09PSAnPD0nIHx8IHRoaXMub3BlcmF0b3IgPT09ICc8JykgJiZcbiAgICAgIChjb21wLm9wZXJhdG9yID09PSAnPD0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8JylcbiAgICBjb25zdCBzYW1lU2VtVmVyID0gdGhpcy5zZW12ZXIudmVyc2lvbiA9PT0gY29tcC5zZW12ZXIudmVyc2lvblxuICAgIGNvbnN0IGRpZmZlcmVudERpcmVjdGlvbnNJbmNsdXNpdmUgPVxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc+PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJzw9JykgJiZcbiAgICAgIChjb21wLm9wZXJhdG9yID09PSAnPj0nIHx8IGNvbXAub3BlcmF0b3IgPT09ICc8PScpXG4gICAgY29uc3Qgb3Bwb3NpdGVEaXJlY3Rpb25zTGVzc1RoYW4gPVxuICAgICAgY21wKHRoaXMuc2VtdmVyLCAnPCcsIGNvbXAuc2VtdmVyLCBvcHRpb25zKSAmJlxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc+PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJz4nKSAmJlxuICAgICAgICAoY29tcC5vcGVyYXRvciA9PT0gJzw9JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPCcpXG4gICAgY29uc3Qgb3Bwb3NpdGVEaXJlY3Rpb25zR3JlYXRlclRoYW4gPVxuICAgICAgY21wKHRoaXMuc2VtdmVyLCAnPicsIGNvbXAuc2VtdmVyLCBvcHRpb25zKSAmJlxuICAgICAgKHRoaXMub3BlcmF0b3IgPT09ICc8PScgfHwgdGhpcy5vcGVyYXRvciA9PT0gJzwnKSAmJlxuICAgICAgICAoY29tcC5vcGVyYXRvciA9PT0gJz49JyB8fCBjb21wLm9wZXJhdG9yID09PSAnPicpXG5cbiAgICByZXR1cm4gKFxuICAgICAgc2FtZURpcmVjdGlvbkluY3JlYXNpbmcgfHxcbiAgICAgIHNhbWVEaXJlY3Rpb25EZWNyZWFzaW5nIHx8XG4gICAgICAoc2FtZVNlbVZlciAmJiBkaWZmZXJlbnREaXJlY3Rpb25zSW5jbHVzaXZlKSB8fFxuICAgICAgb3Bwb3NpdGVEaXJlY3Rpb25zTGVzc1RoYW4gfHxcbiAgICAgIG9wcG9zaXRlRGlyZWN0aW9uc0dyZWF0ZXJUaGFuXG4gICAgKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcGFyYXRvclxuXG5jb25zdCBwYXJzZU9wdGlvbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9wYXJzZS1vcHRpb25zJylcbmNvbnN0IHtyZSwgdH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9yZScpXG5jb25zdCBjbXAgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvY21wJylcbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvZGVidWcnKVxuY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi9zZW12ZXInKVxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuL3JhbmdlJylcbiIsICJjb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3Qgc2F0aXNmaWVzID0gKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIHRyeSB7XG4gICAgcmFuZ2UgPSBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpXG4gIH0gY2F0Y2ggKGVyKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHJhbmdlLnRlc3QodmVyc2lvbilcbn1cbm1vZHVsZS5leHBvcnRzID0gc2F0aXNmaWVzXG4iLCAiY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcblxuLy8gTW9zdGx5IGp1c3QgZm9yIHRlc3RpbmcgYW5kIGxlZ2FjeSBBUEkgcmVhc29uc1xuY29uc3QgdG9Db21wYXJhdG9ycyA9IChyYW5nZSwgb3B0aW9ucykgPT5cbiAgbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKS5zZXRcbiAgICAubWFwKGNvbXAgPT4gY29tcC5tYXAoYyA9PiBjLnZhbHVlKS5qb2luKCcgJykudHJpbSgpLnNwbGl0KCcgJykpXG5cbm1vZHVsZS5leHBvcnRzID0gdG9Db21wYXJhdG9yc1xuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5cbmNvbnN0IG1heFNhdGlzZnlpbmcgPSAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIGxldCBtYXggPSBudWxsXG4gIGxldCBtYXhTViA9IG51bGxcbiAgbGV0IHJhbmdlT2JqID0gbnVsbFxuICB0cnkge1xuICAgIHJhbmdlT2JqID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgdmVyc2lvbnMuZm9yRWFjaCgodikgPT4ge1xuICAgIGlmIChyYW5nZU9iai50ZXN0KHYpKSB7XG4gICAgICAvLyBzYXRpc2ZpZXModiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgICBpZiAoIW1heCB8fCBtYXhTVi5jb21wYXJlKHYpID09PSAtMSkge1xuICAgICAgICAvLyBjb21wYXJlKG1heCwgdiwgdHJ1ZSlcbiAgICAgICAgbWF4ID0gdlxuICAgICAgICBtYXhTViA9IG5ldyBTZW1WZXIobWF4LCBvcHRpb25zKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG1heFxufVxubW9kdWxlLmV4cG9ydHMgPSBtYXhTYXRpc2Z5aW5nXG4iLCAiY29uc3QgU2VtVmVyID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9zZW12ZXInKVxuY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IG1pblNhdGlzZnlpbmcgPSAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIGxldCBtaW4gPSBudWxsXG4gIGxldCBtaW5TViA9IG51bGxcbiAgbGV0IHJhbmdlT2JqID0gbnVsbFxuICB0cnkge1xuICAgIHJhbmdlT2JqID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgdmVyc2lvbnMuZm9yRWFjaCgodikgPT4ge1xuICAgIGlmIChyYW5nZU9iai50ZXN0KHYpKSB7XG4gICAgICAvLyBzYXRpc2ZpZXModiwgcmFuZ2UsIG9wdGlvbnMpXG4gICAgICBpZiAoIW1pbiB8fCBtaW5TVi5jb21wYXJlKHYpID09PSAxKSB7XG4gICAgICAgIC8vIGNvbXBhcmUobWluLCB2LCB0cnVlKVxuICAgICAgICBtaW4gPSB2XG4gICAgICAgIG1pblNWID0gbmV3IFNlbVZlcihtaW4sIG9wdGlvbnMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gbWluXG59XG5tb2R1bGUuZXhwb3J0cyA9IG1pblNhdGlzZnlpbmdcbiIsICJjb25zdCBTZW1WZXIgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3NlbXZlcicpXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3QgZ3QgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvZ3QnKVxuXG5jb25zdCBtaW5WZXJzaW9uID0gKHJhbmdlLCBsb29zZSkgPT4ge1xuICByYW5nZSA9IG5ldyBSYW5nZShyYW5nZSwgbG9vc2UpXG5cbiAgbGV0IG1pbnZlciA9IG5ldyBTZW1WZXIoJzAuMC4wJylcbiAgaWYgKHJhbmdlLnRlc3QobWludmVyKSkge1xuICAgIHJldHVybiBtaW52ZXJcbiAgfVxuXG4gIG1pbnZlciA9IG5ldyBTZW1WZXIoJzAuMC4wLTAnKVxuICBpZiAocmFuZ2UudGVzdChtaW52ZXIpKSB7XG4gICAgcmV0dXJuIG1pbnZlclxuICB9XG5cbiAgbWludmVyID0gbnVsbFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlLnNldC5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGNvbXBhcmF0b3JzID0gcmFuZ2Uuc2V0W2ldXG5cbiAgICBsZXQgc2V0TWluID0gbnVsbFxuICAgIGNvbXBhcmF0b3JzLmZvckVhY2goKGNvbXBhcmF0b3IpID0+IHtcbiAgICAgIC8vIENsb25lIHRvIGF2b2lkIG1hbmlwdWxhdGluZyB0aGUgY29tcGFyYXRvcidzIHNlbXZlciBvYmplY3QuXG4gICAgICBjb25zdCBjb21wdmVyID0gbmV3IFNlbVZlcihjb21wYXJhdG9yLnNlbXZlci52ZXJzaW9uKVxuICAgICAgc3dpdGNoIChjb21wYXJhdG9yLm9wZXJhdG9yKSB7XG4gICAgICAgIGNhc2UgJz4nOlxuICAgICAgICAgIGlmIChjb21wdmVyLnByZXJlbGVhc2UubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb21wdmVyLnBhdGNoKytcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcHZlci5wcmVyZWxlYXNlLnB1c2goMClcbiAgICAgICAgICB9XG4gICAgICAgICAgY29tcHZlci5yYXcgPSBjb21wdmVyLmZvcm1hdCgpXG4gICAgICAgICAgLyogZmFsbHRocm91Z2ggKi9cbiAgICAgICAgY2FzZSAnJzpcbiAgICAgICAgY2FzZSAnPj0nOlxuICAgICAgICAgIGlmICghc2V0TWluIHx8IGd0KGNvbXB2ZXIsIHNldE1pbikpIHtcbiAgICAgICAgICAgIHNldE1pbiA9IGNvbXB2ZXJcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhc2UgJzw9JzpcbiAgICAgICAgICAvKiBJZ25vcmUgbWF4aW11bSB2ZXJzaW9ucyAqL1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIG9wZXJhdGlvbjogJHtjb21wYXJhdG9yLm9wZXJhdG9yfWApXG4gICAgICB9XG4gICAgfSlcbiAgICBpZiAoc2V0TWluICYmICghbWludmVyIHx8IGd0KG1pbnZlciwgc2V0TWluKSkpXG4gICAgICBtaW52ZXIgPSBzZXRNaW5cbiAgfVxuXG4gIGlmIChtaW52ZXIgJiYgcmFuZ2UudGVzdChtaW52ZXIpKSB7XG4gICAgcmV0dXJuIG1pbnZlclxuICB9XG5cbiAgcmV0dXJuIG51bGxcbn1cbm1vZHVsZS5leHBvcnRzID0gbWluVmVyc2lvblxuIiwgImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZScpXG5jb25zdCB2YWxpZFJhbmdlID0gKHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gUmV0dXJuICcqJyBpbnN0ZWFkIG9mICcnIHNvIHRoYXQgdHJ1dGhpbmVzcyB3b3Jrcy5cbiAgICAvLyBUaGlzIHdpbGwgdGhyb3cgaWYgaXQncyBpbnZhbGlkIGFueXdheVxuICAgIHJldHVybiBuZXcgUmFuZ2UocmFuZ2UsIG9wdGlvbnMpLnJhbmdlIHx8ICcqJ1xuICB9IGNhdGNoIChlcikge1xuICAgIHJldHVybiBudWxsXG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gdmFsaWRSYW5nZVxuIiwgImNvbnN0IFNlbVZlciA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvc2VtdmVyJylcbmNvbnN0IENvbXBhcmF0b3IgPSByZXF1aXJlKCcuLi9jbGFzc2VzL2NvbXBhcmF0b3InKVxuY29uc3Qge0FOWX0gPSBDb21wYXJhdG9yXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoJy4uL2NsYXNzZXMvcmFuZ2UnKVxuY29uc3Qgc2F0aXNmaWVzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL3NhdGlzZmllcycpXG5jb25zdCBndCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9ndCcpXG5jb25zdCBsdCA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9sdCcpXG5jb25zdCBsdGUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbnMvbHRlJylcbmNvbnN0IGd0ZSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9ndGUnKVxuXG5jb25zdCBvdXRzaWRlID0gKHZlcnNpb24sIHJhbmdlLCBoaWxvLCBvcHRpb25zKSA9PiB7XG4gIHZlcnNpb24gPSBuZXcgU2VtVmVyKHZlcnNpb24sIG9wdGlvbnMpXG4gIHJhbmdlID0gbmV3IFJhbmdlKHJhbmdlLCBvcHRpb25zKVxuXG4gIGxldCBndGZuLCBsdGVmbiwgbHRmbiwgY29tcCwgZWNvbXBcbiAgc3dpdGNoIChoaWxvKSB7XG4gICAgY2FzZSAnPic6XG4gICAgICBndGZuID0gZ3RcbiAgICAgIGx0ZWZuID0gbHRlXG4gICAgICBsdGZuID0gbHRcbiAgICAgIGNvbXAgPSAnPidcbiAgICAgIGVjb21wID0gJz49J1xuICAgICAgYnJlYWtcbiAgICBjYXNlICc8JzpcbiAgICAgIGd0Zm4gPSBsdFxuICAgICAgbHRlZm4gPSBndGVcbiAgICAgIGx0Zm4gPSBndFxuICAgICAgY29tcCA9ICc8J1xuICAgICAgZWNvbXAgPSAnPD0nXG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNdXN0IHByb3ZpZGUgYSBoaWxvIHZhbCBvZiBcIjxcIiBvciBcIj5cIicpXG4gIH1cblxuICAvLyBJZiBpdCBzYXRpc2ZpZXMgdGhlIHJhbmdlIGl0IGlzIG5vdCBvdXRzaWRlXG4gIGlmIChzYXRpc2ZpZXModmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBGcm9tIG5vdyBvbiwgdmFyaWFibGUgdGVybXMgYXJlIGFzIGlmIHdlJ3JlIGluIFwiZ3RyXCIgbW9kZS5cbiAgLy8gYnV0IG5vdGUgdGhhdCBldmVyeXRoaW5nIGlzIGZsaXBwZWQgZm9yIHRoZSBcImx0clwiIGZ1bmN0aW9uLlxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2Uuc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgY29tcGFyYXRvcnMgPSByYW5nZS5zZXRbaV1cblxuICAgIGxldCBoaWdoID0gbnVsbFxuICAgIGxldCBsb3cgPSBudWxsXG5cbiAgICBjb21wYXJhdG9ycy5mb3JFYWNoKChjb21wYXJhdG9yKSA9PiB7XG4gICAgICBpZiAoY29tcGFyYXRvci5zZW12ZXIgPT09IEFOWSkge1xuICAgICAgICBjb21wYXJhdG9yID0gbmV3IENvbXBhcmF0b3IoJz49MC4wLjAnKVxuICAgICAgfVxuICAgICAgaGlnaCA9IGhpZ2ggfHwgY29tcGFyYXRvclxuICAgICAgbG93ID0gbG93IHx8IGNvbXBhcmF0b3JcbiAgICAgIGlmIChndGZuKGNvbXBhcmF0b3Iuc2VtdmVyLCBoaWdoLnNlbXZlciwgb3B0aW9ucykpIHtcbiAgICAgICAgaGlnaCA9IGNvbXBhcmF0b3JcbiAgICAgIH0gZWxzZSBpZiAobHRmbihjb21wYXJhdG9yLnNlbXZlciwgbG93LnNlbXZlciwgb3B0aW9ucykpIHtcbiAgICAgICAgbG93ID0gY29tcGFyYXRvclxuICAgICAgfVxuICAgIH0pXG5cbiAgICAvLyBJZiB0aGUgZWRnZSB2ZXJzaW9uIGNvbXBhcmF0b3IgaGFzIGEgb3BlcmF0b3IgdGhlbiBvdXIgdmVyc2lvblxuICAgIC8vIGlzbid0IG91dHNpZGUgaXRcbiAgICBpZiAoaGlnaC5vcGVyYXRvciA9PT0gY29tcCB8fCBoaWdoLm9wZXJhdG9yID09PSBlY29tcCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIGxvd2VzdCB2ZXJzaW9uIGNvbXBhcmF0b3IgaGFzIGFuIG9wZXJhdG9yIGFuZCBvdXIgdmVyc2lvblxuICAgIC8vIGlzIGxlc3MgdGhhbiBpdCB0aGVuIGl0IGlzbid0IGhpZ2hlciB0aGFuIHRoZSByYW5nZVxuICAgIGlmICgoIWxvdy5vcGVyYXRvciB8fCBsb3cub3BlcmF0b3IgPT09IGNvbXApICYmXG4gICAgICAgIGx0ZWZuKHZlcnNpb24sIGxvdy5zZW12ZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2UgaWYgKGxvdy5vcGVyYXRvciA9PT0gZWNvbXAgJiYgbHRmbih2ZXJzaW9uLCBsb3cuc2VtdmVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gb3V0c2lkZVxuIiwgIi8vIERldGVybWluZSBpZiB2ZXJzaW9uIGlzIGdyZWF0ZXIgdGhhbiBhbGwgdGhlIHZlcnNpb25zIHBvc3NpYmxlIGluIHRoZSByYW5nZS5cbmNvbnN0IG91dHNpZGUgPSByZXF1aXJlKCcuL291dHNpZGUnKVxuY29uc3QgZ3RyID0gKHZlcnNpb24sIHJhbmdlLCBvcHRpb25zKSA9PiBvdXRzaWRlKHZlcnNpb24sIHJhbmdlLCAnPicsIG9wdGlvbnMpXG5tb2R1bGUuZXhwb3J0cyA9IGd0clxuIiwgImNvbnN0IG91dHNpZGUgPSByZXF1aXJlKCcuL291dHNpZGUnKVxuLy8gRGV0ZXJtaW5lIGlmIHZlcnNpb24gaXMgbGVzcyB0aGFuIGFsbCB0aGUgdmVyc2lvbnMgcG9zc2libGUgaW4gdGhlIHJhbmdlXG5jb25zdCBsdHIgPSAodmVyc2lvbiwgcmFuZ2UsIG9wdGlvbnMpID0+IG91dHNpZGUodmVyc2lvbiwgcmFuZ2UsICc8Jywgb3B0aW9ucylcbm1vZHVsZS5leHBvcnRzID0gbHRyXG4iLCAiY29uc3QgUmFuZ2UgPSByZXF1aXJlKCcuLi9jbGFzc2VzL3JhbmdlJylcbmNvbnN0IGludGVyc2VjdHMgPSAocjEsIHIyLCBvcHRpb25zKSA9PiB7XG4gIHIxID0gbmV3IFJhbmdlKHIxLCBvcHRpb25zKVxuICByMiA9IG5ldyBSYW5nZShyMiwgb3B0aW9ucylcbiAgcmV0dXJuIHIxLmludGVyc2VjdHMocjIpXG59XG5tb2R1bGUuZXhwb3J0cyA9IGludGVyc2VjdHNcbiIsICIvLyBnaXZlbiBhIHNldCBvZiB2ZXJzaW9ucyBhbmQgYSByYW5nZSwgY3JlYXRlIGEgXCJzaW1wbGlmaWVkXCIgcmFuZ2Vcbi8vIHRoYXQgaW5jbHVkZXMgdGhlIHNhbWUgdmVyc2lvbnMgdGhhdCB0aGUgb3JpZ2luYWwgcmFuZ2UgZG9lc1xuLy8gSWYgdGhlIG9yaWdpbmFsIHJhbmdlIGlzIHNob3J0ZXIgdGhhbiB0aGUgc2ltcGxpZmllZCBvbmUsIHJldHVybiB0aGF0LlxuY29uc3Qgc2F0aXNmaWVzID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL3NhdGlzZmllcy5qcycpXG5jb25zdCBjb21wYXJlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb25zL2NvbXBhcmUuanMnKVxubW9kdWxlLmV4cG9ydHMgPSAodmVyc2lvbnMsIHJhbmdlLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHNldCA9IFtdXG4gIGxldCBtaW4gPSBudWxsXG4gIGxldCBwcmV2ID0gbnVsbFxuICBjb25zdCB2ID0gdmVyc2lvbnMuc29ydCgoYSwgYikgPT4gY29tcGFyZShhLCBiLCBvcHRpb25zKSlcbiAgZm9yIChjb25zdCB2ZXJzaW9uIG9mIHYpIHtcbiAgICBjb25zdCBpbmNsdWRlZCA9IHNhdGlzZmllcyh2ZXJzaW9uLCByYW5nZSwgb3B0aW9ucylcbiAgICBpZiAoaW5jbHVkZWQpIHtcbiAgICAgIHByZXYgPSB2ZXJzaW9uXG4gICAgICBpZiAoIW1pbilcbiAgICAgICAgbWluID0gdmVyc2lvblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJldikge1xuICAgICAgICBzZXQucHVzaChbbWluLCBwcmV2XSlcbiAgICAgIH1cbiAgICAgIHByZXYgPSBudWxsXG4gICAgICBtaW4gPSBudWxsXG4gICAgfVxuICB9XG4gIGlmIChtaW4pXG4gICAgc2V0LnB1c2goW21pbiwgbnVsbF0pXG5cbiAgY29uc3QgcmFuZ2VzID0gW11cbiAgZm9yIChjb25zdCBbbWluLCBtYXhdIG9mIHNldCkge1xuICAgIGlmIChtaW4gPT09IG1heClcbiAgICAgIHJhbmdlcy5wdXNoKG1pbilcbiAgICBlbHNlIGlmICghbWF4ICYmIG1pbiA9PT0gdlswXSlcbiAgICAgIHJhbmdlcy5wdXNoKCcqJylcbiAgICBlbHNlIGlmICghbWF4KVxuICAgICAgcmFuZ2VzLnB1c2goYD49JHttaW59YClcbiAgICBlbHNlIGlmIChtaW4gPT09IHZbMF0pXG4gICAgICByYW5nZXMucHVzaChgPD0ke21heH1gKVxuICAgIGVsc2VcbiAgICAgIHJhbmdlcy5wdXNoKGAke21pbn0gLSAke21heH1gKVxuICB9XG4gIGNvbnN0IHNpbXBsaWZpZWQgPSByYW5nZXMuam9pbignIHx8ICcpXG4gIGNvbnN0IG9yaWdpbmFsID0gdHlwZW9mIHJhbmdlLnJhdyA9PT0gJ3N0cmluZycgPyByYW5nZS5yYXcgOiBTdHJpbmcocmFuZ2UpXG4gIHJldHVybiBzaW1wbGlmaWVkLmxlbmd0aCA8IG9yaWdpbmFsLmxlbmd0aCA/IHNpbXBsaWZpZWQgOiByYW5nZVxufVxuIiwgImNvbnN0IFJhbmdlID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9yYW5nZS5qcycpXG5jb25zdCB7IEFOWSB9ID0gcmVxdWlyZSgnLi4vY2xhc3Nlcy9jb21wYXJhdG9yLmpzJylcbmNvbnN0IHNhdGlzZmllcyA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9zYXRpc2ZpZXMuanMnKVxuY29uc3QgY29tcGFyZSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9ucy9jb21wYXJlLmpzJylcblxuLy8gQ29tcGxleCByYW5nZSBgcjEgfHwgcjIgfHwgLi4uYCBpcyBhIHN1YnNldCBvZiBgUjEgfHwgUjIgfHwgLi4uYCBpZmY6XG4vLyAtIEV2ZXJ5IHNpbXBsZSByYW5nZSBgcjEsIHIyLCAuLi5gIGlzIGEgc3Vic2V0IG9mIHNvbWUgYFIxLCBSMiwgLi4uYFxuLy9cbi8vIFNpbXBsZSByYW5nZSBgYzEgYzIgLi4uYCBpcyBhIHN1YnNldCBvZiBzaW1wbGUgcmFuZ2UgYEMxIEMyIC4uLmAgaWZmOlxuLy8gLSBJZiBjIGlzIG9ubHkgdGhlIEFOWSBjb21wYXJhdG9yXG4vLyAgIC0gSWYgQyBpcyBvbmx5IHRoZSBBTlkgY29tcGFyYXRvciwgcmV0dXJuIHRydWVcbi8vICAgLSBFbHNlIHJldHVybiBmYWxzZVxuLy8gLSBMZXQgRVEgYmUgdGhlIHNldCBvZiA9IGNvbXBhcmF0b3JzIGluIGNcbi8vIC0gSWYgRVEgaXMgbW9yZSB0aGFuIG9uZSwgcmV0dXJuIHRydWUgKG51bGwgc2V0KVxuLy8gLSBMZXQgR1QgYmUgdGhlIGhpZ2hlc3QgPiBvciA+PSBjb21wYXJhdG9yIGluIGNcbi8vIC0gTGV0IExUIGJlIHRoZSBsb3dlc3QgPCBvciA8PSBjb21wYXJhdG9yIGluIGNcbi8vIC0gSWYgR1QgYW5kIExULCBhbmQgR1Quc2VtdmVyID4gTFQuc2VtdmVyLCByZXR1cm4gdHJ1ZSAobnVsbCBzZXQpXG4vLyAtIElmIEVRXG4vLyAgIC0gSWYgR1QsIGFuZCBFUSBkb2VzIG5vdCBzYXRpc2Z5IEdULCByZXR1cm4gdHJ1ZSAobnVsbCBzZXQpXG4vLyAgIC0gSWYgTFQsIGFuZCBFUSBkb2VzIG5vdCBzYXRpc2Z5IExULCByZXR1cm4gdHJ1ZSAobnVsbCBzZXQpXG4vLyAgIC0gSWYgRVEgc2F0aXNmaWVzIGV2ZXJ5IEMsIHJldHVybiB0cnVlXG4vLyAgIC0gRWxzZSByZXR1cm4gZmFsc2Vcbi8vIC0gSWYgR1Rcbi8vICAgLSBJZiBHVC5zZW12ZXIgaXMgbG93ZXIgdGhhbiBhbnkgPiBvciA+PSBjb21wIGluIEMsIHJldHVybiBmYWxzZVxuLy8gICAtIElmIEdUIGlzID49LCBhbmQgR1Quc2VtdmVyIGRvZXMgbm90IHNhdGlzZnkgZXZlcnkgQywgcmV0dXJuIGZhbHNlXG4vLyAtIElmIExUXG4vLyAgIC0gSWYgTFQuc2VtdmVyIGlzIGdyZWF0ZXIgdGhhbiBhbnkgPCBvciA8PSBjb21wIGluIEMsIHJldHVybiBmYWxzZVxuLy8gICAtIElmIExUIGlzIDw9LCBhbmQgTFQuc2VtdmVyIGRvZXMgbm90IHNhdGlzZnkgZXZlcnkgQywgcmV0dXJuIGZhbHNlXG4vLyAtIElmIGFueSBDIGlzIGEgPSByYW5nZSwgYW5kIEdUIG9yIExUIGFyZSBzZXQsIHJldHVybiBmYWxzZVxuLy8gLSBFbHNlIHJldHVybiB0cnVlXG5cbmNvbnN0IHN1YnNldCA9IChzdWIsIGRvbSwgb3B0aW9ucykgPT4ge1xuICBpZiAoc3ViID09PSBkb20pXG4gICAgcmV0dXJuIHRydWVcblxuICBzdWIgPSBuZXcgUmFuZ2Uoc3ViLCBvcHRpb25zKVxuICBkb20gPSBuZXcgUmFuZ2UoZG9tLCBvcHRpb25zKVxuICBsZXQgc2F3Tm9uTnVsbCA9IGZhbHNlXG5cbiAgT1VURVI6IGZvciAoY29uc3Qgc2ltcGxlU3ViIG9mIHN1Yi5zZXQpIHtcbiAgICBmb3IgKGNvbnN0IHNpbXBsZURvbSBvZiBkb20uc2V0KSB7XG4gICAgICBjb25zdCBpc1N1YiA9IHNpbXBsZVN1YnNldChzaW1wbGVTdWIsIHNpbXBsZURvbSwgb3B0aW9ucylcbiAgICAgIHNhd05vbk51bGwgPSBzYXdOb25OdWxsIHx8IGlzU3ViICE9PSBudWxsXG4gICAgICBpZiAoaXNTdWIpXG4gICAgICAgIGNvbnRpbnVlIE9VVEVSXG4gICAgfVxuICAgIC8vIHRoZSBudWxsIHNldCBpcyBhIHN1YnNldCBvZiBldmVyeXRoaW5nLCBidXQgbnVsbCBzaW1wbGUgcmFuZ2VzIGluXG4gICAgLy8gYSBjb21wbGV4IHJhbmdlIHNob3VsZCBiZSBpZ25vcmVkLiAgc28gaWYgd2Ugc2F3IGEgbm9uLW51bGwgcmFuZ2UsXG4gICAgLy8gdGhlbiB3ZSBrbm93IHRoaXMgaXNuJ3QgYSBzdWJzZXQsIGJ1dCBpZiBFVkVSWSBzaW1wbGUgcmFuZ2Ugd2FzIG51bGwsXG4gICAgLy8gdGhlbiBpdCBpcyBhIHN1YnNldC5cbiAgICBpZiAoc2F3Tm9uTnVsbClcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmNvbnN0IHNpbXBsZVN1YnNldCA9IChzdWIsIGRvbSwgb3B0aW9ucykgPT4ge1xuICBpZiAoc3ViID09PSBkb20pXG4gICAgcmV0dXJuIHRydWVcblxuICBpZiAoc3ViLmxlbmd0aCA9PT0gMSAmJiBzdWJbMF0uc2VtdmVyID09PSBBTlkpXG4gICAgcmV0dXJuIGRvbS5sZW5ndGggPT09IDEgJiYgZG9tWzBdLnNlbXZlciA9PT0gQU5ZXG5cbiAgY29uc3QgZXFTZXQgPSBuZXcgU2V0KClcbiAgbGV0IGd0LCBsdFxuICBmb3IgKGNvbnN0IGMgb2Ygc3ViKSB7XG4gICAgaWYgKGMub3BlcmF0b3IgPT09ICc+JyB8fCBjLm9wZXJhdG9yID09PSAnPj0nKVxuICAgICAgZ3QgPSBoaWdoZXJHVChndCwgYywgb3B0aW9ucylcbiAgICBlbHNlIGlmIChjLm9wZXJhdG9yID09PSAnPCcgfHwgYy5vcGVyYXRvciA9PT0gJzw9JylcbiAgICAgIGx0ID0gbG93ZXJMVChsdCwgYywgb3B0aW9ucylcbiAgICBlbHNlXG4gICAgICBlcVNldC5hZGQoYy5zZW12ZXIpXG4gIH1cblxuICBpZiAoZXFTZXQuc2l6ZSA+IDEpXG4gICAgcmV0dXJuIG51bGxcblxuICBsZXQgZ3RsdENvbXBcbiAgaWYgKGd0ICYmIGx0KSB7XG4gICAgZ3RsdENvbXAgPSBjb21wYXJlKGd0LnNlbXZlciwgbHQuc2VtdmVyLCBvcHRpb25zKVxuICAgIGlmIChndGx0Q29tcCA+IDApXG4gICAgICByZXR1cm4gbnVsbFxuICAgIGVsc2UgaWYgKGd0bHRDb21wID09PSAwICYmIChndC5vcGVyYXRvciAhPT0gJz49JyB8fCBsdC5vcGVyYXRvciAhPT0gJzw9JykpXG4gICAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLy8gd2lsbCBpdGVyYXRlIG9uZSBvciB6ZXJvIHRpbWVzXG4gIGZvciAoY29uc3QgZXEgb2YgZXFTZXQpIHtcbiAgICBpZiAoZ3QgJiYgIXNhdGlzZmllcyhlcSwgU3RyaW5nKGd0KSwgb3B0aW9ucykpXG4gICAgICByZXR1cm4gbnVsbFxuXG4gICAgaWYgKGx0ICYmICFzYXRpc2ZpZXMoZXEsIFN0cmluZyhsdCksIG9wdGlvbnMpKVxuICAgICAgcmV0dXJuIG51bGxcblxuICAgIGZvciAoY29uc3QgYyBvZiBkb20pIHtcbiAgICAgIGlmICghc2F0aXNmaWVzKGVxLCBTdHJpbmcoYyksIG9wdGlvbnMpKVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgbGV0IGhpZ2hlciwgbG93ZXJcbiAgbGV0IGhhc0RvbUxULCBoYXNEb21HVFxuICBmb3IgKGNvbnN0IGMgb2YgZG9tKSB7XG4gICAgaGFzRG9tR1QgPSBoYXNEb21HVCB8fCBjLm9wZXJhdG9yID09PSAnPicgfHwgYy5vcGVyYXRvciA9PT0gJz49J1xuICAgIGhhc0RvbUxUID0gaGFzRG9tTFQgfHwgYy5vcGVyYXRvciA9PT0gJzwnIHx8IGMub3BlcmF0b3IgPT09ICc8PSdcbiAgICBpZiAoZ3QpIHtcbiAgICAgIGlmIChjLm9wZXJhdG9yID09PSAnPicgfHwgYy5vcGVyYXRvciA9PT0gJz49Jykge1xuICAgICAgICBoaWdoZXIgPSBoaWdoZXJHVChndCwgYywgb3B0aW9ucylcbiAgICAgICAgaWYgKGhpZ2hlciA9PT0gYyAmJiBoaWdoZXIgIT09IGd0KVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSBlbHNlIGlmIChndC5vcGVyYXRvciA9PT0gJz49JyAmJiAhc2F0aXNmaWVzKGd0LnNlbXZlciwgU3RyaW5nKGMpLCBvcHRpb25zKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChsdCkge1xuICAgICAgaWYgKGMub3BlcmF0b3IgPT09ICc8JyB8fCBjLm9wZXJhdG9yID09PSAnPD0nKSB7XG4gICAgICAgIGxvd2VyID0gbG93ZXJMVChsdCwgYywgb3B0aW9ucylcbiAgICAgICAgaWYgKGxvd2VyID09PSBjICYmIGxvd2VyICE9PSBsdClcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH0gZWxzZSBpZiAobHQub3BlcmF0b3IgPT09ICc8PScgJiYgIXNhdGlzZmllcyhsdC5zZW12ZXIsIFN0cmluZyhjKSwgb3B0aW9ucykpXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAoIWMub3BlcmF0b3IgJiYgKGx0IHx8IGd0KSAmJiBndGx0Q29tcCAhPT0gMClcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gaWYgdGhlcmUgd2FzIGEgPCBvciA+LCBhbmQgbm90aGluZyBpbiB0aGUgZG9tLCB0aGVuIG11c3QgYmUgZmFsc2VcbiAgLy8gVU5MRVNTIGl0IHdhcyBsaW1pdGVkIGJ5IGFub3RoZXIgcmFuZ2UgaW4gdGhlIG90aGVyIGRpcmVjdGlvbi5cbiAgLy8gRWcsID4xLjAuMCA8MS4wLjEgaXMgc3RpbGwgYSBzdWJzZXQgb2YgPDIuMC4wXG4gIGlmIChndCAmJiBoYXNEb21MVCAmJiAhbHQgJiYgZ3RsdENvbXAgIT09IDApXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgaWYgKGx0ICYmIGhhc0RvbUdUICYmICFndCAmJiBndGx0Q29tcCAhPT0gMClcbiAgICByZXR1cm4gZmFsc2VcblxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyA+PTEuMi4zIGlzIGxvd2VyIHRoYW4gPjEuMi4zXG5jb25zdCBoaWdoZXJHVCA9IChhLCBiLCBvcHRpb25zKSA9PiB7XG4gIGlmICghYSlcbiAgICByZXR1cm4gYlxuICBjb25zdCBjb21wID0gY29tcGFyZShhLnNlbXZlciwgYi5zZW12ZXIsIG9wdGlvbnMpXG4gIHJldHVybiBjb21wID4gMCA/IGFcbiAgICA6IGNvbXAgPCAwID8gYlxuICAgIDogYi5vcGVyYXRvciA9PT0gJz4nICYmIGEub3BlcmF0b3IgPT09ICc+PScgPyBiXG4gICAgOiBhXG59XG5cbi8vIDw9MS4yLjMgaXMgaGlnaGVyIHRoYW4gPDEuMi4zXG5jb25zdCBsb3dlckxUID0gKGEsIGIsIG9wdGlvbnMpID0+IHtcbiAgaWYgKCFhKVxuICAgIHJldHVybiBiXG4gIGNvbnN0IGNvbXAgPSBjb21wYXJlKGEuc2VtdmVyLCBiLnNlbXZlciwgb3B0aW9ucylcbiAgcmV0dXJuIGNvbXAgPCAwID8gYVxuICAgIDogY29tcCA+IDAgPyBiXG4gICAgOiBiLm9wZXJhdG9yID09PSAnPCcgJiYgYS5vcGVyYXRvciA9PT0gJzw9JyA/IGJcbiAgICA6IGFcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdWJzZXRcbiIsICIvLyBqdXN0IHByZS1sb2FkIGFsbCB0aGUgc3R1ZmYgdGhhdCBpbmRleC5qcyBsYXppbHkgZXhwb3J0c1xuY29uc3QgaW50ZXJuYWxSZSA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvcmUnKVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlOiBpbnRlcm5hbFJlLnJlLFxuICBzcmM6IGludGVybmFsUmUuc3JjLFxuICB0b2tlbnM6IGludGVybmFsUmUudCxcbiAgU0VNVkVSX1NQRUNfVkVSU0lPTjogcmVxdWlyZSgnLi9pbnRlcm5hbC9jb25zdGFudHMnKS5TRU1WRVJfU1BFQ19WRVJTSU9OLFxuICBTZW1WZXI6IHJlcXVpcmUoJy4vY2xhc3Nlcy9zZW12ZXInKSxcbiAgY29tcGFyZUlkZW50aWZpZXJzOiByZXF1aXJlKCcuL2ludGVybmFsL2lkZW50aWZpZXJzJykuY29tcGFyZUlkZW50aWZpZXJzLFxuICByY29tcGFyZUlkZW50aWZpZXJzOiByZXF1aXJlKCcuL2ludGVybmFsL2lkZW50aWZpZXJzJykucmNvbXBhcmVJZGVudGlmaWVycyxcbiAgcGFyc2U6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3BhcnNlJyksXG4gIHZhbGlkOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy92YWxpZCcpLFxuICBjbGVhbjogcmVxdWlyZSgnLi9mdW5jdGlvbnMvY2xlYW4nKSxcbiAgaW5jOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9pbmMnKSxcbiAgZGlmZjogcmVxdWlyZSgnLi9mdW5jdGlvbnMvZGlmZicpLFxuICBtYWpvcjogcmVxdWlyZSgnLi9mdW5jdGlvbnMvbWFqb3InKSxcbiAgbWlub3I6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL21pbm9yJyksXG4gIHBhdGNoOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9wYXRjaCcpLFxuICBwcmVyZWxlYXNlOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9wcmVyZWxlYXNlJyksXG4gIGNvbXBhcmU6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvbXBhcmUnKSxcbiAgcmNvbXBhcmU6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3Jjb21wYXJlJyksXG4gIGNvbXBhcmVMb29zZTogcmVxdWlyZSgnLi9mdW5jdGlvbnMvY29tcGFyZS1sb29zZScpLFxuICBjb21wYXJlQnVpbGQ6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2NvbXBhcmUtYnVpbGQnKSxcbiAgc29ydDogcmVxdWlyZSgnLi9mdW5jdGlvbnMvc29ydCcpLFxuICByc29ydDogcmVxdWlyZSgnLi9mdW5jdGlvbnMvcnNvcnQnKSxcbiAgZ3Q6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL2d0JyksXG4gIGx0OiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9sdCcpLFxuICBlcTogcmVxdWlyZSgnLi9mdW5jdGlvbnMvZXEnKSxcbiAgbmVxOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9uZXEnKSxcbiAgZ3RlOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9ndGUnKSxcbiAgbHRlOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9sdGUnKSxcbiAgY21wOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jbXAnKSxcbiAgY29lcmNlOiByZXF1aXJlKCcuL2Z1bmN0aW9ucy9jb2VyY2UnKSxcbiAgQ29tcGFyYXRvcjogcmVxdWlyZSgnLi9jbGFzc2VzL2NvbXBhcmF0b3InKSxcbiAgUmFuZ2U6IHJlcXVpcmUoJy4vY2xhc3Nlcy9yYW5nZScpLFxuICBzYXRpc2ZpZXM6IHJlcXVpcmUoJy4vZnVuY3Rpb25zL3NhdGlzZmllcycpLFxuICB0b0NvbXBhcmF0b3JzOiByZXF1aXJlKCcuL3Jhbmdlcy90by1jb21wYXJhdG9ycycpLFxuICBtYXhTYXRpc2Z5aW5nOiByZXF1aXJlKCcuL3Jhbmdlcy9tYXgtc2F0aXNmeWluZycpLFxuICBtaW5TYXRpc2Z5aW5nOiByZXF1aXJlKCcuL3Jhbmdlcy9taW4tc2F0aXNmeWluZycpLFxuICBtaW5WZXJzaW9uOiByZXF1aXJlKCcuL3Jhbmdlcy9taW4tdmVyc2lvbicpLFxuICB2YWxpZFJhbmdlOiByZXF1aXJlKCcuL3Jhbmdlcy92YWxpZCcpLFxuICBvdXRzaWRlOiByZXF1aXJlKCcuL3Jhbmdlcy9vdXRzaWRlJyksXG4gIGd0cjogcmVxdWlyZSgnLi9yYW5nZXMvZ3RyJyksXG4gIGx0cjogcmVxdWlyZSgnLi9yYW5nZXMvbHRyJyksXG4gIGludGVyc2VjdHM6IHJlcXVpcmUoJy4vcmFuZ2VzL2ludGVyc2VjdHMnKSxcbiAgc2ltcGxpZnlSYW5nZTogcmVxdWlyZSgnLi9yYW5nZXMvc2ltcGxpZnknKSxcbiAgc3Vic2V0OiByZXF1aXJlKCcuL3Jhbmdlcy9zdWJzZXQnKSxcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRG9jdHlwZSA9IGV4cG9ydHMuQ0RBVEEgPSBleHBvcnRzLlRhZyA9IGV4cG9ydHMuU3R5bGUgPSBleHBvcnRzLlNjcmlwdCA9IGV4cG9ydHMuQ29tbWVudCA9IGV4cG9ydHMuRGlyZWN0aXZlID0gZXhwb3J0cy5UZXh0ID0gZXhwb3J0cy5Sb290ID0gZXhwb3J0cy5pc1RhZyA9IHZvaWQgMDtcbi8qKlxuICogVGVzdHMgd2hldGhlciBhbiBlbGVtZW50IGlzIGEgdGFnIG9yIG5vdC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIHRlc3RcbiAqL1xuZnVuY3Rpb24gaXNUYWcoZWxlbSkge1xuICAgIHJldHVybiAoZWxlbS50eXBlID09PSBcInRhZ1wiIC8qIFRhZyAqLyB8fFxuICAgICAgICBlbGVtLnR5cGUgPT09IFwic2NyaXB0XCIgLyogU2NyaXB0ICovIHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gXCJzdHlsZVwiIC8qIFN0eWxlICovKTtcbn1cbmV4cG9ydHMuaXNUYWcgPSBpc1RhZztcbi8vIEV4cG9ydHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4vKiogVHlwZSBmb3IgdGhlIHJvb3QgZWxlbWVudCBvZiBhIGRvY3VtZW50ICovXG5leHBvcnRzLlJvb3QgPSBcInJvb3RcIiAvKiBSb290ICovO1xuLyoqIFR5cGUgZm9yIFRleHQgKi9cbmV4cG9ydHMuVGV4dCA9IFwidGV4dFwiIC8qIFRleHQgKi87XG4vKiogVHlwZSBmb3IgPD8gLi4uID8+ICovXG5leHBvcnRzLkRpcmVjdGl2ZSA9IFwiZGlyZWN0aXZlXCIgLyogRGlyZWN0aXZlICovO1xuLyoqIFR5cGUgZm9yIDwhLS0gLi4uIC0tPiAqL1xuZXhwb3J0cy5Db21tZW50ID0gXCJjb21tZW50XCIgLyogQ29tbWVudCAqLztcbi8qKiBUeXBlIGZvciA8c2NyaXB0PiB0YWdzICovXG5leHBvcnRzLlNjcmlwdCA9IFwic2NyaXB0XCIgLyogU2NyaXB0ICovO1xuLyoqIFR5cGUgZm9yIDxzdHlsZT4gdGFncyAqL1xuZXhwb3J0cy5TdHlsZSA9IFwic3R5bGVcIiAvKiBTdHlsZSAqLztcbi8qKiBUeXBlIGZvciBBbnkgdGFnICovXG5leHBvcnRzLlRhZyA9IFwidGFnXCIgLyogVGFnICovO1xuLyoqIFR5cGUgZm9yIDwhW0NEQVRBWyAuLi4gXV0+ICovXG5leHBvcnRzLkNEQVRBID0gXCJjZGF0YVwiIC8qIENEQVRBICovO1xuLyoqIFR5cGUgZm9yIDwhZG9jdHlwZSAuLi4+ICovXG5leHBvcnRzLkRvY3R5cGUgPSBcImRvY3R5cGVcIiAvKiBEb2N0eXBlICovO1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGRlY29kZV9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy9kZWNvZGUuanNvblwiKSk7XG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvaGUvYmxvYi9tYXN0ZXIvc3JjL2hlLmpzI0w5NC1MMTE5XG52YXIgZnJvbUNvZGVQb2ludCA9IFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cblN0cmluZy5mcm9tQ29kZVBvaW50IHx8XG4gICAgZnVuY3Rpb24gKGNvZGVQb2ludCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4ZmZmZikge1xuICAgICAgICAgICAgY29kZVBvaW50IC09IDB4MTAwMDA7XG4gICAgICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+Pj4gMTApICYgMHgzZmYpIHwgMHhkODAwKTtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IDB4ZGMwMCB8IChjb2RlUG9pbnQgJiAweDNmZik7XG4gICAgICAgIH1cbiAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50KGNvZGVQb2ludCkge1xuICAgIGlmICgoY29kZVBvaW50ID49IDB4ZDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhkZmZmKSB8fCBjb2RlUG9pbnQgPiAweDEwZmZmZikge1xuICAgICAgICByZXR1cm4gXCJcXHVGRkZEXCI7XG4gICAgfVxuICAgIGlmIChjb2RlUG9pbnQgaW4gZGVjb2RlX2pzb25fMS5kZWZhdWx0KSB7XG4gICAgICAgIGNvZGVQb2ludCA9IGRlY29kZV9qc29uXzEuZGVmYXVsdFtjb2RlUG9pbnRdO1xuICAgIH1cbiAgICByZXR1cm4gZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVjb2RlQ29kZVBvaW50O1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVIVE1MID0gZXhwb3J0cy5kZWNvZGVIVE1MU3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVYTUwgPSB2b2lkIDA7XG52YXIgZW50aXRpZXNfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZW50aXRpZXMuanNvblwiKSk7XG52YXIgbGVnYWN5X2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL2xlZ2FjeS5qc29uXCIpKTtcbnZhciB4bWxfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMveG1sLmpzb25cIikpO1xudmFyIGRlY29kZV9jb2RlcG9pbnRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9kZWNvZGVfY29kZXBvaW50XCIpKTtcbnZhciBzdHJpY3RFbnRpdHlSZSA9IC8mKD86W2EtekEtWjAtOV0rfCNbeFhdW1xcZGEtZkEtRl0rfCNcXGQrKTsvZztcbmV4cG9ydHMuZGVjb2RlWE1MID0gZ2V0U3RyaWN0RGVjb2Rlcih4bWxfanNvbl8xLmRlZmF1bHQpO1xuZXhwb3J0cy5kZWNvZGVIVE1MU3RyaWN0ID0gZ2V0U3RyaWN0RGVjb2RlcihlbnRpdGllc19qc29uXzEuZGVmYXVsdCk7XG5mdW5jdGlvbiBnZXRTdHJpY3REZWNvZGVyKG1hcCkge1xuICAgIHZhciByZXBsYWNlID0gZ2V0UmVwbGFjZXIobWFwKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZShzdHJpY3RFbnRpdHlSZSwgcmVwbGFjZSk7IH07XG59XG52YXIgc29ydGVyID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChhIDwgYiA/IDEgOiAtMSk7IH07XG5leHBvcnRzLmRlY29kZUhUTUwgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBsZWdhY3kgPSBPYmplY3Qua2V5cyhsZWdhY3lfanNvbl8xLmRlZmF1bHQpLnNvcnQoc29ydGVyKTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KS5zb3J0KHNvcnRlcik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobGVnYWN5W2pdID09PSBrZXlzW2ldKSB7XG4gICAgICAgICAgICBrZXlzW2ldICs9IFwiOz9cIjtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGtleXNbaV0gKz0gXCI7XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIiYoPzpcIiArIGtleXMuam9pbihcInxcIikgKyBcInwjW3hYXVtcXFxcZGEtZkEtRl0rOz98I1xcXFxkKzs/KVwiLCBcImdcIik7XG4gICAgdmFyIHJlcGxhY2UgPSBnZXRSZXBsYWNlcihlbnRpdGllc19qc29uXzEuZGVmYXVsdCk7XG4gICAgZnVuY3Rpb24gcmVwbGFjZXIoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuc3Vic3RyKC0xKSAhPT0gXCI7XCIpXG4gICAgICAgICAgICBzdHIgKz0gXCI7XCI7XG4gICAgICAgIHJldHVybiByZXBsYWNlKHN0cik7XG4gICAgfVxuICAgIC8vIFRPRE8gY29uc2lkZXIgY3JlYXRpbmcgYSBtZXJnZWQgbWFwXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIFN0cmluZyhzdHIpLnJlcGxhY2UocmUsIHJlcGxhY2VyKTsgfTtcbn0pKCk7XG5mdW5jdGlvbiBnZXRSZXBsYWNlcihtYXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoMSkgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICB2YXIgc2Vjb25kQ2hhciA9IHN0ci5jaGFyQXQoMik7XG4gICAgICAgICAgICBpZiAoc2Vjb25kQ2hhciA9PT0gXCJYXCIgfHwgc2Vjb25kQ2hhciA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlX2NvZGVwb2ludF8xLmRlZmF1bHQocGFyc2VJbnQoc3RyLnN1YnN0cigzKSwgMTYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVfY29kZXBvaW50XzEuZGVmYXVsdChwYXJzZUludChzdHIuc3Vic3RyKDIpLCAxMCkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbGVzY2luZ1xuICAgICAgICByZXR1cm4gbWFwW3N0ci5zbGljZSgxLCAtMSldIHx8IHN0cjtcbiAgICB9O1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lc2NhcGVVVEY4ID0gZXhwb3J0cy5lc2NhcGUgPSBleHBvcnRzLmVuY29kZU5vbkFzY2lpSFRNTCA9IGV4cG9ydHMuZW5jb2RlSFRNTCA9IGV4cG9ydHMuZW5jb2RlWE1MID0gdm9pZCAwO1xudmFyIHhtbF9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy94bWwuanNvblwiKSk7XG52YXIgaW52ZXJzZVhNTCA9IGdldEludmVyc2VPYmooeG1sX2pzb25fMS5kZWZhdWx0KTtcbnZhciB4bWxSZXBsYWNlciA9IGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlWE1MKTtcbi8qKlxuICogRW5jb2RlcyBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGFzIHdlbGwgYXMgY2hhcmFjdGVycyBub3QgdmFsaWQgaW4gWE1MXG4gKiBkb2N1bWVudHMgdXNpbmcgWE1MIGVudGl0aWVzLlxuICpcbiAqIElmIGEgY2hhcmFjdGVyIGhhcyBubyBlcXVpdmFsZW50IGVudGl0eSwgYVxuICogbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2UgKGVnLiBgJiN4ZmM7YCkgd2lsbCBiZSB1c2VkLlxuICovXG5leHBvcnRzLmVuY29kZVhNTCA9IGdldEFTQ0lJRW5jb2RlcihpbnZlcnNlWE1MKTtcbnZhciBlbnRpdGllc19qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy9lbnRpdGllcy5qc29uXCIpKTtcbnZhciBpbnZlcnNlSFRNTCA9IGdldEludmVyc2VPYmooZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpO1xudmFyIGh0bWxSZXBsYWNlciA9IGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlSFRNTCk7XG4vKipcbiAqIEVuY29kZXMgYWxsIGVudGl0aWVzIGFuZCBub24tQVNDSUkgY2hhcmFjdGVycyBpbiB0aGUgaW5wdXQuXG4gKlxuICogVGhpcyBpbmNsdWRlcyBjaGFyYWN0ZXJzIHRoYXQgYXJlIHZhbGlkIEFTQ0lJIGNoYXJhY3RlcnMgaW4gSFRNTCBkb2N1bWVudHMuXG4gKiBGb3IgZXhhbXBsZSBgI2Agd2lsbCBiZSBlbmNvZGVkIGFzIGAmbnVtO2AuIFRvIGdldCBhIG1vcmUgY29tcGFjdCBvdXRwdXQsXG4gKiBjb25zaWRlciB1c2luZyB0aGUgYGVuY29kZU5vbkFzY2lpSFRNTGAgZnVuY3Rpb24uXG4gKlxuICogSWYgYSBjaGFyYWN0ZXIgaGFzIG5vIGVxdWl2YWxlbnQgZW50aXR5LCBhXG4gKiBudW1lcmljIGhleGFkZWNpbWFsIHJlZmVyZW5jZSAoZWcuIGAmI3hmYztgKSB3aWxsIGJlIHVzZWQuXG4gKi9cbmV4cG9ydHMuZW5jb2RlSFRNTCA9IGdldEludmVyc2UoaW52ZXJzZUhUTUwsIGh0bWxSZXBsYWNlcik7XG4vKipcbiAqIEVuY29kZXMgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBhcyB3ZWxsIGFzIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIEhUTUxcbiAqIGRvY3VtZW50cyB1c2luZyBIVE1MIGVudGl0aWVzLlxuICpcbiAqIElmIGEgY2hhcmFjdGVyIGhhcyBubyBlcXVpdmFsZW50IGVudGl0eSwgYVxuICogbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2UgKGVnLiBgJiN4ZmM7YCkgd2lsbCBiZSB1c2VkLlxuICovXG5leHBvcnRzLmVuY29kZU5vbkFzY2lpSFRNTCA9IGdldEFTQ0lJRW5jb2RlcihpbnZlcnNlSFRNTCk7XG5mdW5jdGlvbiBnZXRJbnZlcnNlT2JqKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoaW52ZXJzZSwgbmFtZSkge1xuICAgICAgICBpbnZlcnNlW29ialtuYW1lXV0gPSBcIiZcIiArIG5hbWUgKyBcIjtcIjtcbiAgICAgICAgcmV0dXJuIGludmVyc2U7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gZ2V0SW52ZXJzZVJlcGxhY2VyKGludmVyc2UpIHtcbiAgICB2YXIgc2luZ2xlID0gW107XG4gICAgdmFyIG11bHRpcGxlID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKGludmVyc2UpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgayA9IF9hW19pXTtcbiAgICAgICAgaWYgKGsubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAvLyBBZGQgdmFsdWUgdG8gc2luZ2xlIGFycmF5XG4gICAgICAgICAgICBzaW5nbGUucHVzaChcIlxcXFxcIiArIGspO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQWRkIHZhbHVlIHRvIG11bHRpcGxlIGFycmF5XG4gICAgICAgICAgICBtdWx0aXBsZS5wdXNoKGspO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFkZCByYW5nZXMgdG8gc2luZ2xlIGNoYXJhY3RlcnMuXG4gICAgc2luZ2xlLnNvcnQoKTtcbiAgICBmb3IgKHZhciBzdGFydCA9IDA7IHN0YXJ0IDwgc2luZ2xlLmxlbmd0aCAtIDE7IHN0YXJ0KyspIHtcbiAgICAgICAgLy8gRmluZCB0aGUgZW5kIG9mIGEgcnVuIG9mIGNoYXJhY3RlcnNcbiAgICAgICAgdmFyIGVuZCA9IHN0YXJ0O1xuICAgICAgICB3aGlsZSAoZW5kIDwgc2luZ2xlLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgIHNpbmdsZVtlbmRdLmNoYXJDb2RlQXQoMSkgKyAxID09PSBzaW5nbGVbZW5kICsgMV0uY2hhckNvZGVBdCgxKSkge1xuICAgICAgICAgICAgZW5kICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvdW50ID0gMSArIGVuZCAtIHN0YXJ0O1xuICAgICAgICAvLyBXZSB3YW50IHRvIHJlcGxhY2UgYXQgbGVhc3QgdGhyZWUgY2hhcmFjdGVyc1xuICAgICAgICBpZiAoY291bnQgPCAzKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHNpbmdsZS5zcGxpY2Uoc3RhcnQsIGNvdW50LCBzaW5nbGVbc3RhcnRdICsgXCItXCIgKyBzaW5nbGVbZW5kXSk7XG4gICAgfVxuICAgIG11bHRpcGxlLnVuc2hpZnQoXCJbXCIgKyBzaW5nbGUuam9pbihcIlwiKSArIFwiXVwiKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChtdWx0aXBsZS5qb2luKFwifFwiKSwgXCJnXCIpO1xufVxuLy8gL1teXFwwLVxceDdGXS9ndVxudmFyIHJlTm9uQVNDSUkgPSAvKD86W1xceDgwLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl18W1xcdUQ4MDAtXFx1REJGRl0oPyFbXFx1REMwMC1cXHVERkZGXSl8KD86W15cXHVEODAwLVxcdURCRkZdfF4pW1xcdURDMDAtXFx1REZGRl0pL2c7XG52YXIgZ2V0Q29kZVBvaW50ID0gXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVubmVjZXNzYXJ5LWNvbmRpdGlvblxuU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdCAhPSBudWxsXG4gICAgPyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHIuY29kZVBvaW50QXQoMCk7IH1cbiAgICA6IC8vIGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmcjc3Vycm9nYXRlLWZvcm11bGFlXG4gICAgICAgIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gKGMuY2hhckNvZGVBdCgwKSAtIDB4ZDgwMCkgKiAweDQwMCArXG4gICAgICAgICAgICAgICAgYy5jaGFyQ29kZUF0KDEpIC1cbiAgICAgICAgICAgICAgICAweGRjMDAgK1xuICAgICAgICAgICAgICAgIDB4MTAwMDA7XG4gICAgICAgIH07XG5mdW5jdGlvbiBzaW5nbGVDaGFyUmVwbGFjZXIoYykge1xuICAgIHJldHVybiBcIiYjeFwiICsgKGMubGVuZ3RoID4gMSA/IGdldENvZGVQb2ludChjKSA6IGMuY2hhckNvZGVBdCgwKSlcbiAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAudG9VcHBlckNhc2UoKSArIFwiO1wiO1xufVxuZnVuY3Rpb24gZ2V0SW52ZXJzZShpbnZlcnNlLCByZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBpbnZlcnNlW25hbWVdOyB9KVxuICAgICAgICAgICAgLnJlcGxhY2UocmVOb25BU0NJSSwgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbiAgICB9O1xufVxudmFyIHJlRXNjYXBlQ2hhcnMgPSBuZXcgUmVnRXhwKHhtbFJlcGxhY2VyLnNvdXJjZSArIFwifFwiICsgcmVOb25BU0NJSS5zb3VyY2UsIFwiZ1wiKTtcbi8qKlxuICogRW5jb2RlcyBhbGwgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGFzIHdlbGwgYXMgY2hhcmFjdGVycyBub3QgdmFsaWQgaW4gWE1MXG4gKiBkb2N1bWVudHMgdXNpbmcgbnVtZXJpYyBoZXhhZGVjaW1hbCByZWZlcmVuY2UgKGVnLiBgJiN4ZmM7YCkuXG4gKlxuICogSGF2ZSBhIGxvb2sgYXQgYGVzY2FwZVVURjhgIGlmIHlvdSB3YW50IGEgbW9yZSBjb25jaXNlIG91dHB1dCBhdCB0aGUgZXhwZW5zZVxuICogb2YgcmVkdWNlZCB0cmFuc3BvcnRhYmlsaXR5LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEucmVwbGFjZShyZUVzY2FwZUNoYXJzLCBzaW5nbGVDaGFyUmVwbGFjZXIpO1xufVxuZXhwb3J0cy5lc2NhcGUgPSBlc2NhcGU7XG4vKipcbiAqIEVuY29kZXMgYWxsIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIFhNTCBkb2N1bWVudHMgdXNpbmcgbnVtZXJpYyBoZXhhZGVjaW1hbFxuICogcmVmZXJlbmNlIChlZy4gYCYjeGZjO2ApLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgb3V0cHV0IHdpbGwgYmUgY2hhcmFjdGVyLXNldCBkZXBlbmRlbnQuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVzY2FwZS5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVVRGOChkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGEucmVwbGFjZSh4bWxSZXBsYWNlciwgc2luZ2xlQ2hhclJlcGxhY2VyKTtcbn1cbmV4cG9ydHMuZXNjYXBlVVRGOCA9IGVzY2FwZVVURjg7XG5mdW5jdGlvbiBnZXRBU0NJSUVuY29kZXIob2JqKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnJlcGxhY2UocmVFc2NhcGVDaGFycywgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG9ialtjXSB8fCBzaW5nbGVDaGFyUmVwbGFjZXIoYyk7IH0pO1xuICAgIH07XG59XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZVhNTFN0cmljdCA9IGV4cG9ydHMuZGVjb2RlSFRNTDVTdHJpY3QgPSBleHBvcnRzLmRlY29kZUhUTUw0U3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVIVE1MNSA9IGV4cG9ydHMuZGVjb2RlSFRNTDQgPSBleHBvcnRzLmRlY29kZUhUTUxTdHJpY3QgPSBleHBvcnRzLmRlY29kZUhUTUwgPSBleHBvcnRzLmRlY29kZVhNTCA9IGV4cG9ydHMuZW5jb2RlSFRNTDUgPSBleHBvcnRzLmVuY29kZUhUTUw0ID0gZXhwb3J0cy5lc2NhcGVVVEY4ID0gZXhwb3J0cy5lc2NhcGUgPSBleHBvcnRzLmVuY29kZU5vbkFzY2lpSFRNTCA9IGV4cG9ydHMuZW5jb2RlSFRNTCA9IGV4cG9ydHMuZW5jb2RlWE1MID0gZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLmRlY29kZVN0cmljdCA9IGV4cG9ydHMuZGVjb2RlID0gdm9pZCAwO1xudmFyIGRlY29kZV8xID0gcmVxdWlyZShcIi4vZGVjb2RlXCIpO1xudmFyIGVuY29kZV8xID0gcmVxdWlyZShcIi4vZW5jb2RlXCIpO1xuLyoqXG4gKiBEZWNvZGVzIGEgc3RyaW5nIHdpdGggZW50aXRpZXMuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBsZXZlbCBPcHRpb25hbCBsZXZlbCB0byBkZWNvZGUgYXQuIDAgPSBYTUwsIDEgPSBIVE1MLiBEZWZhdWx0IGlzIDAuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGRlY29kZVhNTGAgb3IgYGRlY29kZUhUTUxgIGRpcmVjdGx5LlxuICovXG5mdW5jdGlvbiBkZWNvZGUoZGF0YSwgbGV2ZWwpIHtcbiAgICByZXR1cm4gKCFsZXZlbCB8fCBsZXZlbCA8PSAwID8gZGVjb2RlXzEuZGVjb2RlWE1MIDogZGVjb2RlXzEuZGVjb2RlSFRNTCkoZGF0YSk7XG59XG5leHBvcnRzLmRlY29kZSA9IGRlY29kZTtcbi8qKlxuICogRGVjb2RlcyBhIHN0cmluZyB3aXRoIGVudGl0aWVzLiBEb2VzIG5vdCBhbGxvdyBtaXNzaW5nIHRyYWlsaW5nIHNlbWljb2xvbnMgZm9yIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBkZWNvZGUuXG4gKiBAcGFyYW0gbGV2ZWwgT3B0aW9uYWwgbGV2ZWwgdG8gZGVjb2RlIGF0LiAwID0gWE1MLCAxID0gSFRNTC4gRGVmYXVsdCBpcyAwLlxuICogQGRlcHJlY2F0ZWQgVXNlIGBkZWNvZGVIVE1MU3RyaWN0YCBvciBgZGVjb2RlWE1MYCBkaXJlY3RseS5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlU3RyaWN0KGRhdGEsIGxldmVsKSB7XG4gICAgcmV0dXJuICghbGV2ZWwgfHwgbGV2ZWwgPD0gMCA/IGRlY29kZV8xLmRlY29kZVhNTCA6IGRlY29kZV8xLmRlY29kZUhUTUxTdHJpY3QpKGRhdGEpO1xufVxuZXhwb3J0cy5kZWNvZGVTdHJpY3QgPSBkZWNvZGVTdHJpY3Q7XG4vKipcbiAqIEVuY29kZXMgYSBzdHJpbmcgd2l0aCBlbnRpdGllcy5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZW5jb2RlLlxuICogQHBhcmFtIGxldmVsIE9wdGlvbmFsIGxldmVsIHRvIGVuY29kZSBhdC4gMCA9IFhNTCwgMSA9IEhUTUwuIERlZmF1bHQgaXMgMC5cbiAqIEBkZXByZWNhdGVkIFVzZSBgZW5jb2RlSFRNTGAsIGBlbmNvZGVYTUxgIG9yIGBlbmNvZGVOb25Bc2NpaUhUTUxgIGRpcmVjdGx5LlxuICovXG5mdW5jdGlvbiBlbmNvZGUoZGF0YSwgbGV2ZWwpIHtcbiAgICByZXR1cm4gKCFsZXZlbCB8fCBsZXZlbCA8PSAwID8gZW5jb2RlXzEuZW5jb2RlWE1MIDogZW5jb2RlXzEuZW5jb2RlSFRNTCkoZGF0YSk7XG59XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbnZhciBlbmNvZGVfMiA9IHJlcXVpcmUoXCIuL2VuY29kZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZVhNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlXzIuZW5jb2RlWE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlSFRNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlXzIuZW5jb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZU5vbkFzY2lpSFRNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlXzIuZW5jb2RlTm9uQXNjaWlIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfMi5lc2NhcGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlc2NhcGVVVEY4XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfMi5lc2NhcGVVVEY4OyB9IH0pO1xuLy8gTGVnYWN5IGFsaWFzZXMgKGRlcHJlY2F0ZWQpXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVIVE1MNFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlXzIuZW5jb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZUhUTUw1XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGVfMi5lbmNvZGVIVE1MOyB9IH0pO1xudmFyIGRlY29kZV8yID0gcmVxdWlyZShcIi4vZGVjb2RlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlWE1MXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMi5kZWNvZGVYTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMi5kZWNvZGVIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTFN0cmljdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlXzIuZGVjb2RlSFRNTFN0cmljdDsgfSB9KTtcbi8vIExlZ2FjeSBhbGlhc2VzIChkZXByZWNhdGVkKVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTDRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8yLmRlY29kZUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MNVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlXzIuZGVjb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUw0U3RyaWN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfMi5kZWNvZGVIVE1MU3RyaWN0OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTDVTdHJpY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8yLmRlY29kZUhUTUxTdHJpY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVYTUxTdHJpY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV8yLmRlY29kZVhNTDsgfSB9KTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXR0cmlidXRlTmFtZXMgPSBleHBvcnRzLmVsZW1lbnROYW1lcyA9IHZvaWQgMDtcbmV4cG9ydHMuZWxlbWVudE5hbWVzID0gbmV3IE1hcChbXG4gICAgW1wiYWx0Z2x5cGhcIiwgXCJhbHRHbHlwaFwiXSxcbiAgICBbXCJhbHRnbHlwaGRlZlwiLCBcImFsdEdseXBoRGVmXCJdLFxuICAgIFtcImFsdGdseXBoaXRlbVwiLCBcImFsdEdseXBoSXRlbVwiXSxcbiAgICBbXCJhbmltYXRlY29sb3JcIiwgXCJhbmltYXRlQ29sb3JcIl0sXG4gICAgW1wiYW5pbWF0ZW1vdGlvblwiLCBcImFuaW1hdGVNb3Rpb25cIl0sXG4gICAgW1wiYW5pbWF0ZXRyYW5zZm9ybVwiLCBcImFuaW1hdGVUcmFuc2Zvcm1cIl0sXG4gICAgW1wiY2xpcHBhdGhcIiwgXCJjbGlwUGF0aFwiXSxcbiAgICBbXCJmZWJsZW5kXCIsIFwiZmVCbGVuZFwiXSxcbiAgICBbXCJmZWNvbG9ybWF0cml4XCIsIFwiZmVDb2xvck1hdHJpeFwiXSxcbiAgICBbXCJmZWNvbXBvbmVudHRyYW5zZmVyXCIsIFwiZmVDb21wb25lbnRUcmFuc2ZlclwiXSxcbiAgICBbXCJmZWNvbXBvc2l0ZVwiLCBcImZlQ29tcG9zaXRlXCJdLFxuICAgIFtcImZlY29udm9sdmVtYXRyaXhcIiwgXCJmZUNvbnZvbHZlTWF0cml4XCJdLFxuICAgIFtcImZlZGlmZnVzZWxpZ2h0aW5nXCIsIFwiZmVEaWZmdXNlTGlnaHRpbmdcIl0sXG4gICAgW1wiZmVkaXNwbGFjZW1lbnRtYXBcIiwgXCJmZURpc3BsYWNlbWVudE1hcFwiXSxcbiAgICBbXCJmZWRpc3RhbnRsaWdodFwiLCBcImZlRGlzdGFudExpZ2h0XCJdLFxuICAgIFtcImZlZHJvcHNoYWRvd1wiLCBcImZlRHJvcFNoYWRvd1wiXSxcbiAgICBbXCJmZWZsb29kXCIsIFwiZmVGbG9vZFwiXSxcbiAgICBbXCJmZWZ1bmNhXCIsIFwiZmVGdW5jQVwiXSxcbiAgICBbXCJmZWZ1bmNiXCIsIFwiZmVGdW5jQlwiXSxcbiAgICBbXCJmZWZ1bmNnXCIsIFwiZmVGdW5jR1wiXSxcbiAgICBbXCJmZWZ1bmNyXCIsIFwiZmVGdW5jUlwiXSxcbiAgICBbXCJmZWdhdXNzaWFuYmx1clwiLCBcImZlR2F1c3NpYW5CbHVyXCJdLFxuICAgIFtcImZlaW1hZ2VcIiwgXCJmZUltYWdlXCJdLFxuICAgIFtcImZlbWVyZ2VcIiwgXCJmZU1lcmdlXCJdLFxuICAgIFtcImZlbWVyZ2Vub2RlXCIsIFwiZmVNZXJnZU5vZGVcIl0sXG4gICAgW1wiZmVtb3JwaG9sb2d5XCIsIFwiZmVNb3JwaG9sb2d5XCJdLFxuICAgIFtcImZlb2Zmc2V0XCIsIFwiZmVPZmZzZXRcIl0sXG4gICAgW1wiZmVwb2ludGxpZ2h0XCIsIFwiZmVQb2ludExpZ2h0XCJdLFxuICAgIFtcImZlc3BlY3VsYXJsaWdodGluZ1wiLCBcImZlU3BlY3VsYXJMaWdodGluZ1wiXSxcbiAgICBbXCJmZXNwb3RsaWdodFwiLCBcImZlU3BvdExpZ2h0XCJdLFxuICAgIFtcImZldGlsZVwiLCBcImZlVGlsZVwiXSxcbiAgICBbXCJmZXR1cmJ1bGVuY2VcIiwgXCJmZVR1cmJ1bGVuY2VcIl0sXG4gICAgW1wiZm9yZWlnbm9iamVjdFwiLCBcImZvcmVpZ25PYmplY3RcIl0sXG4gICAgW1wiZ2x5cGhyZWZcIiwgXCJnbHlwaFJlZlwiXSxcbiAgICBbXCJsaW5lYXJncmFkaWVudFwiLCBcImxpbmVhckdyYWRpZW50XCJdLFxuICAgIFtcInJhZGlhbGdyYWRpZW50XCIsIFwicmFkaWFsR3JhZGllbnRcIl0sXG4gICAgW1widGV4dHBhdGhcIiwgXCJ0ZXh0UGF0aFwiXSxcbl0pO1xuZXhwb3J0cy5hdHRyaWJ1dGVOYW1lcyA9IG5ldyBNYXAoW1xuICAgIFtcImRlZmluaXRpb251cmxcIiwgXCJkZWZpbml0aW9uVVJMXCJdLFxuICAgIFtcImF0dHJpYnV0ZW5hbWVcIiwgXCJhdHRyaWJ1dGVOYW1lXCJdLFxuICAgIFtcImF0dHJpYnV0ZXR5cGVcIiwgXCJhdHRyaWJ1dGVUeXBlXCJdLFxuICAgIFtcImJhc2VmcmVxdWVuY3lcIiwgXCJiYXNlRnJlcXVlbmN5XCJdLFxuICAgIFtcImJhc2Vwcm9maWxlXCIsIFwiYmFzZVByb2ZpbGVcIl0sXG4gICAgW1wiY2FsY21vZGVcIiwgXCJjYWxjTW9kZVwiXSxcbiAgICBbXCJjbGlwcGF0aHVuaXRzXCIsIFwiY2xpcFBhdGhVbml0c1wiXSxcbiAgICBbXCJkaWZmdXNlY29uc3RhbnRcIiwgXCJkaWZmdXNlQ29uc3RhbnRcIl0sXG4gICAgW1wiZWRnZW1vZGVcIiwgXCJlZGdlTW9kZVwiXSxcbiAgICBbXCJmaWx0ZXJ1bml0c1wiLCBcImZpbHRlclVuaXRzXCJdLFxuICAgIFtcImdseXBocmVmXCIsIFwiZ2x5cGhSZWZcIl0sXG4gICAgW1wiZ3JhZGllbnR0cmFuc2Zvcm1cIiwgXCJncmFkaWVudFRyYW5zZm9ybVwiXSxcbiAgICBbXCJncmFkaWVudHVuaXRzXCIsIFwiZ3JhZGllbnRVbml0c1wiXSxcbiAgICBbXCJrZXJuZWxtYXRyaXhcIiwgXCJrZXJuZWxNYXRyaXhcIl0sXG4gICAgW1wia2VybmVsdW5pdGxlbmd0aFwiLCBcImtlcm5lbFVuaXRMZW5ndGhcIl0sXG4gICAgW1wia2V5cG9pbnRzXCIsIFwia2V5UG9pbnRzXCJdLFxuICAgIFtcImtleXNwbGluZXNcIiwgXCJrZXlTcGxpbmVzXCJdLFxuICAgIFtcImtleXRpbWVzXCIsIFwia2V5VGltZXNcIl0sXG4gICAgW1wibGVuZ3RoYWRqdXN0XCIsIFwibGVuZ3RoQWRqdXN0XCJdLFxuICAgIFtcImxpbWl0aW5nY29uZWFuZ2xlXCIsIFwibGltaXRpbmdDb25lQW5nbGVcIl0sXG4gICAgW1wibWFya2VyaGVpZ2h0XCIsIFwibWFya2VySGVpZ2h0XCJdLFxuICAgIFtcIm1hcmtlcnVuaXRzXCIsIFwibWFya2VyVW5pdHNcIl0sXG4gICAgW1wibWFya2Vyd2lkdGhcIiwgXCJtYXJrZXJXaWR0aFwiXSxcbiAgICBbXCJtYXNrY29udGVudHVuaXRzXCIsIFwibWFza0NvbnRlbnRVbml0c1wiXSxcbiAgICBbXCJtYXNrdW5pdHNcIiwgXCJtYXNrVW5pdHNcIl0sXG4gICAgW1wibnVtb2N0YXZlc1wiLCBcIm51bU9jdGF2ZXNcIl0sXG4gICAgW1wicGF0aGxlbmd0aFwiLCBcInBhdGhMZW5ndGhcIl0sXG4gICAgW1wicGF0dGVybmNvbnRlbnR1bml0c1wiLCBcInBhdHRlcm5Db250ZW50VW5pdHNcIl0sXG4gICAgW1wicGF0dGVybnRyYW5zZm9ybVwiLCBcInBhdHRlcm5UcmFuc2Zvcm1cIl0sXG4gICAgW1wicGF0dGVybnVuaXRzXCIsIFwicGF0dGVyblVuaXRzXCJdLFxuICAgIFtcInBvaW50c2F0eFwiLCBcInBvaW50c0F0WFwiXSxcbiAgICBbXCJwb2ludHNhdHlcIiwgXCJwb2ludHNBdFlcIl0sXG4gICAgW1wicG9pbnRzYXR6XCIsIFwicG9pbnRzQXRaXCJdLFxuICAgIFtcInByZXNlcnZlYWxwaGFcIiwgXCJwcmVzZXJ2ZUFscGhhXCJdLFxuICAgIFtcInByZXNlcnZlYXNwZWN0cmF0aW9cIiwgXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCJdLFxuICAgIFtcInByaW1pdGl2ZXVuaXRzXCIsIFwicHJpbWl0aXZlVW5pdHNcIl0sXG4gICAgW1wicmVmeFwiLCBcInJlZlhcIl0sXG4gICAgW1wicmVmeVwiLCBcInJlZllcIl0sXG4gICAgW1wicmVwZWF0Y291bnRcIiwgXCJyZXBlYXRDb3VudFwiXSxcbiAgICBbXCJyZXBlYXRkdXJcIiwgXCJyZXBlYXREdXJcIl0sXG4gICAgW1wicmVxdWlyZWRleHRlbnNpb25zXCIsIFwicmVxdWlyZWRFeHRlbnNpb25zXCJdLFxuICAgIFtcInJlcXVpcmVkZmVhdHVyZXNcIiwgXCJyZXF1aXJlZEZlYXR1cmVzXCJdLFxuICAgIFtcInNwZWN1bGFyY29uc3RhbnRcIiwgXCJzcGVjdWxhckNvbnN0YW50XCJdLFxuICAgIFtcInNwZWN1bGFyZXhwb25lbnRcIiwgXCJzcGVjdWxhckV4cG9uZW50XCJdLFxuICAgIFtcInNwcmVhZG1ldGhvZFwiLCBcInNwcmVhZE1ldGhvZFwiXSxcbiAgICBbXCJzdGFydG9mZnNldFwiLCBcInN0YXJ0T2Zmc2V0XCJdLFxuICAgIFtcInN0ZGRldmlhdGlvblwiLCBcInN0ZERldmlhdGlvblwiXSxcbiAgICBbXCJzdGl0Y2h0aWxlc1wiLCBcInN0aXRjaFRpbGVzXCJdLFxuICAgIFtcInN1cmZhY2VzY2FsZVwiLCBcInN1cmZhY2VTY2FsZVwiXSxcbiAgICBbXCJzeXN0ZW1sYW5ndWFnZVwiLCBcInN5c3RlbUxhbmd1YWdlXCJdLFxuICAgIFtcInRhYmxldmFsdWVzXCIsIFwidGFibGVWYWx1ZXNcIl0sXG4gICAgW1widGFyZ2V0eFwiLCBcInRhcmdldFhcIl0sXG4gICAgW1widGFyZ2V0eVwiLCBcInRhcmdldFlcIl0sXG4gICAgW1widGV4dGxlbmd0aFwiLCBcInRleHRMZW5ndGhcIl0sXG4gICAgW1widmlld2JveFwiLCBcInZpZXdCb3hcIl0sXG4gICAgW1widmlld3RhcmdldFwiLCBcInZpZXdUYXJnZXRcIl0sXG4gICAgW1wieGNoYW5uZWxzZWxlY3RvclwiLCBcInhDaGFubmVsU2VsZWN0b3JcIl0sXG4gICAgW1wieWNoYW5uZWxzZWxlY3RvclwiLCBcInlDaGFubmVsU2VsZWN0b3JcIl0sXG4gICAgW1wiem9vbWFuZHBhblwiLCBcInpvb21BbmRQYW5cIl0sXG5dKTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzXG4gKi9cbnZhciBFbGVtZW50VHlwZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIikpO1xudmFyIGVudGl0aWVzXzEgPSByZXF1aXJlKFwiZW50aXRpZXNcIik7XG4vKlxuICogTWl4ZWQtY2FzZSBTVkcgYW5kIE1hdGhNTCB0YWdzICYgYXR0cmlidXRlc1xuICogcmVjb2duaXplZCBieSB0aGUgSFRNTCBwYXJzZXIsIHNlZVxuICogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI3BhcnNpbmctbWFpbi1pbmZvcmVpZ25cbiAqL1xudmFyIGZvcmVpZ25OYW1lc18xID0gcmVxdWlyZShcIi4vZm9yZWlnbk5hbWVzXCIpO1xudmFyIHVuZW5jb2RlZEVsZW1lbnRzID0gbmV3IFNldChbXG4gICAgXCJzdHlsZVwiLFxuICAgIFwic2NyaXB0XCIsXG4gICAgXCJ4bXBcIixcbiAgICBcImlmcmFtZVwiLFxuICAgIFwibm9lbWJlZFwiLFxuICAgIFwibm9mcmFtZXNcIixcbiAgICBcInBsYWludGV4dFwiLFxuICAgIFwibm9zY3JpcHRcIixcbl0pO1xuLyoqXG4gKiBGb3JtYXQgYXR0cmlidXRlc1xuICovXG5mdW5jdGlvbiBmb3JtYXRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMsIG9wdHMpIHtcbiAgICBpZiAoIWF0dHJpYnV0ZXMpXG4gICAgICAgIHJldHVybjtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcylcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciB2YWx1ZSA9IChfYSA9IGF0dHJpYnV0ZXNba2V5XSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJcIjtcbiAgICAgICAgaWYgKG9wdHMueG1sTW9kZSA9PT0gXCJmb3JlaWduXCIpIHtcbiAgICAgICAgICAgIC8qIEZpeCB1cCBtaXhlZC1jYXNlIGF0dHJpYnV0ZSBuYW1lcyAqL1xuICAgICAgICAgICAga2V5ID0gKF9iID0gZm9yZWlnbk5hbWVzXzEuYXR0cmlidXRlTmFtZXMuZ2V0KGtleSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGtleTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW9wdHMuZW1wdHlBdHRycyAmJiAhb3B0cy54bWxNb2RlICYmIHZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXkgKyBcIj1cXFwiXCIgKyAob3B0cy5kZWNvZGVFbnRpdGllcyA/IGVudGl0aWVzXzEuZW5jb2RlWE1MKHZhbHVlKSA6IHZhbHVlLnJlcGxhY2UoL1wiL2csIFwiJnF1b3Q7XCIpKSArIFwiXFxcIlwiO1xuICAgIH0pXG4gICAgICAgIC5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogU2VsZi1lbmNsb3NpbmcgdGFnc1xuICovXG52YXIgc2luZ2xlVGFnID0gbmV3IFNldChbXG4gICAgXCJhcmVhXCIsXG4gICAgXCJiYXNlXCIsXG4gICAgXCJiYXNlZm9udFwiLFxuICAgIFwiYnJcIixcbiAgICBcImNvbFwiLFxuICAgIFwiY29tbWFuZFwiLFxuICAgIFwiZW1iZWRcIixcbiAgICBcImZyYW1lXCIsXG4gICAgXCJoclwiLFxuICAgIFwiaW1nXCIsXG4gICAgXCJpbnB1dFwiLFxuICAgIFwiaXNpbmRleFwiLFxuICAgIFwia2V5Z2VuXCIsXG4gICAgXCJsaW5rXCIsXG4gICAgXCJtZXRhXCIsXG4gICAgXCJwYXJhbVwiLFxuICAgIFwic291cmNlXCIsXG4gICAgXCJ0cmFja1wiLFxuICAgIFwid2JyXCIsXG5dKTtcbi8qKlxuICogUmVuZGVycyBhIERPTSBub2RlIG9yIGFuIGFycmF5IG9mIERPTSBub2RlcyB0byBhIHN0cmluZy5cbiAqXG4gKiBDYW4gYmUgdGhvdWdodCBvZiBhcyB0aGUgZXF1aXZhbGVudCBvZiB0aGUgYG91dGVySFRNTGAgb2YgdGhlIHBhc3NlZCBub2RlKHMpLlxuICpcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gYmUgcmVuZGVyZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBDaGFuZ2VzIHNlcmlhbGl6YXRpb24gYmVoYXZpb3JcbiAqL1xuZnVuY3Rpb24gcmVuZGVyKG5vZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIC8vIFRPRE86IFRoaXMgaXMgYSBiaXQgaGFja3kuXG4gICAgdmFyIG5vZGVzID0gQXJyYXkuaXNBcnJheShub2RlKSB8fCBub2RlLmNoZWVyaW8gPyBub2RlIDogW25vZGVdO1xuICAgIHZhciBvdXRwdXQgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb3V0cHV0ICs9IHJlbmRlck5vZGUobm9kZXNbaV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcmVuZGVyO1xuZnVuY3Rpb24gcmVuZGVyTm9kZShub2RlLCBvcHRpb25zKSB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5Sb290OlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihub2RlLmNoaWxkcmVuLCBvcHRpb25zKTtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5EaXJlY3RpdmU6XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuRG9jdHlwZTpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJEaXJlY3RpdmUobm9kZSk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuQ29tbWVudDpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJDb21tZW50KG5vZGUpO1xuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLkNEQVRBOlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckNkYXRhKG5vZGUpO1xuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLlNjcmlwdDpcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5TdHlsZTpcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5UYWc6XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyVGFnKG5vZGUsIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLlRleHQ6XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyVGV4dChub2RlLCBvcHRpb25zKTtcbiAgICB9XG59XG52YXIgZm9yZWlnbk1vZGVJbnRlZ3JhdGlvblBvaW50cyA9IG5ldyBTZXQoW1xuICAgIFwibWlcIixcbiAgICBcIm1vXCIsXG4gICAgXCJtblwiLFxuICAgIFwibXNcIixcbiAgICBcIm10ZXh0XCIsXG4gICAgXCJhbm5vdGF0aW9uLXhtbFwiLFxuICAgIFwiZm9yZWlnbk9iamVjdFwiLFxuICAgIFwiZGVzY1wiLFxuICAgIFwidGl0bGVcIixcbl0pO1xudmFyIGZvcmVpZ25FbGVtZW50cyA9IG5ldyBTZXQoW1wic3ZnXCIsIFwibWF0aFwiXSk7XG5mdW5jdGlvbiByZW5kZXJUYWcoZWxlbSwgb3B0cykge1xuICAgIHZhciBfYTtcbiAgICAvLyBIYW5kbGUgU1ZHIC8gTWF0aE1MIGluIEhUTUxcbiAgICBpZiAob3B0cy54bWxNb2RlID09PSBcImZvcmVpZ25cIikge1xuICAgICAgICAvKiBGaXggdXAgbWl4ZWQtY2FzZSBlbGVtZW50IG5hbWVzICovXG4gICAgICAgIGVsZW0ubmFtZSA9IChfYSA9IGZvcmVpZ25OYW1lc18xLmVsZW1lbnROYW1lcy5nZXQoZWxlbS5uYW1lKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZWxlbS5uYW1lO1xuICAgICAgICAvKiBFeGl0IGZvcmVpZ24gbW9kZSBhdCBpbnRlZ3JhdGlvbiBwb2ludHMgKi9cbiAgICAgICAgaWYgKGVsZW0ucGFyZW50ICYmXG4gICAgICAgICAgICBmb3JlaWduTW9kZUludGVncmF0aW9uUG9pbnRzLmhhcyhlbGVtLnBhcmVudC5uYW1lKSkge1xuICAgICAgICAgICAgb3B0cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRzKSwgeyB4bWxNb2RlOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW9wdHMueG1sTW9kZSAmJiBmb3JlaWduRWxlbWVudHMuaGFzKGVsZW0ubmFtZSkpIHtcbiAgICAgICAgb3B0cyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvcHRzKSwgeyB4bWxNb2RlOiBcImZvcmVpZ25cIiB9KTtcbiAgICB9XG4gICAgdmFyIHRhZyA9IFwiPFwiICsgZWxlbS5uYW1lO1xuICAgIHZhciBhdHRyaWJzID0gZm9ybWF0QXR0cmlidXRlcyhlbGVtLmF0dHJpYnMsIG9wdHMpO1xuICAgIGlmIChhdHRyaWJzKSB7XG4gICAgICAgIHRhZyArPSBcIiBcIiArIGF0dHJpYnM7XG4gICAgfVxuICAgIGlmIChlbGVtLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAob3B0cy54bWxNb2RlXG4gICAgICAgICAgICA/IC8vIEluIFhNTCBtb2RlIG9yIGZvcmVpZ24gbW9kZSwgYW5kIHVzZXIgaGFzbid0IGV4cGxpY2l0bHkgdHVybmVkIG9mZiBzZWxmLWNsb3NpbmcgdGFnc1xuICAgICAgICAgICAgICAgIG9wdHMuc2VsZkNsb3NpbmdUYWdzICE9PSBmYWxzZVxuICAgICAgICAgICAgOiAvLyBVc2VyIGV4cGxpY2l0bHkgYXNrZWQgZm9yIHNlbGYtY2xvc2luZyB0YWdzLCBldmVuIGluIEhUTUwgbW9kZVxuICAgICAgICAgICAgICAgIG9wdHMuc2VsZkNsb3NpbmdUYWdzICYmIHNpbmdsZVRhZy5oYXMoZWxlbS5uYW1lKSkpIHtcbiAgICAgICAgaWYgKCFvcHRzLnhtbE1vZGUpXG4gICAgICAgICAgICB0YWcgKz0gXCIgXCI7XG4gICAgICAgIHRhZyArPSBcIi8+XCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0YWcgKz0gXCI+XCI7XG4gICAgICAgIGlmIChlbGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRhZyArPSByZW5kZXIoZWxlbS5jaGlsZHJlbiwgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMueG1sTW9kZSB8fCAhc2luZ2xlVGFnLmhhcyhlbGVtLm5hbWUpKSB7XG4gICAgICAgICAgICB0YWcgKz0gXCI8L1wiICsgZWxlbS5uYW1lICsgXCI+XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhZztcbn1cbmZ1bmN0aW9uIHJlbmRlckRpcmVjdGl2ZShlbGVtKSB7XG4gICAgcmV0dXJuIFwiPFwiICsgZWxlbS5kYXRhICsgXCI+XCI7XG59XG5mdW5jdGlvbiByZW5kZXJUZXh0KGVsZW0sIG9wdHMpIHtcbiAgICB2YXIgZGF0YSA9IGVsZW0uZGF0YSB8fCBcIlwiO1xuICAgIC8vIElmIGVudGl0aWVzIHdlcmVuJ3QgZGVjb2RlZCwgbm8gbmVlZCB0byBlbmNvZGUgdGhlbSBiYWNrXG4gICAgaWYgKG9wdHMuZGVjb2RlRW50aXRpZXMgJiZcbiAgICAgICAgIShlbGVtLnBhcmVudCAmJiB1bmVuY29kZWRFbGVtZW50cy5oYXMoZWxlbS5wYXJlbnQubmFtZSkpKSB7XG4gICAgICAgIGRhdGEgPSBlbnRpdGllc18xLmVuY29kZVhNTChkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiByZW5kZXJDZGF0YShlbGVtKSB7XG4gICAgcmV0dXJuIFwiPCFbQ0RBVEFbXCIgKyBlbGVtLmNoaWxkcmVuWzBdLmRhdGEgKyBcIl1dPlwiO1xufVxuZnVuY3Rpb24gcmVuZGVyQ29tbWVudChlbGVtKSB7XG4gICAgcmV0dXJuIFwiPCEtLVwiICsgZWxlbS5kYXRhICsgXCItLT5cIjtcbn1cbiIsICJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfY29kZXBvaW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVudGl0aWVzL2xpYi9kZWNvZGVfY29kZXBvaW50XCIpKTtcbnZhciBlbnRpdGllc19qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVudGl0aWVzL2xpYi9tYXBzL2VudGl0aWVzLmpzb25cIikpO1xudmFyIGxlZ2FjeV9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImVudGl0aWVzL2xpYi9tYXBzL2xlZ2FjeS5qc29uXCIpKTtcbnZhciB4bWxfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJlbnRpdGllcy9saWIvbWFwcy94bWwuanNvblwiKSk7XG5mdW5jdGlvbiB3aGl0ZXNwYWNlKGMpIHtcbiAgICByZXR1cm4gYyA9PT0gXCIgXCIgfHwgYyA9PT0gXCJcXG5cIiB8fCBjID09PSBcIlxcdFwiIHx8IGMgPT09IFwiXFxmXCIgfHwgYyA9PT0gXCJcXHJcIjtcbn1cbmZ1bmN0aW9uIGlzQVNDSUlBbHBoYShjKSB7XG4gICAgcmV0dXJuIChjID49IFwiYVwiICYmIGMgPD0gXCJ6XCIpIHx8IChjID49IFwiQVwiICYmIGMgPD0gXCJaXCIpO1xufVxuZnVuY3Rpb24gaWZFbHNlU3RhdGUodXBwZXIsIFNVQ0NFU1MsIEZBSUxVUkUpIHtcbiAgICB2YXIgbG93ZXIgPSB1cHBlci50b0xvd2VyQ2FzZSgpO1xuICAgIGlmICh1cHBlciA9PT0gbG93ZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0LCBjKSB7XG4gICAgICAgICAgICBpZiAoYyA9PT0gbG93ZXIpIHtcbiAgICAgICAgICAgICAgICB0Ll9zdGF0ZSA9IFNVQ0NFU1M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0Ll9zdGF0ZSA9IEZBSUxVUkU7XG4gICAgICAgICAgICAgICAgdC5faW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0LCBjKSB7XG4gICAgICAgIGlmIChjID09PSBsb3dlciB8fCBjID09PSB1cHBlcikge1xuICAgICAgICAgICAgdC5fc3RhdGUgPSBTVUNDRVNTO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdC5fc3RhdGUgPSBGQUlMVVJFO1xuICAgICAgICAgICAgdC5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKHVwcGVyLCBORVhUX1NUQVRFKSB7XG4gICAgdmFyIGxvd2VyID0gdXBwZXIudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHQsIGMpIHtcbiAgICAgICAgaWYgKGMgPT09IGxvd2VyIHx8IGMgPT09IHVwcGVyKSB7XG4gICAgICAgICAgICB0Ll9zdGF0ZSA9IE5FWFRfU1RBVEU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0Ll9zdGF0ZSA9IDMgLyogSW5UYWdOYW1lICovO1xuICAgICAgICAgICAgdC5faW5kZXgtLTsgLy8gQ29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICAgICAgfVxuICAgIH07XG59XG52YXIgc3RhdGVCZWZvcmVDZGF0YTEgPSBpZkVsc2VTdGF0ZShcIkNcIiwgMjQgLyogQmVmb3JlQ2RhdGEyICovLCAxNiAvKiBJbkRlY2xhcmF0aW9uICovKTtcbnZhciBzdGF0ZUJlZm9yZUNkYXRhMiA9IGlmRWxzZVN0YXRlKFwiRFwiLCAyNSAvKiBCZWZvcmVDZGF0YTMgKi8sIDE2IC8qIEluRGVjbGFyYXRpb24gKi8pO1xudmFyIHN0YXRlQmVmb3JlQ2RhdGEzID0gaWZFbHNlU3RhdGUoXCJBXCIsIDI2IC8qIEJlZm9yZUNkYXRhNCAqLywgMTYgLyogSW5EZWNsYXJhdGlvbiAqLyk7XG52YXIgc3RhdGVCZWZvcmVDZGF0YTQgPSBpZkVsc2VTdGF0ZShcIlRcIiwgMjcgLyogQmVmb3JlQ2RhdGE1ICovLCAxNiAvKiBJbkRlY2xhcmF0aW9uICovKTtcbnZhciBzdGF0ZUJlZm9yZUNkYXRhNSA9IGlmRWxzZVN0YXRlKFwiQVwiLCAyOCAvKiBCZWZvcmVDZGF0YTYgKi8sIDE2IC8qIEluRGVjbGFyYXRpb24gKi8pO1xudmFyIHN0YXRlQmVmb3JlU2NyaXB0MSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJSXCIsIDM1IC8qIEJlZm9yZVNjcmlwdDIgKi8pO1xudmFyIHN0YXRlQmVmb3JlU2NyaXB0MiA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJJXCIsIDM2IC8qIEJlZm9yZVNjcmlwdDMgKi8pO1xudmFyIHN0YXRlQmVmb3JlU2NyaXB0MyA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJQXCIsIDM3IC8qIEJlZm9yZVNjcmlwdDQgKi8pO1xudmFyIHN0YXRlQmVmb3JlU2NyaXB0NCA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJUXCIsIDM4IC8qIEJlZm9yZVNjcmlwdDUgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTY3JpcHQxID0gaWZFbHNlU3RhdGUoXCJSXCIsIDQwIC8qIEFmdGVyU2NyaXB0MiAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUFmdGVyU2NyaXB0MiA9IGlmRWxzZVN0YXRlKFwiSVwiLCA0MSAvKiBBZnRlclNjcmlwdDMgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclNjcmlwdDMgPSBpZkVsc2VTdGF0ZShcIlBcIiwgNDIgLyogQWZ0ZXJTY3JpcHQ0ICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTY3JpcHQ0ID0gaWZFbHNlU3RhdGUoXCJUXCIsIDQzIC8qIEFmdGVyU2NyaXB0NSAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUJlZm9yZVN0eWxlMSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJZXCIsIDQ1IC8qIEJlZm9yZVN0eWxlMiAqLyk7XG52YXIgc3RhdGVCZWZvcmVTdHlsZTIgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFwiTFwiLCA0NiAvKiBCZWZvcmVTdHlsZTMgKi8pO1xudmFyIHN0YXRlQmVmb3JlU3R5bGUzID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIkVcIiwgNDcgLyogQmVmb3JlU3R5bGU0ICovKTtcbnZhciBzdGF0ZUFmdGVyU3R5bGUxID0gaWZFbHNlU3RhdGUoXCJZXCIsIDQ5IC8qIEFmdGVyU3R5bGUyICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJTdHlsZTIgPSBpZkVsc2VTdGF0ZShcIkxcIiwgNTAgLyogQWZ0ZXJTdHlsZTMgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclN0eWxlMyA9IGlmRWxzZVN0YXRlKFwiRVwiLCA1MSAvKiBBZnRlclN0eWxlNCAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUJlZm9yZVNwZWNpYWxUID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIklcIiwgNTQgLyogQmVmb3JlVGl0bGUxICovKTtcbnZhciBzdGF0ZUJlZm9yZVRpdGxlMSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXCJUXCIsIDU1IC8qIEJlZm9yZVRpdGxlMiAqLyk7XG52YXIgc3RhdGVCZWZvcmVUaXRsZTIgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFwiTFwiLCA1NiAvKiBCZWZvcmVUaXRsZTMgKi8pO1xudmFyIHN0YXRlQmVmb3JlVGl0bGUzID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcIkVcIiwgNTcgLyogQmVmb3JlVGl0bGU0ICovKTtcbnZhciBzdGF0ZUFmdGVyU3BlY2lhbFRFbmQgPSBpZkVsc2VTdGF0ZShcIklcIiwgNTggLyogQWZ0ZXJUaXRsZTEgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVBZnRlclRpdGxlMSA9IGlmRWxzZVN0YXRlKFwiVFwiLCA1OSAvKiBBZnRlclRpdGxlMiAqLywgMSAvKiBUZXh0ICovKTtcbnZhciBzdGF0ZUFmdGVyVGl0bGUyID0gaWZFbHNlU3RhdGUoXCJMXCIsIDYwIC8qIEFmdGVyVGl0bGUzICovLCAxIC8qIFRleHQgKi8pO1xudmFyIHN0YXRlQWZ0ZXJUaXRsZTMgPSBpZkVsc2VTdGF0ZShcIkVcIiwgNjEgLyogQWZ0ZXJUaXRsZTQgKi8sIDEgLyogVGV4dCAqLyk7XG52YXIgc3RhdGVCZWZvcmVFbnRpdHkgPSBpZkVsc2VTdGF0ZShcIiNcIiwgNjMgLyogQmVmb3JlTnVtZXJpY0VudGl0eSAqLywgNjQgLyogSW5OYW1lZEVudGl0eSAqLyk7XG52YXIgc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5ID0gaWZFbHNlU3RhdGUoXCJYXCIsIDY2IC8qIEluSGV4RW50aXR5ICovLCA2NSAvKiBJbk51bWVyaWNFbnRpdHkgKi8pO1xudmFyIFRva2VuaXplciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb2tlbml6ZXIob3B0aW9ucywgY2JzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLyoqIFRoZSBjdXJyZW50IHN0YXRlIHRoZSB0b2tlbml6ZXIgaXMgaW4uICovXG4gICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAvKiogVGhlIHJlYWQgYnVmZmVyLiAqL1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XG4gICAgICAgIC8qKiBUaGUgYmVnaW5uaW5nIG9mIHRoZSBzZWN0aW9uIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHJlYWQuICovXG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgLyoqIFRoZSBpbmRleCB3aXRoaW4gdGhlIGJ1ZmZlciB0aGF0IHdlIGFyZSBjdXJyZW50bHkgbG9va2luZyBhdC4gKi9cbiAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGF0YSB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gcHJvY2Vzc2VkIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBidWZmZXIgb2NjYXNpb25hbGx5LlxuICAgICAgICAgKiBgX2J1ZmZlck9mZnNldGAga2VlcHMgdHJhY2sgb2YgaG93IG1hbnkgY2hhcmFjdGVycyBoYXZlIGJlZW4gcmVtb3ZlZCwgdG8gbWFrZSBzdXJlIHBvc2l0aW9uIGluZm9ybWF0aW9uIGlzIGFjY3VyYXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5idWZmZXJPZmZzZXQgPSAwO1xuICAgICAgICAvKiogU29tZSBiZWhhdmlvciwgZWcuIHdoZW4gZGVjb2RpbmcgZW50aXRpZXMsIGlzIGRvbmUgd2hpbGUgd2UgYXJlIGluIGFub3RoZXIgc3RhdGUuIFRoaXMga2VlcHMgdHJhY2sgb2YgdGhlIG90aGVyIHN0YXRlIHR5cGUuICovXG4gICAgICAgIHRoaXMuYmFzZVN0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAvKiogRm9yIHNwZWNpYWwgcGFyc2luZyBiZWhhdmlvciBpbnNpZGUgb2Ygc2NyaXB0IGFuZCBzdHlsZSB0YWdzLiAqL1xuICAgICAgICB0aGlzLnNwZWNpYWwgPSAxIC8qIE5vbmUgKi87XG4gICAgICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgdG9rZW5pemVyIGhhcyBiZWVuIHBhdXNlZC4gKi9cbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSB0b2tlbml6ZXIgaGFzIGZpbmlzaGVkIHJ1bm5pbmcgLyBgLmVuZGAgaGFzIGJlZW4gY2FsbGVkLiAqL1xuICAgICAgICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY2JzID0gY2JzO1xuICAgICAgICB0aGlzLnhtbE1vZGUgPSAhIShvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMueG1sTW9kZSk7XG4gICAgICAgIHRoaXMuZGVjb2RlRW50aXRpZXMgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZGVjb2RlRW50aXRpZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWU7XG4gICAgfVxuICAgIFRva2VuaXplci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMuYmFzZVN0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICB0aGlzLnNwZWNpYWwgPSAxIC8qIE5vbmUgKi87XG4gICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kZWQpXG4gICAgICAgICAgICB0aGlzLmNicy5vbmVycm9yKEVycm9yKFwiLndyaXRlKCkgYWZ0ZXIgZG9uZSFcIikpO1xuICAgICAgICB0aGlzLmJ1ZmZlciArPSBjaHVuaztcbiAgICAgICAgdGhpcy5wYXJzZSgpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kZWQpXG4gICAgICAgICAgICB0aGlzLmNicy5vbmVycm9yKEVycm9yKFwiLmVuZCgpIGFmdGVyIGRvbmUhXCIpKTtcbiAgICAgICAgaWYgKGNodW5rKVxuICAgICAgICAgICAgdGhpcy53cml0ZShjaHVuayk7XG4gICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5ydW5uaW5nKVxuICAgICAgICAgICAgdGhpcy5maW5pc2goKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl9pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBpbmRleCB3aXRoaW4gYWxsIG9mIHRoZSB3cml0dGVuIGRhdGEuXG4gICAgICovXG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5nZXRBYnNvbHV0ZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJPZmZzZXQgKyB0aGlzLl9pbmRleDtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVUZXh0ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPFwiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPiB0aGlzLnNlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh0aGlzLmdldFNlY3Rpb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDIgLyogQmVmb3JlVGFnTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWNvZGVFbnRpdGllcyAmJlxuICAgICAgICAgICAgYyA9PT0gXCImXCIgJiZcbiAgICAgICAgICAgICh0aGlzLnNwZWNpYWwgPT09IDEgLyogTm9uZSAqLyB8fCB0aGlzLnNwZWNpYWwgPT09IDQgLyogVGl0bGUgKi8pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPiB0aGlzLnNlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh0aGlzLmdldFNlY3Rpb24oKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNjIgLyogQmVmb3JlRW50aXR5ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZVRhZ05hbWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCIvXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNSAvKiBCZWZvcmVDbG9zaW5nVGFnTmFtZSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gXCI+XCIgfHxcbiAgICAgICAgICAgIHRoaXMuc3BlY2lhbCAhPT0gMSAvKiBOb25lICovIHx8XG4gICAgICAgICAgICB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIiFcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxNSAvKiBCZWZvcmVEZWNsYXJhdGlvbiAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE3IC8qIEluUHJvY2Vzc2luZ0luc3RydWN0aW9uICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzQVNDSUlBbHBoYShjKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9XG4gICAgICAgICAgICAgICAgIXRoaXMueG1sTW9kZSAmJiAoYyA9PT0gXCJzXCIgfHwgYyA9PT0gXCJTXCIpXG4gICAgICAgICAgICAgICAgICAgID8gMzIgLyogQmVmb3JlU3BlY2lhbFMgKi9cbiAgICAgICAgICAgICAgICAgICAgOiAhdGhpcy54bWxNb2RlICYmIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gNTIgLyogQmVmb3JlU3BlY2lhbFQgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIDogMyAvKiBJblRhZ05hbWUgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5UYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFRva2VuKFwib25vcGVudGFnbmFtZVwiKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUNsb3NpbmdUYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNwZWNpYWwgIT09IDEgLyogTm9uZSAqLykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3BlY2lhbCAhPT0gNCAvKiBUaXRsZSAqLyAmJiAoYyA9PT0gXCJzXCIgfHwgYyA9PT0gXCJTXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAzMyAvKiBCZWZvcmVTcGVjaWFsU0VuZCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc3BlY2lhbCA9PT0gNCAvKiBUaXRsZSAqLyAmJlxuICAgICAgICAgICAgICAgIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDUzIC8qIEJlZm9yZVNwZWNpYWxURW5kICovO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNBU0NJSUFscGhhKGMpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDIwIC8qIEluU3BlY2lhbENvbW1lbnQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA2IC8qIEluQ2xvc2luZ1RhZ05hbWUgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5DbG9zaW5nVGFnTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRUb2tlbihcIm9uY2xvc2V0YWdcIik7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDcgLyogQWZ0ZXJDbG9zaW5nVGFnTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgLy8gU2tpcCBldmVyeXRoaW5nIHVudGlsIFwiPlwiXG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ub3BlbnRhZ2VuZCgpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIi9cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA0IC8qIEluU2VsZkNsb3NpbmdUYWcgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOSAvKiBJbkF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5TZWxmQ2xvc2luZ1RhZyA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25zZWxmY2xvc2luZ3RhZygpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgICAgIHRoaXMuc3BlY2lhbCA9IDEgLyogTm9uZSAqLzsgLy8gUmVzZXQgc3BlY2lhbCBzdGF0ZSwgaW4gY2FzZSBvZiBzZWxmLWNsb3Npbmcgc3BlY2lhbCB0YWdzXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj1cIiB8fCBjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYm5hbWUodGhpcy5nZXRTZWN0aW9uKCkpO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMTAgLyogQWZ0ZXJBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUFmdGVyQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj1cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxMSAvKiBCZWZvcmVBdHRyaWJ1dGVWYWx1ZSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOSAvKiBJbkF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gJ1wiJykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxMiAvKiBJbkF0dHJpYnV0ZVZhbHVlRHEgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcIidcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxMyAvKiBJbkF0dHJpYnV0ZVZhbHVlU3EgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxNCAvKiBJbkF0dHJpYnV0ZVZhbHVlTnEgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTsgLy8gUmVjb25zdW1lIHRva2VuXG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuaGFuZGxlSW5BdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uIChjLCBxdW90ZSkge1xuICAgICAgICBpZiAoYyA9PT0gcXVvdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQocXVvdGUpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA4IC8qIEJlZm9yZUF0dHJpYnV0ZU5hbWUgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWNvZGVFbnRpdGllcyAmJiBjID09PSBcIiZcIikge1xuICAgICAgICAgICAgdGhpcy5lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9IHRoaXMuX3N0YXRlO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA2MiAvKiBCZWZvcmVFbnRpdHkgKi87XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5BdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlcyA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlSW5BdHRyaWJ1dGVWYWx1ZShjLCAnXCInKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVJbkF0dHJpYnV0ZVZhbHVlKGMsIFwiJ1wiKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlTm9RdW90ZXMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAod2hpdGVzcGFjZShjKSB8fCBjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZChudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gOCAvKiBCZWZvcmVBdHRyaWJ1dGVOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRlY29kZUVudGl0aWVzICYmIGMgPT09IFwiJlwiKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDYyIC8qIEJlZm9yZUVudGl0eSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID1cbiAgICAgICAgICAgIGMgPT09IFwiW1wiXG4gICAgICAgICAgICAgICAgPyAyMyAvKiBCZWZvcmVDZGF0YTEgKi9cbiAgICAgICAgICAgICAgICA6IGMgPT09IFwiLVwiXG4gICAgICAgICAgICAgICAgICAgID8gMTggLyogQmVmb3JlQ29tbWVudCAqL1xuICAgICAgICAgICAgICAgICAgICA6IDE2IC8qIEluRGVjbGFyYXRpb24gKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5EZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICAgICAgdGhpcy5jYnMub25kZWNsYXJhdGlvbih0aGlzLmdldFNlY3Rpb24oKSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMSAvKiBUZXh0ICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVDb21tZW50ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE5IC8qIEluQ29tbWVudCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxNiAvKiBJbkRlY2xhcmF0aW9uICovO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5Db21tZW50ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiLVwiKVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAyMSAvKiBBZnRlckNvbW1lbnQxICovO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluU3BlY2lhbENvbW1lbnQgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY29tbWVudCh0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4KSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJDb21tZW50MSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIi1cIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAyMiAvKiBBZnRlckNvbW1lbnQyICovO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxOSAvKiBJbkNvbW1lbnQgKi87XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVBZnRlckNvbW1lbnQyID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgMiB0cmFpbGluZyBjaGFyc1xuICAgICAgICAgICAgdGhpcy5jYnMub25jb21tZW50KHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5faW5kZXggLSAyKSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IFwiLVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE5IC8qIEluQ29tbWVudCAqLztcbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlOiBzdGF5IGluIEFGVEVSX0NPTU1FTlRfMiAoYC0tLT5gKVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUNkYXRhNiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIltcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAyOSAvKiBJbkNkYXRhICovO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDE2IC8qIEluRGVjbGFyYXRpb24gKi87XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5DZGF0YSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBcIl1cIilcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMzAgLyogQWZ0ZXJDZGF0YTEgKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJDZGF0YTEgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCJdXCIpXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDMxIC8qIEFmdGVyQ2RhdGEyICovO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDI5IC8qIEluQ2RhdGEgKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJDZGF0YTIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSAyIHRyYWlsaW5nIGNoYXJzXG4gICAgICAgICAgICB0aGlzLmNicy5vbmNkYXRhKHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5faW5kZXggLSAyKSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDEgLyogVGV4dCAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IFwiXVwiKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDI5IC8qIEluQ2RhdGEgKi87XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZTogc3RheSBpbiBBRlRFUl9DREFUQV8yIChgXV1dPmApXG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlU3BlY2lhbFMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCJjXCIgfHwgYyA9PT0gXCJDXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gMzQgLyogQmVmb3JlU2NyaXB0MSAqLztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSA0NCAvKiBCZWZvcmVTdHlsZTEgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDMgLyogSW5UYWdOYW1lICovO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTsgLy8gQ29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZVNwZWNpYWxTRW5kID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKHRoaXMuc3BlY2lhbCA9PT0gMiAvKiBTY3JpcHQgKi8gJiYgKGMgPT09IFwiY1wiIHx8IGMgPT09IFwiQ1wiKSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAzOSAvKiBBZnRlclNjcmlwdDEgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zcGVjaWFsID09PSAzIC8qIFN0eWxlICovICYmIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIikpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gNDggLyogQWZ0ZXJTdHlsZTEgKi87XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlU3BlY2lhbExhc3QgPSBmdW5jdGlvbiAoYywgc3BlY2lhbCkge1xuICAgICAgICBpZiAoYyA9PT0gXCIvXCIgfHwgYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5zcGVjaWFsID0gc3BlY2lhbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZSA9IDMgLyogSW5UYWdOYW1lICovO1xuICAgICAgICB0aGlzLl9pbmRleC0tOyAvLyBDb25zdW1lIHRoZSB0b2tlbiBhZ2FpblxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUFmdGVyU3BlY2lhbExhc3QgPSBmdW5jdGlvbiAoYywgc2VjdGlvblN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgIGlmIChjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLnNwZWNpYWwgPSAxIC8qIE5vbmUgKi87XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDYgLyogSW5DbG9zaW5nVGFnTmFtZSAqLztcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggLSBzZWN0aW9uU3RhcnRPZmZzZXQ7XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tOyAvLyBSZWNvbnN1bWUgdGhlIHRva2VuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAxIC8qIFRleHQgKi87XG4gICAgfTtcbiAgICAvLyBGb3IgZW50aXRpZXMgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uXG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5wYXJzZUZpeGVkRW50aXR5ID0gZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICBpZiAobWFwID09PSB2b2lkIDApIHsgbWFwID0gdGhpcy54bWxNb2RlID8geG1sX2pzb25fMS5kZWZhdWx0IDogZW50aXRpZXNfanNvbl8xLmRlZmF1bHQ7IH1cbiAgICAgICAgLy8gT2Zmc2V0ID0gMVxuICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgKyAxIDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5zZWN0aW9uU3RhcnQgKyAxLCB0aGlzLl9pbmRleCk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1hcCwgZW50aXR5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFBhcnRpYWwobWFwW2VudGl0eV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBQYXJzZXMgbGVnYWN5IGVudGl0aWVzICh3aXRob3V0IHRyYWlsaW5nIHNlbWljb2xvbilcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnBhcnNlTGVnYWN5RW50aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNlY3Rpb25TdGFydCArIDE7XG4gICAgICAgIC8vIFRoZSBtYXggbGVuZ3RoIG9mIGxlZ2FjeSBlbnRpdGllcyBpcyA2XG4gICAgICAgIHZhciBsaW1pdCA9IE1hdGgubWluKHRoaXMuX2luZGV4IC0gc3RhcnQsIDYpO1xuICAgICAgICB3aGlsZSAobGltaXQgPj0gMikge1xuICAgICAgICAgICAgLy8gVGhlIG1pbiBsZW5ndGggb2YgbGVnYWN5IGVudGl0aWVzIGlzIDJcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSB0aGlzLmJ1ZmZlci5zdWJzdHIoc3RhcnQsIGxpbWl0KTtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobGVnYWN5X2pzb25fMS5kZWZhdWx0LCBlbnRpdHkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UGFydGlhbChsZWdhY3lfanNvbl8xLmRlZmF1bHRbZW50aXR5XSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgKz0gbGltaXQgKyAxO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbWl0LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbk5hbWVkRW50aXR5ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IFwiO1wiKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlRml4ZWRFbnRpdHkoKTtcbiAgICAgICAgICAgIC8vIFJldHJ5IGFzIGxlZ2FjeSBlbnRpdHkgaWYgZW50aXR5IHdhc24ndCBwYXJzZWRcbiAgICAgICAgICAgIGlmICh0aGlzLmJhc2VTdGF0ZSA9PT0gMSAvKiBUZXh0ICovICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgKyAxIDwgdGhpcy5faW5kZXggJiZcbiAgICAgICAgICAgICAgICAhdGhpcy54bWxNb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYXJzZUxlZ2FjeUVudGl0eSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIikgJiYgIWlzQVNDSUlBbHBoYShjKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMueG1sTW9kZSB8fCB0aGlzLnNlY3Rpb25TdGFydCArIDEgPT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmJhc2VTdGF0ZSAhPT0gMSAvKiBUZXh0ICovKSB7XG4gICAgICAgICAgICAgICAgaWYgKGMgIT09IFwiPVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIGFzIGxlZ2FjeSBlbnRpdHksIHdpdGhvdXQgYWxsb3dpbmcgYWRkaXRpb25hbCBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlRml4ZWRFbnRpdHkobGVnYWN5X2pzb25fMS5kZWZhdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlTGVnYWN5RW50aXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuYmFzZVN0YXRlO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5kZWNvZGVOdW1lcmljRW50aXR5ID0gZnVuY3Rpb24gKG9mZnNldCwgYmFzZSwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBzZWN0aW9uU3RhcnQgPSB0aGlzLnNlY3Rpb25TdGFydCArIG9mZnNldDtcbiAgICAgICAgaWYgKHNlY3Rpb25TdGFydCAhPT0gdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIC8vIFBhcnNlIGVudGl0eVxuICAgICAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuYnVmZmVyLnN1YnN0cmluZyhzZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4KTtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChlbnRpdHksIGJhc2UpO1xuICAgICAgICAgICAgdGhpcy5lbWl0UGFydGlhbChkZWNvZGVfY29kZXBvaW50XzEuZGVmYXVsdChwYXJzZWQpKTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gc3RyaWN0ID8gdGhpcy5faW5kZXggKyAxIDogdGhpcy5faW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbk51bWVyaWNFbnRpdHkgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI7XCIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlTnVtZXJpY0VudGl0eSgyLCAxMCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnhtbE1vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29kZU51bWVyaWNFbnRpdHkoMiwgMTAsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5IZXhFbnRpdHkgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gXCI7XCIpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlTnVtZXJpY0VudGl0eSgzLCAxNiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKGMgPCBcImFcIiB8fCBjID4gXCJmXCIpICYmXG4gICAgICAgICAgICAoYyA8IFwiQVwiIHx8IGMgPiBcIkZcIikgJiZcbiAgICAgICAgICAgIChjIDwgXCIwXCIgfHwgYyA+IFwiOVwiKSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnhtbE1vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29kZU51bWVyaWNFbnRpdHkoMywgMTYsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMucnVubmluZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSAxIC8qIFRleHQgKi8pIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWN0aW9uU3RhcnQgIT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5zZWN0aW9uU3RhcnQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ICs9IHRoaXMuX2luZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuc2VjdGlvblN0YXJ0ID09PSB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBzZWN0aW9uIGp1c3Qgc3RhcnRlZFxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCArPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZXZlcnl0aGluZyB1bm5lY2Vzc2FyeVxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMuc2VjdGlvblN0YXJ0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCAtPSB0aGlzLnNlY3Rpb25TdGFydDtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCArPSB0aGlzLnNlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgdGhyb3VnaCB0aGUgYnVmZmVyLCBjYWxsaW5nIHRoZSBmdW5jdGlvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBjdXJyZW50IHN0YXRlLlxuICAgICAqXG4gICAgICogU3RhdGVzIHRoYXQgYXJlIG1vcmUgbGlrZWx5IHRvIGJlIGhpdCBhcmUgaGlnaGVyIHVwLCBhcyBhIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LlxuICAgICAqL1xuICAgIFRva2VuaXplci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCAmJiB0aGlzLnJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHZhciBjID0gdGhpcy5idWZmZXIuY2hhckF0KHRoaXMuX2luZGV4KTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gMSAvKiBUZXh0ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVRleHQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTIgLyogSW5BdHRyaWJ1dGVWYWx1ZURxICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gOSAvKiBJbkF0dHJpYnV0ZU5hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE5IC8qIEluQ29tbWVudCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkNvbW1lbnQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMjAgLyogSW5TcGVjaWFsQ29tbWVudCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJblNwZWNpYWxDb21tZW50KGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDggLyogQmVmb3JlQXR0cmlidXRlTmFtZSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDMgLyogSW5UYWdOYW1lICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluVGFnTmFtZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2IC8qIEluQ2xvc2luZ1RhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5DbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyIC8qIEJlZm9yZVRhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlVGFnTmFtZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAxMCAvKiBBZnRlckF0dHJpYnV0ZU5hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDEzIC8qIEluQXR0cmlidXRlVmFsdWVTcSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDExIC8qIEJlZm9yZUF0dHJpYnV0ZVZhbHVlICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJpYnV0ZVZhbHVlKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDUgLyogQmVmb3JlQ2xvc2luZ1RhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNyAvKiBBZnRlckNsb3NpbmdUYWdOYW1lICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQ2xvc2luZ1RhZ05hbWUoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzIgLyogQmVmb3JlU3BlY2lhbFMgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlU3BlY2lhbFMoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMjEgLyogQWZ0ZXJDb21tZW50MSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckNvbW1lbnQxKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE0IC8qIEluQXR0cmlidXRlVmFsdWVOcSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlTm9RdW90ZXMoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNCAvKiBJblNlbGZDbG9zaW5nVGFnICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluU2VsZkNsb3NpbmdUYWcoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMTYgLyogSW5EZWNsYXJhdGlvbiAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkRlY2xhcmF0aW9uKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE1IC8qIEJlZm9yZURlY2xhcmF0aW9uICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZURlY2xhcmF0aW9uKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDIyIC8qIEFmdGVyQ29tbWVudDIgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJDb21tZW50MihjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAxOCAvKiBCZWZvcmVDb21tZW50ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUNvbW1lbnQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzMgLyogQmVmb3JlU3BlY2lhbFNFbmQgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlU3BlY2lhbFNFbmQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTMgLyogQmVmb3JlU3BlY2lhbFRFbmQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU3BlY2lhbFRFbmQodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzkgLyogQWZ0ZXJTY3JpcHQxICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclNjcmlwdDEodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDAgLyogQWZ0ZXJTY3JpcHQyICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclNjcmlwdDIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDEgLyogQWZ0ZXJTY3JpcHQzICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclNjcmlwdDModGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzQgLyogQmVmb3JlU2NyaXB0MSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlU2NyaXB0MSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzNSAvKiBCZWZvcmVTY3JpcHQyICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVTY3JpcHQyKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDM2IC8qIEJlZm9yZVNjcmlwdDMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVNjcmlwdDModGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gMzcgLyogQmVmb3JlU2NyaXB0NCAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlU2NyaXB0NCh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzOCAvKiBCZWZvcmVTY3JpcHQ1ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxMYXN0KGMsIDIgLyogU2NyaXB0ICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0MiAvKiBBZnRlclNjcmlwdDQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU2NyaXB0NCh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0MyAvKiBBZnRlclNjcmlwdDUgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJTcGVjaWFsTGFzdChjLCA2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0NCAvKiBCZWZvcmVTdHlsZTEgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVN0eWxlMSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyOSAvKiBJbkNkYXRhICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQ2RhdGEoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDUgLyogQmVmb3JlU3R5bGUyICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVTdHlsZTIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDYgLyogQmVmb3JlU3R5bGUzICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVTdHlsZTModGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNDcgLyogQmVmb3JlU3R5bGU0ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxMYXN0KGMsIDMgLyogU3R5bGUgKi8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDQ4IC8qIEFmdGVyU3R5bGUxICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclN0eWxlMSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA0OSAvKiBBZnRlclN0eWxlMiAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQWZ0ZXJTdHlsZTIodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTAgLyogQWZ0ZXJTdHlsZTMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyU3R5bGUzKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDUxIC8qIEFmdGVyU3R5bGU0ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyU3BlY2lhbExhc3QoYywgNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTIgLyogQmVmb3JlU3BlY2lhbFQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZVNwZWNpYWxUKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU0IC8qIEJlZm9yZVRpdGxlMSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlVGl0bGUxKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU1IC8qIEJlZm9yZVRpdGxlMiAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlVGl0bGUyKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU2IC8qIEJlZm9yZVRpdGxlMyAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQmVmb3JlVGl0bGUzKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDU3IC8qIEJlZm9yZVRpdGxlNCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVTcGVjaWFsTGFzdChjLCA0IC8qIFRpdGxlICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA1OCAvKiBBZnRlclRpdGxlMSAqLykge1xuICAgICAgICAgICAgICAgIHN0YXRlQWZ0ZXJUaXRsZTEodGhpcywgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gNTkgLyogQWZ0ZXJUaXRsZTIgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUFmdGVyVGl0bGUyKHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDYwIC8qIEFmdGVyVGl0bGUzICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVBZnRlclRpdGxlMyh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2MSAvKiBBZnRlclRpdGxlNCAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlclNwZWNpYWxMYXN0KGMsIDUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE3IC8qIEluUHJvY2Vzc2luZ0luc3RydWN0aW9uICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uKGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY0IC8qIEluTmFtZWRFbnRpdHkgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5OYW1lZEVudGl0eShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyMyAvKiBCZWZvcmVDZGF0YTEgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhMSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2MiAvKiBCZWZvcmVFbnRpdHkgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUVudGl0eSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyNCAvKiBCZWZvcmVDZGF0YTIgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhMih0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyNSAvKiBCZWZvcmVDZGF0YTMgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhMyh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzMCAvKiBBZnRlckNkYXRhMSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckNkYXRhMShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAzMSAvKiBBZnRlckNkYXRhMiAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckNkYXRhMihjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyNiAvKiBCZWZvcmVDZGF0YTQgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhNCh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyNyAvKiBCZWZvcmVDZGF0YTUgKi8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZUJlZm9yZUNkYXRhNSh0aGlzLCBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSAyOCAvKiBCZWZvcmVDZGF0YTYgKi8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQ2RhdGE2KGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY2IC8qIEluSGV4RW50aXR5ICovKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluSGV4RW50aXR5KGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY1IC8qIEluTnVtZXJpY0VudGl0eSAqLykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbk51bWVyaWNFbnRpdHkoYyk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2MyAvKiBCZWZvcmVOdW1lcmljRW50aXR5ICovKSB7XG4gICAgICAgICAgICAgICAgc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5KHRoaXMsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub25lcnJvcihFcnJvcihcInVua25vd24gX3N0YXRlXCIpLCB0aGlzLl9zdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9pbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIHRoZXJlIGlzIHJlbWFpbmluZyBkYXRhLCBlbWl0IGl0IGluIGEgcmVhc29uYWJsZSB3YXlcbiAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYnMub25lbmQoKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuaGFuZGxlVHJhaWxpbmdEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnNlY3Rpb25TdGFydCk7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSA9PT0gMjkgLyogSW5DZGF0YSAqLyB8fFxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPT09IDMwIC8qIEFmdGVyQ2RhdGExICovIHx8XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gMzEgLyogQWZ0ZXJDZGF0YTIgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY2RhdGEoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDE5IC8qIEluQ29tbWVudCAqLyB8fFxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPT09IDIxIC8qIEFmdGVyQ29tbWVudDEgKi8gfHxcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID09PSAyMiAvKiBBZnRlckNvbW1lbnQyICovKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmNvbW1lbnQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY0IC8qIEluTmFtZWRFbnRpdHkgKi8gJiYgIXRoaXMueG1sTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZUxlZ2FjeUVudGl0eSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHRoaXMuYmFzZVN0YXRlO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IDY1IC8qIEluTnVtZXJpY0VudGl0eSAqLyAmJiAhdGhpcy54bWxNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29kZU51bWVyaWNFbnRpdHkoMiwgMTAsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA8IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRyYWlsaW5nRGF0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSA2NiAvKiBJbkhleEVudGl0eSAqLyAmJiAhdGhpcy54bWxNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29kZU51bWVyaWNFbnRpdHkoMywgMTYsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA8IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVRyYWlsaW5nRGF0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3N0YXRlICE9PSAzIC8qIEluVGFnTmFtZSAqLyAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgIT09IDggLyogQmVmb3JlQXR0cmlidXRlTmFtZSAqLyAmJlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgIT09IDExIC8qIEJlZm9yZUF0dHJpYnV0ZVZhbHVlICovICYmXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gMTAgLyogQWZ0ZXJBdHRyaWJ1dGVOYW1lICovICYmXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gOSAvKiBJbkF0dHJpYnV0ZU5hbWUgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSAxMyAvKiBJbkF0dHJpYnV0ZVZhbHVlU3EgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSAxMiAvKiBJbkF0dHJpYnV0ZVZhbHVlRHEgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSAxNCAvKiBJbkF0dHJpYnV0ZVZhbHVlTnEgKi8gJiZcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlICE9PSA2IC8qIEluQ2xvc2luZ1RhZ05hbWUgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dChkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICAgKiBFbHNlLCBpZ25vcmUgcmVtYWluaW5nIGRhdGFcbiAgICAgICAgICogVE9ETyBhZGQgYSB3YXkgdG8gcmVtb3ZlIGN1cnJlbnQgdGFnXG4gICAgICAgICAqL1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5nZXRTZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuc3Vic3RyaW5nKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLl9pbmRleCk7XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmVtaXRUb2tlbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHRoaXMuY2JzW25hbWVdKHRoaXMuZ2V0U2VjdGlvbigpKTtcbiAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuZW1pdFBhcnRpYWwgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVN0YXRlICE9PSAxIC8qIFRleHQgKi8pIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZGF0YSh2YWx1ZSk7IC8vIFRPRE8gaW1wbGVtZW50IHRoZSBuZXcgZXZlbnRcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUb2tlbml6ZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gVG9rZW5pemVyO1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJzZXIgPSB2b2lkIDA7XG52YXIgVG9rZW5pemVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vVG9rZW5pemVyXCIpKTtcbnZhciBmb3JtVGFncyA9IG5ldyBTZXQoW1xuICAgIFwiaW5wdXRcIixcbiAgICBcIm9wdGlvblwiLFxuICAgIFwib3B0Z3JvdXBcIixcbiAgICBcInNlbGVjdFwiLFxuICAgIFwiYnV0dG9uXCIsXG4gICAgXCJkYXRhbGlzdFwiLFxuICAgIFwidGV4dGFyZWFcIixcbl0pO1xudmFyIHBUYWcgPSBuZXcgU2V0KFtcInBcIl0pO1xudmFyIG9wZW5JbXBsaWVzQ2xvc2UgPSB7XG4gICAgdHI6IG5ldyBTZXQoW1widHJcIiwgXCJ0aFwiLCBcInRkXCJdKSxcbiAgICB0aDogbmV3IFNldChbXCJ0aFwiXSksXG4gICAgdGQ6IG5ldyBTZXQoW1widGhlYWRcIiwgXCJ0aFwiLCBcInRkXCJdKSxcbiAgICBib2R5OiBuZXcgU2V0KFtcImhlYWRcIiwgXCJsaW5rXCIsIFwic2NyaXB0XCJdKSxcbiAgICBsaTogbmV3IFNldChbXCJsaVwiXSksXG4gICAgcDogcFRhZyxcbiAgICBoMTogcFRhZyxcbiAgICBoMjogcFRhZyxcbiAgICBoMzogcFRhZyxcbiAgICBoNDogcFRhZyxcbiAgICBoNTogcFRhZyxcbiAgICBoNjogcFRhZyxcbiAgICBzZWxlY3Q6IGZvcm1UYWdzLFxuICAgIGlucHV0OiBmb3JtVGFncyxcbiAgICBvdXRwdXQ6IGZvcm1UYWdzLFxuICAgIGJ1dHRvbjogZm9ybVRhZ3MsXG4gICAgZGF0YWxpc3Q6IGZvcm1UYWdzLFxuICAgIHRleHRhcmVhOiBmb3JtVGFncyxcbiAgICBvcHRpb246IG5ldyBTZXQoW1wib3B0aW9uXCJdKSxcbiAgICBvcHRncm91cDogbmV3IFNldChbXCJvcHRncm91cFwiLCBcIm9wdGlvblwiXSksXG4gICAgZGQ6IG5ldyBTZXQoW1wiZHRcIiwgXCJkZFwiXSksXG4gICAgZHQ6IG5ldyBTZXQoW1wiZHRcIiwgXCJkZFwiXSksXG4gICAgYWRkcmVzczogcFRhZyxcbiAgICBhcnRpY2xlOiBwVGFnLFxuICAgIGFzaWRlOiBwVGFnLFxuICAgIGJsb2NrcXVvdGU6IHBUYWcsXG4gICAgZGV0YWlsczogcFRhZyxcbiAgICBkaXY6IHBUYWcsXG4gICAgZGw6IHBUYWcsXG4gICAgZmllbGRzZXQ6IHBUYWcsXG4gICAgZmlnY2FwdGlvbjogcFRhZyxcbiAgICBmaWd1cmU6IHBUYWcsXG4gICAgZm9vdGVyOiBwVGFnLFxuICAgIGZvcm06IHBUYWcsXG4gICAgaGVhZGVyOiBwVGFnLFxuICAgIGhyOiBwVGFnLFxuICAgIG1haW46IHBUYWcsXG4gICAgbmF2OiBwVGFnLFxuICAgIG9sOiBwVGFnLFxuICAgIHByZTogcFRhZyxcbiAgICBzZWN0aW9uOiBwVGFnLFxuICAgIHRhYmxlOiBwVGFnLFxuICAgIHVsOiBwVGFnLFxuICAgIHJ0OiBuZXcgU2V0KFtcInJ0XCIsIFwicnBcIl0pLFxuICAgIHJwOiBuZXcgU2V0KFtcInJ0XCIsIFwicnBcIl0pLFxuICAgIHRib2R5OiBuZXcgU2V0KFtcInRoZWFkXCIsIFwidGJvZHlcIl0pLFxuICAgIHRmb290OiBuZXcgU2V0KFtcInRoZWFkXCIsIFwidGJvZHlcIl0pLFxufTtcbnZhciB2b2lkRWxlbWVudHMgPSBuZXcgU2V0KFtcbiAgICBcImFyZWFcIixcbiAgICBcImJhc2VcIixcbiAgICBcImJhc2Vmb250XCIsXG4gICAgXCJiclwiLFxuICAgIFwiY29sXCIsXG4gICAgXCJjb21tYW5kXCIsXG4gICAgXCJlbWJlZFwiLFxuICAgIFwiZnJhbWVcIixcbiAgICBcImhyXCIsXG4gICAgXCJpbWdcIixcbiAgICBcImlucHV0XCIsXG4gICAgXCJpc2luZGV4XCIsXG4gICAgXCJrZXlnZW5cIixcbiAgICBcImxpbmtcIixcbiAgICBcIm1ldGFcIixcbiAgICBcInBhcmFtXCIsXG4gICAgXCJzb3VyY2VcIixcbiAgICBcInRyYWNrXCIsXG4gICAgXCJ3YnJcIixcbl0pO1xudmFyIGZvcmVpZ25Db250ZXh0RWxlbWVudHMgPSBuZXcgU2V0KFtcIm1hdGhcIiwgXCJzdmdcIl0pO1xudmFyIGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzID0gbmV3IFNldChbXG4gICAgXCJtaVwiLFxuICAgIFwibW9cIixcbiAgICBcIm1uXCIsXG4gICAgXCJtc1wiLFxuICAgIFwibXRleHRcIixcbiAgICBcImFubm90YXRpb24teG1sXCIsXG4gICAgXCJmb3JlaWduT2JqZWN0XCIsXG4gICAgXCJkZXNjXCIsXG4gICAgXCJ0aXRsZVwiLFxuXSk7XG52YXIgcmVOYW1lRW5kID0gL1xcc3xcXC8vO1xudmFyIFBhcnNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQYXJzZXIoY2JzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2U7XG4gICAgICAgIC8qKiBUaGUgc3RhcnQgaW5kZXggb2YgdGhlIGxhc3QgZXZlbnQuICovXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIC8qKiBUaGUgZW5kIGluZGV4IG9mIHRoZSBsYXN0IGV2ZW50LiAqL1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gbnVsbDtcbiAgICAgICAgdGhpcy50YWduYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuYXR0cmlicyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dCA9IFtdO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNicyA9IGNicyAhPT0gbnVsbCAmJiBjYnMgIT09IHZvaWQgMCA/IGNicyA6IHt9O1xuICAgICAgICB0aGlzLmxvd2VyQ2FzZVRhZ05hbWVzID0gKF9hID0gb3B0aW9ucy5sb3dlckNhc2VUYWdzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAhb3B0aW9ucy54bWxNb2RlO1xuICAgICAgICB0aGlzLmxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzID1cbiAgICAgICAgICAgIChfYiA9IG9wdGlvbnMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICFvcHRpb25zLnhtbE1vZGU7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gbmV3ICgoX2MgPSBvcHRpb25zLlRva2VuaXplcikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogVG9rZW5pemVyXzEuZGVmYXVsdCkodGhpcy5vcHRpb25zLCB0aGlzKTtcbiAgICAgICAgKF9lID0gKF9kID0gdGhpcy5jYnMpLm9ucGFyc2VyaW5pdCkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmNhbGwoX2QsIHRoaXMpO1xuICAgIH1cbiAgICBQYXJzZXIucHJvdG90eXBlLnVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKGluaXRpYWxPZmZzZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5kSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRva2VuaXplci5zZWN0aW9uU3RhcnQgPD0gaW5pdGlhbE9mZnNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLnRva2VuaXplci5zZWN0aW9uU3RhcnQgLSBpbml0aWFsT2Zmc2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gdGhpcy5lbmRJbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IHRoaXMudG9rZW5pemVyLmdldEFic29sdXRlSW5kZXgoKTtcbiAgICB9O1xuICAgIC8vIFRva2VuaXplciBldmVudCBoYW5kbGVyc1xuICAgIFBhcnNlci5wcm90b3R5cGUub250ZXh0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbigxKTtcbiAgICAgICAgdGhpcy5lbmRJbmRleC0tO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub250ZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZGF0YSk7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9ub3BlbnRhZ25hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhZ25hbWUgPSBuYW1lO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy54bWxNb2RlICYmXG4gICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3BlbkltcGxpZXNDbG9zZSwgbmFtZSkpIHtcbiAgICAgICAgICAgIHZhciBlbCA9IHZvaWQgMDtcbiAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICBvcGVuSW1wbGllc0Nsb3NlW25hbWVdLmhhcygoZWwgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0pKSkge1xuICAgICAgICAgICAgICAgIHRoaXMub25jbG9zZXRhZyhlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy54bWxNb2RlIHx8ICF2b2lkRWxlbWVudHMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2gobmFtZSk7XG4gICAgICAgICAgICBpZiAoZm9yZWlnbkNvbnRleHRFbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0LnB1c2godHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChodG1sSW50ZWdyYXRpb25FbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0LnB1c2goZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbm9wZW50YWduYW1lKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgbmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbm9wZW50YWcpXG4gICAgICAgICAgICB0aGlzLmF0dHJpYnMgPSB7fTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25vcGVudGFnZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKDEpO1xuICAgICAgICBpZiAodGhpcy5hdHRyaWJzKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25vcGVudGFnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcy50YWduYW1lLCB0aGlzLmF0dHJpYnMpO1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy54bWxNb2RlICYmXG4gICAgICAgICAgICB0aGlzLmNicy5vbmNsb3NldGFnICYmXG4gICAgICAgICAgICB2b2lkRWxlbWVudHMuaGFzKHRoaXMudGFnbmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY2xvc2V0YWcodGhpcy50YWduYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRhZ25hbWUgPSBcIlwiO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmNsb3NldGFnID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbigxKTtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcmVpZ25Db250ZXh0RWxlbWVudHMuaGFzKG5hbWUpIHx8XG4gICAgICAgICAgICBodG1sSW50ZWdyYXRpb25FbGVtZW50cy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoICYmXG4gICAgICAgICAgICAodGhpcy5vcHRpb25zLnhtbE1vZGUgfHwgIXZvaWRFbGVtZW50cy5oYXMobmFtZSkpKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5zdGFjay5sYXN0SW5kZXhPZihuYW1lKTtcbiAgICAgICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2JzLm9uY2xvc2V0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zID0gdGhpcy5zdGFjay5sZW5ndGggLSBwb3M7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwb3MtLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Uga25vdyB0aGUgc3RhY2sgaGFzIHN1ZmZpY2llbnQgZWxlbWVudHMuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNicy5vbmNsb3NldGFnKHRoaXMuc3RhY2sucG9wKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuYW1lID09PSBcInBcIiAmJiAhdGhpcy5vcHRpb25zLnhtbE1vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ub3BlbnRhZ25hbWUobmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRUYWcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5vcHRpb25zLnhtbE1vZGUgJiYgKG5hbWUgPT09IFwiYnJcIiB8fCBuYW1lID09PSBcInBcIikpIHtcbiAgICAgICAgICAgIHRoaXMub25vcGVudGFnbmFtZShuYW1lKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VDdXJyZW50VGFnKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25zZWxmY2xvc2luZ3RhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy54bWxNb2RlIHx8XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucmVjb2duaXplU2VsZkNsb3NpbmcgfHxcbiAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHRbdGhpcy5mb3JlaWduQ29udGV4dC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUN1cnJlbnRUYWcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25vcGVudGFnZW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuY2xvc2VDdXJyZW50VGFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMudGFnbmFtZTtcbiAgICAgICAgdGhpcy5vbm9wZW50YWdlbmQoKTtcbiAgICAgICAgLypcbiAgICAgICAgICogU2VsZi1jbG9zaW5nIHRhZ3Mgd2lsbCBiZSBvbiB0aGUgdG9wIG9mIHRoZSBzdGFja1xuICAgICAgICAgKiAoY2hlYXBlciBjaGVjayB0aGFuIGluIG9uY2xvc2V0YWcpXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdID09PSBuYW1lKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jbG9zZXRhZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIG5hbWUpO1xuICAgICAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYm5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYm5hbWUgPSBuYW1lO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYmRhdGEgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSArPSB2YWx1ZTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25hdHRyaWJlbmQgPSBmdW5jdGlvbiAocXVvdGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uYXR0cmlidXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdGhpcy5hdHRyaWJuYW1lLCB0aGlzLmF0dHJpYnZhbHVlLCBxdW90ZSk7XG4gICAgICAgIGlmICh0aGlzLmF0dHJpYnMgJiZcbiAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJzLCB0aGlzLmF0dHJpYm5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHJpYnNbdGhpcy5hdHRyaWJuYW1lXSA9IHRoaXMuYXR0cmlidmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSA9IFwiXCI7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLmdldEluc3RydWN0aW9uTmFtZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgaWR4ID0gdmFsdWUuc2VhcmNoKHJlTmFtZUVuZCk7XG4gICAgICAgIHZhciBuYW1lID0gaWR4IDwgMCA/IHZhbHVlIDogdmFsdWUuc3Vic3RyKDAsIGlkeCk7XG4gICAgICAgIGlmICh0aGlzLmxvd2VyQ2FzZVRhZ05hbWVzKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmRlY2xhcmF0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgdmFyIG5hbWVfMSA9IHRoaXMuZ2V0SW5zdHJ1Y3Rpb25OYW1lKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKFwiIVwiICsgbmFtZV8xLCBcIiFcIiArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5jYnMub25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBuYW1lXzIgPSB0aGlzLmdldEluc3RydWN0aW9uTmFtZSh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmNicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbihcIj9cIiArIG5hbWVfMiwgXCI/XCIgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25jb21tZW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdGhpcy51cGRhdGVQb3NpdGlvbig0KTtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY29tbWVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHZhbHVlKTtcbiAgICAgICAgKF9kID0gKF9jID0gdGhpcy5jYnMpLm9uY29tbWVudGVuZCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MpO1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmNkYXRhID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mO1xuICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKDEpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnhtbE1vZGUgfHwgdGhpcy5vcHRpb25zLnJlY29nbml6ZUNEQVRBKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25jZGF0YXN0YXJ0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub250ZXh0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgdmFsdWUpO1xuICAgICAgICAgICAgKF9mID0gKF9lID0gdGhpcy5jYnMpLm9uY2RhdGFlbmQpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsKF9lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25jb21tZW50KFwiW0NEQVRBW1wiICsgdmFsdWUgKyBcIl1dXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZXJyKTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUub25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbmNsb3NldGFnKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5zdGFjay5sZW5ndGg7IGkgPiAwOyB0aGlzLmNicy5vbmNsb3NldGFnKHRoaXMuc3RhY2tbLS1pXSkpXG4gICAgICAgICAgICAgICAgO1xuICAgICAgICB9XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmVuZCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBwYXJzZXIgdG8gYSBibGFuayBzdGF0ZSwgcmVhZHkgdG8gcGFyc2UgYSBuZXcgSFRNTCBkb2N1bWVudFxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9ucmVzZXQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIucmVzZXQoKTtcbiAgICAgICAgdGhpcy50YWduYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuICAgICAgICAoX2QgPSAoX2MgPSB0aGlzLmNicykub25wYXJzZXJpbml0KSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuY2FsbChfYywgdGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIHBhcnNlciwgdGhlbiBwYXJzZXMgYSBjb21wbGV0ZSBkb2N1bWVudCBhbmRcbiAgICAgKiBwdXNoZXMgaXQgdG8gdGhlIGhhbmRsZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZGF0YSBEb2N1bWVudCB0byBwYXJzZS5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ29tcGxldGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuZW5kKGRhdGEpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFyc2VzIGEgY2h1bmsgb2YgZGF0YSBhbmQgY2FsbHMgdGhlIGNvcnJlc3BvbmRpbmcgY2FsbGJhY2tzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIENodW5rIHRvIHBhcnNlLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIud3JpdGUoY2h1bmspO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlciBhbmQgY2xlYXJzIHRoZSBzdGFjaywgY2FsbHMgb25lbmQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgT3B0aW9uYWwgZmluYWwgY2h1bmsgdG8gcGFyc2UuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIuZW5kKGNodW5rKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhdXNlcyBwYXJzaW5nLiBUaGUgcGFyc2VyIHdvbid0IGVtaXQgZXZlbnRzIHVudGlsIGByZXN1bWVgIGlzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRva2VuaXplci5wYXVzZSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzdW1lcyBwYXJzaW5nIGFmdGVyIGBwYXVzZWAgd2FzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIucmVzdW1lKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBgd3JpdGVgLCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgQ2h1bmsgdG8gcGFyc2UuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhcnNlQ2h1bmsgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICAgICAgdGhpcy53cml0ZShjaHVuayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBbGlhcyBvZiBgZW5kYCwgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIE9wdGlvbmFsIGZpbmFsIGNodW5rIHRvIHBhcnNlLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5kb25lID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHRoaXMuZW5kKGNodW5rKTtcbiAgICB9O1xuICAgIHJldHVybiBQYXJzZXI7XG59KCkpO1xuZXhwb3J0cy5QYXJzZXIgPSBQYXJzZXI7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2xvbmVOb2RlID0gZXhwb3J0cy5FbGVtZW50ID0gZXhwb3J0cy5Eb2N1bWVudCA9IGV4cG9ydHMuTm9kZVdpdGhDaGlsZHJlbiA9IGV4cG9ydHMuUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gZXhwb3J0cy5Db21tZW50ID0gZXhwb3J0cy5UZXh0ID0gZXhwb3J0cy5EYXRhTm9kZSA9IGV4cG9ydHMuTm9kZSA9IHZvaWQgMDtcbnZhciBub2RlVHlwZXMgPSBuZXcgTWFwKFtcbiAgICBbXCJ0YWdcIiAvKiBUYWcgKi8sIDFdLFxuICAgIFtcInNjcmlwdFwiIC8qIFNjcmlwdCAqLywgMV0sXG4gICAgW1wic3R5bGVcIiAvKiBTdHlsZSAqLywgMV0sXG4gICAgW1wiZGlyZWN0aXZlXCIgLyogRGlyZWN0aXZlICovLCAxXSxcbiAgICBbXCJ0ZXh0XCIgLyogVGV4dCAqLywgM10sXG4gICAgW1wiY2RhdGFcIiAvKiBDREFUQSAqLywgNF0sXG4gICAgW1wiY29tbWVudFwiIC8qIENvbW1lbnQgKi8sIDhdLFxuICAgIFtcInJvb3RcIiAvKiBSb290ICovLCA5XSxcbl0pO1xuLyoqXG4gKiBUaGlzIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgdGhlIHByb3RvdHlwZSBmb3IgTm9kZXMgd2hlbiBjcmVhdGluZyBhXG4gKiBET00tTGV2ZWwtMS1jb21wbGlhbnQgc3RydWN0dXJlLlxuICovXG52YXIgTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSB0eXBlIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE5vZGUodHlwZSkge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAvKiogUGFyZW50IG9mIHRoZSBub2RlICovXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgLyoqIFByZXZpb3VzIHNpYmxpbmcgKi9cbiAgICAgICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICAgICAgLyoqIE5leHQgc2libGluZyAqL1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aFN0YXJ0SW5kaWNlc2Agb24gdGhlIGhhbmRsZXIgdG8gYmUgYHRydWUuICovXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IG51bGw7XG4gICAgICAgIC8qKiBUaGUgZW5kIGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aEVuZEluZGljZXNgIG9uIHRoZSBoYW5kbGVyIHRvIGJlIGB0cnVlLiAqL1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcIm5vZGVUeXBlXCIsIHtcbiAgICAgICAgLy8gUmVhZC1vbmx5IGFsaWFzZXNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gbm9kZVR5cGVzLmdldCh0aGlzLnR5cGUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAxO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInBhcmVudE5vZGVcIiwge1xuICAgICAgICAvLyBSZWFkLXdyaXRlIGFsaWFzZXMgZm9yIHByb3BlcnRpZXNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwicHJldmlvdXNTaWJsaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICAgICAgICB0aGlzLnByZXYgPSBwcmV2O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcIm5leHRTaWJsaW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uZXh0O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQ2xvbmUgdGhpcyBub2RlLCBhbmQgb3B0aW9uYWxseSBpdHMgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcmVjdXJzaXZlIENsb25lIGNoaWxkIG5vZGVzIGFzIHdlbGwuXG4gICAgICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGUgbm9kZS5cbiAgICAgKi9cbiAgICBOb2RlLnByb3RvdHlwZS5jbG9uZU5vZGUgPSBmdW5jdGlvbiAocmVjdXJzaXZlKSB7XG4gICAgICAgIGlmIChyZWN1cnNpdmUgPT09IHZvaWQgMCkgeyByZWN1cnNpdmUgPSBmYWxzZTsgfVxuICAgICAgICByZXR1cm4gY2xvbmVOb2RlKHRoaXMsIHJlY3Vyc2l2ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gTm9kZTtcbn0oKSk7XG5leHBvcnRzLk5vZGUgPSBOb2RlO1xudmFyIERhdGFOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXRhTm9kZSwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdHlwZSBUaGUgdHlwZSBvZiB0aGUgbm9kZVxuICAgICAqIEBwYXJhbSBkYXRhIFRoZSBjb250ZW50IG9mIHRoZSBkYXRhIG5vZGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBEYXRhTm9kZSh0eXBlLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHR5cGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhTm9kZS5wcm90b3R5cGUsIFwibm9kZVZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIERhdGFOb2RlO1xufShOb2RlKSk7XG5leHBvcnRzLkRhdGFOb2RlID0gRGF0YU5vZGU7XG52YXIgVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwidGV4dFwiIC8qIFRleHQgKi8sIGRhdGEpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBUZXh0O1xufShEYXRhTm9kZSkpO1xuZXhwb3J0cy5UZXh0ID0gVGV4dDtcbnZhciBDb21tZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb21tZW50LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbW1lbnQoZGF0YSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgXCJjb21tZW50XCIgLyogQ29tbWVudCAqLywgZGF0YSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIENvbW1lbnQ7XG59KERhdGFOb2RlKSk7XG5leHBvcnRzLkNvbW1lbnQgPSBDb21tZW50O1xudmFyIFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByb2Nlc3NpbmdJbnN0cnVjdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFwiZGlyZWN0aXZlXCIgLyogRGlyZWN0aXZlICovLCBkYXRhKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xufShEYXRhTm9kZSkpO1xuZXhwb3J0cy5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb247XG4vKipcbiAqIEEgYE5vZGVgIHRoYXQgY2FuIGhhdmUgY2hpbGRyZW4uXG4gKi9cbnZhciBOb2RlV2l0aENoaWxkcmVuID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOb2RlV2l0aENoaWxkcmVuLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB0eXBlIFR5cGUgb2YgdGhlIG5vZGUuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIENoaWxkcmVuIG9mIHRoZSBub2RlLiBPbmx5IGNlcnRhaW4gbm9kZSB0eXBlcyBjYW4gaGF2ZSBjaGlsZHJlbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBOb2RlV2l0aENoaWxkcmVuKHR5cGUsIGNoaWxkcmVuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHR5cGUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVXaXRoQ2hpbGRyZW4ucHJvdG90eXBlLCBcImZpcnN0Q2hpbGRcIiwge1xuICAgICAgICAvLyBBbGlhc2VzXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuY2hpbGRyZW5bMF0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZVdpdGhDaGlsZHJlbi5wcm90b3R5cGUsIFwibGFzdENoaWxkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgPyB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZVdpdGhDaGlsZHJlbi5wcm90b3R5cGUsIFwiY2hpbGROb2Rlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW47XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gTm9kZVdpdGhDaGlsZHJlbjtcbn0oTm9kZSkpO1xuZXhwb3J0cy5Ob2RlV2l0aENoaWxkcmVuID0gTm9kZVdpdGhDaGlsZHJlbjtcbnZhciBEb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRG9jdW1lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnQoY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwicm9vdFwiIC8qIFJvb3QgKi8sIGNoaWxkcmVuKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gRG9jdW1lbnQ7XG59KE5vZGVXaXRoQ2hpbGRyZW4pKTtcbmV4cG9ydHMuRG9jdW1lbnQgPSBEb2N1bWVudDtcbnZhciBFbGVtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbGVtZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHRhZywgZWcuIGBkaXZgLCBgc3BhbmAuXG4gICAgICogQHBhcmFtIGF0dHJpYnMgT2JqZWN0IG1hcHBpbmcgYXR0cmlidXRlIG5hbWVzIHRvIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIENoaWxkcmVuIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEVsZW1lbnQobmFtZSwgYXR0cmlicywgY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuID09PSB2b2lkIDApIHsgY2hpbGRyZW4gPSBbXTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBuYW1lID09PSBcInNjcmlwdFwiXG4gICAgICAgICAgICA/IFwic2NyaXB0XCIgLyogU2NyaXB0ICovXG4gICAgICAgICAgICA6IG5hbWUgPT09IFwic3R5bGVcIlxuICAgICAgICAgICAgICAgID8gXCJzdHlsZVwiIC8qIFN0eWxlICovXG4gICAgICAgICAgICAgICAgOiBcInRhZ1wiIC8qIFRhZyAqLywgY2hpbGRyZW4pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5hdHRyaWJzID0gYXR0cmlicztcbiAgICAgICAgX3RoaXMuYXR0cmlicyA9IGF0dHJpYnM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVsZW1lbnQucHJvdG90eXBlLCBcInRhZ05hbWVcIiwge1xuICAgICAgICAvLyBET00gTGV2ZWwgMSBhbGlhc2VzXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbGVtZW50LnByb3RvdHlwZSwgXCJhdHRyaWJ1dGVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYXR0cmlicykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmF0dHJpYnNbbmFtZV0sXG4gICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogKF9hID0gX3RoaXNbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAoX2IgPSBfdGhpc1tcIngtYXR0cmlic1ByZWZpeFwiXSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iW25hbWVdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRWxlbWVudDtcbn0oTm9kZVdpdGhDaGlsZHJlbikpO1xuZXhwb3J0cy5FbGVtZW50ID0gRWxlbWVudDtcbi8qKlxuICogQ2xvbmUgYSBub2RlLCBhbmQgb3B0aW9uYWxseSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHJlY3Vyc2l2ZSBDbG9uZSBjaGlsZCBub2RlcyBhcyB3ZWxsLlxuICogQHJldHVybnMgQSBjbG9uZSBvZiB0aGUgbm9kZS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVOb2RlKG5vZGUsIHJlY3Vyc2l2ZSkge1xuICAgIGlmIChyZWN1cnNpdmUgPT09IHZvaWQgMCkgeyByZWN1cnNpdmUgPSBmYWxzZTsgfVxuICAgIHZhciByZXN1bHQ7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcInRleHRcIiAvKiBUZXh0ICovOlxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFRleHQobm9kZS5kYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGlyZWN0aXZlXCIgLyogRGlyZWN0aXZlICovOiB7XG4gICAgICAgICAgICB2YXIgaW5zdHIgPSBub2RlO1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbihpbnN0ci5uYW1lLCBpbnN0ci5kYXRhKTtcbiAgICAgICAgICAgIGlmIChpbnN0cltcIngtbmFtZVwiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W1wieC1uYW1lXCJdID0gaW5zdHJbXCJ4LW5hbWVcIl07XG4gICAgICAgICAgICAgICAgcmVzdWx0W1wieC1wdWJsaWNJZFwiXSA9IGluc3RyW1wieC1wdWJsaWNJZFwiXTtcbiAgICAgICAgICAgICAgICByZXN1bHRbXCJ4LXN5c3RlbUlkXCJdID0gaW5zdHJbXCJ4LXN5c3RlbUlkXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvbW1lbnRcIiAvKiBDb21tZW50ICovOlxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IENvbW1lbnQobm9kZS5kYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidGFnXCIgLyogVGFnICovOlxuICAgICAgICBjYXNlIFwic2NyaXB0XCIgLyogU2NyaXB0ICovOlxuICAgICAgICBjYXNlIFwic3R5bGVcIiAvKiBTdHlsZSAqLzoge1xuICAgICAgICAgICAgdmFyIGVsZW0gPSBub2RlO1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVjdXJzaXZlID8gY2xvbmVDaGlsZHJlbihlbGVtLmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICAgICAgdmFyIGNsb25lXzEgPSBuZXcgRWxlbWVudChlbGVtLm5hbWUsIF9fYXNzaWduKHt9LCBlbGVtLmF0dHJpYnMpLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gKGNoaWxkLnBhcmVudCA9IGNsb25lXzEpOyB9KTtcbiAgICAgICAgICAgIGlmIChlbGVtW1wieC1hdHRyaWJzTmFtZXNwYWNlXCJdKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVfMVtcIngtYXR0cmlic05hbWVzcGFjZVwiXSA9IF9fYXNzaWduKHt9LCBlbGVtW1wieC1hdHRyaWJzTmFtZXNwYWNlXCJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbGVtW1wieC1hdHRyaWJzUHJlZml4XCJdKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVfMVtcIngtYXR0cmlic1ByZWZpeFwiXSA9IF9fYXNzaWduKHt9LCBlbGVtW1wieC1hdHRyaWJzUHJlZml4XCJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGNsb25lXzE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY2RhdGFcIiAvKiBDREFUQSAqLzoge1xuICAgICAgICAgICAgdmFyIGNkYXRhID0gbm9kZTtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHJlY3Vyc2l2ZSA/IGNsb25lQ2hpbGRyZW4oY2RhdGEuY2hpbGRyZW4pIDogW107XG4gICAgICAgICAgICB2YXIgY2xvbmVfMiA9IG5ldyBOb2RlV2l0aENoaWxkcmVuKG5vZGUudHlwZSwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChjaGlsZC5wYXJlbnQgPSBjbG9uZV8yKTsgfSk7XG4gICAgICAgICAgICByZXN1bHQgPSBjbG9uZV8yO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJvb3RcIiAvKiBSb290ICovOiB7XG4gICAgICAgICAgICB2YXIgZG9jID0gbm9kZTtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHJlY3Vyc2l2ZSA/IGNsb25lQ2hpbGRyZW4oZG9jLmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICAgICAgdmFyIGNsb25lXzMgPSBuZXcgRG9jdW1lbnQoY2hpbGRyZW4pO1xuICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChjaGlsZC5wYXJlbnQgPSBjbG9uZV8zKTsgfSk7XG4gICAgICAgICAgICBpZiAoZG9jW1wieC1tb2RlXCJdKSB7XG4gICAgICAgICAgICAgICAgY2xvbmVfM1tcIngtbW9kZVwiXSA9IGRvY1tcIngtbW9kZVwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IGNsb25lXzM7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZG9jdHlwZVwiIC8qIERvY3R5cGUgKi86IHtcbiAgICAgICAgICAgIC8vIFRoaXMgdHlwZSBpc24ndCB1c2VkIHlldC5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCB5ZXQ6IEVsZW1lbnRUeXBlLkRvY3R5cGUgY2FzZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuc3RhcnRJbmRleCA9IG5vZGUuc3RhcnRJbmRleDtcbiAgICByZXN1bHQuZW5kSW5kZXggPSBub2RlLmVuZEluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmNsb25lTm9kZSA9IGNsb25lTm9kZTtcbmZ1bmN0aW9uIGNsb25lQ2hpbGRyZW4oY2hpbGRzKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gY2hpbGRzLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNsb25lTm9kZShjaGlsZCwgdHJ1ZSk7IH0pO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hpbGRyZW5baV0ucHJldiA9IGNoaWxkcmVuW2kgLSAxXTtcbiAgICAgICAgY2hpbGRyZW5baSAtIDFdLm5leHQgPSBjaGlsZHJlbltpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xufVxuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRvbUhhbmRsZXIgPSB2b2lkIDA7XG52YXIgbm9kZV8xID0gcmVxdWlyZShcIi4vbm9kZVwiKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ub2RlXCIpLCBleHBvcnRzKTtcbnZhciByZVdoaXRlc3BhY2UgPSAvXFxzKy9nO1xuLy8gRGVmYXVsdCBvcHRpb25zXG52YXIgZGVmYXVsdE9wdHMgPSB7XG4gICAgbm9ybWFsaXplV2hpdGVzcGFjZTogZmFsc2UsXG4gICAgd2l0aFN0YXJ0SW5kaWNlczogZmFsc2UsXG4gICAgd2l0aEVuZEluZGljZXM6IGZhbHNlLFxufTtcbnZhciBEb21IYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBDYWxsZWQgb25jZSBwYXJzaW5nIGhhcyBjb21wbGV0ZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgU2V0dGluZ3MgZm9yIHRoZSBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBlbGVtZW50Q0IgQ2FsbGJhY2sgd2hlbmV2ZXIgYSB0YWcgaXMgY2xvc2VkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIERvbUhhbmRsZXIoY2FsbGJhY2ssIG9wdGlvbnMsIGVsZW1lbnRDQikge1xuICAgICAgICAvKiogVGhlIGVsZW1lbnRzIG9mIHRoZSBET00gKi9cbiAgICAgICAgdGhpcy5kb20gPSBbXTtcbiAgICAgICAgLyoqIFRoZSByb290IGVsZW1lbnQgZm9yIHRoZSBET00gKi9cbiAgICAgICAgdGhpcy5yb290ID0gbmV3IG5vZGVfMS5Eb2N1bWVudCh0aGlzLmRvbSk7XG4gICAgICAgIC8qKiBJbmRpY2F0ZWQgd2hldGhlciBwYXJzaW5nIGhhcyBiZWVuIGNvbXBsZXRlZC4gKi9cbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIC8qKiBTdGFjayBvZiBvcGVuIHRhZ3MuICovXG4gICAgICAgIHRoaXMudGFnU3RhY2sgPSBbdGhpcy5yb290XTtcbiAgICAgICAgLyoqIEEgZGF0YSBub2RlIHRoYXQgaXMgc3RpbGwgYmVpbmcgd3JpdHRlbiB0by4gKi9cbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIHBhcnNlciBpbnN0YW5jZS4gVXNlZCBmb3IgbG9jYXRpb24gaW5mb3JtYXRpb24uICovXG4gICAgICAgIHRoaXMucGFyc2VyID0gbnVsbDtcbiAgICAgICAgLy8gTWFrZSBpdCBwb3NzaWJsZSB0byBza2lwIGFyZ3VtZW50cywgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBlbGVtZW50Q0IgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjYWxsYmFjaztcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjayAhPT0gbnVsbCAmJiBjYWxsYmFjayAhPT0gdm9pZCAwID8gY2FsbGJhY2sgOiBudWxsO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiBkZWZhdWx0T3B0cztcbiAgICAgICAgdGhpcy5lbGVtZW50Q0IgPSBlbGVtZW50Q0IgIT09IG51bGwgJiYgZWxlbWVudENCICE9PSB2b2lkIDAgPyBlbGVtZW50Q0IgOiBudWxsO1xuICAgIH1cbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnBhcnNlcmluaXQgPSBmdW5jdGlvbiAocGFyc2VyKSB7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIH07XG4gICAgLy8gUmVzZXRzIHRoZSBoYW5kbGVyIGJhY2sgdG8gc3RhcnRpbmcgc3RhdGVcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuZG9tID0gW107XG4gICAgICAgIHRoaXMucm9vdCA9IG5ldyBub2RlXzEuRG9jdW1lbnQodGhpcy5kb20pO1xuICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50YWdTdGFjayA9IFt0aGlzLnJvb3RdO1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSAoX2EgPSB0aGlzLnBhcnNlcikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICB9O1xuICAgIC8vIFNpZ25hbHMgdGhlIGhhbmRsZXIgdGhhdCBwYXJzaW5nIGlzIGRvbmVcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKG51bGwpO1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKGVycm9yKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9uY2xvc2V0YWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBudWxsO1xuICAgICAgICB2YXIgZWxlbSA9IHRoaXMudGFnU3RhY2sucG9wKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aEVuZEluZGljZXMpIHtcbiAgICAgICAgICAgIGVsZW0uZW5kSW5kZXggPSB0aGlzLnBhcnNlci5lbmRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Q0IpXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRDQihlbGVtKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9ub3BlbnRhZyA9IGZ1bmN0aW9uIChuYW1lLCBhdHRyaWJzKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gbmV3IG5vZGVfMS5FbGVtZW50KG5hbWUsIGF0dHJpYnMpO1xuICAgICAgICB0aGlzLmFkZE5vZGUoZWxlbWVudCk7XG4gICAgICAgIHRoaXMudGFnU3RhY2sucHVzaChlbGVtZW50KTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9udGV4dCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVXaGl0ZXNwYWNlID0gdGhpcy5vcHRpb25zLm5vcm1hbGl6ZVdoaXRlc3BhY2U7XG4gICAgICAgIHZhciBsYXN0Tm9kZSA9IHRoaXMubGFzdE5vZGU7XG4gICAgICAgIGlmIChsYXN0Tm9kZSAmJiBsYXN0Tm9kZS50eXBlID09PSBcInRleHRcIiAvKiBUZXh0ICovKSB7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplV2hpdGVzcGFjZSkge1xuICAgICAgICAgICAgICAgIGxhc3ROb2RlLmRhdGEgPSAobGFzdE5vZGUuZGF0YSArIGRhdGEpLnJlcGxhY2UocmVXaGl0ZXNwYWNlLCBcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYXN0Tm9kZS5kYXRhICs9IGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobm9ybWFsaXplV2hpdGVzcGFjZSkge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UocmVXaGl0ZXNwYWNlLCBcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbm9kZSA9IG5ldyBub2RlXzEuVGV4dChkYXRhKTtcbiAgICAgICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmNvbW1lbnQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5sYXN0Tm9kZSAmJiB0aGlzLmxhc3ROb2RlLnR5cGUgPT09IFwiY29tbWVudFwiIC8qIENvbW1lbnQgKi8pIHtcbiAgICAgICAgICAgIHRoaXMubGFzdE5vZGUuZGF0YSArPSBkYXRhO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfMS5Db21tZW50KGRhdGEpO1xuICAgICAgICB0aGlzLmFkZE5vZGUobm9kZSk7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBub2RlO1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25jb21tZW50ZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gbnVsbDtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9uY2RhdGFzdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRleHQgPSBuZXcgbm9kZV8xLlRleHQoXCJcIik7XG4gICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfMS5Ob2RlV2l0aENoaWxkcmVuKFwiY2RhdGFcIiAvKiBDREFUQSAqLywgW3RleHRdKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKG5vZGUpO1xuICAgICAgICB0ZXh0LnBhcmVudCA9IG5vZGU7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSB0ZXh0O1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25jZGF0YWVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfMS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24obmFtZSwgZGF0YSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUNhbGxiYWNrID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKGVycm9yLCB0aGlzLmRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5hZGROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMudGFnU3RhY2tbdGhpcy50YWdTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIHByZXZpb3VzU2libGluZyA9IHBhcmVudC5jaGlsZHJlbltwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aFN0YXJ0SW5kaWNlcykge1xuICAgICAgICAgICAgbm9kZS5zdGFydEluZGV4ID0gdGhpcy5wYXJzZXIuc3RhcnRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLndpdGhFbmRJbmRpY2VzKSB7XG4gICAgICAgICAgICBub2RlLmVuZEluZGV4ID0gdGhpcy5wYXJzZXIuZW5kSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgIGlmIChwcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgICAgIG5vZGUucHJldiA9IHByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgIHByZXZpb3VzU2libGluZy5uZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5hZGREYXRhTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGU7XG4gICAgfTtcbiAgICByZXR1cm4gRG9tSGFuZGxlcjtcbn0oKSk7XG5leHBvcnRzLkRvbUhhbmRsZXIgPSBEb21IYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gRG9tSGFuZGxlcjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzQ2hpbGRyZW4gPSBleHBvcnRzLmlzQ29tbWVudCA9IGV4cG9ydHMuaXNUZXh0ID0gZXhwb3J0cy5pc0NEQVRBID0gZXhwb3J0cy5pc1RhZyA9IHZvaWQgMDtcbnZhciBkb21lbGVtZW50dHlwZV8xID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGlzIGEgYEVsZW1lbnRgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNUYWcobm9kZSkge1xuICAgIHJldHVybiBkb21lbGVtZW50dHlwZV8xLmlzVGFnKG5vZGUpO1xufVxuZXhwb3J0cy5pc1RhZyA9IGlzVGFnO1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGlzIGEgYE5vZGVXaXRoQ2hpbGRyZW5gLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNDREFUQShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gXCJjZGF0YVwiIC8qIENEQVRBICovO1xufVxuZXhwb3J0cy5pc0NEQVRBID0gaXNDREFUQTtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBpcyBhIGBEYXRhTm9kZWAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1RleHQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IFwidGV4dFwiIC8qIFRleHQgKi87XG59XG5leHBvcnRzLmlzVGV4dCA9IGlzVGV4dDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBpcyBhIGBEYXRhTm9kZWAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc0NvbW1lbnQobm9kZSkge1xuICAgIHJldHVybiBub2RlLnR5cGUgPT09IFwiY29tbWVudFwiIC8qIENvbW1lbnQgKi87XG59XG5leHBvcnRzLmlzQ29tbWVudCA9IGlzQ29tbWVudDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBpcyBhIGBOb2RlV2l0aENoaWxkcmVuYCAoaGFzIGNoaWxkcmVuKSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGhhc0NoaWxkcmVuKG5vZGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG5vZGUsIFwiY2hpbGRyZW5cIik7XG59XG5leHBvcnRzLmhhc0NoaWxkcmVuID0gaGFzQ2hpbGRyZW47XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFRleHQgPSBleHBvcnRzLmdldElubmVySFRNTCA9IGV4cG9ydHMuZ2V0T3V0ZXJIVE1MID0gdm9pZCAwO1xudmFyIHRhZ3R5cGVzXzEgPSByZXF1aXJlKFwiLi90YWd0eXBlc1wiKTtcbnZhciBkb21fc2VyaWFsaXplcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkb20tc2VyaWFsaXplclwiKSk7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSBvdXRlciBIVE1MIG9mLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3Igc2VyaWFsaXphdGlvbi5cbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYGRvbS1zZXJpYWxpemVyYCBtb2R1bGUgZGlyZWN0bHkuXG4gKiBAcmV0dXJucyBgbm9kZWAncyBvdXRlciBIVE1MLlxuICovXG5mdW5jdGlvbiBnZXRPdXRlckhUTUwobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBkb21fc2VyaWFsaXplcl8xLmRlZmF1bHQobm9kZSwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmdldE91dGVySFRNTCA9IGdldE91dGVySFRNTDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIGlubmVyIEhUTUwgb2YuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBzZXJpYWxpemF0aW9uLlxuICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgZG9tLXNlcmlhbGl6ZXJgIG1vZHVsZSBkaXJlY3RseS5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIEhUTUwuXG4gKi9cbmZ1bmN0aW9uIGdldElubmVySFRNTChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRhZ3R5cGVzXzEuaGFzQ2hpbGRyZW4obm9kZSlcbiAgICAgICAgPyBub2RlLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gZ2V0T3V0ZXJIVE1MKG5vZGUsIG9wdGlvbnMpOyB9KS5qb2luKFwiXCIpXG4gICAgICAgIDogXCJcIjtcbn1cbmV4cG9ydHMuZ2V0SW5uZXJIVE1MID0gZ2V0SW5uZXJIVE1MO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgaW5uZXIgdGV4dC5cbiAqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgaW5uZXIgdGV4dCBvZi5cbiAqIEByZXR1cm5zIGBub2RlYCdzIGlubmVyIHRleHQuXG4gKi9cbmZ1bmN0aW9uIGdldFRleHQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAoZ2V0VGV4dCkuam9pbihcIlwiKTtcbiAgICBpZiAodGFndHlwZXNfMS5pc1RhZyhub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUubmFtZSA9PT0gXCJiclwiID8gXCJcXG5cIiA6IGdldFRleHQobm9kZS5jaGlsZHJlbik7XG4gICAgaWYgKHRhZ3R5cGVzXzEuaXNDREFUQShub2RlKSlcbiAgICAgICAgcmV0dXJuIGdldFRleHQobm9kZS5jaGlsZHJlbik7XG4gICAgaWYgKHRhZ3R5cGVzXzEuaXNUZXh0KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5nZXRUZXh0ID0gZ2V0VGV4dDtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubmV4dEVsZW1lbnRTaWJsaW5nID0gZXhwb3J0cy5nZXROYW1lID0gZXhwb3J0cy5oYXNBdHRyaWIgPSBleHBvcnRzLmdldEF0dHJpYnV0ZVZhbHVlID0gZXhwb3J0cy5nZXRTaWJsaW5ncyA9IGV4cG9ydHMuZ2V0UGFyZW50ID0gZXhwb3J0cy5nZXRDaGlsZHJlbiA9IHZvaWQgMDtcbnZhciB0YWd0eXBlc18xID0gcmVxdWlyZShcIi4vdGFndHlwZXNcIik7XG52YXIgZW1wdHlBcnJheSA9IFtdO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIGVsZW0gTm9kZSB0byBnZXQgdGhlIGNoaWxkcmVuIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgY2hpbGRyZW4sIG9yIGFuIGVtcHR5IGFycmF5LlxuICovXG5mdW5jdGlvbiBnZXRDaGlsZHJlbihlbGVtKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBlbGVtLmNoaWxkcmVuKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBlbXB0eUFycmF5O1xufVxuZXhwb3J0cy5nZXRDaGlsZHJlbiA9IGdldENoaWxkcmVuO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgcGFyZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtIE5vZGUgdG8gZ2V0IHRoZSBwYXJlbnQgb2YuXG4gKiBAcmV0dXJucyBgZWxlbWAncyBwYXJlbnQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50KGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5wYXJlbnQgfHwgbnVsbDtcbn1cbmV4cG9ydHMuZ2V0UGFyZW50ID0gZ2V0UGFyZW50O1xuLyoqXG4gKiBHZXRzIGFuIGVsZW1lbnRzIHNpYmxpbmdzLCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICpcbiAqIEF0dGVtcHRzIHRvIGdldCB0aGUgY2hpbGRyZW4gdGhyb3VnaCB0aGUgZWxlbWVudCdzIHBhcmVudCBmaXJzdC5cbiAqIElmIHdlIGRvbid0IGhhdmUgYSBwYXJlbnQgKHRoZSBlbGVtZW50IGlzIGEgcm9vdCBub2RlKSxcbiAqIHdlIHdhbGsgdGhlIGVsZW1lbnQncyBgcHJldmAgJiBgbmV4dGAgdG8gZ2V0IGFsbCByZW1haW5pbmcgbm9kZXMuXG4gKlxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byBnZXQgdGhlIHNpYmxpbmdzIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3Mgc2libGluZ3MuXG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdzKGVsZW0pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoZWxlbSk7XG4gICAgaWYgKHBhcmVudCAhPSBudWxsKVxuICAgICAgICByZXR1cm4gZ2V0Q2hpbGRyZW4ocGFyZW50KTtcbiAgICB2YXIgc2libGluZ3MgPSBbZWxlbV07XG4gICAgdmFyIHByZXYgPSBlbGVtLnByZXYsIG5leHQgPSBlbGVtLm5leHQ7XG4gICAgd2hpbGUgKHByZXYgIT0gbnVsbCkge1xuICAgICAgICBzaWJsaW5ncy51bnNoaWZ0KHByZXYpO1xuICAgICAgICAoX2EgPSBwcmV2LCBwcmV2ID0gX2EucHJldik7XG4gICAgfVxuICAgIHdoaWxlIChuZXh0ICE9IG51bGwpIHtcbiAgICAgICAgc2libGluZ3MucHVzaChuZXh0KTtcbiAgICAgICAgKF9iID0gbmV4dCwgbmV4dCA9IF9iLm5leHQpO1xuICAgIH1cbiAgICByZXR1cm4gc2libGluZ3M7XG59XG5leHBvcnRzLmdldFNpYmxpbmdzID0gZ2V0U2libGluZ3M7XG4vKipcbiAqIEdldHMgYW4gYXR0cmlidXRlIGZyb20gYW4gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gZWxlbSBFbGVtZW50IHRvIGNoZWNrLlxuICogQHBhcmFtIG5hbWUgQXR0cmlidXRlIG5hbWUgdG8gcmV0cmlldmUuXG4gKiBAcmV0dXJucyBUaGUgZWxlbWVudCdzIGF0dHJpYnV0ZSB2YWx1ZSwgb3IgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IGVsZW0uYXR0cmlicykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW25hbWVdO1xufVxuZXhwb3J0cy5nZXRBdHRyaWJ1dGVWYWx1ZSA9IGdldEF0dHJpYnV0ZVZhbHVlO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhbiBlbGVtZW50IGhhcyBhbiBhdHRyaWJ1dGUuXG4gKlxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byBjaGVjay5cbiAqIEBwYXJhbSBuYW1lIEF0dHJpYnV0ZSBuYW1lIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgUmV0dXJucyB3aGV0aGVyIGBlbGVtYCBoYXMgdGhlIGF0dHJpYnV0ZSBgbmFtZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc0F0dHJpYihlbGVtLCBuYW1lKSB7XG4gICAgcmV0dXJuIChlbGVtLmF0dHJpYnMgIT0gbnVsbCAmJlxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZWxlbS5hdHRyaWJzLCBuYW1lKSAmJlxuICAgICAgICBlbGVtLmF0dHJpYnNbbmFtZV0gIT0gbnVsbCk7XG59XG5leHBvcnRzLmhhc0F0dHJpYiA9IGhhc0F0dHJpYjtcbi8qKlxuICogR2V0IHRoZSB0YWcgbmFtZSBvZiBhbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgbmFtZSBmb3IuXG4gKiBAcmV0dXJucyBUaGUgdGFnIG5hbWUgb2YgYGVsZW1gLlxuICovXG5mdW5jdGlvbiBnZXROYW1lKGVsZW0pIHtcbiAgICByZXR1cm4gZWxlbS5uYW1lO1xufVxuZXhwb3J0cy5nZXROYW1lID0gZ2V0TmFtZTtcbi8qKlxuICogUmV0dXJucyB0aGUgbmV4dCBlbGVtZW50IHNpYmxpbmcgb2YgYSBub2RlLlxuICpcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGdldCB0aGUgbmV4dCBzaWJsaW5nIG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgbmV4dCBzaWJsaW5nIHRoYXQgaXMgYSB0YWcuXG4gKi9cbmZ1bmN0aW9uIG5leHRFbGVtZW50U2libGluZyhlbGVtKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBuZXh0ID0gZWxlbS5uZXh0O1xuICAgIHdoaWxlIChuZXh0ICE9PSBudWxsICYmICF0YWd0eXBlc18xLmlzVGFnKG5leHQpKVxuICAgICAgICAoX2EgPSBuZXh0LCBuZXh0ID0gX2EubmV4dCk7XG4gICAgcmV0dXJuIG5leHQ7XG59XG5leHBvcnRzLm5leHRFbGVtZW50U2libGluZyA9IG5leHRFbGVtZW50U2libGluZztcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJlcGVuZCA9IGV4cG9ydHMucHJlcGVuZENoaWxkID0gZXhwb3J0cy5hcHBlbmQgPSBleHBvcnRzLmFwcGVuZENoaWxkID0gZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IGV4cG9ydHMucmVtb3ZlRWxlbWVudCA9IHZvaWQgMDtcbi8qKlxuICogUmVtb3ZlIGFuIGVsZW1lbnQgZnJvbSB0aGUgZG9tXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gYmUgcmVtb3ZlZFxuICovXG5mdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsZW0pIHtcbiAgICBpZiAoZWxlbS5wcmV2KVxuICAgICAgICBlbGVtLnByZXYubmV4dCA9IGVsZW0ubmV4dDtcbiAgICBpZiAoZWxlbS5uZXh0KVxuICAgICAgICBlbGVtLm5leHQucHJldiA9IGVsZW0ucHJldjtcbiAgICBpZiAoZWxlbS5wYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkcyA9IGVsZW0ucGFyZW50LmNoaWxkcmVuO1xuICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkcy5sYXN0SW5kZXhPZihlbGVtKSwgMSk7XG4gICAgfVxufVxuZXhwb3J0cy5yZW1vdmVFbGVtZW50ID0gcmVtb3ZlRWxlbWVudDtcbi8qKlxuICogUmVwbGFjZSBhbiBlbGVtZW50IGluIHRoZSBkb21cbiAqXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBiZSByZXBsYWNlZFxuICogQHBhcmFtIHJlcGxhY2VtZW50IFRoZSBlbGVtZW50IHRvIGJlIGFkZGVkXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VFbGVtZW50KGVsZW0sIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHByZXYgPSAocmVwbGFjZW1lbnQucHJldiA9IGVsZW0ucHJldik7XG4gICAgaWYgKHByZXYpIHtcbiAgICAgICAgcHJldi5uZXh0ID0gcmVwbGFjZW1lbnQ7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gKHJlcGxhY2VtZW50Lm5leHQgPSBlbGVtLm5leHQpO1xuICAgIGlmIChuZXh0KSB7XG4gICAgICAgIG5leHQucHJldiA9IHJlcGxhY2VtZW50O1xuICAgIH1cbiAgICB2YXIgcGFyZW50ID0gKHJlcGxhY2VtZW50LnBhcmVudCA9IGVsZW0ucGFyZW50KTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZHMgPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGNoaWxkc1tjaGlsZHMubGFzdEluZGV4T2YoZWxlbSldID0gcmVwbGFjZW1lbnQ7XG4gICAgfVxufVxuZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IHJlcGxhY2VFbGVtZW50O1xuLyoqXG4gKiBBcHBlbmQgYSBjaGlsZCB0byBhbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSBlbGVtIFRoZSBlbGVtZW50IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSBjaGlsZCBUaGUgZWxlbWVudCB0byBiZSBhZGRlZCBhcyBhIGNoaWxkLlxuICovXG5mdW5jdGlvbiBhcHBlbmRDaGlsZChlbGVtLCBjaGlsZCkge1xuICAgIHJlbW92ZUVsZW1lbnQoY2hpbGQpO1xuICAgIGNoaWxkLm5leHQgPSBudWxsO1xuICAgIGNoaWxkLnBhcmVudCA9IGVsZW07XG4gICAgaWYgKGVsZW0uY2hpbGRyZW4ucHVzaChjaGlsZCkgPiAxKSB7XG4gICAgICAgIHZhciBzaWJsaW5nID0gZWxlbS5jaGlsZHJlbltlbGVtLmNoaWxkcmVuLmxlbmd0aCAtIDJdO1xuICAgICAgICBzaWJsaW5nLm5leHQgPSBjaGlsZDtcbiAgICAgICAgY2hpbGQucHJldiA9IHNpYmxpbmc7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaGlsZC5wcmV2ID0gbnVsbDtcbiAgICB9XG59XG5leHBvcnRzLmFwcGVuZENoaWxkID0gYXBwZW5kQ2hpbGQ7XG4vKipcbiAqIEFwcGVuZCBhbiBlbGVtZW50IGFmdGVyIGFub3RoZXIuXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gYXBwZW5kIGFmdGVyLlxuICogQHBhcmFtIG5leHQgVGhlIGVsZW1lbnQgYmUgYWRkZWQuXG4gKi9cbmZ1bmN0aW9uIGFwcGVuZChlbGVtLCBuZXh0KSB7XG4gICAgcmVtb3ZlRWxlbWVudChuZXh0KTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnQ7XG4gICAgdmFyIGN1cnJOZXh0ID0gZWxlbS5uZXh0O1xuICAgIG5leHQubmV4dCA9IGN1cnJOZXh0O1xuICAgIG5leHQucHJldiA9IGVsZW07XG4gICAgZWxlbS5uZXh0ID0gbmV4dDtcbiAgICBuZXh0LnBhcmVudCA9IHBhcmVudDtcbiAgICBpZiAoY3Vyck5leHQpIHtcbiAgICAgICAgY3Vyck5leHQucHJldiA9IG5leHQ7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHMgPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkcy5sYXN0SW5kZXhPZihjdXJyTmV4dCksIDAsIG5leHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChuZXh0KTtcbiAgICB9XG59XG5leHBvcnRzLmFwcGVuZCA9IGFwcGVuZDtcbi8qKlxuICogUHJlcGVuZCBhIGNoaWxkIHRvIGFuIGVsZW1lbnQuXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gcHJlcGVuZCBiZWZvcmUuXG4gKiBAcGFyYW0gY2hpbGQgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWQgYXMgYSBjaGlsZC5cbiAqL1xuZnVuY3Rpb24gcHJlcGVuZENoaWxkKGVsZW0sIGNoaWxkKSB7XG4gICAgcmVtb3ZlRWxlbWVudChjaGlsZCk7XG4gICAgY2hpbGQucGFyZW50ID0gZWxlbTtcbiAgICBjaGlsZC5wcmV2ID0gbnVsbDtcbiAgICBpZiAoZWxlbS5jaGlsZHJlbi51bnNoaWZ0KGNoaWxkKSAhPT0gMSkge1xuICAgICAgICB2YXIgc2libGluZyA9IGVsZW0uY2hpbGRyZW5bMV07XG4gICAgICAgIHNpYmxpbmcucHJldiA9IGNoaWxkO1xuICAgICAgICBjaGlsZC5uZXh0ID0gc2libGluZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoaWxkLm5leHQgPSBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMucHJlcGVuZENoaWxkID0gcHJlcGVuZENoaWxkO1xuLyoqXG4gKiBQcmVwZW5kIGFuIGVsZW1lbnQgYmVmb3JlIGFub3RoZXIuXG4gKlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gcHJlcGVuZCBiZWZvcmUuXG4gKiBAcGFyYW0gcHJldiBUaGUgZWxlbWVudCBiZSBhZGRlZC5cbiAqL1xuZnVuY3Rpb24gcHJlcGVuZChlbGVtLCBwcmV2KSB7XG4gICAgcmVtb3ZlRWxlbWVudChwcmV2KTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnQ7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGRzID0gcGFyZW50LmNoaWxkcmVuO1xuICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkcy5pbmRleE9mKGVsZW0pLCAwLCBwcmV2KTtcbiAgICB9XG4gICAgaWYgKGVsZW0ucHJldikge1xuICAgICAgICBlbGVtLnByZXYubmV4dCA9IHByZXY7XG4gICAgfVxuICAgIHByZXYucGFyZW50ID0gcGFyZW50O1xuICAgIHByZXYucHJldiA9IGVsZW0ucHJldjtcbiAgICBwcmV2Lm5leHQgPSBlbGVtO1xuICAgIGVsZW0ucHJldiA9IHByZXY7XG59XG5leHBvcnRzLnByZXBlbmQgPSBwcmVwZW5kO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maW5kQWxsID0gZXhwb3J0cy5leGlzdHNPbmUgPSBleHBvcnRzLmZpbmRPbmUgPSBleHBvcnRzLmZpbmRPbmVDaGlsZCA9IGV4cG9ydHMuZmluZCA9IGV4cG9ydHMuZmlsdGVyID0gdm9pZCAwO1xudmFyIHRhZ3R5cGVzXzEgPSByZXF1aXJlKFwiLi90YWd0eXBlc1wiKTtcbi8qKlxuICogU2VhcmNoIGEgbm9kZSBhbmQgaXRzIGNoaWxkcmVuIGZvciBub2RlcyBwYXNzaW5nIGEgdGVzdCBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guIFdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3VsdCBzZXQgaWYgaXQgbWF0Y2hlcy5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHBhc3NpbmcgYHRlc3RgLlxuICovXG5mdW5jdGlvbiBmaWx0ZXIodGVzdCwgbm9kZSwgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBJbmZpbml0eTsgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShub2RlKSlcbiAgICAgICAgbm9kZSA9IFtub2RlXTtcbiAgICByZXR1cm4gZmluZCh0ZXN0LCBub2RlLCByZWN1cnNlLCBsaW1pdCk7XG59XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbi8qKlxuICogU2VhcmNoIGFuIGFycmF5IG9mIG5vZGUgYW5kIGl0cyBjaGlsZHJlbiBmb3Igbm9kZXMgcGFzc2luZyBhIHRlc3QgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIGxpbWl0IE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyBwYXNzaW5nIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmluZCh0ZXN0LCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwLCBub2Rlc18xID0gbm9kZXM7IF9pIDwgbm9kZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVsZW0gPSBub2Rlc18xW19pXTtcbiAgICAgICAgaWYgKHRlc3QoZWxlbSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgaWYgKC0tbGltaXQgPD0gMClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVjdXJzZSAmJiB0YWd0eXBlc18xLmhhc0NoaWxkcmVuKGVsZW0pICYmIGVsZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gZmluZCh0ZXN0LCBlbGVtLmNoaWxkcmVuLCByZWN1cnNlLCBsaW1pdCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGxpbWl0IC09IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsaW1pdCA8PSAwKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgZWxlbWVudCBpbnNpZGUgb2YgYW4gYXJyYXkgdGhhdCBtYXRjaGVzIGEgdGVzdCBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIFRoZSBmaXJzdCBub2RlIGluIHRoZSBhcnJheSB0aGF0IHBhc3NlcyBgdGVzdGAuXG4gKi9cbmZ1bmN0aW9uIGZpbmRPbmVDaGlsZCh0ZXN0LCBub2Rlcykge1xuICAgIHJldHVybiBub2Rlcy5maW5kKHRlc3QpO1xufVxuZXhwb3J0cy5maW5kT25lQ2hpbGQgPSBmaW5kT25lQ2hpbGQ7XG4vKipcbiAqIEZpbmRzIG9uZSBlbGVtZW50IGluIGEgdHJlZSB0aGF0IHBhc3NlcyBhIHRlc3QuXG4gKlxuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHJldHVybnMgVGhlIGZpcnN0IGNoaWxkIG5vZGUgdGhhdCBwYXNzZXMgYHRlc3RgLlxuICovXG5mdW5jdGlvbiBmaW5kT25lKHRlc3QsIG5vZGVzLCByZWN1cnNlKSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gdHJ1ZTsgfVxuICAgIHZhciBlbGVtID0gbnVsbDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aCAmJiAhZWxlbTsgaSsrKSB7XG4gICAgICAgIHZhciBjaGVja2VkID0gbm9kZXNbaV07XG4gICAgICAgIGlmICghdGFndHlwZXNfMS5pc1RhZyhjaGVja2VkKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGVzdChjaGVja2VkKSkge1xuICAgICAgICAgICAgZWxlbSA9IGNoZWNrZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjdXJzZSAmJiBjaGVja2VkLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVsZW0gPSBmaW5kT25lKHRlc3QsIGNoZWNrZWQuY2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtO1xufVxuZXhwb3J0cy5maW5kT25lID0gZmluZE9uZTtcbi8qKlxuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcmV0dXJucyBXaGV0aGVyIGEgdHJlZSBvZiBub2RlcyBjb250YWlucyBhdCBsZWFzdCBvbmUgbm9kZSBwYXNzaW5nIGEgdGVzdC5cbiAqL1xuZnVuY3Rpb24gZXhpc3RzT25lKHRlc3QsIG5vZGVzKSB7XG4gICAgcmV0dXJuIG5vZGVzLnNvbWUoZnVuY3Rpb24gKGNoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHRhZ3R5cGVzXzEuaXNUYWcoY2hlY2tlZCkgJiZcbiAgICAgICAgICAgICh0ZXN0KGNoZWNrZWQpIHx8XG4gICAgICAgICAgICAgICAgKGNoZWNrZWQuY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICBleGlzdHNPbmUodGVzdCwgY2hlY2tlZC5jaGlsZHJlbikpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZXhpc3RzT25lID0gZXhpc3RzT25lO1xuLyoqXG4gKiBTZWFyY2ggYW5kIGFycmF5IG9mIG5vZGVzIGFuZCBpdHMgY2hpbGRyZW4gZm9yIG5vZGVzIHBhc3NpbmcgYSB0ZXN0IGZ1bmN0aW9uLlxuICpcbiAqIFNhbWUgYXMgYGZpbmRgLCBvbmx5IHdpdGggbGVzcyBvcHRpb25zLCBsZWFkaW5nIHRvIHJlZHVjZWQgY29tcGxleGl0eS5cbiAqXG4gKiBAcGFyYW0gdGVzdCBGdW5jdGlvbiB0byB0ZXN0IG5vZGVzIG9uLlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyBwYXNzaW5nIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmluZEFsbCh0ZXN0LCBub2Rlcykge1xuICAgIHZhciBfYTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHN0YWNrID0gbm9kZXMuZmlsdGVyKHRhZ3R5cGVzXzEuaXNUYWcpO1xuICAgIHZhciBlbGVtO1xuICAgIHdoaWxlICgoZWxlbSA9IHN0YWNrLnNoaWZ0KCkpKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IChfYSA9IGVsZW0uY2hpbGRyZW4pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maWx0ZXIodGFndHlwZXNfMS5pc1RhZyk7XG4gICAgICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzdGFjay51bnNoaWZ0LmFwcGx5KHN0YWNrLCBjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRlc3QoZWxlbSkpXG4gICAgICAgICAgICByZXN1bHQucHVzaChlbGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZmluZEFsbCA9IGZpbmRBbGw7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEVsZW1lbnRzQnlUYWdUeXBlID0gZXhwb3J0cy5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGV4cG9ydHMuZ2V0RWxlbWVudEJ5SWQgPSBleHBvcnRzLmdldEVsZW1lbnRzID0gZXhwb3J0cy50ZXN0RWxlbWVudCA9IHZvaWQgMDtcbnZhciBxdWVyeWluZ18xID0gcmVxdWlyZShcIi4vcXVlcnlpbmdcIik7XG52YXIgdGFndHlwZXNfMSA9IHJlcXVpcmUoXCIuL3RhZ3R5cGVzXCIpO1xudmFyIENoZWNrcyA9IHtcbiAgICB0YWdfbmFtZTogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdGFndHlwZXNfMS5pc1RhZyhlbGVtKSAmJiBuYW1lKGVsZW0ubmFtZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWd0eXBlc18xLmlzVGFnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdGFndHlwZXNfMS5pc1RhZyhlbGVtKSAmJiBlbGVtLm5hbWUgPT09IG5hbWU7IH07XG4gICAgfSxcbiAgICB0YWdfdHlwZTogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdHlwZShlbGVtLnR5cGUpOyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50eXBlID09PSB0eXBlOyB9O1xuICAgIH0sXG4gICAgdGFnX2NvbnRhaW5zOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0YWd0eXBlc18xLmlzVGV4dChlbGVtKSAmJiBkYXRhKGVsZW0uZGF0YSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0YWd0eXBlc18xLmlzVGV4dChlbGVtKSAmJiBlbGVtLmRhdGEgPT09IGRhdGE7IH07XG4gICAgfSxcbn07XG4vKipcbiAqIEBwYXJhbSBhdHRyaWIgQXR0cmlidXRlIHRvIGNoZWNrLlxuICogQHBhcmFtIHZhbHVlIEF0dHJpYnV0ZSB2YWx1ZSB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdG8gY2hlY2sgd2hldGhlciB0aGUgYSBub2RlIGhhcyBhbiBhdHRyaWJ1dGUgd2l0aCBhIHBhcnRpY3VsYXIgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldEF0dHJpYkNoZWNrKGF0dHJpYiwgdmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0YWd0eXBlc18xLmlzVGFnKGVsZW0pICYmIHZhbHVlKGVsZW0uYXR0cmlic1thdHRyaWJdKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0YWd0eXBlc18xLmlzVGFnKGVsZW0pICYmIGVsZW0uYXR0cmlic1thdHRyaWJdID09PSB2YWx1ZTsgfTtcbn1cbi8qKlxuICogQHBhcmFtIGEgRmlyc3QgZnVuY3Rpb24gdG8gY29tYmluZS5cbiAqIEBwYXJhbSBiIFNlY29uZCBmdW5jdGlvbiB0byBjb21iaW5lLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0YWtpbmcgYSBub2RlIGFuZCByZXR1cm5pbmcgYHRydWVgIGlmIGVpdGhlclxuICogb2YgdGhlIGlucHV0IGZ1bmN0aW9ucyByZXR1cm5zIGB0cnVlYCBmb3IgdGhlIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVGdW5jcyhhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBhKGVsZW0pIHx8IGIoZWxlbSk7IH07XG59XG4vKipcbiAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBkZXNjcmliaW5nIG5vZGVzIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiBleGVjdXRpbmcgYWxsIGNoZWNrcyBpbiBgb3B0aW9uc2AgYW5kIHJldHVybmluZyBgdHJ1ZWBcbiAqIGlmIGFueSBvZiB0aGVtIG1hdGNoIGEgbm9kZS5cbiAqL1xuZnVuY3Rpb24gY29tcGlsZVRlc3Qob3B0aW9ucykge1xuICAgIHZhciBmdW5jcyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgcmV0dXJuIGtleSBpbiBDaGVja3NcbiAgICAgICAgICAgID8gQ2hlY2tzW2tleV0odmFsdWUpXG4gICAgICAgICAgICA6IGdldEF0dHJpYkNoZWNrKGtleSwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jcy5sZW5ndGggPT09IDAgPyBudWxsIDogZnVuY3MucmVkdWNlKGNvbWJpbmVGdW5jcyk7XG59XG4vKipcbiAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBkZXNjcmliaW5nIG5vZGVzIHRvIGxvb2sgZm9yLlxuICogQHBhcmFtIG5vZGUgVGhlIGVsZW1lbnQgdG8gdGVzdC5cbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIGVsZW1lbnQgbWF0Y2hlcyB0aGUgZGVzY3JpcHRpb24gaW4gYG9wdGlvbnNgLlxuICovXG5mdW5jdGlvbiB0ZXN0RWxlbWVudChvcHRpb25zLCBub2RlKSB7XG4gICAgdmFyIHRlc3QgPSBjb21waWxlVGVzdChvcHRpb25zKTtcbiAgICByZXR1cm4gdGVzdCA/IHRlc3Qobm9kZSkgOiB0cnVlO1xufVxuZXhwb3J0cy50ZXN0RWxlbWVudCA9IHRlc3RFbGVtZW50O1xuLyoqXG4gKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgZGVzY3JpYmluZyBub2RlcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHRoYXQgbWF0Y2ggYG9wdGlvbnNgLlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50cyhvcHRpb25zLCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBpZiAobGltaXQgPT09IHZvaWQgMCkgeyBsaW1pdCA9IEluZmluaXR5OyB9XG4gICAgdmFyIHRlc3QgPSBjb21waWxlVGVzdChvcHRpb25zKTtcbiAgICByZXR1cm4gdGVzdCA/IHF1ZXJ5aW5nXzEuZmlsdGVyKHRlc3QsIG5vZGVzLCByZWN1cnNlLCBsaW1pdCkgOiBbXTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudHMgPSBnZXRFbGVtZW50cztcbi8qKlxuICogQHBhcmFtIGlkIFRoZSB1bmlxdWUgSUQgYXR0cmlidXRlIHZhbHVlIHRvIGxvb2sgZm9yLlxuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICogQHBhcmFtIHJlY3Vyc2UgQWxzbyBjb25zaWRlciBjaGlsZCBub2Rlcy5cbiAqIEByZXR1cm5zIFRoZSBub2RlIHdpdGggdGhlIHN1cHBsaWVkIElELlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50QnlJZChpZCwgbm9kZXMsIHJlY3Vyc2UpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGVzKSlcbiAgICAgICAgbm9kZXMgPSBbbm9kZXNdO1xuICAgIHJldHVybiBxdWVyeWluZ18xLmZpbmRPbmUoZ2V0QXR0cmliQ2hlY2soXCJpZFwiLCBpZCksIG5vZGVzLCByZWN1cnNlKTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudEJ5SWQgPSBnZXRFbGVtZW50QnlJZDtcbi8qKlxuICogQHBhcmFtIHRhZ05hbWUgVGFnIG5hbWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHdpdGggdGhlIHN1cHBsaWVkIGB0YWdOYW1lYC5cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnTmFtZSwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gdHJ1ZTsgfVxuICAgIGlmIChsaW1pdCA9PT0gdm9pZCAwKSB7IGxpbWl0ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gcXVlcnlpbmdfMS5maWx0ZXIoQ2hlY2tzLnRhZ19uYW1lKHRhZ05hbWUpLCBub2RlcywgcmVjdXJzZSwgbGltaXQpO1xufVxuZXhwb3J0cy5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGdldEVsZW1lbnRzQnlUYWdOYW1lO1xuLyoqXG4gKiBAcGFyYW0gdHlwZSBFbGVtZW50IHR5cGUgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0gbm9kZXMgTm9kZXMgdG8gc2VhcmNoIHRocm91Z2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIGxpbWl0IE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyB3aXRoIHRoZSBzdXBwbGllZCBgdHlwZWAuXG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRzQnlUYWdUeXBlKHR5cGUsIG5vZGVzLCByZWN1cnNlLCBsaW1pdCkge1xuICAgIGlmIChyZWN1cnNlID09PSB2b2lkIDApIHsgcmVjdXJzZSA9IHRydWU7IH1cbiAgICBpZiAobGltaXQgPT09IHZvaWQgMCkgeyBsaW1pdCA9IEluZmluaXR5OyB9XG4gICAgcmV0dXJuIHF1ZXJ5aW5nXzEuZmlsdGVyKENoZWNrcy50YWdfdHlwZSh0eXBlKSwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ1R5cGUgPSBnZXRFbGVtZW50c0J5VGFnVHlwZTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudW5pcXVlU29ydCA9IGV4cG9ydHMuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBleHBvcnRzLnJlbW92ZVN1YnNldHMgPSB2b2lkIDA7XG52YXIgdGFndHlwZXNfMSA9IHJlcXVpcmUoXCIuL3RhZ3R5cGVzXCIpO1xuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSBvZiBub2RlcywgcmVtb3ZlIGFueSBtZW1iZXIgdGhhdCBpcyBjb250YWluZWQgYnkgYW5vdGhlci5cbiAqXG4gKiBAcGFyYW0gbm9kZXMgTm9kZXMgdG8gZmlsdGVyLlxuICogQHJldHVybnMgUmVtYWluaW5nIG5vZGVzIHRoYXQgYXJlbid0IHN1YnRyZWVzIG9mIGVhY2ggb3RoZXIuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVN1YnNldHMobm9kZXMpIHtcbiAgICB2YXIgaWR4ID0gbm9kZXMubGVuZ3RoO1xuICAgIC8qXG4gICAgICogQ2hlY2sgaWYgZWFjaCBub2RlIChvciBvbmUgb2YgaXRzIGFuY2VzdG9ycykgaXMgYWxyZWFkeSBjb250YWluZWQgaW4gdGhlXG4gICAgICogYXJyYXkuXG4gICAgICovXG4gICAgd2hpbGUgKC0taWR4ID49IDApIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpZHhdO1xuICAgICAgICAvKlxuICAgICAgICAgKiBSZW1vdmUgdGhlIG5vZGUgaWYgaXQgaXMgbm90IHVuaXF1ZS5cbiAgICAgICAgICogV2UgYXJlIGdvaW5nIHRocm91Z2ggdGhlIGFycmF5IGZyb20gdGhlIGVuZCwgc28gd2Ugb25seVxuICAgICAgICAgKiBoYXZlIHRvIGNoZWNrIG5vZGVzIHRoYXQgcHJlY2VlZCB0aGUgbm9kZSB1bmRlciBjb25zaWRlcmF0aW9uIGluIHRoZSBhcnJheS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpZHggPiAwICYmIG5vZGVzLmxhc3RJbmRleE9mKG5vZGUsIGlkeCAtIDEpID49IDApIHtcbiAgICAgICAgICAgIG5vZGVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgYW5jZXN0b3IgPSBub2RlLnBhcmVudDsgYW5jZXN0b3I7IGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50KSB7XG4gICAgICAgICAgICBpZiAobm9kZXMuaW5jbHVkZXMoYW5jZXN0b3IpKSB7XG4gICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuZXhwb3J0cy5yZW1vdmVTdWJzZXRzID0gcmVtb3ZlU3Vic2V0cztcbi8qKlxuICogQ29tcGFyZSB0aGUgcG9zaXRpb24gb2Ygb25lIG5vZGUgYWdhaW5zdCBhbm90aGVyIG5vZGUgaW4gYW55IG90aGVyIGRvY3VtZW50LlxuICogVGhlIHJldHVybiB2YWx1ZSBpcyBhIGJpdG1hc2sgd2l0aCB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAqXG4gKiBEb2N1bWVudCBvcmRlcjpcbiAqID4gVGhlcmUgaXMgYW4gb3JkZXJpbmcsIGRvY3VtZW50IG9yZGVyLCBkZWZpbmVkIG9uIGFsbCB0aGUgbm9kZXMgaW4gdGhlXG4gKiA+IGRvY3VtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlXG4gKiA+IFhNTCByZXByZXNlbnRhdGlvbiBvZiBlYWNoIG5vZGUgb2NjdXJzIGluIHRoZSBYTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gKiA+IGRvY3VtZW50IGFmdGVyIGV4cGFuc2lvbiBvZiBnZW5lcmFsIGVudGl0aWVzLiBUaHVzLCB0aGUgZG9jdW1lbnQgZWxlbWVudFxuICogPiBub2RlIHdpbGwgYmUgdGhlIGZpcnN0IG5vZGUuIEVsZW1lbnQgbm9kZXMgb2NjdXIgYmVmb3JlIHRoZWlyIGNoaWxkcmVuLlxuICogPiBUaHVzLCBkb2N1bWVudCBvcmRlciBvcmRlcnMgZWxlbWVudCBub2RlcyBpbiBvcmRlciBvZiB0aGUgb2NjdXJyZW5jZSBvZlxuICogPiB0aGVpciBzdGFydC10YWcgaW4gdGhlIFhNTCAoYWZ0ZXIgZXhwYW5zaW9uIG9mIGVudGl0aWVzKS4gVGhlIGF0dHJpYnV0ZVxuICogPiBub2RlcyBvZiBhbiBlbGVtZW50IG9jY3VyIGFmdGVyIHRoZSBlbGVtZW50IGFuZCBiZWZvcmUgaXRzIGNoaWxkcmVuLiBUaGVcbiAqID4gcmVsYXRpdmUgb3JkZXIgb2YgYXR0cmlidXRlIG5vZGVzIGlzIGltcGxlbWVudGF0aW9uLWRlcGVuZGVudC4vXG4gKlxuICogU291cmNlOlxuICogaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9nbG9zc2FyeS5odG1sI2R0LWRvY3VtZW50LW9yZGVyXG4gKlxuICogQHBhcmFtIG5vZGVBIFRoZSBmaXJzdCBub2RlIHRvIHVzZSBpbiB0aGUgY29tcGFyaXNvblxuICogQHBhcmFtIG5vZGVCIFRoZSBzZWNvbmQgbm9kZSB0byB1c2UgaW4gdGhlIGNvbXBhcmlzb25cbiAqIEByZXR1cm5zIEEgYml0bWFzayBkZXNjcmliaW5nIHRoZSBpbnB1dCBub2RlcycgcmVsYXRpdmUgcG9zaXRpb24uXG4gKlxuICogU2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1jb21wYXJlZG9jdW1lbnRwb3NpdGlvbiBmb3JcbiAqIGEgZGVzY3JpcHRpb24gb2YgdGhlc2UgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlQSwgbm9kZUIpIHtcbiAgICB2YXIgYVBhcmVudHMgPSBbXTtcbiAgICB2YXIgYlBhcmVudHMgPSBbXTtcbiAgICBpZiAobm9kZUEgPT09IG5vZGVCKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB2YXIgY3VycmVudCA9IHRhZ3R5cGVzXzEuaGFzQ2hpbGRyZW4obm9kZUEpID8gbm9kZUEgOiBub2RlQS5wYXJlbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgYVBhcmVudHMudW5zaGlmdChjdXJyZW50KTtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuICAgIH1cbiAgICBjdXJyZW50ID0gdGFndHlwZXNfMS5oYXNDaGlsZHJlbihub2RlQikgPyBub2RlQiA6IG5vZGVCLnBhcmVudDtcbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICBiUGFyZW50cy51bnNoaWZ0KGN1cnJlbnQpO1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHZhciBtYXhJZHggPSBNYXRoLm1pbihhUGFyZW50cy5sZW5ndGgsIGJQYXJlbnRzLmxlbmd0aCk7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgd2hpbGUgKGlkeCA8IG1heElkeCAmJiBhUGFyZW50c1tpZHhdID09PSBiUGFyZW50c1tpZHhdKSB7XG4gICAgICAgIGlkeCsrO1xuICAgIH1cbiAgICBpZiAoaWR4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiAxIC8qIERJU0NPTk5FQ1RFRCAqLztcbiAgICB9XG4gICAgdmFyIHNoYXJlZFBhcmVudCA9IGFQYXJlbnRzW2lkeCAtIDFdO1xuICAgIHZhciBzaWJsaW5ncyA9IHNoYXJlZFBhcmVudC5jaGlsZHJlbjtcbiAgICB2YXIgYVNpYmxpbmcgPSBhUGFyZW50c1tpZHhdO1xuICAgIHZhciBiU2libGluZyA9IGJQYXJlbnRzW2lkeF07XG4gICAgaWYgKHNpYmxpbmdzLmluZGV4T2YoYVNpYmxpbmcpID4gc2libGluZ3MuaW5kZXhPZihiU2libGluZykpIHtcbiAgICAgICAgaWYgKHNoYXJlZFBhcmVudCA9PT0gbm9kZUIpIHtcbiAgICAgICAgICAgIHJldHVybiA0IC8qIEZPTExPV0lORyAqLyB8IDE2IC8qIENPTlRBSU5FRF9CWSAqLztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gNCAvKiBGT0xMT1dJTkcgKi87XG4gICAgfVxuICAgIGlmIChzaGFyZWRQYXJlbnQgPT09IG5vZGVBKSB7XG4gICAgICAgIHJldHVybiAyIC8qIFBSRUNFRElORyAqLyB8IDggLyogQ09OVEFJTlMgKi87XG4gICAgfVxuICAgIHJldHVybiAyIC8qIFBSRUNFRElORyAqLztcbn1cbmV4cG9ydHMuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcbi8qKlxuICogU29ydCBhbiBhcnJheSBvZiBub2RlcyBiYXNlZCBvbiB0aGVpciByZWxhdGl2ZSBwb3NpdGlvbiBpbiB0aGUgZG9jdW1lbnQgYW5kXG4gKiByZW1vdmUgYW55IGR1cGxpY2F0ZSBub2Rlcy4gSWYgdGhlIGFycmF5IGNvbnRhaW5zIG5vZGVzIHRoYXQgZG8gbm90IGJlbG9uZ1xuICogdG8gdGhlIHNhbWUgZG9jdW1lbnQsIHNvcnQgb3JkZXIgaXMgdW5zcGVjaWZpZWQuXG4gKlxuICogQHBhcmFtIG5vZGVzIEFycmF5IG9mIERPTSBub2Rlcy5cbiAqIEByZXR1cm5zIENvbGxlY3Rpb24gb2YgdW5pcXVlIG5vZGVzLCBzb3J0ZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZVNvcnQobm9kZXMpIHtcbiAgICBub2RlcyA9IG5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSwgaSwgYXJyKSB7IHJldHVybiAhYXJyLmluY2x1ZGVzKG5vZGUsIGkgKyAxKTsgfSk7XG4gICAgbm9kZXMuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICB2YXIgcmVsYXRpdmUgPSBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhLCBiKTtcbiAgICAgICAgaWYgKHJlbGF0aXZlICYgMiAvKiBQUkVDRURJTkcgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWxhdGl2ZSAmIDQgLyogRk9MTE9XSU5HICovKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9KTtcbiAgICByZXR1cm4gbm9kZXM7XG59XG5leHBvcnRzLnVuaXF1ZVNvcnQgPSB1bmlxdWVTb3J0O1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vc3RyaW5naWZ5XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90cmF2ZXJzYWxcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21hbmlwdWxhdGlvblwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vcXVlcnlpbmdcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2xlZ2FjeVwiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaGVscGVyc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdGFndHlwZXNcIiksIGV4cG9ydHMpO1xuIiwgIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZUZlZWQgPSBleHBvcnRzLkZlZWRIYW5kbGVyID0gdm9pZCAwO1xudmFyIGRvbWhhbmRsZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZG9taGFuZGxlclwiKSk7XG52YXIgRG9tVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbXV0aWxzXCIpKTtcbnZhciBQYXJzZXJfMSA9IHJlcXVpcmUoXCIuL1BhcnNlclwiKTtcbnZhciBGZWVkSXRlbU1lZGlhTWVkaXVtO1xuKGZ1bmN0aW9uIChGZWVkSXRlbU1lZGlhTWVkaXVtKSB7XG4gICAgRmVlZEl0ZW1NZWRpYU1lZGl1bVtGZWVkSXRlbU1lZGlhTWVkaXVtW1wiaW1hZ2VcIl0gPSAwXSA9IFwiaW1hZ2VcIjtcbiAgICBGZWVkSXRlbU1lZGlhTWVkaXVtW0ZlZWRJdGVtTWVkaWFNZWRpdW1bXCJhdWRpb1wiXSA9IDFdID0gXCJhdWRpb1wiO1xuICAgIEZlZWRJdGVtTWVkaWFNZWRpdW1bRmVlZEl0ZW1NZWRpYU1lZGl1bVtcInZpZGVvXCJdID0gMl0gPSBcInZpZGVvXCI7XG4gICAgRmVlZEl0ZW1NZWRpYU1lZGl1bVtGZWVkSXRlbU1lZGlhTWVkaXVtW1wiZG9jdW1lbnRcIl0gPSAzXSA9IFwiZG9jdW1lbnRcIjtcbiAgICBGZWVkSXRlbU1lZGlhTWVkaXVtW0ZlZWRJdGVtTWVkaWFNZWRpdW1bXCJleGVjdXRhYmxlXCJdID0gNF0gPSBcImV4ZWN1dGFibGVcIjtcbn0pKEZlZWRJdGVtTWVkaWFNZWRpdW0gfHwgKEZlZWRJdGVtTWVkaWFNZWRpdW0gPSB7fSkpO1xudmFyIEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uO1xuKGZ1bmN0aW9uIChGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbikge1xuICAgIEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW0ZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW1wic2FtcGxlXCJdID0gMF0gPSBcInNhbXBsZVwiO1xuICAgIEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW0ZlZWRJdGVtTWVkaWFFeHByZXNzaW9uW1wiZnVsbFwiXSA9IDFdID0gXCJmdWxsXCI7XG4gICAgRmVlZEl0ZW1NZWRpYUV4cHJlc3Npb25bRmVlZEl0ZW1NZWRpYUV4cHJlc3Npb25bXCJub25zdG9wXCJdID0gMl0gPSBcIm5vbnN0b3BcIjtcbn0pKEZlZWRJdGVtTWVkaWFFeHByZXNzaW9uIHx8IChGZWVkSXRlbU1lZGlhRXhwcmVzc2lvbiA9IHt9KSk7XG4vLyBUT0RPOiBDb25zdW1lIGRhdGEgYXMgaXQgaXMgY29taW5nIGluXG52YXIgRmVlZEhhbmRsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZlZWRIYW5kbGVyLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNhbGxiYWNrXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBGZWVkSGFuZGxlcihjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNhbGxiYWNrLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEZlZWRIYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIGZlZWRSb290ID0gZ2V0T25lRWxlbWVudChpc1ZhbGlkRmVlZCwgdGhpcy5kb20pO1xuICAgICAgICBpZiAoIWZlZWRSb290KSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKG5ldyBFcnJvcihcImNvdWxkbid0IGZpbmQgcm9vdCBvZiBmZWVkXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmVlZCA9IHt9O1xuICAgICAgICBpZiAoZmVlZFJvb3QubmFtZSA9PT0gXCJmZWVkXCIpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHMgPSBmZWVkUm9vdC5jaGlsZHJlbjtcbiAgICAgICAgICAgIGZlZWQudHlwZSA9IFwiYXRvbVwiO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImlkXCIsIFwiaWRcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICB2YXIgaHJlZiA9IGdldEF0dHJpYnV0ZShcImhyZWZcIiwgZ2V0T25lRWxlbWVudChcImxpbmtcIiwgY2hpbGRzKSk7XG4gICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICAgIGZlZWQubGluayA9IGhyZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwiZGVzY3JpcHRpb25cIiwgXCJzdWJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgICAgICAgICAgdmFyIHVwZGF0ZWQgPSBmZXRjaChcInVwZGF0ZWRcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgZmVlZC51cGRhdGVkID0gbmV3IERhdGUodXBkYXRlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwiYXV0aG9yXCIsIFwiZW1haWxcIiwgY2hpbGRzLCB0cnVlKTtcbiAgICAgICAgICAgIGZlZWQuaXRlbXMgPSBnZXRFbGVtZW50cyhcImVudHJ5XCIsIGNoaWxkcykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gaXRlbS5jaGlsZHJlbjtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiaWRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgdmFyIGhyZWYgPSBnZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGdldE9uZUVsZW1lbnQoXCJsaW5rXCIsIGNoaWxkcmVuKSk7XG4gICAgICAgICAgICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkubGluayA9IGhyZWY7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdGlvbiA9IGZldGNoKFwic3VtbWFyeVwiLCBjaGlsZHJlbikgfHwgZmV0Y2goXCJjb250ZW50XCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHB1YkRhdGUgPSBmZXRjaChcInVwZGF0ZWRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGlmIChwdWJEYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnB1YkRhdGUgPSBuZXcgRGF0ZShwdWJEYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZW50cnkubWVkaWEgPSBnZXRNZWRpYUVsZW1lbnRzKGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHMgPSAoX2IgPSAoX2EgPSBnZXRPbmVFbGVtZW50KFwiY2hhbm5lbFwiLCBmZWVkUm9vdC5jaGlsZHJlbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jaGlsZHJlbikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogW107XG4gICAgICAgICAgICBmZWVkLnR5cGUgPSBmZWVkUm9vdC5uYW1lLnN1YnN0cigwLCAzKTtcbiAgICAgICAgICAgIGZlZWQuaWQgPSBcIlwiO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJsaW5rXCIsIFwibGlua1wiLCBjaGlsZHMpO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImRlc2NyaXB0aW9uXCIsIFwiZGVzY3JpcHRpb25cIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIHZhciB1cGRhdGVkID0gZmV0Y2goXCJsYXN0QnVpbGREYXRlXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICAgICAgICAgIGZlZWQudXBkYXRlZCA9IG5ldyBEYXRlKHVwZGF0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcIm1hbmFnaW5nRWRpdG9yXCIsIGNoaWxkcywgdHJ1ZSk7XG4gICAgICAgICAgICBmZWVkLml0ZW1zID0gZ2V0RWxlbWVudHMoXCJpdGVtXCIsIGZlZWRSb290LmNoaWxkcmVuKS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xuICAgICAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiaWRcIiwgXCJndWlkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwibGlua1wiLCBcImxpbmtcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiZGVzY3JpcHRpb25cIiwgXCJkZXNjcmlwdGlvblwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgICAgdmFyIHB1YkRhdGUgPSBmZXRjaChcInB1YkRhdGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICAgIGlmIChwdWJEYXRlKVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUocHViRGF0ZSk7XG4gICAgICAgICAgICAgICAgZW50cnkubWVkaWEgPSBnZXRNZWRpYUVsZW1lbnRzKGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZlZWQgPSBmZWVkO1xuICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKG51bGwpO1xuICAgIH07XG4gICAgcmV0dXJuIEZlZWRIYW5kbGVyO1xufShkb21oYW5kbGVyXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5GZWVkSGFuZGxlciA9IEZlZWRIYW5kbGVyO1xuZnVuY3Rpb24gZ2V0TWVkaWFFbGVtZW50cyh3aGVyZSkge1xuICAgIHJldHVybiBnZXRFbGVtZW50cyhcIm1lZGlhOmNvbnRlbnRcIiwgd2hlcmUpLm1hcChmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICB2YXIgbWVkaWEgPSB7XG4gICAgICAgICAgICBtZWRpdW06IGVsZW0uYXR0cmlicy5tZWRpdW0sXG4gICAgICAgICAgICBpc0RlZmF1bHQ6ICEhZWxlbS5hdHRyaWJzLmlzRGVmYXVsdCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy51cmwpIHtcbiAgICAgICAgICAgIG1lZGlhLnVybCA9IGVsZW0uYXR0cmlicy51cmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5maWxlU2l6ZSkge1xuICAgICAgICAgICAgbWVkaWEuZmlsZVNpemUgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuZmlsZVNpemUsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLnR5cGUpIHtcbiAgICAgICAgICAgIG1lZGlhLnR5cGUgPSBlbGVtLmF0dHJpYnMudHlwZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIG1lZGlhLmV4cHJlc3Npb24gPSBlbGVtLmF0dHJpYnNcbiAgICAgICAgICAgICAgICAuZXhwcmVzc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmJpdHJhdGUpIHtcbiAgICAgICAgICAgIG1lZGlhLmJpdHJhdGUgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuYml0cmF0ZSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMuZnJhbWVyYXRlKSB7XG4gICAgICAgICAgICBtZWRpYS5mcmFtZXJhdGUgPSBwYXJzZUludChlbGVtLmF0dHJpYnMuZnJhbWVyYXRlLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5zYW1wbGluZ3JhdGUpIHtcbiAgICAgICAgICAgIG1lZGlhLnNhbXBsaW5ncmF0ZSA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy5zYW1wbGluZ3JhdGUsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLmNoYW5uZWxzKSB7XG4gICAgICAgICAgICBtZWRpYS5jaGFubmVscyA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy5jaGFubmVscywgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMuZHVyYXRpb24pIHtcbiAgICAgICAgICAgIG1lZGlhLmR1cmF0aW9uID0gcGFyc2VJbnQoZWxlbS5hdHRyaWJzLmR1cmF0aW9uLCAxMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW0uYXR0cmlicy5oZWlnaHQpIHtcbiAgICAgICAgICAgIG1lZGlhLmhlaWdodCA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy5oZWlnaHQsIDEwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbS5hdHRyaWJzLndpZHRoKSB7XG4gICAgICAgICAgICBtZWRpYS53aWR0aCA9IHBhcnNlSW50KGVsZW0uYXR0cmlicy53aWR0aCwgMTApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbGVtLmF0dHJpYnMubGFuZykge1xuICAgICAgICAgICAgbWVkaWEubGFuZyA9IGVsZW0uYXR0cmlicy5sYW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldEVsZW1lbnRzKHRhZ05hbWUsIHdoZXJlKSB7XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZ05hbWUsIHdoZXJlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGdldE9uZUVsZW1lbnQodGFnTmFtZSwgbm9kZSkge1xuICAgIHJldHVybiBEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lLCBub2RlLCB0cnVlLCAxKVswXTtcbn1cbmZ1bmN0aW9uIGZldGNoKHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlKSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gZmFsc2U7IH1cbiAgICByZXR1cm4gRG9tVXRpbHMuZ2V0VGV4dChEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lLCB3aGVyZSwgcmVjdXJzZSwgMSkpLnRyaW0oKTtcbn1cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZShuYW1lLCBlbGVtKSB7XG4gICAgaWYgKCFlbGVtKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgYXR0cmlicyA9IGVsZW0uYXR0cmlicztcbiAgICByZXR1cm4gYXR0cmlic1tuYW1lXTtcbn1cbmZ1bmN0aW9uIGFkZENvbmRpdGlvbmFsbHkob2JqLCBwcm9wLCB3aGF0LCB3aGVyZSwgcmVjdXJzZSkge1xuICAgIGlmIChyZWN1cnNlID09PSB2b2lkIDApIHsgcmVjdXJzZSA9IGZhbHNlOyB9XG4gICAgdmFyIHRtcCA9IGZldGNoKHdoYXQsIHdoZXJlLCByZWN1cnNlKTtcbiAgICBpZiAodG1wKVxuICAgICAgICBvYmpbcHJvcF0gPSB0bXA7XG59XG5mdW5jdGlvbiBpc1ZhbGlkRmVlZCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gXCJyc3NcIiB8fCB2YWx1ZSA9PT0gXCJmZWVkXCIgfHwgdmFsdWUgPT09IFwicmRmOlJERlwiO1xufVxuLyoqXG4gKiBQYXJzZSBhIGZlZWQuXG4gKlxuICogQHBhcmFtIGZlZWQgVGhlIGZlZWQgdGhhdCBzaG91bGQgYmUgcGFyc2VkLCBhcyBhIHN0cmluZy5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsbHksIG9wdGlvbnMgZm9yIHBhcnNpbmcuIFdoZW4gdXNpbmcgdGhpcyBvcHRpb24sIHlvdSBzaG91bGQgc2V0IGB4bWxNb2RlYCB0byBgdHJ1ZWAuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRmVlZChmZWVkLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0geyB4bWxNb2RlOiB0cnVlIH07IH1cbiAgICB2YXIgaGFuZGxlciA9IG5ldyBGZWVkSGFuZGxlcihvcHRpb25zKTtcbiAgICBuZXcgUGFyc2VyXzEuUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpLmVuZChmZWVkKTtcbiAgICByZXR1cm4gaGFuZGxlci5mZWVkO1xufVxuZXhwb3J0cy5wYXJzZUZlZWQgPSBwYXJzZUZlZWQ7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJzc0hhbmRsZXIgPSBleHBvcnRzLkRlZmF1bHRIYW5kbGVyID0gZXhwb3J0cy5Eb21VdGlscyA9IGV4cG9ydHMuRWxlbWVudFR5cGUgPSBleHBvcnRzLlRva2VuaXplciA9IGV4cG9ydHMuY3JlYXRlRG9tU3RyZWFtID0gZXhwb3J0cy5wYXJzZURPTSA9IGV4cG9ydHMucGFyc2VEb2N1bWVudCA9IGV4cG9ydHMuRG9tSGFuZGxlciA9IGV4cG9ydHMuUGFyc2VyID0gdm9pZCAwO1xudmFyIFBhcnNlcl8xID0gcmVxdWlyZShcIi4vUGFyc2VyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBQYXJzZXJfMS5QYXJzZXI7IH0gfSk7XG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEb21IYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlZmF1bHRIYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcjsgfSB9KTtcbi8vIEhlbHBlciBtZXRob2RzXG4vKipcbiAqIFBhcnNlcyB0aGUgZGF0YSwgcmV0dXJucyB0aGUgcmVzdWx0aW5nIGRvY3VtZW50LlxuICpcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRoYXQgc2hvdWxkIGJlIHBhcnNlZC5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBwYXJzZXIgYW5kIERPTSBidWlsZGVyLlxuICovXG5mdW5jdGlvbiBwYXJzZURvY3VtZW50KGRhdGEsIG9wdGlvbnMpIHtcbiAgICB2YXIgaGFuZGxlciA9IG5ldyBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgIG5ldyBQYXJzZXJfMS5QYXJzZXIoaGFuZGxlciwgb3B0aW9ucykuZW5kKGRhdGEpO1xuICAgIHJldHVybiBoYW5kbGVyLnJvb3Q7XG59XG5leHBvcnRzLnBhcnNlRG9jdW1lbnQgPSBwYXJzZURvY3VtZW50O1xuLyoqXG4gKiBQYXJzZXMgZGF0YSwgcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgcm9vdCBub2Rlcy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIHJvb3Qgbm9kZXMgc3RpbGwgaGF2ZSBhIGBEb2N1bWVudGAgbm9kZSBhcyB0aGVpciBwYXJlbnQuXG4gKiBVc2UgYHBhcnNlRG9jdW1lbnRgIHRvIGdldCB0aGUgYERvY3VtZW50YCBub2RlIGluc3RlYWQuXG4gKlxuICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdGhhdCBzaG91bGQgYmUgcGFyc2VkLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHBhcnNlciBhbmQgRE9NIGJ1aWxkZXIuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYHBhcnNlRG9jdW1lbnRgIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRE9NKGRhdGEsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gcGFyc2VEb2N1bWVudChkYXRhLCBvcHRpb25zKS5jaGlsZHJlbjtcbn1cbmV4cG9ydHMucGFyc2VET00gPSBwYXJzZURPTTtcbi8qKlxuICogQ3JlYXRlcyBhIHBhcnNlciBpbnN0YW5jZSwgd2l0aCBhbiBhdHRhY2hlZCBET00gaGFuZGxlci5cbiAqXG4gKiBAcGFyYW0gY2IgQSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIG9uY2UgcGFyc2luZyBoYXMgYmVlbiBjb21wbGV0ZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcGFyc2VyIGFuZCBET00gYnVpbGRlci5cbiAqIEBwYXJhbSBlbGVtZW50Q2IgQW4gb3B0aW9uYWwgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCBldmVyeSB0aW1lIGEgdGFnIGhhcyBiZWVuIGNvbXBsZXRlZCBpbnNpZGUgb2YgdGhlIERPTS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRG9tU3RyZWFtKGNiLCBvcHRpb25zLCBlbGVtZW50Q2IpIHtcbiAgICB2YXIgaGFuZGxlciA9IG5ldyBkb21oYW5kbGVyXzEuRG9tSGFuZGxlcihjYiwgb3B0aW9ucywgZWxlbWVudENiKTtcbiAgICByZXR1cm4gbmV3IFBhcnNlcl8xLlBhcnNlcihoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuY3JlYXRlRG9tU3RyZWFtID0gY3JlYXRlRG9tU3RyZWFtO1xudmFyIFRva2VuaXplcl8xID0gcmVxdWlyZShcIi4vVG9rZW5pemVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9rZW5pemVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQoVG9rZW5pemVyXzEpLmRlZmF1bHQ7IH0gfSk7XG52YXIgRWxlbWVudFR5cGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpKTtcbmV4cG9ydHMuRWxlbWVudFR5cGUgPSBFbGVtZW50VHlwZTtcbi8qXG4gKiBBbGwgb2YgdGhlIGZvbGxvd2luZyBleHBvcnRzIGV4aXN0IGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqIFRoZXkgc2hvdWxkIHByb2JhYmx5IGJlIHJlbW92ZWQgZXZlbnR1YWxseS5cbiAqL1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL0ZlZWRIYW5kbGVyXCIpLCBleHBvcnRzKTtcbmV4cG9ydHMuRG9tVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbXV0aWxzXCIpKTtcbnZhciBGZWVkSGFuZGxlcl8xID0gcmVxdWlyZShcIi4vRmVlZEhhbmRsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSc3NIYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBGZWVkSGFuZGxlcl8xLkZlZWRIYW5kbGVyOyB9IH0pO1xuIiwgIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwgIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwgIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsICJpbXBvcnQgSURMRV9XT1JLRVJfVVJMIGZyb20gXCJzcmMvX2Rldl8vSWRsZVdvcmtlci5qc3VybFwiO1xuXG5pZiAodHlwZW9mIFNoYXJlZFdvcmtlciAhPT0gXCJ1bmRlZmluZWRcIiAmJiAhZ2xvYmFsVGhpc1tcIklETEVfV09SS0VSXCJdKSB7XG4gIC8vIGdsb2JhbFRoaXNbXCJJRExFX1dPUktFUlwiXSA9IG5ldyBTaGFyZWRXb3JrZXIoSURMRV9XT1JLRVJfVVJMLCB7XG4gIC8vICAgdHlwZTogXCJtb2R1bGVcIixcbiAgLy8gICBuYW1lOiBcIklkbGVXb3JrZXJcIixcbiAgLy8gfSk7XG4gIC8vIGNvbnNvbGUubG9nKFwiTGF1bmNoIGlkbGUgd29ya2VyXCIpO1xufVxuIiwgImlmIChnbG9iYWxUaGlzLm5hdmlnYXRvci5zZXJ2aWNlV29ya2VyKSB7XG4gIGdsb2JhbFRoaXMubmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcbiAgICAucmVnaXN0ZXIoXCIvX2Rldl8vc2VydmljZS13b3JrZXIuanNcIiwgeyBzY29wZTogXCIvXCIgfSlcbiAgICAudGhlbihmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlNlcnZpY2VXb3JrZXIgcmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwhXCIpO1xuICAgICAgZ2xvYmFsVGhpcy5uYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5zdGFydE1lc3NhZ2VzKCk7XG4gICAgICBjb25zdCBjb250cm9sbGVyID0gZ2xvYmFsVGhpcy5uYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyO1xuICAgICAgY29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoKSA9PiB7fSk7XG5cbiAgICAgIC8vIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIC8vICAgY29udHJvbGxlci5wb3N0TWVzc2FnZSgxKTtcbiAgICAgIC8vIH0sIDMyKTtcbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhcIlNlcnZpY2VXb3JrZXIgcmVnaXN0cmF0aW9uIGZhaWxlZDogXCIsIGVycik7XG4gICAgfSk7XG59XG4iLCAiaW1wb3J0IFwic3JjL2xpYi9sYXVuY2hJZGxlV29ya2VyXCI7XG5pbXBvcnQgXCJzcmMvbGliL2luamVjdFNlcnZpY2VXb3JrZXJcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xuaW1wb3J0IHsgRGF0YWJhc2UgfSBmcm9tIFwic3JjL2xpYi9EYXRhYmFzZVwiO1xuaW1wb3J0IHsgSW5pdGlhbFBhY2thZ2VyIH0gZnJvbSBcInNyYy9saWIvSW5pdGlhbFBhY2thZ2VyXCI7XG5pbXBvcnQgXCIuL05ld1Byb2plY3RQYWdlLmNzc1wiO1xuaW1wb3J0IHsgZ2V0UGFja2FnZUlEIH0gZnJvbSBcIi4vZ2V0UGFja2FnZUlEXCI7XG5pbXBvcnQgeyBSb3V0ZSwgUm91dGVyVHlwZSB9IGZyb20gXCJzcmMvbGliL1JvdXRlXCI7XG5pbXBvcnQgeyBHZWFySWNvbiB9IGZyb20gXCJzcmMvaWNvbnMvR2Vhckljb25cIjtcbmltcG9ydCB7XG4gIFBhY2thZ2VKU09ORWRpdG9yLFxuICBnZXRSb3V0ZUZpbGVzRm9ySGFuZGxlLFxufSBmcm9tIFwiZG9jcy9QYWNrYWdlSlNPTkVkaXRvclwiO1xuaW1wb3J0IHsgUGFja2FnZUpTT05GaWxlIH0gZnJvbSBcInNyYy9saWIvUGFja2FnZUpTT05cIjtcbmltcG9ydCB7IE5hdGl2ZUZTIH0gZnJvbSBcInNyYy9saWIvcm91dGVyL2ZzLW5hdGl2ZVwiO1xuaW1wb3J0IHsgZmlsZXR5cGVzIH0gZnJvbSBcInNyYy9pY29ucy9maWxldHlwZXMvZmlsZXR5cGVzXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoLWJyb3dzZXJpZnlcIjtcbmltcG9ydCB7IFN0b3JlZFBhY2thZ2UgfSBmcm9tIFwic3JjL2xpYi9TdG9yZWRQYWNrYWdlXCI7XG5pbXBvcnQgeyBFcnJvckNvZGUgfSBmcm9tIFwic3JjL2xpYi9FcnJvckNvZGVcIjtcblxuY29uc3QgcGFja2FnZXIgPSBuZXcgSW5pdGlhbFBhY2thZ2VyKCk7XG5cbmVudW0gRGlyZWN0b3J5TG9hZFN0YXRlIHtcbiAgbG9hZGluZyxcbiAgbG9hZGVkLFxufVxuXG5jb25zdCBwa2dKU09OID0gbmV3IFBhY2thZ2VKU09ORmlsZSgpO1xuY29uc3QgUGFja2FnZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgZGlyZWN0b3J5OiBudWxsLFxuICBwYWNrYWdlcixcbiAgaWQ6IGdldFBhY2thZ2VJRCgpLFxuICBzZXREaXJlY3Rvcnk6ICgpID0+IHt9LFxuICBwa2dKU09OLFxuICBkaXJlY3RvcnlMb2FkaW5nU3RhdGU6IERpcmVjdG9yeUxvYWRTdGF0ZS5sb2FkaW5nLFxufSBhcyB7XG4gIGRpcmVjdG9yeTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZTtcbiAgcGFja2FnZXI6IEluaXRpYWxQYWNrYWdlcjtcbiAgaWQ6IHN0cmluZztcbiAgc2V0RGlyZWN0b3J5OiAoZGlyOiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlKSA9PiB2b2lkO1xuICBwa2dKU09OOiBQYWNrYWdlSlNPTkZpbGU7XG4gIGRpcmVjdG9yeUxvYWRpbmdTdGF0ZTogRGlyZWN0b3J5TG9hZFN0YXRlO1xufSk7XG5cbmNvbnN0IFBhY2thZ2VQcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgY29uc3QgW2RpcmVjdG9yeSwgX3NldERpcmVjdG9yeV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2RpcmVjdG9yeUxvYWRpbmdTdGF0ZSwgc2V0RGlyZWN0b3J5TG9hZFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKFxuICAgIERpcmVjdG9yeUxvYWRTdGF0ZS5sb2FkaW5nXG4gICk7XG4gIGNvbnN0IHNldERpcmVjdG9yeSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChkaXJIYW5kbGUpID0+IHtcbiAgICAgIC8vIChnbG9iYWxUaGlzW1wiSURMRV9XT1JLRVJcIl0gYXMgU2hhcmVkV29ya2VyKS5wb3J0LnBvc3RNZXNzYWdlKGRpckhhbmRsZSk7XG4gICAgICBfc2V0RGlyZWN0b3J5KGRpckhhbmRsZSk7XG4gICAgICBpZiAoZGlySGFuZGxlKSB7XG4gICAgICAgIHBhY2thZ2VyLmRhdGFiYXNlXG4gICAgICAgICAgLnNhdmVEaXIoZGlySGFuZGxlKVxuICAgICAgICAgIC50aGVuKChhKSA9PiBjb25zb2xlLmxvZyhcIlNhdmVkIGRpckhhbmRsZVwiKSk7XG4gICAgICB9XG5cbiAgICAgIHNldERpcmVjdG9yeUxvYWRTdGF0ZShEaXJlY3RvcnlMb2FkU3RhdGUubG9hZGVkKTtcbiAgICB9LFxuICAgIFtfc2V0RGlyZWN0b3J5LCBzZXREaXJlY3RvcnlMb2FkU3RhdGVdXG4gICk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcGFja2FnZXIuZGF0YWJhc2VcbiAgICAgIC5sb2FkRGlyKClcbiAgICAgIC50aGVuKGFzeW5jIChkaXI6IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUpID0+IHtcbiAgICAgICAgaWYgKGRpcikge1xuICAgICAgICAgIC8vIChnbG9iYWxUaGlzW1wiSURMRV9XT1JLRVJcIl0gYXMgU2hhcmVkV29ya2VyKS5wb3J0LnBvc3RNZXNzYWdlKGRpcik7XG5cbiAgICAgICAgICBpZiAoKGF3YWl0IGRpci5xdWVyeVBlcm1pc3Npb24oeyBtb2RlOiBcInJlYWRcIiB9KSkgIT09IFwiZ3JhbnRlZFwiKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBkaXIucmVxdWVzdFBlcm1pc3Npb24oeyBtb2RlOiBcInJlYWRcIiB9KTtcbiAgICAgICAgICAgIGlmIChyZXMgPT09IFwiZGVuaWVkXCIpIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICBwa2dKU09OLmhhbmRsZSA9IGF3YWl0IGRpci5nZXRGaWxlSGFuZGxlKFwicGFja2FnZS5qc29uXCIpO1xuXG4gICAgICAgICAgcGtnSlNPTi5wcm9jZXNzKGF3YWl0IChhd2FpdCBwa2dKU09OLmhhbmRsZS5nZXRGaWxlKCkpLnRleHQoKSk7XG5cbiAgICAgICAgICByZXR1cm4gZGlyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnRoZW4oXG4gICAgICAgIChkaXIpID0+IHtcbiAgICAgICAgICBpZiAoZGlyKSB7XG4gICAgICAgICAgICBfc2V0RGlyZWN0b3J5KGRpcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldERpcmVjdG9yeUxvYWRTdGF0ZShEaXJlY3RvcnlMb2FkU3RhdGUubG9hZGVkKTtcbiAgICAgICAgfSxcbiAgICAgICAgKGUpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgIHNldERpcmVjdG9yeUxvYWRTdGF0ZShEaXJlY3RvcnlMb2FkU3RhdGUubG9hZGVkKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgfSwgW3NldERpcmVjdG9yeUxvYWRTdGF0ZSwgcGFja2FnZXIsIF9zZXREaXJlY3RvcnksIHBrZ0pTT05dKTtcblxuICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBwYWNrYWdlcixcbiAgICAgIGRpcmVjdG9yeSxcbiAgICAgIHNldERpcmVjdG9yeSxcbiAgICAgIHBrZ0pTT04sXG4gICAgICBpZDogZ2V0UGFja2FnZUlEKCksXG4gICAgICBkaXJlY3RvcnlMb2FkaW5nU3RhdGUsXG4gICAgfSksXG4gICAgW3BhY2thZ2VyLCBkaXJlY3RvcnksIHNldERpcmVjdG9yeSwgZ2V0UGFja2FnZUlELCBkaXJlY3RvcnlMb2FkaW5nU3RhdGVdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8UGFja2FnZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9QYWNrYWdlQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbmNvbnN0IFRpdGxlID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJUaXRsZVwiPntjaGlsZHJlbn08L2Rpdj47XG59O1xuXG5jb25zdCBNb25vc3BhY2UgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybiA8c3BhbiBjbGFzc05hbWU9XCJNb25vc3BhY2VcIj57Y2hpbGRyZW59PC9zcGFuPjtcbn07XG5cbmNvbnN0IEhpZ2hsaWdodCA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT1cIkhpZ2hsaWdodFwiPntjaGlsZHJlbn08L3NwYW4+O1xufTtcblxuY29uc3QgSW5zdHJ1Y3Rpb25zID0gKHsgY2hpbGRyZW4gfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cIlBhcmFncmFwaFwiPntjaGlsZHJlbn08L2Rpdj5cbik7XG5cbmNvbnN0IERyb3Bib3ggPSAoeyBjaGlsZHJlbiwgZHJhZ1N0YXRlLCBvbkNsaWNrIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IG9uQ2xpY2s9e29uQ2xpY2t9IGNsYXNzTmFtZT17YERyb3Bib3ggJHtEcmFnU3RhdGVDbGFzc2VzW2RyYWdTdGF0ZV19YH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIkRyb3Bib3gtYmFja2dyb3VuZFwiPlxuICAgICAgICA8c3ZnIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIj5cbiAgICAgICAgICA8cmVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIHI9XCIyMFwiIC8+XG4gICAgICAgIDwvc3ZnPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIkRyb3Bib3gtZm9yZWdyb3VuZFwiPntjaGlsZHJlbn08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEhlbHBUZXh0ID0gKHsgY2hpbGRyZW4gfSkgPT4gPGRpdiBjbGFzc05hbWU9XCJIZWxwVGV4dFwiPntjaGlsZHJlbn08L2Rpdj47XG5cbmVudW0gU3RhdHVzTGlnaHRMZXZlbCB7XG4gIHVua25vd24sXG4gIHZlcmlmeWluZyxcbiAgYnVpbHQsXG4gIGVycm9yLFxufVxuY29uc3QgU3RhdHVzTGlnaHRMZXZlbENsYXNzTmFtZXMgPSBbXG4gIFwiU3RhdHVzTGlnaHRMZXZlbC0tdW5rbm93blwiLFxuICBcIlN0YXR1c0xpZ2h0TGV2ZWwtLXZlcmlmeWluZ1wiLFxuICBcIlN0YXR1c0xpZ2h0TGV2ZWwtLWJ1aWxkaW5nXCIsXG4gIFwiU3RhdHVzTGlnaHRMZXZlbC0tZXJyb3JcIixcbl07XG5jb25zdCBTdGF0dXNMaWdodCA9ICh7IGxldmVsIH0pID0+IChcbiAgPHNwYW4gY2xhc3NOYW1lPXtgU3RhdHVzTGlnaHQgJHtTdGF0dXNMaWdodExldmVsQ2xhc3NOYW1lc1tsZXZlbF19YH0gLz5cbik7XG5cbmNvbnN0IEF0dGFjaEZvbGRlclN0ZXAgPSAoeyBkcmFnU3RhdGUsIG9uQ2xpY2tEcm9wYm94IH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8bWFpbiBjbGFzc05hbWU9XCJOZXdQcm9qZWN0UGFnZVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJUaXRsZUNvbnRhaW5lclwiPlxuICAgICAgICA8U3RhdHVzTGlnaHQgbGV2ZWw9e1N0YXR1c0xpZ2h0TGV2ZWwudW5rbm93bn0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJUaXRsZUdyb3VwXCI+XG4gICAgICAgICAgPFRpdGxlPlxuICAgICAgICAgICAgU3RhcnQgPE1vbm9zcGFjZT57Z2V0UGFja2FnZUlEKCl9PC9Nb25vc3BhY2U+XG4gICAgICAgICAgPC9UaXRsZT5cbiAgICAgICAgICA8SW5zdHJ1Y3Rpb25zPlxuICAgICAgICAgICAgRHJhZyBhbmQgZHJvcCBhIDxIaWdobGlnaHQ+XHVEODNEXHVEQ0MyIGZvbGRlcjwvSGlnaGxpZ2h0PiB3aXRoIGF7XCIgXCJ9XG4gICAgICAgICAgICA8TW9ub3NwYWNlPnBhY2thZ2UuanNvbjwvTW9ub3NwYWNlPiBpbnNpZGUuXG4gICAgICAgICAgPC9JbnN0cnVjdGlvbnM+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxEcm9wYm94IG9uQ2xpY2s9e29uQ2xpY2tEcm9wYm94fSBkcmFnU3RhdGU9e2RyYWdTdGF0ZX0+XG4gICAgICAgIERyb3AgZm9sZGVyIHdpdGggYSBwYWNrYWdlLmpzb24gaW4gaGVyZVxuICAgICAgPC9Ecm9wYm94PlxuXG4gICAgICA8SGVscFRleHQ+XG4gICAgICAgIENvZGUgd2l0aCB5b3VyIGxvY2FsIGVkaXRvciwgYW5kIHlvdXIgZGV2IHNlcnZlciBzeW5jcyBhdXRvbWF0aWNhbGx5LlxuICAgICAgICBUaGVyZSdzIG5vdGhpbmcgdG8gaW5zdGFsbC4gVGhlcmUgYXJlIG5vIGNvbW1hbmRzIHRvIHJ1bi4gWW91ciBjb2RlXG4gICAgICAgIHN0YXlzIG9uIHlvdXIgbG9jYWwgY29tcHV0ZXIuXG4gICAgICA8L0hlbHBUZXh0PlxuICAgICAgPEZvb3RlciAvPlxuICAgIDwvbWFpbj5cbiAgKTtcbn07XG5cbmNvbnN0IEZvb3RlciA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIkZvb3RlclwiPlxuICAgICAgPGRpdj5cbiAgICAgICAge25ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFtcImxvb2t1cFwiXSwge1xuICAgICAgICAgIGRhdGVTdHlsZTogXCJzaG9ydFwiLFxuICAgICAgICAgIHRpbWVTdHlsZTogXCJsb25nXCIsXG4gICAgICAgIH0pLmZvcm1hdChuZXcgRGF0ZSgpKX1cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2PntnZXRQYWNrYWdlSUQoKX08L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmVudW0gUHJvamVjdFN0ZXAge1xuICBhdHRhY2gsXG4gIHZlcmlmeUZvbGRlcixcbiAgY29uZmlnLFxuICByZWFkeSxcbiAgbG9hZEZvbGRlcixcbiAgcGV0aXRpb25Nb3ppbGxhLCAvLyBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9zdGFuZGFyZHMtcG9zaXRpb25zL2lzc3Vlcy8xNTRcbiAgcGV0aXRpb25XZWJraXQsIC8vIGh0dHBzOi8vbGlzdHMud2Via2l0Lm9yZy9waXBlcm1haWwvd2Via2l0LWRldi8yMDIwLUF1Z3VzdC8wMzEzNjIuaHRtbCxcbn1cblxuY29uc3QgUGV0aXRpb25Nb3ppbGxhID0gKHt9KSA9PiB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3N0YW5kYXJkcy1wb3NpdGlvbnMvaXNzdWVzLzE1NFxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiUGV0aXRpb25cIj5cbiAgICAgIDxUaXRsZT5GaXJlZm94IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgRmlsZXN5c3RlbSBBY2Nlc3MgQVBJPC9UaXRsZT5cblxuICAgICAgPEluc3RydWN0aW9ucz5cbiAgICAgICAgSW4gdGhlIG1lYW50aW1lLCB5b3UnbGwgaGF2ZSB0byB1c2UgYSBDaHJvbWl1bS1iYXNlZCBicm93c2VyLiBWb2ljZSB5b3VyXG4gICAgICAgIHN1cHBvcnQgZm9yIHRoZSBGaWxlc3lzdGVtIEFjY2VzcyBBUEkuXG4gICAgICA8L0luc3RydWN0aW9ucz5cblxuICAgICAgPEdpdEh1YkJ1dHRvbiBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc3RhbmRhcmRzLXBvc2l0aW9ucy9pc3N1ZXMvMTU0XCI+XG4gICAgICAgIFBldGl0aW9uIE1vemlsbGFcbiAgICAgIDwvR2l0SHViQnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgR2l0SHViQnV0dG9uID0gKHsgY2hpbGRyZW4sIGhyZWYgfSkgPT4gKFxuICA8YSBocmVmPXtocmVmfSB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiIGNsYXNzTmFtZT1cIkdpdEh1YkJ1dHRvblwiPlxuICAgIHtjaGlsZHJlbn1cbiAgPC9hPlxuKTtcblxuY29uc3QgVHdlZXRCdXR0b24gPSAoeyBjaGlsZHJlbiwgaHJlZiB9KSA9PiAoXG4gIDxhIGhyZWY9e2hyZWZ9IHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCIgY2xhc3NOYW1lPVwiVHdlZXRCdXR0b25cIj5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYT5cbik7XG5cbmNvbnN0IFBldGl0aW9uV2Via2l0ID0gKHt9KSA9PiB7XG4gIC8vIGh0dHBzOi8vbGlzdHMud2Via2l0Lm9yZy9waXBlcm1haWwvd2Via2l0LWRldi8yMDIwLUF1Z3VzdC8wMzEzNjIuaHRtbFxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiUGV0aXRpb25cIj5cbiAgICAgIDxUaXRsZT5BcHBsZSB3b24ndCBsZXQgeW91IGRvIHRoYXQuPC9UaXRsZT5cblxuICAgICAgPEluc3RydWN0aW9ucz5cbiAgICAgICAgQnl7XCIgXCJ9XG4gICAgICAgIDxhXG4gICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICByZWw9XCJub29wZW5lclwiXG4gICAgICAgICAgaHJlZj1cImh0dHBzOi8vbGlzdHMud2Via2l0Lm9yZy9waXBlcm1haWwvd2Via2l0LWRldi8yMDIwLUF1Z3VzdC8wMzEzNjIuaHRtbFwiXG4gICAgICAgID5cbiAgICAgICAgICByZWZ1c2luZ1xuICAgICAgICA8L2E+e1wiIFwifVxuICAgICAgICB0byBzdXBwb3J0IHRoZSBmaWxlc3lzdGVtIGFjY2VzcyBBUEksIEFwcGxlIGlzIGhvbGRpbmcgYmFjayB0aGUgZnJlZSBhbmRcbiAgICAgICAgb3BlbiBpbnRlcm5ldC5cbiAgICAgIDwvSW5zdHJ1Y3Rpb25zPlxuXG4gICAgICA8SW5zdHJ1Y3Rpb25zPlxuICAgICAgICAyMCUgb2YgQXBwbGUncyByZXZlbnVlIGNvbWVzIGZyb20gU29mdHdhcmUgJmFtcDsgU2VydmljZXMuIEFwcGxlJ3NcbiAgICAgICAgc3RhbmNlIG9uIHRoZSBmaWxlc3lzdGVtIGFjY2VzcyBBUEkgaGVscHMgZW5zdXJlIGEgZnV0dXJlIHdoZXJlIG9ubHlcbiAgICAgICAgc29mdHdhcmUgQXBwbGUgY2FuIG1vbmV0aXplIHJ1bnMgb24gZGV2aWNlcyB5b3Ugb3duLlxuICAgICAgPC9JbnN0cnVjdGlvbnM+XG5cbiAgICAgIDxUd2VldEJ1dHRvbj5Ud2VldDwvVHdlZXRCdXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5lbnVtIEJyb3dzZXJUeXBlIHtcbiAgdW5rbm93bixcbiAgZmlyZWZveCxcbiAgd2Via2l0LFxufVxuXG5lbnVtIERyYWdTdGF0ZSB7XG4gIG5vbmUsXG4gIGRyYWcsXG4gIGRyb3AsXG4gIHN1Y2Nlc3MsXG59XG5cbmNvbnN0IERyYWdTdGF0ZUNsYXNzZXMgPSBbXG4gIFwiRHJhZ1N0YXRlLS1ub25lXCIsXG4gIFwiRHJhZ1N0YXRlLS1kcmFnXCIsXG4gIFwiRHJhZ1N0YXRlLS1kcm9wXCIsXG4gIFwiRHJhZ1N0YXRlLS1zdWNjZXNzXCIsXG5dO1xuXG5jb25zdCBnZXRCcm93c2VyVHlwZSA9ICgpID0+IHtcbiAgaWYgKHR5cGVvZiBJbnN0YWxsVHJpZ2dlciAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIEJyb3dzZXJUeXBlLmZpcmVmb3g7XG5cbiAgaWYgKFxuICAgIG5hdmlnYXRvcj8udXNlckFnZW50Py50b0xvd2VyQ2FzZSgpPy5pbmNsdWRlcyhcIndlYmtpdFwiKSAmJlxuICAgICFuYXZpZ2F0b3I/LnVzZXJBZ2VudD8udG9Mb3dlckNhc2UoKT8uaW5jbHVkZXMoXCJjaHJvbWVcIilcbiAgKVxuICAgIHJldHVybiBCcm93c2VyVHlwZS53ZWJraXQ7XG5cbiAgcmV0dXJuIEJyb3dzZXJUeXBlLnVua25vd247XG59O1xuXG5jb25zdCBGaWxlU3lzdGVtUm91dGVEZXNjcmlwdG9yID0gKHsgcm91dGVyLCB2YWx1ZXMgfSkgPT4ge1xuICBjb25zb2xlLmxvZyhyb3V0ZXIsIHZhbHVlcyk7XG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgRW50cnlQb2ludCA9ICh7XG4gIGVudHJ5UG9pbnQsXG4gIHJvdXRlLFxufToge1xuICByb3V0ZTogUm91dGU7XG4gIGVudHJ5UG9pbnQ6IHN0cmluZztcbn0pID0+IHtcbiAgY29uc3QgSWNvbkNvbXBvbmVudCA9IGZpbGV0eXBlc1twYXRoLmV4dG5hbWUoZW50cnlQb2ludCldO1xuICBjb25zdCBbZXJyb3JDb2RlLCBzZXRFcnJvckNvZGVdID0gUmVhY3QudXNlU3RhdGUoLTEpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGRpZENsb3NlID0gZmFsc2U7XG4gICAgYXN5bmMgZnVuY3Rpb24gZG9lc0ZpbGVFeGlzdCgpIHtcbiAgICAgIGlmIChkaWRDbG9zZSkgcmV0dXJuO1xuICAgICAgY29uc3QgZG9lc0V4aXN0ID0gYXdhaXQgcm91dGUucm9vdC5leGlzdHMoZW50cnlQb2ludCk7XG4gICAgICBpZiAoZGlkQ2xvc2UpIHJldHVybjtcblxuICAgICAgaWYgKCFkb2VzRXhpc3QpIHtcbiAgICAgICAgc2V0RXJyb3JDb2RlKEVycm9yQ29kZS5taXNzaW5nRW50cnlGaWxlcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGRvZXNGaWxlRXhpc3QoKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGlkQ2xvc2UgPSB0cnVlO1xuICAgIH07XG4gIH0sIFtyb3V0ZSwgZW50cnlQb2ludCwgc2V0RXJyb3JDb2RlXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjbGFzc05hbWU9e2BFbnRyeVBvaW50ICR7SWNvbkNvbXBvbmVudCA/IFwiRW50cnlQb2ludC0td2l0aEljb25cIiA6IFwiXCJ9ICR7XG4gICAgICAgIEVycm9yQ29kZS5taXNzaW5nRW50cnlGaWxlcyA9PT0gZXJyb3JDb2RlID8gXCJFbnRyeVBvaW50LS13aXRoRXJyb3JcIiA6IFwiXCJcbiAgICAgIH1gfVxuICAgID5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRW50cnlQb2ludC1pY29uXCI+XG4gICAgICAgIHtJY29uQ29tcG9uZW50ICYmIDxJY29uQ29tcG9uZW50IHdpZHRoPXsyNH0gaGVpZ2h0PXsyNH0gLz59XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRW50cnlQb2ludC1sYWJlbFwiPntlbnRyeVBvaW50fTwvZGl2PlxuICAgICAge2Vycm9yQ29kZSA9PT0gRXJyb3JDb2RlLm1pc3NpbmdFbnRyeUZpbGVzICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJFbnRyeVBvaW50LWVycm9yXCI+TWlzc2luZyBmaWxlPC9kaXY+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgTG93ZXJjYXNlID0gKHsgY2hpbGRyZW4gfSkgPT4gKFxuICA8c3BhbiBjbGFzc05hbWU9XCJMb3dlcmNhc2VcIj57Y2hpbGRyZW59PC9zcGFuPlxuKTtcblxuY29uc3QgU1BBUm91dGVEZXNjcmlwdG9yID0gKHtcbiAgcm91dGVyOiB7IGhhbmRsZSwgdmFsdWU6IGZpbGVwYXRoLCBpY29uIH0sXG4gIHZhbHVlczogdHJlZSxcbn0pID0+IHtcbiAgY29uc3Qgcm91dGUgPSBSZWFjdC51c2VSZWY8Um91dGU+KCk7XG4gIGNvbnN0IHsgZGlyZWN0b3J5IH0gPSBSZWFjdC51c2VDb250ZXh0KFBhY2thZ2VDb250ZXh0KTtcbiAgY29uc3QgW2VudHJ5UG9pbnRzLCBzZXRFbnRyeVBvaW50c10gPSBSZWFjdC51c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtlcnJvckNvZGUsIHNldEVycm9yQ29kZV0gPSBSZWFjdC51c2VTdGF0ZTxFcnJvckNvZGU+KC0xKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBkaWRDYW5jZWwgPSBmYWxzZTtcbiAgICBpZiAoIXJvdXRlLmN1cnJlbnQpIHtcbiAgICAgIHJvdXRlLmN1cnJlbnQgPSBSb3V0ZS5mcm9tKG5ldyBOYXRpdmVGUyhkaXJlY3RvcnkpLCBmaWxlcGF0aCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgIGlmIChkaWRDYW5jZWwpIHJldHVybjtcblxuICAgICAgY29uc3QgX3JvdXRlID0gcm91dGUuY3VycmVudDtcbiAgICAgIGF3YWl0IF9yb3V0ZS5nZW5lcmF0ZUNvbmZpZyhhd2FpdCBoYW5kbGUuZ2V0RmlsZSgpKTtcbiAgICAgIHNldEVudHJ5UG9pbnRzKF9yb3V0ZS5lbnRyeVBvaW50cyk7XG4gICAgfVxuXG4gICAgbG9hZCgpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRpZENhbmNlbCA9IHRydWU7XG4gICAgfTtcbiAgfSwgW3JvdXRlLCBoYW5kbGUsIGZpbGVwYXRoLCBzZXRFbnRyeVBvaW50cywgZGlyZWN0b3J5XSk7XG5cbiAgY29uc3QgZW50cnlQb2ludFZpZXdzID0gbmV3IEFycmF5KGVudHJ5UG9pbnRzLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW50cnlQb2ludFZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgZW50cnlQb2ludFZpZXdzW2ldID0gKFxuICAgICAgPEVudHJ5UG9pbnRcbiAgICAgICAgZW50cnlQb2ludD17ZW50cnlQb2ludHNbaV19XG4gICAgICAgIGtleT17ZW50cnlQb2ludHNbaV0gKyAocm91dGU/LmN1cnJlbnQ/LmFic1dvcmtpbmdEaXJlY3RvcnkgPz8gXCJcIil9XG4gICAgICAgIHJvdXRlPXtyb3V0ZS5jdXJyZW50fVxuICAgICAgLz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIlNQQVJvdXRlRGVzY3JpcHRvclwiPlxuICAgICAgPGEgaHJlZj1cIi9cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzc05hbWU9XCJTZWN0aW9uLWxhYmVsIFNlY3Rpb24tbGFiZWwtLXVybFwiPlxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJTZWN0aW9uLWxhYmVsLS11cmwtaW5kaWNhdG9yXCI+e2xvY2F0aW9uLm9yaWdpbn0vPC9zcGFuPlxuICAgICAgICAqXG4gICAgICA8L2E+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIlJvdXRpbmctZXhwbGFuYXRpb25cIj5cbiAgICAgICAgTmF2aWdhdGlvbiByZXF1ZXN0cyByb3V0ZSB0byZuYnNwO1xuICAgICAgICA8TW9ub3NwYWNlPntmaWxlcGF0aH08L01vbm9zcGFjZT4uIE9wZW4gYW55IHVybCBpbiB7bG9jYXRpb24ub3JpZ2lufS9cbiAgICAgICAgZnJvbSB5b3VyIGJyb3dzZXIgdG8gYnVuZGxlICZhbXA7IHJlbmRlci5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIlNlY3Rpb24tbGFiZWwgU2VjdGlvbi1sYWJlbC0tbGV2ZWwtMlwiPlxuICAgICAgICBFbnRyeSBwb2ludHN7XCIgXCJ9XG4gICAgICAgIDxMb3dlcmNhc2U+XG4gICAgICAgICAgPE1vbm9zcGFjZT4mbHQ7c2NyaXB0Jmd0OzwvTW9ub3NwYWNlPiAmYW1wO3tcIiBcIn1cbiAgICAgICAgICA8TW9ub3NwYWNlPiZsdDtsaW5rJmd0OzwvTW9ub3NwYWNlPiBpbntcIiBcIn1cbiAgICAgICAgICA8TW9ub3NwYWNlPntmaWxlcGF0aH08L01vbm9zcGFjZT5cbiAgICAgICAgPC9Mb3dlcmNhc2U+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJFbnRyeVBvaW50TGlzdFwiPntlbnRyeVBvaW50Vmlld3N9PC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBOZXdQcm9qZWN0UGFnZSA9ICgpID0+IHtcbiAgY29uc3QgW3N0ZXAsIHNldFN0ZXBdID0gUmVhY3QudXNlU3RhdGUoKCkgPT5cbiAgICBsb2NhdGlvbi5wYXRobmFtZS5lbmRzV2l0aChcIi9zZXR1cFwiKVxuICAgICAgPyBQcm9qZWN0U3RlcC5hdHRhY2hcbiAgICAgIDogUHJvamVjdFN0ZXAudmVyaWZ5Rm9sZGVyXG4gICk7XG4gIGNvbnN0IHtcbiAgICBkaXJlY3RvcnksXG4gICAgZGlyZWN0b3J5TG9hZGluZ1N0YXRlLFxuICAgIHBhY2thZ2VyLFxuICAgIHBrZ0pTT04sXG4gICAgaWQsXG4gICAgc2V0RGlyZWN0b3J5OiBfc2V0RGlyZWN0b3J5LFxuICB9ID0gUmVhY3QudXNlQ29udGV4dChQYWNrYWdlQ29udGV4dCk7XG4gIGNvbnN0IFtkcmFnU3RhdGUsIHNldERyYWdTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShEcmFnU3RhdGUubm9uZSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBmdW5jdGlvbiBvblBvcFN0YXRlKGV2ZW50OiBQb3BTdGF0ZUV2ZW50KSB7XG4gICAgICBjb25zdCBxdWVzdGlvbiA9IGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoXCI/XCIpO1xuICAgICAgc3dpdGNoIChcbiAgICAgICAgbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyaW5nKDAsIHF1ZXN0aW9uID4gLTEgPyBxdWVzdGlvbiA6IHVuZGVmaW5lZClcbiAgICAgICkge1xuICAgICAgICBjYXNlIFwiL19kZXZfL2NvbmZpZ1wiOiB7XG4gICAgICAgICAgc2V0U3RlcChQcm9qZWN0U3RlcC52ZXJpZnlGb2xkZXIpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCIvX2Rldl8vc2V0dXBcIjoge1xuICAgICAgICAgIHNldFN0ZXAoUHJvamVjdFN0ZXAuYXR0YWNoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgb25Qb3BTdGF0ZSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBvblBvcFN0YXRlKTtcbiAgICB9O1xuICB9LCBbc2V0U3RlcF0pO1xuXG4gIGNvbnN0IHNldERpcmVjdG9yeSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIGFzeW5jIChoYW5kbGU6IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBhd2FpdCBoYW5kbGUuZ2V0RmlsZUhhbmRsZShcInBhY2thZ2UuanNvblwiKTtcbiAgICAgICAgaWYgKCFmaWxlKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHBrZ0pTT04ucHJvY2Vzcyhhd2FpdCAoYXdhaXQgZmlsZS5nZXRGaWxlKCkpLnRleHQoKSk7XG4gICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihleGNlcHRpb24pO1xuICAgICAgICBhbGVydChcbiAgICAgICAgICBcIlBsZWFzZSBjaG9vc2UgYSBmb2xkZXIgd2l0aCBhIHZhbGlkIHBhY2thZ2UuanNvbiBpbnNpZGUuIE1vcmUgc3BlY2lmaWMgZXhjZXB0aW9uIGlzIGluIHRoZSBjb25zb2xlXCJcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBfc2V0RGlyZWN0b3J5KGhhbmRsZSk7XG4gICAgICBzZXRTdGVwKFByb2plY3RTdGVwLnZlcmlmeUZvbGRlcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIFtfc2V0RGlyZWN0b3J5LCBzZXRTdGVwLCBwa2dKU09OXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgYXN5bmMgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdy5zaG93RGlyZWN0b3J5UGlja2VyICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgc3dpdGNoIChnZXRCcm93c2VyVHlwZSgpKSB7XG4gICAgICAgICAgY2FzZSBCcm93c2VyVHlwZS5maXJlZm94OiB7XG4gICAgICAgICAgICBzZXRTdGVwKFByb2plY3RTdGVwLnBldGl0aW9uTW96aWxsYSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBCcm93c2VyVHlwZS53ZWJraXQ6IHtcbiAgICAgICAgICAgIHNldFN0ZXAoUHJvamVjdFN0ZXAucGV0aXRpb25XZWJraXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgYWxlcnQoXG4gICAgICAgICAgICAgIFwiWW91ciBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgRmlsZXN5c3RlbSBBY2Nlc3MgQVBJLiBTb3JyeS5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaGFuZGxlID0gYXdhaXQgd2luZG93LnNob3dEaXJlY3RvcnlQaWNrZXIoKTtcbiAgICAgIGlmIChhd2FpdCBzZXREaXJlY3RvcnkoaGFuZGxlKSkge1xuICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSwgZG9jdW1lbnQudGl0bGUsIFwiL19kZXZfL2NvbmZpZ1wiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtzZXREaXJlY3RvcnksIHNldFN0ZXBdXG4gICk7XG5cbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBvbkRyYWdPdmVyID0gKGUpID0+IHtcbiAgICAgIHNldERyYWdTdGF0ZShEcmFnU3RhdGUuZHJhZyk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcblxuICAgIGNvbnN0IG9uRHJhZ0VuZCA9IChlKSA9PiB7XG4gICAgICBzZXREcmFnU3RhdGUoRHJhZ1N0YXRlLm5vbmUpO1xuICAgIH07XG5cbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCBvbkRyYWdPdmVyKTtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnZW5kXCIsIG9uRHJhZ0VuZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsIG9uRHJhZ0VuZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2V4aXRcIiwgb25EcmFnRW5kKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgb25EcmFnT3Zlcik7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkcmFnZW5kXCIsIG9uRHJhZ0VuZCk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkcmFnbGVhdmVcIiwgb25EcmFnRW5kKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRyYWdleGl0XCIsIG9uRHJhZ0VuZCk7XG4gICAgfTtcbiAgfSwgW3NldERyYWdTdGF0ZV0pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3Qgb25Ecm9wID0gYXN5bmMgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgbGV0IGZpbGVzQ291bnQgPSAwO1xuICAgICAgbGV0IGRpcmVjdG9yeTtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBlLmRhdGFUcmFuc2Zlci5pdGVtcykge1xuICAgICAgICAvLyBDYXJlZnVsOiBga2luZGAgd2lsbCBiZSAnZmlsZScgZm9yIGJvdGggZmlsZVxuICAgICAgICAvLyBfYW5kXyBkaXJlY3RvcnkgZW50cmllcy5cbiAgICAgICAgaWYgKGl0ZW0ua2luZCA9PT0gXCJmaWxlXCIpIHtcbiAgICAgICAgICBpZiAoIWl0ZW0uZ2V0QXNGaWxlU3lzdGVtSGFuZGxlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGdldEJyb3dzZXJUeXBlKCkpIHtcbiAgICAgICAgICAgICAgY2FzZSBCcm93c2VyVHlwZS5maXJlZm94OiB7XG4gICAgICAgICAgICAgICAgc2V0RHJhZ1N0YXRlKERyYWdTdGF0ZS5ub25lKTtcbiAgICAgICAgICAgICAgICBzZXRTdGVwKFByb2plY3RTdGVwLnBldGl0aW9uTW96aWxsYSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBCcm93c2VyVHlwZS53ZWJraXQ6IHtcbiAgICAgICAgICAgICAgICBzZXREcmFnU3RhdGUoRHJhZ1N0YXRlLm5vbmUpO1xuICAgICAgICAgICAgICAgIHNldFN0ZXAoUHJvamVjdFN0ZXAucGV0aXRpb25XZWJraXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFxuICAgICAgICAgICAgICAgICAgXCJZb3VyIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRoZSBGaWxlc3lzdGVtIEFjY2VzcyBBUEkuIFNvcnJ5LlwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgZW50cnkgPSBhd2FpdCBpdGVtLmdldEFzRmlsZVN5c3RlbUhhbmRsZSgpO1xuXG4gICAgICAgICAgaWYgKGVudHJ5LmtpbmQgPT09IFwiZGlyZWN0b3J5XCIpIHtcbiAgICAgICAgICAgIGRpcmVjdG9yeSA9IGVudHJ5O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXREcmFnU3RhdGUoRHJhZ1N0YXRlLm5vbmUpO1xuICAgICAgICAgICAgYWxlcnQoXG4gICAgICAgICAgICAgIFwiUGxlYXNlIGRyb3AgdGhlIGZvbGRlciBpbnN0ZWFkIG9mIGZpbGVzIGluIHRoZSBmb2xkZXIgKGl0IG5lZWRzIGZvbGRlciBhY2Nlc3MpXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdG9yeSkge1xuICAgICAgICAgIHNldERpcmVjdG9yeShkaXJlY3RvcnkpO1xuICAgICAgICAgIHNldERyYWdTdGF0ZShEcmFnU3RhdGUuc3VjY2Vzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCBvbkRyb3ApO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIG9uRHJvcCk7XG4gICAgfTtcbiAgfSwgW3NldERpcmVjdG9yeSwgc2V0U3RlcCwgc2V0RHJhZ1N0YXRlXSk7XG5cbiAgc3dpdGNoIChzdGVwKSB7XG4gICAgY2FzZSBQcm9qZWN0U3RlcC5hdHRhY2g6IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxBdHRhY2hGb2xkZXJTdGVwIGRyYWdTdGF0ZT17ZHJhZ1N0YXRlfSBvbkNsaWNrRHJvcGJveD17aGFuZGxlQ2xpY2t9IC8+XG4gICAgICApO1xuICAgIH1cblxuICAgIGNhc2UgUHJvamVjdFN0ZXAucGV0aXRpb25Nb3ppbGxhOiB7XG4gICAgICByZXR1cm4gPFBldGl0aW9uTW96aWxsYSAvPjtcbiAgICB9XG5cbiAgICBjYXNlIFByb2plY3RTdGVwLnBldGl0aW9uV2Via2l0OiB7XG4gICAgICByZXR1cm4gPFBldGl0aW9uV2Via2l0IC8+O1xuICAgIH1cblxuICAgIGNhc2UgUHJvamVjdFN0ZXAudmVyaWZ5Rm9sZGVyOiB7XG4gICAgICByZXR1cm4gPFZlcmlmeUZvbGRlciBwYWNrYWdlcj17cGFja2FnZXJ9IGRpcmVjdG9yeT17ZGlyZWN0b3J5fSAvPjtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IFJvdXRpbmdTZWN0aW9uID0gKHt9KSA9PiB7XG4gIGNvbnN0IHsgZGlyZWN0b3J5LCBkaXJlY3RvcnlMb2FkaW5nU3RhdGUsIHBrZ0pTT04gfSA9IFJlYWN0LnVzZUNvbnRleHQoXG4gICAgUGFja2FnZUNvbnRleHRcbiAgKTtcblxuICBjb25zdCBbcm91dGUsIHNldFJvdXRlXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICBpZiAocGtnSlNPTj8ucnVuPy5yb3V0ZXIpIHtcbiAgICAgIHJldHVybiBwa2dKU09OPy5ydW4/LnJvdXRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgW3NhdmVkUm91dGUsIHNldFNhdmVkUm91dGVdID0gUmVhY3QudXNlU3RhdGUocm91dGUpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGRpcmVjdG9yeUxvYWRpbmdTdGF0ZSA9PT0gRGlyZWN0b3J5TG9hZFN0YXRlLmxvYWRlZCkge1xuICAgICAgc2V0Um91dGUocGtnSlNPTj8ucnVuPy5yb3V0ZXIgPz8gXCJcIik7XG4gICAgICBzZXRTYXZlZFJvdXRlKHBrZ0pTT04/LnJ1bj8ucm91dGVyID8/IFwiXCIpO1xuICAgIH1cbiAgfSwgW2RpcmVjdG9yeUxvYWRpbmdTdGF0ZSwgcGtnSlNPTiwgc2V0Um91dGUsIHNldFNhdmVkUm91dGVdKTtcbiAgY29uc3QgW3ZhbHVlcywgc2V0VmFsdWVzXSA9IFJlYWN0LnVzZVN0YXRlKFtdKTtcbiAgY29uc3Qgcm91dGVWYWx1ZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlLnZhbHVlID09PSByb3V0ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBbcm91dGUsIHZhbHVlc10pO1xuXG4gIGNvbnN0IHN0YXRpY0hhbmRsZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmICghcm91dGVWYWx1ZSkgcmV0dXJuO1xuICAgIGNvbnN0IF9yb3V0ZSA9IHJvdXRlVmFsdWUudmFsdWU7XG5cbiAgICBpZiAoX3JvdXRlLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgcmV0dXJuIHJvdXRlVmFsdWUuaGFuZGxlO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudERpciA9IHBhdGguam9pbihfcm91dGUsIFwiLi4vXCIpO1xuICAgIGZvciAobGV0IHYgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAodi52YWx1ZSA9PT0gcGFyZW50RGlyKSB7XG4gICAgICAgIHJldHVybiB2LmhhbmRsZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSwgW3JvdXRlVmFsdWUsIHZhbHVlc10pO1xuXG4gIGNvbnN0IHJvdXRlVHlwZSA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChyb3V0ZVZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHJvdXRlVmFsdWUuaGFuZGxlLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcImZpbGVcIjoge1xuICAgICAgICAgIHJldHVybiBSb3V0ZXJUeXBlLnNwYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgXCJkaXJlY3RvcnlcIjoge1xuICAgICAgICAgIHJldHVybiBSb3V0ZXJUeXBlLmZpbGVzeXN0ZW07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUm91dGVyVHlwZS51bmtub3duO1xuICB9LCBbcm91dGVWYWx1ZV0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYXN5bmMgZnVuY3Rpb24gbG9hZFZhbHVlcygpIHtcbiAgICAgIGNvbnN0IGxpc3QgPSBhd2FpdCBnZXRSb3V0ZUZpbGVzRm9ySGFuZGxlKGRpcmVjdG9yeSk7XG4gICAgICBzZXRWYWx1ZXMobGlzdCk7XG4gICAgfVxuXG4gICAgaWYgKGRpcmVjdG9yeSkge1xuICAgICAgbG9hZFZhbHVlcygpO1xuICAgIH1cbiAgfSwgW3NldFZhbHVlcywgZGlyZWN0b3J5LCBnZXRSb3V0ZUZpbGVzRm9ySGFuZGxlXSk7XG5cbiAgbGV0IHJvdXRlRGVzY3JpcHRvcjtcblxuICBzd2l0Y2ggKHJvdXRlVHlwZSkge1xuICAgIGNhc2UgUm91dGVyVHlwZS5maWxlc3lzdGVtOiB7XG4gICAgICByb3V0ZURlc2NyaXB0b3IgPSAoXG4gICAgICAgIDxGaWxlU3lzdGVtUm91dGVEZXNjcmlwdG9yIHJvdXRlcj17cm91dGVWYWx1ZX0gdmFsdWVzPXt2YWx1ZXN9IC8+XG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY2FzZSBSb3V0ZXJUeXBlLnNwYToge1xuICAgICAgcm91dGVEZXNjcmlwdG9yID0gKFxuICAgICAgICA8U1BBUm91dGVEZXNjcmlwdG9yIHJvdXRlcj17cm91dGVWYWx1ZX0gdmFsdWVzPXt2YWx1ZXN9IC8+XG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZGVmYXVsdDoge1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhhbmRsZVNhdmUgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKHBrZ0pTT04ucnVuKSB7XG4gICAgICBwa2dKU09OLnJ1bi5yb3V0ZXIgPSByb3V0ZTtcbiAgICAgIHBrZ0pTT04ucnVuLmlzUm91dGVyVW5zZXQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGtnSlNPTi5ydW4gPSB7IHJvdXRlcjogcm91dGUsIGlzUm91dGVyVW5zZXQ6IGZhbHNlIH07XG4gICAgfVxuICAgIHNldFNhdmVkUm91dGUocGtnSlNPTi5ydW4ucm91dGVyKTtcblxuICAgIGF3YWl0IHBrZ0pTT04uaGFuZGxlLnJlcXVlc3RQZXJtaXNzaW9uKHsgbW9kZTogXCJyZWFkd3JpdGVcIiB9KTtcbiAgICBhd2FpdCBwa2dKU09OLnNhdmUoKTtcbiAgICBjb25zdCByZWNvcmQgPSBTdG9yZWRQYWNrYWdlLmZyb21SZWNvcmQoe1xuICAgICAgaWQ6IGdldFBhY2thZ2VJRCgpLFxuICAgICAgbGFzdEJ1aWxkOiBudWxsLFxuICAgICAgaGFuZGxlOiBkaXJlY3RvcnksXG4gICAgICBzdGF0aWNIYW5kbGUsXG4gICAgICByb3V0ZXJUeXBlOlxuICAgICAgICBwYXRoLmV4dG5hbWUocGtnSlNPTi5ydW4ucm91dGVyKSA9PT0gXCIuaHRtbFwiXG4gICAgICAgICAgPyBSb3V0ZXJUeXBlLnNwYVxuICAgICAgICAgIDogUm91dGVyVHlwZS5maWxlc3lzdGVtLFxuICAgIH0pO1xuICAgIGlmIChwYWNrYWdlci5zdG9yZWRQYWNrYWdlKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHBhY2thZ2VyLnN0b3JlZFBhY2thZ2UsIHJlY29yZCk7XG4gICAgICBhd2FpdCBwYWNrYWdlci5kYXRhYmFzZS5zYXZlUGFja2FnZShwYWNrYWdlci5zdG9yZWRQYWNrYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3RvcmVkUGFja2FnZSA9IFN0b3JlZFBhY2thZ2UuZnJvbVJlY29yZChyZWNvcmQpO1xuICAgICAgYXdhaXQgcGFja2FnZXIuZGF0YWJhc2Uuc2F2ZVBhY2thZ2Uoc3RvcmVkUGFja2FnZSk7XG4gICAgICBwYWNrYWdlci5zdG9yZWRQYWNrYWdlID0gc3RvcmVkUGFja2FnZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8c2VjdGlvbiBjbGFzc05hbWU9XCJTZWN0aW9uIFJvdXRpbmdcIj5cbiAgICAgIDxQYWNrYWdlSlNPTkVkaXRvclxuICAgICAgICBwa2c9e3BrZ0pTT059XG4gICAgICAgIGtleT17c2F2ZWRSb3V0ZX1cbiAgICAgICAgdmFsdWVzPXt2YWx1ZXN9XG4gICAgICAgIG9uQ2hhbmdlPXtzZXRSb3V0ZX1cbiAgICAgICAgb25TYXZlPXtoYW5kbGVTYXZlfVxuICAgICAgICBoYXNDaGFuZ2VkPXtyb3V0ZSAmJiByb3V0ZSAhPT0gc2F2ZWRSb3V0ZX1cbiAgICAgICAgZGVmYXVsdFZhbHVlPXtyb3V0ZX1cbiAgICAgICAgZm9sZGVyTmFtZT17ZGlyZWN0b3J5Py5uYW1lID8/IFwiTG9hZGluZy4uLlwifVxuICAgICAgLz5cblxuICAgICAge3JvdXRlRGVzY3JpcHRvcn1cbiAgICA8L3NlY3Rpb24+XG4gICk7XG59O1xuXG5jb25zdCBWZXJpZnlGb2xkZXIgPSAoe30pID0+IHtcbiAgY29uc3QgeyBkaXJlY3RvcnlMb2FkaW5nU3RhdGUsIGRpcmVjdG9yeSB9ID0gUmVhY3QudXNlQ29udGV4dChQYWNrYWdlQ29udGV4dCk7XG5cbiAgcmV0dXJuIChcbiAgICA8bWFpbiBjbGFzc05hbWU9XCJOZXdQcm9qZWN0UGFnZVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJUaXRsZUNvbnRhaW5lclwiPlxuICAgICAgICA8R2Vhckljb25cbiAgICAgICAgICB3aWR0aD17NjR9XG4gICAgICAgICAgaGVpZ2h0PXs2NH1cbiAgICAgICAgICBmaWxsPVwid2hpdGVcIlxuICAgICAgICAgIHN0cm9rZT1cInJnYig2NCwgMiwgMjA5KVwiXG4gICAgICAgIC8+XG5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJUaXRsZUdyb3VwXCI+XG4gICAgICAgICAgPFRpdGxlPkNvbmZpZ3VyZSBkZXYgc2VydmVyPC9UaXRsZT5cbiAgICAgICAgICA8SW5zdHJ1Y3Rpb25zPlxuICAgICAgICAgICAgWW91ciBjb25maWd1cmF0aW9uIHdpbGwgc2F2ZSB0byA8TW9ub3NwYWNlPnBhY2thZ2UuanNvbjwvTW9ub3NwYWNlPlxuICAgICAgICAgIDwvSW5zdHJ1Y3Rpb25zPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8Um91dGluZ1NlY3Rpb24gLz5cblxuICAgICAgPEZvb3RlciAvPlxuICAgIDwvbWFpbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBQYWdlID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxQYWNrYWdlUHJvdmlkZXI+XG4gICAgICA8TmV3UHJvamVjdFBhZ2UgLz5cbiAgICA8L1BhY2thZ2VQcm92aWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoKSB7XG4gIFJlYWN0RE9NLnJlbmRlcig8UGFnZSAvPiwgZG9jdW1lbnQuYm9keS5xdWVyeVNlbGVjdG9yKFwiI3Jvb3RcIikpO1xufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInVuaGFuZGxlZFJlamVjdGlvblwiLCBjb25zb2xlLmVycm9yKTtcbiIsICJjb25zdCBpbnN0YW5jZU9mQW55ID0gKG9iamVjdCwgY29uc3RydWN0b3JzKSA9PiBjb25zdHJ1Y3RvcnMuc29tZSgoYykgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcbmxldCBjdXJzb3JBZHZhbmNlTWV0aG9kcztcbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XG4gICAgcmV0dXJuIChpZGJQcm94eWFibGVUeXBlcyB8fFxuICAgICAgICAoaWRiUHJveHlhYmxlVHlwZXMgPSBbXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcbiAgICAgICAgICAgIElEQk9iamVjdFN0b3JlLFxuICAgICAgICAgICAgSURCSW5kZXgsXG4gICAgICAgICAgICBJREJDdXJzb3IsXG4gICAgICAgICAgICBJREJUcmFuc2FjdGlvbixcbiAgICAgICAgXSkpO1xufVxuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpIHtcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XG4gICAgICAgIChjdXJzb3JBZHZhbmNlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuYWR2YW5jZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlUHJpbWFyeUtleSxcbiAgICAgICAgXSkpO1xufVxuY29uc3QgY3Vyc29yUmVxdWVzdE1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvbkRvbmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcChyZXF1ZXN0LnJlc3VsdCkpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICB9KTtcbiAgICBwcm9taXNlXG4gICAgICAgIC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAvLyBTaW5jZSBjdXJzb3JpbmcgcmV1c2VzIHRoZSBJREJSZXF1ZXN0ICgqc2lnaCopLCB3ZSBjYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsXG4gICAgICAgIC8vIChzZWUgd3JhcEZ1bmN0aW9uKS5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCQ3Vyc29yKSB7XG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0TWFwLnNldCh2YWx1ZSwgcmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2hpbmcgdG8gYXZvaWQgXCJVbmNhdWdodCBQcm9taXNlIGV4Y2VwdGlvbnNcIlxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIC8vIFRoaXMgbWFwcGluZyBleGlzdHMgaW4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGJ1dCBkb2Vzbid0IGRvZXNuJ3QgZXhpc3QgaW4gdHJhbnNmb3JtQ2FjaGUuIFRoaXNcbiAgICAvLyBpcyBiZWNhdXNlIHdlIGNyZWF0ZSBtYW55IHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdC5cbiAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KHByb21pc2UsIHJlcXVlc3QpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHR4KSB7XG4gICAgLy8gRWFybHkgYmFpbCBpZiB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgYSBkb25lIHByb21pc2UgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgaWYgKHRyYW5zYWN0aW9uRG9uZU1hcC5oYXModHgpKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgZG9uZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QodHguZXJyb3IgfHwgbmV3IERPTUV4Y2VwdGlvbignQWJvcnRFcnJvcicsICdBYm9ydEVycm9yJykpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICB9KTtcbiAgICAvLyBDYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsLlxuICAgIHRyYW5zYWN0aW9uRG9uZU1hcC5zZXQodHgsIGRvbmUpO1xufVxubGV0IGlkYlByb3h5VHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciB0cmFuc2FjdGlvbi5kb25lLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdkb25lJylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25Eb25lTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgLy8gUG9seWZpbGwgZm9yIG9iamVjdFN0b3JlTmFtZXMgYmVjYXVzZSBvZiBFZGdlLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvYmplY3RTdG9yZU5hbWVzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQub2JqZWN0U3RvcmVOYW1lcyB8fCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYWtlIHR4LnN0b3JlIHJldHVybiB0aGUgb25seSBzdG9yZSBpbiB0aGUgdHJhbnNhY3Rpb24sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbWFueS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3RvcmUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMV1cbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiByZWNlaXZlci5vYmplY3RTdG9yZShyZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlIHRyYW5zZm9ybSB3aGF0ZXZlciB3ZSBnZXQgYmFjay5cbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0W3Byb3BdKTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uICYmXG4gICAgICAgICAgICAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XG4gICAgfSxcbn07XG5mdW5jdGlvbiByZXBsYWNlVHJhcHMoY2FsbGJhY2spIHtcbiAgICBpZGJQcm94eVRyYXBzID0gY2FsbGJhY2soaWRiUHJveHlUcmFwcyk7XG59XG5mdW5jdGlvbiB3cmFwRnVuY3Rpb24oZnVuYykge1xuICAgIC8vIER1ZSB0byBleHBlY3RlZCBvYmplY3QgZXF1YWxpdHkgKHdoaWNoIGlzIGVuZm9yY2VkIGJ5IHRoZSBjYWNoaW5nIGluIGB3cmFwYCksIHdlXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxuICAgIC8vIEVkZ2UgZG9lc24ndCBzdXBwb3J0IG9iamVjdFN0b3JlTmFtZXMgKGJvb28pLCBzbyB3ZSBwb2x5ZmlsbCBpdCBoZXJlLlxuICAgIGlmIChmdW5jID09PSBJREJEYXRhYmFzZS5wcm90b3R5cGUudHJhbnNhY3Rpb24gJiZcbiAgICAgICAgISgnb2JqZWN0U3RvcmVOYW1lcycgaW4gSURCVHJhbnNhY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlTmFtZXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gZnVuYy5jYWxsKHVud3JhcCh0aGlzKSwgc3RvcmVOYW1lcywgLi4uYXJncyk7XG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuc2V0KHR4LCBzdG9yZU5hbWVzLnNvcnQgPyBzdG9yZU5hbWVzLnNvcnQoKSA6IFtzdG9yZU5hbWVzXSk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcCh0eCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEN1cnNvciBtZXRob2RzIGFyZSBzcGVjaWFsLCBhcyB0aGUgYmVoYXZpb3VyIGlzIGEgbGl0dGxlIG1vcmUgZGlmZmVyZW50IHRvIHN0YW5kYXJkIElEQi4gSW5cbiAgICAvLyBJREIsIHlvdSBhZHZhbmNlIHRoZSBjdXJzb3IgYW5kIHdhaXQgZm9yIGEgbmV3ICdzdWNjZXNzJyBvbiB0aGUgSURCUmVxdWVzdCB0aGF0IGdhdmUgeW91IHRoZVxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXG4gICAgLy8gd2l0aCByZWFsIHByb21pc2VzLCBzbyBlYWNoIGFkdmFuY2UgbWV0aG9kcyByZXR1cm5zIGEgbmV3IHByb21pc2UgZm9yIHRoZSBjdXJzb3Igb2JqZWN0LCBvclxuICAgIC8vIHVuZGVmaW5lZCBpZiB0aGUgZW5kIG9mIHRoZSBjdXJzb3IgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgICAgICBmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcChjdXJzb3JSZXF1ZXN0TWFwLmdldCh0aGlzKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgIHJldHVybiB3cmFwKGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gd3JhcEZ1bmN0aW9uKHZhbHVlKTtcbiAgICAvLyBUaGlzIGRvZXNuJ3QgcmV0dXJuLCBpdCBqdXN0IGNyZWF0ZXMgYSAnZG9uZScgcHJvbWlzZSBmb3IgdGhlIHRyYW5zYWN0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pXG4gICAgICAgIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih2YWx1ZSk7XG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHZhbHVlLCBpZGJQcm94eVRyYXBzKTtcbiAgICAvLyBSZXR1cm4gdGhlIHNhbWUgdmFsdWUgYmFjayBpZiB3ZSdyZSBub3QgZ29pbmcgdG8gdHJhbnNmb3JtIGl0LlxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHdyYXAodmFsdWUpIHtcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcbiAgICAvLyBJREIgaXMgd2VpcmQgYW5kIGEgc2luZ2xlIElEQlJlcXVlc3QgY2FuIHlpZWxkIG1hbnkgcmVzcG9uc2VzLCBzbyB0aGVzZSBjYW4ndCBiZSBjYWNoZWQuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCUmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgdHJhbnNmb3JtZWQgdGhpcyB2YWx1ZSBiZWZvcmUsIHJldXNlIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICAvLyBUaGlzIGlzIGZhc3RlciwgYnV0IGl0IGFsc28gcHJvdmlkZXMgb2JqZWN0IGVxdWFsaXR5LlxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpO1xuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxuICAgIC8vIFRoZXNlIG1heSBiZSBwcmltaXRpdmUgdHlwZXMsIHNvIHRoZXkgY2FuJ3QgYmUgV2Vha01hcCBrZXlzLlxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQobmV3VmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuY29uc3QgdW53cmFwID0gKHZhbHVlKSA9PiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcblxuZXhwb3J0IHsgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGFzIGEsIGluc3RhbmNlT2ZBbnkgYXMgaSwgcmVwbGFjZVRyYXBzIGFzIHIsIHVud3JhcCBhcyB1LCB3cmFwIGFzIHcgfTtcbiIsICJpbXBvcnQgeyB3IGFzIHdyYXAsIHIgYXMgcmVwbGFjZVRyYXBzIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5leHBvcnQgeyB1IGFzIHVud3JhcCwgdyBhcyB3cmFwIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5cbi8qKlxuICogT3BlbiBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXG4gKiBAcGFyYW0gY2FsbGJhY2tzIEFkZGl0aW9uYWwgY2FsbGJhY2tzLlxuICovXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZywgdGVybWluYXRlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4obmFtZSwgdmVyc2lvbik7XG4gICAgY29uc3Qgb3BlblByb21pc2UgPSB3cmFwKHJlcXVlc3QpO1xuICAgIGlmICh1cGdyYWRlKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdXBncmFkZSh3cmFwKHJlcXVlc3QucmVzdWx0KSwgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgd3JhcChyZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZClcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZylcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoKSA9PiBibG9ja2luZygpKTtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZClcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsICJleHBvcnQgZnVuY3Rpb24gZ2V0UGFja2FnZUlEKCkge1xuICByZXR1cm4gbG9jYXRpb24ub3JpZ2luLnN1YnN0cmluZyhcbiAgICBsb2NhdGlvbi5wcm90b2NvbC5sZW5ndGggKyBcIi8vXCIubGVuZ3RoLFxuICAgIGxvY2F0aW9uLm9yaWdpbi5pbmRleE9mKFwiLlwiKVxuICApO1xufVxuIiwgImltcG9ydCBNaW1lIGZyb20gXCJtaW1lL2xpdGVcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gXCJzcmMvbGliL0Vycm9yQ29kZVwiO1xuaW1wb3J0IHsgUGFja2FnZXJFcnJvciwgUGFja2FnZXJQZXJtaXNzaW9uRXJyb3IgfSBmcm9tIFwic3JjL2xpYi9FU0J1aWxkUGFja2FnZVwiO1xuaW1wb3J0IHsgUGFja2FnZUpTT05GaWxlIH0gZnJvbSBcInNyYy9saWIvUGFja2FnZUpTT05cIjtcbmltcG9ydCB7XG4gIEZpbGVzeXN0ZW1Sb3V0ZXIsXG4gIFJvdXRlclR5cGUsXG4gIFNpbmdsZVBhZ2VBcHBSb3V0ZXIsXG59IGZyb20gXCJzcmMvbGliL1JvdXRlXCI7XG5pbXBvcnQgeyBOYXRpdmVGUyB9IGZyb20gXCJzcmMvbGliL3JvdXRlci9mcy1uYXRpdmVcIjtcblxuY29uc3QgcGVybWlzc2lvbk1vZGUgPSB7IG1vZGU6IFwicmVhZFwiIH07XG5leHBvcnQgaW50ZXJmYWNlIFN0b3JlZFBhY2thZ2VSZWNvcmQge1xuICBpZDogc3RyaW5nO1xuICBsYXN0QnVpbGQ6IERhdGU7XG4gIGhhbmRsZTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZTtcbiAgc3RhdGljSGFuZGxlOiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlO1xuICByb3V0ZXJUeXBlOiBSb3V0ZXJUeXBlO1xufVxuXG5leHBvcnQgY2xhc3MgU3RvcmVkUGFja2FnZSB7XG4gIGlkOiBzdHJpbmc7XG4gIGxhc3RCdWlsZDogRGF0ZTtcbiAgaGFuZGxlOiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlO1xuICBzdGF0aWNIYW5kbGU6IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGU7XG4gIHN0YXRpYzogTmF0aXZlRlM7XG4gIHJvb3Q6IE5hdGl2ZUZTO1xuICByb3V0ZXJUeXBlOiBSb3V0ZXJUeXBlID0gUm91dGVyVHlwZS51bmtub3duO1xuICBwa2c6IFBhY2thZ2VKU09ORmlsZTtcbiAgcm91dGVyOiBTaW5nbGVQYWdlQXBwUm91dGVyIHwgRmlsZXN5c3RlbVJvdXRlcjtcblxuICB0b1JlY29yZCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICBsYXN0QnVpbGQ6IHRoaXMubGFzdEJ1aWxkIHx8IG51bGwsXG4gICAgICBoYW5kbGU6IHRoaXMuaGFuZGxlLFxuICAgICAgc3RhdGljSGFuZGxlOiB0aGlzLnN0YXRpY0hhbmRsZSxcbiAgICAgIHJvdXRlclR5cGU6IHRoaXMucm91dGVyVHlwZSxcbiAgICB9IGFzIFN0b3JlZFBhY2thZ2VSZWNvcmQ7XG4gIH1cblxuICBzdGF0aWMgZnJvbVJlY29yZChyZWNvcmQ6IFN0b3JlZFBhY2thZ2VSZWNvcmQpIHtcbiAgICBjb25zdCBzdG9yZWQgPSBuZXcgU3RvcmVkUGFja2FnZSgpO1xuICAgIE9iamVjdC5hc3NpZ24oc3RvcmVkLCByZWNvcmQpO1xuICAgIHN0b3JlZC5yb290ID0gcmVjb3JkLmhhbmRsZSA/IG5ldyBOYXRpdmVGUyhyZWNvcmQuaGFuZGxlKSA6IG51bGw7XG4gICAgc3RvcmVkLnN0YXRpYyA9IHJlY29yZC5zdGF0aWNIYW5kbGVcbiAgICAgID8gbmV3IE5hdGl2ZUZTKHJlY29yZC5zdGF0aWNIYW5kbGUpXG4gICAgICA6IG51bGw7XG4gICAgcmV0dXJuIHN0b3JlZDtcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBmcm9tSlNPTihvcHRzOiBQYXJ0aWFsPFN0b3JlZFBhY2thZ2U+KSB7XG4gICAgY29uc3QgcGtnID0gbmV3IFN0b3JlZFBhY2thZ2UoKTtcbiAgICBPYmplY3QuYXNzaWduKHBrZywgb3B0cyk7XG4gICAgcGtnLnJvb3QgPSBvcHRzLmhhbmRsZSA/IG5ldyBOYXRpdmVGUyhvcHRzLmhhbmRsZSkgOiBudWxsO1xuICAgIHBrZy5zdGF0aWMgPSBvcHRzLnN0YXRpY0hhbmRsZSA/IG5ldyBOYXRpdmVGUyhvcHRzLnN0YXRpY0hhbmRsZSkgOiBudWxsO1xuICAgIHJldHVybiBwa2c7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIGF3YWl0IHRoaXMubG9hZFBhY2thZ2VKU09OKCk7XG5cbiAgICB0aGlzLmxvYWRSb3V0ZXIoKTtcbiAgfVxuXG4gIGxvYWRSb3V0ZXIoKSB7XG4gICAgaWYgKHBhdGguZXh0bmFtZSh0aGlzLnBrZy5ydW4/LnJvdXRlcikgPT09IFwiLmh0bWxcIikge1xuICAgICAgdGhpcy5yb3V0ZXJUeXBlID0gUm91dGVyVHlwZS5zcGE7XG4gICAgICB0aGlzLnJvdXRlciA9IG5ldyBTaW5nbGVQYWdlQXBwUm91dGVyKHRoaXMucm9vdCwgdGhpcy5zdGF0aWMpO1xuICAgICAgdGhpcy5yb3V0ZXIuZGVzdGluYXRpb24gPSBwYXRoLmJhc2VuYW1lKHRoaXMucGtnLnJ1bi5yb3V0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJvdXRlclR5cGUgPSBSb3V0ZXJUeXBlLmZpbGVzeXN0ZW07XG4gICAgICB0aGlzLnJvdXRlciA9IG5ldyBGaWxlc3lzdGVtUm91dGVyKHRoaXMucm9vdCwgdGhpcy5zdGF0aWMpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxvYWRQYWNrYWdlSlNPTigpIHtcbiAgICBjb25zdCBkaXIgPSB0aGlzLnJvb3Q7XG5cbiAgICBpZiAoKGF3YWl0IGRpci5yb290LnF1ZXJ5UGVybWlzc2lvbihwZXJtaXNzaW9uTW9kZSkpICE9PSBcImdyYW50ZWRcIikge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgUGFja2FnZXJQZXJtaXNzaW9uRXJyb3IoRXJyb3JDb2RlLnJlcXVpcmVQZXJtaXNzaW9uKTtcbiAgICAgIGVycm9yLmRpcmVjdG9yeU5hbWUgPSBkaXIucm9vdC5uYW1lO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuXG4gICAgbGV0IHBhY2thZ2VKU09ORmlsZUhhbmRsZTogRmlsZVN5c3RlbUZpbGVIYW5kbGU7XG4gICAgdHJ5IHtcbiAgICAgIHBhY2thZ2VKU09ORmlsZUhhbmRsZSA9IGF3YWl0IGRpci5maWxlSGFuZGxlRm9yKFwicGFja2FnZS5qc29uXCIpO1xuICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgdGhyb3cgUGFja2FnZXJFcnJvci53aXRoKEVycm9yQ29kZS5lcnJvckZldGNoaW5nUGFja2FnZUpTT04sIGV4Y2VwdGlvbik7XG4gICAgfVxuXG4gICAgdGhpcy5wa2cgPSBhd2FpdCBQYWNrYWdlSlNPTkZpbGUuZnJvbUhhbmRsZShwYWNrYWdlSlNPTkZpbGVIYW5kbGUpO1xuICB9XG5cbiAgbG9hZENvbmZpZygpIHt9XG5cbiAgbm9ybWFsaXplVVJMKHVybDogc3RyaW5nKSB7XG4gICAgaWYgKCF1cmwuc3RhcnRzV2l0aChcIi9cIikgfHwgIXBhdGguaXNBYnNvbHV0ZSh1cmwpKSB7XG4gICAgICByZXR1cm4gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKFwiL1wiICsgdXJsKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGgubm9ybWFsaXplKHVybCk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlU3RhdGljRmlsZSh1cmw6IHN0cmluZykge1xuICAgIGxldCBmaWxlOiBGaWxlO1xuICAgIGZpbGUgPSBhd2FpdCB0aGlzLnN0YXRpYy5uYXRpdmVGaWxlKHVybCk7XG4gICAgY29uc29sZS5sb2codXJsKTtcblxuICAgIGlmICghZmlsZSkge1xuICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG5cbiAgICAgIGhlYWRlcnMuc2V0KFwiQ2FjaGUtQ29udHJvbFwiLCBcInByaXZhdGVcIik7XG4gICAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBcInRleHQvcGxhaW5cIik7XG5cbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UobmV3IEJsb2IoW2A0MDQgTm90IEZvdW5kIFx1MjAxMyAke3VybH1cXG5gXSksIHtcbiAgICAgICAgc3RhdHVzOiA0MDQsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtVHlwZVwiLCBNaW1lLmdldFR5cGUoZmlsZS5uYW1lKS50b1N0cmluZygpKTtcbiAgICBpZiAodHlwZW9mIGZpbGUuc2l6ZSA9PT0gXCJudW1iZXJcIilcbiAgICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1MZW5ndGhcIiwgZmlsZS5zaXplLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiBuZXcgUmVzcG9uc2UoZmlsZSwgeyBoZWFkZXJzOiBoZWFkZXJzLCBzdGF0dXM6IDIwMCB9KTtcbiAgfVxufVxuIiwgImV4cG9ydCBlbnVtIEVycm9yQ29kZSB7XG4gIGludmFsaWRQYWNrYWdlSlNPTixcbiAgZW1wdHlEaXIsXG4gIG1pc3NpbmdFbnRyeUZpbGVzLFxuICBtaXNzaW5nLFxuICBnZW5lcmljRXJyb3IsXG4gIGVycm9yRmV0Y2hpbmdQYWNrYWdlSlNPTixcbiAgZXJyb3JHZXR0aW5nUGFja2FnZUpTT05GaWxlLFxuICBwYXJzaW5nUGFja2FnZUpTT04sXG4gIHJlcXVpcmVQZXJtaXNzaW9uLFxuICBub0VudHJ5UG9pbnRzLFxuICByZXNvbHZlRmlsZSxcbiAgZmlsZU5vdEZvdW5kLFxuICBmaWxlQWNjZXNzRGVuaWVkLFxuICBidWlsZEZhaWxlZCxcbiAgaW52YWxpZFRTQ29uZmlnLFxuICByb3V0ZU5vdEZvdW5kLFxuICBuZWVkc0NvbmZpZyxcbiAgZmFpbGVkVG9SZXNvbHZlTlBNUGFja2FnZSxcbn1cbiIsICJpbXBvcnQgeyBidWlsZCB9IGZyb20gXCJlc2J1aWxkLXdhc21cIjtcbmltcG9ydCB0eXBlIHtcbiAgTG9jYXRpb24sXG4gIFBsdWdpbixcbiAgQnVpbGRSZXN1bHQsXG4gIE9uTG9hZEFyZ3MsXG4gIE9uTG9hZFJlc3VsdCxcbiAgT25SZXNvbHZlQXJncyxcbiAgT25SZXNvbHZlUmVzdWx0LFxufSBmcm9tIFwiZXNidWlsZC13YXNtXCI7XG5pbXBvcnQgTWltZSBmcm9tIFwibWltZS9saXRlXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aC1icm93c2VyaWZ5XCI7XG5pbXBvcnQgeyBnZW5lcmF0ZUhUTUwgfSBmcm9tIFwic3JjL2h0bWxHZW5lcmF0b3JcIjtcbmltcG9ydCB7IERhdGFiYXNlIH0gZnJvbSBcInNyYy9saWIvRGF0YWJhc2VcIjtcbmltcG9ydCB7IFBhY2thZ2VKU09OIH0gZnJvbSBcInNyYy9saWIvUGFja2FnZUpTT05cIjtcbmltcG9ydCB7IFJvdXRlIH0gZnJvbSBcInNyYy9saWIvUm91dGVcIjtcbmltcG9ydCB7IE5hdGl2ZUZTIH0gZnJvbSBcInNyYy9saWIvcm91dGVyL2ZzLW5hdGl2ZVwiO1xuaW1wb3J0IHR5cGUgeyBPdXRwdXRQYXJhbXMgfSBmcm9tIFwic3JjL2xpYi9ycGNcIjtcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gXCIuL0Vycm9yQ29kZVwiO1xuaW1wb3J0IHsgZ2V0Q2FjaGUgfSBmcm9tIFwiLi9nZXRDYWNoZVwiO1xuaW1wb3J0IHsgRG9tVXRpbHMsIFBhcnNlciB9IGZyb20gXCJodG1scGFyc2VyMlwiO1xuXG5jb25zdCBUUllfVE9fVVNFX05PREVfTU9EVUxFUyA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpc1ZhbGlkRW50cnlQb2ludChwb2ludDogc3RyaW5nKSB7XG4gIHJldHVybiAoXG4gICAgcG9pbnQuZW5kc1dpdGgoXCIuanNcIikgfHxcbiAgICBwb2ludC5lbmRzV2l0aChcIi5qc3hcIikgfHxcbiAgICBwb2ludC5lbmRzV2l0aChcIi50c1wiKSB8fFxuICAgIHBvaW50LmVuZHNXaXRoKFwiLnRzeFwiKSB8fFxuICAgIHBvaW50LmVuZHNXaXRoKFwiLm1qc1wiKSB8fFxuICAgIHBvaW50LmVuZHNXaXRoKFwiLmNzc1wiKVxuICApO1xufVxuXG5leHBvcnQgY2xhc3MgUGFja2FnZXJFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgYnVpbGQ/OiBFU0J1aWxkUGFja2FnZTtcbiAgY29uc3RydWN0b3IoY29kZTogRXJyb3JDb2RlLCAuLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgfVxuICBzdGF0aWMgd2l0aChjb2RlOiBFcnJvckNvZGUsIGVycm9yOiBFcnJvcikge1xuICAgIGNvbnN0IHBhY2thZ2VyID0gbmV3IFBhY2thZ2VyRXJyb3IoY29kZSk7XG4gICAgT2JqZWN0LmFzc2lnbihwYWNrYWdlciwgZXJyb3IpO1xuICAgIHJldHVybiBwYWNrYWdlcjtcbiAgfVxuICBjb2RlOiBFcnJvckNvZGU7XG59XG5cbmV4cG9ydCBjbGFzcyBQYWNrYWdlclBlcm1pc3Npb25FcnJvciBleHRlbmRzIFBhY2thZ2VyRXJyb3Ige1xuICBkaXJlY3RvcnlOYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBFU0J1aWxkUGFja2FnZSB7XG4gIHJvb3Q6IE5hdGl2ZUZTO1xuICBwa2c6IFBhY2thZ2VKU09OO1xuXG4gIGNvbnN0cnVjdG9yKHJvb3Q6IE5hdGl2ZUZTLCBwa2c6IFBhY2thZ2VKU09OKSB7XG4gICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICB0aGlzLnBrZyA9IHBrZztcbiAgfVxuXG4gIGV4dGVuc2lvbnNUb1RyeSA9IFtcbiAgICBcIi5qc1wiLFxuICAgIFwiLnRzXCIsXG4gICAgXCIudHN4XCIsXG4gICAgXCIuanN4XCIsXG4gICAgXCIuY3NzXCIsXG4gICAgXCIucG5nXCIsXG4gICAgXCIuanBnXCIsXG4gICAgXCIud2VicFwiLFxuICBdO1xuXG4gIHRleHRFeHRlbnNpb25zVG9UcnkgPSBbXCIuanNcIiwgXCIudHNcIiwgXCIudHN4XCIsIFwiLmpzeFwiLCBcIi5jc3NcIl07XG4gIGJpbmFyeUV4dGVuc2lvbnNUb1RyeSA9IFtcIi5wbmdcIiwgXCIuanBnXCIsIFwiLndlYnBcIl07XG4gIGFzeW5jIHJlc29sdmUoXG4gICAgX3BhdGg6IHN0cmluZyxcbiAgICBpbXBvcnRlcjogc3RyaW5nLFxuICAgIHJlc29sdmVEaXI6IHN0cmluZyxcbiAgICBjYW5SZXRyeSA9IHRydWVcbiAgKSB7XG4gICAgZGVidWdnZXI7XG4gICAgaWYgKF9wYXRoLmluY2x1ZGVzKFwiLy9cIikpIHtcbiAgICAgIF9wYXRoID0gX3BhdGgucmVwbGFjZSgvXFwvKy9nbSwgXCIvXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IGZzID0gdGhpcy5yb290O1xuICAgIGlmIChhd2FpdCBmcy5leGlzdHMoX3BhdGgpKSB7XG4gICAgICByZXR1cm4gX3BhdGg7XG4gICAgfVxuXG4gICAgaWYgKGltcG9ydGVyICYmICFfcGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgX3BhdGggPSBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKGltcG9ydGVyKSwgXCIuLi9cIiwgX3BhdGgpKTtcblxuICAgICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhfcGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIF9wYXRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBuZXdQYXRoID0gXCJcIjtcbiAgICBmb3IgKGxldCBleHQgb2YgdGhpcy5leHRlbnNpb25zVG9UcnkpIHtcbiAgICAgIG5ld1BhdGggPSBfcGF0aCArIGV4dDtcblxuICAgICAgaWYgKGF3YWl0IGZzLmV4aXN0cyhuZXdQYXRoKSkge1xuICAgICAgICByZXR1cm4gbmV3UGF0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW1wb3J0ZXIgJiYgaW1wb3J0ZXIuc3RhcnRzV2l0aChcIi9cIikgJiYgY2FuUmV0cnkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc29sdmUoXG4gICAgICAgIHBhdGguam9pbihyZXNvbHZlRGlyLCBfcGF0aCksXG4gICAgICAgIGltcG9ydGVyLFxuICAgICAgICByZXNvbHZlRGlyLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcGx1Z2luTmFtZSA9IFwiZGV2c2VydmVybGVzc1wiO1xuXG4gIHByaXZhdGUgZW1pdFJlc29sdmVFcnJvcih7XG4gICAgbWVzc2FnZSxcbiAgICBsb2NhdGlvbixcbiAgICBjb2RlLFxuICAgIHBhdGgsXG4gICAgZXhjZXB0aW9uLFxuICAgIG5hbWVzcGFjZSxcbiAgICBleHRlcm5hbCxcbiAgfSk6IE9uUmVzb2x2ZVJlc3VsdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBsdWdpbk5hbWU6IEVTQnVpbGRQYWNrYWdlLnBsdWdpbk5hbWUsXG5cbiAgICAgIGVycm9yczogW1xuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogbWVzc2FnZSB8fCBleGNlcHRpb24/LnRvU3RyaW5nKCkgfHwgXCJcIixcbiAgICAgICAgICBkZXRhaWw6IG1lc3NhZ2UgJiYgZXhjZXB0aW9uID8gZXhjZXB0aW9uLnRvU3RyaW5nKCkgOiBcIlwiLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbiA/IGxvY2F0aW9uIDogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHBhdGgsXG4gICAgICBleHRlcm5hbCxcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIHBsdWdpbkRhdGE6IHsgY29kZSB9LFxuICAgIH07XG4gIH1cblxuICBhbHdheXNSZXF1ZXN0UGVybWlzc2lvbnMgPSBmYWxzZTtcbiAgc3RhdGljIHJlYWRvbmx5IHBlcm1pc3Npb25Nb2RlID0geyBtb2RlOiBcInJlYWRcIiB9O1xuICByZWxhdGl2ZVBhdGg6IHN0cmluZztcbiAgc3RhdGljIG9yaWdpbjogc3RyaW5nO1xuICBhc3luYyBzYXZlUmVzdWx0VG9DYWNoZShyZXN1bHQ6IEJ1aWxkUmVzdWx0LCByb3V0ZTogUm91dGUpIHtcbiAgICBsZXQgb3V0UmVzdWx0czogc3RyaW5nW10gPSBuZXcgQXJyYXkocmVzdWx0Lm91dHB1dEZpbGVzLmxlbmd0aCk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgZ2V0Q2FjaGUoKTtcbiAgICBmb3IgKGxldCBmaWxlIG9mIHJlc3VsdC5vdXRwdXRGaWxlcykge1xuICAgICAgY29uc3QgZGVzdCA9IGdsb2JhbFRoaXMubG9jYXRpb24ub3JpZ2luICsgZmlsZS5wYXRoO1xuICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7XG4gICAgICBoZWFkZXJzLnNldChcIkNvbnRlbnQtTGVuZ3RoXCIsIGZpbGUuY29udGVudHMuYnl0ZUxlbmd0aC50b1N0cmluZygxMCkpO1xuICAgICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgTWltZS5nZXRUeXBlKGZpbGUucGF0aCkudG9TdHJpbmcoKSk7XG4gICAgICBhd2FpdCBjYWNoZS5wdXQoXG4gICAgICAgIGRlc3QsXG4gICAgICAgIG5ldyBSZXNwb25zZShcbiAgICAgICAgICBuZXcgQmxvYihbZmlsZS50ZXh0XSwge1xuICAgICAgICAgICAgdHlwZTogTWltZS5nZXRUeXBlKGZpbGUucGF0aCkgYXMgc3RyaW5nLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHsgaGVhZGVycyB9XG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICBvdXRSZXN1bHRzW2krK10gPSBkZXN0O1xuICAgIH1cblxuICAgIHJldHVybiB7IGVudHJ5UG9pbnRzOiBvdXRSZXN1bHRzIH07XG4gIH1cblxuICBnZW5lcmF0ZVJlbGF0aXZlUGF0aCgpIHtcbiAgICByZXR1cm4gXCIvXCI7XG4gIH1cblxuICBhc3luYyBidWlsZChyb3V0ZTogUm91dGUpIHtcbiAgICB0aGlzLnJlbGF0aXZlUGF0aCA9IHJvdXRlLmFic1dvcmtpbmdEaXJlY3Rvcnk7XG5cbiAgICBjb25zdCB0c2NvbmZpZ0ZpbGUgPSBhd2FpdCB0aGlzLnJvb3QubmF0aXZlRmlsZShcInRzY29uZmlnLmpzb25cIik7XG4gICAgbGV0IHRzY29uZmlnID0gdW5kZWZpbmVkO1xuICAgIGlmICh0c2NvbmZpZ0ZpbGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRzY29uZmlnID0gYXdhaXQgdHNjb25maWdGaWxlLnRleHQoKTtcbiAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xuICAgICAgICBjb25zdCBlcnIgPSBQYWNrYWdlckVycm9yLndpdGgoRXJyb3JDb2RlLmludmFsaWRUU0NvbmZpZywgZXhjZXB0aW9uKTtcbiAgICAgICAgZXJyLmJ1aWxkID0gdGhpcztcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGVudHJ5UG9pbnRzID0gcm91dGUuZW50cnlQb2ludHM7XG4gICAgbGV0IHJlc3VsdDogQnVpbGRSZXN1bHQ7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgLi4udGhpcy5wa2cuZXNidWlsZCxcbiAgICAgIGZvcm1hdDogXCJlc21cIixcbiAgICAgIHRzY29uZmlnLFxuICAgICAgbWV0YWZpbGU6IHRydWUsXG4gICAgICBlbnRyeVBvaW50cyxcbiAgICAgIHB1YmxpY1BhdGg6IEVTQnVpbGRQYWNrYWdlLm9yaWdpbiArIHRoaXMucmVsYXRpdmVQYXRoLFxuICAgICAgcGx1Z2luczogW3RoaXMuYXNQbHVnaW4oKV0sXG4gICAgICB3cml0ZTogZmFsc2UsXG4gICAgICBsb2FkZXI6IHRoaXMucGtnLmVzYnVpbGQubG9hZGVyXG4gICAgICAgID8gdGhpcy5wa2cuZXNidWlsZC5sb2FkZXJcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBcIi5qc1wiOiBcImpzeFwiLFxuICAgICAgICAgICAgXCIudHNcIjogXCJ0c3hcIixcbiAgICAgICAgICAgIFwiLnRzeFwiOiBcInRzeFwiLFxuICAgICAgICAgIH0sXG4gICAgICBhYnNXb3JraW5nRGlyOiB0aGlzLnJlbGF0aXZlUGF0aCxcbiAgICAgIG5vZGVQYXRoczogW1wiL25vZGVfbW9kdWxlc1wiXSxcbiAgICAgIG91dGRpcjogdGhpcy5yZWxhdGl2ZVBhdGgsXG4gICAgICBidW5kbGU6IHRydWUsXG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBidWlsZChjb25maWcpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IGVyciA9IFBhY2thZ2VyRXJyb3Iud2l0aChFcnJvckNvZGUuYnVpbGRGYWlsZWQsIGUpO1xuICAgICAgZXJyLmJ1aWxkID0gdGhpcztcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBzY3JpcHQgb2Ygcm91dGUuYnVpbGRlci5zY3JpcHRzLnZhbHVlcygpKSB7XG4gICAgICBzY3JpcHQuYXR0cmlic1tcInR5cGVcIl0gPSBcIm1vZHVsZVwiO1xuICAgICAgc2NyaXB0LmF0dHJpYnNbXCJkZWZlclwiXSA9IFwiXCI7XG4gICAgICBzY3JpcHQuYXR0cmlic1tcImRhdGEtc3JjXCJdID0gc2NyaXB0LmF0dHJpYnNbXCJzcmNcIl07XG4gICAgICAvLyBzY3JpcHQuYXR0cmlic1tcbiAgICAgIC8vICAgXCJzcmNcIlxuICAgICAgLy8gXSA9IGAvX2Rpc3RfL2ltcG9ydEVycm9yQ2F0Y2hlcj91cmw9JHtlbmNvZGVVUklDb21wb25lbnQoXG4gICAgICAvLyAgIHNjcmlwdC5hdHRyaWJzW1wic3JjXCJdXG4gICAgICAvLyApfWA7XG4gICAgfVxuICAgIGNvbnN0IGh0bWwgPSByb3V0ZS5yZW5kZXJUb1N0cmluZyhyZXN1bHQsIGNvbmZpZyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgd2FybmluZ3M6IHJlc3VsdC53YXJuaW5ncyxcbiAgICAgIC4uLihhd2FpdCB0aGlzLnNhdmVSZXN1bHRUb0NhY2hlKHJlc3VsdCwgcm91dGUpKSxcbiAgICAgIGh0bWwsXG4gICAgfSBhcyBPdXRwdXRQYXJhbXM7XG4gIH1cblxuICBhc3luYyBnZXRGaWxlRm9yTG9jYXRpb24obG9jYXRpb246IExvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucm9vdC5uYXRpdmVGaWxlKGxvY2F0aW9uLmZpbGUpO1xuICB9XG5cbiAgcmVzb2x2ZUZpbGUgPSBhc3luYyAob3B0czogT25SZXNvbHZlQXJncyk6IFByb21pc2U8T25SZXNvbHZlUmVzdWx0PiA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50cyA9IG9wdHMucGF0aC5zcGxpdChcIi9cIik7XG4gICAgY29uc3QgcGtnTmFtZSA9IGNvbXBvbmVudHNbMF07XG5cbiAgICBpZiAodGhpcy5wa2cuYWxsRGVwZW5kZW5jaWVzLmhhcyhwa2dOYW1lKSkge1xuICAgICAgbGV0IGZpbGUgPVxuICAgICAgICBjb21wb25lbnRzLmxlbmd0aCA+IDEgPyBgLyR7Y29tcG9uZW50cy5zbGljZSgxKS5qb2luKFwiL1wiKX1gIDogXCJcIjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGg6IGBodHRwczovL2pzcG0uZGV2LyR7dGhpcy5wa2cuYWxsRGVwZW5kZW5jaWVzLmdldChcbiAgICAgICAgICBwa2dOYW1lXG4gICAgICAgICl9JHtmaWxlfWAsXG4gICAgICAgIGV4dGVybmFsOiB0cnVlLFxuICAgICAgICAvLyBuYW1lc3BhY2U6IFwiZXNidWlsZC1wa2dcIixcbiAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IHJlc29sdmVkUGF0aCA9IHBhdGguam9pbihvcHRzLnJlc29sdmVEaXIsIHBhdGgubm9ybWFsaXplKG9wdHMucGF0aCkpO1xuXG4gICAgaWYgKCFwYXRoLmlzQWJzb2x1dGUocmVzb2x2ZWRQYXRoKSAmJiBvcHRzLmltcG9ydGVyKSB7XG4gICAgICByZXNvbHZlZFBhdGggPSBwYXRoLmpvaW4ocmVzb2x2ZWRQYXRoLCBvcHRzLmltcG9ydGVyKTtcbiAgICB9IGVsc2UgaWYgKCFwYXRoLmlzQWJzb2x1dGUocmVzb2x2ZWRQYXRoKSAmJiAhb3B0cy5pbXBvcnRlcikge1xuICAgICAgcmVzb2x2ZWRQYXRoID0gcGF0aC5qb2luKHJlc29sdmVkUGF0aCwgb3B0cy5pbXBvcnRlcik7XG4gICAgfVxuXG4gICAgbGV0IGRvZXNFeGlzdCA9IGF3YWl0IHRoaXMucm9vdC5leGlzdHMocmVzb2x2ZWRQYXRoKTtcbiAgICBpZiAoIWRvZXNFeGlzdCAmJiBwYXRoLmV4dG5hbWUocmVzb2x2ZWRQYXRoKSA9PT0gXCJcIikge1xuICAgICAgbGV0IG9yaWdQYXRoID0gcmVzb2x2ZWRQYXRoO1xuICAgICAgZm9yIChsZXQgZXh0ZW5zaW9uIG9mIHRoaXMudGV4dEV4dGVuc2lvbnNUb1RyeSkge1xuICAgICAgICByZXNvbHZlZFBhdGggPSBvcmlnUGF0aCArIGV4dGVuc2lvbjtcbiAgICAgICAgaWYgKGF3YWl0IHRoaXMucm9vdC5leGlzdHMocmVzb2x2ZWRQYXRoKSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXRoOiByZXNvbHZlZFBhdGgsXG4gICAgICAgICAgICBleHRlcm5hbDogZmFsc2UsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghZG9lc0V4aXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBlcnJvcnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiBgNDA0IC0gRmlsZSBub3QgZm91bmQ6ICR7b3B0cy5wYXRofWAsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IHJlc29sdmVkUGF0aCxcbiAgICAgIGV4dGVybmFsOiBmYWxzZSxcbiAgICB9O1xuICB9O1xuXG4gIGxvYWRGaWxlID0gYXN5bmMgKG9wdHM6IE9uTG9hZEFyZ3MpOiBQcm9taXNlPE9uTG9hZFJlc3VsdD4gPT4ge1xuICAgIC8vI2lmZGVmIFZFUkJPU0VcbiAgICBjb25zb2xlLmxvZyhcIltMb2FkXVwiLCBvcHRzKTtcbiAgICAvLyNlbmRpZlxuXG4gICAgLy8gVXNlIHN0YXRpYyBmb2xkZXIgZm9yIGZpbGVzXG4gICAgaWYgKFxuICAgICAgb3B0cy5uYW1lc3BhY2UgPT09IFwiZmlsZVwiIHx8XG4gICAgICBNaW1lLmdldFR5cGUocGF0aC5leHRuYW1lKG9wdHMucGF0aCkpPy5pbmNsdWRlcyhcImltYWdlXCIpXG4gICAgKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50czogbmV3IFVpbnQ4QXJyYXkoYXdhaXQgdGhpcy5yb290LnJlYWRGaWxlQmluYXJ5KG9wdHMucGF0aCkpLFxuICAgICAgICBsb2FkZXI6IFwiZGVmYXVsdFwiLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgY29udGVudHM6IGF3YWl0IHRoaXMucm9vdC5yZWFkRmlsZVRleHQob3B0cy5wYXRoKSxcbiAgICAgIC8vIHJlc29sdmVEaXI6IHBhdGguZGlybmFtZShvcHRzLnBhdGgpLFxuICAgICAgbG9hZGVyOiBcImRlZmF1bHRcIixcbiAgICB9O1xuICB9O1xuXG4gIGFzUGx1Z2luKCkge1xuICAgIGNvbnN0IHJlc29sdmVGaWxlID0gdGhpcy5yZXNvbHZlRmlsZTtcbiAgICBjb25zdCBsb2FkRmlsZSA9IHRoaXMubG9hZEZpbGU7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IEVTQnVpbGRQYWNrYWdlLnBsdWdpbk5hbWUsXG4gICAgICBzZXR1cChidWlsZCkge1xuICAgICAgICBidWlsZC5vblJlc29sdmUoeyBmaWx0ZXI6IC8uKi8gfSwgcmVzb2x2ZUZpbGUpO1xuICAgICAgICBidWlsZC5vbkxvYWQoeyBmaWx0ZXI6IC8uKi8gfSwgbG9hZEZpbGUpO1xuICAgICAgfSxcbiAgICB9IGFzIFBsdWdpbjtcbiAgfVxufVxuIiwgImxldCBfY2FjaGU6IENhY2hlO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhY2hlKCkge1xuICBpZiAoIV9jYWNoZSkge1xuICAgIF9jYWNoZSA9IGF3YWl0IGdsb2JhbFRoaXMuY2FjaGVzLm9wZW4oXCJidW5kbGVzXCIpO1xuICB9XG5cbiAgcmV0dXJuIF9jYWNoZTtcbn1cbiIsICIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5leHBvcnQgZGVmYXVsdCBmcmVlR2xvYmFsO1xuIiwgImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCAiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCAiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFJhd1RhZztcbiIsICIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCAiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCAiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsICIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiIsICIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3Q7XG4iLCAiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRnVuY3Rpb247XG4iLCAiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbmV4cG9ydCBkZWZhdWx0IGNvcmVKc0RhdGE7XG4iLCAiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuIiwgIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Tb3VyY2U7XG4iLCAiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc01hc2tlZCBmcm9tICcuL19pc01hc2tlZC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNOYXRpdmU7XG4iLCAiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwgImltcG9ydCBiYXNlSXNOYXRpdmUgZnJvbSAnLi9fYmFzZUlzTmF0aXZlLmpzJztcbmltcG9ydCBnZXRWYWx1ZSBmcm9tICcuL19nZXRWYWx1ZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5hdGl2ZTtcbiIsICJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgV2Vha01hcDtcbiIsICJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdENyZWF0ZSA9IE9iamVjdC5jcmVhdGU7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY3JlYXRlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGFzc2lnbmluZ1xuICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbnZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICByZXR1cm4gZnVuY3Rpb24ocHJvdG8pIHtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICB9XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgIG9iamVjdC5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VDcmVhdGU7XG4iLCAiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlBcnJheTtcbiIsICJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVQcm9wZXJ0eTtcbiIsICIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RWFjaDtcbiIsICIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSW5kZXg7XG4iLCAiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy4vX2RlZmluZVByb3BlcnR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICogdmFsdWUgY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnblZhbHVlO1xuIiwgIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcTtcbiIsICJpbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc2lnblZhbHVlO1xuIiwgImltcG9ydCBhc3NpZ25WYWx1ZSBmcm9tICcuL19hc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5T2JqZWN0O1xuIiwgIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNMZW5ndGg7XG4iLCAiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlMaWtlO1xuIiwgIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQcm90b3R5cGU7XG4iLCAiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVRpbWVzO1xuIiwgImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0FyZ3VtZW50cztcbiIsICJpbXBvcnQgYmFzZUlzQXJndW1lbnRzIGZyb20gJy4vX2Jhc2VJc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJndW1lbnRzO1xuIiwgIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkZhbHNlO1xuIiwgImltcG9ydCBiYXNlVGltZXMgZnJvbSAnLi9fYmFzZVRpbWVzLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TGlrZUtleXM7XG4iLCAiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNUeXBlZEFycmF5O1xuIiwgIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVVuYXJ5O1xuIiwgImltcG9ydCBiYXNlSXNUeXBlZEFycmF5IGZyb20gJy4vX2Jhc2VJc1R5cGVkQXJyYXkuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IG5vZGVVdGlsIGZyb20gJy4vX25vZGVVdGlsLmpzJztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzVHlwZWRBcnJheTtcbiIsICIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3ZlckFyZztcbiIsICJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzO1xuIiwgImltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5cyBmcm9tICcuL19uYXRpdmVLZXlzLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5cztcbiIsICJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5cyBmcm9tICcuL19iYXNlS2V5cy5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBrZXlzO1xuIiwgIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzSW47XG4iLCAiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzSW4gZnJvbSAnLi9fbmF0aXZlS2V5c0luLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXNJbjtcbiIsICJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5c0luIGZyb20gJy4vX2Jhc2VLZXlzSW4uanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQga2V5c0luO1xuIiwgImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlQ3JlYXRlO1xuIiwgImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hDbGVhcjtcbiIsICIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoRGVsZXRlO1xuIiwgImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoR2V0O1xuIiwgImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwgImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCAiaW1wb3J0IGhhc2hDbGVhciBmcm9tICcuL19oYXNoQ2xlYXIuanMnO1xuaW1wb3J0IGhhc2hEZWxldGUgZnJvbSAnLi9faGFzaERlbGV0ZS5qcyc7XG5pbXBvcnQgaGFzaEdldCBmcm9tICcuL19oYXNoR2V0LmpzJztcbmltcG9ydCBoYXNoSGFzIGZyb20gJy4vX2hhc2hIYXMuanMnO1xuaW1wb3J0IGhhc2hTZXQgZnJvbSAnLi9faGFzaFNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwgIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlQ2xlYXI7XG4iLCAiaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICovXG5mdW5jdGlvbiBhc3NvY0luZGV4T2YoYXJyYXksIGtleSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICBpZiAoZXEoYXJyYXlbbGVuZ3RoXVswXSwga2V5KSkge1xuICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NvY0luZGV4T2Y7XG4iLCAiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZURlbGV0ZTtcbiIsICJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUdldDtcbiIsICJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVIYXM7XG4iLCAiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZVNldDtcbiIsICJpbXBvcnQgbGlzdENhY2hlQ2xlYXIgZnJvbSAnLi9fbGlzdENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IGxpc3RDYWNoZURlbGV0ZSBmcm9tICcuL19saXN0Q2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUdldCBmcm9tICcuL19saXN0Q2FjaGVHZXQuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUhhcyBmcm9tICcuL19saXN0Q2FjaGVIYXMuanMnO1xuaW1wb3J0IGxpc3RDYWNoZVNldCBmcm9tICcuL19saXN0Q2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZTtcbiIsICJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsICJpbXBvcnQgSGFzaCBmcm9tICcuL19IYXNoLmpzJztcbmltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUNsZWFyO1xuIiwgIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNLZXlhYmxlO1xuIiwgImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwgImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVEZWxldGU7XG4iLCAiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVHZXQ7XG4iLCAiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlSGFzO1xuIiwgImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlU2V0O1xuIiwgImltcG9ydCBtYXBDYWNoZUNsZWFyIGZyb20gJy4vX21hcENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IG1hcENhY2hlRGVsZXRlIGZyb20gJy4vX21hcENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBtYXBDYWNoZUdldCBmcm9tICcuL19tYXBDYWNoZUdldC5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVIYXMgZnJvbSAnLi9fbWFwQ2FjaGVIYXMuanMnO1xuaW1wb3J0IG1hcENhY2hlU2V0IGZyb20gJy4vX21hcENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcENhY2hlO1xuIiwgIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlQdXNoO1xuIiwgImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwgImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tDbGVhcjtcbiIsICIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrRGVsZXRlO1xuIiwgIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tHZXQ7XG4iLCAiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tIYXM7XG4iLCAiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuaW1wb3J0IE1hcENhY2hlIGZyb20gJy4vX01hcENhY2hlLmpzJztcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrU2V0O1xuIiwgImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBzdGFja0NsZWFyIGZyb20gJy4vX3N0YWNrQ2xlYXIuanMnO1xuaW1wb3J0IHN0YWNrRGVsZXRlIGZyb20gJy4vX3N0YWNrRGVsZXRlLmpzJztcbmltcG9ydCBzdGFja0dldCBmcm9tICcuL19zdGFja0dldC5qcyc7XG5pbXBvcnQgc3RhY2tIYXMgZnJvbSAnLi9fc3RhY2tIYXMuanMnO1xuaW1wb3J0IHN0YWNrU2V0IGZyb20gJy4vX3N0YWNrU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBTdGFjaztcbiIsICJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnbjtcbiIsICJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25JbjtcbiIsICJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGFycmF5RWFjaCBmcm9tICcuL19hcnJheUVhY2guanMnO1xuaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduIGZyb20gJy4vX2Jhc2VBc3NpZ24uanMnO1xuaW1wb3J0IGJhc2VBc3NpZ25JbiBmcm9tICcuL19iYXNlQXNzaWduSW4uanMnO1xuaW1wb3J0IGNsb25lQnVmZmVyIGZyb20gJy4vX2Nsb25lQnVmZmVyLmpzJztcbmltcG9ydCBjb3B5QXJyYXkgZnJvbSAnLi9fY29weUFycmF5LmpzJztcbmltcG9ydCBjb3B5U3ltYm9scyBmcm9tICcuL19jb3B5U3ltYm9scy5qcyc7XG5pbXBvcnQgY29weVN5bWJvbHNJbiBmcm9tICcuL19jb3B5U3ltYm9sc0luLmpzJztcbmltcG9ydCBnZXRBbGxLZXlzIGZyb20gJy4vX2dldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldEFsbEtleXNJbiBmcm9tICcuL19nZXRBbGxLZXlzSW4uanMnO1xuaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGluaXRDbG9uZUFycmF5IGZyb20gJy4vX2luaXRDbG9uZUFycmF5LmpzJztcbmltcG9ydCBpbml0Q2xvbmVCeVRhZyBmcm9tICcuL19pbml0Q2xvbmVCeVRhZy5qcyc7XG5pbXBvcnQgaW5pdENsb25lT2JqZWN0IGZyb20gJy4vX2luaXRDbG9uZU9iamVjdC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzTWFwIGZyb20gJy4vaXNNYXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzU2V0IGZyb20gJy4vaXNTZXQuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNsb25lO1xuIiwgIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlGaWx0ZXI7XG4iLCAiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkFycmF5O1xuIiwgImltcG9ydCBhcnJheUZpbHRlciBmcm9tICcuL19hcnJheUZpbHRlci5qcyc7XG5pbXBvcnQgc3R1YkFycmF5IGZyb20gJy4vc3R1YkFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xzO1xuIiwgImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weVN5bWJvbHM7XG4iLCAiaW1wb3J0IGFycmF5UHVzaCBmcm9tICcuL19hcnJheVB1c2guanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5pbXBvcnQgc3R1YkFycmF5IGZyb20gJy4vc3R1YkFycmF5LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAob2JqZWN0KSB7XG4gICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0U3ltYm9sc0luO1xuIiwgImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuXG4vKipcbiAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlTeW1ib2xzSW47XG4iLCAiaW1wb3J0IGFycmF5UHVzaCBmcm9tICcuL19hcnJheVB1c2guanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0QWxsS2V5cztcbiIsICJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRBbGxLZXlzO1xuIiwgImltcG9ydCBiYXNlR2V0QWxsS2V5cyBmcm9tICcuL19iYXNlR2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9sc0luIGZyb20gJy4vX2dldFN5bWJvbHNJbi5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsS2V5c0luO1xuIiwgImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFWaWV3O1xuIiwgImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9taXNlO1xuIiwgImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxuZXhwb3J0IGRlZmF1bHQgU2V0O1xuIiwgImltcG9ydCBEYXRhVmlldyBmcm9tICcuL19EYXRhVmlldy5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICcuL19Qcm9taXNlLmpzJztcbmltcG9ydCBTZXQgZnJvbSAnLi9fU2V0LmpzJztcbmltcG9ydCBXZWFrTWFwIGZyb20gJy4vX1dlYWtNYXAuanMnO1xuaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRUYWc7XG4iLCAiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5pdENsb25lQXJyYXk7XG4iLCAiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IFVpbnQ4QXJyYXk7XG4iLCAiaW1wb3J0IFVpbnQ4QXJyYXkgZnJvbSAnLi9fVWludDhBcnJheS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVBcnJheUJ1ZmZlcjtcbiIsICJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAqL1xuZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVEYXRhVmlldztcbiIsICIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVJlZ0V4cDtcbiIsICJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVTeW1ib2w7XG4iLCAiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lVHlwZWRBcnJheTtcbiIsICJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcbmltcG9ydCBjbG9uZURhdGFWaWV3IGZyb20gJy4vX2Nsb25lRGF0YVZpZXcuanMnO1xuaW1wb3J0IGNsb25lUmVnRXhwIGZyb20gJy4vX2Nsb25lUmVnRXhwLmpzJztcbmltcG9ydCBjbG9uZVN5bWJvbCBmcm9tICcuL19jbG9uZVN5bWJvbC5qcyc7XG5pbXBvcnQgY2xvbmVUeXBlZEFycmF5IGZyb20gJy4vX2Nsb25lVHlwZWRBcnJheS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVCeVRhZztcbiIsICJpbXBvcnQgYmFzZUNyZWF0ZSBmcm9tICcuL19iYXNlQ3JlYXRlLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNQcm90b3R5cGUob2JqZWN0KSlcbiAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgOiB7fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5pdENsb25lT2JqZWN0O1xuIiwgImltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTWFwO1xuIiwgImltcG9ydCBiYXNlSXNNYXAgZnJvbSAnLi9fYmFzZUlzTWFwLmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXA7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTWFwKG5ldyBNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFwO1xuIiwgImltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzU2V0O1xuIiwgImltcG9ydCBiYXNlSXNTZXQgZnJvbSAnLi9fYmFzZUlzU2V0LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU2V0KG5ldyBTZXQpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IGlzU2V0O1xuIiwgImltcG9ydCBiYXNlQ2xvbmUgZnJvbSAnLi9fYmFzZUNsb25lLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICogQHNlZSBfLmNsb25lXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICpcbiAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZURlZXA7XG4iLCAiaW1wb3J0IHR5cGUgeyBCdWlsZE9wdGlvbnMgfSBmcm9tIFwiZXNidWlsZFwiO1xuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSBcImxvZGFzaC1lc1wiO1xuaW1wb3J0ICogYXMgc2VtdmVyIGZyb20gXCJzZW12ZXJcIjtcbmV4cG9ydCBpbnRlcmZhY2UgUnVuQ29uZmlndXJhdGlvbiB7XG4gIC8vIElmIHlvdSBwYXNzIGl0IGEgZmlsZW5hbWUgZW5kaW5nIGluIC5odG1sLCBhbGwgbmF2aWdhdGlvbiByb3V0ZXMgd2lsbCBnbyB0byB0aGF0IGZpbGUuXG4gIC8vIElmIHlvdSBwYXNzIGl0IGEgZm9sZGVyLCBpdCB3aWxsIHJvdXRlIGJhc2VkIG9uIHRoZSBmaWxlc3lzdGVtLCBOZXh0LmpzLXN0eWxlLlxuICByb3V0ZXI6IHN0cmluZztcblxuICBpc1JvdXRlclVuc2V0OiBib29sZWFuO1xufVxuXG5jb25zdCBBVVRPX0RFUEVOREVOQ0lFUyA9IFtcInJlYWN0XCIsIFwicmVhY3QtZG9tXCIsIFwicHJvcC10eXBlc1wiLCBcIm9iamVjdC1hc3NpZ25cIl07XG5cbmNvbnN0IGRlcGVuZGVuY3lLZXlzID0gW1xuICBcImRlcGVuZGVuY2llc1wiLFxuICBcIm9wdGlvbmFsRGVwZW5kZW5jaWVzXCIsXG4gIFwicGVlckRlcGVuZGVuY2llc1wiLFxuICBcImRldkRlcGVuZGVuY2llc1wiLFxuXTtcblxuY29uc3QgZWFjaEl0ZXJhdG9yVmFsdWUgPSBbXCJcIiwgXCJcIl07XG5cbmV4cG9ydCBjbGFzcyBQYWNrYWdlSlNPTiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdmVyc2lvbjogc3RyaW5nO1xuXG4gIGVzYnVpbGQ6IFBhcnRpYWw8QnVpbGRPcHRpb25zPjtcbiAgcnVuOiBSdW5Db25maWd1cmF0aW9uO1xuICBkZXBlbmRlbmNpZXM6IE9iamVjdDtcbiAgZGV2RGVwZW5kZW5jaWVzOiBPYmplY3Q7XG4gIHBlZXJEZXBlbmRlbmNpZXM6IE9iamVjdDtcbiAgb3B0aW9uYWxEZXBlbmRlbmNpZXM6IE9iamVjdDtcblxuICAqZWFjaERlcGVuZGVuY3koKSB7XG4gICAgZm9yIChsZXQgZGVwS2V5IG9mIGRlcGVuZGVuY3lLZXlzKSB7XG4gICAgICBjb25zdCBkZXBzID0gdGhpc1tkZXBLZXldO1xuICAgICAgaWYgKGRlcHMpIHtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIGRlcHMpIHtcbiAgICAgICAgICBlYWNoSXRlcmF0b3JWYWx1ZVswXSA9IGtleTtcbiAgICAgICAgICBlYWNoSXRlcmF0b3JWYWx1ZVsxXSA9IGRlcHNba2V5XTtcbiAgICAgICAgICB5aWVsZCBlYWNoSXRlcmF0b3JWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5vcm1hbGl6ZURlcGVuZGVuY2llcygpIHtcbiAgICBmb3IgKGxldCBkZXBLZXkgb2YgZGVwZW5kZW5jeUtleXMpIHtcbiAgICAgIGNvbnN0IGRlcHMgPSB0aGlzW2RlcEtleV07XG4gICAgICBpZiAoZGVwcykge1xuICAgICAgICBmb3IgKGxldCBtb2R1bGVJZCBpbiBkZXBzKSB7XG4gICAgICAgICAgbGV0IHZlcnNpb24gPSBkZXBzW21vZHVsZUlkXTtcbiAgICAgICAgICB2ZXJzaW9uID0gdmVyc2lvbi5yZXBsYWNlKC9cXF4vZ20sIFwiXCIpO1xuXG4gICAgICAgICAgaWYgKCFzZW12ZXIuY2xlYW4odmVyc2lvbiwgZmFsc2UpKSB7XG4gICAgICAgICAgICB0aGlzLmFsbERlcGVuZGVuY2llcy5zZXQobW9kdWxlSWQsIG1vZHVsZUlkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbGxEZXBlbmRlbmNpZXMuc2V0KFxuICAgICAgICAgICAgICBtb2R1bGVJZCxcbiAgICAgICAgICAgICAgYCR7bW9kdWxlSWR9QCR7c2VtdmVyLmNsZWFuKHZlcnNpb24sIGZhbHNlKX1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGF1dG9kZXAgb2YgQVVUT19ERVBFTkRFTkNJRVMpIHtcbiAgICAgIGlmICghdGhpcy5hbGxEZXBlbmRlbmNpZXMuaGFzKGF1dG9kZXApKSB7XG4gICAgICAgIHRoaXMuYWxsRGVwZW5kZW5jaWVzLnNldChhdXRvZGVwLCBhdXRvZGVwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgcGFyc2UoanNvbjogc3RyaW5nLCBDbGFzc05hbWUgPSBQYWNrYWdlSlNPTikge1xuICAgIGNvbnN0IHBrZyA9IG5ldyBDbGFzc05hbWUoKTtcbiAgICBwa2cucHJvY2Vzcyhqc29uLCBDbGFzc05hbWUpO1xuICAgIHJldHVybiBwa2c7XG4gIH1cblxuICBhbGxEZXBlbmRlbmNpZXMgPSBuZXcgTWFwKCk7XG5cbiAgcHJvY2Vzcyhqc29uOiBzdHJpbmcsIENsYXNzTmFtZSA9IFBhY2thZ2VKU09OKSB7XG4gICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICBpZiAodHlwZW9mIHBhcnNlZC5oYW5kbGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGRlbGV0ZSBwYXJzZWQuaGFuZGxlO1xuICAgIH1cbiAgICBwYXJzZWQucnVuID0gQ2xhc3NOYW1lLm5vcm1hbGl6ZVJ1bihwYXJzZWQucnVuIHx8IHt9KTtcbiAgICBwYXJzZWQuZXNidWlsZCA9IENsYXNzTmFtZS5ub3JtYWxpemVFU0J1aWxkKHBhcnNlZC5lc2J1aWxkIHx8IHt9KTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHBhcnNlZCk7XG4gICAgdGhpcy5ub3JtYWxpemVEZXBlbmRlbmNpZXMoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHN0YXRpYyBub3JtYWxpemVSdW4ocnVuOiBQYXJ0aWFsPFJ1bkNvbmZpZ3VyYXRpb24+KSB7XG4gICAgaWYgKHR5cGVvZiBydW4ucm91dGVyID09PSBcInN0cmluZ1wiICYmIHJ1bi5yb3V0ZXIpIHtcbiAgICAgIHJ1bi5yb3V0ZXIgPSBydW4ucm91dGVyLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgICAgcnVuLmlzUm91dGVyVW5zZXQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcnVuLmlzUm91dGVyVW5zZXQgPSB0cnVlO1xuICAgICAgcnVuLnJvdXRlciA9IFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJ1bjtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBqc29uID0gY2xvbmVEZWVwKHRoaXMpO1xuXG4gICAgZGVsZXRlIGpzb24ucnVuLmlzUm91dGVyVW5zZXQ7XG4gICAgZGVsZXRlIGpzb24uYWxsRGVwZW5kZW5jaWVzO1xuXG4gICAgcmV0dXJuIGpzb247XG4gIH1cblxuICBzdGF0aWMgbm9ybWFsaXplRVNCdWlsZChlc2J1aWxkOiBQYXJ0aWFsPEJ1aWxkT3B0aW9ucz4pIHtcbiAgICByZXR1cm4ge307XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhY2thZ2VKU09ORmlsZSBleHRlbmRzIFBhY2thZ2VKU09OIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuICBzdGF0aWMgYXN5bmMgZnJvbUhhbmRsZShoYW5kbGU6IEZpbGVTeXN0ZW1GaWxlSGFuZGxlKSB7XG4gICAgY29uc3QgcGtnID0gUGFja2FnZUpTT05GaWxlLnBhcnNlKGF3YWl0IChhd2FpdCBoYW5kbGUuZ2V0RmlsZSgpKS50ZXh0KCkpO1xuICAgIHBrZy5oYW5kbGUgPSBoYW5kbGU7XG5cbiAgICByZXR1cm4gcGtnO1xuICB9XG4gIGhhbmRsZTogRmlsZVN5c3RlbUZpbGVIYW5kbGU7XG5cbiAgYXN5bmMgc2F2ZSgpIHtcbiAgICBjb25zdCBwZXJtID0gYXdhaXQgdGhpcy5oYW5kbGUuY3JlYXRlV3JpdGFibGUoe1xuICAgICAga2VlcEV4aXN0aW5nRGF0YTogZmFsc2UsXG4gICAgfSk7XG4gICAgY29uc3QganNvbiA9IHRoaXMudG9KU09OKCk7XG4gICAgY29uc29sZS5sb2coanNvbik7XG4gICAgY29uc3QgdGV4dCA9IEpTT04uc3RyaW5naWZ5KGpzb24sIG51bGwsIDIpO1xuICAgIGNvbnN0IHdyaXRlciA9IHBlcm0uZ2V0V3JpdGVyKCk7XG4gICAgYXdhaXQgd3JpdGVyLndyaXRlKHRleHQpO1xuICAgIGF3YWl0IHdyaXRlci5jbG9zZSgpO1xuICB9XG5cbiAgcHJvY2Vzcyhqc29uOiBzdHJpbmcsIENsYXNzTmFtZSA9IFBhY2thZ2VKU09OKSB7XG4gICAgcmV0dXJuIHN1cGVyLnByb2Nlc3MoanNvbiwgUGFja2FnZUpTT05GaWxlKTtcbiAgfVxuXG4gIGFzeW5jIHJlbG9hZCgpIHtcbiAgICB0aGlzLnByb2Nlc3MoYXdhaXQgKGF3YWl0IHRoaXMuaGFuZGxlLmdldEZpbGUoKSkudGV4dCgpLCBQYWNrYWdlSlNPTkZpbGUpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlKGpzb24pOiBQYWNrYWdlSlNPTkZpbGUge1xuICAgIHJldHVybiBzdXBlci5wYXJzZShqc29uLCBQYWNrYWdlSlNPTkZpbGUpIGFzIFBhY2thZ2VKU09ORmlsZTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBqc29uID0gc3VwZXIudG9KU09OKCk7XG4gICAgZGVsZXRlIGpzb24uaGFuZGxlO1xuICAgIHJldHVybiBqc29uO1xuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgc2VyaWFsaXplciBmcm9tIFwiZG9tLXNlcmlhbGl6ZXJcIjtcbmltcG9ydCB7XG4gIERvbUhhbmRsZXIsXG4gIERvbVV0aWxzLFxuICBwYXJzZURvY3VtZW50LFxuICBQYXJzZXJcbn0gZnJvbSBcImh0bWxwYXJzZXIyXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5jbGFzcyBIVE1MMkVTQnVpbGQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNjcmlwdHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5saW5rcyA9IG5ldyBNYXAoKTtcbiAgfVxuICBnZW5lcmF0ZShzb3VyY2UsIHJlc29sdmUpIHtcbiAgICBjb25zdCBkb20gPSBwYXJzZURvY3VtZW50KHNvdXJjZSk7XG4gICAgdGhpcy5kb20gPSBkb207XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgYnVuZGxlOiB0cnVlLFxuICAgICAgbWV0YWZpbGU6IHRydWUsXG4gICAgICBlbnRyeVBvaW50czogW11cbiAgICB9O1xuICAgIGxldCBzcmMgPSBcIlwiO1xuICAgIGZvciAobGV0IHNjcmlwdCBvZiBEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiLCBkb20pKSB7XG4gICAgICBzcmMgPSBzY3JpcHQuYXR0cmlic1tcInNyY1wiXTtcbiAgICAgIGlmIChzcmMgJiYgIXNyYy5pbmNsdWRlcyhcIjovL1wiKSkge1xuICAgICAgICBzcmMgPSByZXNvbHZlKHNyYyk7XG4gICAgICAgIHRoaXMuc2NyaXB0cy5zZXQoc3JjLCBzY3JpcHQpO1xuICAgICAgICBjb25maWcuZW50cnlQb2ludHMucHVzaChzcmMpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBsaW5rIG9mIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiLCBkb20pKSB7XG4gICAgICBpZiAoKCFsaW5rLmF0dHJpYnNbXCJyZWxcIl0gfHwgbGluay5hdHRyaWJzW1wicmVsXCJdID09PSBcInN0eWxlc2hlZXRcIikgJiYgbGluay5hdHRyaWJzW1wiaHJlZlwiXSAmJiAhbGluay5hdHRyaWJzW1wiaHJlZlwiXS5pbmNsdWRlcyhcIjovL1wiKSkge1xuICAgICAgICBzcmMgPSByZXNvbHZlKGxpbmsuYXR0cmlic1tcImhyZWZcIl0pO1xuICAgICAgICB0aGlzLmxpbmtzLnNldChzcmMsIGxpbmspO1xuICAgICAgICBjb25maWcuZW50cnlQb2ludHMucHVzaChzcmMpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG4gIHJlbmRlclRvU3RyaW5nKGJ1aWxkLCBjb25maWcgPSB0aGlzLmNvbmZpZywgcmVzb2x2ZUZyb20sIHJlc29sdmVUbykge1xuICAgIGlmICghYnVpbGQubWV0YWZpbGUpXG4gICAgICB0aHJvdyBcIkJ1aWxkIGlzIG1pc3NpbmcgbWV0YWZpbGUuXCI7XG4gICAgY29uc3Qge2xpbmtzLCBzY3JpcHRzfSA9IHRoaXM7XG4gICAgbGV0IG1ldGEgPSBidWlsZC5tZXRhZmlsZTtcbiAgICBjb25zdCBjc3NPdXRwdXRzID0gbmV3IE1hcCgpO1xuICAgIGxldCBmaWxlO1xuICAgIGZvciAobGV0IG91dHB1dCBpbiBtZXRhLm91dHB1dHMpIHtcbiAgICAgIGZpbGUgPSBtZXRhLm91dHB1dHNbb3V0cHV0XTtcbiAgICAgIGlmIChwYXRoLmV4dG5hbWUob3V0cHV0KSA9PT0gXCIuY3NzXCIpIHtcbiAgICAgICAgY3NzT3V0cHV0cy5zZXQob3V0cHV0LCBmaWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3R5bGVzaGVldHNUb0luc2VydCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBwcmVmaXggPSBjb25maWcucHVibGljUGF0aCA/IGNvbmZpZy5wdWJsaWNQYXRoIDogXCJcIjtcbiAgICBmb3IgKGxldCBvdXRwdXQgaW4gbWV0YS5vdXRwdXRzKSB7XG4gICAgICBmaWxlID0gbWV0YS5vdXRwdXRzW291dHB1dF07XG4gICAgICBpZiAoIWZpbGUuZW50cnlQb2ludClcbiAgICAgICAgY29udGludWU7XG4gICAgICBjb25zdCBlbnRyeVBvaW50ID0gcmVzb2x2ZUZyb20oZmlsZS5lbnRyeVBvaW50KTtcbiAgICAgIGlmIChzY3JpcHRzLmhhcyhlbnRyeVBvaW50KSkge1xuICAgICAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUob3V0cHV0KTtcbiAgICAgICAgY29uc3QgYmFzZW5hbWUgPSBvdXRwdXQuc3Vic3RyaW5nKDAsIG91dHB1dC5sZW5ndGggLSBleHQubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgY3NzTmFtZSA9IGJhc2VuYW1lICsgXCIuY3NzXCI7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IHNjcmlwdHMuZ2V0KGVudHJ5UG9pbnQpO1xuICAgICAgICBpZiAoY3NzT3V0cHV0cy5oYXMoY3NzTmFtZSkgJiYgKCFjc3NPdXRwdXRzLmdldChjc3NOYW1lKS5lbnRyeVBvaW50IHx8ICFsaW5rcy5oYXMoY3NzT3V0cHV0cy5nZXQoY3NzTmFtZSkuZW50cnlQb2ludCkpKSB7XG4gICAgICAgICAgc3R5bGVzaGVldHNUb0luc2VydC5zZXQoY3NzTmFtZSwgc2NyaXB0KTtcbiAgICAgICAgfVxuICAgICAgICBzY3JpcHQuYXR0cmlic1tcInNyY1wiXSA9IHJlc29sdmVUbyhvdXRwdXQpO1xuICAgICAgfSBlbHNlIGlmIChsaW5rcy5oYXMoZW50cnlQb2ludCkpIHtcbiAgICAgICAgbGlua3MuZ2V0KGVudHJ5UG9pbnQpLmF0dHJpYnNbXCJocmVmXCJdID0gcmVzb2x2ZVRvKG91dHB1dCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IFtzdHlsZXNoZWV0TmFtZSwgYWJvdmVdIG9mIHN0eWxlc2hlZXRzVG9JbnNlcnQuZW50cmllcygpKSB7XG4gICAgICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihuZXcgRG9tSGFuZGxlcigoZXJyLCBlbGVtcykgPT4ge1xuICAgICAgICBEb21VdGlscy5wcmVwZW5kKGFib3ZlLCBlbGVtc1swXSk7XG4gICAgICB9KSk7XG4gICAgICBwYXJzZXIud3JpdGUoYDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJHtyZXNvbHZlVG8oc3R5bGVzaGVldE5hbWUpfVwiIC8+YCk7XG4gICAgICBwYXJzZXIuZW5kKCk7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVyLmRlZmF1bHQodGhpcy5kb20sIHt9KTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgSFRNTDJFU0J1aWxkXG59O1xuIiwgImltcG9ydCB7IE5hdGl2ZUZTIH0gZnJvbSBcInNyYy9saWIvcm91dGVyL2ZzLW5hdGl2ZVwiO1xuaW1wb3J0IHsgSFRNTDJFU0J1aWxkIH0gZnJvbSBcIkBqYXJyZWQvaHRtbGJ1aWxkXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgdHlwZSB7IEJ1aWxkT3B0aW9ucywgQnVpbGRSZXN1bHQgfSBmcm9tIFwiZXNidWlsZFwiO1xuXG4vLyBUaGUgcnVsZXMgYXJlIGFzIGZvbGxvd3Ncbi8vIFRoZSBmb2xkZXIgY29udGFpbmluZyB0aGUgdG9wbW9zdCBodG1sIGZpbGUgaXMgdGhlIHJvb3Qgcm91dGUuXG4vLyBwdWJsaWMvaW5kZXguaHRtbCA9PiAvXG4vLyBwdWJsaWMvYmFjb24vZWdncy5odG1sID0+IC9iYWNvbi9lZ2dzXG4vLyBwdWJsaWMvcmVjaXBlcy9baWRdLmh0bWwgPT4gL3JlY2lwZXMvMTIzLCAvcmVjaXBlcy8xMjMuaHRtbFxuLy8gcHVibGljL3JlY2lwZXMvbmV3Lmh0bWwgPT4gL3JlY2lwZXMvbmV3LCAvcmVjaXBlcy9uZXcvXG5leHBvcnQgY2xhc3MgUm91dGUge1xuICBlbnRyeVBvaW50czogc3RyaW5nW10gPSBbXTtcbiAgYWJzV29ya2luZ0RpcmVjdG9yeTogc3RyaW5nID0gXCJcIjtcbiAgcm9vdDogTmF0aXZlRlM7XG4gIGJ1aWxkZXI6IEhUTUwyRVNCdWlsZCA9IG5ldyBIVE1MMkVTQnVpbGQoKTtcbiAgb3V0RGVzdGluYXRpb24gPSBcIi9cIjtcblxuICBzdGF0aWMgZnJvbShyb290OiBOYXRpdmVGUywgcGF0aG5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHJvdXRlID0gbmV3IFJvdXRlKCk7XG4gICAgcm91dGUucm9vdCA9IHJvb3Q7XG4gICAgcm91dGUuYWJzV29ya2luZ0RpcmVjdG9yeSA9IHBhdGhuYW1lLmVuZHNXaXRoKFwiLmh0bWxcIilcbiAgICAgID8gcGF0aC5qb2luKHBhdGhuYW1lLCBcIi4uL1wiKVxuICAgICAgOiBwYXRobmFtZTtcbiAgICByZXR1cm4gcm91dGU7XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZUNvbmZpZyhmaWxlOiBGaWxlKSB7XG4gICAgY29uc3QgeyBlbnRyeVBvaW50cyB9ID0gdGhpcy5idWlsZGVyLmdlbmVyYXRlKFxuICAgICAgYXdhaXQgZmlsZS50ZXh0KCksXG4gICAgICB0aGlzLnJlc29sdmVGcm9tXG4gICAgKTtcbiAgICB0aGlzLmVudHJ5UG9pbnRzID0gZW50cnlQb2ludHM7XG4gIH1cblxuICByZW5kZXJUb1N0cmluZyhyZXN1bHQ6IEJ1aWxkUmVzdWx0LCBjb25maWc6IEJ1aWxkT3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmJ1aWxkZXIucmVuZGVyVG9TdHJpbmcoXG4gICAgICByZXN1bHQsXG4gICAgICBjb25maWcsXG4gICAgICB0aGlzLnJlc29sdmVGcm9tLFxuICAgICAgdGhpcy5yZXNvbHZlVG9cbiAgICApO1xuICB9XG5cbiAgcmVzb2x2ZUZyb20gPSAoLi4uX3BhdGg6IHN0cmluZ1tdKSA9PiB7XG4gICAgcmV0dXJuIHBhdGguam9pbih0aGlzLmFic1dvcmtpbmdEaXJlY3RvcnksIC4uLl9wYXRoKTtcbiAgfTtcbiAgcmVzb2x2ZVRvID0gKC4uLl9wYXRoOiBzdHJpbmdbXSkgPT4ge1xuICAgIHJldHVybiBwYXRoLmpvaW4odGhpcy5vdXREZXN0aW5hdGlvbiwgLi4uX3BhdGgpO1xuICB9O1xufVxuXG5leHBvcnQgY2xhc3MgRmlsZXN5c3RlbVJvdXRlciB7XG4gIHBhY2thZ2VSb290OiBOYXRpdmVGUztcbiAgcGFnZXNSb290OiBOYXRpdmVGUztcblxuICBjb25zdHJ1Y3RvcihwYWNrYWdlUm9vdDogTmF0aXZlRlMsIHBhZ2VzUm9vdDogTmF0aXZlRlMpIHtcbiAgICB0aGlzLnBhY2thZ2VSb290ID0gcGFja2FnZVJvb3Q7XG4gICAgdGhpcy5wYWdlc1Jvb3QgPSBwYWdlc1Jvb3Q7XG4gIH1cblxuICBhc3luYyByb3V0ZUZvcihmaWxlOiBGaWxlLCBwYXRobmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3Qgcm91dGUgPSBSb3V0ZS5mcm9tKHRoaXMucGFja2FnZVJvb3QsIHBhdGhuYW1lKTtcbiAgICBhd2FpdCByb3V0ZS5nZW5lcmF0ZUNvbmZpZyhmaWxlKTtcblxuICAgIHJldHVybiByb3V0ZTtcbiAgfVxuXG4gIGFzeW5jIHJlc29sdmUocGF0aG5hbWU6IHN0cmluZyk6IFByb21pc2U8Um91dGU+IHtcbiAgICBjb25zdCB7IHBhZ2VzUm9vdDogZnMgfSA9IHRoaXM7XG5cbiAgICBsZXQgdGFyZ2V0ID0gcGF0aG5hbWU7XG4gICAgbGV0IGZpbGU6IEZpbGU7XG5cbiAgICBpZiAocGF0aG5hbWUuaW5kZXhPZihcIi8vXCIpID4gLTEpIHtcbiAgICAgIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvXFwvKy9nLCBcIi9cIik7XG4gICAgfVxuXG4gICAgaWYgKHBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgICAgLy8gRmlyc3QsIHRyeSBhbiBleGFjdCBodG1sIGZpbGUuXG4gICAgICAvLyBzbywgL2Zvby5odG1sIGluc3RlYWQgb2YgL2Zvby9pbmRleC5odG1sXG4gICAgICB0YXJnZXQgPSBwYXRobmFtZS5zbGljZSgwLCAtMSkgKyBcIi5odG1sXCI7XG4gICAgICBmaWxlID0gYXdhaXQgZnMubmF0aXZlRmlsZSh0YXJnZXQpO1xuICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucm91dGVGb3IoZmlsZSwgdGFyZ2V0KTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0ID0gcGF0aG5hbWUgKyBcImluZGV4Lmh0bWxcIjtcbiAgICAgIGZpbGUgPSBhd2FpdCBmcy5uYXRpdmVGaWxlKHRhcmdldCk7XG4gICAgICBpZiAoZmlsZSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yb3V0ZUZvcihmaWxlLCB0YXJnZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwYXRobmFtZS5lbmRzV2l0aChcIi5odG1sXCIpKSB7XG4gICAgICB0YXJnZXQgPSBwYXRobmFtZSArIFwiLmh0bWxcIjtcbiAgICB9XG5cbiAgICBmaWxlID0gYXdhaXQgZnMubmF0aXZlRmlsZSh0YXJnZXQpO1xuXG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJvdXRlRm9yKGZpbGUsIHRhcmdldCk7XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKHBhdGhuYW1lLCBcIi4uL1wiKSk7XG5cbiAgICBpZiAodGFyZ2V0LnN0YXJ0c1dpdGgoXCIuLlwiKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgX3Jlc3VsdCBvZiBhd2FpdCBmcy5yZWFkZGlyKHRhcmdldCkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IF9yZXN1bHQgYXNcbiAgICAgICAgfCBGaWxlU3lzdGVtRmlsZUhhbmRsZVxuICAgICAgICB8IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGU7XG5cbiAgICAgIGlmIChcbiAgICAgICAgcmVzdWx0LmtpbmQgPT09IFwiZmlsZVwiICYmXG4gICAgICAgIHJlc3VsdC5uYW1lLnN0YXJ0c1dpdGgoXCJbXCIpICYmXG4gICAgICAgIHJlc3VsdC5uYW1lLmVuZHNXaXRoKFwiXS5odG1sXCIpXG4gICAgICApIHtcbiAgICAgICAgZmlsZSA9IHJlc3VsdDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yb3V0ZUZvcihmaWxlLCB0YXJnZXQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaW5nbGVQYWdlQXBwUm91dGVyIGV4dGVuZHMgRmlsZXN5c3RlbVJvdXRlciB7XG4gIGRlc3RpbmF0aW9uID0gXCJcIjtcblxuICBhc3luYyByZXNvbHZlKHBhdGhuYW1lOiBzdHJpbmcpOiBQcm9taXNlPFJvdXRlPiB7XG4gICAgY29uc3QgeyBwYWdlc1Jvb3Q6IGZzIH0gPSB0aGlzO1xuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucm91dGVGb3IoYXdhaXQgZnMubmF0aXZlRmlsZSh0aGlzLmRlc3RpbmF0aW9uKSwgXCIvXCIpO1xuICB9XG59XG5cbmV4cG9ydCBlbnVtIFJvdXRlclR5cGUge1xuICB1bmtub3duID0gXCJcIixcbiAgc3BhID0gXCJzcGFcIixcbiAgZmlsZXN5c3RlbSA9IFwiZmlsZXN5c3RlbVwiLFxufVxuIiwgImltcG9ydCBmcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcblxuZXhwb3J0IGNsYXNzIE5hdGl2ZUZTIHtcbiAgY29uc3RydWN0b3Iocm9vdDogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSkge1xuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gIH1cblxuICByb290OiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlO1xuICByZWxhdGl2ZVBhdGggPSBcIi9cIjtcbiAgaGFuZGxlQ2FjaGUgPSBuZXcgTWFwPFxuICAgIHN0cmluZyxcbiAgICBGaWxlU3lzdGVtRmlsZUhhbmRsZSB8IEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGVcbiAgPigpO1xuXG4gIGFzeW5jIG5hdGl2ZUZpbGUoX3BhdGg6IHN0cmluZyk6IEZpbGUge1xuICAgIGlmICh0aGlzLmhhbmRsZUNhY2hlLmhhcyhfcGF0aCkpIHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9IHRoaXMuaGFuZGxlQ2FjaGUuZ2V0KF9wYXRoKSBhcyBGaWxlU3lzdGVtRmlsZUhhbmRsZTtcbiAgICAgIHJldHVybiAoYXdhaXQgaGFuZGxlLmdldEZpbGUoKSkgYXMgRmlsZTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGUgPSBhd2FpdCB0aGlzLnJlc29sdmVGaWxlSGFuZGxlKF9wYXRoKTtcbiAgICBpZiAoaGFuZGxlKSB7XG4gICAgICB0aGlzLmhhbmRsZUNhY2hlLnNldChfcGF0aCwgaGFuZGxlKTtcbiAgICAgIHJldHVybiBhd2FpdCBoYW5kbGUuZ2V0RmlsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmaWxlSGFuZGxlRm9yKF9wYXRoOiBzdHJpbmcpOiBQcm9taXNlPEZpbGVTeXN0ZW1GaWxlSGFuZGxlPiB7XG4gICAgaWYgKHRoaXMuaGFuZGxlQ2FjaGUuaGFzKF9wYXRoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQ2FjaGUuZ2V0KF9wYXRoKSBhcyBGaWxlU3lzdGVtRmlsZUhhbmRsZTtcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGUgPSBhd2FpdCB0aGlzLnJlc29sdmVGaWxlSGFuZGxlKF9wYXRoKTtcbiAgICBpZiAoaGFuZGxlKSB7XG4gICAgICB0aGlzLmhhbmRsZUNhY2hlLnNldChfcGF0aCwgaGFuZGxlKTtcbiAgICAgIHJldHVybiBoYW5kbGUgYXMgRmlsZVN5c3RlbUZpbGVIYW5kbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGV4aXN0cyhfcGF0aDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlQ2FjaGUuaGFzKF9wYXRoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlID0gYXdhaXQgdGhpcy5yZXNvbHZlRmlsZUhhbmRsZShfcGF0aCk7XG4gICAgaWYgKGhhbmRsZSkge1xuICAgICAgdGhpcy5oYW5kbGVDYWNoZS5zZXQoX3BhdGgsIGhhbmRsZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVzb2x2ZUZpbGVIYW5kbGUoXG4gICAgX19wYXRoOiBzdHJpbmcsXG4gICAgZnJvbTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSA9IHRoaXMucm9vdFxuICApIHtcbiAgICBsZXQgX3BhdGggPSBfX3BhdGg7XG4gICAgaWYgKCFwYXRoLmlzQWJzb2x1dGUoX3BhdGgpIHx8ICFfcGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgX3BhdGggPSBwYXRoLmpvaW4oXCIvXCIsIF9wYXRoKTtcbiAgICB9XG5cbiAgICBfcGF0aCA9IHBhdGgubm9ybWFsaXplKF9wYXRoKTtcblxuICAgIGxldCBjb21wb25lbnQgPSBfcGF0aDtcbiAgICB3aGlsZSAoX3BhdGguaW5jbHVkZXMoXCIvXCIpICYmIF9wYXRoLmxlbmd0aCA+IDEgJiYgZnJvbSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgX3BhdGggPSBfcGF0aC5zdGFydHNXaXRoKFwiL1wiKSA/IF9wYXRoLnN1YnN0cmluZygxKSA6IF9wYXRoO1xuICAgICAgICBjb21wb25lbnQgPSBfcGF0aC5zdWJzdHJpbmcoMCwgX3BhdGguaW5kZXhPZihcIi9cIikpO1xuICAgICAgICBpZiAoX3BhdGgubGVuZ3RoIC0gY29tcG9uZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBfcGF0aCA9IF9wYXRoLnN1YnN0cmluZyhjb21wb25lbnQubGVuZ3RoKTtcbiAgICAgICAgICBpZiAoIV9wYXRoLmluY2x1ZGVzKFwiL1wiKSkge1xuICAgICAgICAgICAgbGV0IGhhc01hdGNoID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgYXdhaXQgKGxldCBmaWxlbmFtZSBvZiBmcm9tLmtleXMoKSkge1xuICAgICAgICAgICAgICBpZiAoZmlsZW5hbWUgPT09IF9wYXRoKSB7XG4gICAgICAgICAgICAgICAgaGFzTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaGFzTWF0Y2gpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZnJvbS5nZXRGaWxlSGFuZGxlKF9wYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnJvbSA9IGF3YWl0IGZyb20uZ2V0RGlyZWN0b3J5SGFuZGxlKGNvbXBvbmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGhhc01hdGNoID0gZmFsc2U7XG4gICAgICAgICAgZm9yIGF3YWl0IChsZXQgZmlsZW5hbWUgb2YgZnJvbS5rZXlzKCkpIHtcbiAgICAgICAgICAgIGlmIChmaWxlbmFtZSA9PT0gY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgIGhhc01hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFoYXNNYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGF3YWl0IGZyb20uZ2V0RmlsZUhhbmRsZShjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgLy8jaWZkZWYgVkVSQk9TRVxuICAgICAgICBjb25zb2xlLmVycm9yKF9fcGF0aCwgZXhjZXB0aW9uKTtcbiAgICAgICAgLy8jZW5kaWZcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJlc29sdmVEaXJlY3RvcnlIYW5kbGUoXG4gICAgX3BhdGg6IHN0cmluZyxcbiAgICBmcm9tOiBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlID0gdGhpcy5yb290XG4gICkge1xuICAgIGlmICghcGF0aC5pc0Fic29sdXRlKF9wYXRoKSB8fCAhX3BhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgIF9wYXRoID0gcGF0aC5qb2luKFwiL1wiLCBfcGF0aCk7XG4gICAgfVxuXG4gICAgX3BhdGggPSBwYXRoLm5vcm1hbGl6ZShfcGF0aCk7XG5cbiAgICBsZXQgY29tcG9uZW50ID0gX3BhdGg7XG4gICAgd2hpbGUgKF9wYXRoLmluY2x1ZGVzKFwiL1wiKSAmJiBfcGF0aC5sZW5ndGggPiAxICYmIGZyb20pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbXBvbmVudCA9IF9wYXRoLnN1YnN0cmluZygwLCBfcGF0aC5pbmRleE9mKFwiL1wiKSk7XG4gICAgICAgIGlmIChfcGF0aC5sZW5ndGggLSBjb21wb25lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIF9wYXRoID0gX3BhdGguc3Vic3RyaW5nKGNvbXBvbmVudC5sZW5ndGgpO1xuICAgICAgICAgIGZyb20gPSBhd2FpdCBmcm9tLmdldERpcmVjdG9yeUhhbmRsZShjb21wb25lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhd2FpdCBmcm9tLmdldERpcmVjdG9yeUhhbmRsZShjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgLy8jaWZkZWYgVkVSQk9TRVxuICAgICAgICBjb25zb2xlLmVycm9yKGV4Y2VwdGlvbik7XG4gICAgICAgIC8vI2VuZGlmXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgYXN5bmMgKnJlYWRkaXIoXG4gICAgX3BhdGg6IHN0cmluZ1xuICApOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8RmlsZVN5c3RlbUZpbGVIYW5kbGUgfCBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlPiB7XG4gICAgY29uc3QgZGlyID0gYXdhaXQgdGhpcy5yZXNvbHZlRGlyZWN0b3J5SGFuZGxlKF9wYXRoKTtcbiAgICBpZiAoIWRpcikgcmV0dXJuO1xuXG4gICAgeWllbGQqIGRpci52YWx1ZXMoKTtcbiAgfVxuXG4gIGFzeW5jIHJlYWRGaWxlKF9wYXRoOiBzdHJpbmcsIGVuY29kaW5nOiBcInV0ZjhcIiB8IFwiYmluYXJ5XCIgPSBcImJpbmFyeVwiKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSBcInV0ZjhcIjoge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkRmlsZVRleHQoX3BhdGgpO1xuICAgICAgfVxuXG4gICAgICBjYXNlIFwiYmluYXJ5XCI6IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZEZpbGVCaW5hcnkoX3BhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBhc3luYyByZWFkRmlsZUJpbmFyeShfcGF0aDogc3RyaW5nKSB7XG4gICAgY29uc3QgZmlsZSA9IGF3YWl0IHRoaXMubmF0aXZlRmlsZShfcGF0aCk7XG4gICAgcmV0dXJuIGF3YWl0IGZpbGUuYXJyYXlCdWZmZXIoKTtcbiAgfVxuICBhc3luYyByZWFkRmlsZVRleHQoX3BhdGg6IHN0cmluZykge1xuICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0aGlzLm5hdGl2ZUZpbGUoX3BhdGgpO1xuICAgIHJldHVybiBhd2FpdCBmaWxlLnRleHQoKTtcbiAgfVxuICBhc3luYyBjcmVhdGVSZWFkU3RyZWFtKF9wYXRoOiBzdHJpbmcpIHtcbiAgICBjb25zdCBmaWxlID0gYXdhaXQgdGhpcy5uYXRpdmVGaWxlKF9wYXRoKTtcbiAgICByZXR1cm4gZmlsZS5zdHJlYW0oKTtcbiAgfVxuICByZWFscGF0aChfcGF0aDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHBhdGgubm9ybWFsaXplKF9wYXRoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRlMocm9vdDogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSkge1xuICByZXR1cm4gbmV3IE5hdGl2ZUZTKHJvb3QpO1xufVxuIiwgImltcG9ydCAqIGFzIElEQiBmcm9tIFwiaWRiXCI7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBnZXRQYWNrYWdlSUQgfSBmcm9tIFwic3JjL19kZXZfL2dldFBhY2thZ2VJRFwiO1xuaW1wb3J0IHsgU3RvcmVkUGFja2FnZSwgU3RvcmVkUGFja2FnZVJlY29yZCB9IGZyb20gXCIuL1N0b3JlZFBhY2thZ2VcIjtcblxuZXhwb3J0IGNsYXNzIERhdGFiYXNlIHtcbiAgZGI6IElEQi5JREJQRGF0YWJhc2U7XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICBpZiAodGhpcy5kYikgcmV0dXJuO1xuICAgIHRoaXMuZGIgPSBhd2FpdCBJREIub3BlbkRCKFwiaGFuZGxlc1wiLCA3LCB7XG4gICAgICB1cGdyYWRlKGRhdGFiYXNlLCBvbGRWZXJzaW9uLCBuZXdWZXJzaW9uLCB0cmFuc2FjdGlvbikge1xuICAgICAgICBpZiAoIWRhdGFiYXNlLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoXCJwYWNrYWdlc1wiKSlcbiAgICAgICAgICBkYXRhYmFzZS5jcmVhdGVPYmplY3RTdG9yZShcInBhY2thZ2VzXCIpO1xuXG4gICAgICAgIGlmICghZGF0YWJhc2Uub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucyhcImRpcnNcIikpXG4gICAgICAgICAgZGF0YWJhc2UuY3JlYXRlT2JqZWN0U3RvcmUoXCJkaXJzXCIpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNhdmVQYWNrYWdlKHBrZzogU3RvcmVkUGFja2FnZSkge1xuICAgIGF3YWl0IHRoaXMubG9hZCgpO1xuICAgIGF3YWl0IHRoaXMuZGIucHV0KFwicGFja2FnZXNcIiwgcGtnLnRvUmVjb3JkKCksIHBrZy5pZCk7XG4gIH1cblxuICBhc3luYyBzYXZlRGlyKGRpcmVjdG9yeTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSkge1xuICAgIGF3YWl0IHRoaXMubG9hZCgpO1xuICAgIGF3YWl0IHRoaXMuZGIucHV0KFxuICAgICAgXCJkaXJzXCIsXG4gICAgICB7IGRpcmVjdG9yeSwgaWQ6IGdldFBhY2thZ2VJRCgpIH0sXG4gICAgICBnZXRQYWNrYWdlSUQoKVxuICAgICk7XG4gIH1cblxuICBhc3luYyBsb2FkRGlyKCk6IFByb21pc2U8RmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZT4ge1xuICAgIGF3YWl0IHRoaXMubG9hZCgpO1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5kYi5nZXQoXCJkaXJzXCIsIGdldFBhY2thZ2VJRCgpKSk/LmRpcmVjdG9yeSB8fCBudWxsO1xuICB9XG5cbiAgYXN5bmMgbG9hZFBhY2thZ2UoaWQ6IHN0cmluZykge1xuICAgIGF3YWl0IHRoaXMubG9hZCgpO1xuXG4gICAgY29uc3QgcmVjID0gKGF3YWl0IHRoaXMuZGIuZ2V0KFwicGFja2FnZXNcIiwgaWQpKSBhcyBTdG9yZWRQYWNrYWdlUmVjb3JkO1xuICAgIGlmICghcmVjKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RvcmVkUGFja2FnZS5mcm9tUmVjb3JkKHJlYyk7XG4gIH1cbn1cbiIsICJpbXBvcnQgdHlwZSB7IE1lc3NhZ2UgfSBmcm9tIFwiZXNidWlsZFwiO1xuZXhwb3J0IGVudW0gTWV0aG9kIHtcbiAgYnVuZGxlLFxuICBvdXRwdXQsXG4gIGJ1bmRsZUJ5SWQsXG4gIHNldFBvcnQsXG59XG5cbmV4cG9ydCB0eXBlIEJ1bmRsZVBhcmFtcyA9IHtcbiAgb3JpZ2luOiBzdHJpbmc7XG4gIGhhbmRsZTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZTtcbn07XG5cbmV4cG9ydCB0eXBlIEJ1bmRsZUJ5SURQYXJhbXMgPSB7XG4gIG9yaWdpbjogc3RyaW5nO1xuICBpZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgT3V0cHV0UGFyYW1zID0ge1xuICB3YXJuaW5nczogTWVzc2FnZVtdO1xuICBlbnRyeVBvaW50czogc3RyaW5nW107XG4gIGh0bWw6IHN0cmluZztcbn07XG4iLCAiaW1wb3J0ICogYXMgSURCIGZyb20gXCJpZGJcIjtcbmltcG9ydCB7IE91dHB1dFBhcmFtcywgTWV0aG9kIH0gZnJvbSBcInNyYy9saWIvcnBjXCI7XG5pbXBvcnQgV09SS0VSX1VSTCBmcm9tIFwiZGlzdC9fZGV2Xy93b3JrZXIuanN1cmxcIjtcblxuZXhwb3J0IGNsYXNzIFBhY2thZ2VyIHtcbiAgcG9ydDogTWVzc2FnZVBvcnQ7XG5cbiAgc3RhcnQoKSB7XG4gICAgY29uc3Qgd29ya2VyID0gbmV3IFNoYXJlZFdvcmtlcihXT1JLRVJfVVJMLCB7IHR5cGU6IFwibW9kdWxlXCIgfSk7XG4gICAgd29ya2VyLnBvcnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5fb25NZXNzYWdlKTtcbiAgICB3b3JrZXIucG9ydC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgKG1lc3NhZ2UpID0+XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UuZXJyb3IpXG4gICAgKTtcblxuICAgIHRoaXMucG9ydCA9IHdvcmtlci5wb3J0O1xuICAgIHdvcmtlci5wb3J0LnN0YXJ0KCk7XG4gIH1cblxuICBvbkJ1bmRsZUNvbXBsZXRlOiAocGFyYW1zOiBPdXRwdXRQYXJhbXMpID0+IHZvaWQ7XG5cbiAgX29uTWVzc2FnZSA9IChldmVudDogTWVzc2FnZUV2ZW50KSA9PiB7XG4gICAgc3dpdGNoIChldmVudC5kYXRhLm1ldGhvZCBhcyBNZXRob2QpIHtcbiAgICAgIGNhc2UgTWV0aG9kLm91dHB1dDoge1xuICAgICAgICB0aGlzLm9uQnVuZGxlQ29tcGxldGUoZXZlbnQuZGF0YS5wYXJhbXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBcIlVua25vd24gbWVzc2FnZSBmcm9tIHdvcmtlci5cIjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgYnVuZGxlQnlJZChpZDogc3RyaW5nLCBvcmlnaW46IHN0cmluZykge1xuICAgIHRoaXMucG9ydC5wb3N0TWVzc2FnZSh7XG4gICAgICBtZXRob2Q6IE1ldGhvZC5idW5kbGVCeUlkLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG9yaWdpbixcbiAgICAgICAgaWQsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgYnVuZGxlKGhhbmRsZTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSwgb3JpZ2luOiBzdHJpbmcpIHtcbiAgICB0aGlzLnBvcnQucG9zdE1lc3NhZ2Uoe1xuICAgICAgbWV0aG9kOiBNZXRob2QuYnVuZGxlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICBvcmlnaW46IG9yaWdpbixcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gXCJzcmMvbGliL0RhdGFiYXNlXCI7XG5pbXBvcnQgeyBFU0J1aWxkUGFja2FnZSB9IGZyb20gXCJzcmMvbGliL0VTQnVpbGRQYWNrYWdlXCI7XG5pbXBvcnQgeyBQYWNrYWdlciB9IGZyb20gXCJzcmMvbGliL1BhY2thZ2VyXCI7XG5pbXBvcnQgeyBTdG9yZWRQYWNrYWdlIH0gZnJvbSBcInNyYy9saWIvU3RvcmVkUGFja2FnZVwiO1xuaW1wb3J0IHsgZ2V0UGFja2FnZUlEIH0gZnJvbSBcInNyYy9fZGV2Xy9nZXRQYWNrYWdlSURcIjtcblxuZXhwb3J0IGNsYXNzIEluaXRpYWxQYWNrYWdlciBleHRlbmRzIFBhY2thZ2VyIHtcbiAgZGF0YWJhc2UgPSBuZXcgRGF0YWJhc2UoKTtcblxuICBhc3luYyBsb2FkU3RvcmVkUGFja2FnZSgpIHtcbiAgICBhd2FpdCB0aGlzLmRhdGFiYXNlLmxvYWQoKTtcbiAgICBjb25zdCBwa2cgPSBhd2FpdCB0aGlzLmRhdGFiYXNlLmxvYWRQYWNrYWdlKGdldFBhY2thZ2VJRCgpKTtcbiAgICBpZiAoIXBrZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHN0b3JlZFBhY2thZ2U6IFN0b3JlZFBhY2thZ2U7XG5cbiAgYXN5bmMgdmVyaWZ5KGhhbmRsZTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBHZWFySWNvbihwcm9wczogUmVhY3QuU1ZHUHJvcHM8U1ZHU1ZHRWxlbWVudD4pIHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgNjQgNjRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgey4uLnByb3BzfT5cbiAgICAgIDxwYXRoXG4gICAgICAgIGQ9XCJNNTcuMjg0IDM0LjIyOGwtMy45ODggMS4xNGMtLjM2LjEwNS0uNjMyLjQwNC0uNzAyLjc3M2EyMC43MiAyMC43MiAwIDAxLS43MDEgMi41OTkgMSAxIDAgMDAuMjIxIDEuMDIybDIuODg4IDIuOTg0Yy4zMS4zMjEuMzcuODEuMTQ4IDEuMTk3bC0xLjI0NSAyLjE1NmExIDEgMCAwMS0xLjExLjQ3bC00LjA1LTEuMDE0YTEgMSAwIDAwLS45OTUuMzE4IDIxLjIwNyAyMS4yMDcgMCAwMS0xLjg4NiAxLjg5MSAxIDEgMCAwMC0uMzE4Ljk5NGwxLjAxMyA0LjA0N2ExIDEgMCAwMS0uNDcgMS4xMWwtMi4xNTcgMS4yNDVhMSAxIDAgMDEtMS4xOTYtLjE0OGwtMy0yLjkwMWExIDEgMCAwMC0xLjAyMS0uMjIzYy0uODQ1LjI5LTEuNzA3LjUyNC0yLjU4Mi43MDMtLjM2OC4wNy0uNjY2LjM0MS0uNzcyLjcwMWwtMS4xNDMgNC4wMDNjLS4xMjMuNDMtLjUxNi43MjYtLjk2My43MjZoLTIuNDljLS40NDcgMC0uODQtLjI5Ni0uOTYyLS43MjZsLTEuMTQzLTQuMDAyYTEuMDAxIDEuMDAxIDAgMDAtLjc3NC0uNzAyIDIwLjc2NCAyMC43NjQgMCAwMS0yLjU4Ny0uNjk2IDEgMSAwIDAwLTEuMDIuMjIybC0yLjk5NCAyLjg5NmExIDEgMCAwMS0xLjE5Ni4xNDdsLTIuMTU3LTEuMjQ1YTEuMDAxIDEuMDAxIDAgMDEtLjQ3LTEuMTFsMS4wMTUtNC4wNTJjLjA5LS4zNjYtLjAzMy0uNzUtLjMxOC0uOTk2YTIxLjE0MyAyMS4xNDMgMCAwMS0xLjg5NC0xLjg4NCAxIDEgMCAwMC0uOTk0LS4zMTZsLTQuMDQ0IDEuMDEzYTEuMDAxIDEuMDAxIDAgMDEtMS4xMS0uNDdsLTEuMjQ2LTIuMTU3YTEuMDAxIDEuMDAxIDAgMDEuMTQ4LTEuMTk3bDIuODkzLTIuOTlhMSAxIDAgMDAuMjIyLTEuMDIzIDIwLjc3NCAyMC43NzQgMCAwMS0uNzA3LTIuNTkyIDEuMDAxIDEuMDAxIDAgMDAtLjcwMi0uNzcybC0zLjk4OS0xLjE0YTEgMSAwIDAxLS43MjYtLjk2M3YtMi40OWExIDEgMCAwMS43MjYtLjk2M2wzLjk4OS0xLjE0Yy4zNi0uMTA1LjYzMS0uNDA0LjcwMi0uNzczLjE3Ny0uODguNDExLTEuNzQ5LjcwMS0yLjU5OWExIDEgMCAwMC0uMjIyLTEuMDIyTDkuMDIgMjEuMjk2Yy0uMzExLS4zMjItLjM3MS0uODEtLjE0OC0xLjE5N2wxLjI0NS0yLjE1NmExLjAwMSAxLjAwMSAwIDAxMS4xMS0uNDdsNC4wNSAxLjAxNGExIDEgMCAwMC45OTUtLjMxOCAyMS4xOSAyMS4xOSAwIDAxMS44ODYtMS44OTEgMSAxIDAgMDAuMzE4LS45OTRsLTEuMDE0LTQuMDQ3YTEgMSAwIDAxLjQ3LTEuMTFsMi4xNTctMS4yNDVhMS4wMDEgMS4wMDEgMCAwMTEuMTk2LjE0OGwzIDIuOTAyYTEgMSAwIDAwMS4wMjIuMjIyYy44NDQtLjI5IDEuNzA2LS41MjQgMi41OC0uNzAzLjM3LS4wNy42NjctLjM0MS43NzMtLjcwMWwxLjE0My00LjAwM2MuMTIzLS40My41MTYtLjcyNi45NjMtLjcyNmgyLjQ5Yy40NDcgMCAuODQuMjk3Ljk2Mi43MjZsMS4xNDQgNC4wMDJjLjEwNS4zNi40MDQuNjMyLjc3My43MDIuODc3LjE3NiAxLjc0LjQwOSAyLjU4Ny42OTZhMSAxIDAgMDAxLjAyMS0uMjIybDIuOTkzLTIuODk1YTEgMSAwIDAxMS4xOTctLjE0OGwyLjE1NiAxLjI0NWExIDEgMCAwMS40NyAxLjExbC0xLjAxNCA0LjA1MmExIDEgMCAwMC4zMTguOTk2Yy42Ny41ODcgMS4zMDMgMS4yMTYgMS44OTQgMS44ODRhMSAxIDAgMDAuOTkzLjMxNmw0LjA0NS0xLjAxMmExIDEgMCAwMTEuMTEuNDdsMS4yNDQgMi4xNTZhMSAxIDAgMDEtLjE0NyAxLjE5N2wtMi44OTMgMi45OWExIDEgMCAwMC0uMjIyIDEuMDIzYy4yOTEuODQ4LjUyNyAxLjcxNC43MDcgMi41OTIuMDcuMzY5LjM0MS42NjcuNzAxLjc3M2wzLjk5IDEuMTRhMSAxIDAgMDEuNzI1Ljk2MnYyLjQ5YTEgMSAwIDAxLS43MjUuOTYyek0yMi42NDIgMTkuNzk1YS41MDYuNTA2IDAgMDAtLjc1My0uMTQ0Yy02LjgzMiA1LjU2My03Ljg2IDE1LjYxMi0yLjI5NiAyMi40NDQuNjg2Ljg0MSAxLjQ1NSAxLjYxIDIuMjk2IDIuMjk2YS41MDYuNTA2IDAgMDAuNzUzLS4xNDVsNS43Ni05Ljk3NmE0LjUgNC41IDAgMDAwLTQuNXptOS4zNjgtMy43NzVhMTUuOTU5IDE1Ljk1OSAwIDAwLTUuNjY2IDEuMDMzLjUwMy41MDMgMCAwMC0uMjUuNzIxbDUuNzcxIDkuOTk2YTQuNSA0LjUgMCAwMDMuODk4IDIuMjVoMTEuNTI1YS41MDYuNTA2IDAgMDAuNTAyLS41OCAxNS45OTMgMTUuOTkzIDAgMDAtMTUuNzgtMTMuNDJ6bTE1LjI3OCAxOEgzNS43NjNhNC41IDQuNSAwIDAwLTMuODk3IDIuMjVsLTUuNzcxIDkuOTk2YS41MDMuNTAzIDAgMDAuMjUuNzIxYzguMjY0IDMuMTI0IDE3LjQ5Ni0xLjA0MyAyMC42Mi05LjMwOC4zNzctLjk5Ni42NTMtMi4wMjguODI1LTMuMDc5YS41MDYuNTA2IDAgMDAtLjUwMi0uNTh6XCJcbiAgICAgICAgZmlsbFJ1bGU9XCJldmVub2RkXCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59XG4iLCAiaW1wb3J0IHsgUGFja2FnZUpTT05GaWxlIH0gZnJvbSBcInNyYy9saWIvUGFja2FnZUpTT05cIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFwiLi9QYWNrYWdlSlNPTkVkaXRvci5jc3NcIjtcbmltcG9ydCB7IFJvdXRlclR5cGUgfSBmcm9tIFwic3JjL2xpYi9Sb3V0ZVwiO1xuaW1wb3J0IHsgUG9ydGFsIH0gZnJvbSBcInJlYWN0LXBvcnRhbFwiO1xuaW1wb3J0IHsgRm9sZGVyIH0gZnJvbSBcInNyYy9pY29ucy9Gb2xkZXJcIjtcblxuZXhwb3J0IGVudW0gUHJvcGVydHlCaW5kaW5nVHlwZSB7XG4gIHJvdXRlcixcbn1cblxuY29uc3QgUXVvdGVMaXRlcmFsID0gKHt9KSA9PiAoXG4gIDxzcGFuIGNsYXNzTmFtZT1cIkNvZGVCb3gtdG9rZW4gQ29kZUJveC10b2tlbi0tUXVvdGVcIj5cIjwvc3Bhbj5cbik7XG5jb25zdCBQcm9wZXJ0eU5hbWUgPSAoeyBjaGlsZHJlbiB9KSA9PiAoXG4gIDxzcGFuIGNsYXNzTmFtZT1cIkNvZGVCb3gtdG9rZW4gQ29kZUJveC10b2tlbi0tUHJvcGVydHlOYW1lXCI+e2NoaWxkcmVufTwvc3Bhbj5cbik7XG5cbmNvbnN0IFN0cmluZ0tleSA9ICh7IG5hbWUgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cIlN0cmluZ0tleVwiPlxuICAgIDxRdW90ZUxpdGVyYWwgLz5cbiAgICA8UHJvcGVydHlOYW1lPntgJHtuYW1lfWB9PC9Qcm9wZXJ0eU5hbWU+XG4gICAgPFF1b3RlTGl0ZXJhbCAvPlxuICAgIDxDb2xvbiAvPlxuICA8L2Rpdj5cbik7XG5cbmNvbnN0IENvbG9uID0gKHt9KSA9PiAoXG4gIDxzcGFuIGNsYXNzTmFtZT1cIkNvZGVCb3gtdG9rZW4gQ29kZUJveC10b2tlbi0tQ29sb25cIj46PC9zcGFuPlxuKTtcblxuY29uc3QgT3BlbmluZ0JyYWNlID0gKHt9KSA9PiAoXG4gIDxzcGFuIGNsYXNzTmFtZT1cIkNvZGVCb3gtdG9rZW4gQ29kZUJveC10b2tlbi0tT3BlbmluZ0JyYWNlXCI+e1wie1wifTwvc3Bhbj5cbik7XG5cbmNvbnN0IENsb3NpbmdCcmFjZSA9ICh7fSkgPT4gKFxuICA8c3BhbiBjbGFzc05hbWU9XCJDb2RlQm94LXRva2VuIENvZGVCb3gtdG9rZW4tLUNsb3NpbmdCcmFjZVwiPntcIn1cIn08L3NwYW4+XG4pO1xuXG5jb25zdCBBdXRvQ29tcGxldGVyID0gUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICBjb25zdCBfcmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiBfcmVmKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBfcmVmLmN1cnJlbnQuaW5uZXJUZXh0ID0gcHJvcHMuZGVmYXVsdFZhbHVlIHx8IFwiXCI7XG4gIH0sIFtfcmVmLCBwcm9wcy5kZWZhdWx0VmFsdWVdKTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdlxuICAgICAgICByZWY9e19yZWZ9XG4gICAgICAgIGNvbnRlbnRFZGl0YWJsZVxuICAgICAgICBkYXRhLWZvY3VzYWJsZVxuICAgICAgICBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcbiAgICAgICAgY2xhc3NOYW1lPVwiQXV0b0NvbXBsZXRlUHJvcGVydHlWYWx1ZVwiXG4gICAgICA+PC9kaXY+XG4gICAgPC8+XG4gICk7XG59KTtcblxuY29uc3QgQXV0b2NvbXBsZXRlTGlzdEl0ZW0gPSAoeyBpY29uLCBsYWJlbCwgdmFsdWUsIHNlbGVjdGVkTGVuZ3RoIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIkF1dG9jb21wbGV0ZUxpc3RJdGVtXCIgZGF0YS12YWx1ZT17dmFsdWV9PlxuICAgICAge2ljb259XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIkF1dG9jb21wbGV0ZUxpc3RJdGVtLWxhYmVsXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIkF1dG9jb21wbGV0ZUxpc3RJdGVtLWhpZ2hsaWdodFwiPlxuICAgICAgICAgIHtsYWJlbC5zdWJzdHJpbmcoMCwgc2VsZWN0ZWRMZW5ndGgpfVxuICAgICAgICA8L3NwYW4+XG5cbiAgICAgICAge2xhYmVsLnN1YnN0cmluZyhzZWxlY3RlZExlbmd0aCl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEhUTUxJY29uID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDY0MCA1MTJcIiB7Li4ucHJvcHN9PlxuICAgICAgPHBhdGhcbiAgICAgICAgZmlsbD1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgIGQ9XCJNMjc4LjkgNTExLjVsLTYxLTE3LjdjLTYuNC0xLjgtMTAtOC41LTguMi0xNC45TDM0Ni4yIDguN2MxLjgtNi40IDguNS0xMCAxNC45LTguMmw2MSAxNy43YzYuNCAxLjggMTAgOC41IDguMiAxNC45TDI5My44IDUwMy4zYy0xLjkgNi40LTguNSAxMC4xLTE0LjkgOC4yem0tMTE0LTExMi4ybDQzLjUtNDYuNGM0LjYtNC45IDQuMy0xMi43LS44LTE3LjJMMTE3IDI1Nmw5MC42LTc5LjdjNS4xLTQuNSA1LjUtMTIuMy44LTE3LjJsLTQzLjUtNDYuNGMtNC41LTQuOC0xMi4xLTUuMS0xNy0uNUwzLjggMjQ3LjJjLTUuMSA0LjctNS4xIDEyLjggMCAxNy41bDE0NC4xIDEzNS4xYzQuOSA0LjYgMTIuNSA0LjQgMTctLjV6bTMyNy4yLjZsMTQ0LjEtMTM1LjFjNS4xLTQuNyA1LjEtMTIuOCAwLTE3LjVMNDkyLjEgMTEyLjFjLTQuOC00LjUtMTIuNC00LjMtMTcgLjVMNDMxLjYgMTU5Yy00LjYgNC45LTQuMyAxMi43LjggMTcuMkw1MjMgMjU2bC05MC42IDc5LjdjLTUuMSA0LjUtNS41IDEyLjMtLjggMTcuMmw0My41IDQ2LjRjNC41IDQuOSAxMi4xIDUuMSAxNyAuNnpcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn07XG5cbmNvbnN0IGh0bWxJY29uID0gPEhUTUxJY29uIHdpZHRoPXsxOH0gLz47XG5jb25zdCBmb2xkZXJJY29uID0gPEZvbGRlciB3aWR0aD17MTh9IC8+O1xuXG5jb25zdCBCQU5ORURfRElSX05BTUVTID0gW1xuICBcIm5vZGVfbW9kdWxlc1wiLFxuICBcImJvd2VyX2NvbXBvbmVudHNcIixcbiAgXCJ0ZXN0XCIsXG4gIFwic3BlY1wiLFxuICBcIl9fdGVzdF9fXCIsXG4gIFwiX19zcGVjX19cIixcbiAgXCJ2ZW5kb3JcIixcbl07XG5cbmNvbnN0IHJvdXRlVHVwbGUgPSBbbnVsbCwgXCJcIl07XG5hc3luYyBmdW5jdGlvbiogd2Fsa1JvdXRlRmlsZXMoXG4gIGhhbmRsZTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZSxcbiAgcGFyZW50TmFtZTogc3RyaW5nLFxuICBpc1Jvb3Q6IGJvb2xlYW4gPSB0cnVlXG4pIHtcbiAgY29uc3QgcmVsYXRpdmVOYW1lID0gaXNSb290XG4gICAgPyBcIlwiXG4gICAgOiBwYXJlbnROYW1lLmxlbmd0aFxuICAgID8gYCR7cGFyZW50TmFtZX0vJHtoYW5kbGUubmFtZX1gXG4gICAgOiBoYW5kbGUubmFtZTtcblxuICBmb3IgYXdhaXQgKGxldCBfZW50cnkgb2YgaGFuZGxlLnZhbHVlcygpKSB7XG4gICAgY29uc3QgZW50cnkgPSBfZW50cnkgYXMgRmlsZVN5c3RlbUZpbGVIYW5kbGUgfCBGaWxlU3lzdGVtRGlyZWN0b3J5SGFuZGxlO1xuICAgIGlmIChlbnRyeS5uYW1lLnN0YXJ0c1dpdGgoXCIuXCIpKSBjb250aW51ZTtcblxuICAgIHN3aXRjaCAoZW50cnkua2luZCkge1xuICAgICAgY2FzZSBcImZpbGVcIjoge1xuICAgICAgICBpZiAoZW50cnkubmFtZS5lbmRzV2l0aChcIi5odG1sXCIpKSB7XG4gICAgICAgICAgcm91dGVUdXBsZVsxXSA9IGAke3JlbGF0aXZlTmFtZX0vJHtlbnRyeS5uYW1lfWA7XG4gICAgICAgICAgcm91dGVUdXBsZVswXSA9IGVudHJ5O1xuICAgICAgICAgIHlpZWxkIHJvdXRlVHVwbGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGNhc2UgXCJkaXJlY3RvcnlcIjoge1xuICAgICAgICBpZiAoIUJBTk5FRF9ESVJfTkFNRVMuaW5jbHVkZXMoZW50cnkubmFtZSkpIHtcbiAgICAgICAgICByb3V0ZVR1cGxlWzFdID0gYCR7cmVsYXRpdmVOYW1lfS8ke2VudHJ5Lm5hbWV9L2A7XG4gICAgICAgICAgcm91dGVUdXBsZVswXSA9IGVudHJ5O1xuICAgICAgICAgIHlpZWxkKiBhd2FpdCB3YWxrUm91dGVGaWxlcyhcbiAgICAgICAgICAgIGVudHJ5IGFzIEZpbGVTeXN0ZW1EaXJlY3RvcnlIYW5kbGUsXG4gICAgICAgICAgICByZWxhdGl2ZU5hbWUsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcm91dGVUdXBsZVsxXSA9IHJlbGF0aXZlTmFtZSB8fCBcIi9cIjtcbiAgaWYgKCFyb3V0ZVR1cGxlWzFdLmVuZHNXaXRoKFwiL1wiKSkgcm91dGVUdXBsZVsxXSArPSBcIi9cIjtcbiAgcm91dGVUdXBsZVswXSA9IGhhbmRsZTtcbiAgeWllbGQgcm91dGVUdXBsZTtcbn1cblxudHlwZSBVc2FibGVSb3V0ZSA9IHtcbiAgaWNvbjogUmVhY3QuUmVhY3RFbGVtZW50O1xuICBsYWJlbDogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xuICBoYW5kbGU6IEZpbGVTeXN0ZW1IYW5kbGU7XG4gIGtleTogc3RyaW5nO1xuICBzZWxlY3RlZExlbmd0aDogbnVtYmVyO1xufTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJvdXRlRmlsZXNGb3JIYW5kbGUoXG4gIGhhbmRsZTogRmlsZVN5c3RlbURpcmVjdG9yeUhhbmRsZVxuKSB7XG4gIGNvbnN0IGhhbmRsZXM6IFVzYWJsZVJvdXRlW10gPSBbXTtcblxuICBmb3IgYXdhaXQgKGxldCBbcm91dGUsIHZhbHVlXSBvZiB3YWxrUm91dGVGaWxlcyhoYW5kbGUsIFwiXCIpKSB7XG4gICAgaGFuZGxlcy5wdXNoKHtcbiAgICAgIGhhbmRsZTogcm91dGUgYXMgRmlsZVN5c3RlbUhhbmRsZSxcbiAgICAgIGxhYmVsOiB2YWx1ZSBhcyBzdHJpbmcsXG4gICAgICB2YWx1ZTogdmFsdWUgYXMgc3RyaW5nLFxuICAgICAga2V5OiB2YWx1ZSBhcyBzdHJpbmcsXG4gICAgICBzZWxlY3RlZExlbmd0aDogMCxcbiAgICAgIGljb246IHJvdXRlLmtpbmQgPT09IFwiZmlsZVwiID8gaHRtbEljb24gOiBmb2xkZXJJY29uLFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZXM7XG59XG5cbmZ1bmN0aW9uIHZpZXdTb3J0ZXIoeyBwcm9wczogYVByb3BzIH0sIHsgcHJvcHM6IGJQcm9wcyB9KSB7XG4gIHJldHVybiBhUHJvcHMubGFiZWwgPT09IGJQcm9wcy5sYWJlbFxuICAgID8gMFxuICAgIDogYVByb3BzLmxhYmVsID4gYlByb3BzLmxhYmVsXG4gICAgPyAxXG4gICAgOiAtMTtcbn1cblxuY29uc3QgQXV0b0NvbXBsZXRlQm94ID0gUmVhY3QuZm9yd2FyZFJlZihcbiAgKHsgZWRpdFJlZiwgdmFsdWVzLCBxdWVyeSA9IFwiXCIgfSwgcmVmKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gUmVhY3QudXNlUmVmPEhUTUxEaXZFbGVtZW50PigpO1xuICAgIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiBjb250YWluZXIuY3VycmVudCk7XG5cbiAgICBsZXQgdmlld3M6IEFycmF5PFJlYWN0LlJlYWN0RWxlbWVudD47XG5cbiAgICBpZiAoIXF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgY29uc3QgY291bnQgPSBNYXRoLm1pbih2YWx1ZXMubGVuZ3RoLCAxNCk7XG4gICAgICB2aWV3cyA9IG5ldyBBcnJheSh2YWx1ZXMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlc1tpXS5zZWxlY3RlZExlbmd0aCA9IDA7XG4gICAgICAgIHZpZXdzW2ldID0gUmVhY3QuY3JlYXRlRWxlbWVudChBdXRvY29tcGxldGVMaXN0SXRlbSwgdmFsdWVzW2ldKTtcbiAgICAgIH1cbiAgICAgIHZpZXdzLnNvcnQodmlld1NvcnRlcik7XG4gICAgICBpZiAodmlld3MubGVuZ3RoID4gY291bnQpIHtcbiAgICAgICAgdmlld3MubGVuZ3RoID0gY291bnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkTGVuZ3RoID0gcXVlcnkubGVuZ3RoO1xuXG4gICAgICBjb25zdCBjb3VudCA9IE1hdGgubWluKHZhbHVlcy5sZW5ndGgsIDE0KTtcblxuICAgICAgLy8gVE9ETzogdXNlIHF1aWNrc2VsZWN0IGluc3RlYWQgb2Ygc29ydFxuICAgICAgdmlld3MgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh2YWx1ZXNbaV0ubGFiZWwuc3RhcnRzV2l0aChxdWVyeSkpIHtcbiAgICAgICAgICB2YWx1ZXNbaV0uc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZExlbmd0aDtcbiAgICAgICAgICB2aWV3cy5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXV0b2NvbXBsZXRlTGlzdEl0ZW0sIHZhbHVlc1tpXSkpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHF1ZXJ5LnN0YXJ0c1dpdGgoXCIvXCIpICYmXG4gICAgICAgICAgIXZhbHVlc1tpXS5sYWJlbC5zdGFydHNXaXRoKFwiL1wiKSAmJlxuICAgICAgICAgIHZhbHVlc1tpXS5sYWJlbC5zdGFydHNXaXRoKHF1ZXJ5LnN1YnN0cmluZygxKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFsdWVzW2ldLnNlbGVjdGVkTGVuZ3RoID0gc2VsZWN0ZWRMZW5ndGggLSAxO1xuICAgICAgICAgIHZpZXdzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChBdXRvY29tcGxldGVMaXN0SXRlbSwgdmFsdWVzW2ldKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZpZXdzLnNvcnQodmlld1NvcnRlcik7XG4gICAgICBpZiAodmlld3MubGVuZ3RoID4gY291bnQpIHtcbiAgICAgICAgdmlld3MubGVuZ3RoID0gY291bnQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgcmVmPXtjb250YWluZXJ9IGNsYXNzTmFtZT1cIkF1dG9Db21wbGV0ZUJveFwiPlxuICAgICAgICB7dmlld3N9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG4pO1xuXG5mdW5jdGlvbiBzZXRDYXJldFRvRW5kKHRhcmdldDogSFRNTERpdkVsZW1lbnQpIHtcbiAgY29uc3QgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICBjb25zdCBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgcmFuZ2Uuc2V0U3RhcnQodGFyZ2V0LCAwKTtcbiAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcbiAgdGFyZ2V0LmZvY3VzKCk7XG4gIHJhbmdlLmRldGFjaCgpOyAvLyBvcHRpbWl6YXRpb25cblxuICAvLyBzZXQgc2Nyb2xsIHRvIHRoZSBlbmQgaWYgbXVsdGlsaW5lXG4gIHRhcmdldC5zY3JvbGxUb3AgPSB0YXJnZXQuc2Nyb2xsSGVpZ2h0O1xufVxuXG5mdW5jdGlvbiBibHVyKGNvbnRlbnQ6IEhUTUxEaXZFbGVtZW50KSB7XG4gIGNvbnRlbnQuYmx1cigpO1xuICBjb250ZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiYmx1clwiLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xufVxuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZEluZGV4KGNvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQsIGluZGV4OiBudW1iZXIsIHJlZikge1xuICByZWYuY3VycmVudCA9IGluZGV4O1xuICBjb25zdCBub2RlID0gY29udGFpbmVyLmNoaWxkTm9kZXMuaXRlbShpbmRleCk7XG4gIGxldCBzZWxlY3RlZCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtc2VsZWN0ZWRdXCIpO1xuICBpZiAoc2VsZWN0ZWQgIT09IG5vZGUgJiYgc2VsZWN0ZWQpIHtcbiAgICBzZWxlY3RlZC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXNlbGVjdGVkXCIpO1xuICB9IGVsc2UgaWYgKHNlbGVjdGVkID09PSBub2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgKG5vZGUgYXMgSFRNTERpdkVsZW1lbnQpLnNldEF0dHJpYnV0ZShcImRhdGEtc2VsZWN0ZWRcIiwgXCJ0cnVlXCIpO1xufVxuXG5jb25zdCBBdXRvQ29tcGxldGVQcm9wZXJ0eVZhbHVlID0gKHsgdmFsdWVzLCBvbkNoYW5nZSwgZGVmYXVsdFZhbHVlIH0pID0+IHtcbiAgY29uc3QgW2hhc0ZvY3VzLCBzZXRIYXNGb2N1c10gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtyb3V0ZSwgc2V0Um91dGVdID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFZhbHVlKTtcbiAgY29uc3QgZWRpdFJlZiA9IFJlYWN0LnVzZVJlZjxIVE1MRGl2RWxlbWVudD4oKTtcbiAgY29uc3QgYm94UmVmID0gUmVhY3QudXNlUmVmPEhUTUxFbGVtZW50PigpO1xuICBjb25zdCBzZWxlY3RlZEluZGV4ID0gUmVhY3QudXNlUmVmPG51bWJlcj4oMCk7XG5cbiAgY29uc3QgY3VycmVudFZhbHVlID0gUmVhY3QudXNlUmVmPHN0cmluZz4oZGVmYXVsdFZhbHVlKTtcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGJlY29tZUZvY3VzID0gKCkgPT4gc2V0SGFzRm9jdXModHJ1ZSk7XG4gICAgY29uc3QgcmVzaWduRm9jdXMgPSAoKSA9PiB7XG4gICAgICBjb25zb2xlLnRyYWNlKFwidFwiKTtcbiAgICAgIGlmICghZG9jdW1lbnQuYWN0aXZlRWxlbWVudD8uaGFzQXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpKSB7XG4gICAgICAgIHNldEhhc0ZvY3VzKGZhbHNlKTtcbiAgICAgICAgb25DaGFuZ2UoY3VycmVudFZhbHVlLmN1cnJlbnQpO1xuICAgICAgICBpZiAoYm94UmVmPy5jdXJyZW50KSB7XG4gICAgICAgICAgYm94UmVmLmN1cnJlbnQuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gY2hlY2tDbGlja091dHNpZGUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSByZXR1cm47XG5cbiAgICAgIHNldEhhc0ZvY3VzKGZhbHNlKTtcblxuICAgICAgLy8gaWYgKCFlbC5jbG9zZXN0KFwiLkF1dG9Db21wbGV0ZUJveFwiKSAmJiAhZWwuY2xvc2VzdChcIltjb250ZW50ZWRpdGFibGVdXCIpKSB7XG4gICAgICAvLyAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlZGl0UmVmPy5jdXJyZW50KSB7XG4gICAgICAvLyAgICAgZWRpdFJlZj8uY3VycmVudD8uYmx1cigpO1xuICAgICAgLy8gICB9XG4gICAgICAvLyAgIHJlc2lnbkZvY3VzKCk7XG4gICAgICAvLyB9XG4gICAgfVxuICAgIGVkaXRSZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBiZWNvbWVGb2N1cyk7XG4gICAgZWRpdFJlZi5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCByZXNpZ25Gb2N1cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGVkaXRSZWYuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBiZWNvbWVGb2N1cyk7XG4gICAgICBlZGl0UmVmLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIHJlc2lnbkZvY3VzKTtcbiAgICB9O1xuICB9LCBbZWRpdFJlZiwgc2V0SGFzRm9jdXMsIGJveFJlZiwgb25DaGFuZ2UsIGN1cnJlbnRWYWx1ZV0pO1xuICBjb25zdCBmcmFtZVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJveFJlZi5jdXJyZW50KSBzZXRTZWxlY3RlZEluZGV4KGJveFJlZi5jdXJyZW50LCAwLCBzZWxlY3RlZEluZGV4KTtcbiAgfSwgW3JvdXRlLCBib3hSZWYsIHZhbHVlc10pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFib3hSZWYuY3VycmVudCB8fCAhZWRpdFJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBmdW5jdGlvbiBvblNlbGVjdGlvbkNoYW5nZShldmVudDogRXZlbnQpIHtcbiAgICAgIGxldCBzZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oKTtcbiAgICAgIGxldCBib3VuZGluZ1JlY3RFbCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgXCJbY29udGVudGVkaXRhYmxlXVwiXG4gICAgICApO1xuICAgICAgY29uc3QgdGV4dCA9IGJvdW5kaW5nUmVjdEVsLmlubmVyVGV4dDtcbiAgICAgIGlmICghdGV4dCkge1xuICAgICAgICBzZXRSb3V0ZShcIlwiKTtcbiAgICAgICAgY3VycmVudFZhbHVlLmN1cnJlbnQgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0Um91dGUoKGN1cnJlbnRWYWx1ZS5jdXJyZW50ID0gdGV4dCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZnJhbWVSZWYuY3VycmVudCkge1xuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZVJlZi5jdXJyZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gdXBkYXRlRmlsdGVyTGlzdChjdXJyZW50VmFsdWUpO1xuXG4gICAgICBmcmFtZVJlZi5jdXJyZW50ID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgc2V0U2VsZWN0ZWRJbmRleChib3hSZWYuY3VycmVudCwgMCwgc2VsZWN0ZWRJbmRleCk7XG5cbiAgICAgICAgY29uc3QgcmVjdCA9IGJvdW5kaW5nUmVjdEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBib3hSZWYuY3VycmVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tb2Zmc2V0LXhcIiwgYCR7cmVjdC5yaWdodH1weGApO1xuICAgICAgICBib3hSZWYuY3VycmVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tb2Zmc2V0LXlcIiwgYCR7cmVjdC5ib3R0b219cHhgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGVsID0gZWRpdFJlZi5jdXJyZW50LnF1ZXJ5U2VsZWN0b3IoXCJbY29udGVudGVkaXRhYmxlXVwiKTtcbiAgICBzZXRDYXJldFRvRW5kKGVsKTtcbiAgICBjb25zb2xlLmxvZyhlbCk7XG5cbiAgICBpZiAoZWwuaW5uZXJUZXh0KSB7XG4gICAgICBjb25zdCByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBib3hSZWYuY3VycmVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tb2Zmc2V0LXhcIiwgYCR7cmVjdC5yaWdodH1weGApO1xuICAgICAgYm94UmVmLmN1cnJlbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLW9mZnNldC15XCIsIGAke3JlY3QuYm90dG9tfXB4YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGJveFJlZi5jdXJyZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1vZmZzZXQteFwiLCBgJHtyZWN0LnJpZ2h0fXB4YCk7XG4gICAgICBib3hSZWYuY3VycmVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tb2Zmc2V0LXlcIiwgYCR7cmVjdC5ib3R0b219cHhgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vdXNlT3ZlcihldmVudDogTW91c2VFdmVudCkge1xuICAgICAgY29uc3Qgb3JpZyA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcblxuICAgICAgY29uc3QgbGlzdEl0ZW0gPSBvcmlnLmNsb3Nlc3QoXCIuQXV0b0NvbXBsZXRlTGlzdEl0ZW1cIik7XG4gICAgICBpZiAoIWxpc3RJdGVtKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKFxuICAgICAgICBsaXN0SXRlbS5wYXJlbnRFbGVtZW50LmNoaWxkTm9kZXMsXG4gICAgICAgIGxpc3RJdGVtXG4gICAgICApO1xuXG4gICAgICBzZXRTZWxlY3RlZEluZGV4KGJveFJlZi5jdXJyZW50LCBpbmRleCwgc2VsZWN0ZWRJbmRleCk7XG4gICAgICByZXR1cm4gbGlzdEl0ZW07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlIFwiQXJyb3dVcFwiOiB7XG4gICAgICAgICAgbGV0IG5ld0luZGV4ID0gc2VsZWN0ZWRJbmRleC5jdXJyZW50IC0gMTtcbiAgICAgICAgICBuZXdJbmRleCA9XG4gICAgICAgICAgICBuZXdJbmRleCA8IDAgPyBib3hSZWYuY3VycmVudC5jaGlsZEVsZW1lbnRDb3VudCAtIDEgOiBuZXdJbmRleDtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHNldFNlbGVjdGVkSW5kZXgoYm94UmVmLmN1cnJlbnQsIG5ld0luZGV4LCBzZWxlY3RlZEluZGV4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjoge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbGV0IG5ld0luZGV4ID0gc2VsZWN0ZWRJbmRleC5jdXJyZW50ICsgMTtcbiAgICAgICAgICBuZXdJbmRleCA9XG4gICAgICAgICAgICBuZXdJbmRleCA+IGJveFJlZi5jdXJyZW50LmNoaWxkRWxlbWVudENvdW50IC0gMSA/IDAgOiBuZXdJbmRleDtcbiAgICAgICAgICBzZXRTZWxlY3RlZEluZGV4KGJveFJlZi5jdXJyZW50LCBuZXdJbmRleCwgc2VsZWN0ZWRJbmRleCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlIFwiRXNjYXBlXCI6IHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBlZGl0UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcihcIltjb250ZW50ZWRpdGFibGVdXCIpO1xuICAgICAgICAgIGJsdXIoY29udGVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlIFwiRW50ZXJcIjoge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgY29uc3QgY29udGVudCA9IGVkaXRSZWYuY3VycmVudC5xdWVyeVNlbGVjdG9yKFwiW2NvbnRlbnRlZGl0YWJsZV1cIik7XG4gICAgICAgICAgb25TZWxlY3RWYWx1ZShcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICBib3hSZWYuY3VycmVudC5jaGlsZE5vZGVzXG4gICAgICAgICAgICAgIC5pdGVtKHNlbGVjdGVkSW5kZXguY3VycmVudClcbiAgICAgICAgICAgICAgLmdldEF0dHJpYnV0ZShcImRhdGEtdmFsdWVcIilcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRvRm9jdXMoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlZGl0UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcihcIltjb250ZW50ZWRpdGFibGVdXCIpLmZvY3VzKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TZWxlY3RWYWx1ZShjb250ZW50OiBIVE1MRGl2RWxlbWVudCwgdmFsdWU6IHN0cmluZykge1xuICAgICAgY3VycmVudFZhbHVlLmN1cnJlbnQgPSBjb250ZW50LmlubmVyVGV4dCA9IHZhbHVlO1xuICAgICAgZ2V0U2VsZWN0aW9uKCkubW9kaWZ5KFwibW92ZVwiLCBcInJpZ2h0XCIsIFwibGluZVwiKTtcbiAgICAgIGJsdXIoY29udGVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DbGlja0l0ZW0oZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBvbk1vdXNlT3ZlcihldmVudCk7XG5cbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBlZGl0UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcihcIltjb250ZW50ZWRpdGFibGVdXCIpO1xuICAgICAgICBvblNlbGVjdFZhbHVlKGNvbnRlbnQsIGl0ZW0uZ2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZWRpdFJlZi5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5RG93bik7XG4gICAgZWRpdFJlZi5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBkb0ZvY3VzKTtcblxuICAgIC8vIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgb25TZWxlY3Rpb25DaGFuZ2UpO1xuICAgIGVkaXRSZWYuY3VycmVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgb25TZWxlY3Rpb25DaGFuZ2UpO1xuICAgIGJveFJlZi5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgb25Nb3VzZU92ZXIpO1xuICAgIGJveFJlZi5jdXJyZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgb25DbGlja0l0ZW0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShmcmFtZVJlZi5jdXJyZW50KTtcbiAgICAgIGlmIChlZGl0UmVmLmN1cnJlbnQpIHtcbiAgICAgICAgLy8gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLCBvblNlbGVjdGlvbkNoYW5nZSk7XG4gICAgICAgIGVkaXRSZWYuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgb25TZWxlY3Rpb25DaGFuZ2UpO1xuICAgICAgICBlZGl0UmVmLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGRvRm9jdXMpO1xuICAgICAgICBlZGl0UmVmLmN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgb25LZXlEb3duKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJveFJlZi5jdXJyZW50KSB7XG4gICAgICAgIGJveFJlZi5jdXJyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgb25DbGlja0l0ZW0pO1xuICAgICAgICBib3hSZWYuY3VycmVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIG9uTW91c2VPdmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXG4gICAgZWRpdFJlZixcbiAgICBib3hSZWYsXG4gICAgZnJhbWVSZWYsXG4gICAgc2VsZWN0ZWRJbmRleCxcbiAgICBjdXJyZW50VmFsdWUsXG4gICAgaGFzRm9jdXMsXG4gICAgc2V0Um91dGUsXG4gIF0pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGhhc0ZvY3VzKSB7XG4gICAgICBlZGl0UmVmLmN1cnJlbnQucXVlcnlTZWxlY3RvcihcIltjb250ZW50ZWRpdGFibGVdXCIpLmlubmVyVGV4dCA9XG4gICAgICAgIGN1cnJlbnRWYWx1ZS5jdXJyZW50O1xuICAgICAgc2V0U2VsZWN0ZWRJbmRleChib3hSZWYuY3VycmVudCwgMCwgc2VsZWN0ZWRJbmRleCk7XG4gICAgfVxuICB9LCBbY3VycmVudFZhbHVlLCBoYXNGb2N1cywgZWRpdFJlZiwgYm94UmVmXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJlZj17ZWRpdFJlZn0gY2xhc3NOYW1lPVwiQXV0b0NvbXBsZXRlQ29udGFpbmVyXCI+XG4gICAgICA8UXVvdGVMaXRlcmFsIC8+XG4gICAgICA8QXV0b0NvbXBsZXRlciBkZWZhdWx0VmFsdWU9e2RlZmF1bHRWYWx1ZX0gLz5cbiAgICAgIDxRdW90ZUxpdGVyYWwgLz5cblxuICAgICAge2hhc0ZvY3VzICYmIChcbiAgICAgICAgPFBvcnRhbD5cbiAgICAgICAgICA8QXV0b0NvbXBsZXRlQm94IHF1ZXJ5PXtyb3V0ZX0gdmFsdWVzPXt2YWx1ZXN9IHJlZj17Ym94UmVmfSAvPlxuICAgICAgICA8L1BvcnRhbD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBVbmltcG9ydGFudCA9ICh7IGNoaWxkcmVuIH0pID0+IChcbiAgPHNwYW4gY2xhc3NOYW1lPVwiQ29kZUJveC10b2tlbiBDb2RlQm94LXRva2VuLS11bmltcG9ydGFudFwiPntjaGlsZHJlbn08L3NwYW4+XG4pO1xuXG5mdW5jdGlvbiBsaW5lRm9jdXNlcihldmVudDogUmVhY3QuU3ludGhldGljRXZlbnQ8TW91c2VFdmVudD4pIHtcbiAgY29uc3QgZWwgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgY29uc3QgZm9jdXNMaW5lID0gZWwuY2xvc2VzdChcIi5Db2RlQm94LWxpbmVcIik7XG4gIGlmIChmb2N1c0xpbmUpIHtcbiAgICBjb25zdCBmb2N1c2FibGUgPSBmb2N1c0xpbmUucXVlcnlTZWxlY3RvcihcIltkYXRhLWZvY3VzYWJsZV1cIik7XG4gICAgaWYgKGZvY3VzYWJsZSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBmb2N1c2FibGUpIHtcbiAgICAgIGZvY3VzYWJsZS5mb2N1cygpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgUGFja2FnZUpTT05FZGl0b3IgPSAoe1xuICBwa2csXG4gIGZvbGRlck5hbWUsXG4gIHZhbHVlcyxcbiAgb25DaGFuZ2UsXG4gIGRlZmF1bHRWYWx1ZSxcbiAgb25TYXZlLFxuICBoYXNDaGFuZ2VkLFxuICBwcm9wZXJ0eUJpbmRpbmcgPSBQcm9wZXJ0eUJpbmRpbmdUeXBlLnJvdXRlcixcbn06IHtcbiAgcGtnOiBQYWNrYWdlSlNPTkZpbGU7XG4gIGZvbGRlck5hbWU6IHN0cmluZztcbiAgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICBwcm9wZXJ0eUJpbmRpbmc6IFByb3BlcnR5QmluZGluZ1R5cGU7XG59KSA9PiB7XG4gIGNvbnN0IFtpc0V4cGFuZGVkLCBzZXRFeHBhbmRlZF0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gIGlmICghcGtnLm5hbWUpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJDb2RlQm94LWNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJDb2RlQm94LWhlYWRpbmdcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiQ29kZUJveC1maWxlbmFtZVwifT5cbiAgICAgICAgICA8VW5pbXBvcnRhbnQ+e2ZvbGRlck5hbWV9LzwvVW5pbXBvcnRhbnQ+cGFja2FnZS5qc29uXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgb25DbGljaz17bGluZUZvY3VzZXJ9IGNsYXNzTmFtZT1cIkNvZGVCb3hcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJDb2RlQm94LWxpbmUgQ29kZUJveC1JbmRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkVsbGlwc2lzXCI+Li4uPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQ29kZUJveC1saW5lIENvZGVCb3gtSW5kZW50XCI+XG4gICAgICAgICAgPFN0cmluZ0tleSBuYW1lPVwicnVuXCIgLz5cbiAgICAgICAgICA8T3BlbmluZ0JyYWNlIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzc05hbWU9e2BDb2RlQm94LWxpbmUgQ29kZUJveC1saW5lLS1lbmFibGVkICR7XG4gICAgICAgICAgICAhZGVmYXVsdFZhbHVlID8gXCJDb2RlQm94LWxpbmUtLWVuYWJsZWQtLWludmFsaWRcIiA6IFwiXCJcbiAgICAgICAgICB9IENvZGVCb3gtbGluZS0tZmxleCBDb2RlQm94LUluZGVudCBDb2RlQm94LUluZGVudC0tMmB9XG4gICAgICAgID5cbiAgICAgICAgICA8U3RyaW5nS2V5IG5hbWU9XCJyb3V0ZXJcIiAvPlxuXG4gICAgICAgICAgPEF1dG9Db21wbGV0ZVByb3BlcnR5VmFsdWVcbiAgICAgICAgICAgIHZhbHVlcz17dmFsdWVzfVxuICAgICAgICAgICAgb25DaGFuZ2U9e29uQ2hhbmdlfVxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtkZWZhdWx0VmFsdWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiQ29kZUJveC1saW5lIENvZGVCb3gtSW5kZW50XCI+XG4gICAgICAgICAgPENsb3NpbmdCcmFjZSAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkNvZGVCb3gtbGluZSBDb2RlQm94LUluZGVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiRWxsaXBzaXNcIj4uLi48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJDb2RlQm94LWhlYWRpbmcgQ29kZUJveC1oZWFkaW5nLS1mb290ZXJcIj5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIG9uQ2xpY2s9e2hhc0NoYW5nZWQgPyBvblNhdmUgOiB1bmRlZmluZWR9XG4gICAgICAgICAgZGF0YS1kaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiQ29kZUJveC1hY3Rpb25cIlxuICAgICAgICA+XG4gICAgICAgICAgU2F2ZSBjaGFuZ2VzXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwgImltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuXG5pbXBvcnQgUG9ydGFsdjQgZnJvbSAnLi9Qb3J0YWwnO1xuaW1wb3J0IExlZ2FjeVBvcnRhbCBmcm9tICcuL0xlZ2FjeVBvcnRhbCc7XG5cbnZhciBQb3J0YWwgPSB2b2lkIDA7XG5cbmlmIChSZWFjdERPTS5jcmVhdGVQb3J0YWwpIHtcbiAgUG9ydGFsID0gUG9ydGFsdjQ7XG59IGVsc2Uge1xuICBQb3J0YWwgPSBMZWdhY3lQb3J0YWw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDsiLCAidmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgY2FuVXNlRE9NIH0gZnJvbSAnLi91dGlscyc7XG5cbnZhciBQb3J0YWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWwoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcnRhbCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFBvcnRhbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFBvcnRhbCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcnRhbCwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuZGVmYXVsdE5vZGUpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmRlZmF1bHROb2RlKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVmYXVsdE5vZGUgPSBudWxsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGlmICghY2FuVXNlRE9NKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLnByb3BzLm5vZGUgJiYgIXRoaXMuZGVmYXVsdE5vZGUpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZGVmYXVsdE5vZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0RE9NLmNyZWF0ZVBvcnRhbCh0aGlzLnByb3BzLmNoaWxkcmVuLCB0aGlzLnByb3BzLm5vZGUgfHwgdGhpcy5kZWZhdWx0Tm9kZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvcnRhbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIG5vZGU6IFByb3BUeXBlcy5hbnlcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDsiLCAiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpOyIsICJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8vIFRoaXMgZmlsZSBpcyBhIGZhbGxiYWNrIGZvciBhIGNvbnN1bWVyIHdobyBpcyBub3QgeWV0IG9uIFJlYWN0IDE2XG4vLyBhcyBjcmVhdGVQb3J0YWwgd2FzIGludHJvZHVjZWQgaW4gUmVhY3QgMTZcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUG9ydGFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUG9ydGFsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9ydGFsLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnJlbmRlclBvcnRhbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcm9wcykge1xuICAgICAgdGhpcy5yZW5kZXJQb3J0YWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSh0aGlzLmRlZmF1bHROb2RlIHx8IHRoaXMucHJvcHMubm9kZSk7XG4gICAgICBpZiAodGhpcy5kZWZhdWx0Tm9kZSkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuZGVmYXVsdE5vZGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5kZWZhdWx0Tm9kZSA9IG51bGw7XG4gICAgICB0aGlzLnBvcnRhbCA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyUG9ydGFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyUG9ydGFsKHByb3BzKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMubm9kZSAmJiAhdGhpcy5kZWZhdWx0Tm9kZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5kZWZhdWx0Tm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qaW1mYi9kOTllMDY3OGU5ZGE3MTVjY2Y2NDU0OTYxZWYwNGQxYlxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLmNoaWxkcmVuLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBSZWFjdC5jbG9uZUVsZW1lbnQodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9ydGFsID0gUmVhY3RET00udW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIodGhpcywgY2hpbGRyZW4sIHRoaXMucHJvcHMubm9kZSB8fCB0aGlzLmRlZmF1bHROb2RlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7XG5cblxuUG9ydGFsLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG4gIG5vZGU6IFByb3BUeXBlcy5hbnlcbn07IiwgImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY29uc3QgRm9sZGVyID0gKHByb3BzOiBSZWFjdC5TVkdQcm9wczxTVkdTVkdFbGVtZW50PikgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzdmcgdmlld0JveD1cIjAgMCA2NCA2NFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB7Li4ucHJvcHN9PlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk01Ni4wMTEgMjguMTc0bC0xLjYyMyAyMS4wNzdhMy4wMDIgMy4wMDIgMCAwMS0yLjk5NSAyLjc3SDEyLjY0OWEzLjAwMyAzLjAwMyAwIDAxLTIuOTk1LTIuNzdMOC4wMyAyOC4xNzRhMi4wMDEgMi4wMDEgMCAwMTEuOTk3LTIuMTUzaDQzLjk4OGEyLjAwMSAyLjAwMSAwIDAxMS45OTcgMi4xNTN6bS0xLjk5LTguMTUzdjNhMSAxIDAgMDEtMSAxaC00MmExIDEgMCAwMS0xLTF2LTlhMiAyIDAgMDEyLTJoMTEuMzQzYTQgNCAwIDAxMi44MjggMS4xNzJsMy42NTcgMy42NTZhNCA0IDAgMDAyLjgyOSAxLjE3Mkg1Mi4wMmEyIDIgMCAwMTIgMnpcIlxuICAgICAgICBmaWxsUnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICBmaWxsPVwiY3VycmVudENvbG9yXCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuIiwgImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ1NTRmlsZVR5cGUocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiB7Li4ucHJvcHN9PlxuICAgICAgPHBhdGhcbiAgICAgICAgZmlsbD1cIiMxNTcyYjZcIlxuICAgICAgICBkPVwiTTUuOTAyIDI3LjIwMUwzLjY1NiAyaDI0LjY4OGwtMi4yNDkgMjUuMTk3TDE1Ljk4NSAzMCA1LjkwMiAyNy4yMDF6XCJcbiAgICAgIC8+XG4gICAgICA8cGF0aCBmaWxsPVwiIzMzYTlkY1wiIGQ9XCJNMTYgMjcuODU4bDguMTctMi4yNjUgMS45MjItMjEuNTMySDE2djIzLjc5N3pcIiAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgZmlsbD1cIiNmZmZcIlxuICAgICAgICBkPVwiTTE2IDEzLjE5MWg0LjA5bC4yODItMy4xNjVIMTZWNi45MzVoNy43NWwtLjA3NC44MjktLjc1OSA4LjUxOEgxNnYtMy4wOTF6XCJcbiAgICAgIC8+XG4gICAgICA8cGF0aFxuICAgICAgICBmaWxsPVwiI2ViZWJlYlwiXG4gICAgICAgIGQ9XCJNMTYuMDE5IDIxLjIxOGwtLjAxNC4wMDQtMy40NDItLjkzLS4yMi0yLjQ2NUg5LjI0bC40MzMgNC44NTMgNi4zMzEgMS43NTguMDE1LS4wMDR2LTMuMjE2elwiXG4gICAgICAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgZmlsbD1cIiNmZmZcIlxuICAgICAgICBkPVwiTTE5LjgyNyAxNi4xNTFsLS4zNzIgNC4xMzktMy40NDcuOTN2My4yMTZsNi4zMzYtMS43NTYuMDQ3LS41MjIuNTM3LTYuMDA3aC0zLjEwMXpcIlxuICAgICAgLz5cbiAgICAgIDxwYXRoXG4gICAgICAgIGZpbGw9XCIjZWJlYmViXCJcbiAgICAgICAgZD1cIk0xNi4wMTEgNi45MzV2My4wOTFIOC41NDVsLS4wNjItLjY5NS0uMTQxLTEuNTY3LS4wNzQtLjgyOWg3Ljc0M3pNMTYgMTMuMTkxdjMuMDkxSDEyLjYwMWwtLjA2Mi0uNjk1LS4xNC0xLjU2Ny0uMDc0LS44MjlIMTZ6XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjb25zdCBIVE1MRmlsZVR5cGUgPSAoeyB3aWR0aCwgaGVpZ2h0LCBjbGFzc05hbWUgfSkgPT4gKFxuICA8c3ZnXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgd2lkdGg9e3dpZHRofVxuICAgIGhlaWdodD17aGVpZ2h0fVxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgIHZpZXdCb3g9XCIwIDAgMzIgMzJcIlxuICA+XG4gICAgPHBhdGhcbiAgICAgIGZpbGw9XCIjZTQ0ZjI2XCJcbiAgICAgIGQ9XCJNNS45MDIgMjcuMjAxTDMuNjU1IDIgMjguMzQ1IDIgMjYuMDk1IDI3LjE5NyAxNS45ODUgMzAgNS45MDIgMjcuMjAxelwiXG4gICAgPjwvcGF0aD5cbiAgICA8cGF0aFxuICAgICAgZmlsbD1cIiNmMTY2MmFcIlxuICAgICAgZD1cIk0xNiAyNy44NThMMjQuMTcgMjUuNTkzIDI2LjA5MiA0LjA2MSAxNiA0LjA2MSAxNiAyNy44NTh6XCJcbiAgICA+PC9wYXRoPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwiI2ViZWJlYlwiXG4gICAgICBkPVwiTTE2IDEzLjQwN0wxMS45MSAxMy40MDcgMTEuNjI4IDEwLjI0MiAxNiAxMC4yNDIgMTYgNy4xNTEgMTUuOTg5IDcuMTUxIDguMjUgNy4xNTEgOC4zMjQgNy45ODEgOS4wODMgMTYuNDk4IDE2IDE2LjQ5OCAxNiAxMy40MDd6XCJcbiAgICA+PC9wYXRoPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwiI2ViZWJlYlwiXG4gICAgICBkPVwiTTE2IDIxLjQzNEwxNS45ODYgMjEuNDM4IDEyLjU0NCAyMC41MDkgMTIuMzI0IDE4LjA0NCAxMC42NTEgMTguMDQ0IDkuMjIxIDE4LjA0NCA5LjY1NCAyMi44OTYgMTUuOTg2IDI0LjY1NCAxNiAyNC42NSAxNiAyMS40MzR6XCJcbiAgICA+PC9wYXRoPlxuICAgIDxwYXRoXG4gICAgICBmaWxsPVwiI2ZmZlwiXG4gICAgICBkPVwiTTE1Ljk4OSAxMy40MDdMMTUuOTg5IDE2LjQ5OCAxOS43OTUgMTYuNDk4IDE5LjQzNyAyMC41MDcgMTUuOTg5IDIxLjQzNyAxNS45ODkgMjQuNjUzIDIyLjMyNiAyMi44OTYgMjIuMzcyIDIyLjM3NCAyMy4wOTggMTQuMjM3IDIzLjE3NCAxMy40MDcgMjIuMzQxIDEzLjQwNyAxNS45ODkgMTMuNDA3elwiXG4gICAgPjwvcGF0aD5cbiAgICA8cGF0aFxuICAgICAgZmlsbD1cIiNmZmZcIlxuICAgICAgZD1cIk0xNS45ODkgNy4xNTFMMTUuOTg5IDkuMDcxIDE1Ljk4OSAxMC4yMzUgMTUuOTg5IDEwLjI0MiAyMy40NDUgMTAuMjQyIDIzLjQ0NSAxMC4yNDIgMjMuNDU1IDEwLjI0MiAyMy41MTcgOS41NDggMjMuNjU4IDcuOTgxIDIzLjczMiA3LjE1MSAxNS45ODkgNy4xNTF6XCJcbiAgICA+PC9wYXRoPlxuICA8L3N2Zz5cbik7XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBKYXZhU2NyaXB0RmlsZVR5cGUocHJvcHM6IFJlYWN0LlNWR1Byb3BzPFNWR1NWR0VsZW1lbnQ+KSB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDMyIDMyXCIgey4uLnByb3BzfT5cbiAgICAgIDxwYXRoXG4gICAgICAgIGQ9XCJNMTguNzc0IDE5LjdhMy43MjcgMy43MjcgMCAwMDMuMzc2IDIuMDc4YzEuNDE4IDAgMi4zMjQtLjcwOSAyLjMyNC0xLjY4OCAwLTEuMTczLS45MzEtMS41ODktMi40OTEtMi4yNzJsLS44NTYtLjM2N2MtMi40NjktMS4wNTItNC4xMS0yLjM3LTQuMTEtNS4xNTYgMC0yLjU2NyAxLjk1Ni00LjUyIDUuMDEyLTQuNTJBNS4wNTggNS4wNTggMCAwMTI2LjkgMTAuNTJsLTIuNjY1IDEuNzExYTIuMzI3IDIuMzI3IDAgMDAtMi4yLTEuNDY3IDEuNDg5IDEuNDg5IDAgMDAtMS42MzggMS40NjdjMCAxLjAyNy42MzYgMS40NDIgMi4xIDIuMDc4bC44NTYuMzY2YzIuOTA4IDEuMjQ3IDQuNTQ5IDIuNTE4IDQuNTQ5IDUuMzc2IDAgMy4wODEtMi40MiA0Ljc2OS01LjY3MSA0Ljc2OWE2LjU3NSA2LjU3NSAwIDAxLTYuMjM2LTMuNXpNNi42ODYgMjBjLjUzOC45NTQgMS4wMjcgMS43NiAyLjIgMS43NiAxLjEyNCAwIDEuODM0LS40NCAxLjgzNC0yLjE1VjcuOTc1aDMuNDIydjExLjY4M2MwIDMuNTQzLTIuMDc4IDUuMTU2LTUuMTEgNS4xNTZBNS4zMTIgNS4zMTIgMCAwMTMuOSAyMS42ODh6XCJcbiAgICAgICAgZmlsbD1cIiNmNWRlMTlcIlxuICAgICAgLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn1cbiIsICJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFR5cGVTY3JpcHRGaWxlVHlwZShwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxzdmcgdmlld0JveD1cIjAgMCAzMiAzMlwiIHsuLi5wcm9wc30+XG4gICAgICA8cmVjdCB4PXsyfSB5PXsyfSB3aWR0aD17Mjh9IGhlaWdodD17Mjh9IHJ4PXsxLjMxMn0gZmlsbD1cIiMzMTc4YzZcIiAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgZD1cIk0xOC4yNDUgMjMuNzU5djMuMDY4YTYuNDkyIDYuNDkyIDAgMDAxLjc2NC41NzUgMTEuNTYgMTEuNTYgMCAwMDIuMTQ2LjE5MiA5Ljk2OCA5Ljk2OCAwIDAwMi4wODgtLjIxMSA1LjExIDUuMTEgMCAwMDEuNzM1LS43IDMuNTQyIDMuNTQyIDAgMDAxLjE4MS0xLjI2NiA0LjQ2OSA0LjQ2OSAwIDAwLjE4Ni0zLjM5NCAzLjQwOSAzLjQwOSAwIDAwLS43MTctMS4xMTcgNS4yMzYgNS4yMzYgMCAwMC0xLjEyMy0uODc3IDEyLjAyNyAxMi4wMjcgMCAwMC0xLjQ3Ny0uNzM0cS0uNi0uMjQ5LTEuMDgtLjQ4NGE1LjUgNS41IDAgMDEtLjgxMy0uNDc5IDIuMDg5IDIuMDg5IDAgMDEtLjUxNi0uNTE4IDEuMDkxIDEuMDkxIDAgMDEtLjE4MS0uNjE4IDEuMDM5IDEuMDM5IDAgMDEuMTYyLS41NzEgMS40IDEuNCAwIDAxLjQ1OS0uNDM2IDIuNDM5IDIuNDM5IDAgMDEuNzI2LS4yODMgNC4yMTEgNC4yMTEgMCAwMS45NTYtLjEgNS45NDIgNS45NDIgMCAwMS44MDguMDU4IDYuMjkyIDYuMjkyIDAgMDEuODU2LjE3NyA1Ljk5NCA1Ljk5NCAwIDAxLjgzNi4zIDQuNjU3IDQuNjU3IDAgMDEuNzUxLjQyMlYxMy45YTcuNTA5IDcuNTA5IDAgMDAtMS41MjUtLjQgMTIuNDI2IDEyLjQyNiAwIDAwLTEuOS0uMTI5IDguNzY3IDguNzY3IDAgMDAtMi4wNjQuMjM1IDUuMjM5IDUuMjM5IDAgMDAtMS43MTYuNzMzIDMuNjU1IDMuNjU1IDAgMDAtMS4xNzEgMS4yNzEgMy43MzEgMy43MzEgMCAwMC0uNDMxIDEuODQ1IDMuNTg4IDMuNTg4IDAgMDAuNzg5IDIuMzQgNiA2IDAgMDAyLjM5NSAxLjYzOXEuNjMuMjYgMS4xNzUuNTA5YTYuNDU4IDYuNDU4IDAgMDEuOTQyLjUxNyAyLjQ2MyAyLjQ2MyAwIDAxLjYyNi41ODUgMS4yIDEuMiAwIDAxLjIzLjcxOSAxLjEgMS4xIDAgMDEtLjE0NC41NTIgMS4yNjkgMS4yNjkgMCAwMS0uNDM1LjQ0MSAyLjM4MSAyLjM4MSAwIDAxLS43MjYuMjkyIDQuMzc3IDQuMzc3IDAgMDEtMS4wMTguMTA1IDUuNzczIDUuNzczIDAgMDEtMS45NjktLjM1IDUuODc0IDUuODc0IDAgMDEtMS44MDUtMS4wNDV6bS01LjE1NC03LjYzOGg0di0yLjUyN0g1LjkzOHYyLjUyN0g5LjkydjExLjI1NGgzLjE3MXpcIlxuICAgICAgICBmaWxsPVwiI2ZmZlwiXG4gICAgICAgIGZpbGxSdWxlPVwiZXZlbm9kZFwiXG4gICAgICAvPlxuICAgIDwvc3ZnPlxuICApO1xufVxuIiwgImltcG9ydCB7IENTU0ZpbGVUeXBlIH0gZnJvbSBcInNyYy9pY29ucy9maWxldHlwZXMvQ1NTRmlsZVR5cGVcIjtcbmltcG9ydCB7IEhUTUxGaWxlVHlwZSB9IGZyb20gXCJzcmMvaWNvbnMvZmlsZXR5cGVzL0hUTUxGaWxlVHlwZVwiO1xuaW1wb3J0IHsgSmF2YVNjcmlwdEZpbGVUeXBlIH0gZnJvbSBcInNyYy9pY29ucy9maWxldHlwZXMvSmF2YVNjcmlwdEZpbGVUeXBlXCI7XG5pbXBvcnQgeyBUeXBlU2NyaXB0RmlsZVR5cGUgfSBmcm9tIFwic3JjL2ljb25zL2ZpbGV0eXBlcy9UeXBlU2NyaXB0RmlsZVR5cGVcIjtcblxuZXhwb3J0IGNvbnN0IGZpbGV0eXBlcyA9IHtcbiAgXCIuanNcIjogSmF2YVNjcmlwdEZpbGVUeXBlLFxuICBcIi5qc3hcIjogSmF2YVNjcmlwdEZpbGVUeXBlLFxuICBcIi5tanNcIjogSmF2YVNjcmlwdEZpbGVUeXBlLFxuICBcIi5janNcIjogSmF2YVNjcmlwdEZpbGVUeXBlLFxuICBcIi5odG1sXCI6IEhUTUxGaWxlVHlwZSxcbiAgXCIudHNcIjogVHlwZVNjcmlwdEZpbGVUeXBlLFxuICBcIi50c3hcIjogVHlwZVNjcmlwdEZpbGVUeXBlLFxuICBcIi5jc3NcIjogQ1NTRmlsZVR5cGUsXG59O1xuIiwgImltcG9ydCBcInNyYy9saWIvbGF1bmNoSWRsZVdvcmtlclwiO1xuaW1wb3J0IFwic3JjL2xpYi9pbmplY3RTZXJ2aWNlV29ya2VyXCI7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwic3JjL19kZXZfL05ld1Byb2plY3RQYWdlXCI7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCByZW5kZXIpO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQU1BO0FBRUEsTUFBSSx3QkFBd0IsT0FBTyx1QkFDL0IsbUJBQWlCLE9BQU8sVUFBVSxnQkFDbEMsbUJBQW1CLE9BQU8sVUFBVTtBQUV4QyxvQkFBa0IsS0FBSztBQUN0QixRQUFJLE9BQVE7QUFDWCxZQUFNLElBQUksVUFBVTtBQUdyQixXQUFPLE9BQU87QUFBQTtBQUdmLDZCQUEyQjtBQUMxQixRQUFJO0FBQ0gsVUFBSSxDQUFDLE9BQU87QUFDWCxlQUFPO0FBTVIsVUFBSSxRQUFRLElBQUksT0FBTztBQUV2QixVQURBLE1BQU0sS0FBSyxNQUNQLE9BQU8sb0JBQW9CLE9BQU8sT0FBTztBQUM1QyxlQUFPO0FBS1IsZUFESSxRQUFRLElBQ0gsSUFBSSxHQUFHLElBQUksSUFBSTtBQUN2QixjQUFNLE1BQU0sT0FBTyxhQUFhLE1BQU07QUFFdkMsVUFBSSxTQUFTLE9BQU8sb0JBQW9CLE9BQU8sSUFBSSxTQUFVLEdBQUc7QUFDL0QsZUFBTyxNQUFNO0FBQUE7QUFFZCxVQUFJLE9BQU8sS0FBSyxRQUFRO0FBQ3ZCLGVBQU87QUFJUixVQUFJLFFBQVE7QUFJWixhQUhBLHVCQUF1QixNQUFNLElBQUksUUFBUSxTQUFVLFFBQVE7QUFDMUQsY0FBTSxVQUFVO0FBQUEsVUFFYixPQUFPLEtBQUssT0FBTyxPQUFPLElBQUksUUFBUSxLQUFLLFFBQzdDO0FBQUEsYUFLTSxLQUFQO0FBRUQsYUFBTztBQUFBO0FBQUE7QUFJVCxTQUFPLFVBQVUsb0JBQW9CLE9BQU8sU0FBUyxTQUFVLFFBQVEsUUFBUTtBQUs5RSxhQUpJLE1BQ0EsS0FBSyxTQUFTLFNBQ2QsU0FFSyxJQUFJLEdBQUcsSUFBSSxVQUFVLFFBQVEsS0FBSztBQUMxQyxhQUFPLE9BQU8sVUFBVTtBQUV4QixlQUFTLE9BQU87QUFDZixRQUFJLGlCQUFlLEtBQUssTUFBTSxRQUM3QixJQUFHLE9BQU8sS0FBSztBQUlqQixVQUFJLHVCQUF1QjtBQUMxQixrQkFBVSxzQkFBc0I7QUFDaEMsaUJBQVMsSUFBSSxHQUFHLElBQUksUUFBUSxRQUFRO0FBQ25DLFVBQUksaUJBQWlCLEtBQUssTUFBTSxRQUFRLE9BQ3ZDLElBQUcsUUFBUSxNQUFNLEtBQUssUUFBUTtBQUFBO0FBQUE7QUFNbEMsV0FBTztBQUFBO0FBQUE7OztBQ3hGUjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFRQTtBQUFhLE1BQUksSUFBVSx5QkFBaUIsSUFBRSxPQUFNLElBQUU7QUFBTSxVQUFRLFdBQVM7QUFBTSxVQUFRLGFBQVc7QUFBTSxVQUFRLFdBQVM7QUFBTSxNQUFJLElBQUUsT0FBTSxJQUFFLE9BQU0sSUFBRTtBQUFNLFVBQVEsV0FBUztBQUFNLE1BQUksSUFBRSxPQUFNLElBQUU7QUFDcE0sRUFBRyxBQUFhLE9BQU8sVUFBcEIsY0FBNEIsT0FBTyxPQUFTLEtBQUUsT0FBTyxLQUFJLElBQUUsRUFBRSxrQkFBaUIsSUFBRSxFQUFFLGlCQUFnQixRQUFRLFdBQVMsRUFBRSxtQkFBa0IsUUFBUSxhQUFXLEVBQUUsc0JBQXFCLFFBQVEsV0FBUyxFQUFFLG1CQUFrQixJQUFFLEVBQUUsbUJBQWtCLElBQUUsRUFBRSxrQkFBaUIsSUFBRSxFQUFFLHNCQUFxQixRQUFRLFdBQVMsRUFBRSxtQkFBa0IsSUFBRSxFQUFFLGVBQWMsSUFBRSxFQUFFO0FBQXpTLFNBQTJULElBQUUsQUFBYSxPQUFPLFVBQXBCLGNBQTRCLE9BQU87QUFDL1ksYUFBVyxHQUFFO0FBQUMsV0FBRyxBQUFPLE1BQVAsUUFBVSxBQUFXLE9BQU8sS0FBbEIsV0FBMkIsT0FBSyxLQUFFLEtBQUcsRUFBRSxNQUFJLEVBQUUsZUFBb0IsQUFBYSxPQUFPLEtBQXBCLGFBQXNCLElBQUU7QUFBQTtBQUFLLGFBQVcsR0FBRTtBQUFDLGFBQVEsSUFBRSwyREFBeUQsR0FBRSxJQUFFLEdBQUUsSUFBRSxVQUFVLFFBQU87QUFBSSxXQUFHLGFBQVcsbUJBQW1CLFVBQVU7QUFBSSxXQUFNLDJCQUF5QixJQUFFLGFBQVcsSUFBRTtBQUFBO0FBQ3BVLE1BQUksSUFBRSxDQUFDLFdBQVUsV0FBVTtBQUFDLFdBQU07QUFBQSxLQUFJLG9CQUFtQixXQUFVO0FBQUEsS0FBRyxxQkFBb0IsV0FBVTtBQUFBLEtBQUcsaUJBQWdCLFdBQVU7QUFBQSxNQUFJLElBQUU7QUFBRyxhQUFXLEdBQUUsR0FBRSxHQUFFO0FBQUMsU0FBSyxRQUFNLEdBQUUsS0FBSyxVQUFRLEdBQUUsS0FBSyxPQUFLLEdBQUUsS0FBSyxVQUFRLEtBQUc7QUFBQTtBQUFFLElBQUUsVUFBVSxtQkFBaUI7QUFBRyxJQUFFLFVBQVUsV0FBUyxTQUFTLEdBQUUsR0FBRTtBQUFDLFFBQUcsQUFBVyxPQUFPLEtBQWxCLFlBQXFCLEFBQWEsT0FBTyxLQUFwQixjQUF1QixBQUFNLEtBQU47QUFBUSxZQUFNLE1BQU0sRUFBRTtBQUFLLFNBQUssUUFBUSxnQkFBZ0IsTUFBSyxHQUFFLEdBQUU7QUFBQTtBQUFhLElBQUUsVUFBVSxjQUFZLFNBQVMsR0FBRTtBQUFDLFNBQUssUUFBUSxtQkFBbUIsTUFBSyxHQUFFO0FBQUE7QUFDamUsZUFBWTtBQUFBO0FBQUUsSUFBRSxZQUFVLEVBQUU7QUFBVSxhQUFXLEdBQUUsR0FBRSxHQUFFO0FBQUMsU0FBSyxRQUFNLEdBQUUsS0FBSyxVQUFRLEdBQUUsS0FBSyxPQUFLLEdBQUUsS0FBSyxVQUFRLEtBQUc7QUFBQTtBQUFFLE1BQUksSUFBRSxFQUFFLFlBQVUsSUFBSTtBQUFFLElBQUUsY0FBWTtBQUFFLElBQUUsR0FBRSxFQUFFO0FBQVcsSUFBRSx1QkFBcUI7QUFBRyxNQUFJLElBQUUsQ0FBQyxTQUFRLE9BQU0sSUFBRSxPQUFPLFVBQVUsZ0JBQWUsSUFBRSxDQUFDLEtBQUksSUFBRyxLQUFJLElBQUcsUUFBTyxJQUFHLFVBQVM7QUFDaFMsYUFBVyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksR0FBRSxJQUFFLElBQUcsSUFBRSxNQUFLLElBQUU7QUFBSyxRQUFHLEFBQU0sS0FBTjtBQUFRLFdBQUksS0FBSyxBQUFTLEVBQUUsUUFBWCxVQUFpQixLQUFFLEVBQUUsTUFBSyxBQUFTLEVBQUUsUUFBWCxVQUFpQixLQUFFLEtBQUcsRUFBRSxNQUFLO0FBQUUsVUFBRSxLQUFLLEdBQUUsTUFBSSxDQUFDLEVBQUUsZUFBZSxNQUFLLEdBQUUsS0FBRyxFQUFFO0FBQUksUUFBSSxJQUFFLFVBQVUsU0FBTztBQUFFLFFBQUcsQUFBSSxNQUFKO0FBQU0sUUFBRSxXQUFTO0FBQUEsYUFBVSxJQUFFLEdBQUU7QUFBQyxlQUFRLElBQUUsTUFBTSxJQUFHLElBQUUsR0FBRSxJQUFFLEdBQUU7QUFBSSxVQUFFLEtBQUcsVUFBVSxJQUFFO0FBQUcsUUFBRSxXQUFTO0FBQUE7QUFBRSxRQUFHLEtBQUcsRUFBRTtBQUFhLFdBQUksS0FBSyxJQUFFLEVBQUUsY0FBYTtBQUFFLFFBQVMsRUFBRSxPQUFYLFVBQWdCLEdBQUUsS0FBRyxFQUFFO0FBQUksV0FBTSxDQUFDLFVBQVMsR0FBRSxNQUFLLEdBQUUsS0FBSSxHQUFFLEtBQUksR0FBRSxPQUFNLEdBQUUsUUFBTyxFQUFFO0FBQUE7QUFDcmEsYUFBVyxHQUFFLEdBQUU7QUFBQyxXQUFNLENBQUMsVUFBUyxHQUFFLE1BQUssRUFBRSxNQUFLLEtBQUksR0FBRSxLQUFJLEVBQUUsS0FBSSxPQUFNLEVBQUUsT0FBTSxRQUFPLEVBQUU7QUFBQTtBQUFRLGFBQVcsR0FBRTtBQUFDLFdBQU0sQUFBVyxPQUFPLEtBQWxCLFlBQXFCLEFBQU8sTUFBUCxRQUFVLEVBQUUsYUFBVztBQUFBO0FBQUUsa0JBQWdCLEdBQUU7QUFBQyxRQUFJLElBQUUsQ0FBQyxLQUFJLE1BQUssS0FBSTtBQUFNLFdBQU0sTUFBSSxFQUFFLFFBQVEsU0FBUSxTQUFTLElBQUU7QUFBQyxhQUFPLEVBQUU7QUFBQTtBQUFBO0FBQUssTUFBSSxJQUFFO0FBQU8sYUFBVyxHQUFFLEdBQUU7QUFBQyxXQUFNLEFBQVcsT0FBTyxLQUFsQixZQUFxQixBQUFPLE1BQVAsUUFBVSxBQUFNLEVBQUUsT0FBUixPQUFZLE9BQU8sS0FBRyxFQUFFLE9BQUssRUFBRSxTQUFTO0FBQUE7QUFDNVcsYUFBVyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsT0FBTztBQUFFLElBQUcsQ0FBYyxNQUFkLGVBQWlCLEFBQVksTUFBWixjQUFjLEtBQUU7QUFBSyxRQUFJLElBQUU7QUFBRyxRQUFHLEFBQU8sTUFBUDtBQUFTLFVBQUU7QUFBQTtBQUFRLGNBQU87QUFBQSxhQUFRO0FBQUEsYUFBYztBQUFTLGNBQUU7QUFBRztBQUFBLGFBQVc7QUFBUyxrQkFBTyxFQUFFO0FBQUEsaUJBQWU7QUFBQSxpQkFBTztBQUFFLGtCQUFFO0FBQUE7QUFBQTtBQUFJLFFBQUc7QUFBRSxhQUFPLElBQUUsR0FBRSxJQUFFLEVBQUUsSUFBRyxJQUFFLEFBQUssTUFBTCxLQUFPLE1BQUksRUFBRSxHQUFFLEtBQUcsR0FBRSxNQUFNLFFBQVEsS0FBSSxLQUFFLElBQUcsQUFBTSxLQUFOLFFBQVUsS0FBRSxFQUFFLFFBQVEsR0FBRSxTQUFPLE1BQUssRUFBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLFNBQVMsSUFBRTtBQUFDLGVBQU87QUFBQSxZQUFLLEFBQU0sS0FBTixRQUFVLEdBQUUsTUFBSyxLQUFFLEVBQUUsR0FBRSxJQUFHLEVBQUMsRUFBRSxPQUFLLEtBQUcsRUFBRSxRQUFNLEVBQUUsTUFBSSxLQUFJLE1BQUcsRUFBRSxLQUFLLFFBQVEsR0FBRSxTQUFPLE9BQUssS0FBSSxFQUFFLEtBQUssS0FBSTtBQUF5QixRQUF2QixJQUFFLEdBQUUsSUFBRSxBQUFLLE1BQUwsS0FBTyxNQUFJLElBQUUsS0FBTyxNQUFNLFFBQVE7QUFBRyxlQUFRLElBQ3pmLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLFlBQUUsRUFBRTtBQUFHLFlBQUksSUFBRSxJQUFFLEVBQUUsR0FBRTtBQUFHLGFBQUcsRUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUE7QUFBQSxhQUFXLElBQUUsRUFBRSxJQUFHLEFBQWEsT0FBTyxLQUFwQjtBQUFzQixXQUFJLElBQUUsRUFBRSxLQUFLLElBQUcsSUFBRSxHQUFFLENBQUUsS0FBRSxFQUFFLFFBQVE7QUFBTSxZQUFFLEVBQUUsT0FBTSxJQUFFLElBQUUsRUFBRSxHQUFFLE1BQUssS0FBRyxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQSxhQUFXLEFBQVcsTUFBWDtBQUFhLFlBQU0sSUFBRSxLQUFHLEdBQUUsTUFBTSxFQUFFLElBQUcsQUFBb0IsTUFBcEIsb0JBQXNCLHVCQUFxQixPQUFPLEtBQUssR0FBRyxLQUFLLFFBQU0sTUFBSTtBQUFJLFdBQU87QUFBQTtBQUFFLGFBQVcsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLEFBQU0sS0FBTjtBQUFRLGFBQU87QUFBRSxRQUFJLElBQUUsSUFBRyxJQUFFO0FBQUUsYUFBRSxHQUFFLEdBQUUsSUFBRyxJQUFHLFNBQVMsSUFBRTtBQUFDLGFBQU8sRUFBRSxLQUFLLEdBQUUsSUFBRTtBQUFBLFFBQWM7QUFBQTtBQUMxWixhQUFXLEdBQUU7QUFBQyxRQUFHLEFBQUssRUFBRSxZQUFQLElBQWU7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFRLFVBQUUsS0FBSSxFQUFFLFVBQVEsR0FBRSxFQUFFLFVBQVEsR0FBRSxFQUFFLEtBQUssU0FBUyxJQUFFO0FBQUMsUUFBSSxFQUFFLFlBQU4sS0FBZ0IsTUFBRSxHQUFFLFNBQVEsRUFBRSxVQUFRLEdBQUUsRUFBRSxVQUFRO0FBQUEsU0FBSSxTQUFTLElBQUU7QUFBQyxRQUFJLEVBQUUsWUFBTixLQUFnQixHQUFFLFVBQVEsR0FBRSxFQUFFLFVBQVE7QUFBQTtBQUFBO0FBQUssUUFBRyxBQUFJLEVBQUUsWUFBTjtBQUFjLGFBQU8sRUFBRTtBQUFRLFVBQU0sRUFBRTtBQUFBO0FBQVMsTUFBSSxJQUFFLENBQUMsU0FBUTtBQUFNLGVBQVk7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFRLFFBQUcsQUFBTyxNQUFQO0FBQVMsWUFBTSxNQUFNLEVBQUU7QUFBTSxXQUFPO0FBQUE7QUFBRSxNQUFJLElBQUUsQ0FBQyx3QkFBdUIsR0FBRSx5QkFBd0IsQ0FBQyxZQUFXLElBQUcsbUJBQWtCLEdBQUUsc0JBQXFCLENBQUMsU0FBUSxLQUFJLFFBQU87QUFDamUsVUFBUSxXQUFTLENBQUMsS0FBSSxHQUFFLFNBQVEsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLE1BQUUsR0FBRSxXQUFVO0FBQUMsUUFBRSxNQUFNLE1BQUs7QUFBQSxPQUFZO0FBQUEsS0FBSSxPQUFNLFNBQVMsR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFFLGFBQUUsR0FBRSxXQUFVO0FBQUM7QUFBQSxRQUFhO0FBQUEsS0FBRyxTQUFRLFNBQVMsR0FBRTtBQUFDLFdBQU8sRUFBRSxHQUFFLFNBQVMsSUFBRTtBQUFDLGFBQU87QUFBQSxVQUFLO0FBQUEsS0FBSSxNQUFLLFNBQVMsR0FBRTtBQUFDLFFBQUcsQ0FBQyxFQUFFO0FBQUcsWUFBTSxNQUFNLEVBQUU7QUFBTSxXQUFPO0FBQUE7QUFBSSxVQUFRLFlBQVU7QUFBRSxVQUFRLGdCQUFjO0FBQUUsVUFBUSxxREFBbUQ7QUFDaFgsVUFBUSxlQUFhLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLEFBQU8sS0FBUDtBQUFxQixZQUFNLE1BQU0sRUFBRSxLQUFJO0FBQUksUUFBSSxJQUFFLEVBQUUsSUFBRyxFQUFFLFFBQU8sSUFBRSxFQUFFLEtBQUksSUFBRSxFQUFFLEtBQUksSUFBRSxFQUFFO0FBQU8sUUFBRyxBQUFNLEtBQU4sTUFBUTtBQUFvRSxVQUFuRSxBQUFTLEVBQUUsUUFBWCxVQUFpQixLQUFFLEVBQUUsS0FBSSxJQUFFLEVBQUUsVUFBUyxBQUFTLEVBQUUsUUFBWCxVQUFpQixLQUFFLEtBQUcsRUFBRSxNQUFRLEVBQUUsUUFBTSxFQUFFLEtBQUs7QUFBYSxZQUFJLElBQUUsRUFBRSxLQUFLO0FBQWEsV0FBSSxLQUFLO0FBQUUsVUFBRSxLQUFLLEdBQUUsTUFBSSxDQUFDLEVBQUUsZUFBZSxNQUFLLEdBQUUsS0FBRyxBQUFTLEVBQUUsT0FBWCxVQUFlLEFBQVMsTUFBVCxTQUFXLEVBQUUsS0FBRyxFQUFFO0FBQUE7QUFBSSxRQUFJLElBQUUsVUFBVSxTQUFPO0FBQUUsUUFBRyxBQUFJLE1BQUo7QUFBTSxRQUFFLFdBQVM7QUFBQSxhQUFVLElBQUUsR0FBRTtBQUFDLFVBQUUsTUFBTTtBQUFHLGVBQVEsSUFBRSxHQUFFLElBQUUsR0FBRTtBQUFJLFVBQUUsS0FBRyxVQUFVLElBQUU7QUFBRyxRQUFFLFdBQVM7QUFBQTtBQUFFLFdBQU07QUFBQSxNQUFDLFVBQVM7QUFBQSxNQUFFLE1BQUssRUFBRTtBQUFBLE1BQ3hmLEtBQUk7QUFBQSxNQUFFLEtBQUk7QUFBQSxNQUFFLE9BQU07QUFBQSxNQUFFLFFBQU87QUFBQTtBQUFBO0FBQUksVUFBUSxnQkFBYyxTQUFTLEdBQUUsR0FBRTtBQUFDLFdBQVMsTUFBVCxVQUFhLEtBQUUsT0FBTSxJQUFFLENBQUMsVUFBUyxHQUFFLHVCQUFzQixHQUFFLGVBQWMsR0FBRSxnQkFBZSxHQUFFLGNBQWEsR0FBRSxVQUFTLE1BQUssVUFBUyxPQUFNLEVBQUUsV0FBUyxDQUFDLFVBQVMsR0FBRSxVQUFTLElBQVUsRUFBRSxXQUFTO0FBQUE7QUFBRyxVQUFRLGdCQUFjO0FBQUUsVUFBUSxnQkFBYyxTQUFTLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRSxLQUFLLE1BQUs7QUFBRyxhQUFFLE9BQUssR0FBUztBQUFBO0FBQUcsVUFBUSxZQUFVLFdBQVU7QUFBQyxXQUFNLENBQUMsU0FBUTtBQUFBO0FBQU8sVUFBUSxhQUFXLFNBQVMsR0FBRTtBQUFDLFdBQU0sQ0FBQyxVQUFTLEdBQUUsUUFBTztBQUFBO0FBQUksVUFBUSxpQkFBZTtBQUMzZSxVQUFRLE9BQUssU0FBUyxHQUFFO0FBQUMsV0FBTSxDQUFDLFVBQVMsR0FBRSxVQUFTLENBQUMsU0FBUSxJQUFHLFNBQVEsSUFBRyxPQUFNO0FBQUE7QUFBSSxVQUFRLE9BQUssU0FBUyxHQUFFLEdBQUU7QUFBQyxXQUFNLENBQUMsVUFBUyxHQUFFLE1BQUssR0FBRSxTQUFRLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBQTtBQUFJLFVBQVEsY0FBWSxTQUFTLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBSSxZQUFZLEdBQUU7QUFBQTtBQUFJLFVBQVEsYUFBVyxTQUFTLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBSSxXQUFXLEdBQUU7QUFBQTtBQUFJLFVBQVEsZ0JBQWMsV0FBVTtBQUFBO0FBQUcsVUFBUSxZQUFVLFNBQVMsR0FBRSxHQUFFO0FBQUMsV0FBTyxJQUFJLFVBQVUsR0FBRTtBQUFBO0FBQUksVUFBUSxzQkFBb0IsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBSSxvQkFBb0IsR0FBRSxHQUFFO0FBQUE7QUFDOWMsVUFBUSxrQkFBZ0IsU0FBUyxHQUFFLEdBQUU7QUFBQyxXQUFPLElBQUksZ0JBQWdCLEdBQUU7QUFBQTtBQUFJLFVBQVEsVUFBUSxTQUFTLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBSSxRQUFRLEdBQUU7QUFBQTtBQUFJLFVBQVEsYUFBVyxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsV0FBTyxJQUFJLFdBQVcsR0FBRSxHQUFFO0FBQUE7QUFBSSxVQUFRLFNBQU8sU0FBUyxHQUFFO0FBQUMsV0FBTyxJQUFJLE9BQU87QUFBQTtBQUFJLFVBQVEsV0FBUyxTQUFTLEdBQUU7QUFBQyxXQUFPLElBQUksU0FBUztBQUFBO0FBQUksVUFBUSxVQUFRO0FBQUE7OztBQ3RCclQ7QUFBQTtBQUdFLFNBQU8sVUFBa0I7QUFBQTs7O0FDSDNCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVFBO0FBQWEsTUFBSSxHQUFFLEdBQUUsR0FBRTtBQUFFLEVBQUcsQUFBVyxPQUFPLGVBQWxCLFlBQStCLEFBQWEsT0FBTyxZQUFZLE9BQWhDLGFBQXlDLEtBQUUsYUFBWSxRQUFRLGVBQWEsV0FBVTtBQUFDLFdBQU8sRUFBRTtBQUFBLE9BQWdCLEtBQUUsTUFBSyxJQUFFLEVBQUUsT0FBTSxRQUFRLGVBQWEsV0FBVTtBQUFDLFdBQU8sRUFBRSxRQUFNO0FBQUE7QUFBdkksU0FBdUUsR0FBTztBQUNsTCxFQUFHLEFBQWMsT0FBTyxVQUFyQixlQUE2QixBQUFhLE9BQU8sa0JBQXBCLGFBQXdDLEtBQUUsTUFBSyxJQUFFLE1BQUssSUFBRSxXQUFVO0FBQUMsUUFBRyxBQUFPLE1BQVA7QUFBUyxVQUFHO0FBQUMsWUFBSSxJQUFFLFFBQVE7QUFBZSxVQUFFLElBQUcsSUFBRyxJQUFFO0FBQUEsZUFBVyxHQUFOO0FBQVMsY0FBTSxXQUFXLEdBQUUsSUFBRztBQUFBO0FBQUEsS0FBSyxJQUFFLFNBQVMsR0FBRTtBQUFDLElBQU8sTUFBUCxPQUFTLFdBQVcsR0FBRSxHQUFFLEtBQUksS0FBRSxHQUFFLFdBQVcsR0FBRTtBQUFBLEtBQUssSUFBRSxTQUFTLEdBQUUsR0FBRTtBQUFDLFFBQUUsV0FBVyxHQUFFO0FBQUEsS0FBSSxJQUFFLFdBQVU7QUFBQyxpQkFBYTtBQUFBLEtBQUksUUFBUSx1QkFBcUIsV0FBVTtBQUFDLFdBQU07QUFBQSxLQUFJLElBQUUsUUFBUSwwQkFBd0IsV0FBVTtBQUFBLE9BQVksS0FBRSxPQUFPLFlBQVcsSUFBRSxPQUFPLGNBQWdCLEFBQWMsT0FBTyxXQUFyQixlQUFrQyxLQUM3ZixPQUFPLHNCQUFxQixBQUFhLE9BQU8sT0FBTyx5QkFBM0IsY0FBa0QsUUFBUSxNQUFNLHVKQUFzSixBQUFhLE9BQU8sS0FBcEIsY0FBdUIsUUFBUSxNQUFNLHVKQUF5SixJQUFFLElBQUcsSUFBRSxNQUFLLElBQUUsSUFBRyxJQUFFLEdBQUUsSUFBRSxHQUFFLFFBQVEsdUJBQXFCLFdBQVU7QUFBQyxXQUFPLFFBQVEsa0JBQ2hnQjtBQUFBLEtBQUcsSUFBRSxXQUFVO0FBQUEsS0FBRyxRQUFRLDBCQUF3QixTQUFTLEdBQUU7QUFBQyxRQUFFLEtBQUcsTUFBSSxJQUFFLFFBQVEsTUFBTSxxSEFBbUgsSUFBRSxJQUFFLElBQUUsS0FBSyxNQUFNLE1BQUksS0FBRztBQUFBLEtBQU8sSUFBRSxJQUFJLGtCQUFlLElBQUUsRUFBRSxPQUFNLEVBQUUsTUFBTSxZQUFVLFdBQVU7QUFBQyxRQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsVUFBSSxJQUFFLFFBQVE7QUFBZSxVQUFFLElBQUU7QUFBRSxVQUFHO0FBQUMsVUFBRSxJQUFHLEtBQUcsRUFBRSxZQUFZLFFBQU8sS0FBRSxJQUFHLElBQUU7QUFBQSxlQUFZLEdBQU47QUFBUyxjQUFNLEVBQUUsWUFBWSxPQUFNO0FBQUE7QUFBQTtBQUFTLFVBQUU7QUFBQSxLQUFJLElBQUUsU0FBUyxHQUFFO0FBQUMsUUFBRSxHQUFFLEtBQUksS0FBRSxJQUFHLEVBQUUsWUFBWTtBQUFBLEtBQVEsSUFBRSxTQUFTLEdBQUUsR0FBRTtBQUFDLFFBQ3RmLEVBQUUsV0FBVTtBQUFDLFFBQUUsUUFBUTtBQUFBLE9BQWlCO0FBQUEsS0FBSSxJQUFFLFdBQVU7QUFBQyxNQUFFLElBQUcsSUFBRTtBQUFBO0FBSFEsU0FBTyxHQUFPLEdBQXdWLEdBQW9CLEdBQTJELEdBQzdFLEdBQUssR0FBTyxHQUFLLEdBQUksR0FDNU4sR0FBcUI7QUFDMUwsYUFBVyxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFPLE1BQUUsS0FBSztBQUFHO0FBQUUsaUJBQU87QUFBQyxZQUFJLElBQUUsSUFBRSxNQUFJLEdBQUUsSUFBRSxFQUFFO0FBQUcsWUFBRyxBQUFTLE1BQVQsVUFBWSxJQUFFLEVBQUUsR0FBRTtBQUFHLFlBQUUsS0FBRyxHQUFFLEVBQUUsS0FBRyxHQUFFLElBQUU7QUFBQTtBQUFPO0FBQUE7QUFBQTtBQUFTLGFBQVcsR0FBRTtBQUFDLGVBQUUsRUFBRSxJQUFVLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBQTtBQUNoUCxhQUFXLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFHLFFBQUcsQUFBUyxNQUFULFFBQVc7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFNLFVBQUcsTUFBSSxHQUFFO0FBQUMsVUFBRSxLQUFHO0FBQUU7QUFBRSxtQkFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sSUFBRSxLQUFHO0FBQUMsZ0JBQUksSUFBRSxJQUFHLEtBQUUsS0FBRyxHQUFFLElBQUUsRUFBRSxJQUFHLElBQUUsSUFBRSxHQUFFLElBQUUsRUFBRTtBQUFHLGdCQUFHLEFBQVMsTUFBVCxVQUFZLElBQUUsRUFBRSxHQUFFO0FBQUcsY0FBUyxNQUFULFVBQVksSUFBRSxFQUFFLEdBQUUsS0FBSSxHQUFFLEtBQUcsR0FBRSxFQUFFLEtBQUcsR0FBRSxJQUFFLEtBQUksR0FBRSxLQUFHLEdBQUUsRUFBRSxLQUFHLEdBQUUsSUFBRTtBQUFBLHFCQUFXLEFBQVMsTUFBVCxVQUFZLElBQUUsRUFBRSxHQUFFO0FBQUcsZ0JBQUUsS0FBRyxHQUFFLEVBQUUsS0FBRyxHQUFFLElBQUU7QUFBQTtBQUFPO0FBQUE7QUFBQTtBQUFTLGFBQU87QUFBQTtBQUFFLFdBQU87QUFBQTtBQUFLLGFBQVcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsWUFBVSxFQUFFO0FBQVUsV0FBTyxBQUFJLE1BQUosSUFBTSxJQUFFLEVBQUUsS0FBRyxFQUFFO0FBQUE7QUFBRyxNQUFJLElBQUUsSUFBRyxJQUFFLElBQUcsSUFBRSxHQUFFLElBQUUsTUFBSyxJQUFFLEdBQUUsSUFBRSxJQUFHLElBQUUsSUFBRyxJQUFFO0FBQ2phLGFBQVcsR0FBRTtBQUFDLGFBQVEsSUFBRSxFQUFFLElBQUcsQUFBTyxNQUFQLFFBQVU7QUFBQyxVQUFHLEFBQU8sRUFBRSxhQUFUO0FBQWtCLFVBQUU7QUFBQSxlQUFXLEVBQUUsYUFBVztBQUFFLFVBQUUsSUFBRyxFQUFFLFlBQVUsRUFBRSxnQkFBZSxFQUFFLEdBQUU7QUFBQTtBQUFRO0FBQU0sVUFBRSxFQUFFO0FBQUE7QUFBQTtBQUFJLGFBQVcsR0FBRTtBQUFXLFFBQVYsSUFBRSxJQUFHLEVBQUUsSUFBTSxDQUFDO0FBQUUsVUFBRyxBQUFPLEVBQUUsT0FBVDtBQUFZLFlBQUUsSUFBRyxFQUFFO0FBQUEsV0FBTztBQUFDLFlBQUksSUFBRSxFQUFFO0FBQUcsUUFBTyxNQUFQLFFBQVUsRUFBRSxHQUFFLEVBQUUsWUFBVTtBQUFBO0FBQUE7QUFDdFAsYUFBVyxHQUFFLEdBQUU7QUFBQyxRQUFFLElBQUcsS0FBSSxLQUFFLElBQUcsTUFBSyxJQUFFO0FBQUcsUUFBSSxJQUFFO0FBQUUsUUFBRztBQUFNLFdBQUwsRUFBRSxJQUFPLElBQUUsRUFBRSxJQUFHLEFBQU8sTUFBUCxRQUFXLEVBQUUsR0FBRSxpQkFBZSxNQUFJLEtBQUcsQ0FBQyxRQUFRLDJCQUF5QjtBQUFDLFlBQUksSUFBRSxFQUFFO0FBQVMsWUFBRyxBQUFhLE9BQU8sS0FBcEIsWUFBc0I7QUFBQyxZQUFFLFdBQVMsTUFBSyxJQUFFLEVBQUU7QUFBYyxjQUFJLElBQUUsRUFBRSxFQUFFLGtCQUFnQjtBQUFHLGNBQUUsUUFBUSxnQkFBZSxBQUFhLE9BQU8sS0FBcEIsYUFBc0IsRUFBRSxXQUFTLElBQUUsTUFBSSxFQUFFLE1BQUksRUFBRSxJQUFHLEVBQUU7QUFBQTtBQUFRLFlBQUU7QUFBRyxZQUFFLEVBQUU7QUFBQTtBQUFHLFVBQUcsQUFBTyxNQUFQO0FBQVMsWUFBSSxJQUFFO0FBQUEsV0FBTztBQUFDLFlBQUksSUFBRSxFQUFFO0FBQUcsUUFBTyxNQUFQLFFBQVUsRUFBRSxHQUFFLEVBQUUsWUFBVSxJQUFHLElBQUU7QUFBQTtBQUFHLGFBQU87QUFBQSxjQUFFO0FBQVEsVUFBRSxNQUFLLElBQUUsR0FBRSxJQUFFO0FBQUE7QUFBQTtBQUFJLE1BQUksSUFBRTtBQUFFLFVBQVEsd0JBQXNCO0FBQ3RlLFVBQVEsNkJBQTJCO0FBQUUsVUFBUSx1QkFBcUI7QUFBRSxVQUFRLDBCQUF3QjtBQUFFLFVBQVEscUJBQW1CO0FBQUssVUFBUSxnQ0FBOEI7QUFBRSxVQUFRLDBCQUF3QixTQUFTLEdBQUU7QUFBQyxNQUFFLFdBQVM7QUFBQTtBQUFNLFVBQVEsNkJBQTJCLFdBQVU7QUFBQyxTQUFHLEtBQUksS0FBRSxJQUFHLEVBQUU7QUFBQTtBQUFLLFVBQVEsbUNBQWlDLFdBQVU7QUFBQyxXQUFPO0FBQUE7QUFBRyxVQUFRLGdDQUE4QixXQUFVO0FBQUMsV0FBTyxFQUFFO0FBQUE7QUFDcGEsVUFBUSxnQkFBYyxTQUFTLEdBQUU7QUFBQyxZQUFPO0FBQUEsV0FBUTtBQUFBLFdBQU87QUFBQSxXQUFPO0FBQUUsWUFBSSxJQUFFO0FBQUU7QUFBQTtBQUFjLFlBQUU7QUFBQTtBQUFFLFFBQUksSUFBRTtBQUFFLFFBQUU7QUFBRSxRQUFHO0FBQUMsYUFBTztBQUFBLGNBQUk7QUFBUSxVQUFFO0FBQUE7QUFBQTtBQUFJLFVBQVEsMEJBQXdCLFdBQVU7QUFBQTtBQUFHLFVBQVEsd0JBQXNCO0FBQUUsVUFBUSwyQkFBeUIsU0FBUyxHQUFFLEdBQUU7QUFBQyxZQUFPO0FBQUEsV0FBUTtBQUFBLFdBQU87QUFBQSxXQUFPO0FBQUEsV0FBTztBQUFBLFdBQU87QUFBRTtBQUFBO0FBQWMsWUFBRTtBQUFBO0FBQUUsUUFBSSxJQUFFO0FBQUUsUUFBRTtBQUFFLFFBQUc7QUFBQyxhQUFPO0FBQUEsY0FBSTtBQUFRLFVBQUU7QUFBQTtBQUFBO0FBQ3BXLFVBQVEsNEJBQTBCLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsUUFBUTtBQUE4RixZQUEvRSxBQUFXLE9BQU8sS0FBbEIsWUFBcUIsQUFBTyxNQUFQLE9BQVUsS0FBRSxFQUFFLE9BQU0sSUFBRSxBQUFXLE9BQU8sS0FBbEIsWUFBcUIsSUFBRSxJQUFFLElBQUUsSUFBRSxLQUFHLElBQUUsR0FBUztBQUFBLFdBQVE7QUFBRSxZQUFJLElBQUU7QUFBRztBQUFBLFdBQVc7QUFBRSxZQUFFO0FBQUk7QUFBQSxXQUFXO0FBQUUsWUFBRTtBQUFXO0FBQUEsV0FBVztBQUFFLFlBQUU7QUFBSTtBQUFBO0FBQWMsWUFBRTtBQUFBO0FBQUksZUFBRSxJQUFFLEdBQUUsSUFBRSxDQUFDLElBQUcsS0FBSSxVQUFTLEdBQUUsZUFBYyxHQUFFLFdBQVUsR0FBRSxnQkFBZSxHQUFFLFdBQVUsS0FBSSxJQUFFLElBQUcsR0FBRSxZQUFVLEdBQUUsRUFBRSxHQUFFLElBQUcsQUFBTyxFQUFFLE9BQVQsUUFBYSxNQUFJLEVBQUUsTUFBSyxLQUFFLE1BQUksSUFBRSxJQUFHLEVBQUUsR0FBRSxJQUFFLE9BQU0sR0FBRSxZQUFVLEdBQUUsRUFBRSxHQUFFLElBQUcsS0FBRyxLQUFJLEtBQUUsSUFBRyxFQUFFLE1BQVk7QUFBQTtBQUMxZCxVQUFRLHdCQUFzQixTQUFTLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBRSxXQUFPLFdBQVU7QUFBQyxVQUFJLElBQUU7QUFBRSxVQUFFO0FBQUUsVUFBRztBQUFDLGVBQU8sRUFBRSxNQUFNLE1BQUs7QUFBQSxnQkFBVztBQUFRLFlBQUU7QUFBQTtBQUFBO0FBQUE7QUFBQTs7O0FDbkI3SDtBQUFBO0FBR0UsU0FBTyxVQUFrQjtBQUFBOzs7QUNIM0I7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBV0E7QUFBYSxNQUFJLEtBQVcsaUJBQVMsSUFBVSx5QkFBaUIsSUFBVTtBQUFhLGFBQVcsR0FBRTtBQUFDLGFBQVEsSUFBRSwyREFBeUQsR0FBRSxJQUFFLEdBQUUsSUFBRSxVQUFVLFFBQU87QUFBSSxXQUFHLGFBQVcsbUJBQW1CLFVBQVU7QUFBSSxXQUFNLDJCQUF5QixJQUFFLGFBQVcsSUFBRTtBQUFBO0FBQWlILE1BQUcsQ0FBQztBQUFHLFVBQU0sTUFBTSxFQUFFO0FBQU0sTUFBSSxLQUFHLElBQUksT0FBSSxLQUFHO0FBQUcsY0FBWSxHQUFFLEdBQUU7QUFBQyxPQUFHLEdBQUUsSUFBRyxHQUFHLElBQUUsV0FBVTtBQUFBO0FBQzNlLGNBQVksR0FBRSxHQUFFO0FBQVMsU0FBUixHQUFHLEtBQUcsR0FBTSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU87QUFBSSxTQUFHLElBQUksRUFBRTtBQUFBO0FBQ3pELE1BQUksS0FBRyxDQUFFLENBQWMsT0FBTyxVQUFyQixlQUE2QixBQUFjLE9BQU8sT0FBTyxZQUE1QixlQUFzQyxBQUFjLE9BQU8sT0FBTyxTQUFTLGlCQUFyQyxjQUFvRCxLQUFHLCtWQUE4VixLQUFHLE9BQU8sVUFBVSxnQkFDcmYsS0FBRyxJQUFHLEtBQUc7QUFBRyxjQUFZLEdBQUU7QUFBQyxXQUFHLEdBQUcsS0FBSyxJQUFHLEtBQVMsS0FBTSxHQUFHLEtBQUssSUFBRyxLQUFTLEtBQU0sR0FBRyxLQUFLLEtBQVUsR0FBRyxLQUFHLEtBQUcsSUFBRyxLQUFHLElBQVM7QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUcsQUFBTyxNQUFQLFFBQVUsQUFBSSxFQUFFLFNBQU47QUFBVyxhQUFNO0FBQUcsWUFBTyxPQUFPO0FBQUEsV0FBUTtBQUFBLFdBQWdCO0FBQVMsZUFBTTtBQUFBLFdBQVE7QUFBVSxlQUFHLElBQVEsS0FBTSxBQUFPLE1BQVAsT0FBZSxDQUFDLEVBQUUsa0JBQWdCLEtBQUUsRUFBRSxjQUFjLE1BQU0sR0FBRSxJQUFTLEFBQVUsTUFBVixXQUFhLEFBQVUsTUFBVjtBQUFBO0FBQW9CLGVBQU07QUFBQTtBQUFBO0FBQ3pYLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUcsQUFBTyxNQUFQLFFBQVUsQUFBYyxPQUFPLEtBQXJCLGVBQXdCLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBRyxhQUFNO0FBQUcsUUFBRztBQUFFLGFBQU07QUFBRyxRQUFHLEFBQU8sTUFBUDtBQUFTLGNBQU8sRUFBRTtBQUFBLGFBQVc7QUFBRSxpQkFBTSxDQUFDO0FBQUEsYUFBTztBQUFFLGlCQUFNLEFBQUssTUFBTDtBQUFBLGFBQVk7QUFBRSxpQkFBTyxNQUFNO0FBQUEsYUFBUTtBQUFFLGlCQUFPLE1BQU0sTUFBSSxJQUFFO0FBQUE7QUFBRSxXQUFNO0FBQUE7QUFBRyxhQUFXLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxTQUFLLGtCQUFnQixBQUFJLE1BQUosS0FBTyxBQUFJLE1BQUosS0FBTyxBQUFJLE1BQUosR0FBTSxLQUFLLGdCQUFjLEdBQUUsS0FBSyxxQkFBbUIsR0FBRSxLQUFLLGtCQUFnQixHQUFFLEtBQUssZUFBYSxHQUFFLEtBQUssT0FBSyxHQUFFLEtBQUssY0FBWSxHQUFFLEtBQUssb0JBQWtCO0FBQUE7QUFBRSxNQUFJLElBQUU7QUFDbmIseUlBQXVJLE1BQU0sS0FBSyxRQUFRLFNBQVMsR0FBRTtBQUFDLE1BQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxNQUFLLElBQUc7QUFBQTtBQUFNLEdBQUMsQ0FBQyxpQkFBZ0IsbUJBQWtCLENBQUMsYUFBWSxVQUFTLENBQUMsV0FBVSxRQUFPLENBQUMsYUFBWSxlQUFlLFFBQVEsU0FBUyxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBRyxNQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsSUFBRyxNQUFLLElBQUc7QUFBQTtBQUFNLEdBQUMsbUJBQWtCLGFBQVksY0FBYSxTQUFTLFFBQVEsU0FBUyxHQUFFO0FBQUMsTUFBRSxLQUFHLElBQUksRUFBRSxHQUFFLEdBQUUsSUFBRyxFQUFFLGVBQWMsTUFBSyxJQUFHO0FBQUE7QUFDdmUsR0FBQyxlQUFjLDZCQUE0QixhQUFZLGlCQUFpQixRQUFRLFNBQVMsR0FBRTtBQUFDLE1BQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxNQUFLLElBQUc7QUFBQTtBQUFNLGdQQUE4TyxNQUFNLEtBQUssUUFBUSxTQUFTLEdBQUU7QUFBQyxNQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsZUFBYyxNQUFLLElBQUc7QUFBQTtBQUNyYixHQUFDLFdBQVUsWUFBVyxTQUFRLFlBQVksUUFBUSxTQUFTLEdBQUU7QUFBQyxNQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsTUFBSyxJQUFHO0FBQUE7QUFBTSxHQUFDLFdBQVUsWUFBWSxRQUFRLFNBQVMsR0FBRTtBQUFDLE1BQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxNQUFLLElBQUc7QUFBQTtBQUFNLEdBQUMsUUFBTyxRQUFPLFFBQU8sUUFBUSxRQUFRLFNBQVMsR0FBRTtBQUFDLE1BQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxNQUFLLElBQUc7QUFBQTtBQUFNLEdBQUMsV0FBVSxTQUFTLFFBQVEsU0FBUyxHQUFFO0FBQUMsTUFBRSxLQUFHLElBQUksRUFBRSxHQUFFLEdBQUUsSUFBRyxFQUFFLGVBQWMsTUFBSyxJQUFHO0FBQUE7QUFBTSxNQUFJLEtBQUc7QUFBZ0IsY0FBWSxHQUFFO0FBQUMsV0FBTyxFQUFFLEdBQUc7QUFBQTtBQUMzWSw0akNBQTBqQyxNQUFNLEtBQUssUUFBUSxTQUFTLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRSxRQUFRLElBQ3ptQztBQUFJLE1BQUUsS0FBRyxJQUFJLEVBQUUsR0FBRSxHQUFFLElBQUcsR0FBRSxNQUFLLElBQUc7QUFBQTtBQUFNLDZFQUEyRSxNQUFNLEtBQUssUUFBUSxTQUFTLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRSxRQUFRLElBQUc7QUFBSSxNQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsZ0NBQStCLElBQUc7QUFBQTtBQUFNLEdBQUMsWUFBVyxZQUFXLGFBQWEsUUFBUSxTQUFTLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRSxRQUFRLElBQUc7QUFBSSxNQUFFLEtBQUcsSUFBSSxFQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUUsd0NBQXVDLElBQUc7QUFBQTtBQUFNLEdBQUMsWUFBVyxlQUFlLFFBQVEsU0FBUyxHQUFFO0FBQUMsTUFBRSxLQUFHLElBQUksRUFBRSxHQUFFLEdBQUUsSUFBRyxFQUFFLGVBQWMsTUFBSyxJQUFHO0FBQUE7QUFDL2MsSUFBRSxZQUFVLElBQUksRUFBRSxhQUFZLEdBQUUsSUFBRyxjQUFhLGdDQUErQixJQUFHO0FBQUksR0FBQyxPQUFNLFFBQU8sVUFBUyxjQUFjLFFBQVEsU0FBUyxHQUFFO0FBQUMsTUFBRSxLQUFHLElBQUksRUFBRSxHQUFFLEdBQUUsSUFBRyxFQUFFLGVBQWMsTUFBSyxJQUFHO0FBQUE7QUFDekwsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsZUFBZSxLQUFHLEVBQUUsS0FBRyxNQUFTLElBQUUsQUFBTyxNQUFQLE9BQVMsQUFBSSxFQUFFLFNBQU4sSUFBVyxJQUFFLEtBQUcsR0FBRSxLQUFFLEVBQUUsV0FBUyxBQUFNLEVBQUUsT0FBUixPQUFZLEFBQU0sRUFBRSxPQUFSLE9BQVksQUFBTSxFQUFFLE9BQVIsT0FBWSxBQUFNLEVBQUUsT0FBUjtBQUFpQixTQUFJLElBQUcsR0FBRSxHQUFFLEdBQUUsTUFBSyxLQUFFLE9BQU0sS0FBRyxBQUFPLE1BQVAsT0FBUyxHQUFHLE1BQUssQ0FBTyxNQUFQLE9BQVMsRUFBRSxnQkFBZ0IsS0FBRyxFQUFFLGFBQWEsR0FBRSxLQUFHLE1BQUksRUFBRSxrQkFBZ0IsRUFBRSxFQUFFLGdCQUFjLEFBQU8sTUFBUCxPQUFTLEFBQUksRUFBRSxTQUFOLElBQVcsS0FBRyxLQUFHLElBQUcsS0FBRSxFQUFFLGVBQWMsSUFBRSxFQUFFLG9CQUFtQixBQUFPLE1BQVAsT0FBUyxFQUFFLGdCQUFnQixLQUFJLEtBQUUsRUFBRSxNQUFLLElBQUUsQUFBSSxNQUFKLEtBQU8sQUFBSSxNQUFKLEtBQU8sQUFBSyxNQUFMLEtBQU8sS0FBRyxLQUFHLEdBQUUsSUFBRSxFQUFFLGVBQWUsR0FBRSxHQUFFLEtBQUcsRUFBRSxhQUFhLEdBQUU7QUFBQTtBQUM1ZCxNQUFJLEtBQUcsR0FBRyxvREFBbUQsS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUcsT0FBTSxLQUFHLE9BQU0sS0FBRyxPQUFNLEtBQUc7QUFDaE4sRUFBRyxBQUFhLE9BQU8sVUFBcEIsY0FBNEIsT0FBTyxPQUFTLEtBQUUsT0FBTyxLQUFJLEtBQUcsRUFBRSxrQkFBaUIsS0FBRyxFQUFFLGlCQUFnQixLQUFHLEVBQUUsbUJBQWtCLEtBQUcsRUFBRSxzQkFBcUIsS0FBRyxFQUFFLG1CQUFrQixLQUFHLEVBQUUsbUJBQWtCLEtBQUcsRUFBRSxrQkFBaUIsS0FBRyxFQUFFLHNCQUFxQixLQUFHLEVBQUUsbUJBQWtCLEtBQUcsRUFBRSx3QkFBdUIsS0FBRyxFQUFFLGVBQWMsS0FBRyxFQUFFLGVBQWMsS0FBRyxFQUFFLGdCQUFlLEVBQUUsZ0JBQWUsS0FBRyxFQUFFLG9CQUFtQixLQUFHLEVBQUUsMkJBQTBCLEtBQUcsRUFBRSxvQkFBbUIsS0FBRyxFQUFFO0FBQXpaLFNBQzNDLEtBQUcsQUFBYSxPQUFPLFVBQXBCLGNBQTRCLE9BQU87QUFBUyxjQUFZLEdBQUU7QUFBQyxXQUFHLEFBQU8sTUFBUCxRQUFVLEFBQVcsT0FBTyxLQUFsQixXQUEyQixPQUFLLEtBQUUsTUFBSSxFQUFFLE9BQUssRUFBRSxlQUFvQixBQUFhLE9BQU8sS0FBcEIsYUFBc0IsSUFBRTtBQUFBO0FBQUssTUFBSTtBQUFHLGNBQVksR0FBRTtBQUFDLFFBQUcsQUFBUyxPQUFUO0FBQVksVUFBRztBQUFDLGNBQU07QUFBQSxlQUFlLEdBQU47QUFBUyxZQUFJLElBQUUsRUFBRSxNQUFNLE9BQU8sTUFBTTtBQUFnQixhQUFHLEtBQUcsRUFBRSxNQUFJO0FBQUE7QUFBRyxXQUFNO0FBQUEsSUFBSyxLQUFHO0FBQUE7QUFBRSxNQUFJLEtBQUc7QUFDalUsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFHLENBQUMsS0FBRztBQUFHLGFBQU07QUFBRyxTQUFHO0FBQUcsUUFBSSxJQUFFLE1BQU07QUFBa0IsVUFBTSxvQkFBa0I7QUFBTyxRQUFHO0FBQUMsVUFBRztBQUFFLFlBQUcsSUFBRSxXQUFVO0FBQUMsZ0JBQU07QUFBQSxXQUFVLE9BQU8sZUFBZSxFQUFFLFdBQVUsU0FBUSxDQUFDLEtBQUksV0FBVTtBQUFDLGdCQUFNO0FBQUEsYUFBWSxBQUFXLE9BQU8sV0FBbEIsWUFBMkIsUUFBUSxXQUFVO0FBQUMsY0FBRztBQUFDLG9CQUFRLFVBQVUsR0FBRTtBQUFBLG1CQUFVLEdBQU47QUFBUyxnQkFBSSxJQUFFO0FBQUE7QUFBRSxrQkFBUSxVQUFVLEdBQUUsSUFBRztBQUFBLGVBQU87QUFBQyxjQUFHO0FBQUMsY0FBRTtBQUFBLG1CQUFhLEdBQU47QUFBUyxnQkFBRTtBQUFBO0FBQUUsWUFBRSxLQUFLLEVBQUU7QUFBQTtBQUFBLFdBQWU7QUFBQyxZQUFHO0FBQUMsZ0JBQU07QUFBQSxpQkFBZSxHQUFOO0FBQVMsY0FBRTtBQUFBO0FBQUU7QUFBQTtBQUFBLGFBQVcsR0FBTjtBQUFTLFVBQUcsS0FBRyxLQUFHLEFBQVcsT0FBTyxFQUFFLFNBQXBCLFVBQTBCO0FBQUMsaUJBQVEsSUFBRSxFQUFFLE1BQU0sTUFBTTtBQUFBLElBQ25mLElBQUUsRUFBRSxNQUFNLE1BQU07QUFBQSxJQUFNLElBQUUsRUFBRSxTQUFPLEdBQUUsSUFBRSxFQUFFLFNBQU8sR0FBRSxLQUFHLEtBQUcsS0FBRyxLQUFHLEVBQUUsT0FBSyxFQUFFO0FBQUk7QUFBSSxlQUFLLEtBQUcsS0FBRyxLQUFHLEdBQUUsS0FBSTtBQUFJLGNBQUcsRUFBRSxPQUFLLEVBQUUsSUFBRztBQUFDLGdCQUFHLEFBQUksTUFBSixLQUFPLEFBQUksTUFBSjtBQUFPO0FBQUcsb0JBQUcsS0FBSSxLQUFJLElBQUUsS0FBRyxFQUFFLE9BQUssRUFBRTtBQUFHLHlCQUFNO0FBQUEsSUFBSyxFQUFFLEdBQUcsUUFBUSxZQUFXO0FBQUEscUJBQWMsS0FBRyxLQUFHLEtBQUc7QUFBRztBQUFBO0FBQUE7QUFBQSxjQUFRO0FBQVEsV0FBRyxJQUFHLE1BQU0sb0JBQWtCO0FBQUE7QUFBRSxXQUFPLEtBQUUsSUFBRSxFQUFFLGVBQWEsRUFBRSxPQUFLLE1BQUksR0FBRyxLQUFHO0FBQUE7QUFDN1QsY0FBWSxHQUFFO0FBQUMsWUFBTyxFQUFFO0FBQUEsV0FBVTtBQUFFLGVBQU8sR0FBRyxFQUFFO0FBQUEsV0FBVztBQUFHLGVBQU8sR0FBRztBQUFBLFdBQWE7QUFBRyxlQUFPLEdBQUc7QUFBQSxXQUFpQjtBQUFHLGVBQU8sR0FBRztBQUFBLFdBQXFCO0FBQUEsV0FBTztBQUFBLFdBQU87QUFBRyxlQUFPLElBQUUsR0FBRyxFQUFFLE1BQUssS0FBSTtBQUFBLFdBQU87QUFBRyxlQUFPLElBQUUsR0FBRyxFQUFFLEtBQUssUUFBTyxLQUFJO0FBQUEsV0FBTztBQUFHLGVBQU8sSUFBRSxHQUFHLEVBQUUsS0FBSyxTQUFRLEtBQUk7QUFBQSxXQUFPO0FBQUUsZUFBTyxJQUFFLEdBQUcsRUFBRSxNQUFLLEtBQUk7QUFBQTtBQUFVLGVBQU07QUFBQTtBQUFBO0FBQzlULGNBQVksR0FBRTtBQUFDLFFBQUcsQUFBTSxLQUFOO0FBQVEsYUFBTztBQUFLLFFBQUcsQUFBYSxPQUFPLEtBQXBCO0FBQXNCLGFBQU8sRUFBRSxlQUFhLEVBQUUsUUFBTTtBQUFLLFFBQUcsQUFBVyxPQUFPLEtBQWxCO0FBQW9CLGFBQU87QUFBRSxZQUFPO0FBQUEsV0FBUTtBQUFHLGVBQU07QUFBQSxXQUFnQjtBQUFHLGVBQU07QUFBQSxXQUFjO0FBQUcsZUFBTTtBQUFBLFdBQWdCO0FBQUcsZUFBTTtBQUFBLFdBQWtCO0FBQUcsZUFBTTtBQUFBLFdBQWdCO0FBQUcsZUFBTTtBQUFBO0FBQWUsUUFBRyxBQUFXLE9BQU8sS0FBbEI7QUFBb0IsY0FBTyxFQUFFO0FBQUEsYUFBZTtBQUFHLGlCQUFPLEdBQUUsZUFBYSxhQUFXO0FBQUEsYUFBaUI7QUFBRyxpQkFBTyxHQUFFLFNBQVMsZUFBYSxhQUFXO0FBQUEsYUFBaUI7QUFBRyxjQUFJLElBQUUsRUFBRTtBQUFPLHFCQUFFLEVBQUUsZUFBYSxFQUFFLFFBQU0sSUFDNWUsRUFBRSxlQUFjLENBQUssTUFBTCxLQUFPLGdCQUFjLElBQUUsTUFBSTtBQUFBLGFBQW1CO0FBQUcsaUJBQU8sR0FBRyxFQUFFO0FBQUEsYUFBVztBQUFHLGlCQUFPLEdBQUcsRUFBRTtBQUFBLGFBQWM7QUFBRyxjQUFFLEVBQUUsVUFBUyxJQUFFLEVBQUU7QUFBTSxjQUFHO0FBQUMsbUJBQU8sR0FBRyxFQUFFO0FBQUEsbUJBQVUsR0FBTjtBQUFBO0FBQUE7QUFBVyxXQUFPO0FBQUE7QUFBSyxjQUFZLEdBQUU7QUFBQyxZQUFPLE9BQU87QUFBQSxXQUFRO0FBQUEsV0FBZTtBQUFBLFdBQWM7QUFBQSxXQUFjO0FBQUEsV0FBYztBQUFZLGVBQU87QUFBQTtBQUFVLGVBQU07QUFBQTtBQUFBO0FBQUksY0FBWSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBSyxXQUFPLEtBQUUsRUFBRSxhQUFXLEFBQVUsRUFBRSxrQkFBWixXQUE0QixDQUFhLE1BQWIsY0FBZ0IsQUFBVSxNQUFWO0FBQUE7QUFDcGEsY0FBWSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsS0FBRyxZQUFVLFNBQVEsSUFBRSxPQUFPLHlCQUF5QixFQUFFLFlBQVksV0FBVSxJQUFHLElBQUUsS0FBRyxFQUFFO0FBQUcsUUFBRyxDQUFDLEVBQUUsZUFBZSxNQUFJLEFBQWMsT0FBTyxLQUFyQixlQUF3QixBQUFhLE9BQU8sRUFBRSxPQUF0QixjQUEyQixBQUFhLE9BQU8sRUFBRSxPQUF0QixZQUEwQjtBQUFDLFVBQUksSUFBRSxFQUFFLEtBQUksSUFBRSxFQUFFO0FBQUksb0JBQU8sZUFBZSxHQUFFLEdBQUUsQ0FBQyxjQUFhLElBQUcsS0FBSSxXQUFVO0FBQUMsZUFBTyxFQUFFLEtBQUs7QUFBQSxTQUFPLEtBQUksU0FBUyxJQUFFO0FBQUMsWUFBRSxLQUFHLElBQUUsRUFBRSxLQUFLLE1BQUs7QUFBQSxXQUFNLE9BQU8sZUFBZSxHQUFFLEdBQUUsQ0FBQyxZQUFXLEVBQUUsY0FBbUIsQ0FBQyxVQUFTLFdBQVU7QUFBQyxlQUFPO0FBQUEsU0FBRyxVQUFTLFNBQVMsSUFBRTtBQUFDLFlBQUUsS0FBRztBQUFBLFNBQUcsY0FBYSxXQUFVO0FBQUMsVUFBRSxnQkFDeGYsTUFBSyxPQUFPLEVBQUU7QUFBQTtBQUFBO0FBQUE7QUFBTSxjQUFZLEdBQUU7QUFBQyxNQUFFLGlCQUFnQixHQUFFLGdCQUFjLEdBQUc7QUFBQTtBQUFJLGNBQVksR0FBRTtBQUFDLFFBQUcsQ0FBQztBQUFFLGFBQU07QUFBRyxRQUFJLElBQUUsRUFBRTtBQUFjLFFBQUcsQ0FBQztBQUFFLGFBQU07QUFBRyxRQUFJLElBQUUsRUFBRSxZQUFlLElBQUU7QUFBRyxnQkFBSSxLQUFFLEdBQUcsS0FBRyxFQUFFLFVBQVEsU0FBTyxVQUFRLEVBQUUsUUFBTyxJQUFFLEdBQVMsTUFBSSxJQUFHLEdBQUUsU0FBUyxJQUFHLE1BQUk7QUFBQTtBQUFHLGNBQVksR0FBRTtBQUFzRCxRQUFyRCxJQUFFLEtBQUksQ0FBYyxPQUFPLFlBQXJCLGNBQThCLFdBQVMsU0FBVyxBQUFjLE9BQU8sS0FBckI7QUFBdUIsYUFBTztBQUFLLFFBQUc7QUFBQyxhQUFPLEVBQUUsaUJBQWUsRUFBRTtBQUFBLGFBQVcsR0FBTjtBQUFTLGFBQU8sRUFBRTtBQUFBO0FBQUE7QUFDL1osY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFRLFdBQU8sRUFBRSxJQUFHLEdBQUUsQ0FBQyxnQkFBZSxRQUFPLGNBQWEsUUFBTyxPQUFNLFFBQU8sU0FBYyxLQUFJLEVBQUUsY0FBYztBQUFBO0FBQWlCLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEFBQU0sRUFBRSxnQkFBUixPQUFxQixLQUFHLEVBQUUsY0FBYSxJQUFFLEFBQU0sRUFBRSxXQUFSLE9BQWdCLEVBQUUsVUFBUSxFQUFFO0FBQWUsUUFBRSxHQUFHLEFBQU0sRUFBRSxTQUFSLE9BQWMsRUFBRSxRQUFNLElBQUcsRUFBRSxnQkFBYyxDQUFDLGdCQUFlLEdBQUUsY0FBYSxHQUFFLFlBQVcsQUFBYSxFQUFFLFNBQWYsY0FBcUIsQUFBVSxFQUFFLFNBQVosVUFBaUIsQUFBTSxFQUFFLFdBQVIsT0FBZ0IsQUFBTSxFQUFFLFNBQVI7QUFBQTtBQUFlLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRSxFQUFFLFNBQVEsQUFBTSxLQUFOLFFBQVMsR0FBRyxHQUFFLFdBQVUsR0FBRTtBQUFBO0FBQzNkLGNBQVksR0FBRSxHQUFFO0FBQUMsT0FBRyxHQUFFO0FBQUcsUUFBSSxJQUFFLEdBQUcsRUFBRSxRQUFPLElBQUUsRUFBRTtBQUFLLFFBQUcsQUFBTSxLQUFOO0FBQVEsTUFBRyxBQUFXLE1BQVgsV0FBaUIsQ0FBSSxNQUFKLEtBQU8sQUFBSyxFQUFFLFVBQVAsTUFBYyxFQUFFLFNBQU8sTUFBRSxHQUFFLFFBQU0sS0FBRyxLQUFPLEVBQUUsVUFBUSxLQUFHLEtBQUksR0FBRSxRQUFNLEtBQUc7QUFBQSxhQUFXLEFBQVcsTUFBWCxZQUFjLEFBQVUsTUFBVixTQUFZO0FBQUMsUUFBRSxnQkFBZ0I7QUFBUztBQUFBO0FBQU8sTUFBRSxlQUFlLFdBQVMsR0FBRyxHQUFFLEVBQUUsTUFBSyxLQUFHLEVBQUUsZUFBZSxtQkFBaUIsR0FBRyxHQUFFLEVBQUUsTUFBSyxHQUFHLEVBQUUsZ0JBQWUsQUFBTSxFQUFFLFdBQVIsUUFBaUIsQUFBTSxFQUFFLGtCQUFSLFFBQXlCLEdBQUUsaUJBQWUsQ0FBQyxDQUFDLEVBQUU7QUFBQTtBQUNuWixjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRyxFQUFFLGVBQWUsWUFBVSxFQUFFLGVBQWUsaUJBQWdCO0FBQUMsVUFBSSxJQUFFLEVBQUU7QUFBSyxVQUFHLENBQUUsQ0FBVyxNQUFYLFlBQWMsQUFBVSxNQUFWLFdBQWEsQUFBUyxFQUFFLFVBQVgsVUFBa0IsQUFBTyxFQUFFLFVBQVQ7QUFBZ0I7QUFBTyxVQUFFLEtBQUcsRUFBRSxjQUFjLGNBQWEsS0FBRyxNQUFJLEVBQUUsU0FBUSxHQUFFLFFBQU0sSUFBRyxFQUFFLGVBQWE7QUFBQTtBQUFFLFFBQUUsRUFBRSxNQUFLLEFBQUssTUFBTCxNQUFTLEdBQUUsT0FBSyxLQUFJLEVBQUUsaUJBQWUsQ0FBQyxDQUFDLEVBQUUsY0FBYyxnQkFBZSxBQUFLLE1BQUwsTUFBUyxHQUFFLE9BQUs7QUFBQTtBQUN2VixjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsSUFBRyxDQUFXLE1BQVgsWUFBYyxHQUFHLEVBQUUsbUJBQWlCLE1BQUUsQ0FBTSxLQUFOLE9BQVEsRUFBRSxlQUFhLEtBQUcsRUFBRSxjQUFjLGVBQWEsRUFBRSxpQkFBZSxLQUFHLEtBQUksR0FBRSxlQUFhLEtBQUc7QUFBQTtBQUFHLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFHLGNBQUcsU0FBUyxRQUFRLEdBQUUsU0FBUyxJQUFFO0FBQUMsTUFBTSxNQUFOLFFBQVUsTUFBRztBQUFBLFFBQVk7QUFBQTtBQUFFLGNBQVksR0FBRSxHQUFFO0FBQUMsZUFBRSxFQUFFLENBQUMsVUFBUyxTQUFRLElBQU0sS0FBRSxHQUFHLEVBQUUsY0FBVSxHQUFFLFdBQVMsSUFBUztBQUFBO0FBQ3ZVLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFhLFFBQVosSUFBRSxFQUFFLFNBQVcsR0FBRTtBQUFDLFVBQUU7QUFBRyxlQUFRLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTztBQUFJLFVBQUUsTUFBSSxFQUFFLE1BQUk7QUFBRyxXQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTztBQUFJLFlBQUUsRUFBRSxlQUFlLE1BQUksRUFBRSxHQUFHLFFBQU8sRUFBRSxHQUFHLGFBQVcsS0FBSSxHQUFFLEdBQUcsV0FBUyxJQUFHLEtBQUcsS0FBSSxHQUFFLEdBQUcsa0JBQWdCO0FBQUEsV0FBUTtBQUFtQixXQUFsQixJQUFFLEtBQUcsR0FBRyxJQUFHLElBQUUsTUFBUyxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLFlBQUcsRUFBRSxHQUFHLFVBQVEsR0FBRTtBQUFDLFlBQUUsR0FBRyxXQUFTLElBQUcsS0FBSSxHQUFFLEdBQUcsa0JBQWdCO0FBQUk7QUFBQTtBQUFPLFFBQU8sTUFBUCxRQUFVLEVBQUUsR0FBRyxZQUFXLEtBQUUsRUFBRTtBQUFBO0FBQUksTUFBTyxNQUFQLFFBQVcsR0FBRSxXQUFTO0FBQUE7QUFBQTtBQUNwWSxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUcsQUFBTSxFQUFFLDJCQUFSO0FBQWdDLFlBQU0sTUFBTSxFQUFFO0FBQUssV0FBTyxFQUFFLElBQUcsR0FBRSxDQUFDLE9BQU0sUUFBTyxjQUFhLFFBQU8sVUFBUyxLQUFHLEVBQUUsY0FBYztBQUFBO0FBQWUsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFNLFFBQUcsQUFBTSxLQUFOLE1BQVE7QUFBK0IsVUFBOUIsSUFBRSxFQUFFLFVBQVMsSUFBRSxFQUFFLGNBQWdCLEFBQU0sS0FBTixNQUFRO0FBQUMsWUFBRyxBQUFNLEtBQU47QUFBUSxnQkFBTSxNQUFNLEVBQUU7QUFBSyxZQUFHLE1BQU0sUUFBUSxJQUFHO0FBQUMsY0FBRyxDQUFFLE1BQUcsRUFBRTtBQUFRLGtCQUFNLE1BQU0sRUFBRTtBQUFLLGNBQUUsRUFBRTtBQUFBO0FBQUcsWUFBRTtBQUFBO0FBQUUsTUFBTSxLQUFOLFFBQVUsS0FBRSxLQUFJLElBQUU7QUFBQTtBQUFFLE1BQUUsZ0JBQWMsQ0FBQyxjQUFhLEdBQUc7QUFBQTtBQUMvWSxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFHLEVBQUUsUUFBTyxJQUFFLEdBQUcsRUFBRTtBQUFjLElBQU0sS0FBTixRQUFVLEtBQUUsS0FBRyxHQUFFLE1BQUksRUFBRSxTQUFRLEdBQUUsUUFBTSxJQUFHLEFBQU0sRUFBRSxnQkFBUixRQUFzQixFQUFFLGlCQUFlLEtBQUksR0FBRSxlQUFhLEtBQUksQUFBTSxLQUFOLFFBQVUsR0FBRSxlQUFhLEtBQUc7QUFBQTtBQUFHLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQVksVUFBSSxFQUFFLGNBQWMsZ0JBQWMsQUFBSyxNQUFMLE1BQVEsQUFBTyxNQUFQLFFBQVcsR0FBRSxRQUFNO0FBQUE7QUFBRyxNQUFJLEtBQUcsQ0FBQyxNQUFLLGdDQUErQixRQUFPLHNDQUFxQyxLQUFJO0FBQzlYLGNBQVksR0FBRTtBQUFDLFlBQU87QUFBQSxXQUFRO0FBQU0sZUFBTTtBQUFBLFdBQWtDO0FBQU8sZUFBTTtBQUFBO0FBQTZDLGVBQU07QUFBQTtBQUFBO0FBQWdDLGNBQVksR0FBRSxHQUFFO0FBQUMsV0FBTyxBQUFNLEtBQU4sUUFBUyxBQUFpQyxNQUFqQyxpQ0FBbUMsR0FBRyxLQUFHLEFBQStCLE1BQS9CLGdDQUFrQyxBQUFrQixNQUFsQixrQkFBb0IsaUNBQStCO0FBQUE7QUFDM1UsTUFBSSxJQUFHLEtBQUcsU0FBUyxHQUFFO0FBQUMsV0FBTSxBQUFjLE9BQU8sU0FBckIsZUFBNEIsTUFBTSwwQkFBd0IsU0FBUyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBTSx3QkFBd0IsV0FBVTtBQUFDLGVBQU8sRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFBO0FBQUEsUUFBTTtBQUFBLElBQUcsU0FBUyxHQUFFLEdBQUU7QUFBQyxRQUFHLEVBQUUsaUJBQWUsR0FBRyxPQUFLLGVBQWM7QUFBRSxRQUFFLFlBQVU7QUFBQSxTQUFNO0FBQTJGLFdBQTFGLEtBQUcsTUFBSSxTQUFTLGNBQWMsUUFBTyxHQUFHLFlBQVUsVUFBUSxFQUFFLFVBQVUsYUFBVyxVQUFhLElBQUUsR0FBRyxZQUFXLEVBQUU7QUFBWSxVQUFFLFlBQVksRUFBRTtBQUFZLGFBQUssRUFBRTtBQUFZLFVBQUUsWUFBWSxFQUFFO0FBQUE7QUFBQTtBQUNqYixjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUcsR0FBRTtBQUFDLFVBQUksSUFBRSxFQUFFO0FBQVcsVUFBRyxLQUFHLE1BQUksRUFBRSxhQUFXLEFBQUksRUFBRSxhQUFOLEdBQWU7QUFBQyxVQUFFLFlBQVU7QUFBRTtBQUFBO0FBQUE7QUFBUSxNQUFFLGNBQVk7QUFBQTtBQUNySCxNQUFJLEtBQUc7QUFBQSxJQUFDLHlCQUF3QjtBQUFBLElBQUcsbUJBQWtCO0FBQUEsSUFBRyxrQkFBaUI7QUFBQSxJQUFHLGtCQUFpQjtBQUFBLElBQUcsU0FBUTtBQUFBLElBQUcsY0FBYTtBQUFBLElBQUcsaUJBQWdCO0FBQUEsSUFBRyxhQUFZO0FBQUEsSUFBRyxTQUFRO0FBQUEsSUFBRyxNQUFLO0FBQUEsSUFBRyxVQUFTO0FBQUEsSUFBRyxjQUFhO0FBQUEsSUFBRyxZQUFXO0FBQUEsSUFBRyxjQUFhO0FBQUEsSUFBRyxXQUFVO0FBQUEsSUFBRyxVQUFTO0FBQUEsSUFBRyxTQUFRO0FBQUEsSUFBRyxZQUFXO0FBQUEsSUFBRyxhQUFZO0FBQUEsSUFBRyxjQUFhO0FBQUEsSUFBRyxZQUFXO0FBQUEsSUFBRyxlQUFjO0FBQUEsSUFBRyxnQkFBZTtBQUFBLElBQUcsaUJBQWdCO0FBQUEsSUFBRyxZQUFXO0FBQUEsSUFBRyxXQUFVO0FBQUEsSUFBRyxZQUFXO0FBQUEsSUFBRyxTQUFRO0FBQUEsSUFBRyxPQUFNO0FBQUEsSUFBRyxTQUFRO0FBQUEsSUFBRyxTQUFRO0FBQUEsSUFBRyxRQUFPO0FBQUEsSUFBRyxRQUFPO0FBQUEsSUFBRyxNQUFLO0FBQUEsSUFBRyxhQUFZO0FBQUEsSUFDMWYsY0FBYTtBQUFBLElBQUcsYUFBWTtBQUFBLElBQUcsaUJBQWdCO0FBQUEsSUFBRyxrQkFBaUI7QUFBQSxJQUFHLGtCQUFpQjtBQUFBLElBQUcsZUFBYztBQUFBLElBQUcsYUFBWTtBQUFBLEtBQUksS0FBRyxDQUFDLFVBQVMsTUFBSyxPQUFNO0FBQUssU0FBTyxLQUFLLElBQUksUUFBUSxTQUFTLEdBQUU7QUFBQyxPQUFHLFFBQVEsU0FBUyxHQUFFO0FBQUMsVUFBRSxJQUFFLEVBQUUsT0FBTyxHQUFHLGdCQUFjLEVBQUUsVUFBVSxJQUFHLEdBQUcsS0FBRyxHQUFHO0FBQUE7QUFBQTtBQUFPLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxXQUFPLEFBQU0sS0FBTixRQUFTLEFBQVksT0FBTyxLQUFuQixhQUFzQixBQUFLLE1BQUwsS0FBTyxLQUFHLEtBQUcsQUFBVyxPQUFPLEtBQWxCLFlBQXFCLEFBQUksTUFBSixLQUFPLEdBQUcsZUFBZSxNQUFJLEdBQUcsS0FBSSxNQUFHLEdBQUcsU0FBTyxJQUFFO0FBQUE7QUFDOVosY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFFLEVBQUU7QUFBTSxhQUFRLEtBQUs7QUFBRSxVQUFHLEVBQUUsZUFBZSxJQUFHO0FBQUMsWUFBSSxJQUFFLEFBQUksRUFBRSxRQUFRLFVBQWQsR0FBb0IsSUFBRSxHQUFHLEdBQUUsRUFBRSxJQUFHO0FBQUcsUUFBVSxNQUFWLFdBQWMsS0FBRSxhQUFZLElBQUUsRUFBRSxZQUFZLEdBQUUsS0FBRyxFQUFFLEtBQUc7QUFBQTtBQUFBO0FBQUcsTUFBSSxLQUFHLEVBQUUsQ0FBQyxVQUFTLEtBQUksQ0FBQyxNQUFLLElBQUcsTUFBSyxJQUFHLElBQUcsSUFBRyxLQUFJLElBQUcsT0FBTSxJQUFHLElBQUcsSUFBRyxLQUFJLElBQUcsT0FBTSxJQUFHLFFBQU8sSUFBRyxNQUFLLElBQUcsTUFBSyxJQUFHLE9BQU0sSUFBRyxRQUFPLElBQUcsT0FBTSxJQUFHLEtBQUk7QUFDbFQsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFHLEdBQUU7QUFBQyxVQUFHLEdBQUcsTUFBSyxDQUFNLEVBQUUsWUFBUixRQUFrQixBQUFNLEVBQUUsMkJBQVI7QUFBaUMsY0FBTSxNQUFNLEVBQUUsS0FBSTtBQUFJLFVBQUcsQUFBTSxFQUFFLDJCQUFSLE1BQWdDO0FBQUMsWUFBRyxBQUFNLEVBQUUsWUFBUjtBQUFpQixnQkFBTSxNQUFNLEVBQUU7QUFBSyxZQUFHLENBQUUsQ0FBVyxPQUFPLEVBQUUsMkJBQXBCLFlBQTZDLFlBQVcsRUFBRTtBQUF5QixnQkFBTSxNQUFNLEVBQUU7QUFBQTtBQUFNLFVBQUcsQUFBTSxFQUFFLFNBQVIsUUFBZSxBQUFXLE9BQU8sRUFBRSxTQUFwQjtBQUEwQixjQUFNLE1BQU0sRUFBRTtBQUFBO0FBQUE7QUFDNVYsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFHLEFBQUssRUFBRSxRQUFRLFNBQWY7QUFBb0IsYUFBTSxBQUFXLE9BQU8sRUFBRSxNQUFwQjtBQUF1QixZQUFPO0FBQUEsV0FBUTtBQUFBLFdBQXNCO0FBQUEsV0FBcUI7QUFBQSxXQUFpQjtBQUFBLFdBQXFCO0FBQUEsV0FBcUI7QUFBQSxXQUF3QjtBQUFBLFdBQXNCO0FBQWdCLGVBQU07QUFBQTtBQUFXLGVBQU07QUFBQTtBQUFBO0FBQUksY0FBWSxHQUFFO0FBQUMsZUFBRSxFQUFFLFVBQVEsRUFBRSxjQUFZLFFBQU8sRUFBRSwyQkFBMEIsS0FBRSxFQUFFLDBCQUFnQyxBQUFJLEVBQUUsYUFBTixJQUFlLEVBQUUsYUFBVztBQUFBO0FBQUUsTUFBSSxLQUFHLE1BQUssS0FBRyxNQUFLLEtBQUc7QUFDeGIsY0FBWSxHQUFFO0FBQUMsUUFBRyxJQUFFLEdBQUcsSUFBRztBQUFDLFVBQUcsQUFBYSxPQUFPLE1BQXBCO0FBQXVCLGNBQU0sTUFBTSxFQUFFO0FBQU0sVUFBSSxJQUFFLEVBQUU7QUFBVSxXQUFJLEtBQUUsR0FBRyxJQUFHLEdBQUcsRUFBRSxXQUFVLEVBQUUsTUFBSztBQUFBO0FBQUE7QUFBSyxjQUFZLEdBQUU7QUFBQyxTQUFHLEtBQUcsR0FBRyxLQUFLLEtBQUcsS0FBRyxDQUFDLEtBQUcsS0FBRztBQUFBO0FBQUUsZ0JBQWE7QUFBQyxRQUFHLElBQUc7QUFBQyxVQUFJLElBQUUsSUFBRyxJQUFFO0FBQW9CLFVBQWpCLEtBQUcsS0FBRyxNQUFLLEdBQUcsSUFBTTtBQUFFLGFBQUksSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPO0FBQUksYUFBRyxFQUFFO0FBQUE7QUFBQTtBQUFLLGNBQVksR0FBRSxHQUFFO0FBQUMsV0FBTyxFQUFFO0FBQUE7QUFBRyxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU8sRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFBO0FBQUcsZ0JBQWE7QUFBQTtBQUFFLE1BQUksS0FBRyxJQUFHLEtBQUcsSUFBRyxLQUFHO0FBQUcsZ0JBQWE7QUFBQyxJQUFHLENBQU8sT0FBUCxRQUFXLEFBQU8sT0FBUCxTQUFVLE9BQUs7QUFBQTtBQUM5WixjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRztBQUFHLGFBQU8sRUFBRSxHQUFFO0FBQUcsU0FBRztBQUFHLFFBQUc7QUFBQyxhQUFPLEdBQUcsR0FBRSxHQUFFO0FBQUEsY0FBRztBQUFRLFdBQUcsSUFBRztBQUFBO0FBQUE7QUFDaEYsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFVLFFBQUcsQUFBTyxNQUFQO0FBQVMsYUFBTztBQUFLLFFBQUksSUFBRSxHQUFHO0FBQUcsUUFBRyxBQUFPLE1BQVA7QUFBUyxhQUFPO0FBQUssUUFBRSxFQUFFO0FBQUc7QUFBRSxjQUFPO0FBQUEsYUFBUTtBQUFBLGFBQWU7QUFBQSxhQUFzQjtBQUFBLGFBQXFCO0FBQUEsYUFBNEI7QUFBQSxhQUFtQjtBQUFBLGFBQTBCO0FBQUEsYUFBbUI7QUFBQSxhQUEwQjtBQUFBLGFBQWlCO0FBQUEsYUFBd0I7QUFBZSxVQUFDLEtBQUUsQ0FBQyxFQUFFLGFBQVksS0FBRSxFQUFFLE1BQUssSUFBRSxDQUFFLENBQVcsTUFBWCxZQUFjLEFBQVUsTUFBVixXQUFhLEFBQVcsTUFBWCxZQUFjLEFBQWEsTUFBYixjQUFpQixJQUFFLENBQUM7QUFBRTtBQUFBO0FBQWdCLGNBQUU7QUFBQTtBQUFHLFFBQUc7QUFBRSxhQUFPO0FBQUssUUFBRyxLQUFHLEFBQ3plLE9BQU8sS0FEa2U7QUFDaGUsWUFBTSxNQUFNLEVBQUUsS0FBSSxHQUFFLE9BQU87QUFBSSxXQUFPO0FBQUE7QUFBRSxNQUFJLEtBQUc7QUFBRyxNQUFHO0FBQUcsUUFBRztBQUFLLFdBQUcsSUFBRyxPQUFPLGVBQWUsSUFBRyxXQUFVLENBQUMsS0FBSSxXQUFVO0FBQUMsYUFBRztBQUFBLFdBQU0sT0FBTyxpQkFBaUIsUUFBTyxJQUFHLEtBQUksT0FBTyxvQkFBb0IsUUFBTyxJQUFHO0FBQUEsYUFBVSxHQUFOO0FBQVMsV0FBRztBQUFBO0FBQTdKO0FBQWdLLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsTUFBTSxVQUFVLE1BQU0sS0FBSyxXQUFVO0FBQUcsUUFBRztBQUFDLFFBQUUsTUFBTSxHQUFFO0FBQUEsYUFBUyxHQUFOO0FBQVMsV0FBSyxRQUFRO0FBQUE7QUFBQTtBQUFJLE1BQUksS0FBRyxJQUFHLEtBQUcsTUFBSyxLQUFHLElBQUcsS0FBRyxNQUFLLEtBQUcsQ0FBQyxTQUFRLFNBQVMsR0FBRTtBQUFDLFNBQUcsSUFBRyxLQUFHO0FBQUE7QUFBSSxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsU0FBRyxJQUFHLEtBQUcsTUFBSyxHQUFHLE1BQU0sSUFBRztBQUFBO0FBQy9kLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBMEIsUUFBekIsR0FBRyxNQUFNLE1BQUssWUFBYyxJQUFHO0FBQUMsVUFBRyxJQUFHO0FBQUMsWUFBSSxJQUFFO0FBQUcsYUFBRyxJQUFHLEtBQUc7QUFBQTtBQUFVLGNBQU0sTUFBTSxFQUFFO0FBQU0sWUFBSyxNQUFHLElBQUcsS0FBRztBQUFBO0FBQUE7QUFBSSxjQUFZLEdBQUU7QUFBQyxRQUFJLElBQUUsR0FBRSxJQUFFO0FBQUUsUUFBRyxFQUFFO0FBQVUsYUFBSyxFQUFFO0FBQVEsWUFBRSxFQUFFO0FBQUEsU0FBVztBQUFDLFVBQUU7QUFBRTtBQUFHLFlBQUUsR0FBRSxBQUFLLEdBQUUsUUFBTSxTQUFiLEtBQXFCLEtBQUUsRUFBRSxTQUFRLElBQUUsRUFBRTtBQUFBLGFBQWE7QUFBQTtBQUFHLFdBQU8sQUFBSSxFQUFFLFFBQU4sSUFBVSxJQUFFO0FBQUE7QUFBSyxjQUFZLEdBQUU7QUFBQyxRQUFHLEFBQUssRUFBRSxRQUFQLElBQVc7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFzRSxVQUF4RCxBQUFPLE1BQVAsUUFBVyxLQUFFLEVBQUUsV0FBVSxBQUFPLE1BQVAsUUFBVyxLQUFFLEVBQUUsaUJBQW1CLEFBQU8sTUFBUDtBQUFTLGVBQU8sRUFBRTtBQUFBO0FBQVcsV0FBTztBQUFBO0FBQUssY0FBWSxHQUFFO0FBQUMsUUFBRyxHQUFHLE9BQUs7QUFBRSxZQUFNLE1BQU0sRUFBRTtBQUFBO0FBQzNlLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQVUsUUFBRyxDQUFDLEdBQUU7QUFBUyxVQUFSLElBQUUsR0FBRyxJQUFNLEFBQU8sTUFBUDtBQUFTLGNBQU0sTUFBTSxFQUFFO0FBQU0sYUFBTyxNQUFJLElBQUUsT0FBSztBQUFBO0FBQUUsYUFBUSxJQUFFLEdBQUUsSUFBRSxPQUFJO0FBQUMsVUFBSSxJQUFFLEVBQUU7QUFBTyxVQUFHLEFBQU8sTUFBUDtBQUFTO0FBQU0sVUFBSSxJQUFFLEVBQUU7QUFBVSxVQUFHLEFBQU8sTUFBUCxNQUFTO0FBQVksWUFBWCxJQUFFLEVBQUUsUUFBVSxBQUFPLE1BQVAsTUFBUztBQUFDLGNBQUU7QUFBRTtBQUFBO0FBQVM7QUFBQTtBQUFNLFVBQUcsRUFBRSxVQUFRLEVBQUUsT0FBTTtBQUFDLGFBQUksSUFBRSxFQUFFLE9BQU0sS0FBRztBQUFDLGNBQUcsTUFBSTtBQUFFLG1CQUFPLEdBQUcsSUFBRztBQUFFLGNBQUcsTUFBSTtBQUFFLG1CQUFPLEdBQUcsSUFBRztBQUFFLGNBQUUsRUFBRTtBQUFBO0FBQVEsY0FBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLFVBQUcsRUFBRSxXQUFTLEVBQUU7QUFBTyxZQUFFLEdBQUUsSUFBRTtBQUFBLFdBQU07QUFBQyxpQkFBUSxJQUFFLElBQUcsSUFBRSxFQUFFLE9BQU0sS0FBRztBQUFDLGNBQUcsTUFBSSxHQUFFO0FBQUMsZ0JBQUUsSUFBRyxJQUFFLEdBQUUsSUFBRTtBQUFFO0FBQUE7QUFBTSxjQUFHLE1BQUksR0FBRTtBQUFDLGdCQUFFLElBQUcsSUFBRSxHQUFFLElBQUU7QUFBRTtBQUFBO0FBQU0sY0FBRSxFQUFFO0FBQUE7QUFBUSxZQUFHLENBQUMsR0FBRTtBQUFDLGVBQUksSUFBRSxFQUFFLE9BQU0sS0FBRztBQUFDLGdCQUFHLE1BQzVmLEdBQUU7QUFBQyxrQkFBRSxJQUFHLElBQUUsR0FBRSxJQUFFO0FBQUU7QUFBQTtBQUFNLGdCQUFHLE1BQUksR0FBRTtBQUFDLGtCQUFFLElBQUcsSUFBRSxHQUFFLElBQUU7QUFBRTtBQUFBO0FBQU0sZ0JBQUUsRUFBRTtBQUFBO0FBQVEsY0FBRyxDQUFDO0FBQUUsa0JBQU0sTUFBTSxFQUFFO0FBQUE7QUFBQTtBQUFRLFVBQUcsRUFBRSxjQUFZO0FBQUUsY0FBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLFFBQUcsQUFBSSxFQUFFLFFBQU47QUFBVSxZQUFNLE1BQU0sRUFBRTtBQUFNLFdBQU8sRUFBRSxVQUFVLFlBQVUsSUFBRSxJQUFFO0FBQUE7QUFBRSxjQUFZLEdBQUU7QUFBUyxRQUFSLElBQUUsR0FBRyxJQUFNLENBQUM7QUFBRSxhQUFPO0FBQUssYUFBUSxJQUFFLE9BQUk7QUFBQyxVQUFHLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxFQUFFLFFBQU47QUFBVSxlQUFPO0FBQUUsVUFBRyxFQUFFO0FBQU0sVUFBRSxNQUFNLFNBQU8sR0FBRSxJQUFFLEVBQUU7QUFBQSxXQUFVO0FBQUMsWUFBRyxNQUFJO0FBQUU7QUFBTSxlQUFLLENBQUMsRUFBRSxXQUFTO0FBQUMsY0FBRyxDQUFDLEVBQUUsVUFBUSxFQUFFLFdBQVM7QUFBRSxtQkFBTztBQUFLLGNBQUUsRUFBRTtBQUFBO0FBQU8sVUFBRSxRQUFRLFNBQU8sRUFBRSxRQUFPLElBQUUsRUFBRTtBQUFBO0FBQUE7QUFBUyxXQUFPO0FBQUE7QUFDNWMsY0FBWSxHQUFFLEdBQUU7QUFBQyxhQUFRLElBQUUsRUFBRSxXQUFVLEFBQU8sTUFBUCxRQUFVO0FBQUMsVUFBRyxNQUFJLEtBQUcsTUFBSTtBQUFFLGVBQU07QUFBRyxVQUFFLEVBQUU7QUFBQTtBQUFPLFdBQU07QUFBQTtBQUFHLE1BQUksSUFBRyxJQUFHLElBQUcsSUFBRyxLQUFHLElBQUcsS0FBRyxJQUFHLEtBQUcsTUFBSyxLQUFHLE1BQUssS0FBRyxNQUFLLEtBQUcsSUFBSSxPQUFJLEtBQUcsSUFBSSxPQUFJLEtBQUcsSUFBRyxLQUFHLDZQQUE2UCxNQUFNO0FBQ3JiLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsV0FBTSxDQUFDLFdBQVUsR0FBRSxjQUFhLEdBQUUsa0JBQWlCLElBQUUsSUFBRyxhQUFZLEdBQUUsa0JBQWlCLENBQUM7QUFBQTtBQUFJLGNBQVksR0FBRSxHQUFFO0FBQUMsWUFBTztBQUFBLFdBQVE7QUFBQSxXQUFlO0FBQVcsYUFBRztBQUFLO0FBQUEsV0FBVztBQUFBLFdBQWlCO0FBQVksYUFBRztBQUFLO0FBQUEsV0FBVztBQUFBLFdBQWlCO0FBQVcsYUFBRztBQUFLO0FBQUEsV0FBVztBQUFBLFdBQW1CO0FBQWEsV0FBRyxPQUFPLEVBQUU7QUFBVztBQUFBLFdBQVc7QUFBQSxXQUF5QjtBQUFxQixXQUFHLE9BQU8sRUFBRTtBQUFBO0FBQUE7QUFDM1osY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQUcsQUFBTyxNQUFQLFFBQVUsRUFBRSxnQkFBYyxJQUFTLEtBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUcsQUFBTyxNQUFQLFFBQVcsS0FBRSxHQUFHLElBQUcsQUFBTyxNQUFQLFFBQVUsR0FBRyxLQUFJLEtBQUUsR0FBRSxvQkFBa0IsR0FBRSxJQUFFLEVBQUUsa0JBQWlCLEFBQU8sTUFBUCxRQUFVLEFBQUssRUFBRSxRQUFRLE9BQWYsTUFBbUIsRUFBRSxLQUFLLElBQVU7QUFBQTtBQUM5TSxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFlBQU87QUFBQSxXQUFRO0FBQVUsZUFBTyxLQUFHLEdBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUc7QUFBQSxXQUFRO0FBQVksZUFBTyxLQUFHLEdBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUc7QUFBQSxXQUFRO0FBQVksZUFBTyxLQUFHLEdBQUcsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQUc7QUFBQSxXQUFRO0FBQWMsWUFBSSxJQUFFLEVBQUU7QUFBVSxrQkFBRyxJQUFJLEdBQUUsR0FBRyxHQUFHLElBQUksTUFBSSxNQUFLLEdBQUUsR0FBRSxHQUFFLEdBQUUsS0FBVTtBQUFBLFdBQVE7QUFBb0IsZUFBTyxJQUFFLEVBQUUsV0FBVSxHQUFHLElBQUksR0FBRSxHQUFHLEdBQUcsSUFBSSxNQUFJLE1BQUssR0FBRSxHQUFFLEdBQUUsR0FBRSxLQUFJO0FBQUE7QUFBRyxXQUFNO0FBQUE7QUFDalcsY0FBWSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsRUFBRTtBQUFRLFFBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxVQUFJLElBQUUsR0FBRztBQUFHLFVBQUcsQUFBTyxNQUFQO0FBQVMsWUFBRyxJQUFFLEVBQUUsS0FBSSxBQUFLLE1BQUw7QUFBUSxjQUFHLElBQUUsR0FBRyxJQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsY0FBRSxZQUFVLEdBQUUsR0FBRyxFQUFFLGNBQWEsV0FBVTtBQUFDLGdCQUFFLHlCQUF5QixFQUFFLFVBQVMsV0FBVTtBQUFDLG1CQUFHO0FBQUE7QUFBQTtBQUFPO0FBQUE7QUFBQSxtQkFBZ0IsQUFBSSxNQUFKLEtBQU8sRUFBRSxVQUFVLFNBQVE7QUFBQyxZQUFFLFlBQVUsQUFBSSxFQUFFLFFBQU4sSUFBVSxFQUFFLFVBQVUsZ0JBQWM7QUFBSztBQUFBO0FBQUE7QUFBQTtBQUFRLE1BQUUsWUFBVTtBQUFBO0FBQzFVLGNBQVksR0FBRTtBQUFDLFFBQUcsQUFBTyxFQUFFLGNBQVQ7QUFBbUIsYUFBTTtBQUFHLGFBQVEsSUFBRSxFQUFFLGtCQUFpQixJQUFFLEVBQUUsVUFBUTtBQUFDLFVBQUksSUFBRSxHQUFHLEVBQUUsY0FBYSxFQUFFLGtCQUFpQixFQUFFLElBQUcsRUFBRTtBQUFhLFVBQUcsQUFBTyxNQUFQO0FBQVMsZUFBTyxJQUFFLEdBQUcsSUFBRyxBQUFPLE1BQVAsUUFBVSxHQUFHLElBQUcsRUFBRSxZQUFVLEdBQUU7QUFBRyxRQUFFO0FBQUE7QUFBUSxXQUFNO0FBQUE7QUFBRyxjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsT0FBRyxNQUFJLEVBQUUsT0FBTztBQUFBO0FBQ3pRLGdCQUFhO0FBQUMsU0FBSSxLQUFHLElBQUcsSUFBRSxHQUFHLFVBQVE7QUFBQyxVQUFJLElBQUUsR0FBRztBQUFHLFVBQUcsQUFBTyxFQUFFLGNBQVQsTUFBbUI7QUFBQyxZQUFFLEdBQUcsRUFBRSxZQUFXLEFBQU8sTUFBUCxRQUFVLEdBQUc7QUFBRztBQUFBO0FBQU0sZUFBUSxJQUFFLEVBQUUsa0JBQWlCLElBQUUsRUFBRSxVQUFRO0FBQUMsWUFBSSxJQUFFLEdBQUcsRUFBRSxjQUFhLEVBQUUsa0JBQWlCLEVBQUUsSUFBRyxFQUFFO0FBQWEsWUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFlBQUUsWUFBVTtBQUFFO0FBQUE7QUFBTSxVQUFFO0FBQUE7QUFBUSxNQUFPLEVBQUUsY0FBVCxRQUFvQixHQUFHO0FBQUE7QUFBUSxJQUFPLE9BQVAsUUFBVyxHQUFHLE9BQU0sTUFBRyxPQUFNLEFBQU8sT0FBUCxRQUFXLEdBQUcsT0FBTSxNQUFHLE9BQU0sQUFBTyxPQUFQLFFBQVcsR0FBRyxPQUFNLE1BQUcsT0FBTSxHQUFHLFFBQVEsS0FBSSxHQUFHLFFBQVE7QUFBQTtBQUNyWixjQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUUsY0FBWSxLQUFJLEdBQUUsWUFBVSxNQUFLLE1BQUssTUFBRyxJQUFHLEVBQUUsMEJBQTBCLEVBQUUseUJBQXdCO0FBQUE7QUFDckgsY0FBWSxHQUFFO0FBQUMsZUFBVyxJQUFFO0FBQUMsYUFBTyxHQUFHLElBQUU7QUFBQTtBQUFHLFFBQUcsSUFBRSxHQUFHLFFBQU87QUFBQyxTQUFHLEdBQUcsSUFBRztBQUFHLGVBQVEsSUFBRSxHQUFFLElBQUUsR0FBRyxRQUFPLEtBQUk7QUFBQyxZQUFJLElBQUUsR0FBRztBQUFHLFVBQUUsY0FBWSxLQUFJLEdBQUUsWUFBVTtBQUFBO0FBQUE7QUFBK0YsU0FBeEYsQUFBTyxPQUFQLFFBQVcsR0FBRyxJQUFHLElBQUcsQUFBTyxPQUFQLFFBQVcsR0FBRyxJQUFHLElBQUcsQUFBTyxPQUFQLFFBQVcsR0FBRyxJQUFHLElBQUcsR0FBRyxRQUFRLElBQUcsR0FBRyxRQUFRLElBQU8sSUFBRSxHQUFFLElBQUUsR0FBRyxRQUFPO0FBQUksVUFBRSxHQUFHLElBQUcsRUFBRSxjQUFZLEtBQUksR0FBRSxZQUFVO0FBQU0sV0FBSyxJQUFFLEdBQUcsVUFBUyxLQUFFLEdBQUcsSUFBRyxBQUFPLEVBQUUsY0FBVDtBQUFxQixTQUFHLElBQUcsQUFBTyxFQUFFLGNBQVQsUUFBb0IsR0FBRztBQUFBO0FBQy9YLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUcsYUFBRSxFQUFFLGlCQUFlLEVBQUUsZUFBYyxFQUFFLFdBQVMsS0FBRyxXQUFTLEdBQUUsRUFBRSxRQUFNLEtBQUcsUUFBTSxHQUFTO0FBQUE7QUFBRSxNQUFJLEtBQUcsQ0FBQyxjQUFhLEdBQUcsYUFBWSxpQkFBZ0Isb0JBQW1CLEdBQUcsYUFBWSx1QkFBc0IsZ0JBQWUsR0FBRyxhQUFZLG1CQUFrQixlQUFjLEdBQUcsY0FBYSxtQkFBa0IsS0FBRyxJQUFHLEtBQUc7QUFDdlUsUUFBSyxNQUFHLFNBQVMsY0FBYyxPQUFPLE9BQU0sb0JBQW1CLFVBQVMsUUFBTyxHQUFHLGFBQWEsV0FBVSxPQUFPLEdBQUcsbUJBQW1CLFdBQVUsT0FBTyxHQUFHLGVBQWUsWUFBVyxxQkFBb0IsVUFBUSxPQUFPLEdBQUcsY0FBYztBQUFZLGNBQVksR0FBRTtBQUFDLFFBQUcsR0FBRztBQUFHLGFBQU8sR0FBRztBQUFHLFFBQUcsQ0FBQyxHQUFHO0FBQUcsYUFBTztBQUFFLFFBQUksSUFBRSxHQUFHLElBQUc7QUFBRSxTQUFJLEtBQUs7QUFBRSxVQUFHLEVBQUUsZUFBZSxNQUFJLEtBQUs7QUFBRyxlQUFPLEdBQUcsS0FBRyxFQUFFO0FBQUcsV0FBTztBQUFBO0FBQzlYLE1BQUksS0FBRyxHQUFHLGlCQUFnQixLQUFHLEdBQUcsdUJBQXNCLEtBQUcsR0FBRyxtQkFBa0IsS0FBRyxHQUFHLGtCQUFpQixLQUFHLElBQUksT0FBSSxLQUFHLElBQUksT0FBSSxLQUFHO0FBQUEsSUFBQztBQUFBLElBQVE7QUFBQSxJQUFRO0FBQUEsSUFBRztBQUFBLElBQWU7QUFBQSxJQUFHO0FBQUEsSUFBcUI7QUFBQSxJQUFHO0FBQUEsSUFBaUI7QUFBQSxJQUFVO0FBQUEsSUFBVTtBQUFBLElBQWlCO0FBQUEsSUFBaUI7QUFBQSxJQUFpQjtBQUFBLElBQWlCO0FBQUEsSUFBVTtBQUFBLElBQVU7QUFBQSxJQUFZO0FBQUEsSUFBWTtBQUFBLElBQVE7QUFBQSxJQUFRO0FBQUEsSUFBUTtBQUFBLElBQVE7QUFBQSxJQUFvQjtBQUFBLElBQW9CO0FBQUEsSUFBTztBQUFBLElBQU87QUFBQSxJQUFhO0FBQUEsSUFBYTtBQUFBLElBQWlCO0FBQUEsSUFBaUI7QUFBQSxJQUFZO0FBQUEsSUFDL2U7QUFBQSxJQUFxQjtBQUFBLElBQXFCO0FBQUEsSUFBVTtBQUFBLElBQVU7QUFBQSxJQUFXO0FBQUEsSUFBVztBQUFBLElBQVU7QUFBQSxJQUFVO0FBQUEsSUFBVTtBQUFBLElBQVU7QUFBQSxJQUFVO0FBQUEsSUFBVTtBQUFBLElBQWE7QUFBQSxJQUFhO0FBQUEsSUFBRztBQUFBLElBQWdCO0FBQUEsSUFBVTtBQUFBO0FBQVcsY0FBWSxHQUFFLEdBQUU7QUFBQyxhQUFRLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFHLEdBQUU7QUFBQyxVQUFJLElBQUUsRUFBRSxJQUFHLElBQUUsRUFBRSxJQUFFO0FBQUcsVUFBRSxPQUFNLEdBQUUsR0FBRyxnQkFBYyxFQUFFLE1BQU0sS0FBSSxHQUFHLElBQUksR0FBRSxJQUFHLEdBQUcsSUFBSSxHQUFFLElBQUcsR0FBRyxHQUFFLENBQUM7QUFBQTtBQUFBO0FBQUssTUFBSSxLQUFHLEVBQUU7QUFBYTtBQUFLLE1BQUksSUFBRTtBQUMvWCxjQUFZLEdBQUU7QUFBQyxRQUFHLEFBQUssS0FBRSxNQUFQO0FBQVUsYUFBTyxJQUFFLElBQUc7QUFBRSxRQUFHLEFBQUssS0FBRSxNQUFQO0FBQVUsYUFBTyxJQUFFLElBQUc7QUFBRSxRQUFHLEFBQUssS0FBRSxNQUFQO0FBQVUsYUFBTyxJQUFFLElBQUc7QUFBRSxRQUFJLElBQUUsS0FBRztBQUFFLFdBQUcsQUFBSSxNQUFKLElBQWEsS0FBRSxJQUFHLEtBQUssQUFBSyxLQUFFLE9BQVAsSUFBa0IsS0FBRSxJQUFHLE1BQUcsS0FBRSxNQUFJLEdBQUssQUFBSSxNQUFKLElBQWEsS0FBRSxJQUFHLEtBQUssQUFBSyxLQUFFLFFBQVAsSUFBbUIsS0FBRSxHQUFFLE9BQUksS0FBRSxPQUFLLEdBQUssQUFBSSxNQUFKLElBQWEsS0FBRSxHQUFFLEtBQUssQUFBSyxLQUFFLFNBQVAsSUFBb0IsS0FBRSxHQUFFLFFBQUssS0FBRSxVQUFRLEdBQUssQUFBSSxNQUFKLElBQWEsS0FBRSxHQUFFLEtBQUUsS0FBRSxXQUFTLEdBQUssQUFBSSxNQUFKLElBQWEsS0FBRSxHQUFFLEtBQUssSUFBRSxXQUFnQixLQUFFLEdBQUUsWUFBWSxBQUFLLEtBQUUsY0FBUCxJQUF5QixLQUFFLEdBQUUsYUFBVSxLQUFFLFlBQVUsR0FBSyxBQUFJLE1BQUosSUFBYSxLQUFFLEdBQUUsS0FBSyxBQUFLLGNBQVcsTUFBaEIsSUFBMEIsS0FBRSxHQUFFLGNBQ2pmLEtBQUUsR0FBUztBQUFBO0FBQUUsY0FBWSxHQUFFO0FBQUMsWUFBTztBQUFBLFdBQVE7QUFBRyxlQUFPO0FBQUEsV0FBUTtBQUFHLGVBQU87QUFBQSxXQUFRO0FBQUEsV0FBUTtBQUFHLGVBQU87QUFBQSxXQUFPO0FBQUcsZUFBTztBQUFBO0FBQVUsZUFBTztBQUFBO0FBQUE7QUFBRyxjQUFZLEdBQUU7QUFBQyxZQUFPO0FBQUEsV0FBUTtBQUFBLFdBQVE7QUFBRyxlQUFPO0FBQUEsV0FBUTtBQUFBLFdBQVE7QUFBQSxXQUFRO0FBQUEsV0FBUTtBQUFHLGVBQU87QUFBQSxXQUFRO0FBQUEsV0FBTztBQUFBLFdBQU87QUFBQSxXQUFPO0FBQUEsV0FBTztBQUFBLFdBQU87QUFBRSxlQUFPO0FBQUEsV0FBUTtBQUFBLFdBQU87QUFBQSxXQUFPO0FBQUUsZUFBTztBQUFBLFdBQVE7QUFBRSxlQUFPO0FBQUE7QUFBVyxjQUFNLE1BQU0sRUFBRSxLQUFJO0FBQUE7QUFBQTtBQUNqVyxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQWEsUUFBRyxBQUFJLE1BQUo7QUFBTSxhQUFPLElBQUU7QUFBRSxRQUFJLElBQUUsR0FBRSxJQUFFLEdBQUUsSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLGdCQUFlLElBQUUsRUFBRTtBQUFZLFFBQUcsQUFBSSxNQUFKO0FBQU0sVUFBRSxHQUFFLElBQUUsSUFBRTtBQUFBLGFBQVcsSUFBRSxJQUFFLFdBQVUsQUFBSSxNQUFKLEdBQU07QUFBQyxVQUFJLElBQUUsSUFBRSxDQUFDO0FBQUUsTUFBSSxNQUFKLElBQU8sS0FBRSxHQUFHLElBQUcsSUFBRSxLQUFJLE1BQUcsR0FBRSxBQUFJLE1BQUosS0FBUSxLQUFFLEdBQUcsSUFBRyxJQUFFO0FBQUE7QUFBUyxVQUFFLElBQUUsQ0FBQyxHQUFFLEFBQUksTUFBSixJQUFPLEtBQUUsR0FBRyxJQUFHLElBQUUsS0FBRyxBQUFJLE1BQUosS0FBUSxLQUFFLEdBQUcsSUFBRyxJQUFFO0FBQUcsUUFBRyxBQUFJLE1BQUo7QUFBTSxhQUFPO0FBQXFDLFFBQW5DLElBQUUsS0FBRyxHQUFHLElBQUcsSUFBRSxJQUFJLE1BQUUsSUFBRSxJQUFFLEtBQUcsTUFBSSxLQUFHLEdBQUssQUFBSSxNQUFKLEtBQU8sTUFBSSxLQUFHLEFBQUssS0FBRSxNQUFQLEdBQVU7QUFBTyxVQUFOLEdBQUcsSUFBTSxLQUFHO0FBQUUsZUFBTztBQUFFLFVBQUU7QUFBQTtBQUFxQixRQUFuQixJQUFFLEVBQUUsZ0JBQWtCLEFBQUksTUFBSjtBQUFNLFdBQUksSUFBRSxFQUFFLGVBQWMsS0FBRyxHQUFFLElBQUU7QUFBRyxZQUFFLEtBQUcsR0FBRyxJQUFHLElBQUUsS0FBRyxHQUFFLEtBQUcsRUFBRSxJQUFHLEtBQUcsQ0FBQztBQUFFLFdBQU87QUFBQTtBQUMxZSxjQUFZLEdBQUU7QUFBQyxlQUFFLEVBQUUsZUFBYSxhQUFtQixBQUFJLE1BQUosSUFBTSxJQUFFLElBQUUsYUFBVyxhQUFXO0FBQUE7QUFBRSxjQUFZLEdBQUUsR0FBRTtBQUFDLFlBQU87QUFBQSxXQUFRO0FBQUcsZUFBTztBQUFBLFdBQU87QUFBRyxlQUFPO0FBQUEsV0FBTztBQUFHLGVBQU8sSUFBRSxHQUFHLEtBQUcsQ0FBQyxJQUFHLEFBQUksTUFBSixJQUFNLEdBQUcsSUFBRyxLQUFHO0FBQUEsV0FBTztBQUFHLGVBQU8sSUFBRSxHQUFHLE1BQUksQ0FBQyxJQUFHLEFBQUksTUFBSixJQUFNLEdBQUcsR0FBRSxLQUFHO0FBQUEsV0FBTztBQUFFLGVBQU8sSUFBRSxHQUFHLE9BQUssQ0FBQyxJQUFHLEFBQUksTUFBSixLQUFRLEtBQUUsR0FBRyxVQUFRLENBQUMsSUFBRyxBQUFJLE1BQUosS0FBUSxLQUFFLE9BQU07QUFBQSxXQUFPO0FBQUUsZUFBTyxJQUFFLEdBQUcsWUFBVSxDQUFDLElBQUcsQUFBSSxNQUFKLEtBQVEsS0FBRSxZQUFXO0FBQUE7QUFBRSxVQUFNLE1BQU0sRUFBRSxLQUFJO0FBQUE7QUFBSyxjQUFZLEdBQUU7QUFBQyxXQUFPLElBQUUsQ0FBQztBQUFBO0FBQUUsY0FBWSxHQUFFO0FBQUMsYUFBUSxJQUFFLElBQUcsSUFBRSxHQUFFLEtBQUcsR0FBRTtBQUFJLFFBQUUsS0FBSztBQUFHLFdBQU87QUFBQTtBQUNyZCxjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsTUFBRSxnQkFBYztBQUFFLFFBQUksSUFBRSxJQUFFO0FBQUUsTUFBRSxrQkFBZ0IsR0FBRSxFQUFFLGVBQWEsR0FBRSxJQUFFLEVBQUUsWUFBVyxJQUFFLEtBQUcsR0FBRyxJQUFHLEVBQUUsS0FBRztBQUFBO0FBQUUsTUFBSSxLQUFHLEtBQUssUUFBTSxLQUFLLFFBQU0sSUFBRyxLQUFHLEtBQUssS0FBSSxLQUFHLEtBQUs7QUFBSSxjQUFZLEdBQUU7QUFBQyxXQUFPLEFBQUksTUFBSixJQUFNLEtBQUcsS0FBSSxJQUFHLEtBQUcsS0FBRyxLQUFHO0FBQUE7QUFBRSxNQUFJLEtBQUcsRUFBRSwrQkFBOEIsS0FBRyxFQUFFLDBCQUF5QixLQUFHO0FBQUcsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsVUFBSTtBQUFLLFFBQUksSUFBRSxJQUFHLElBQUU7QUFBRyxTQUFHO0FBQUcsUUFBRztBQUFDLFNBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFBLGNBQUc7QUFBUSxNQUFDLE1BQUcsTUFBSTtBQUFBO0FBQUE7QUFBTSxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxPQUFHLElBQUcsR0FBRyxLQUFLLE1BQUssR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUNqYixjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLElBQUc7QUFBQyxVQUFJO0FBQUUsVUFBSSxLQUFFLEFBQUssS0FBRSxNQUFQLE1BQVksSUFBRSxHQUFHLFVBQVEsS0FBRyxHQUFHLFFBQVE7QUFBRyxZQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUcsS0FBSztBQUFBLFdBQU87QUFBQyxZQUFJLElBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFHLFlBQUcsQUFBTyxNQUFQO0FBQVMsZUFBRyxHQUFHLEdBQUU7QUFBQSxhQUFPO0FBQUMsY0FBRyxHQUFFO0FBQUMsZ0JBQUcsS0FBRyxHQUFHLFFBQVEsSUFBRztBQUFDLGtCQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEdBQUcsS0FBSztBQUFHO0FBQUE7QUFBTyxnQkFBRyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBRztBQUFPLGVBQUcsR0FBRTtBQUFBO0FBQUcsYUFBRyxHQUFFLEdBQUUsR0FBRSxNQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDOVEsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUc7QUFBVyxRQUFSLElBQUUsR0FBRyxJQUFNLEFBQU8sTUFBUCxNQUFTO0FBQUMsVUFBSSxJQUFFLEdBQUc7QUFBRyxVQUFHLEFBQU8sTUFBUDtBQUFTLFlBQUU7QUFBQSxXQUFTO0FBQUMsWUFBSSxJQUFFLEVBQUU7QUFBSSxZQUFHLEFBQUssTUFBTCxJQUFPO0FBQVMsY0FBUixJQUFFLEdBQUcsSUFBTSxBQUFPLE1BQVA7QUFBUyxtQkFBTztBQUFFLGNBQUU7QUFBQSxtQkFBYSxBQUFJLE1BQUosR0FBTTtBQUFDLGNBQUcsRUFBRSxVQUFVO0FBQVEsbUJBQU8sQUFBSSxFQUFFLFFBQU4sSUFBVSxFQUFFLFVBQVUsZ0JBQWM7QUFBSyxjQUFFO0FBQUE7QUFBVSxnQkFBSSxLQUFJLEtBQUU7QUFBQTtBQUFBO0FBQU8sY0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQVU7QUFBQTtBQUFLLE1BQUksS0FBRyxNQUFLLEtBQUcsTUFBSyxLQUFHO0FBQ3pULGdCQUFhO0FBQUMsUUFBRztBQUFHLGFBQU87QUFBRyxRQUFJLEdBQUUsSUFBRSxJQUFHLElBQUUsRUFBRSxRQUFPLEdBQUUsSUFBRSxXQUFVLEtBQUcsR0FBRyxRQUFNLEdBQUcsYUFBWSxJQUFFLEVBQUU7QUFBTyxTQUFJLElBQUUsR0FBRSxJQUFFLEtBQUcsRUFBRSxPQUFLLEVBQUUsSUFBRztBQUFJO0FBQUMsUUFBSSxJQUFFLElBQUU7QUFBRSxTQUFJLElBQUUsR0FBRSxLQUFHLEtBQUcsRUFBRSxJQUFFLE9BQUssRUFBRSxJQUFFLElBQUc7QUFBSTtBQUFDLFdBQU8sS0FBRyxFQUFFLE1BQU0sR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUE7QUFBUSxjQUFZLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFRLHlCQUFhLElBQUcsS0FBRSxFQUFFLFVBQVMsQUFBSSxNQUFKLEtBQU8sQUFBSyxNQUFMLE1BQVMsS0FBRSxPQUFLLElBQUUsR0FBRSxBQUFLLE1BQUwsTUFBUyxLQUFFLEtBQVcsTUFBSSxLQUFHLEFBQUssTUFBTCxLQUFPLElBQUU7QUFBQTtBQUFFLGdCQUFhO0FBQUMsV0FBTTtBQUFBO0FBQUcsZ0JBQWE7QUFBQyxXQUFNO0FBQUE7QUFDalksY0FBWSxHQUFFO0FBQUMsZUFBVyxJQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxXQUFLLGFBQVcsSUFBRSxLQUFLLGNBQVksR0FBRSxLQUFLLE9BQUssR0FBRSxLQUFLLGNBQVksR0FBRSxLQUFLLFNBQU8sR0FBRSxLQUFLLGdCQUFjO0FBQUssZUFBUSxLQUFLO0FBQUUsVUFBRSxlQUFlLE1BQUssTUFBRSxFQUFFLElBQUcsS0FBSyxLQUFHLEtBQUUsR0FBRSxLQUFHLEVBQUU7QUFBSSxrQkFBSyxxQkFBb0IsQ0FBTSxFQUFFLG9CQUFSLE9BQXlCLEVBQUUsbUJBQWlCLEFBQUssRUFBRSxnQkFBUCxNQUFvQixLQUFHLElBQUcsS0FBSyx1QkFBcUIsSUFBVTtBQUFBO0FBQUssYUFBRSxFQUFFLFdBQVUsQ0FBQyxnQkFBZSxXQUFVO0FBQUMsV0FBSyxtQkFBaUI7QUFBRyxVQUFJLEtBQUUsS0FBSztBQUFZLFlBQUksSUFBRSxpQkFBZSxHQUFFLG1CQUFpQixBQUFZLE9BQU8sR0FBRSxlQUFyQixhQUN4ZCxJQUFFLGNBQVksS0FBSSxLQUFLLHFCQUFtQjtBQUFBLE9BQUssaUJBQWdCLFdBQVU7QUFBQyxVQUFJLEtBQUUsS0FBSztBQUFZLFlBQUksSUFBRSxrQkFBZ0IsR0FBRSxvQkFBa0IsQUFBWSxPQUFPLEdBQUUsZ0JBQXJCLGFBQW9DLElBQUUsZUFBYSxLQUFJLEtBQUssdUJBQXFCO0FBQUEsT0FBSyxTQUFRLFdBQVU7QUFBQSxPQUFHLGNBQWEsTUFBWTtBQUFBO0FBQ2hSLE1BQUksS0FBRyxDQUFDLFlBQVcsR0FBRSxTQUFRLEdBQUUsWUFBVyxHQUFFLFdBQVUsU0FBUyxHQUFFO0FBQUMsV0FBTyxFQUFFLGFBQVcsS0FBSztBQUFBLEtBQU8sa0JBQWlCLEdBQUUsV0FBVSxJQUFHLEtBQUcsR0FBRyxLQUFJLEtBQUcsRUFBRSxJQUFHLElBQUcsQ0FBQyxNQUFLLEdBQUUsUUFBTyxLQUFJLEtBQUcsR0FBRyxLQUFJLElBQUcsSUFBRyxJQUFHLEtBQUcsRUFBRSxJQUFHLElBQUcsQ0FBQyxTQUFRLEdBQUUsU0FBUSxHQUFFLFNBQVEsR0FBRSxTQUFRLEdBQUUsT0FBTSxHQUFFLE9BQU0sR0FBRSxTQUFRLEdBQUUsVUFBUyxHQUFFLFFBQU8sR0FBRSxTQUFRLEdBQUUsa0JBQWlCLElBQUcsUUFBTyxHQUFFLFNBQVEsR0FBRSxlQUFjLFNBQVMsR0FBRTtBQUFDLFdBQU8sQUFBUyxFQUFFLGtCQUFYLFNBQXlCLEVBQUUsZ0JBQWMsRUFBRSxhQUFXLEVBQUUsWUFBVSxFQUFFLGNBQVksRUFBRTtBQUFBLEtBQWUsV0FBVSxTQUFTLEdBQUU7QUFBQyxXQUFHLGVBQzNlLElBQVMsRUFBRSxZQUFVLE9BQUksTUFBSyxPQUFJLEFBQWMsRUFBRSxTQUFoQixjQUFzQixNQUFHLEVBQUUsVUFBUSxHQUFHLFNBQVEsS0FBRyxFQUFFLFVBQVEsR0FBRyxXQUFTLEtBQUcsS0FBRyxHQUFFLEtBQUcsSUFBVTtBQUFBLEtBQUksV0FBVSxTQUFTLEdBQUU7QUFBQyxXQUFNLGVBQWMsSUFBRSxFQUFFLFlBQVU7QUFBQSxPQUFNLEtBQUcsR0FBRyxLQUFJLEtBQUcsRUFBRSxJQUFHLElBQUcsQ0FBQyxjQUFhLEtBQUksS0FBRyxHQUFHLEtBQUksS0FBRyxFQUFFLElBQUcsSUFBRyxDQUFDLGVBQWMsS0FBSSxLQUFHLEdBQUcsS0FBSSxLQUFHLEVBQUUsSUFBRyxJQUFHLENBQUMsZUFBYyxHQUFFLGFBQVksR0FBRSxlQUFjLEtBQUksS0FBRyxHQUFHLEtBQUksS0FBRyxFQUFFLElBQUcsSUFBRyxDQUFDLGVBQWMsU0FBUyxHQUFFO0FBQUMsV0FBTSxtQkFBa0IsSUFBRSxFQUFFLGdCQUFjLE9BQU87QUFBQSxPQUFpQixLQUFHLEdBQUcsS0FBSSxLQUFHLEVBQUUsSUFBRyxJQUFHLENBQUMsTUFBSyxLQUFJLEtBQUcsR0FBRyxLQUFJLEtBQUc7QUFBQSxJQUFDLEtBQUk7QUFBQSxJQUN4ZixVQUFTO0FBQUEsSUFBSSxNQUFLO0FBQUEsSUFBWSxJQUFHO0FBQUEsSUFBVSxPQUFNO0FBQUEsSUFBYSxNQUFLO0FBQUEsSUFBWSxLQUFJO0FBQUEsSUFBUyxLQUFJO0FBQUEsSUFBSyxNQUFLO0FBQUEsSUFBYyxNQUFLO0FBQUEsSUFBYyxRQUFPO0FBQUEsSUFBYSxpQkFBZ0I7QUFBQSxLQUFnQixLQUFHO0FBQUEsSUFBQyxHQUFFO0FBQUEsSUFBWSxHQUFFO0FBQUEsSUFBTSxJQUFHO0FBQUEsSUFBUSxJQUFHO0FBQUEsSUFBUSxJQUFHO0FBQUEsSUFBUSxJQUFHO0FBQUEsSUFBVSxJQUFHO0FBQUEsSUFBTSxJQUFHO0FBQUEsSUFBUSxJQUFHO0FBQUEsSUFBVyxJQUFHO0FBQUEsSUFBUyxJQUFHO0FBQUEsSUFBSSxJQUFHO0FBQUEsSUFBUyxJQUFHO0FBQUEsSUFBVyxJQUFHO0FBQUEsSUFBTSxJQUFHO0FBQUEsSUFBTyxJQUFHO0FBQUEsSUFBWSxJQUFHO0FBQUEsSUFBVSxJQUFHO0FBQUEsSUFBYSxJQUFHO0FBQUEsSUFBWSxJQUFHO0FBQUEsSUFBUyxJQUFHO0FBQUEsSUFBUyxLQUFJO0FBQUEsSUFBSyxLQUFJO0FBQUEsSUFBSyxLQUFJO0FBQUEsSUFBSyxLQUFJO0FBQUEsSUFBSyxLQUFJO0FBQUEsSUFBSyxLQUFJO0FBQUEsSUFBSyxLQUFJO0FBQUEsSUFDdGYsS0FBSTtBQUFBLElBQUssS0FBSTtBQUFBLElBQUssS0FBSTtBQUFBLElBQU0sS0FBSTtBQUFBLElBQU0sS0FBSTtBQUFBLElBQU0sS0FBSTtBQUFBLElBQVUsS0FBSTtBQUFBLElBQWEsS0FBSTtBQUFBLEtBQVEsS0FBRyxDQUFDLEtBQUksVUFBUyxTQUFRLFdBQVUsTUFBSyxXQUFVLE9BQU07QUFBWSxjQUFZLEdBQUU7QUFBQyxRQUFJLElBQUUsS0FBSztBQUFZLFdBQU8sRUFBRSxtQkFBaUIsRUFBRSxpQkFBaUIsS0FBSSxLQUFFLEdBQUcsTUFBSSxDQUFDLENBQUMsRUFBRSxLQUFHO0FBQUE7QUFBRyxnQkFBYTtBQUFDLFdBQU87QUFBQTtBQUM5UixNQUFJLEtBQUcsRUFBRSxJQUFHLElBQUcsQ0FBQyxLQUFJLFNBQVMsR0FBRTtBQUFDLFFBQUcsRUFBRSxLQUFJO0FBQUMsVUFBSSxJQUFFLEdBQUcsRUFBRSxRQUFNLEVBQUU7QUFBSSxVQUFHLEFBQWlCLE1BQWpCO0FBQW1CLGVBQU87QUFBQTtBQUFFLFdBQU0sQUFBYSxFQUFFLFNBQWYsYUFBcUIsS0FBRSxHQUFHLElBQUcsQUFBSyxNQUFMLEtBQU8sVUFBUSxPQUFPLGFBQWEsTUFBSSxBQUFZLEVBQUUsU0FBZCxhQUFvQixBQUFVLEVBQUUsU0FBWixVQUFpQixHQUFHLEVBQUUsWUFBVSxpQkFBZTtBQUFBLEtBQUksTUFBSyxHQUFFLFVBQVMsR0FBRSxTQUFRLEdBQUUsVUFBUyxHQUFFLFFBQU8sR0FBRSxTQUFRLEdBQUUsUUFBTyxHQUFFLFFBQU8sR0FBRSxrQkFBaUIsSUFBRyxVQUFTLFNBQVMsR0FBRTtBQUFDLFdBQU0sQUFBYSxFQUFFLFNBQWYsYUFBb0IsR0FBRyxLQUFHO0FBQUEsS0FBRyxTQUFRLFNBQVMsR0FBRTtBQUFDLFdBQU0sQUFBWSxFQUFFLFNBQWQsYUFBb0IsQUFBVSxFQUFFLFNBQVosVUFBaUIsRUFBRSxVQUFRO0FBQUEsS0FBRyxPQUFNLFNBQVMsR0FBRTtBQUFDLFdBQU0sQUFDN2UsRUFBRSxTQUQyZSxhQUN0ZSxHQUFHLEtBQUcsQUFBWSxFQUFFLFNBQWQsYUFBb0IsQUFBVSxFQUFFLFNBQVosVUFBaUIsRUFBRSxVQUFRO0FBQUEsT0FBSyxLQUFHLEdBQUcsS0FBSSxLQUFHLEVBQUUsSUFBRyxJQUFHLENBQUMsV0FBVSxHQUFFLE9BQU0sR0FBRSxRQUFPLEdBQUUsVUFBUyxHQUFFLG9CQUFtQixHQUFFLE9BQU0sR0FBRSxPQUFNLEdBQUUsT0FBTSxHQUFFLGFBQVksR0FBRSxXQUFVLEtBQUksS0FBRyxHQUFHLEtBQUksS0FBRyxFQUFFLElBQUcsSUFBRyxDQUFDLFNBQVEsR0FBRSxlQUFjLEdBQUUsZ0JBQWUsR0FBRSxRQUFPLEdBQUUsU0FBUSxHQUFFLFNBQVEsR0FBRSxVQUFTLEdBQUUsa0JBQWlCLE1BQUssS0FBRyxHQUFHLEtBQUksS0FBRyxFQUFFLElBQUcsSUFBRyxDQUFDLGNBQWEsR0FBRSxhQUFZLEdBQUUsZUFBYyxLQUFJLEtBQUcsR0FBRyxLQUFJLEtBQUcsRUFBRSxJQUFHLElBQUc7QUFBQSxJQUFDLFFBQU8sU0FBUyxHQUFFO0FBQUMsYUFBTSxZQUFXLElBQUUsRUFBRSxTQUFPLGlCQUFnQixJQUFFLENBQUMsRUFBRSxjQUFZO0FBQUE7QUFBQSxJQUNsZixRQUFPLFNBQVMsR0FBRTtBQUFDLGFBQU0sWUFBVyxJQUFFLEVBQUUsU0FBTyxpQkFBZ0IsSUFBRSxDQUFDLEVBQUUsY0FBWSxnQkFBZSxJQUFFLENBQUMsRUFBRSxhQUFXO0FBQUE7QUFBQSxJQUFHLFFBQU87QUFBQSxJQUFFLFdBQVU7QUFBQSxNQUFJLEtBQUcsR0FBRyxLQUFJLEtBQUcsQ0FBQyxHQUFFLElBQUcsSUFBRyxLQUFJLEtBQUcsTUFBSSxzQkFBcUIsUUFBTyxLQUFHO0FBQUssUUFBSSxrQkFBaUIsWUFBVyxNQUFHLFNBQVM7QUFBYyxNQUFJLEtBQUcsTUFBSSxlQUFjLFVBQVEsQ0FBQyxJQUFHLEtBQUcsTUFBSyxFQUFDLE1BQUksTUFBSSxJQUFFLE1BQUksTUFBSSxLQUFJLEtBQUcsT0FBTyxhQUFhLEtBQUksS0FBRztBQUMxVyxjQUFZLEdBQUUsR0FBRTtBQUFDLFlBQU87QUFBQSxXQUFRO0FBQVEsZUFBTSxBQUFLLEdBQUcsUUFBUSxFQUFFLGFBQWxCO0FBQUEsV0FBZ0M7QUFBVSxlQUFPLEFBQU0sRUFBRSxZQUFSO0FBQUEsV0FBcUI7QUFBQSxXQUFnQjtBQUFBLFdBQWlCO0FBQVcsZUFBTTtBQUFBO0FBQVcsZUFBTTtBQUFBO0FBQUE7QUFBSSxjQUFZLEdBQUU7QUFBQyxlQUFFLEVBQUUsUUFBYSxBQUFXLE9BQU8sS0FBbEIsWUFBcUIsVUFBUyxJQUFFLEVBQUUsT0FBSztBQUFBO0FBQUssTUFBSSxLQUFHO0FBQUcsY0FBWSxHQUFFLEdBQUU7QUFBQyxZQUFPO0FBQUEsV0FBUTtBQUFpQixlQUFPLEdBQUc7QUFBQSxXQUFRO0FBQVcsZUFBRyxBQUFLLEVBQUUsVUFBUCxLQUFvQixPQUFLLE1BQUcsSUFBVTtBQUFBLFdBQVE7QUFBWSxlQUFPLElBQUUsRUFBRSxNQUFLLE1BQUksTUFBSSxLQUFHLE9BQUs7QUFBQTtBQUFVLGVBQU87QUFBQTtBQUFBO0FBQzdjLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRztBQUFHLGFBQU0sQUFBbUIsTUFBbkIsb0JBQXNCLENBQUMsTUFBSSxHQUFHLEdBQUUsS0FBSSxLQUFFLE1BQUssS0FBRyxLQUFHLEtBQUcsTUFBSyxLQUFHLElBQUcsS0FBRztBQUFLLFlBQU87QUFBQSxXQUFRO0FBQVEsZUFBTztBQUFBLFdBQVU7QUFBVyxZQUFHLENBQUUsR0FBRSxXQUFTLEVBQUUsVUFBUSxFQUFFLFlBQVUsRUFBRSxXQUFTLEVBQUUsUUFBTztBQUFDLGNBQUcsRUFBRSxRQUFNLElBQUUsRUFBRSxLQUFLO0FBQU8sbUJBQU8sRUFBRTtBQUFLLGNBQUcsRUFBRTtBQUFNLG1CQUFPLE9BQU8sYUFBYSxFQUFFO0FBQUE7QUFBTyxlQUFPO0FBQUEsV0FBVTtBQUFpQixlQUFPLE1BQUksQUFBTyxFQUFFLFdBQVQsT0FBZ0IsT0FBSyxFQUFFO0FBQUE7QUFBYSxlQUFPO0FBQUE7QUFBQTtBQUNsWSxNQUFJLEtBQUcsQ0FBQyxPQUFNLElBQUcsTUFBSyxJQUFHLFVBQVMsSUFBRyxrQkFBaUIsSUFBRyxPQUFNLElBQUcsT0FBTSxJQUFHLFFBQU8sSUFBRyxVQUFTLElBQUcsT0FBTSxJQUFHLFFBQU8sSUFBRyxLQUFJLElBQUcsTUFBSyxJQUFHLE1BQUssSUFBRyxLQUFJLElBQUcsTUFBSztBQUFJLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRSxLQUFHLEVBQUUsWUFBVSxFQUFFLFNBQVM7QUFBYyxXQUFNLEFBQVUsTUFBVixVQUFZLENBQUMsQ0FBQyxHQUFHLEVBQUUsUUFBTSxBQUFhLE1BQWI7QUFBQTtBQUFxQixjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxPQUFHLElBQUcsSUFBRSxHQUFHLEdBQUUsYUFBWSxJQUFFLEVBQUUsVUFBUyxLQUFFLElBQUksR0FBRyxZQUFXLFVBQVMsTUFBSyxHQUFFLElBQUcsRUFBRSxLQUFLLENBQUMsT0FBTSxHQUFFLFdBQVU7QUFBQTtBQUFLLE1BQUksS0FBRyxNQUFLLEtBQUc7QUFBSyxjQUFZLEdBQUU7QUFBQyxPQUFHLEdBQUU7QUFBQTtBQUFHLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFHO0FBQUcsUUFBRyxHQUFHO0FBQUcsYUFBTztBQUFBO0FBQ25lLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRyxBQUFXLE1BQVg7QUFBYSxhQUFPO0FBQUE7QUFBRSxNQUFJLEtBQUc7QUFBRyxFQUFHLE1BQVcsQ0FBRyxLQUFRLE1BQUcsYUFBWSxVQUFhLE1BQVEsTUFBRyxTQUFTLGNBQWMsUUFBTyxHQUFHLGFBQWEsV0FBVSxZQUFXLEtBQUcsQUFBYSxPQUFPLEdBQUcsV0FBdkIsYUFBK0IsS0FBRyxNQUFRLEtBQUcsSUFBRyxLQUFHLE1BQUssRUFBQyxTQUFTLGdCQUFjLElBQUUsU0FBUztBQUF0TixVQUFjLElBQW9DO0FBQWtMLGdCQUFhO0FBQUMsVUFBSyxJQUFHLFlBQVksb0JBQW1CLEtBQUksS0FBRyxLQUFHO0FBQUE7QUFBTSxjQUFZLEdBQUU7QUFBQyxRQUFHLEFBQVUsRUFBRSxpQkFBWixXQUEwQixHQUFHLEtBQUk7QUFBQyxVQUFJLElBQUU7QUFBeUIsVUFBdEIsR0FBRyxHQUFFLElBQUcsR0FBRSxHQUFHLEtBQUksSUFBRSxJQUFNO0FBQUcsVUFBRTtBQUFBLFdBQU87QUFBQyxhQUFHO0FBQUcsWUFBRztBQUFDLGFBQUcsR0FBRTtBQUFBLGtCQUFHO0FBQVEsZUFBRyxJQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDM2UsY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLElBQVksTUFBWixZQUFlLE9BQUssS0FBRyxHQUFFLEtBQUcsR0FBRSxHQUFHLFlBQVksb0JBQW1CLE9BQUssQUFBYSxNQUFiLGNBQWdCO0FBQUE7QUFBSyxjQUFZLEdBQUU7QUFBQyxRQUFHLEFBQW9CLE1BQXBCLHFCQUF1QixBQUFVLE1BQVYsV0FBYSxBQUFZLE1BQVo7QUFBYyxhQUFPLEdBQUc7QUFBQTtBQUFJLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRyxBQUFVLE1BQVY7QUFBWSxhQUFPLEdBQUc7QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRyxBQUFVLE1BQVYsV0FBYSxBQUFXLE1BQVg7QUFBYSxhQUFPLEdBQUc7QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFO0FBQUMsV0FBTyxNQUFJLEtBQUksQ0FBSSxNQUFKLEtBQU8sSUFBRSxLQUFJLElBQUUsTUFBSSxNQUFJLEtBQUcsTUFBSTtBQUFBO0FBQUUsTUFBSSxLQUFHLEFBQWEsT0FBTyxPQUFPLE1BQTNCLGFBQThCLE9BQU8sS0FBRyxJQUFHLEtBQUcsT0FBTyxVQUFVO0FBQzdhLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRyxHQUFHLEdBQUU7QUFBRyxhQUFNO0FBQUcsUUFBRyxBQUFXLE9BQU8sS0FBbEIsWUFBcUIsQUFBTyxNQUFQLFFBQVUsQUFBVyxPQUFPLEtBQWxCLFlBQXFCLEFBQU8sTUFBUDtBQUFTLGFBQU07QUFBRyxRQUFJLElBQUUsT0FBTyxLQUFLLElBQUcsSUFBRSxPQUFPLEtBQUs7QUFBRyxRQUFHLEVBQUUsV0FBUyxFQUFFO0FBQU8sYUFBTTtBQUFHLFNBQUksSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPO0FBQUksVUFBRyxDQUFDLEdBQUcsS0FBSyxHQUFFLEVBQUUsT0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLEtBQUksRUFBRSxFQUFFO0FBQUssZUFBTTtBQUFHLFdBQU07QUFBQTtBQUFHLGNBQVksR0FBRTtBQUFDLFdBQUssS0FBRyxFQUFFO0FBQVksVUFBRSxFQUFFO0FBQVcsV0FBTztBQUFBO0FBQ2xVLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUc7QUFBRyxRQUFFO0FBQUUsYUFBUSxHQUFFLEtBQUc7QUFBQyxVQUFHLEFBQUksRUFBRSxhQUFOLEdBQWU7QUFBMEIsWUFBekIsSUFBRSxJQUFFLEVBQUUsWUFBWSxRQUFVLEtBQUcsS0FBRyxLQUFHO0FBQUUsaUJBQU0sQ0FBQyxNQUFLLEdBQUUsUUFBTyxJQUFFO0FBQUcsWUFBRTtBQUFBO0FBQUUsU0FBRTtBQUFDLGVBQUssS0FBRztBQUFDLGNBQUcsRUFBRSxhQUFZO0FBQUMsZ0JBQUUsRUFBRTtBQUFZO0FBQUE7QUFBUSxjQUFFLEVBQUU7QUFBQTtBQUFXLFlBQUU7QUFBQTtBQUFPLFVBQUUsR0FBRztBQUFBO0FBQUE7QUFBSSxjQUFZLEdBQUUsR0FBRTtBQUFDLFdBQU8sS0FBRyxJQUFFLE1BQUksSUFBRSxLQUFHLEtBQUcsQUFBSSxFQUFFLGFBQU4sSUFBZSxLQUFHLEtBQUcsQUFBSSxFQUFFLGFBQU4sSUFBZSxHQUFHLEdBQUUsRUFBRSxjQUFZLGNBQWEsSUFBRSxFQUFFLFNBQVMsS0FBRyxFQUFFLDBCQUF3QixDQUFDLENBQUUsR0FBRSx3QkFBd0IsS0FBRyxNQUFJLEtBQUc7QUFBQTtBQUM1WixnQkFBYTtBQUFDLGFBQVEsSUFBRSxRQUFPLElBQUUsTUFBSyxhQUFhLEVBQUUscUJBQW1CO0FBQUMsVUFBRztBQUFDLFlBQUksSUFBRSxBQUFXLE9BQU8sRUFBRSxjQUFjLFNBQVMsUUFBM0M7QUFBQSxlQUFzRCxHQUFOO0FBQVMsWUFBRTtBQUFBO0FBQUcsVUFBRztBQUFFLFlBQUUsRUFBRTtBQUFBO0FBQW1CO0FBQU0sVUFBRSxHQUFHLEVBQUU7QUFBQTtBQUFVLFdBQU87QUFBQTtBQUFFLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRSxLQUFHLEVBQUUsWUFBVSxFQUFFLFNBQVM7QUFBYyxXQUFPLEtBQUksQ0FBVSxNQUFWLFdBQWMsQ0FBUyxFQUFFLFNBQVgsVUFBaUIsQUFBVyxFQUFFLFNBQWIsWUFBbUIsQUFBUSxFQUFFLFNBQVYsU0FBZ0IsQUFBUSxFQUFFLFNBQVYsU0FBZ0IsQUFBYSxFQUFFLFNBQWYsZUFBc0IsQUFBYSxNQUFiLGNBQWdCLEFBQVMsRUFBRSxvQkFBWDtBQUFBO0FBQzdZLE1BQUksS0FBRyxNQUFJLGtCQUFpQixZQUFVLE1BQUksU0FBUyxjQUFhLEtBQUcsTUFBSyxLQUFHLE1BQUssS0FBRyxNQUFLLEtBQUc7QUFDM0YsY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFLFdBQVMsSUFBRSxFQUFFLFdBQVMsQUFBSSxFQUFFLGFBQU4sSUFBZSxJQUFFLEVBQUU7QUFBYyxVQUFJLEFBQU0sTUFBTixRQUFVLE9BQUssR0FBRyxNQUFLLEtBQUUsSUFBRyxvQkFBbUIsS0FBRyxHQUFHLEtBQUcsSUFBRSxDQUFDLE9BQU0sRUFBRSxnQkFBZSxLQUFJLEVBQUUsZ0JBQWUsS0FBRyxHQUFFLGlCQUFlLEVBQUUsY0FBYyxlQUFhLFFBQVEsZ0JBQWUsSUFBRSxDQUFDLFlBQVcsRUFBRSxZQUFXLGNBQWEsRUFBRSxjQUFhLFdBQVUsRUFBRSxXQUFVLGFBQVksRUFBRSxlQUFjLE1BQUksR0FBRyxJQUFHLE1BQUssTUFBRyxHQUFFLElBQUUsR0FBRyxJQUFHLGFBQVksSUFBRSxFQUFFLFVBQVMsS0FBRSxJQUFJLEdBQUcsWUFBVyxVQUFTLE1BQUssR0FBRSxJQUFHLEVBQUUsS0FBSyxDQUFDLE9BQU0sR0FBRSxXQUFVLEtBQUksRUFBRSxTQUFPO0FBQUE7QUFDamYsS0FBRyxtakJBQW1qQixNQUFNLE1BQzVqQjtBQUFHLEtBQUcsb1JBQW9SLE1BQU0sTUFBSztBQUFHLEtBQUcsSUFBRztBQUFHLFdBQVEsS0FBRyxxRkFBcUYsTUFBTSxNQUFLLEtBQUcsR0FBRSxLQUFHLEdBQUcsUUFBTztBQUFLLE9BQUcsSUFBSSxHQUFHLEtBQUk7QUFBRyxLQUFHLGdCQUFlLENBQUMsWUFBVztBQUNsZSxLQUFHLGdCQUFlLENBQUMsWUFBVztBQUFjLEtBQUcsa0JBQWlCLENBQUMsY0FBYTtBQUFnQixLQUFHLGtCQUFpQixDQUFDLGNBQWE7QUFBZ0IsS0FBRyxZQUFXLG9FQUFvRSxNQUFNO0FBQU0sS0FBRyxZQUFXLHVGQUF1RixNQUFNO0FBQU0sS0FBRyxpQkFBZ0IsQ0FBQyxrQkFBaUIsWUFBVyxhQUFZO0FBQVUsS0FBRyxvQkFBbUIsMkRBQTJELE1BQU07QUFDNWYsS0FBRyxzQkFBcUIsNkRBQTZELE1BQU07QUFBTSxLQUFHLHVCQUFzQiw4REFBOEQsTUFBTTtBQUFNLE1BQUksS0FBRyxzTkFBc04sTUFBTSxNQUFLLEtBQUcsSUFBSSxJQUFJLDBDQUEwQyxNQUFNLEtBQUssT0FBTztBQUNuZixjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsUUFBTTtBQUFnQixNQUFFLGdCQUFjLEdBQUUsR0FBRyxHQUFFLEdBQUUsUUFBTyxJQUFHLEVBQUUsZ0JBQWM7QUFBQTtBQUNwRyxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUUsQUFBSyxLQUFFLE1BQVA7QUFBVSxhQUFRLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFJO0FBQUMsVUFBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUU7QUFBTSxVQUFFLEVBQUU7QUFBVSxTQUFFO0FBQUMsWUFBSSxJQUFFO0FBQU8sWUFBRztBQUFFLG1CQUFRLElBQUUsRUFBRSxTQUFPLEdBQUUsS0FBRyxHQUFFLEtBQUk7QUFBQyxnQkFBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUUsVUFBUyxJQUFFLEVBQUU7QUFBMkIsZ0JBQWIsSUFBRSxFQUFFLFVBQVksTUFBSSxLQUFHLEVBQUU7QUFBdUI7QUFBUSxlQUFHLEdBQUUsR0FBRSxJQUFHLElBQUU7QUFBQTtBQUFBO0FBQU8sZUFBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFvRCxnQkFBbkQsSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFLFVBQVMsSUFBRSxFQUFFLGVBQWMsSUFBRSxFQUFFLFVBQVksTUFBSSxLQUFHLEVBQUU7QUFBdUI7QUFBUSxlQUFHLEdBQUUsR0FBRSxJQUFHLElBQUU7QUFBQTtBQUFBO0FBQUE7QUFBSSxRQUFHO0FBQUcsWUFBTSxJQUFFLElBQUcsS0FBRyxJQUFHLEtBQUcsTUFBSztBQUFBO0FBQzFhLGFBQVcsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsSUFBRyxJQUFFLElBQUU7QUFBVyxNQUFFLElBQUksTUFBSyxJQUFHLEdBQUUsR0FBRSxHQUFFLEtBQUksRUFBRSxJQUFJO0FBQUE7QUFBSSxNQUFJLEtBQUcsb0JBQWtCLEtBQUssU0FBUyxTQUFTLElBQUksTUFBTTtBQUFHLGNBQVksR0FBRTtBQUFDLE1BQUUsT0FBTSxHQUFFLE1BQUksSUFBRyxHQUFHLFFBQVEsU0FBUyxHQUFFO0FBQUMsU0FBRyxJQUFJLE1BQUksR0FBRyxHQUFFLElBQUcsR0FBRSxPQUFNLEdBQUcsR0FBRSxJQUFHLEdBQUU7QUFBQTtBQUFBO0FBQ3RPLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxJQUFFLFVBQVUsVUFBUSxBQUFTLFVBQVUsT0FBbkIsU0FBc0IsVUFBVSxLQUFHLEdBQUUsSUFBRTtBQUE2RCxRQUEzRCxBQUFvQixNQUFwQixxQkFBdUIsQUFBSSxFQUFFLGFBQU4sS0FBaUIsS0FBRSxFQUFFLGdCQUFrQixBQUFPLE1BQVAsUUFBVSxDQUFDLEtBQUcsR0FBRyxJQUFJLElBQUc7QUFBQyxVQUFHLEFBQVcsTUFBWDtBQUFhO0FBQU8sV0FBRyxHQUFFLElBQUU7QUFBQTtBQUFFLFFBQUksSUFBRSxHQUFHLElBQUcsSUFBRSxJQUFFLE9BQU0sS0FBRSxZQUFVO0FBQVUsTUFBRSxJQUFJLE1BQUssTUFBSSxNQUFHLElBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsSUFBSTtBQUFBO0FBQ2xTLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFHLElBQUk7QUFBRyxZQUFPLEFBQVMsTUFBVCxTQUFXLElBQUU7QUFBQSxXQUFRO0FBQUUsWUFBRTtBQUFHO0FBQUEsV0FBVztBQUFFLFlBQUU7QUFBRztBQUFBO0FBQWMsWUFBRTtBQUFBO0FBQUcsUUFBRSxFQUFFLEtBQUssTUFBSyxHQUFFLEdBQUUsSUFBRyxJQUFFLFFBQU8sQ0FBQyxNQUFJLEFBQWUsTUFBZixnQkFBa0IsQUFBYyxNQUFkLGVBQWlCLEFBQVUsTUFBVixXQUFjLEtBQUUsS0FBSSxJQUFFLEFBQVMsTUFBVCxTQUFXLEVBQUUsaUJBQWlCLEdBQUUsR0FBRSxDQUFDLFNBQVEsSUFBRyxTQUFRLE1BQUksRUFBRSxpQkFBaUIsR0FBRSxHQUFFLE1BQUksQUFBUyxNQUFULFNBQVcsRUFBRSxpQkFBaUIsR0FBRSxHQUFFLENBQUMsU0FBUSxNQUFJLEVBQUUsaUJBQWlCLEdBQUUsR0FBRTtBQUFBO0FBQ3BXLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsUUFBRyxBQUFLLEtBQUUsTUFBUCxLQUFXLEFBQUssS0FBRSxNQUFQLEtBQVcsQUFBTyxNQUFQO0FBQVM7QUFBRSxtQkFBTztBQUFDLGNBQUcsQUFBTyxNQUFQO0FBQVM7QUFBTyxjQUFJLElBQUUsRUFBRTtBQUFJLGNBQUcsQUFBSSxNQUFKLEtBQU8sQUFBSSxNQUFKLEdBQU07QUFBQyxnQkFBSSxJQUFFLEVBQUUsVUFBVTtBQUFjLGdCQUFHLE1BQUksS0FBRyxBQUFJLEVBQUUsYUFBTixLQUFnQixFQUFFLGVBQWE7QUFBRTtBQUFNLGdCQUFHLEFBQUksTUFBSjtBQUFNLG1CQUFJLElBQUUsRUFBRSxRQUFPLEFBQU8sTUFBUCxRQUFVO0FBQUMsb0JBQUksSUFBRSxFQUFFO0FBQUksb0JBQUcsQ0FBSSxNQUFKLEtBQU8sQUFBSSxNQUFKLE1BQVMsS0FBRSxFQUFFLFVBQVUsZUFBYyxNQUFJLEtBQUcsQUFBSSxFQUFFLGFBQU4sS0FBZ0IsRUFBRSxlQUFhO0FBQUU7QUFBTyxvQkFBRSxFQUFFO0FBQUE7QUFBTyxtQkFBSyxBQUFPLE1BQVAsUUFBVTtBQUFTLGtCQUFSLElBQUUsR0FBRyxJQUFNLEFBQU8sTUFBUDtBQUFTO0FBQWUsa0JBQVIsSUFBRSxFQUFFLEtBQU8sQUFBSSxNQUFKLEtBQU8sQUFBSSxNQUFKLEdBQU07QUFBQyxvQkFBRSxJQUFFO0FBQUU7QUFBQTtBQUFXLGtCQUFFLEVBQUU7QUFBQTtBQUFBO0FBQVksY0FBRSxFQUFFO0FBQUE7QUFBTyxPQUFHLFdBQVU7QUFBQyxVQUFJLEtBQUUsR0FBRSxLQUFFLEdBQUcsSUFBRyxLQUFFO0FBQ3BmLFNBQUU7QUFBQyxZQUFJLEtBQUUsR0FBRyxJQUFJO0FBQUcsWUFBRyxBQUFTLE9BQVQsUUFBVztBQUFDLGNBQUksS0FBRSxJQUFHLElBQUU7QUFBRSxrQkFBTztBQUFBLGlCQUFRO0FBQVcsa0JBQUcsQUFBSSxHQUFHLE9BQVA7QUFBVTtBQUFBLGlCQUFhO0FBQUEsaUJBQWU7QUFBUSxtQkFBRTtBQUFHO0FBQUEsaUJBQVc7QUFBVSxrQkFBRSxTQUFRLEtBQUU7QUFBRztBQUFBLGlCQUFXO0FBQVcsa0JBQUUsUUFBTyxLQUFFO0FBQUc7QUFBQSxpQkFBVztBQUFBLGlCQUFrQjtBQUFZLG1CQUFFO0FBQUc7QUFBQSxpQkFBVztBQUFRLGtCQUFHLEFBQUksRUFBRSxXQUFOO0FBQWE7QUFBQSxpQkFBYTtBQUFBLGlCQUFnQjtBQUFBLGlCQUFnQjtBQUFBLGlCQUFpQjtBQUFBLGlCQUFpQjtBQUFBLGlCQUFlO0FBQUEsaUJBQWdCO0FBQUEsaUJBQWlCO0FBQWMsbUJBQUU7QUFBRztBQUFBLGlCQUFXO0FBQUEsaUJBQVk7QUFBQSxpQkFBZTtBQUFBLGlCQUFpQjtBQUFBLGlCQUFnQjtBQUFBLGlCQUFpQjtBQUFBLGlCQUFnQjtBQUFBLGlCQUFpQjtBQUFPLG1CQUMxaUI7QUFBRztBQUFBLGlCQUFXO0FBQUEsaUJBQW1CO0FBQUEsaUJBQWdCO0FBQUEsaUJBQWlCO0FBQWEsbUJBQUU7QUFBRztBQUFBLGlCQUFXO0FBQUEsaUJBQVE7QUFBQSxpQkFBUTtBQUFHLG1CQUFFO0FBQUc7QUFBQSxpQkFBVztBQUFHLG1CQUFFO0FBQUc7QUFBQSxpQkFBVztBQUFTLG1CQUFFO0FBQUc7QUFBQSxpQkFBVztBQUFRLG1CQUFFO0FBQUc7QUFBQSxpQkFBVztBQUFBLGlCQUFZO0FBQUEsaUJBQVc7QUFBUSxtQkFBRTtBQUFHO0FBQUEsaUJBQVc7QUFBQSxpQkFBeUI7QUFBQSxpQkFBMEI7QUFBQSxpQkFBcUI7QUFBQSxpQkFBbUI7QUFBQSxpQkFBbUI7QUFBQSxpQkFBa0I7QUFBQSxpQkFBbUI7QUFBWSxtQkFBRTtBQUFBO0FBQUcsY0FBSSxJQUFFLEFBQUssS0FBRSxNQUFQLEdBQVUsSUFBRSxDQUFDLEtBQUcsQUFBVyxNQUFYLFVBQWEsSUFBRSxJQUFFLEFBQU8sT0FBUCxPQUFTLEtBQUUsWUFBVSxPQUFLO0FBQUUsY0FBRTtBQUFHLG1CQUFRLElBQUUsSUFBRSxHQUFFLEFBQy9lLE1BRCtlLFFBQzVlO0FBQUMsZ0JBQUU7QUFBRSxnQkFBSSxJQUFFLEVBQUU7QUFBc0YsZ0JBQTVFLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBTyxNQUFQLFFBQVcsS0FBRSxHQUFFLEFBQU8sTUFBUCxRQUFXLEtBQUUsR0FBRyxHQUFFLElBQUcsQUFBTSxLQUFOLFFBQVMsRUFBRSxLQUFLLEdBQUcsR0FBRSxHQUFFLE9BQVM7QUFBRTtBQUFNLGdCQUFFLEVBQUU7QUFBQTtBQUFPLGNBQUUsRUFBRSxVQUFTLE1BQUUsSUFBSSxHQUFFLElBQUUsR0FBRSxNQUFLLEdBQUUsS0FBRyxHQUFFLEtBQUssQ0FBQyxPQUFNLElBQUUsV0FBVTtBQUFBO0FBQUE7QUFBTSxVQUFHLEFBQUssS0FBRSxNQUFQLEdBQVU7QUFBQyxXQUFFO0FBQXlFLGNBQXhFLEtBQUUsQUFBYyxNQUFkLGVBQWlCLEFBQWdCLE1BQWhCLGVBQWtCLEtBQUUsQUFBYSxNQUFiLGNBQWdCLEFBQWUsTUFBZixjQUFvQixNQUFHLEFBQUssS0FBRSxPQUFQLEtBQWEsS0FBRSxFQUFFLGlCQUFlLEVBQUUsZ0JBQWUsSUFBRyxNQUFJLEVBQUU7QUFBSztBQUFRLGNBQUcsT0FBRyxPQUFHLE1BQUUsR0FBRSxXQUFTLEtBQUUsS0FBRyxNQUFFLEdBQUUsaUJBQWUsR0FBRSxlQUFhLEdBQUUsZUFBYSxRQUFPLEFBQUcsS0FBTSxLQUFFLEVBQUUsaUJBQWUsRUFBRSxXQUFVLEtBQUUsSUFBRSxJQUFFLElBQUUsR0FBRyxLQUFHLE1BQUssQUFDbmYsTUFEbWYsUUFDL2UsS0FBRSxHQUFHLElBQUcsTUFBSSxLQUFHLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxFQUFFLFFBQU4sTUFBVyxLQUFFLFNBQVUsTUFBRSxNQUFLLElBQUUsS0FBSyxPQUFJLElBQUU7QUFBZ1UsZ0JBQS9ULElBQUUsSUFBRyxJQUFFLGdCQUFlLElBQUUsZ0JBQWUsSUFBRSxTQUFXLENBQWUsTUFBZixnQkFBa0IsQUFBZ0IsTUFBaEIsa0JBQWtCLEtBQUUsSUFBRyxJQUFFLGtCQUFpQixJQUFFLGtCQUFpQixJQUFFLFlBQVUsSUFBRSxBQUFNLE1BQU4sT0FBUSxLQUFFLEdBQUcsS0FBRyxJQUFFLEFBQU0sS0FBTixPQUFRLEtBQUUsR0FBRyxJQUFHLEtBQUUsSUFBSSxFQUFFLEdBQUUsSUFBRSxTQUFRLElBQUUsR0FBRSxLQUFHLEdBQUUsU0FBTyxHQUFFLEdBQUUsZ0JBQWMsR0FBRSxJQUFFLE1BQUssR0FBRyxRQUFLLE1BQUksS0FBRSxJQUFJLEVBQUUsR0FBRSxJQUFFLFNBQVEsR0FBRSxHQUFFLEtBQUcsRUFBRSxTQUFPLEdBQUUsRUFBRSxnQkFBYyxHQUFFLElBQUUsSUFBRyxJQUFFLEdBQUssTUFBRztBQUFFLGlCQUFFO0FBQWEscUJBQVosSUFBRSxJQUFFLElBQUUsR0FBRSxJQUFFLEdBQU0sSUFBRSxHQUFFLEdBQUUsSUFBRSxHQUFHO0FBQUc7QUFBUSxxQkFBSixJQUFFLEdBQU0sSUFBRSxHQUFFLEdBQUUsSUFBRSxHQUFHO0FBQUc7QUFBSSx1QkFBSyxJQUFFLElBQUU7QUFBRyxzQkFBRSxHQUFHLElBQUc7QUFBSSx1QkFBSyxJQUFFLElBQUU7QUFBRyxzQkFDcGYsR0FBRyxJQUFHO0FBQUksdUJBQUssT0FBSztBQUFDLHNCQUFHLE1BQUksS0FBRyxBQUFPLE1BQVAsUUFBVSxNQUFJLEVBQUU7QUFBVTtBQUFRLHNCQUFFLEdBQUcsSUFBRyxJQUFFLEdBQUc7QUFBQTtBQUFHLG9CQUFFO0FBQUE7QUFBQTtBQUFVLGtCQUFFO0FBQUssWUFBTyxPQUFQLFFBQVUsR0FBRyxJQUFFLElBQUUsSUFBRSxHQUFFLEtBQUksQUFBTyxNQUFQLFFBQVUsQUFBTyxNQUFQLFFBQVUsR0FBRyxJQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUE7QUFBQTtBQUFNLFdBQUU7QUFBeUQsY0FBeEQsS0FBRSxLQUFFLEdBQUcsTUFBRyxRQUFPLEtBQUUsR0FBRSxZQUFVLEdBQUUsU0FBUyxlQUFpQixBQUFXLE9BQVgsWUFBYyxBQUFVLE9BQVYsV0FBYSxBQUFTLEdBQUUsU0FBWDtBQUFnQixnQkFBSSxJQUFFO0FBQUEsbUJBQVcsR0FBRztBQUFHLGdCQUFHO0FBQUcsa0JBQUU7QUFBQSxpQkFBTztBQUFDLGtCQUFFO0FBQUcsa0JBQUksSUFBRTtBQUFBO0FBQUE7QUFBTyxZQUFDLE1BQUUsR0FBRSxhQUFXLEFBQVUsR0FBRSxrQkFBWixXQUE0QixDQUFhLEdBQUUsU0FBZixjQUFxQixBQUFVLEdBQUUsU0FBWixZQUFvQixLQUFFO0FBQUksY0FBRyxLQUFJLEtBQUUsRUFBRSxHQUFFLE1BQUk7QUFBQyxlQUFHLElBQUUsR0FBRSxHQUFFO0FBQUc7QUFBQTtBQUFRLGVBQUcsRUFBRSxHQUFFLElBQUUsS0FBRyxBQUFhLE1BQWIsY0FBaUIsS0FBRSxHQUFFLGtCQUN0ZSxFQUFFLGNBQVksQUFBVyxHQUFFLFNBQWIsWUFBbUIsR0FBRyxJQUFFLFVBQVMsR0FBRTtBQUFBO0FBQXdCLGdCQUFqQixJQUFFLEtBQUUsR0FBRyxNQUFHLFFBQWM7QUFBQSxlQUFRO0FBQVUsWUFBRyxJQUFHLE1BQUksQUFBUyxFQUFFLG9CQUFYLFdBQTJCLE1BQUcsR0FBRSxLQUFHLElBQUUsS0FBRztBQUFLO0FBQUEsZUFBVztBQUFXLGlCQUFHLEtBQUcsS0FBRztBQUFLO0FBQUEsZUFBVztBQUFZLGlCQUFHO0FBQUc7QUFBQSxlQUFXO0FBQUEsZUFBbUI7QUFBQSxlQUFlO0FBQVUsaUJBQUcsSUFBRyxHQUFHLElBQUUsR0FBRTtBQUFHO0FBQUEsZUFBVztBQUFrQixnQkFBRztBQUFHO0FBQUEsZUFBVztBQUFBLGVBQWU7QUFBUSxlQUFHLElBQUUsR0FBRTtBQUFBO0FBQUcsWUFBSTtBQUFFLFlBQUc7QUFBRyxhQUFFO0FBQUMsb0JBQU87QUFBQSxtQkFBUTtBQUFtQixvQkFBSSxJQUFFO0FBQXFCO0FBQUEsbUJBQWE7QUFBaUIsb0JBQUU7QUFBbUI7QUFBQSxtQkFDMWU7QUFBb0Isb0JBQUU7QUFBc0I7QUFBQTtBQUFRLGdCQUFFO0FBQUE7QUFBQTtBQUFZLGVBQUcsR0FBRyxHQUFFLE1BQUssS0FBRSxzQkFBb0IsQUFBWSxNQUFaLGFBQWUsQUFBTSxFQUFFLFlBQVIsT0FBa0IsS0FBRTtBQUFzQixhQUFJLE9BQUksQUFBTyxFQUFFLFdBQVQsUUFBa0IsT0FBSSxBQUF1QixNQUF2Qix1QkFBeUIsQUFBcUIsTUFBckIsc0JBQXdCLE1BQUssS0FBRSxRQUFPLE1BQUcsSUFBRSxLQUFHLFdBQVUsS0FBRyxHQUFHLFFBQU0sR0FBRyxhQUFZLEtBQUcsTUFBSyxJQUFFLEdBQUcsSUFBRSxJQUFHLElBQUUsRUFBRSxVQUFTLEtBQUUsSUFBSSxHQUFHLEdBQUUsR0FBRSxNQUFLLEdBQUUsS0FBRyxHQUFFLEtBQUssQ0FBQyxPQUFNLEdBQUUsV0FBVSxLQUFJLElBQUUsRUFBRSxPQUFLLElBQUcsS0FBRSxHQUFHLElBQUcsQUFBTyxNQUFQLFFBQVcsR0FBRSxPQUFLLE9BQVMsS0FBRSxLQUFHLEdBQUcsR0FBRSxLQUFHLEdBQUcsR0FBRSxPQUFHLE1BQUUsR0FBRyxJQUFFLGtCQUFpQixJQUFFLEdBQUUsVUFBUyxNQUFFLElBQUksR0FBRyxpQkFDbmYsZUFBYyxNQUFLLEdBQUUsS0FBRyxHQUFFLEtBQUssQ0FBQyxPQUFNLElBQUUsV0FBVSxNQUFJLEdBQUUsT0FBSztBQUFBO0FBQUcsU0FBRyxJQUFFO0FBQUE7QUFBQTtBQUFLLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxXQUFNLENBQUMsVUFBUyxHQUFFLFVBQVMsR0FBRSxlQUFjO0FBQUE7QUFBRyxjQUFZLEdBQUUsR0FBRTtBQUFDLGFBQVEsSUFBRSxJQUFFLFdBQVUsSUFBRSxJQUFHLEFBQU8sTUFBUCxRQUFVO0FBQUMsVUFBSSxJQUFFLEdBQUUsSUFBRSxFQUFFO0FBQVUsTUFBSSxFQUFFLFFBQU4sS0FBVyxBQUFPLE1BQVAsUUFBVyxLQUFFLEdBQUUsSUFBRSxHQUFHLEdBQUUsSUFBRyxBQUFNLEtBQU4sUUFBUyxFQUFFLFFBQVEsR0FBRyxHQUFFLEdBQUUsS0FBSSxJQUFFLEdBQUcsR0FBRSxJQUFHLEFBQU0sS0FBTixRQUFTLEVBQUUsS0FBSyxHQUFHLEdBQUUsR0FBRSxNQUFLLElBQUUsRUFBRTtBQUFBO0FBQU8sV0FBTztBQUFBO0FBQUUsY0FBWSxHQUFFO0FBQUMsUUFBRyxBQUFPLE1BQVA7QUFBUyxhQUFPO0FBQUs7QUFBRyxVQUFFLEVBQUU7QUFBQSxXQUFhLEtBQUcsQUFBSSxFQUFFLFFBQU47QUFBVyxXQUFPLEtBQUk7QUFBQTtBQUN4YSxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGFBQVEsSUFBRSxFQUFFLFlBQVcsSUFBRSxJQUFHLEFBQU8sTUFBUCxRQUFVLE1BQUksS0FBRztBQUFDLFVBQUksSUFBRSxHQUFFLElBQUUsRUFBRSxXQUFVLElBQUUsRUFBRTtBQUFVLFVBQUcsQUFBTyxNQUFQLFFBQVUsTUFBSTtBQUFFO0FBQU0sTUFBSSxFQUFFLFFBQU4sS0FBVyxBQUFPLE1BQVAsUUFBVyxLQUFFLEdBQUUsSUFBRyxLQUFFLEdBQUcsR0FBRSxJQUFHLEFBQU0sS0FBTixRQUFTLEVBQUUsUUFBUSxHQUFHLEdBQUUsR0FBRSxPQUFLLEtBQUksS0FBRSxHQUFHLEdBQUUsSUFBRyxBQUFNLEtBQU4sUUFBUyxFQUFFLEtBQUssR0FBRyxHQUFFLEdBQUUsT0FBTSxJQUFFLEVBQUU7QUFBQTtBQUFPLElBQUksRUFBRSxXQUFOLEtBQWMsRUFBRSxLQUFLLENBQUMsT0FBTSxHQUFFLFdBQVU7QUFBQTtBQUFJLGdCQUFhO0FBQUE7QUFBRSxNQUFJLEtBQUcsTUFBSyxLQUFHO0FBQUssY0FBWSxHQUFFLEdBQUU7QUFBQyxZQUFPO0FBQUEsV0FBUTtBQUFBLFdBQWM7QUFBQSxXQUFhO0FBQUEsV0FBYztBQUFXLGVBQU0sQ0FBQyxDQUFDLEVBQUU7QUFBQTtBQUFVLFdBQU07QUFBQTtBQUMzYixjQUFZLEdBQUUsR0FBRTtBQUFDLFdBQU0sQUFBYSxNQUFiLGNBQWdCLEFBQVcsTUFBWCxZQUFjLEFBQWEsTUFBYixjQUFnQixBQUFXLE9BQU8sRUFBRSxZQUFwQixZQUE4QixBQUFXLE9BQU8sRUFBRSxZQUFwQixZQUE4QixBQUFXLE9BQU8sRUFBRSwyQkFBcEIsWUFBNkMsQUFBTyxFQUFFLDRCQUFULFFBQWtDLEFBQU0sRUFBRSx3QkFBd0IsVUFBaEM7QUFBQTtBQUF1QyxNQUFJLEtBQUcsQUFBYSxPQUFPLGNBQXBCLGFBQStCLGFBQVcsUUFBTyxLQUFHLEFBQWEsT0FBTyxnQkFBcEIsYUFBaUMsZUFBYTtBQUFPLGNBQVksR0FBRTtBQUFDLElBQUksRUFBRSxhQUFOLElBQWUsRUFBRSxjQUFZLEtBQUcsQUFBSSxFQUFFLGFBQU4sS0FBaUIsS0FBRSxFQUFFLE1BQUssQUFBTSxLQUFOLFFBQVUsR0FBRSxjQUFZO0FBQUE7QUFDeGMsY0FBWSxHQUFFO0FBQUMsV0FBSyxBQUFNLEtBQU4sTUFBUSxJQUFFLEVBQUUsYUFBWTtBQUFDLFVBQUksSUFBRSxFQUFFO0FBQVMsVUFBRyxBQUFJLE1BQUosS0FBTyxBQUFJLE1BQUo7QUFBTTtBQUFBO0FBQU0sV0FBTztBQUFBO0FBQUUsY0FBWSxHQUFFO0FBQUMsUUFBRSxFQUFFO0FBQWdCLGFBQVEsSUFBRSxHQUFFLEtBQUc7QUFBQyxVQUFHLEFBQUksRUFBRSxhQUFOLEdBQWU7QUFBQyxZQUFJLElBQUUsRUFBRTtBQUFLLFlBQUcsQUFBTSxNQUFOLE9BQVMsQUFBTyxNQUFQLFFBQVUsQUFBTyxNQUFQLE1BQVM7QUFBQyxjQUFHLEFBQUksTUFBSjtBQUFNLG1CQUFPO0FBQUU7QUFBQTtBQUFRLFVBQU8sTUFBUCxRQUFVO0FBQUE7QUFBSSxVQUFFLEVBQUU7QUFBQTtBQUFnQixXQUFPO0FBQUE7QUFBSyxNQUFJLEtBQUc7QUFBRSxjQUFZLEdBQUU7QUFBQyxXQUFNLENBQUMsVUFBUyxJQUFHLFVBQVMsR0FBRSxTQUFRO0FBQUE7QUFBRyxNQUFJLEtBQUcsS0FBSyxTQUFTLFNBQVMsSUFBSSxNQUFNLElBQUcsS0FBRyxrQkFBZ0IsSUFBRyxLQUFHLGtCQUFnQixJQUFHLEtBQUcsc0JBQW9CLElBQUcsS0FBRyxtQkFBaUI7QUFDOWQsY0FBWSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBSSxRQUFHO0FBQUUsYUFBTztBQUFFLGFBQVEsSUFBRSxFQUFFLFlBQVcsS0FBRztBQUFDLFVBQUcsSUFBRSxFQUFFLE9BQUssRUFBRSxLQUFJO0FBQWUsWUFBZCxJQUFFLEVBQUUsV0FBYSxBQUFPLEVBQUUsVUFBVCxRQUFnQixBQUFPLE1BQVAsUUFBVSxBQUFPLEVBQUUsVUFBVDtBQUFlLGVBQUksSUFBRSxHQUFHLElBQUcsQUFBTyxNQUFQLFFBQVU7QUFBQyxnQkFBRyxJQUFFLEVBQUU7QUFBSSxxQkFBTztBQUFFLGdCQUFFLEdBQUc7QUFBQTtBQUFHLGVBQU87QUFBQTtBQUFFLFVBQUUsR0FBRSxJQUFFLEVBQUU7QUFBQTtBQUFXLFdBQU87QUFBQTtBQUFLLGNBQVksR0FBRTtBQUFDLGVBQUUsRUFBRSxPQUFLLEVBQUUsS0FBVSxDQUFDLEtBQUcsQUFBSSxFQUFFLFFBQU4sS0FBVyxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUssRUFBRSxRQUFQLE1BQVksQUFBSSxFQUFFLFFBQU4sSUFBVSxPQUFLO0FBQUE7QUFBRSxjQUFZLEdBQUU7QUFBQyxRQUFHLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxFQUFFLFFBQU47QUFBVSxhQUFPLEVBQUU7QUFBVSxVQUFNLE1BQU0sRUFBRTtBQUFBO0FBQU0sY0FBWSxHQUFFO0FBQUMsV0FBTyxFQUFFLE9BQUs7QUFBQTtBQUNsYixjQUFZLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFJLFdBQVMsTUFBVCxVQUFhLEtBQUUsRUFBRSxNQUFJLElBQUksUUFBWTtBQUFBO0FBQUUsTUFBSSxLQUFHLElBQUcsS0FBRztBQUFHLGNBQVksR0FBRTtBQUFDLFdBQU0sQ0FBQyxTQUFRO0FBQUE7QUFBRyxhQUFXLEdBQUU7QUFBQyxRQUFFLE1BQUssR0FBRSxVQUFRLEdBQUcsS0FBSSxHQUFHLE1BQUksTUFBSztBQUFBO0FBQU0sYUFBVyxHQUFFLEdBQUU7QUFBQyxVQUFLLEdBQUcsTUFBSSxFQUFFLFNBQVEsRUFBRSxVQUFRO0FBQUE7QUFBRSxNQUFJLEtBQUcsSUFBRyxJQUFFLEdBQUcsS0FBSSxJQUFFLEdBQUcsS0FBSSxLQUFHO0FBQzVQLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsS0FBSztBQUFhLFFBQUcsQ0FBQztBQUFFLGFBQU87QUFBRyxRQUFJLElBQUUsRUFBRTtBQUFVLFFBQUcsS0FBRyxFQUFFLGdEQUE4QztBQUFFLGFBQU8sRUFBRTtBQUEwQyxRQUFJLElBQUUsSUFBRztBQUFFLFNBQUksS0FBSztBQUFFLFFBQUUsS0FBRyxFQUFFO0FBQUcsZ0JBQUksS0FBRSxFQUFFLFdBQVUsRUFBRSw4Q0FBNEMsR0FBRSxFQUFFLDRDQUEwQyxJQUFVO0FBQUE7QUFBRSxjQUFZLEdBQUU7QUFBQyxlQUFFLEVBQUUsbUJBQXlCLEFBQU8sS0FBUDtBQUFBO0FBQXFCLGdCQUFhO0FBQUMsTUFBRSxJQUFHLEVBQUU7QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLEVBQUUsWUFBVTtBQUFHLFlBQU0sTUFBTSxFQUFFO0FBQU0sTUFBRSxHQUFFLElBQUcsRUFBRSxHQUFFO0FBQUE7QUFDL2UsY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQWdDLFFBQXRCLElBQUUsRUFBRSxtQkFBcUIsQUFBYSxPQUFPLEVBQUUsbUJBQXRCO0FBQXNDLGFBQU87QUFBRSxRQUFFLEVBQUU7QUFBa0IsYUFBUSxLQUFLO0FBQUUsVUFBRyxDQUFFLE1BQUs7QUFBRyxjQUFNLE1BQU0sRUFBRSxLQUFJLEdBQUcsTUFBSSxXQUFVO0FBQUksV0FBTyxFQUFFLElBQUcsR0FBRTtBQUFBO0FBQUcsY0FBWSxHQUFFO0FBQUMsZUFBRyxLQUFFLEVBQUUsY0FBWSxFQUFFLDZDQUEyQyxJQUFHLEtBQUcsRUFBRSxTQUFRLEVBQUUsR0FBRSxJQUFHLEVBQUUsR0FBRSxFQUFFLFVBQWU7QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFVLFFBQUcsQ0FBQztBQUFFLFlBQU0sTUFBTSxFQUFFO0FBQU0sUUFBRyxLQUFFLEdBQUcsR0FBRSxHQUFFLEtBQUksRUFBRSw0Q0FBMEMsR0FBRSxFQUFFLElBQUcsRUFBRSxJQUFHLEVBQUUsR0FBRSxNQUFJLEVBQUUsSUFBRyxFQUFFLEdBQUU7QUFBQTtBQUM3ZSxNQUFJLEtBQUcsTUFBSyxLQUFHLE1BQUssS0FBRyxFQUFFLDBCQUF5QixLQUFHLEVBQUUsMkJBQTBCLEtBQUcsRUFBRSx5QkFBd0IsS0FBRyxFQUFFLHNCQUFxQixLQUFHLEVBQUUsdUJBQXNCLEtBQUcsRUFBRSxjQUFhLEtBQUcsRUFBRSxrQ0FBaUMsS0FBRyxFQUFFLDRCQUEyQixLQUFHLEVBQUUsK0JBQThCLEtBQUcsRUFBRSx5QkFBd0IsS0FBRyxFQUFFLHNCQUFxQixLQUFHLEVBQUUsdUJBQXNCLEtBQUcsSUFBRyxLQUFHLEFBQVMsT0FBVCxTQUFZLEtBQUcsV0FBVTtBQUFBLEtBQUcsS0FBRyxNQUFLLEtBQUcsTUFBSyxLQUFHLElBQUcsS0FBRyxNQUFLLElBQUUsTUFBSSxLQUFHLEtBQUcsV0FBVTtBQUFDLFdBQU8sT0FBSztBQUFBO0FBQ3RkLGdCQUFhO0FBQUMsWUFBTztBQUFBLFdBQVc7QUFBRyxlQUFPO0FBQUEsV0FBUTtBQUFHLGVBQU87QUFBQSxXQUFRO0FBQUcsZUFBTztBQUFBLFdBQVE7QUFBRyxlQUFPO0FBQUEsV0FBUTtBQUFHLGVBQU87QUFBQTtBQUFXLGNBQU0sTUFBTSxFQUFFO0FBQUE7QUFBQTtBQUFRLGNBQVksR0FBRTtBQUFDLFlBQU87QUFBQSxXQUFRO0FBQUcsZUFBTztBQUFBLFdBQVE7QUFBRyxlQUFPO0FBQUEsV0FBUTtBQUFHLGVBQU87QUFBQSxXQUFRO0FBQUcsZUFBTztBQUFBLFdBQVE7QUFBRyxlQUFPO0FBQUE7QUFBVyxjQUFNLE1BQU0sRUFBRTtBQUFBO0FBQUE7QUFBUSxjQUFZLEdBQUUsR0FBRTtBQUFDLGVBQUUsR0FBRyxJQUFVLEdBQUcsR0FBRTtBQUFBO0FBQUcsY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLGVBQUUsR0FBRyxJQUFVLEdBQUcsR0FBRSxHQUFFO0FBQUE7QUFBRyxnQkFBYTtBQUFDLFFBQUcsQUFBTyxPQUFQLE1BQVU7QUFBQyxVQUFJLElBQUU7QUFBRyxXQUFHLE1BQUssR0FBRztBQUFBO0FBQUc7QUFBQTtBQUMzYSxnQkFBYTtBQUFDLFFBQUcsQ0FBQyxNQUFJLEFBQU8sT0FBUCxNQUFVO0FBQUMsV0FBRztBQUFHLFVBQUksSUFBRTtBQUFFLFVBQUc7QUFBQyxZQUFJLElBQUU7QUFBRyxXQUFHLElBQUcsV0FBVTtBQUFDLGlCQUFLLElBQUUsRUFBRSxRQUFPLEtBQUk7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBRztBQUFHLGtCQUFFLEVBQUU7QUFBQSxtQkFBVSxBQUFPLE1BQVA7QUFBQTtBQUFBLFlBQWEsS0FBRztBQUFBLGVBQVcsR0FBTjtBQUFTLGNBQU0sQUFBTyxPQUFQLFFBQVksTUFBRyxHQUFHLE1BQU0sSUFBRSxLQUFJLEdBQUcsSUFBRyxLQUFJO0FBQUEsZ0JBQUc7QUFBUSxhQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUssTUFBSSxLQUFHLEdBQUc7QUFBd0IsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFHLEtBQUcsRUFBRSxjQUFhO0FBQUMsVUFBRSxFQUFFLElBQUcsSUFBRyxJQUFFLEVBQUU7QUFBYSxlQUFRLEtBQUs7QUFBRSxRQUFTLEVBQUUsT0FBWCxVQUFnQixHQUFFLEtBQUcsRUFBRTtBQUFJLGFBQU87QUFBQTtBQUFFLFdBQU87QUFBQTtBQUFFLE1BQUksS0FBRyxHQUFHLE9BQU0sS0FBRyxNQUFLLEtBQUcsTUFBSyxLQUFHO0FBQUssZ0JBQWE7QUFBQyxTQUFHLEtBQUcsS0FBRztBQUFBO0FBQzViLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFHO0FBQVEsTUFBRSxLQUFJLEVBQUUsS0FBSyxTQUFTLGdCQUFjO0FBQUE7QUFBRSxjQUFZLEdBQUUsR0FBRTtBQUFDLFdBQUssQUFBTyxNQUFQLFFBQVU7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFVLFVBQUksR0FBRSxhQUFXLE9BQUssR0FBRTtBQUFBLFlBQUcsQUFBTyxNQUFQLFFBQVcsR0FBRSxhQUFXLE9BQUs7QUFBRTtBQUFXLFVBQUUsY0FBWTtBQUFBO0FBQU8sVUFBRSxjQUFZLEdBQUUsQUFBTyxNQUFQLFFBQVcsR0FBRSxjQUFZO0FBQUcsVUFBRSxFQUFFO0FBQUE7QUFBQTtBQUFRLGNBQVksR0FBRSxHQUFFO0FBQUMsU0FBRyxHQUFFLEtBQUcsS0FBRyxNQUFLLElBQUUsRUFBRSxjQUFhLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxpQkFBVCxRQUF3QixDQUFLLEdBQUUsUUFBTSxNQUFiLEtBQWtCLE1BQUcsS0FBSSxFQUFFLGVBQWE7QUFBQTtBQUN2WSxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUcsT0FBSyxLQUFHLEFBQUssTUFBTCxNQUFRLEFBQUksTUFBSjtBQUF1RyxVQUE3RixDQUFXLE9BQU8sS0FBbEIsWUFBcUIsQUFBYSxNQUFiLGVBQWUsTUFBRyxHQUFFLElBQUUsYUFBVyxJQUFFLENBQUMsU0FBUSxHQUFFLGNBQWEsR0FBRSxNQUFLLE9BQVMsQUFBTyxPQUFQLE1BQVU7QUFBQyxZQUFHLEFBQU8sT0FBUDtBQUFVLGdCQUFNLE1BQU0sRUFBRTtBQUFNLGFBQUcsR0FBRSxHQUFHLGVBQWEsQ0FBQyxPQUFNLEdBQUUsY0FBYSxHQUFFLFlBQVc7QUFBQTtBQUFXLGFBQUcsR0FBRyxPQUFLO0FBQUUsV0FBTyxFQUFFO0FBQUE7QUFBYyxNQUFJLEtBQUc7QUFBRyxjQUFZLEdBQUU7QUFBQyxNQUFFLGNBQVksQ0FBQyxXQUFVLEVBQUUsZUFBYyxpQkFBZ0IsTUFBSyxnQkFBZSxNQUFLLFFBQU8sQ0FBQyxTQUFRLE9BQU0sU0FBUTtBQUFBO0FBQzFhLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRSxFQUFFLGFBQVksRUFBRSxnQkFBYyxLQUFJLEdBQUUsY0FBWSxDQUFDLFdBQVUsRUFBRSxXQUFVLGlCQUFnQixFQUFFLGlCQUFnQixnQkFBZSxFQUFFLGdCQUFlLFFBQU8sRUFBRSxRQUFPLFNBQVEsRUFBRTtBQUFBO0FBQVUsY0FBWSxHQUFFLEdBQUU7QUFBQyxXQUFNLENBQUMsV0FBVSxHQUFFLE1BQUssR0FBRSxLQUFJLEdBQUUsU0FBUSxNQUFLLFVBQVMsTUFBSyxNQUFLO0FBQUE7QUFBTSxjQUFZLEdBQUUsR0FBRTtBQUFpQixRQUFoQixJQUFFLEVBQUUsYUFBZSxBQUFPLE1BQVAsTUFBUztBQUFDLFVBQUUsRUFBRTtBQUFPLFVBQUksSUFBRSxFQUFFO0FBQVEsTUFBTyxNQUFQLE9BQVMsRUFBRSxPQUFLLElBQUcsR0FBRSxPQUFLLEVBQUUsTUFBSyxFQUFFLE9BQUssSUFBRyxFQUFFLFVBQVE7QUFBQTtBQUFBO0FBQ3JaLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsYUFBWSxJQUFFLEVBQUU7QUFBVSxRQUFHLEFBQU8sTUFBUCxRQUFXLEtBQUUsRUFBRSxhQUFZLE1BQUksSUFBRztBQUFDLFVBQUksSUFBRSxNQUFLLElBQUU7QUFBeUIsVUFBcEIsSUFBRSxFQUFFLGlCQUFtQixBQUFPLE1BQVAsTUFBUztBQUFDLFdBQUU7QUFBQyxjQUFJLElBQUUsQ0FBQyxXQUFVLEVBQUUsV0FBVSxNQUFLLEVBQUUsTUFBSyxLQUFJLEVBQUUsS0FBSSxTQUFRLEVBQUUsU0FBUSxVQUFTLEVBQUUsVUFBUyxNQUFLO0FBQU0sVUFBTyxNQUFQLE9BQVMsSUFBRSxJQUFFLElBQUUsSUFBRSxFQUFFLE9BQUssR0FBRSxJQUFFLEVBQUU7QUFBQSxpQkFBVyxBQUFPLE1BQVA7QUFBVSxRQUFPLE1BQVAsT0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFLEVBQUUsT0FBSztBQUFBO0FBQU8sWUFBRSxJQUFFO0FBQUUsVUFBRSxDQUFDLFdBQVUsRUFBRSxXQUFVLGlCQUFnQixHQUFFLGdCQUFlLEdBQUUsUUFBTyxFQUFFLFFBQU8sU0FBUSxFQUFFLFVBQVMsRUFBRSxjQUFZO0FBQUU7QUFBQTtBQUFPLFFBQUUsRUFBRSxnQkFBZSxBQUFPLE1BQVAsT0FBUyxFQUFFLGtCQUFnQixJQUFFLEVBQUUsT0FDbmYsR0FBRSxFQUFFLGlCQUFlO0FBQUE7QUFDbkIsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBWSxTQUFHO0FBQUcsUUFBSSxJQUFFLEVBQUUsaUJBQWdCLElBQUUsRUFBRSxnQkFBZSxJQUFFLEVBQUUsT0FBTztBQUFRLFFBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxRQUFFLE9BQU8sVUFBUTtBQUFLLFVBQUksSUFBRSxHQUFFLElBQUUsRUFBRTtBQUFLLFFBQUUsT0FBSyxNQUFLLEFBQU8sTUFBUCxPQUFTLElBQUUsSUFBRSxFQUFFLE9BQUssR0FBRSxJQUFFO0FBQUUsVUFBSSxJQUFFLEVBQUU7QUFBVSxVQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsWUFBRSxFQUFFO0FBQVksWUFBSSxJQUFFLEVBQUU7QUFBZSxjQUFJLEtBQUksQ0FBTyxNQUFQLE9BQVMsRUFBRSxrQkFBZ0IsSUFBRSxFQUFFLE9BQUssR0FBRSxFQUFFLGlCQUFlO0FBQUE7QUFBQTtBQUFJLFFBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxVQUFFLEVBQUUsV0FBVSxJQUFFLEdBQUUsSUFBRSxJQUFFLElBQUU7QUFBSyxTQUFFO0FBQUMsWUFBRSxFQUFFO0FBQUssWUFBSSxJQUFFLEVBQUU7QUFBVSxZQUFJLEtBQUUsT0FBSyxHQUFFO0FBQUMsVUFBTyxNQUFQLFFBQVcsS0FBRSxFQUFFLE9BQUs7QUFBQSxZQUFDLFdBQVU7QUFBQSxZQUFFLE1BQUs7QUFBQSxZQUFFLEtBQUksRUFBRTtBQUFBLFlBQUksU0FBUSxFQUFFO0FBQUEsWUFBUSxVQUFTLEVBQUU7QUFBQSxZQUNyZixNQUFLO0FBQUE7QUFBTyxhQUFFO0FBQUMsZ0JBQUksSUFBRSxHQUFFLElBQUU7QUFBVSxvQkFBUixJQUFFLEdBQUUsSUFBRSxHQUFTLEVBQUU7QUFBQSxtQkFBVTtBQUFjLG9CQUFaLElBQUUsRUFBRSxTQUFXLEFBQWEsT0FBTyxLQUFwQixZQUFzQjtBQUFDLHNCQUFFLEVBQUUsS0FBSyxHQUFFLEdBQUU7QUFBRztBQUFBO0FBQVEsb0JBQUU7QUFBRTtBQUFBLG1CQUFhO0FBQUUsa0JBQUUsUUFBTSxFQUFFLFFBQU0sUUFBTTtBQUFBLG1CQUFRO0FBQXNELG9CQUFwRCxJQUFFLEVBQUUsU0FBUSxJQUFFLEFBQWEsT0FBTyxLQUFwQixhQUFzQixFQUFFLEtBQUssR0FBRSxHQUFFLEtBQUcsR0FBSyxBQUFPLEtBQVA7QUFBcUI7QUFBUSxvQkFBRSxFQUFFLElBQUcsR0FBRTtBQUFHO0FBQUEsbUJBQWE7QUFBRSxxQkFBRztBQUFBO0FBQUE7QUFBSSxVQUFPLEVBQUUsYUFBVCxRQUFvQixHQUFFLFNBQU8sSUFBRyxJQUFFLEVBQUUsU0FBUSxBQUFPLE1BQVAsT0FBUyxFQUFFLFVBQVEsQ0FBQyxLQUFHLEVBQUUsS0FBSztBQUFBO0FBQVMsY0FBRSxDQUFDLFdBQVUsR0FBRSxNQUFLLEdBQUUsS0FBSSxFQUFFLEtBQUksU0FBUSxFQUFFLFNBQVEsVUFBUyxFQUFFLFVBQVMsTUFBSyxPQUFNLEFBQU8sTUFBUCxPQUFVLEtBQUUsSUFBRSxHQUFFLElBQUUsS0FBRyxJQUFFLEVBQUUsT0FBSyxHQUFFLEtBQUc7QUFBVyxZQUFULElBQUUsRUFBRSxNQUFRLEFBQ3BmLE1BRG9mLE1BQ2xmO0FBQUEsY0FBRyxJQUFFLEVBQUUsT0FBTyxTQUFRLEFBQU8sTUFBUDtBQUFTO0FBQVcsY0FBRSxFQUFFLE1BQUssRUFBRSxPQUFLLE1BQUssRUFBRSxpQkFBZSxHQUFFLEVBQUUsT0FBTyxVQUFRO0FBQUE7QUFBQSxlQUFXO0FBQUcsTUFBTyxNQUFQLFFBQVcsS0FBRSxJQUFHLEVBQUUsWUFBVSxHQUFFLEVBQUUsa0JBQWdCLEdBQUUsRUFBRSxpQkFBZSxHQUFFLE1BQUksR0FBRSxFQUFFLFFBQU0sR0FBRSxFQUFFLGdCQUFjO0FBQUE7QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBNEIsUUFBM0IsSUFBRSxFQUFFLFNBQVEsRUFBRSxVQUFRLE1BQVEsQUFBTyxNQUFQO0FBQVMsV0FBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sS0FBSTtBQUFDLFlBQUksSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFO0FBQVMsWUFBRyxBQUFPLE1BQVAsTUFBUztBQUFxQixjQUFwQixFQUFFLFdBQVMsTUFBSyxJQUFFLEdBQUssQUFBYSxPQUFPLEtBQXBCO0FBQXNCLGtCQUFNLE1BQU0sRUFBRSxLQUFJO0FBQUksWUFBRSxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBQUssTUFBSSxLQUFJLElBQUksR0FBRyxZQUFXO0FBQzNiLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUUsRUFBRSxlQUFjLElBQUUsRUFBRSxHQUFFLElBQUcsSUFBRSxBQUFPLEtBQVAsT0FBcUIsSUFBRSxFQUFFLElBQUcsR0FBRSxJQUFHLEVBQUUsZ0JBQWMsR0FBRSxBQUFJLEVBQUUsVUFBTixLQUFjLEdBQUUsWUFBWSxZQUFVO0FBQUE7QUFDM0ksTUFBSSxLQUFHLENBQUMsV0FBVSxTQUFTLEdBQUU7QUFBQyxXQUFPLEtBQUUsRUFBRSxtQkFBaUIsR0FBRyxPQUFLLElBQUU7QUFBQSxLQUFJLGlCQUFnQixTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRSxFQUFFO0FBQWdCLFFBQUksSUFBRSxNQUFLLElBQUUsR0FBRyxJQUFHLElBQUUsR0FBRyxHQUFFO0FBQUcsTUFBRSxVQUFRLEdBQUUsQUFBbUIsS0FBUCxRQUFXLEdBQUUsV0FBUyxJQUFHLEdBQUcsR0FBRSxJQUFHLEdBQUcsR0FBRSxHQUFFO0FBQUEsS0FBSSxxQkFBb0IsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUUsRUFBRTtBQUFnQixRQUFJLElBQUUsTUFBSyxJQUFFLEdBQUcsSUFBRyxJQUFFLEdBQUcsR0FBRTtBQUFHLE1BQUUsTUFBSSxHQUFFLEVBQUUsVUFBUSxHQUFFLEFBQW1CLEtBQVAsUUFBVyxHQUFFLFdBQVMsSUFBRyxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsR0FBRTtBQUFBLEtBQUksb0JBQW1CLFNBQVMsR0FBRSxHQUFFO0FBQUMsUUFBRSxFQUFFO0FBQWdCLFFBQUksSUFBRSxNQUFLLElBQUUsR0FBRyxJQUFHLElBQUUsR0FBRyxHQUFFO0FBQUcsTUFBRSxNQUFJLEdBQUUsQUFBbUIsS0FBUCxRQUFXLEdBQUUsV0FDamYsSUFBRyxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsR0FBRTtBQUFBO0FBQUssY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsZUFBRSxFQUFFLFdBQWdCLEFBQWEsT0FBTyxFQUFFLHlCQUF0QixhQUE0QyxFQUFFLHNCQUFzQixHQUFFLEdBQUUsS0FBRyxFQUFFLGFBQVcsRUFBRSxVQUFVLHVCQUFxQixDQUFDLEdBQUcsR0FBRSxNQUFJLENBQUMsR0FBRyxHQUFFLEtBQUc7QUFBQTtBQUNsTixjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLElBQUcsSUFBRSxJQUFPLElBQUUsRUFBRTtBQUFZLFdBQVcsT0FBTyxLQUFsQixZQUFxQixBQUFPLE1BQVAsT0FBUyxJQUFFLEdBQUcsS0FBSSxLQUFFLEdBQUcsS0FBRyxLQUFHLEVBQUUsU0FBUSxJQUFFLEVBQUUsY0FBYSxJQUFHLEtBQUUsQUFBTyxLQUFQLFFBQXNCLEdBQUcsR0FBRSxLQUFHLEtBQUksSUFBRSxJQUFJLEVBQUUsR0FBRSxJQUFHLEVBQUUsZ0JBQWMsQUFBTyxFQUFFLFVBQVQsUUFBZ0IsQUFBUyxFQUFFLFVBQVgsU0FBaUIsRUFBRSxRQUFNLE1BQUssRUFBRSxVQUFRLElBQUcsRUFBRSxZQUFVLEdBQUUsRUFBRSxrQkFBZ0IsR0FBRSxLQUFJLEtBQUUsRUFBRSxXQUFVLEVBQUUsOENBQTRDLEdBQUUsRUFBRSw0Q0FBMEMsSUFBVTtBQUFBO0FBQzNaLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUUsRUFBRSxPQUFNLEFBQWEsT0FBTyxFQUFFLDZCQUF0QixjQUFpRCxFQUFFLDBCQUEwQixHQUFFLElBQUcsQUFBYSxPQUFPLEVBQUUsb0NBQXRCLGNBQXdELEVBQUUsaUNBQWlDLEdBQUUsSUFBRyxFQUFFLFVBQVEsS0FBRyxHQUFHLG9CQUFvQixHQUFFLEVBQUUsT0FBTTtBQUFBO0FBQy9QLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQVUsTUFBRSxRQUFNLEdBQUUsRUFBRSxRQUFNLEVBQUUsZUFBYyxFQUFFLE9BQUssSUFBRyxHQUFHO0FBQUcsUUFBSSxJQUFFLEVBQUU7QUFBWSxJQUFXLE9BQU8sS0FBbEIsWUFBcUIsQUFBTyxNQUFQLE9BQVMsRUFBRSxVQUFRLEdBQUcsS0FBSSxLQUFFLEdBQUcsS0FBRyxLQUFHLEVBQUUsU0FBUSxFQUFFLFVBQVEsR0FBRyxHQUFFLEtBQUksR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsUUFBTSxFQUFFLGVBQWMsSUFBRSxFQUFFLDBCQUF5QixBQUFhLE9BQU8sS0FBcEIsY0FBd0IsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsUUFBTSxFQUFFLGdCQUFlLEFBQWEsT0FBTyxFQUFFLDRCQUF0QixjQUFnRCxBQUFhLE9BQU8sRUFBRSwyQkFBdEIsY0FBK0MsQUFBYSxPQUFPLEVBQUUsNkJBQXRCLGNBQWlELEFBQWEsT0FBTyxFQUFFLHNCQUF0QixjQUNqZCxLQUFFLEVBQUUsT0FBTSxBQUFhLE9BQU8sRUFBRSxzQkFBdEIsY0FBMEMsRUFBRSxzQkFBcUIsQUFBYSxPQUFPLEVBQUUsNkJBQXRCLGNBQWlELEVBQUUsNkJBQTRCLE1BQUksRUFBRSxTQUFPLEdBQUcsb0JBQW9CLEdBQUUsRUFBRSxPQUFNLE9BQU0sR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsUUFBTSxFQUFFLGdCQUFlLEFBQWEsT0FBTyxFQUFFLHFCQUF0QixjQUEwQyxHQUFFLFNBQU87QUFBQTtBQUFHLE1BQUksS0FBRyxNQUFNO0FBQ3ZULGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBUyxRQUFSLElBQUUsRUFBRSxLQUFPLEFBQU8sTUFBUCxRQUFVLEFBQWEsT0FBTyxLQUFwQixjQUF1QixBQUFXLE9BQU8sS0FBbEIsVUFBb0I7QUFBQyxVQUFHLEVBQUUsUUFBTztBQUFZLFlBQVgsSUFBRSxFQUFFLFFBQVUsR0FBRTtBQUFDLGNBQUcsQUFBSSxFQUFFLFFBQU47QUFBVSxrQkFBTSxNQUFNLEVBQUU7QUFBTSxjQUFJLElBQUUsRUFBRTtBQUFBO0FBQVUsWUFBRyxDQUFDO0FBQUUsZ0JBQU0sTUFBTSxFQUFFLEtBQUk7QUFBSSxZQUFJLElBQUUsS0FBRztBQUFFLGVBQUcsQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLFFBQVQsUUFBYyxBQUFhLE9BQU8sRUFBRSxPQUF0QixjQUEyQixFQUFFLElBQUksZUFBYSxJQUFTLEVBQUUsTUFBSSxLQUFFLFNBQVMsSUFBRTtBQUFDLGNBQUksS0FBRSxFQUFFO0FBQUssaUJBQUksTUFBSyxNQUFFLEVBQUUsT0FBSyxLQUFJLEFBQU8sT0FBUCxPQUFTLE9BQU8sR0FBRSxLQUFHLEdBQUUsS0FBRztBQUFBLFdBQUcsRUFBRSxhQUFXLEdBQVM7QUFBQTtBQUFFLFVBQUcsQUFBVyxPQUFPLEtBQWxCO0FBQW9CLGNBQU0sTUFBTSxFQUFFO0FBQU0sVUFBRyxDQUFDLEVBQUU7QUFBTyxjQUFNLE1BQU0sRUFBRSxLQUFJO0FBQUE7QUFBSyxXQUFPO0FBQUE7QUFDaGUsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFHLEFBQWEsRUFBRSxTQUFmO0FBQW9CLFlBQU0sTUFBTSxFQUFFLElBQUcsQUFBb0IsT0FBTyxVQUFVLFNBQVMsS0FBSyxPQUFuRCxvQkFBc0QsdUJBQXFCLE9BQU8sS0FBSyxHQUFHLEtBQUssUUFBTSxNQUFJO0FBQUE7QUFDbEssY0FBWSxHQUFFO0FBQUMsZUFBVyxJQUFFLElBQUU7QUFBQyxVQUFHLEdBQUU7QUFBQyxZQUFJLEtBQUUsR0FBRTtBQUFXLFFBQU8sT0FBUCxPQUFVLElBQUUsYUFBVyxJQUFFLEdBQUUsYUFBVyxNQUFHLEdBQUUsY0FBWSxHQUFFLGFBQVcsSUFBRSxHQUFFLGFBQVcsTUFBSyxHQUFFLFFBQU07QUFBQTtBQUFBO0FBQUcsZUFBVyxJQUFFLElBQUU7QUFBQyxVQUFHLENBQUM7QUFBRSxlQUFPO0FBQUssYUFBSyxBQUFPLE9BQVA7QUFBVSxVQUFFLElBQUUsS0FBRyxLQUFFLEdBQUU7QUFBUSxhQUFPO0FBQUE7QUFBSyxlQUFXLElBQUUsSUFBRTtBQUFDLFdBQUksS0FBRSxJQUFJLE9BQUksQUFBTyxPQUFQO0FBQVUsUUFBTyxHQUFFLFFBQVQsT0FBYSxHQUFFLElBQUksR0FBRSxLQUFJLE1BQUcsR0FBRSxJQUFJLEdBQUUsT0FBTSxLQUFHLEtBQUUsR0FBRTtBQUFRLGFBQU87QUFBQTtBQUFFLGVBQVcsSUFBRSxJQUFFO0FBQUMsa0JBQUUsR0FBRyxJQUFFLEtBQUcsR0FBRSxRQUFNLEdBQUUsR0FBRSxVQUFRLE1BQVk7QUFBQTtBQUFFLGVBQVcsSUFBRSxJQUFFLElBQUU7QUFBVyxhQUFWLEdBQUUsUUFBTSxJQUFLLEFBQUMsSUFBVyxNQUFFLEdBQUUsV0FBYSxBQUFPLE9BQVAsT0FBZ0IsTUFBRSxHQUFFLE9BQU0sS0FBRSxLQUFHLElBQUUsUUFBTSxHQUNwZixNQUFHLE1BQUUsSUFBRSxRQUFNLEdBQVMsT0FEb2E7QUFBQTtBQUNsYSxlQUFXLElBQUU7QUFBQyxrQkFBRyxBQUFPLEdBQUUsY0FBVCxRQUFxQixJQUFFLFFBQU0sSUFBVTtBQUFBO0FBQUUsZUFBVyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsYUFBRyxBQUFPLE9BQVAsUUFBVSxBQUFJLEdBQUUsUUFBTixJQUFpQixNQUFFLEdBQUcsSUFBRSxHQUFFLE1BQUssS0FBRyxHQUFFLFNBQU8sSUFBRSxNQUFFLE1BQUUsRUFBRSxJQUFFLEtBQUcsR0FBRSxTQUFPLElBQVM7QUFBQTtBQUFFLGVBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGFBQUcsQUFBTyxPQUFQLFFBQVUsR0FBRSxnQkFBYyxHQUFFLE9BQVksTUFBRSxFQUFFLElBQUUsR0FBRSxRQUFPLEdBQUUsTUFBSSxHQUFHLElBQUUsSUFBRSxLQUFHLEdBQUUsU0FBTyxJQUFFLE1BQUUsTUFBRSxHQUFHLEdBQUUsTUFBSyxHQUFFLEtBQUksR0FBRSxPQUFNLE1BQUssR0FBRSxNQUFLLEtBQUcsR0FBRSxNQUFJLEdBQUcsSUFBRSxJQUFFLEtBQUcsR0FBRSxTQUFPLElBQVM7QUFBQTtBQUFFLGVBQVcsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFDLGFBQUcsQUFBTyxPQUFQLFFBQVUsQUFBSSxHQUFFLFFBQU4sS0FBVyxHQUFFLFVBQVUsa0JBQWdCLEdBQUUsaUJBQWUsR0FBRSxVQUFVLG1CQUFpQixHQUFFLGlCQUFzQixNQUNyZ0IsR0FBRyxJQUFFLEdBQUUsTUFBSyxLQUFHLEdBQUUsU0FBTyxJQUFFLE1BQUUsTUFBRSxFQUFFLElBQUUsR0FBRSxZQUFVLEtBQUksR0FBRSxTQUFPLElBQVM7QUFBQTtBQUFFLGVBQVcsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsYUFBRyxBQUFPLE9BQVAsUUFBVSxBQUFJLEdBQUUsUUFBTixJQUFpQixNQUFFLEdBQUcsSUFBRSxHQUFFLE1BQUssSUFBRSxLQUFHLEdBQUUsU0FBTyxJQUFFLE1BQUUsTUFBRSxFQUFFLElBQUUsS0FBRyxHQUFFLFNBQU8sSUFBUztBQUFBO0FBQUUsZUFBVyxJQUFFLElBQUUsSUFBRTtBQUFDLFVBQUcsQUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQVcsT0FBTyxNQUFsQjtBQUFvQixlQUFPLEtBQUUsR0FBRyxLQUFHLElBQUUsR0FBRSxNQUFLLEtBQUcsR0FBRSxTQUFPLElBQUU7QUFBRSxVQUFHLEFBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFPLE9BQVAsTUFBUztBQUFDLGdCQUFPLEdBQUU7QUFBQSxlQUFlO0FBQUcsbUJBQU8sS0FBRSxHQUFHLEdBQUUsTUFBSyxHQUFFLEtBQUksR0FBRSxPQUFNLE1BQUssR0FBRSxNQUFLLEtBQUcsR0FBRSxNQUFJLEdBQUcsSUFBRSxNQUFLLEtBQUcsR0FBRSxTQUFPLElBQUU7QUFBQSxlQUFPO0FBQUcsbUJBQU8sS0FBRSxHQUFHLElBQUUsR0FBRSxNQUFLLEtBQUcsR0FBRSxTQUFPLElBQUU7QUFBQTtBQUFFLFlBQUcsR0FBRyxPQUFJLEdBQUc7QUFBRyxpQkFBTyxLQUFFLEdBQUcsSUFDbmYsR0FBRSxNQUFLLElBQUUsT0FBTSxHQUFFLFNBQU8sSUFBRTtBQUFFLFdBQUcsSUFBRTtBQUFBO0FBQUcsYUFBTztBQUFBO0FBQUssZUFBVyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsVUFBSSxLQUFFLEFBQU8sT0FBUCxPQUFTLEdBQUUsTUFBSTtBQUFLLFVBQUcsQUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQVcsT0FBTyxNQUFsQjtBQUFvQixlQUFPLEFBQU8sT0FBUCxPQUFTLE9BQUssRUFBRSxJQUFFLElBQUUsS0FBRyxJQUFFO0FBQUcsVUFBRyxBQUFXLE9BQU8sTUFBbEIsWUFBcUIsQUFBTyxPQUFQLE1BQVM7QUFBQyxnQkFBTyxHQUFFO0FBQUEsZUFBZTtBQUFHLG1CQUFPLEdBQUUsUUFBTSxLQUFFLEdBQUUsU0FBTyxLQUFHLEVBQUUsSUFBRSxJQUFFLEdBQUUsTUFBTSxVQUFTLElBQUUsTUFBRyxFQUFFLElBQUUsSUFBRSxJQUFFLE1BQUc7QUFBQSxlQUFVO0FBQUcsbUJBQU8sR0FBRSxRQUFNLEtBQUUsRUFBRSxJQUFFLElBQUUsSUFBRSxNQUFHO0FBQUE7QUFBSyxZQUFHLEdBQUcsT0FBSSxHQUFHO0FBQUcsaUJBQU8sQUFBTyxPQUFQLE9BQVMsT0FBSyxFQUFFLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBTSxXQUFHLElBQUU7QUFBQTtBQUFHLGFBQU87QUFBQTtBQUFLLGVBQVcsSUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsVUFBRyxBQUFXLE9BQU8sTUFBbEIsWUFBcUIsQUFBVyxPQUFPLE1BQWxCO0FBQW9CLGVBQU8sS0FBRSxHQUFFLElBQUksT0FDdGYsTUFBSyxFQUFFLElBQUUsSUFBRSxLQUFHLElBQUU7QUFBRyxVQUFHLEFBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFPLE9BQVAsTUFBUztBQUFDLGdCQUFPLEdBQUU7QUFBQSxlQUFlO0FBQUcsbUJBQU8sS0FBRSxHQUFFLElBQUksQUFBTyxHQUFFLFFBQVQsT0FBYSxLQUFFLEdBQUUsUUFBTSxNQUFLLEdBQUUsU0FBTyxLQUFHLEVBQUUsSUFBRSxJQUFFLEdBQUUsTUFBTSxVQUFTLElBQUUsR0FBRSxPQUFLLEVBQUUsSUFBRSxJQUFFLElBQUU7QUFBQSxlQUFRO0FBQUcsbUJBQU8sS0FBRSxHQUFFLElBQUksQUFBTyxHQUFFLFFBQVQsT0FBYSxLQUFFLEdBQUUsUUFBTSxNQUFLLEVBQUUsSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFHLFlBQUcsR0FBRyxPQUFJLEdBQUc7QUFBRyxpQkFBTyxLQUFFLEdBQUUsSUFBSSxPQUFJLE1BQUssRUFBRSxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQU0sV0FBRyxJQUFFO0FBQUE7QUFBRyxhQUFPO0FBQUE7QUFBSyxlQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxlQUFRLEtBQUUsTUFBSyxJQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsS0FBRSxHQUFFLElBQUUsTUFBSyxBQUFPLE1BQVAsUUFBVSxJQUFFLEdBQUUsUUFBTyxLQUFJO0FBQUMsVUFBRSxRQUFNLElBQUcsS0FBRSxHQUFFLElBQUUsUUFBTSxJQUFFLEVBQUU7QUFBUSxZQUFJLEtBQUUsRUFBRSxJQUFFLEdBQUUsR0FBRSxJQUFHO0FBQUcsWUFBRyxBQUFPLE9BQVAsTUFBUztBQUFDLFVBQU8sTUFBUCxRQUFXLEtBQUU7QUFBRztBQUFBO0FBQU0sYUFBRyxLQUFHLEFBQ2pmLEdBQUUsY0FEK2UsUUFDcGUsRUFBRSxJQUFFLElBQUcsS0FBRSxFQUFFLElBQUUsSUFBRSxJQUFHLEFBQU8sTUFBUCxPQUFTLEtBQUUsS0FBRSxFQUFFLFVBQVEsSUFBRSxJQUFFLElBQUUsSUFBRTtBQUFBO0FBQUUsVUFBRyxNQUFJLEdBQUU7QUFBTyxlQUFPLEVBQUUsSUFBRSxJQUFHO0FBQUUsVUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLGVBQUssSUFBRSxHQUFFLFFBQU87QUFBSSxjQUFFLEVBQUUsSUFBRSxHQUFFLElBQUcsS0FBRyxBQUFPLE1BQVAsUUFBVyxNQUFFLEVBQUUsR0FBRSxJQUFFLElBQUcsQUFBTyxNQUFQLE9BQVMsS0FBRSxJQUFFLEVBQUUsVUFBUSxHQUFFLElBQUU7QUFBRyxlQUFPO0FBQUE7QUFBRSxXQUFJLElBQUUsRUFBRSxJQUFFLElBQUcsSUFBRSxHQUFFLFFBQU87QUFBSSxZQUFFLEVBQUUsR0FBRSxJQUFFLEdBQUUsR0FBRSxJQUFHLEtBQUcsQUFBTyxNQUFQLFFBQVcsTUFBRyxBQUFPLEVBQUUsY0FBVCxRQUFvQixFQUFFLE9BQU8sQUFBTyxFQUFFLFFBQVQsT0FBYSxJQUFFLEVBQUUsTUFBSyxLQUFFLEVBQUUsR0FBRSxJQUFFLElBQUcsQUFBTyxNQUFQLE9BQVMsS0FBRSxJQUFFLEVBQUUsVUFBUSxHQUFFLElBQUU7QUFBRyxrQkFBRyxFQUFFLFFBQVEsU0FBUyxJQUFFO0FBQUMsZUFBTyxFQUFFLElBQUU7QUFBQSxVQUFZO0FBQUE7QUFBRSxlQUFXLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQyxVQUFJLEtBQUUsR0FBRztBQUFHLFVBQUcsQUFBYSxPQUFPLE1BQXBCO0FBQXNCLGNBQU0sTUFBTSxFQUFFO0FBQWtCLFVBQVosS0FBRSxHQUFFLEtBQUssS0FBTSxBQUNsZixNQURrZjtBQUNoZixjQUFNLE1BQU0sRUFBRTtBQUFNLGVBQVEsSUFBRSxLQUFFLE1BQUssSUFBRSxJQUFFLElBQUUsS0FBRSxHQUFFLElBQUUsTUFBSyxLQUFFLEdBQUUsUUFBTyxBQUFPLE1BQVAsUUFBVSxDQUFDLEdBQUUsTUFBSyxLQUFJLEtBQUUsR0FBRSxRQUFPO0FBQUMsVUFBRSxRQUFNLElBQUcsS0FBRSxHQUFFLElBQUUsUUFBTSxJQUFFLEVBQUU7QUFBUSxZQUFJLEtBQUUsRUFBRSxJQUFFLEdBQUUsR0FBRSxPQUFNO0FBQUcsWUFBRyxBQUFPLE9BQVAsTUFBUztBQUFDLFVBQU8sTUFBUCxRQUFXLEtBQUU7QUFBRztBQUFBO0FBQU0sYUFBRyxLQUFHLEFBQU8sR0FBRSxjQUFULFFBQW9CLEVBQUUsSUFBRSxJQUFHLEtBQUUsRUFBRSxJQUFFLElBQUUsSUFBRyxBQUFPLE1BQVAsT0FBUyxLQUFFLEtBQUUsRUFBRSxVQUFRLElBQUUsSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFFLFVBQUcsR0FBRTtBQUFLLGVBQU8sRUFBRSxJQUFFLElBQUc7QUFBRSxVQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsZUFBSyxDQUFDLEdBQUUsTUFBSyxLQUFJLEtBQUUsR0FBRTtBQUFPLGVBQUUsRUFBRSxJQUFFLEdBQUUsT0FBTSxLQUFHLEFBQU8sT0FBUCxRQUFXLE1BQUUsRUFBRSxJQUFFLElBQUUsSUFBRyxBQUFPLE1BQVAsT0FBUyxLQUFFLEtBQUUsRUFBRSxVQUFRLElBQUUsSUFBRTtBQUFHLGVBQU87QUFBQTtBQUFFLFdBQUksSUFBRSxFQUFFLElBQUUsSUFBRyxDQUFDLEdBQUUsTUFBSyxLQUFJLEtBQUUsR0FBRTtBQUFPLGFBQUUsRUFBRSxHQUFFLElBQUUsR0FBRSxHQUFFLE9BQU0sS0FBRyxBQUFPLE9BQVAsUUFBVyxNQUFHLEFBQU8sR0FBRSxjQUFULFFBQ3ZlLEVBQUUsT0FBTyxBQUFPLEdBQUUsUUFBVCxPQUFhLElBQUUsR0FBRSxNQUFLLEtBQUUsRUFBRSxJQUFFLElBQUUsSUFBRyxBQUFPLE1BQVAsT0FBUyxLQUFFLEtBQUUsRUFBRSxVQUFRLElBQUUsSUFBRTtBQUFHLGtCQUFHLEVBQUUsUUFBUSxTQUFTLElBQUU7QUFBQyxlQUFPLEVBQUUsSUFBRTtBQUFBLFVBQVk7QUFBQTtBQUFFLFdBQU8sU0FBUyxJQUFFLElBQUUsSUFBRSxJQUFFO0FBQUMsVUFBSSxLQUFFLEFBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFPLE9BQVAsUUFBVSxHQUFFLFNBQU8sTUFBSSxBQUFPLEdBQUUsUUFBVDtBQUFhLFlBQUksTUFBRSxHQUFFLE1BQU07QUFBVSxVQUFJLEtBQUUsQUFBVyxPQUFPLE1BQWxCLFlBQXFCLEFBQU8sT0FBUDtBQUFTLFVBQUc7QUFBRSxnQkFBTyxHQUFFO0FBQUEsZUFBZTtBQUFHLGVBQUU7QUFBUyxtQkFBUixLQUFFLEdBQUUsS0FBUSxLQUFFLElBQUUsQUFBTyxPQUFQLFFBQVU7QUFBQyxvQkFBRyxHQUFFLFFBQU0sSUFBRTtBQUFDLDBCQUFPLEdBQUU7QUFBQSx5QkFBVTtBQUFFLDBCQUFHLEdBQUUsU0FBTyxJQUFHO0FBQUMsMEJBQUUsSUFBRSxHQUFFLFVBQVMsS0FBRSxFQUFFLElBQUUsR0FBRSxNQUFNLFdBQVUsR0FBRSxTQUFPLElBQUUsS0FBRTtBQUFFO0FBQUE7QUFBUTtBQUFBO0FBQWMsMEJBQUcsR0FBRSxnQkFBYyxHQUFFLE1BQUs7QUFBQywwQkFBRSxJQUFFLEdBQUUsVUFDNWUsS0FBRSxFQUFFLElBQUUsR0FBRSxRQUFPLEdBQUUsTUFBSSxHQUFHLElBQUUsSUFBRSxLQUFHLEdBQUUsU0FBTyxJQUFFLEtBQUU7QUFBRTtBQUFBO0FBQUE7QUFBUyxvQkFBRSxJQUFFO0FBQUc7QUFBQTtBQUFXLG9CQUFFLElBQUU7QUFBRyxxQkFBRSxHQUFFO0FBQUE7QUFBUSxpQkFBRSxTQUFPLEtBQUksTUFBRSxHQUFHLEdBQUUsTUFBTSxVQUFTLEdBQUUsTUFBSyxJQUFFLEdBQUUsTUFBSyxHQUFFLFNBQU8sSUFBRSxLQUFFLE1BQUksTUFBRSxHQUFHLEdBQUUsTUFBSyxHQUFFLEtBQUksR0FBRSxPQUFNLE1BQUssR0FBRSxNQUFLLEtBQUcsR0FBRSxNQUFJLEdBQUcsSUFBRSxJQUFFLEtBQUcsR0FBRSxTQUFPLElBQUUsS0FBRTtBQUFBO0FBQUcsbUJBQU8sRUFBRTtBQUFBLGVBQVE7QUFBRyxlQUFFO0FBQUMsbUJBQUksS0FBRSxHQUFFLEtBQUksQUFBTyxPQUFQLFFBQVU7QUFBQyxvQkFBRyxHQUFFLFFBQU07QUFBRSxzQkFBRyxBQUFJLEdBQUUsUUFBTixLQUFXLEdBQUUsVUFBVSxrQkFBZ0IsR0FBRSxpQkFBZSxHQUFFLFVBQVUsbUJBQWlCLEdBQUUsZ0JBQWU7QUFBQyxzQkFBRSxJQUFFLEdBQUUsVUFBUyxLQUFFLEVBQUUsSUFBRSxHQUFFLFlBQVUsS0FBSSxHQUFFLFNBQU8sSUFBRSxLQUFFO0FBQUU7QUFBQSx5QkFBWTtBQUFDLHNCQUFFLElBQUU7QUFBRztBQUFBO0FBQUE7QUFBVyxvQkFBRSxJQUFFO0FBQUcscUJBQUUsR0FBRTtBQUFBO0FBQVEsbUJBQ3BmLEdBQUcsSUFBRSxHQUFFLE1BQUssS0FBRyxHQUFFLFNBQU8sSUFBRSxLQUFFO0FBQUE7QUFBRSxtQkFBTyxFQUFFO0FBQUE7QUFBRyxVQUFHLEFBQVcsT0FBTyxNQUFsQixZQUFxQixBQUFXLE9BQU8sTUFBbEI7QUFBb0IsZUFBTyxLQUFFLEtBQUcsSUFBRSxBQUFPLE9BQVAsUUFBVSxBQUFJLEdBQUUsUUFBTixJQUFXLEdBQUUsSUFBRSxHQUFFLFVBQVMsS0FBRSxFQUFFLElBQUUsS0FBRyxHQUFFLFNBQU8sSUFBRSxLQUFFLE1BQUksR0FBRSxJQUFFLEtBQUcsS0FBRSxHQUFHLElBQUUsR0FBRSxNQUFLLEtBQUcsR0FBRSxTQUFPLElBQUUsS0FBRSxLQUFHLEVBQUU7QUFBRyxVQUFHLEdBQUc7QUFBRyxlQUFPLEVBQUUsSUFBRSxJQUFFLElBQUU7QUFBRyxVQUFHLEdBQUc7QUFBRyxlQUFPLEVBQUUsSUFBRSxJQUFFLElBQUU7QUFBYyxVQUFYLE1BQUcsR0FBRyxJQUFFLEtBQU0sQUFBYyxPQUFPLE1BQXJCLGVBQXdCLENBQUM7QUFBRSxnQkFBTyxHQUFFO0FBQUEsZUFBVTtBQUFBLGVBQU87QUFBQSxlQUFRO0FBQUEsZUFBTztBQUFBLGVBQVE7QUFBRyxrQkFBTSxNQUFNLEVBQUUsS0FBSSxHQUFHLEdBQUUsU0FBTztBQUFBO0FBQWUsYUFBTyxFQUFFLElBQUU7QUFBQTtBQUFBO0FBQUksTUFBSSxLQUFHLEdBQUcsS0FBSSxLQUFHLEdBQUcsS0FBSSxLQUFHLElBQUcsS0FBRyxHQUFHLEtBQUksS0FBRyxHQUFHLEtBQUksS0FBRyxHQUFHO0FBQ3RkLGNBQVksR0FBRTtBQUFDLFFBQUcsTUFBSTtBQUFHLFlBQU0sTUFBTSxFQUFFO0FBQU0sV0FBTztBQUFBO0FBQUUsY0FBWSxHQUFFLEdBQUU7QUFBdUMsWUFBdEMsRUFBRSxJQUFHLElBQUcsRUFBRSxJQUFHLElBQUcsRUFBRSxJQUFHLEtBQUksSUFBRSxFQUFFLFVBQWdCO0FBQUEsV0FBUTtBQUFBLFdBQU87QUFBRyxZQUFHLEtBQUUsRUFBRSxtQkFBaUIsRUFBRSxlQUFhLEdBQUcsTUFBSztBQUFJO0FBQUE7QUFBYyxZQUFFLEFBQUksTUFBSixJQUFNLEVBQUUsYUFBVyxHQUFFLElBQUUsRUFBRSxnQkFBYyxNQUFLLElBQUUsRUFBRSxTQUFRLElBQUUsR0FBRyxHQUFFO0FBQUE7QUFBRyxNQUFFLEtBQUksRUFBRSxJQUFHO0FBQUE7QUFBRyxnQkFBYTtBQUFDLE1BQUUsS0FBSSxFQUFFLEtBQUksRUFBRTtBQUFBO0FBQUksY0FBWSxHQUFFO0FBQUMsT0FBRyxHQUFHO0FBQVMsUUFBSSxJQUFFLEdBQUcsR0FBRyxVQUFhLElBQUUsR0FBRyxHQUFFLEVBQUU7QUFBTSxVQUFJLEtBQUksR0FBRSxJQUFHLElBQUcsRUFBRSxJQUFHO0FBQUE7QUFBSSxjQUFZLEdBQUU7QUFBQyxPQUFHLFlBQVUsS0FBSSxHQUFFLEtBQUksRUFBRTtBQUFBO0FBQUssTUFBSSxJQUFFLEdBQUc7QUFDOWMsY0FBWSxHQUFFO0FBQUMsYUFBUSxJQUFFLEdBQUUsQUFBTyxNQUFQLFFBQVU7QUFBQyxVQUFHLEFBQUssRUFBRSxRQUFQLElBQVc7QUFBQyxZQUFJLElBQUUsRUFBRTtBQUFjLFlBQUcsQUFBTyxNQUFQLFFBQVcsS0FBRSxFQUFFLFlBQVcsQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLFNBQVQsUUFBZSxBQUFPLEVBQUUsU0FBVDtBQUFlLGlCQUFPO0FBQUEsaUJBQVUsQUFBSyxFQUFFLFFBQVAsTUFBWSxBQUFTLEVBQUUsY0FBYyxnQkFBekI7QUFBc0MsWUFBRyxBQUFLLEdBQUUsUUFBTSxPQUFiO0FBQWlCLGlCQUFPO0FBQUEsaUJBQVUsQUFBTyxFQUFFLFVBQVQsTUFBZTtBQUFDLFVBQUUsTUFBTSxTQUFPLEdBQUUsSUFBRSxFQUFFO0FBQU07QUFBQTtBQUFTLFVBQUcsTUFBSTtBQUFFO0FBQU0sYUFBSyxBQUFPLEVBQUUsWUFBVCxRQUFrQjtBQUFDLFlBQUcsQUFBTyxFQUFFLFdBQVQsUUFBaUIsRUFBRSxXQUFTO0FBQUUsaUJBQU87QUFBSyxZQUFFLEVBQUU7QUFBQTtBQUFPLFFBQUUsUUFBUSxTQUFPLEVBQUUsUUFBTyxJQUFFLEVBQUU7QUFBQTtBQUFRLFdBQU87QUFBQTtBQUFLLE1BQUksS0FBRyxNQUFLLEtBQUcsTUFBSyxLQUFHO0FBQ3BkLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsR0FBRSxNQUFLLE1BQUs7QUFBRyxNQUFFLGNBQVksV0FBVSxFQUFFLE9BQUssV0FBVSxFQUFFLFlBQVUsR0FBRSxFQUFFLFNBQU8sR0FBRSxFQUFFLFFBQU0sR0FBRSxBQUFPLEVBQUUsZUFBVCxPQUFxQixHQUFFLFdBQVcsYUFBVyxHQUFFLEVBQUUsYUFBVyxLQUFHLEVBQUUsY0FBWSxFQUFFLGFBQVc7QUFBQTtBQUFFLGNBQVksR0FBRSxHQUFFO0FBQUMsWUFBTyxFQUFFO0FBQUEsV0FBVTtBQUFFLFlBQUksSUFBRSxFQUFFO0FBQUssbUJBQUUsQUFBSSxFQUFFLGFBQU4sS0FBZ0IsRUFBRSxrQkFBZ0IsRUFBRSxTQUFTLGdCQUFjLE9BQUssR0FBUyxBQUFPLE1BQVAsT0FBVSxHQUFFLFlBQVUsR0FBRSxNQUFJO0FBQUEsV0FBUTtBQUFFLGVBQU8sSUFBRSxBQUFLLEVBQUUsaUJBQVAsTUFBcUIsQUFBSSxFQUFFLGFBQU4sSUFBZSxPQUFLLEdBQUUsQUFBTyxNQUFQLE9BQVUsR0FBRSxZQUFVLEdBQUUsTUFBSTtBQUFBLFdBQVE7QUFBRyxlQUFNO0FBQUE7QUFBVyxlQUFNO0FBQUE7QUFBQTtBQUN2ZSxjQUFZLEdBQUU7QUFBQyxRQUFHLElBQUc7QUFBQyxVQUFJLElBQUU7QUFBRyxVQUFHLEdBQUU7QUFBQyxZQUFJLElBQUU7QUFBRSxZQUFHLENBQUMsR0FBRyxHQUFFLElBQUc7QUFBcUIsY0FBcEIsSUFBRSxHQUFHLEVBQUUsY0FBZ0IsQ0FBQyxLQUFHLENBQUMsR0FBRyxHQUFFLElBQUc7QUFBQyxjQUFFLFFBQU0sRUFBRSxRQUFNLFFBQU0sR0FBRSxLQUFHLElBQUcsS0FBRztBQUFFO0FBQUE7QUFBTyxhQUFHLElBQUc7QUFBQTtBQUFHLGFBQUcsR0FBRSxLQUFHLEdBQUcsRUFBRTtBQUFBO0FBQWlCLFVBQUUsUUFBTSxFQUFFLFFBQU0sUUFBTSxHQUFFLEtBQUcsSUFBRyxLQUFHO0FBQUE7QUFBQTtBQUFHLGNBQVksR0FBRTtBQUFDLFNBQUksSUFBRSxFQUFFLFFBQU8sQUFBTyxNQUFQLFFBQVUsQUFBSSxFQUFFLFFBQU4sS0FBVyxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUssRUFBRSxRQUFQO0FBQVksVUFBRSxFQUFFO0FBQU8sU0FBRztBQUFBO0FBQzVTLGNBQVksR0FBRTtBQUFDLFFBQUcsTUFBSTtBQUFHLGFBQU07QUFBRyxRQUFHLENBQUM7QUFBRyxhQUFPLEdBQUcsSUFBRyxLQUFHLElBQUc7QUFBRyxRQUFJLElBQUUsRUFBRTtBQUFLLFFBQUcsQUFBSSxFQUFFLFFBQU4sS0FBVyxBQUFTLE1BQVQsVUFBWSxBQUFTLE1BQVQsVUFBWSxDQUFDLEdBQUcsR0FBRSxFQUFFO0FBQWUsV0FBSSxJQUFFLElBQUc7QUFBRyxXQUFHLEdBQUUsSUFBRyxJQUFFLEdBQUcsRUFBRTtBQUFtQixRQUFOLEdBQUcsSUFBTSxBQUFLLEVBQUUsUUFBUCxJQUFXO0FBQWdELFVBQS9DLElBQUUsRUFBRSxlQUFjLElBQUUsQUFBTyxNQUFQLE9BQVMsRUFBRSxhQUFXLE1BQVEsQ0FBQztBQUFFLGNBQU0sTUFBTSxFQUFFO0FBQU0sU0FBRTtBQUFpQixhQUFoQixJQUFFLEVBQUUsYUFBZ0IsSUFBRSxHQUFFLEtBQUc7QUFBQyxjQUFHLEFBQUksRUFBRSxhQUFOLEdBQWU7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBSyxnQkFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLGtCQUFHLEFBQUksTUFBSixHQUFNO0FBQUMscUJBQUcsR0FBRyxFQUFFO0FBQWE7QUFBQTtBQUFRO0FBQUE7QUFBUSxjQUFNLE1BQU4sT0FBUyxBQUFPLE1BQVAsUUFBVSxBQUFPLE1BQVAsUUFBVTtBQUFBO0FBQUksY0FBRSxFQUFFO0FBQUE7QUFBWSxhQUFHO0FBQUE7QUFBQTtBQUFXLFdBQUcsS0FBRyxHQUFHLEVBQUUsVUFBVSxlQUFhO0FBQUssV0FBTTtBQUFBO0FBQ3RmLGdCQUFhO0FBQUMsU0FBRyxLQUFHLE1BQUssS0FBRztBQUFBO0FBQUcsTUFBSSxLQUFHO0FBQUcsZ0JBQWE7QUFBQyxhQUFRLElBQUUsR0FBRSxJQUFFLEdBQUcsUUFBTztBQUFJLFNBQUcsR0FBRyxnQ0FBOEI7QUFBSyxPQUFHLFNBQU87QUFBQTtBQUFFLE1BQUksS0FBRyxHQUFHLHdCQUF1QixLQUFHLEdBQUcseUJBQXdCLEtBQUcsR0FBRSxJQUFFLE1BQUssSUFBRSxNQUFLLElBQUUsTUFBSyxLQUFHLElBQUcsS0FBRztBQUFHLGdCQUFhO0FBQUMsVUFBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRyxBQUFPLE1BQVA7QUFBUyxhQUFNO0FBQUcsYUFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFVBQVEsSUFBRSxFQUFFLFFBQU87QUFBSSxVQUFHLENBQUMsR0FBRyxFQUFFLElBQUcsRUFBRTtBQUFJLGVBQU07QUFBRyxXQUFNO0FBQUE7QUFDOVgsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUF1SCxRQUF0SCxLQUFHLEdBQUUsSUFBRSxHQUFFLEVBQUUsZ0JBQWMsTUFBSyxFQUFFLGNBQVksTUFBSyxFQUFFLFFBQU0sR0FBRSxHQUFHLFVBQVEsQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLGtCQUFULE9BQXVCLEtBQUcsSUFBRyxJQUFFLEVBQUUsR0FBRSxJQUFNLElBQUc7QUFBQyxVQUFFO0FBQUUsU0FBRTtBQUFPLFlBQU4sS0FBRyxJQUFNLENBQUUsTUFBRztBQUFHLGdCQUFNLE1BQU0sRUFBRTtBQUFNLGFBQUcsR0FBRSxJQUFFLElBQUUsTUFBSyxFQUFFLGNBQVksTUFBSyxHQUFHLFVBQVEsSUFBRyxJQUFFLEVBQUUsR0FBRTtBQUFBLGVBQVM7QUFBQTtBQUFrRSxRQUE5RCxHQUFHLFVBQVEsSUFBRyxJQUFFLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxTQUFULE1BQWMsS0FBRyxHQUFFLElBQUUsSUFBRSxJQUFFLE1BQUssS0FBRyxJQUFNO0FBQUUsWUFBTSxNQUFNLEVBQUU7QUFBTSxXQUFPO0FBQUE7QUFBRSxnQkFBYTtBQUFDLFFBQUksSUFBRSxDQUFDLGVBQWMsTUFBSyxXQUFVLE1BQUssV0FBVSxNQUFLLE9BQU0sTUFBSyxNQUFLO0FBQU0sV0FBTyxNQUFQLE9BQVMsRUFBRSxnQkFBYyxJQUFFLElBQUUsSUFBRSxFQUFFLE9BQUssR0FBUztBQUFBO0FBQy9lLGdCQUFhO0FBQUMsUUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFVBQUksSUFBRSxFQUFFO0FBQVUsVUFBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLGdCQUFjO0FBQUE7QUFBVSxVQUFFLEVBQUU7QUFBSyxRQUFJLElBQUUsQUFBTyxNQUFQLE9BQVMsRUFBRSxnQkFBYyxFQUFFO0FBQUssUUFBRyxBQUFPLE1BQVA7QUFBUyxVQUFFLEdBQUUsSUFBRTtBQUFBLFNBQU07QUFBQyxVQUFHLEFBQU8sTUFBUDtBQUFTLGNBQU0sTUFBTSxFQUFFO0FBQU0sVUFBRSxHQUFFLElBQUUsQ0FBQyxlQUFjLEVBQUUsZUFBYyxXQUFVLEVBQUUsV0FBVSxXQUFVLEVBQUUsV0FBVSxPQUFNLEVBQUUsT0FBTSxNQUFLLE9BQU0sQUFBTyxNQUFQLE9BQVMsRUFBRSxnQkFBYyxJQUFFLElBQUUsSUFBRSxFQUFFLE9BQUs7QUFBQTtBQUFFLFdBQU87QUFBQTtBQUFFLGNBQVksR0FBRSxHQUFFO0FBQUMsV0FBTSxBQUFhLE9BQU8sS0FBcEIsYUFBc0IsRUFBRSxLQUFHO0FBQUE7QUFDdlksY0FBWSxHQUFFO0FBQUMsUUFBSSxJQUFFLE1BQUssSUFBRSxFQUFFO0FBQU0sUUFBRyxBQUFPLE1BQVA7QUFBUyxZQUFNLE1BQU0sRUFBRTtBQUFNLE1BQUUsc0JBQW9CO0FBQUUsUUFBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFdBQVUsSUFBRSxFQUFFO0FBQVEsUUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFVBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxZQUFJLElBQUUsRUFBRTtBQUFLLFVBQUUsT0FBSyxFQUFFLE1BQUssRUFBRSxPQUFLO0FBQUE7QUFBRSxRQUFFLFlBQVUsSUFBRSxHQUFFLEVBQUUsVUFBUTtBQUFBO0FBQUssUUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFVBQUUsRUFBRSxNQUFLLElBQUUsRUFBRTtBQUFVLFVBQUksSUFBRSxJQUFFLElBQUUsTUFBSyxJQUFFO0FBQUUsU0FBRTtBQUFDLFlBQUksSUFBRSxFQUFFO0FBQUssWUFBSSxNQUFHLE9BQUs7QUFBRSxVQUFPLE1BQVAsUUFBVyxLQUFFLEVBQUUsT0FBSyxDQUFDLE1BQUssR0FBRSxRQUFPLEVBQUUsUUFBTyxjQUFhLEVBQUUsY0FBYSxZQUFXLEVBQUUsWUFBVyxNQUFLLFFBQU8sSUFBRSxFQUFFLGlCQUFlLElBQUUsRUFBRSxhQUFXLEVBQUUsR0FBRSxFQUFFO0FBQUEsYUFBWTtBQUFDLGNBQUksSUFBRTtBQUFBLFlBQUMsTUFBSztBQUFBLFlBQUUsUUFBTyxFQUFFO0FBQUEsWUFBTyxjQUFhLEVBQUU7QUFBQSxZQUM5ZixZQUFXLEVBQUU7QUFBQSxZQUFXLE1BQUs7QUFBQTtBQUFNLFVBQU8sTUFBUCxPQUFVLEtBQUUsSUFBRSxHQUFFLElBQUUsS0FBRyxJQUFFLEVBQUUsT0FBSyxHQUFFLEVBQUUsU0FBTyxHQUFFLE1BQUk7QUFBQTtBQUFFLFlBQUUsRUFBRTtBQUFBLGVBQVcsQUFBTyxNQUFQLFFBQVUsTUFBSTtBQUFHLE1BQU8sTUFBUCxPQUFTLElBQUUsSUFBRSxFQUFFLE9BQUssR0FBRSxHQUFHLEdBQUUsRUFBRSxrQkFBaUIsTUFBRyxLQUFJLEVBQUUsZ0JBQWMsR0FBRSxFQUFFLFlBQVUsR0FBRSxFQUFFLFlBQVUsR0FBRSxFQUFFLG9CQUFrQjtBQUFBO0FBQUUsV0FBTSxDQUFDLEVBQUUsZUFBYyxFQUFFO0FBQUE7QUFDdFEsY0FBWSxHQUFFO0FBQUMsUUFBSSxJQUFFLE1BQUssSUFBRSxFQUFFO0FBQU0sUUFBRyxBQUFPLE1BQVA7QUFBUyxZQUFNLE1BQU0sRUFBRTtBQUFNLE1BQUUsc0JBQW9CO0FBQUUsUUFBSSxJQUFFLEVBQUUsVUFBUyxJQUFFLEVBQUUsU0FBUSxJQUFFLEVBQUU7QUFBYyxRQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsUUFBRSxVQUFRO0FBQUssVUFBSSxJQUFFLElBQUUsRUFBRTtBQUFLO0FBQUcsWUFBRSxFQUFFLEdBQUUsRUFBRSxTQUFRLElBQUUsRUFBRTtBQUFBLGFBQVcsTUFBSTtBQUFHLFNBQUcsR0FBRSxFQUFFLGtCQUFpQixNQUFHLEtBQUksRUFBRSxnQkFBYyxHQUFFLEFBQU8sRUFBRSxjQUFULFFBQXFCLEdBQUUsWUFBVSxJQUFHLEVBQUUsb0JBQWtCO0FBQUE7QUFBRSxXQUFNLENBQUMsR0FBRTtBQUFBO0FBQ25WLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFZLFFBQUUsRUFBRSxFQUFFO0FBQVMsUUFBSSxJQUFFLEVBQUU7QUFBeUksUUFBM0csQUFBRyxBQUFPLE1BQVAsT0FBUyxJQUFFLE1BQUksSUFBVSxLQUFFLEVBQUUsa0JBQWlCLEtBQUcsTUFBRyxPQUFLLE1BQUUsR0FBRSxnQ0FBOEIsR0FBRSxHQUFHLEtBQUssTUFBTTtBQUFFLGFBQU8sRUFBRSxFQUFFO0FBQVMsYUFBRyxLQUFLLElBQVMsTUFBTSxFQUFFO0FBQUE7QUFDelAsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsUUFBRyxBQUFPLE1BQVA7QUFBUyxZQUFNLE1BQU0sRUFBRTtBQUFNLFFBQUksSUFBRSxFQUFFLGFBQVksSUFBRSxFQUFFLEVBQUUsVUFBUyxJQUFFLEdBQUcsU0FBUSxJQUFFLEVBQUUsU0FBUyxXQUFVO0FBQUMsYUFBTyxHQUFHLEdBQUUsR0FBRTtBQUFBLFFBQUssSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFO0FBQUcsUUFBRTtBQUFFLFFBQUksSUFBRSxFQUFFLGVBQWMsSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLGFBQVksSUFBRSxFQUFFO0FBQU8sUUFBRSxFQUFFO0FBQVUsUUFBSSxJQUFFO0FBQUUsYUFBRSxnQkFBYyxDQUFDLE1BQUssR0FBRSxRQUFPLEdBQUUsV0FBVSxJQUFHLEVBQUUsVUFBVSxXQUFVO0FBQUMsUUFBRSxjQUFZLEdBQUUsRUFBRSxjQUFZO0FBQUUsVUFBSSxLQUFFLEVBQUUsRUFBRTtBQUFTLFVBQUcsQ0FBQyxHQUFHLEdBQUUsS0FBRztBQUFDLGFBQUUsRUFBRSxFQUFFLFVBQVMsR0FBRyxHQUFFLE9BQUssR0FBRSxLQUFHLEtBQUUsR0FBRyxJQUFHLEVBQUUsb0JBQWtCLEtBQUUsRUFBRSxlQUFjLEtBQUUsRUFBRSxrQkFBaUIsRUFBRSxrQkFBZ0I7QUFBRSxpQkFBUSxLQUM1ZixFQUFFLGVBQWMsS0FBRSxJQUFFLElBQUUsTUFBRztBQUFDLGNBQUksS0FBRSxLQUFHLEdBQUcsS0FBRyxJQUFFLEtBQUc7QUFBRSxhQUFFLE9BQUksSUFBRSxNQUFHLENBQUM7QUFBQTtBQUFBO0FBQUEsT0FBSyxDQUFDLEdBQUUsR0FBRSxLQUFJLEVBQUUsVUFBVSxXQUFVO0FBQUMsYUFBTyxFQUFFLEVBQUUsU0FBUSxXQUFVO0FBQUMsWUFBSSxLQUFFLEVBQUUsYUFBWSxLQUFFLEVBQUU7QUFBWSxZQUFHO0FBQUMsYUFBRSxHQUFFLEVBQUU7QUFBVSxjQUFJLEtBQUUsR0FBRztBQUFHLFlBQUUsb0JBQWtCLEtBQUUsRUFBRTtBQUFBLGlCQUFtQixHQUFOO0FBQVMsYUFBRSxXQUFVO0FBQUMsa0JBQU07QUFBQTtBQUFBO0FBQUE7QUFBQSxPQUFTLENBQUMsR0FBRSxLQUFJLEdBQUcsR0FBRSxNQUFJLEdBQUcsR0FBRSxNQUFJLEdBQUcsR0FBRSxNQUFLLEtBQUUsQ0FBQyxTQUFRLE1BQUssVUFBUyxNQUFLLHFCQUFvQixJQUFHLG1CQUFrQixJQUFHLEVBQUUsV0FBUyxJQUFFLEdBQUcsS0FBSyxNQUFLLEdBQUUsSUFBRyxFQUFFLFFBQU0sR0FBRSxFQUFFLFlBQVUsTUFBSyxJQUFFLEdBQUcsR0FBRSxHQUFFLElBQUcsRUFBRSxnQkFBYyxFQUFFLFlBQVUsSUFBVTtBQUFBO0FBQ3RlLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBSyxXQUFPLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUFHLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFLLFdBQWEsT0FBTyxLQUFwQixjQUF3QixLQUFFLE1BQUssRUFBRSxnQkFBYyxFQUFFLFlBQVUsR0FBRSxJQUFFLEVBQUUsUUFBTSxDQUFDLFNBQVEsTUFBSyxVQUFTLE1BQUsscUJBQW9CLElBQUcsbUJBQWtCLElBQUcsSUFBRSxFQUFFLFdBQVMsR0FBRyxLQUFLLE1BQUssR0FBRSxJQUFTLENBQUMsRUFBRSxlQUFjO0FBQUE7QUFDaFIsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsZUFBRSxDQUFDLEtBQUksR0FBRSxRQUFPLEdBQUUsU0FBUSxHQUFFLE1BQUssR0FBRSxNQUFLLE9BQU0sSUFBRSxFQUFFLGFBQVksQUFBTyxNQUFQLE9BQVUsS0FBRSxDQUFDLFlBQVcsT0FBTSxFQUFFLGNBQVksR0FBRSxFQUFFLGFBQVcsRUFBRSxPQUFLLEtBQUksS0FBRSxFQUFFLFlBQVcsQUFBTyxNQUFQLE9BQVMsRUFBRSxhQUFXLEVBQUUsT0FBSyxJQUFHLEtBQUUsRUFBRSxNQUFLLEVBQUUsT0FBSyxHQUFFLEVBQUUsT0FBSyxHQUFFLEVBQUUsYUFBVyxLQUFXO0FBQUE7QUFBRSxjQUFZLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBSyxlQUFFLENBQUMsU0FBUSxJQUFVLEVBQUUsZ0JBQWM7QUFBQTtBQUFFLGdCQUFhO0FBQUMsV0FBTyxLQUFLO0FBQUE7QUFBYyxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBSyxNQUFFLFNBQU8sR0FBRSxFQUFFLGdCQUFjLEdBQUcsSUFBRSxHQUFFLEdBQUUsUUFBTyxBQUFTLE1BQVQsU0FBVyxPQUFLO0FBQUE7QUFDamMsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUssUUFBRSxBQUFTLE1BQVQsU0FBVyxPQUFLO0FBQUUsUUFBSSxJQUFFO0FBQU8sUUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFVBQUksSUFBRSxFQUFFO0FBQTBCLFVBQVosSUFBRSxFQUFFLFNBQVcsQUFBTyxNQUFQLFFBQVUsR0FBRyxHQUFFLEVBQUUsT0FBTTtBQUFDLFdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBRztBQUFBO0FBQUE7QUFBUSxNQUFFLFNBQU8sR0FBRSxFQUFFLGdCQUFjLEdBQUcsSUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFBO0FBQUcsY0FBWSxHQUFFLEdBQUU7QUFBQyxXQUFPLEdBQUcsS0FBSSxHQUFFLEdBQUU7QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFO0FBQUMsV0FBTyxHQUFHLEtBQUksR0FBRSxHQUFFO0FBQUE7QUFBRyxjQUFZLEdBQUUsR0FBRTtBQUFDLFdBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFBO0FBQUcsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFHLEFBQWEsT0FBTyxLQUFwQjtBQUFzQixhQUFPLElBQUUsS0FBSSxFQUFFLElBQUcsV0FBVTtBQUFDLFVBQUU7QUFBQTtBQUFPLFFBQUcsQUFBTyxLQUFQO0FBQXFCLGFBQU8sSUFBRSxLQUFJLEVBQUUsVUFBUSxHQUFFLFdBQVU7QUFBQyxVQUFFLFVBQVE7QUFBQTtBQUFBO0FBQzljLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxlQUFFLEFBQU8sS0FBUCxPQUFxQixFQUFFLE9BQU8sQ0FBQyxNQUFJLE1BQVksR0FBRyxHQUFFLEdBQUUsR0FBRyxLQUFLLE1BQUssR0FBRSxJQUFHO0FBQUE7QUFBRyxnQkFBYTtBQUFBO0FBQUUsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBSyxRQUFFLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBRSxRQUFJLElBQUUsRUFBRTtBQUFjLFdBQUcsQUFBTyxNQUFQLFFBQVUsQUFBTyxNQUFQLFFBQVUsR0FBRyxHQUFFLEVBQUUsTUFBVyxFQUFFLEtBQUcsR0FBRSxnQkFBYyxDQUFDLEdBQUUsSUFBVTtBQUFBO0FBQUUsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBSyxRQUFFLEFBQVMsTUFBVCxTQUFXLE9BQUs7QUFBRSxRQUFJLElBQUUsRUFBRTtBQUFjLFdBQUcsQUFBTyxNQUFQLFFBQVUsQUFBTyxNQUFQLFFBQVUsR0FBRyxHQUFFLEVBQUUsTUFBVyxFQUFFLEtBQUcsS0FBRSxLQUFJLEVBQUUsZ0JBQWMsQ0FBQyxHQUFFLElBQVU7QUFBQTtBQUN6WixjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFLLE9BQUcsS0FBRyxJQUFFLEtBQUcsR0FBRSxXQUFVO0FBQUMsUUFBRTtBQUFBLFFBQU0sR0FBRyxLQUFHLElBQUUsS0FBRyxHQUFFLFdBQVU7QUFBQyxVQUFJLEtBQUUsR0FBRztBQUFXLFNBQUcsYUFBVztBQUFFLFVBQUc7QUFBQyxVQUFFLEtBQUk7QUFBQSxnQkFBSTtBQUFRLFdBQUcsYUFBVztBQUFBO0FBQUE7QUFBQTtBQUM1SixjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLE1BQUssSUFBRSxHQUFHLElBQUcsSUFBRSxDQUFDLE1BQUssR0FBRSxRQUFPLEdBQUUsY0FBYSxNQUFLLFlBQVcsTUFBSyxNQUFLLE9BQU0sSUFBRSxFQUFFO0FBQTZFLFFBQXJFLEFBQU8sTUFBUCxPQUFTLEVBQUUsT0FBSyxJQUFHLEdBQUUsT0FBSyxFQUFFLE1BQUssRUFBRSxPQUFLLElBQUcsRUFBRSxVQUFRLEdBQUUsSUFBRSxFQUFFLFdBQWEsTUFBSSxLQUFHLEFBQU8sTUFBUCxRQUFVLE1BQUk7QUFBRSxXQUFHLEtBQUc7QUFBQSxTQUFPO0FBQUMsVUFBRyxBQUFJLEVBQUUsVUFBTixLQUFjLENBQU8sTUFBUCxRQUFVLEFBQUksRUFBRSxVQUFOLE1BQWUsS0FBRSxFQUFFLHFCQUFvQixBQUFPLE1BQVA7QUFBVSxZQUFHO0FBQUMsY0FBSSxJQUFFLEVBQUUsbUJBQWtCLElBQUUsRUFBRSxHQUFFO0FBQW1DLGNBQWhDLEVBQUUsZUFBYSxHQUFFLEVBQUUsYUFBVyxHQUFLLEdBQUcsR0FBRTtBQUFHO0FBQUEsaUJBQWEsR0FBTjtBQUFBLGtCQUFVO0FBQUE7QUFBUyxTQUFHLEdBQUUsR0FBRTtBQUFBO0FBQUE7QUFDOVosTUFBSSxLQUFHLENBQUMsYUFBWSxJQUFHLGFBQVksSUFBRyxZQUFXLElBQUcsV0FBVSxJQUFHLHFCQUFvQixJQUFHLGlCQUFnQixJQUFHLFNBQVEsSUFBRyxZQUFXLElBQUcsUUFBTyxJQUFHLFVBQVMsSUFBRyxlQUFjLElBQUcsa0JBQWlCLElBQUcsZUFBYyxJQUFHLGtCQUFpQixJQUFHLHFCQUFvQixJQUFHLDBCQUF5QixLQUFJLEtBQUcsQ0FBQyxhQUFZLElBQUcsYUFBWSxTQUFTLEdBQUUsR0FBRTtBQUFDLGdCQUFLLGdCQUFjLENBQUMsR0FBRSxBQUFTLE1BQVQsU0FBVyxPQUFLLElBQVU7QUFBQSxLQUFHLFlBQVcsSUFBRyxXQUFVLElBQUcscUJBQW9CLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxlQUFFLEFBQU8sS0FBUCxPQUFxQixFQUFFLE9BQU8sQ0FBQyxNQUFJLE1BQVksR0FBRyxHQUFFLEdBQUUsR0FBRyxLQUFLLE1BQ3ZmLEdBQUUsSUFBRztBQUFBLEtBQUksaUJBQWdCLFNBQVMsR0FBRSxHQUFFO0FBQUMsV0FBTyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUEsS0FBSSxTQUFRLFNBQVMsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUssZUFBRSxBQUFTLE1BQVQsU0FBVyxPQUFLLEdBQUUsSUFBRSxLQUFJLEVBQUUsZ0JBQWMsQ0FBQyxHQUFFLElBQVU7QUFBQSxLQUFHLFlBQVcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFLLGVBQUUsQUFBUyxNQUFULFNBQVcsRUFBRSxLQUFHLEdBQUUsRUFBRSxnQkFBYyxFQUFFLFlBQVUsR0FBRSxJQUFFLEVBQUUsUUFBTSxDQUFDLFNBQVEsTUFBSyxVQUFTLE1BQUsscUJBQW9CLEdBQUUsbUJBQWtCLElBQUcsSUFBRSxFQUFFLFdBQVMsR0FBRyxLQUFLLE1BQUssR0FBRSxJQUFTLENBQUMsRUFBRSxlQUFjO0FBQUEsS0FBSSxRQUFPLElBQUcsVUFBUyxJQUFHLGVBQWMsSUFBRyxrQkFBaUIsU0FBUyxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsSUFBRyxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUU7QUFBRyxjQUFHLFdBQVU7QUFBQyxVQUFJLEtBQUUsR0FBRztBQUM5ZSxTQUFHLGFBQVc7QUFBRSxVQUFHO0FBQUMsVUFBRTtBQUFBLGdCQUFHO0FBQVEsV0FBRyxhQUFXO0FBQUE7QUFBQSxPQUFJLENBQUMsS0FBVztBQUFBLEtBQUcsZUFBYyxXQUFVO0FBQUMsUUFBSSxJQUFFLEdBQUcsS0FBSSxJQUFFLEVBQUU7QUFBRyxlQUFFLEdBQUcsS0FBSyxNQUFLLEVBQUUsS0FBSSxHQUFHLElBQVMsQ0FBQyxHQUFFO0FBQUEsS0FBSSxrQkFBaUIsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFLLGFBQUUsZ0JBQWMsQ0FBQyxNQUFLLENBQUMsYUFBWSxHQUFFLGFBQVksT0FBTSxRQUFPLEdBQUUsV0FBVSxJQUFVLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQSxLQUFJLHFCQUFvQixXQUFVO0FBQUMsUUFBRyxJQUFHO0FBQUMsVUFBSSxJQUFFLElBQUcsSUFBRSxHQUFHLFdBQVU7QUFBQyxtQkFBSSxLQUFFLElBQUcsRUFBRSxPQUFNLE9BQU0sU0FBUyxPQUFZLE1BQU0sRUFBRTtBQUFBLFVBQVMsSUFBRSxHQUFHLEdBQUc7QUFBRyxhQUFLLEdBQUUsT0FBSyxNQUFaLEtBQWlCLEdBQUUsU0FBTyxLQUFJLEdBQUcsR0FBRSxXQUFVO0FBQUMsVUFBRSxPQUFNLE9BQU0sU0FBUztBQUFBLFNBQ2hmLFFBQU8sUUFBYztBQUFBO0FBQUUsZUFBRSxPQUFNLE9BQU0sU0FBUyxLQUFJLEdBQUcsSUFBVTtBQUFBLEtBQUcsMEJBQXlCLEtBQUksS0FBRyxDQUFDLGFBQVksSUFBRyxhQUFZLElBQUcsWUFBVyxJQUFHLFdBQVUsSUFBRyxxQkFBb0IsSUFBRyxpQkFBZ0IsSUFBRyxTQUFRLElBQUcsWUFBVyxJQUFHLFFBQU8sSUFBRyxVQUFTLFdBQVU7QUFBQyxXQUFPLEdBQUc7QUFBQSxLQUFLLGVBQWMsSUFBRyxrQkFBaUIsU0FBUyxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsS0FBSSxJQUFFLEVBQUUsSUFBRyxJQUFFLEVBQUU7QUFBRyxjQUFHLFdBQVU7QUFBQyxVQUFJLEtBQUUsR0FBRztBQUFXLFNBQUcsYUFBVztBQUFFLFVBQUc7QUFBQyxVQUFFO0FBQUEsZ0JBQUc7QUFBUSxXQUFHLGFBQVc7QUFBQTtBQUFBLE9BQUksQ0FBQyxLQUFXO0FBQUEsS0FBRyxlQUFjLFdBQVU7QUFBQyxRQUFJLElBQUUsR0FBRyxJQUFJO0FBQUcsV0FBTTtBQUFBLE1BQUMsS0FBSztBQUFBLE1BQzllO0FBQUE7QUFBQSxLQUFJLGtCQUFpQixJQUFHLHFCQUFvQixXQUFVO0FBQUMsV0FBTyxHQUFHLElBQUk7QUFBQSxLQUFJLDBCQUF5QixLQUFJLEtBQUcsQ0FBQyxhQUFZLElBQUcsYUFBWSxJQUFHLFlBQVcsSUFBRyxXQUFVLElBQUcscUJBQW9CLElBQUcsaUJBQWdCLElBQUcsU0FBUSxJQUFHLFlBQVcsSUFBRyxRQUFPLElBQUcsVUFBUyxXQUFVO0FBQUMsV0FBTyxHQUFHO0FBQUEsS0FBSyxlQUFjLElBQUcsa0JBQWlCLFNBQVMsR0FBRTtBQUFDLFFBQUksSUFBRSxHQUFHLEtBQUksSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFO0FBQUcsY0FBRyxXQUFVO0FBQUMsVUFBSSxLQUFFLEdBQUc7QUFBVyxTQUFHLGFBQVc7QUFBRSxVQUFHO0FBQUMsVUFBRTtBQUFBLGdCQUFHO0FBQVEsV0FBRyxhQUFXO0FBQUE7QUFBQSxPQUFJLENBQUMsS0FBVztBQUFBLEtBQUcsZUFBYyxXQUFVO0FBQUMsUUFBSSxJQUFFLEdBQUcsSUFBSTtBQUFHLFdBQU07QUFBQSxNQUFDLEtBQUs7QUFBQSxNQUNyZjtBQUFBO0FBQUEsS0FBSSxrQkFBaUIsSUFBRyxxQkFBb0IsV0FBVTtBQUFDLFdBQU8sR0FBRyxJQUFJO0FBQUEsS0FBSSwwQkFBeUIsS0FBSSxLQUFHLEdBQUcsbUJBQWtCLEtBQUc7QUFBRyxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxNQUFFLFFBQU0sQUFBTyxNQUFQLE9BQVMsR0FBRyxHQUFFLE1BQUssR0FBRSxLQUFHLEdBQUcsR0FBRSxFQUFFLE9BQU0sR0FBRTtBQUFBO0FBQUcsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFFLEVBQUU7QUFBTyxRQUFJLElBQUUsRUFBRTtBQUE4QixXQUExQixHQUFHLEdBQUUsSUFBRyxJQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQU0sQUFBTyxNQUFQLFFBQVUsQ0FBQyxLQUFVLEdBQUUsY0FBWSxFQUFFLGFBQVksRUFBRSxTQUFPLE1BQUssRUFBRSxTQUFPLENBQUMsR0FBRSxHQUFHLEdBQUUsR0FBRSxNQUFHLEdBQUUsU0FBTyxHQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsSUFBVSxFQUFFO0FBQUE7QUFDM1ksY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFLLGFBQUcsQUFBYSxPQUFPLEtBQXBCLGNBQXVCLENBQUMsR0FBRyxNQUFJLEFBQVMsRUFBRSxpQkFBWCxVQUF5QixBQUFPLEVBQUUsWUFBVCxRQUFrQixBQUFTLEVBQUUsaUJBQVgsU0FBK0IsR0FBRSxNQUFJLElBQUcsRUFBRSxPQUFLLEdBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsTUFBRyxLQUFFLEdBQUcsRUFBRSxNQUFLLE1BQUssR0FBRSxHQUFFLEVBQUUsTUFBSyxJQUFHLEVBQUUsTUFBSSxFQUFFLEtBQUksRUFBRSxTQUFPLEdBQVMsRUFBRSxRQUFNO0FBQUE7QUFBWSxXQUFWLElBQUUsRUFBRSxPQUFTLEFBQUssS0FBRSxNQUFQLEtBQVksS0FBRSxFQUFFLGVBQWMsSUFBRSxFQUFFLFNBQVEsSUFBRSxBQUFPLE1BQVAsT0FBUyxJQUFFLElBQUcsRUFBRSxHQUFFLE1BQUksRUFBRSxRQUFNLEVBQUUsT0FBWSxHQUFHLEdBQUUsR0FBRSxLQUFHLEdBQUUsU0FBTyxHQUFFLElBQUUsR0FBRyxHQUFFLElBQUcsRUFBRSxNQUFJLEVBQUUsS0FBSSxFQUFFLFNBQU8sR0FBUyxFQUFFLFFBQU07QUFBQTtBQUNsYixjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRyxBQUFPLE1BQVAsUUFBVSxHQUFHLEVBQUUsZUFBYyxNQUFJLEVBQUUsUUFBTSxFQUFFO0FBQUksVUFBRyxLQUFHLElBQUcsQUFBSyxLQUFFLE1BQVA7QUFBVSxRQUFLLEdBQUUsUUFBTSxVQUFiLEtBQXNCLE1BQUc7QUFBQTtBQUFTLGVBQU8sRUFBRSxRQUFNLEVBQUUsT0FBTSxHQUFHLEdBQUUsR0FBRTtBQUFHLFdBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUE7QUFDbkwsY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLFVBQVMsSUFBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLGdCQUFjO0FBQUssUUFBRyxBQUFXLEVBQUUsU0FBYixZQUFtQixBQUFrQyxFQUFFLFNBQXBDO0FBQXlDLFVBQUcsQUFBSyxHQUFFLE9BQUssTUFBWjtBQUFlLFVBQUUsZ0JBQWMsQ0FBQyxXQUFVLElBQUcsR0FBRyxHQUFFO0FBQUEsZUFBVyxBQUFLLEtBQUUsZUFBUDtBQUFtQixVQUFFLGdCQUFjLENBQUMsV0FBVSxJQUFHLEdBQUcsR0FBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLFlBQVU7QUFBQTtBQUFRLGVBQU8sSUFBRSxBQUFPLE1BQVAsT0FBUyxFQUFFLFlBQVUsSUFBRSxHQUFFLEVBQUUsUUFBTSxFQUFFLGFBQVcsWUFBVyxFQUFFLGdCQUFjLENBQUMsV0FBVSxJQUFHLEdBQUcsR0FBRSxJQUFHO0FBQUE7QUFBVSxNQUFPLE1BQVAsT0FBVSxLQUFFLEVBQUUsWUFBVSxHQUFFLEVBQUUsZ0JBQWMsUUFBTSxJQUFFLEdBQUUsR0FBRyxHQUFFO0FBQUcsY0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFVLEVBQUU7QUFBQTtBQUMxZSxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQUksSUFBRyxDQUFPLE1BQVAsUUFBVSxBQUFPLE1BQVAsUUFBVSxBQUFPLE1BQVAsUUFBVSxFQUFFLFFBQU0sTUFBRSxHQUFFLFNBQU87QUFBQTtBQUFJLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsS0FBRyxLQUFHLEVBQUU7QUFBNEMsV0FBcEMsSUFBRSxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsSUFBRyxJQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLElBQU0sQUFBTyxNQUFQLFFBQVUsQ0FBQyxLQUFVLEdBQUUsY0FBWSxFQUFFLGFBQVksRUFBRSxTQUFPLE1BQUssRUFBRSxTQUFPLENBQUMsR0FBRSxHQUFHLEdBQUUsR0FBRSxNQUFHLEdBQUUsU0FBTyxHQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsSUFBVSxFQUFFO0FBQUE7QUFDalMsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLEdBQUcsSUFBRztBQUFDLFVBQUksSUFBRTtBQUFHLFNBQUc7QUFBQTtBQUFRLFVBQUU7QUFBVyxRQUFSLEdBQUcsR0FBRSxJQUFNLEFBQU8sRUFBRSxjQUFUO0FBQW1CLE1BQU8sTUFBUCxRQUFXLEdBQUUsWUFBVSxNQUFLLEVBQUUsWUFBVSxNQUFLLEVBQUUsU0FBTyxJQUFHLEdBQUcsR0FBRSxHQUFFLElBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUU7QUFBQSxhQUFXLEFBQU8sTUFBUCxNQUFTO0FBQUMsVUFBSSxJQUFFLEVBQUUsV0FBVSxJQUFFLEVBQUU7QUFBYyxRQUFFLFFBQU07QUFBRSxVQUFJLElBQUUsRUFBRSxTQUFRLElBQUUsRUFBRTtBQUFZLE1BQVcsT0FBTyxLQUFsQixZQUFxQixBQUFPLE1BQVAsT0FBUyxJQUFFLEdBQUcsS0FBSSxLQUFFLEdBQUcsS0FBRyxLQUFHLEVBQUUsU0FBUSxJQUFFLEdBQUcsR0FBRTtBQUFJLFVBQUksSUFBRSxFQUFFLDBCQUF5QixJQUFFLEFBQWEsT0FBTyxLQUFwQixjQUF1QixBQUFhLE9BQU8sRUFBRSwyQkFBdEI7QUFBOEMsV0FBRyxBQUFhLE9BQU8sRUFBRSxvQ0FBdEIsY0FDOWIsQUFBYSxPQUFPLEVBQUUsNkJBQXRCLGNBQWtELE9BQUksS0FBRyxNQUFJLE1BQUksR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEtBQUc7QUFBRyxVQUFJLElBQUUsRUFBRTtBQUFjLFFBQUUsUUFBTSxHQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxJQUFFLEVBQUUsZUFBYyxNQUFJLEtBQUcsTUFBSSxLQUFHLEVBQUUsV0FBUyxLQUFJLENBQWEsT0FBTyxLQUFwQixjQUF3QixJQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRSxFQUFFLGdCQUFnQixLQUFFLE1BQUksR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxNQUFLLE1BQUcsQUFBYSxPQUFPLEVBQUUsNkJBQXRCLGNBQWlELEFBQWEsT0FBTyxFQUFFLHNCQUF0QixjQUEyQyxDQUFhLE9BQU8sRUFBRSxzQkFBdEIsY0FBMEMsRUFBRSxzQkFBcUIsQUFBYSxPQUFPLEVBQUUsNkJBQXRCLGNBQWlELEVBQUUsOEJBQTZCLEFBQ2hmLE9BQU8sRUFBRSxxQkFEdWUsY0FDbmQsR0FBRSxTQUFPLE1BQUssQ0FBYSxPQUFPLEVBQUUscUJBQXRCLGNBQTBDLEdBQUUsU0FBTyxJQUFHLEVBQUUsZ0JBQWMsR0FBRSxFQUFFLGdCQUFjLElBQUcsRUFBRSxRQUFNLEdBQUUsRUFBRSxRQUFNLEdBQUUsRUFBRSxVQUFRLEdBQUUsSUFBRSxLQUFJLENBQWEsT0FBTyxFQUFFLHFCQUF0QixjQUEwQyxHQUFFLFNBQU8sSUFBRyxJQUFFO0FBQUEsV0FBUTtBQUFDLFVBQUUsRUFBRSxXQUFVLEdBQUcsR0FBRSxJQUFHLElBQUUsRUFBRSxlQUFjLElBQUUsRUFBRSxTQUFPLEVBQUUsY0FBWSxJQUFFLEdBQUcsRUFBRSxNQUFLLElBQUcsRUFBRSxRQUFNLEdBQUUsSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLFNBQVEsSUFBRSxFQUFFLGFBQVksQUFBVyxPQUFPLEtBQWxCLFlBQXFCLEFBQU8sTUFBUCxPQUFTLElBQUUsR0FBRyxLQUFJLEtBQUUsR0FBRyxLQUFHLEtBQUcsRUFBRSxTQUFRLElBQUUsR0FBRyxHQUFFO0FBQUksVUFBSSxJQUFFLEVBQUU7QUFBeUIsTUFBQyxLQUFFLEFBQWEsT0FBTyxLQUFwQixjQUMvZCxBQUFhLE9BQU8sRUFBRSwyQkFBdEIsZUFBZ0QsQUFBYSxPQUFPLEVBQUUsb0NBQXRCLGNBQXdELEFBQWEsT0FBTyxFQUFFLDZCQUF0QixjQUFrRCxPQUFJLEtBQUcsTUFBSSxNQUFJLEdBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxLQUFHLElBQUcsSUFBRSxFQUFFLGVBQWMsRUFBRSxRQUFNLEdBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFHLFVBQUksSUFBRSxFQUFFO0FBQWMsWUFBSSxLQUFHLE1BQUksS0FBRyxFQUFFLFdBQVMsS0FBSSxDQUFhLE9BQU8sS0FBcEIsY0FBd0IsSUFBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLElBQUUsRUFBRSxnQkFBZ0IsS0FBRSxNQUFJLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsTUFBSyxNQUFHLEFBQWEsT0FBTyxFQUFFLDhCQUF0QixjQUFrRCxBQUFhLE9BQU8sRUFBRSx1QkFBdEIsY0FBNEMsQ0FBYSxPQUFPLEVBQUUsdUJBQXRCLGNBQTJDLEVBQUUsb0JBQW9CLEdBQzFnQixHQUFFLElBQUcsQUFBYSxPQUFPLEVBQUUsOEJBQXRCLGNBQWtELEVBQUUsMkJBQTJCLEdBQUUsR0FBRSxLQUFJLEFBQWEsT0FBTyxFQUFFLHNCQUF0QixjQUEyQyxHQUFFLFNBQU8sSUFBRyxBQUFhLE9BQU8sRUFBRSwyQkFBdEIsY0FBZ0QsR0FBRSxTQUFPLFFBQU8sQ0FBYSxPQUFPLEVBQUUsc0JBQXRCLGNBQTBDLE1BQUksRUFBRSxpQkFBZSxNQUFJLEVBQUUsaUJBQWdCLEdBQUUsU0FBTyxJQUFHLEFBQWEsT0FBTyxFQUFFLDJCQUF0QixjQUErQyxNQUFJLEVBQUUsaUJBQWUsTUFBSSxFQUFFLGlCQUFnQixHQUFFLFNBQU8sTUFBSyxFQUFFLGdCQUFjLEdBQUUsRUFBRSxnQkFBYyxJQUFHLEVBQUUsUUFBTSxHQUFFLEVBQUUsUUFBTSxHQUFFLEVBQUUsVUFBUSxHQUFFLElBQUUsS0FBSSxDQUFhLE9BQU8sRUFBRSxzQkFBdEIsY0FDdmUsTUFBSSxFQUFFLGlCQUFlLE1BQUksRUFBRSxpQkFBZ0IsR0FBRSxTQUFPLElBQUcsQUFBYSxPQUFPLEVBQUUsMkJBQXRCLGNBQStDLE1BQUksRUFBRSxpQkFBZSxNQUFJLEVBQUUsaUJBQWdCLEdBQUUsU0FBTyxNQUFLLElBQUU7QUFBQTtBQUFJLFdBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUN6TCxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsT0FBRyxHQUFFO0FBQUcsUUFBSSxJQUFFLEFBQUssR0FBRSxRQUFNLE9BQWI7QUFBaUIsUUFBRyxDQUFDLEtBQUcsQ0FBQztBQUFFLGFBQU8sS0FBRyxHQUFHLEdBQUUsR0FBRSxLQUFJLEdBQUcsR0FBRSxHQUFFO0FBQUcsUUFBRSxFQUFFLFdBQVUsR0FBRyxVQUFRO0FBQUUsUUFBSSxJQUFFLEtBQUcsQUFBYSxPQUFPLEVBQUUsNEJBQXRCLGFBQStDLE9BQUssRUFBRTtBQUFTLGFBQUUsU0FBTyxHQUFFLEFBQU8sTUFBUCxRQUFVLElBQUcsR0FBRSxRQUFNLEdBQUcsR0FBRSxFQUFFLE9BQU0sTUFBSyxJQUFHLEVBQUUsUUFBTSxHQUFHLEdBQUUsTUFBSyxHQUFFLE1BQUksR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsZ0JBQWMsRUFBRSxPQUFNLEtBQUcsR0FBRyxHQUFFLEdBQUUsS0FBVyxFQUFFO0FBQUE7QUFBTSxjQUFZLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFVLE1BQUUsaUJBQWUsR0FBRyxHQUFFLEVBQUUsZ0JBQWUsRUFBRSxtQkFBaUIsRUFBRSxXQUFTLEVBQUUsV0FBUyxHQUFHLEdBQUUsRUFBRSxTQUFRLEtBQUksR0FBRyxHQUFFLEVBQUU7QUFBQTtBQUM3ZCxNQUFJLEtBQUcsQ0FBQyxZQUFXLE1BQUssV0FBVTtBQUNsQyxjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsY0FBYSxJQUFFLEVBQUUsU0FBUSxJQUFFLElBQUc7QUFBME0sV0FBdk0sS0FBRSxBQUFLLEdBQUUsUUFBTSxPQUFiLE1BQW9CLEtBQUUsQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLGtCQUFULE9BQXVCLEtBQUcsQUFBSyxLQUFFLE1BQVAsSUFBVyxJQUFHLEtBQUUsSUFBRyxFQUFFLFNBQU8sT0FBSyxBQUFPLE1BQVAsUUFBVSxBQUFPLEVBQUUsa0JBQVQsUUFBd0IsQUFBUyxFQUFFLGFBQVgsVUFBcUIsQUFBSyxFQUFFLCtCQUFQLE1BQW9DLE1BQUcsSUFBRyxFQUFFLEdBQUUsSUFBRSxJQUFNLEFBQU8sTUFBUCxPQUFVLENBQVMsRUFBRSxhQUFYLFVBQXFCLEdBQUcsSUFBRyxJQUFFLEVBQUUsVUFBUyxJQUFFLEVBQUUsVUFBWSxJQUFTLEtBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsTUFBTSxnQkFBYyxDQUFDLFdBQVUsSUFBRyxFQUFFLGdCQUFjLElBQUcsS0FBSyxBQUFXLE9BQU8sRUFBRSw2QkFBcEIsV0FBcUQsS0FBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsRUFBRSxNQUFNLGdCQUFjLENBQUMsV0FBVSxJQUMvZixFQUFFLGdCQUFjLElBQUcsRUFBRSxRQUFNLFVBQVMsS0FBRSxLQUFFLEdBQUcsQ0FBQyxNQUFLLFdBQVUsVUFBUyxJQUFHLEVBQUUsTUFBSyxHQUFFLE9BQU0sRUFBRSxTQUFPLEdBQVMsRUFBRSxRQUFNLE1BQUssQUFBTyxFQUFFLGtCQUFULE9BQTJCLElBQVMsS0FBRSxHQUFHLEdBQUUsR0FBRSxFQUFFLFVBQVMsRUFBRSxVQUFTLElBQUcsSUFBRSxFQUFFLE9BQU0sSUFBRSxFQUFFLE1BQU0sZUFBYyxFQUFFLGdCQUFjLEFBQU8sTUFBUCxPQUFTLENBQUMsV0FBVSxLQUFHLENBQUMsV0FBVSxFQUFFLFlBQVUsSUFBRyxFQUFFLGFBQVcsRUFBRSxhQUFXLENBQUMsR0FBRSxFQUFFLGdCQUFjLElBQUcsS0FBRSxLQUFFLEdBQUcsR0FBRSxHQUFFLEVBQUUsVUFBUyxJQUFHLEVBQUUsZ0JBQWMsTUFBWSxLQUFLLElBQVMsS0FBRSxHQUFHLEdBQUUsR0FBRSxFQUFFLFVBQVMsRUFBRSxVQUFTLElBQUcsSUFBRSxFQUFFLE9BQU0sSUFBRSxFQUFFLE1BQU0sZUFBYyxFQUFFLGdCQUFjLEFBQU8sTUFBUCxPQUFTLENBQUMsV0FBVSxLQUN6ZixDQUFDLFdBQVUsRUFBRSxZQUFVLElBQUcsRUFBRSxhQUFXLEVBQUUsYUFBVyxDQUFDLEdBQUUsRUFBRSxnQkFBYyxJQUFHLEtBQUUsS0FBRSxHQUFHLEdBQUUsR0FBRSxFQUFFLFVBQVMsSUFBRyxFQUFFLGdCQUFjLE1BQVk7QUFBQTtBQUFFLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFO0FBQU0sZUFBRSxDQUFDLE1BQUssVUFBUyxVQUFTLElBQUcsQUFBSyxLQUFFLE1BQVAsS0FBVyxBQUFPLE1BQVAsT0FBVSxHQUFFLGFBQVcsR0FBRSxFQUFFLGVBQWEsS0FBRyxJQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsT0FBTSxJQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsT0FBTSxFQUFFLFNBQU8sR0FBRSxFQUFFLFNBQU8sR0FBRSxFQUFFLFVBQVEsR0FBRSxFQUFFLFFBQU0sR0FBUztBQUFBO0FBQ3JWLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQU0sZUFBRSxFQUFFLFNBQVEsSUFBRSxHQUFHLEdBQUUsQ0FBQyxNQUFLLFdBQVUsVUFBUyxLQUFJLEFBQUssR0FBRSxPQUFLLE1BQVosS0FBaUIsR0FBRSxRQUFNLElBQUcsRUFBRSxTQUFPLEdBQUUsRUFBRSxVQUFRLE1BQUssQUFBTyxNQUFQLFFBQVcsR0FBRSxhQUFXLE1BQUssRUFBRSxRQUFNLEdBQUUsRUFBRSxjQUFZLEVBQUUsYUFBVyxJQUFVLEVBQUUsUUFBTTtBQUFBO0FBQzdOLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUU7QUFBTSxRQUFFLEVBQUU7QUFBUSxRQUFJLElBQUUsQ0FBQyxNQUFLLFVBQVMsVUFBUztBQUFHLFdBQUssS0FBRSxNQUFQLEtBQVcsRUFBRSxVQUFRLElBQUcsS0FBRSxFQUFFLE9BQU0sRUFBRSxhQUFXLEdBQUUsRUFBRSxlQUFhLEdBQUUsSUFBRSxFQUFFLFlBQVcsQUFBTyxNQUFQLE9BQVUsR0FBRSxjQUFZLEVBQUUsYUFBWSxFQUFFLGFBQVcsR0FBRSxFQUFFLGFBQVcsUUFBTSxFQUFFLGNBQVksRUFBRSxhQUFXLFFBQU0sSUFBRSxHQUFHLEdBQUUsSUFBRyxBQUFPLE1BQVAsT0FBUyxJQUFFLEdBQUcsR0FBRSxLQUFJLEtBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxPQUFNLEVBQUUsU0FBTyxJQUFHLEVBQUUsU0FBTyxHQUFFLEVBQUUsU0FBTyxHQUFFLEVBQUUsVUFBUSxHQUFFLEVBQUUsUUFBTSxHQUFTO0FBQUE7QUFBRSxjQUFZLEdBQUUsR0FBRTtBQUFDLE1BQUUsU0FBTztBQUFFLFFBQUksSUFBRSxFQUFFO0FBQVUsSUFBTyxNQUFQLFFBQVcsR0FBRSxTQUFPLElBQUcsR0FBRyxFQUFFLFFBQU87QUFBQTtBQUN0ZCxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBYyxJQUFPLE1BQVAsT0FBUyxFQUFFLGdCQUFjLENBQUMsYUFBWSxHQUFFLFdBQVUsTUFBSyxvQkFBbUIsR0FBRSxNQUFLLEdBQUUsTUFBSyxHQUFFLFVBQVMsR0FBRSxZQUFXLEtBQUksR0FBRSxjQUFZLEdBQUUsRUFBRSxZQUFVLE1BQUssRUFBRSxxQkFBbUIsR0FBRSxFQUFFLE9BQUssR0FBRSxFQUFFLE9BQUssR0FBRSxFQUFFLFdBQVMsR0FBRSxFQUFFLGFBQVc7QUFBQTtBQUN2USxjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsY0FBYSxJQUFFLEVBQUUsYUFBWSxJQUFFLEVBQUU7QUFBc0MsUUFBakMsR0FBRyxHQUFFLEdBQUUsRUFBRSxVQUFTLElBQUcsSUFBRSxFQUFFLFNBQVcsQUFBSyxLQUFFLE1BQVA7QUFBVSxVQUFFLElBQUUsSUFBRSxHQUFFLEVBQUUsU0FBTztBQUFBLFNBQU87QUFBQyxVQUFHLEFBQU8sTUFBUCxRQUFVLEFBQUssR0FBRSxRQUFNLE9BQWI7QUFBaUI7QUFBRSxlQUFJLElBQUUsRUFBRSxPQUFNLEFBQU8sTUFBUCxRQUFVO0FBQUMsZ0JBQUcsQUFBSyxFQUFFLFFBQVA7QUFBVyxjQUFPLEVBQUUsa0JBQVQsUUFBd0IsR0FBRyxHQUFFO0FBQUEscUJBQVcsQUFBSyxFQUFFLFFBQVA7QUFBVyxpQkFBRyxHQUFFO0FBQUEscUJBQVcsQUFBTyxFQUFFLFVBQVQsTUFBZTtBQUFDLGdCQUFFLE1BQU0sU0FBTyxHQUFFLElBQUUsRUFBRTtBQUFNO0FBQUE7QUFBUyxnQkFBRyxNQUFJO0FBQUU7QUFBUSxtQkFBSyxBQUFPLEVBQUUsWUFBVCxRQUFrQjtBQUFDLGtCQUFHLEFBQU8sRUFBRSxXQUFULFFBQWlCLEVBQUUsV0FBUztBQUFFO0FBQVEsa0JBQUUsRUFBRTtBQUFBO0FBQU8sY0FBRSxRQUFRLFNBQU8sRUFBRSxRQUFPLElBQUUsRUFBRTtBQUFBO0FBQVEsV0FBRztBQUFBO0FBQVMsUUFBUCxFQUFFLEdBQUUsSUFBTSxBQUFLLEdBQUUsT0FBSyxNQUFaO0FBQWUsUUFBRSxnQkFDemU7QUFBQTtBQUFVLGNBQU87QUFBQSxhQUFRO0FBQXFCLGVBQVYsSUFBRSxFQUFFLE9BQVUsSUFBRSxNQUFLLEFBQU8sTUFBUDtBQUFVLGdCQUFFLEVBQUUsV0FBVSxBQUFPLE1BQVAsUUFBVSxBQUFPLEdBQUcsT0FBVixRQUFlLEtBQUUsSUFBRyxJQUFFLEVBQUU7QUFBUSxjQUFFLEdBQUUsQUFBTyxNQUFQLE9BQVUsS0FBRSxFQUFFLE9BQU0sRUFBRSxRQUFNLFFBQU8sS0FBRSxFQUFFLFNBQVEsRUFBRSxVQUFRLE9BQU0sR0FBRyxHQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsRUFBRTtBQUFZO0FBQUEsYUFBVztBQUE2QixlQUFqQixJQUFFLE1BQUssSUFBRSxFQUFFLE9BQVUsRUFBRSxRQUFNLE1BQUssQUFBTyxNQUFQLFFBQVU7QUFBZSxnQkFBZCxJQUFFLEVBQUUsV0FBYSxBQUFPLE1BQVAsUUFBVSxBQUFPLEdBQUcsT0FBVixNQUFhO0FBQUMsZ0JBQUUsUUFBTTtBQUFFO0FBQUE7QUFBTSxnQkFBRSxFQUFFLFNBQVEsRUFBRSxVQUFRLEdBQUUsSUFBRSxHQUFFLElBQUU7QUFBQTtBQUFFLGFBQUcsR0FBRSxJQUFHLEdBQUUsTUFBSyxHQUFFLEVBQUU7QUFBWTtBQUFBLGFBQVc7QUFBVyxhQUFHLEdBQUUsSUFBRyxNQUFLLE1BQUssUUFBTyxFQUFFO0FBQVk7QUFBQTtBQUFjLFlBQUUsZ0JBQWM7QUFBQTtBQUFLLFdBQU8sRUFBRTtBQUFBO0FBQy9mLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBdUQsUUFBdEQsQUFBTyxNQUFQLFFBQVcsR0FBRSxlQUFhLEVBQUUsZUFBYyxNQUFJLEVBQUUsT0FBUyxBQUFLLEtBQUUsRUFBRSxlQUFULEdBQXFCO0FBQUMsVUFBRyxBQUFPLE1BQVAsUUFBVSxFQUFFLFVBQVEsRUFBRTtBQUFNLGNBQU0sTUFBTSxFQUFFO0FBQU0sVUFBRyxBQUFPLEVBQUUsVUFBVCxNQUFlO0FBQTRDLGFBQTNDLElBQUUsRUFBRSxPQUFNLElBQUUsR0FBRyxHQUFFLEVBQUUsZUFBYyxFQUFFLFFBQU0sR0FBTSxFQUFFLFNBQU8sR0FBRSxBQUFPLEVBQUUsWUFBVDtBQUFrQixjQUFFLEVBQUUsU0FBUSxJQUFFLEVBQUUsVUFBUSxHQUFHLEdBQUUsRUFBRSxlQUFjLEVBQUUsU0FBTztBQUFFLFVBQUUsVUFBUTtBQUFBO0FBQUssYUFBTyxFQUFFO0FBQUE7QUFBTSxXQUFPO0FBQUE7QUFBSyxNQUFJLElBQUcsSUFBRyxJQUFHO0FBQ25XLE9BQUcsU0FBUyxHQUFFLEdBQUU7QUFBQyxhQUFRLElBQUUsRUFBRSxPQUFNLEFBQU8sTUFBUCxRQUFVO0FBQUMsVUFBRyxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUksRUFBRSxRQUFOO0FBQVUsVUFBRSxZQUFZLEVBQUU7QUFBQSxlQUFtQixBQUFJLEVBQUUsUUFBTixLQUFXLEFBQU8sRUFBRSxVQUFULE1BQWU7QUFBQyxVQUFFLE1BQU0sU0FBTyxHQUFFLElBQUUsRUFBRTtBQUFNO0FBQUE7QUFBUyxVQUFHLE1BQUk7QUFBRTtBQUFNLGFBQUssQUFBTyxFQUFFLFlBQVQsUUFBa0I7QUFBQyxZQUFHLEFBQU8sRUFBRSxXQUFULFFBQWlCLEVBQUUsV0FBUztBQUFFO0FBQU8sWUFBRSxFQUFFO0FBQUE7QUFBTyxRQUFFLFFBQVEsU0FBTyxFQUFFLFFBQU8sSUFBRSxFQUFFO0FBQUE7QUFBQTtBQUFVLE9BQUcsV0FBVTtBQUFBO0FBQ3ZULE9BQUcsU0FBUyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBYyxRQUFHLE1BQUksR0FBRTtBQUFDLFVBQUUsRUFBRSxXQUFVLEdBQUcsR0FBRztBQUFTLFVBQUksSUFBRTtBQUFLLGNBQU87QUFBQSxhQUFRO0FBQVEsY0FBRSxHQUFHLEdBQUUsSUFBRyxJQUFFLEdBQUcsR0FBRSxJQUFHLElBQUU7QUFBRztBQUFBLGFBQVc7QUFBUyxjQUFFLEdBQUcsR0FBRSxJQUFHLElBQUUsR0FBRyxHQUFFLElBQUcsSUFBRTtBQUFHO0FBQUEsYUFBVztBQUFTLGNBQUUsRUFBRSxJQUFHLEdBQUUsQ0FBQyxPQUFNLFVBQVMsSUFBRSxFQUFFLElBQUcsR0FBRSxDQUFDLE9BQU0sVUFBUyxJQUFFO0FBQUc7QUFBQSxhQUFXO0FBQVcsY0FBRSxHQUFHLEdBQUUsSUFBRyxJQUFFLEdBQUcsR0FBRSxJQUFHLElBQUU7QUFBRztBQUFBO0FBQWMsVUFBYSxPQUFPLEVBQUUsV0FBdEIsY0FBK0IsQUFBYSxPQUFPLEVBQUUsV0FBdEIsY0FBZ0MsR0FBRSxVQUFRO0FBQUE7QUFBSSxTQUFHLEdBQUU7QUFBRyxVQUFJO0FBQUUsVUFBRTtBQUFLLFdBQUksS0FBSztBQUFFLFlBQUcsQ0FBQyxFQUFFLGVBQWUsTUFBSSxFQUFFLGVBQWUsTUFBSSxBQUFNLEVBQUUsTUFBUjtBQUFXLGNBQUcsQUFDM2UsTUFEMmUsU0FDemU7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBRyxpQkFBSSxLQUFLO0FBQUUsZ0JBQUUsZUFBZSxNQUFLLE1BQUksS0FBRSxLQUFJLEVBQUUsS0FBRztBQUFBO0FBQVEsWUFBNEIsTUFBNUIsNkJBQStCLEFBQWEsTUFBYixjQUFnQixBQUFtQyxNQUFuQyxvQ0FBc0MsQUFBNkIsTUFBN0IsOEJBQWdDLEFBQWMsTUFBZCxlQUFrQixJQUFHLGVBQWUsS0FBRyxLQUFJLEtBQUUsTUFBSyxLQUFFLEtBQUcsSUFBSSxLQUFLLEdBQUU7QUFBTyxXQUFJLEtBQUssR0FBRTtBQUFDLFlBQUksSUFBRSxFQUFFO0FBQXlCLFlBQXRCLElBQUUsQUFBTSxLQUFOLE9BQVEsRUFBRSxLQUFHLFFBQVUsRUFBRSxlQUFlLE1BQUksTUFBSSxLQUFJLENBQU0sS0FBTixRQUFTLEFBQU0sS0FBTjtBQUFTLGNBQUcsQUFBVSxNQUFWO0FBQVksZ0JBQUcsR0FBRTtBQUFDLG1CQUFJLEtBQUs7QUFBRSxpQkFBQyxFQUFFLGVBQWUsTUFBSSxLQUFHLEVBQUUsZUFBZSxNQUFLLE1BQUksS0FBRSxLQUFJLEVBQUUsS0FBRztBQUFJLG1CQUFJLEtBQUs7QUFBRSxrQkFBRSxlQUFlLE1BQUksRUFBRSxPQUFLLEVBQUUsTUFBSyxNQUNsZixLQUFFLEtBQUksRUFBRSxLQUFHLEVBQUU7QUFBQTtBQUFTLG1CQUFJLE1BQUksS0FBRSxLQUFJLEVBQUUsS0FBSyxHQUFFLEtBQUksSUFBRTtBQUFBO0FBQU0sWUFBNEIsTUFBNUIsNEJBQStCLEtBQUUsSUFBRSxFQUFFLFNBQU8sUUFBTyxJQUFFLElBQUUsRUFBRSxTQUFPLFFBQU8sQUFBTSxLQUFOLFFBQVMsTUFBSSxLQUFJLEtBQUUsS0FBRyxJQUFJLEtBQUssR0FBRSxNQUFJLEFBQWEsTUFBYixhQUFlLEFBQVcsT0FBTyxLQUFsQixZQUFxQixBQUFXLE9BQU8sS0FBbEIsWUFBc0IsS0FBRSxLQUFHLElBQUksS0FBSyxHQUFFLEtBQUcsS0FBRyxBQUFtQyxNQUFuQyxvQ0FBc0MsQUFBNkIsTUFBN0IsOEJBQWlDLElBQUcsZUFBZSxLQUFJLENBQU0sS0FBTixRQUFTLEFBQWEsTUFBYixjQUFnQixFQUFFLFVBQVMsSUFBRyxLQUFHLE1BQUksS0FBSSxLQUFFLE9BQUssQUFBVyxPQUFPLEtBQWxCLFlBQXFCLEFBQU8sTUFBUCxRQUFVLEVBQUUsYUFBVyxLQUFHLEVBQUUsYUFBWSxLQUFFLEtBQUcsSUFBSSxLQUFLLEdBQUU7QUFBQTtBQUFJLFdBQUksS0FBRSxLQUFHLElBQUksS0FBSyxTQUMvZTtBQUFHLFVBQUksSUFBRTtBQUFFLE1BQUcsR0FBRSxjQUFZLE1BQUUsR0FBRSxTQUFPO0FBQUE7QUFBQTtBQUFJLE9BQUcsU0FBUyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsVUFBSSxLQUFJLEdBQUUsU0FBTztBQUFBO0FBQUksY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFHLENBQUM7QUFBRyxjQUFPLEVBQUU7QUFBQSxhQUFlO0FBQVMsY0FBRSxFQUFFO0FBQUssbUJBQVEsSUFBRSxNQUFLLEFBQU8sTUFBUDtBQUFVLFlBQU8sRUFBRSxjQUFULFFBQXFCLEtBQUUsSUFBRyxJQUFFLEVBQUU7QUFBUSxVQUFPLE1BQVAsT0FBUyxFQUFFLE9BQUssT0FBSyxFQUFFLFVBQVE7QUFBSztBQUFBLGFBQVc7QUFBWSxjQUFFLEVBQUU7QUFBSyxtQkFBUSxJQUFFLE1BQUssQUFBTyxNQUFQO0FBQVUsWUFBTyxFQUFFLGNBQVQsUUFBcUIsS0FBRSxJQUFHLElBQUUsRUFBRTtBQUFRLFVBQU8sTUFBUCxPQUFTLEtBQUcsQUFBTyxFQUFFLFNBQVQsT0FBYyxFQUFFLE9BQUssT0FBSyxFQUFFLEtBQUssVUFBUSxPQUFLLEVBQUUsVUFBUTtBQUFBO0FBQUE7QUFDN1osY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQWEsWUFBTyxFQUFFO0FBQUEsV0FBVTtBQUFBLFdBQU87QUFBQSxXQUFRO0FBQUEsV0FBUTtBQUFBLFdBQU87QUFBQSxXQUFRO0FBQUEsV0FBTztBQUFBLFdBQU87QUFBQSxXQUFRO0FBQUEsV0FBTztBQUFHLGVBQU87QUFBQSxXQUFVO0FBQUUsZUFBTyxHQUFHLEVBQUUsU0FBTyxNQUFLO0FBQUEsV0FBVTtBQUFFLHFCQUFLLEVBQUUsSUFBRyxFQUFFLElBQUcsTUFBSyxJQUFFLEVBQUUsV0FBVSxFQUFFLGtCQUFpQixHQUFFLFVBQVEsRUFBRSxnQkFBZSxFQUFFLGlCQUFlLE9BQVMsQ0FBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLFVBQVQsU0FBZSxJQUFHLEtBQUcsRUFBRSxTQUFPLElBQUUsRUFBRSxXQUFVLEdBQUUsU0FBTyxPQUFLLEdBQUcsSUFBVTtBQUFBLFdBQVU7QUFBRSxXQUFHO0FBQUcsWUFBSSxJQUFFLEdBQUcsR0FBRztBQUFrQixZQUFULElBQUUsRUFBRSxNQUFRLEFBQU8sTUFBUCxRQUFVLEFBQU0sRUFBRSxhQUFSO0FBQWtCLGFBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsUUFBTSxFQUFFLE9BQU0sR0FBRSxTQUFPO0FBQUEsYUFBUztBQUFDLGNBQUcsQ0FBQyxHQUFFO0FBQUMsZ0JBQUcsQUFDN2YsRUFBRSxjQUQyZjtBQUNqZixvQkFBTSxNQUFNLEVBQUU7QUFBTSxtQkFBTztBQUFBO0FBQXNCLGNBQWpCLElBQUUsR0FBRyxHQUFHLFVBQVksR0FBRyxJQUFHO0FBQUMsZ0JBQUUsRUFBRSxXQUFVLElBQUUsRUFBRTtBQUFLLGdCQUFJLElBQUUsRUFBRTtBQUE4QixvQkFBaEIsRUFBRSxNQUFJLEdBQUUsRUFBRSxNQUFJLEdBQVM7QUFBQSxtQkFBUTtBQUFTLGtCQUFFLFVBQVMsSUFBRyxFQUFFLFNBQVE7QUFBRztBQUFBLG1CQUFXO0FBQUEsbUJBQWM7QUFBQSxtQkFBYztBQUFRLGtCQUFFLFFBQU87QUFBRztBQUFBLG1CQUFXO0FBQUEsbUJBQWE7QUFBUSxxQkFBSSxJQUFFLEdBQUUsSUFBRSxHQUFHLFFBQU87QUFBSSxvQkFBRSxHQUFHLElBQUc7QUFBRztBQUFBLG1CQUFXO0FBQVMsa0JBQUUsU0FBUTtBQUFHO0FBQUEsbUJBQVc7QUFBQSxtQkFBVztBQUFBLG1CQUFhO0FBQU8sa0JBQUUsU0FBUSxJQUFHLEVBQUUsUUFBTztBQUFHO0FBQUEsbUJBQVc7QUFBVSxrQkFBRSxVQUFTO0FBQUc7QUFBQSxtQkFBVztBQUFRLG1CQUFHLEdBQUUsSUFBRyxFQUFFLFdBQVU7QUFBRztBQUFBLG1CQUFXO0FBQVMsa0JBQUUsZ0JBQzVmLENBQUMsYUFBWSxDQUFDLENBQUMsRUFBRSxXQUFVLEVBQUUsV0FBVTtBQUFHO0FBQUEsbUJBQVc7QUFBVyxtQkFBRyxHQUFFLElBQUcsRUFBRSxXQUFVO0FBQUE7QUFBRyxlQUFHLEdBQUUsSUFBRyxJQUFFO0FBQUsscUJBQVEsS0FBSztBQUFFLGdCQUFFLGVBQWUsTUFBSyxLQUFFLEVBQUUsSUFBRyxBQUFhLE1BQWIsYUFBZSxBQUFXLE9BQU8sS0FBbEIsV0FBb0IsRUFBRSxnQkFBYyxLQUFJLEtBQUUsQ0FBQyxZQUFXLE1BQUksQUFBVyxPQUFPLEtBQWxCLFlBQXFCLEVBQUUsZ0JBQWMsS0FBRyxLQUFJLEtBQUUsQ0FBQyxZQUFXLEtBQUcsTUFBSSxHQUFHLGVBQWUsTUFBSSxBQUFNLEtBQU4sUUFBUyxBQUFhLE1BQWIsY0FBZ0IsRUFBRSxVQUFTO0FBQUksb0JBQU87QUFBQSxtQkFBUTtBQUFRLG1CQUFHLElBQUcsR0FBRyxHQUFFLEdBQUU7QUFBSTtBQUFBLG1CQUFXO0FBQVcsbUJBQUcsSUFBRyxHQUFHO0FBQUc7QUFBQSxtQkFBVztBQUFBLG1CQUFjO0FBQVM7QUFBQTtBQUFjLGdCQUFhLE9BQU8sRUFBRSxXQUF0QixjQUFnQyxHQUFFLFVBQ3RmO0FBQUE7QUFBSSxnQkFBRSxHQUFFLEVBQUUsY0FBWSxHQUFFLEFBQU8sTUFBUCxRQUFXLEdBQUUsU0FBTztBQUFBLGlCQUFPO0FBQWlaLG9CQUFoWixJQUFFLEFBQUksRUFBRSxhQUFOLElBQWUsSUFBRSxFQUFFLGVBQWMsTUFBSSxHQUFHLFFBQU8sS0FBRSxHQUFHLEtBQUksTUFBSSxHQUFHLE9BQUssQUFBVyxNQUFYLFdBQWMsS0FBRSxFQUFFLGNBQWMsUUFBTyxFQUFFLFlBQVUscUJBQXVCLElBQUUsRUFBRSxZQUFZLEVBQUUsZUFBYSxBQUFXLE9BQU8sRUFBRSxNQUFwQixXQUF1QixJQUFFLEVBQUUsY0FBYyxHQUFFLENBQUMsSUFBRyxFQUFFLE9BQU0sS0FBRSxFQUFFLGNBQWMsSUFBRyxBQUFXLE1BQVgsWUFBZSxLQUFFLEdBQUUsRUFBRSxXQUFTLEVBQUUsV0FBUyxLQUFHLEVBQUUsUUFBTyxHQUFFLE9BQUssRUFBRSxVQUFRLElBQUUsRUFBRSxnQkFBZ0IsR0FBRSxJQUFHLEVBQUUsTUFBSSxHQUFFLEVBQUUsTUFBSSxHQUFFLEdBQUcsR0FBRSxHQUFFLElBQUcsS0FBSSxFQUFFLFlBQVUsR0FBRSxJQUFFLEdBQUcsR0FBRSxJQUFVO0FBQUEsbUJBQVE7QUFBUyxrQkFBRSxVQUFTLElBQUcsRUFBRSxTQUFRLElBQ3BmLElBQUU7QUFBRTtBQUFBLG1CQUFXO0FBQUEsbUJBQWM7QUFBQSxtQkFBYztBQUFRLGtCQUFFLFFBQU8sSUFBRyxJQUFFO0FBQUU7QUFBQSxtQkFBVztBQUFBLG1CQUFhO0FBQVEscUJBQUksSUFBRSxHQUFFLElBQUUsR0FBRyxRQUFPO0FBQUksb0JBQUUsR0FBRyxJQUFHO0FBQUcsb0JBQUU7QUFBRTtBQUFBLG1CQUFXO0FBQVMsa0JBQUUsU0FBUSxJQUFHLElBQUU7QUFBRTtBQUFBLG1CQUFXO0FBQUEsbUJBQVc7QUFBQSxtQkFBYTtBQUFPLGtCQUFFLFNBQVEsSUFBRyxFQUFFLFFBQU8sSUFBRyxJQUFFO0FBQUU7QUFBQSxtQkFBVztBQUFVLGtCQUFFLFVBQVMsSUFBRyxJQUFFO0FBQUU7QUFBQSxtQkFBVztBQUFRLG1CQUFHLEdBQUUsSUFBRyxJQUFFLEdBQUcsR0FBRSxJQUFHLEVBQUUsV0FBVTtBQUFHO0FBQUEsbUJBQVc7QUFBUyxvQkFBRSxHQUFHLEdBQUU7QUFBRztBQUFBLG1CQUFXO0FBQVMsa0JBQUUsZ0JBQWMsQ0FBQyxhQUFZLENBQUMsQ0FBQyxFQUFFLFdBQVUsSUFBRSxFQUFFLElBQUcsR0FBRSxDQUFDLE9BQU0sVUFBUyxFQUFFLFdBQVU7QUFBRztBQUFBLG1CQUFXO0FBQVcsbUJBQUcsR0FBRSxJQUFHLElBQ3BmLEdBQUcsR0FBRSxJQUFHLEVBQUUsV0FBVTtBQUFHO0FBQUE7QUFBYyxvQkFBRTtBQUFBO0FBQUUsZUFBRyxHQUFFO0FBQUcsZ0JBQUksSUFBRTtBQUFFLGlCQUFJLEtBQUs7QUFBRSxrQkFBRyxFQUFFLGVBQWUsSUFBRztBQUFDLG9CQUFJLElBQUUsRUFBRTtBQUFHLGdCQUFVLE1BQVYsVUFBWSxHQUFHLEdBQUUsS0FBRyxBQUE0QixNQUE1Qiw0QkFBK0IsS0FBRSxJQUFFLEVBQUUsU0FBTyxRQUFPLEFBQU0sS0FBTixRQUFTLEdBQUcsR0FBRSxNQUFJLEFBQWEsTUFBYixhQUFlLEFBQVcsT0FBTyxLQUFsQixXQUFxQixDQUFhLE1BQWIsY0FBZ0IsQUFBSyxNQUFMLE9BQVMsR0FBRyxHQUFFLEtBQUcsQUFBVyxPQUFPLEtBQWxCLFlBQXFCLEdBQUcsR0FBRSxLQUFHLEtBQUcsQUFBbUMsTUFBbkMsb0NBQXNDLEFBQTZCLE1BQTdCLDhCQUFnQyxBQUFjLE1BQWQsZUFBa0IsSUFBRyxlQUFlLEtBQUcsQUFBTSxLQUFOLFFBQVMsQUFBYSxNQUFiLGNBQWdCLEVBQUUsVUFBUyxLQUFHLEFBQU0sS0FBTixRQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUFJLG9CQUFPO0FBQUEsbUJBQVE7QUFBUSxtQkFBRyxJQUFHLEdBQUcsR0FBRSxHQUFFO0FBQ25mO0FBQUEsbUJBQVc7QUFBVyxtQkFBRyxJQUFHLEdBQUc7QUFBRztBQUFBLG1CQUFXO0FBQVMsZ0JBQU0sRUFBRSxTQUFSLFFBQWUsRUFBRSxhQUFhLFNBQVEsS0FBRyxHQUFHLEVBQUU7QUFBUTtBQUFBLG1CQUFXO0FBQVMsa0JBQUUsV0FBUyxDQUFDLENBQUMsRUFBRSxVQUFTLElBQUUsRUFBRSxPQUFNLEFBQU0sS0FBTixPQUFRLEdBQUcsR0FBRSxDQUFDLENBQUMsRUFBRSxVQUFTLEdBQUUsTUFBSSxBQUFNLEVBQUUsZ0JBQVIsUUFBc0IsR0FBRyxHQUFFLENBQUMsQ0FBQyxFQUFFLFVBQVMsRUFBRSxjQUFhO0FBQUk7QUFBQTtBQUFjLGdCQUFhLE9BQU8sRUFBRSxXQUF0QixjQUFnQyxHQUFFLFVBQVE7QUFBQTtBQUFJLGVBQUcsR0FBRSxNQUFLLEdBQUUsU0FBTztBQUFBO0FBQUcsVUFBTyxFQUFFLFFBQVQsUUFBZSxHQUFFLFNBQU87QUFBQTtBQUFLLGVBQU87QUFBQSxXQUFVO0FBQUUsWUFBRyxLQUFHLEFBQU0sRUFBRSxhQUFSO0FBQWtCLGFBQUcsR0FBRSxHQUFFLEVBQUUsZUFBYztBQUFBLGFBQU87QUFBQyxjQUFHLEFBQVcsT0FBTyxLQUFsQixZQUFxQixBQUFPLEVBQUUsY0FBVDtBQUFtQixrQkFBTSxNQUFNLEVBQUU7QUFDL2UsY0FBRSxHQUFHLEdBQUcsVUFBUyxHQUFHLEdBQUcsVUFBUyxHQUFHLEtBQUksS0FBRSxFQUFFLFdBQVUsSUFBRSxFQUFFLGVBQWMsRUFBRSxNQUFJLEdBQUUsRUFBRSxjQUFZLEtBQUksR0FBRSxTQUFPLE1BQUssS0FBRyxDQUFJLEVBQUUsYUFBTixJQUFlLElBQUUsRUFBRSxlQUFlLGVBQWUsSUFBRyxFQUFFLE1BQUksR0FBRSxFQUFFLFlBQVU7QUFBQTtBQUFHLGVBQU87QUFBQSxXQUFVO0FBQTBCLGVBQXZCLEVBQUUsSUFBRyxJQUFFLEVBQUUsZUFBaUIsQUFBSyxHQUFFLFFBQU0sT0FBYixJQUF3QixHQUFFLFFBQU0sR0FBRSxLQUFFLEtBQUUsQUFBTyxNQUFQLE1BQVMsSUFBRSxJQUFHLEFBQU8sTUFBUCxPQUFTLEFBQVMsRUFBRSxjQUFjLGFBQXpCLFVBQW1DLEdBQUcsS0FBRyxJQUFFLEFBQU8sRUFBRSxrQkFBVCxNQUEwQixLQUFHLENBQUMsS0FBRyxBQUFLLEdBQUUsT0FBSyxNQUFaLEtBQWUsQ0FBRyxBQUFPLE1BQVAsUUFBVSxBQUFLLEVBQUUsY0FBYywrQkFBckIsTUFBaUQsQUFBSyxHQUFFLFVBQVEsTUFBZixJQUFrQixBQUFJLE1BQUosS0FBUSxLQUFFLEtBQVcsRUFBSSxNQUFKLEtBQU8sQUFBSSxNQUFKLE1BQU0sS0FDcmYsSUFBRSxBQUFPLE1BQVAsUUFBVSxBQUFLLE1BQUcsY0FBUixLQUFvQixBQUFLLE1BQUcsY0FBUixLQUFvQixHQUFHLEdBQUUsTUFBTSxNQUFHLE1BQUUsR0FBRSxTQUFPLElBQVM7QUFBQSxXQUFVO0FBQUUsZUFBTyxNQUFLLEdBQUcsSUFBRyxBQUFPLE1BQVAsUUFBVSxHQUFHLEVBQUUsVUFBVSxnQkFBZTtBQUFBLFdBQVU7QUFBRyxlQUFPLEdBQUcsSUFBRztBQUFBLFdBQVU7QUFBRyxlQUFPLEdBQUcsRUFBRSxTQUFPLE1BQUs7QUFBQSxXQUFVO0FBQTBCLFlBQXZCLEVBQUUsSUFBRyxJQUFFLEVBQUUsZUFBaUIsQUFBTyxNQUFQO0FBQVMsaUJBQU87QUFBc0MsWUFBakMsSUFBRSxBQUFLLEdBQUUsUUFBTSxPQUFiLEdBQWlCLElBQUUsRUFBRSxXQUFhLEFBQU8sTUFBUDtBQUFTLGNBQUc7QUFBRSxlQUFHLEdBQUU7QUFBQSxlQUFRO0FBQUMsZ0JBQUcsQUFBSSxNQUFKLEtBQU8sQUFBTyxNQUFQLFFBQVUsQUFBSyxHQUFFLFFBQU0sT0FBYjtBQUFpQixtQkFBSSxJQUFFLEVBQUUsT0FBTSxBQUFPLE1BQVAsUUFBVTtBQUFTLG9CQUFSLElBQUUsR0FBRyxJQUFNLEFBQU8sTUFBUCxNQUFTO0FBQ2pXLHVCQURrVyxFQUFFLFNBQU8sSUFBRyxHQUFHLEdBQUUsS0FBSSxJQUFFLEVBQUUsYUFBWSxBQUFPLE1BQVAsUUFBVyxHQUFFLGNBQVksR0FBRSxFQUFFLFNBQU8sSUFDbmYsQUFBTyxFQUFFLGVBQVQsUUFBc0IsR0FBRSxjQUFZLE9BQU0sRUFBRSxhQUFXLEVBQUUsWUFBVyxJQUFFLEdBQU0sSUFBRSxFQUFFLE9BQU0sQUFBTyxNQUFQO0FBQVUsd0JBQUUsR0FBRSxJQUFFLEdBQUUsRUFBRSxTQUFPLEdBQUUsRUFBRSxhQUFXLE1BQUssRUFBRSxjQUFZLE1BQUssRUFBRSxhQUFXLE1BQUssSUFBRSxFQUFFLFdBQVUsQUFBTyxNQUFQLE9BQVUsR0FBRSxhQUFXLEdBQUUsRUFBRSxRQUFNLEdBQUUsRUFBRSxRQUFNLE1BQUssRUFBRSxnQkFBYyxNQUFLLEVBQUUsZ0JBQWMsTUFBSyxFQUFFLGNBQVksTUFBSyxFQUFFLGVBQWEsTUFBSyxFQUFFLFlBQVUsUUFBTyxHQUFFLGFBQVcsRUFBRSxZQUFXLEVBQUUsUUFBTSxFQUFFLE9BQU0sRUFBRSxRQUFNLEVBQUUsT0FBTSxFQUFFLGdCQUFjLEVBQUUsZUFBYyxFQUFFLGdCQUFjLEVBQUUsZUFBYyxFQUFFLGNBQVksRUFBRSxhQUFZLEVBQUUsT0FBSyxFQUFFLE1BQUssSUFBRSxFQUFFLGNBQ3BmLEVBQUUsZUFBYSxBQUFPLE1BQVAsT0FBUyxPQUFLLENBQUMsT0FBTSxFQUFFLE9BQU0sY0FBYSxFQUFFLGdCQUFlLElBQUUsRUFBRTtBQUFRLDJCQUFFLEdBQUUsRUFBRSxVQUFRLElBQUUsSUFBVSxFQUFFO0FBQUE7QUFBTSxvQkFBRSxFQUFFO0FBQUE7QUFBUSxZQUFPLEVBQUUsU0FBVCxRQUFlLE1BQUksTUFBSyxHQUFFLFNBQU8sSUFBRyxJQUFFLElBQUcsR0FBRyxHQUFFLEtBQUksRUFBRSxRQUFNO0FBQUE7QUFBQSxhQUFjO0FBQUMsY0FBRyxDQUFDO0FBQUUsZ0JBQUcsSUFBRSxHQUFHLElBQUcsQUFBTyxNQUFQO0FBQVUsa0JBQUcsRUFBRSxTQUFPLElBQUcsSUFBRSxJQUFHLElBQUUsRUFBRSxhQUFZLEFBQU8sTUFBUCxRQUFXLEdBQUUsY0FBWSxHQUFFLEVBQUUsU0FBTyxJQUFHLEdBQUcsR0FBRSxLQUFJLEFBQU8sRUFBRSxTQUFULFFBQWUsQUFBVyxFQUFFLGFBQWIsWUFBdUIsQ0FBQyxFQUFFLGFBQVcsQ0FBQztBQUFHLHVCQUFPLElBQUUsRUFBRSxhQUFXLEVBQUUsWUFBVyxBQUFPLE1BQVAsUUFBVyxHQUFFLGFBQVcsT0FBTTtBQUFBO0FBQVUsa0JBQUUsTUFBSSxFQUFFLHFCQUFtQixNQUFJLEFBQWEsTUFBYixjQUFpQixHQUFFLFNBQ2pmLElBQUcsSUFBRSxJQUFHLEdBQUcsR0FBRSxLQUFJLEVBQUUsUUFBTTtBQUFVLFlBQUUsY0FBYSxHQUFFLFVBQVEsRUFBRSxPQUFNLEVBQUUsUUFBTSxLQUFJLEtBQUUsRUFBRSxNQUFLLEFBQU8sTUFBUCxPQUFTLEVBQUUsVUFBUSxJQUFFLEVBQUUsUUFBTSxHQUFFLEVBQUUsT0FBSztBQUFBO0FBQUcsZUFBTyxBQUFPLEVBQUUsU0FBVCxPQUFlLEtBQUUsRUFBRSxNQUFLLEVBQUUsWUFBVSxHQUFFLEVBQUUsT0FBSyxFQUFFLFNBQVEsRUFBRSxhQUFXLEVBQUUsWUFBVyxFQUFFLHFCQUFtQixLQUFJLEVBQUUsVUFBUSxNQUFLLElBQUUsRUFBRSxTQUFRLEVBQUUsR0FBRSxJQUFFLElBQUUsSUFBRSxJQUFFLElBQUUsSUFBRyxLQUFHO0FBQUEsV0FBVTtBQUFBLFdBQVE7QUFBRyxlQUFPLE1BQUssQUFBTyxNQUFQLFFBQVUsQUFBTyxFQUFFLGtCQUFULFFBQTBCLENBQU8sRUFBRSxrQkFBVCxTQUF5QixBQUFrQyxFQUFFLFNBQXBDLG1DQUEyQyxHQUFFLFNBQU8sSUFBRztBQUFBO0FBQUssVUFBTSxNQUFNLEVBQUUsS0FBSSxFQUFFO0FBQUE7QUFDaGQsY0FBWSxHQUFFO0FBQUMsWUFBTyxFQUFFO0FBQUEsV0FBVTtBQUFFLFdBQUcsRUFBRSxTQUFPO0FBQUssWUFBSSxJQUFFLEVBQUU7QUFBTSxlQUFPLElBQUUsT0FBTSxHQUFFLFFBQU0sSUFBRSxRQUFNLElBQUcsS0FBRztBQUFBLFdBQVU7QUFBZ0MsWUFBOUIsTUFBSyxFQUFFLElBQUcsRUFBRSxJQUFHLE1BQUssSUFBRSxFQUFFLE9BQVMsQUFBSyxLQUFFLE9BQVA7QUFBVyxnQkFBTSxNQUFNLEVBQUU7QUFBTSxpQkFBRSxRQUFNLElBQUUsUUFBTSxJQUFVO0FBQUEsV0FBTztBQUFFLGVBQU8sR0FBRyxJQUFHO0FBQUEsV0FBVTtBQUFHLGVBQU8sRUFBRSxJQUFHLElBQUUsRUFBRSxPQUFNLElBQUUsT0FBTSxHQUFFLFFBQU0sSUFBRSxRQUFNLElBQUcsS0FBRztBQUFBLFdBQVU7QUFBRyxlQUFPLEVBQUUsSUFBRztBQUFBLFdBQVU7QUFBRSxlQUFPLE1BQUs7QUFBQSxXQUFVO0FBQUcsZUFBTyxHQUFHLElBQUc7QUFBQSxXQUFVO0FBQUEsV0FBUTtBQUFHLGVBQU8sTUFBSztBQUFBO0FBQWEsZUFBTztBQUFBO0FBQUE7QUFDcmEsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFHO0FBQUMsVUFBSSxJQUFFLElBQUcsSUFBRTtBQUFFO0FBQUcsYUFBRyxHQUFHLElBQUcsSUFBRSxFQUFFO0FBQUEsYUFBYTtBQUFHLFVBQUksSUFBRTtBQUFBLGFBQVEsR0FBTjtBQUFTLFVBQUU7QUFBQSw0QkFBNkIsRUFBRSxVQUFRO0FBQUEsSUFBSyxFQUFFO0FBQUE7QUFBTSxXQUFNLENBQUMsT0FBTSxHQUFFLFFBQU8sR0FBRSxPQUFNO0FBQUE7QUFBRyxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUc7QUFBQyxjQUFRLE1BQU0sRUFBRTtBQUFBLGFBQWEsR0FBTjtBQUFTLGlCQUFXLFdBQVU7QUFBQyxjQUFNO0FBQUE7QUFBQTtBQUFBO0FBQU0sTUFBSSxLQUFHLEFBQWEsT0FBTyxXQUFwQixhQUE0QixVQUFRO0FBQUksY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUUsR0FBRyxJQUFHLElBQUcsRUFBRSxNQUFJLEdBQUUsRUFBRSxVQUFRLENBQUMsU0FBUTtBQUFNLFFBQUksSUFBRSxFQUFFO0FBQU0sYUFBRSxXQUFTLFdBQVU7QUFBQyxZQUFLLE1BQUcsSUFBRyxLQUFHLElBQUcsR0FBRyxHQUFFO0FBQUEsT0FBVztBQUFBO0FBQ3BiLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFFLEdBQUcsSUFBRyxJQUFHLEVBQUUsTUFBSTtBQUFFLFFBQUksSUFBRSxFQUFFLEtBQUs7QUFBeUIsUUFBRyxBQUFhLE9BQU8sS0FBcEIsWUFBc0I7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFNLFFBQUUsVUFBUSxXQUFVO0FBQUMsa0JBQUcsR0FBRSxJQUFVLEVBQUU7QUFBQTtBQUFBO0FBQUksUUFBSSxJQUFFLEVBQUU7QUFBVSxXQUFPLE1BQVAsUUFBVSxBQUFhLE9BQU8sRUFBRSxxQkFBdEIsY0FBMEMsR0FBRSxXQUFTLFdBQVU7QUFBQyxNQUFhLE9BQU8sS0FBcEIsY0FBd0IsQ0FBTyxPQUFQLE9BQVUsS0FBRyxJQUFJLElBQUksQ0FBQyxTQUFPLEdBQUcsSUFBSSxPQUFNLEdBQUcsR0FBRTtBQUFJLFVBQUksS0FBRSxFQUFFO0FBQU0sV0FBSyxrQkFBa0IsRUFBRSxPQUFNLENBQUMsZ0JBQWUsQUFBTyxPQUFQLE9BQVMsS0FBRTtBQUFBLFFBQWM7QUFBQTtBQUFFLE1BQUksS0FBRyxBQUFhLE9BQU8sV0FBcEIsYUFBNEIsVUFBUTtBQUN4YyxjQUFZLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFJLFFBQUcsQUFBTyxNQUFQO0FBQVMsVUFBRyxBQUFhLE9BQU8sS0FBcEI7QUFBc0IsWUFBRztBQUFDLFlBQUU7QUFBQSxpQkFBWSxHQUFOO0FBQVMsYUFBRyxHQUFFO0FBQUE7QUFBQTtBQUFRLFVBQUUsVUFBUTtBQUFBO0FBQUssY0FBWSxHQUFFLEdBQUU7QUFBQyxZQUFPLEVBQUU7QUFBQSxXQUFVO0FBQUEsV0FBTztBQUFBLFdBQVE7QUFBQSxXQUFRO0FBQUc7QUFBQSxXQUFZO0FBQUUsWUFBRyxFQUFFLFFBQU0sT0FBSyxBQUFPLE1BQVAsTUFBUztBQUFDLGNBQUksSUFBRSxFQUFFLGVBQWMsSUFBRSxFQUFFO0FBQWMsY0FBRSxFQUFFLFdBQVUsSUFBRSxFQUFFLHdCQUF3QixFQUFFLGdCQUFjLEVBQUUsT0FBSyxJQUFFLEdBQUcsRUFBRSxNQUFLLElBQUcsSUFBRyxFQUFFLHNDQUFvQztBQUFBO0FBQUU7QUFBQSxXQUFZO0FBQUUsVUFBRSxRQUFNLE9BQUssR0FBRyxFQUFFLFVBQVU7QUFBZTtBQUFBLFdBQVk7QUFBQSxXQUFPO0FBQUEsV0FBTztBQUFBLFdBQU87QUFBRztBQUFBO0FBQU8sVUFBTSxNQUFNLEVBQUU7QUFBQTtBQUM1ZSxjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsWUFBTyxFQUFFO0FBQUEsV0FBVTtBQUFBLFdBQU87QUFBQSxXQUFRO0FBQUEsV0FBUTtBQUFnRCxZQUE3QyxJQUFFLEVBQUUsYUFBWSxJQUFFLEFBQU8sTUFBUCxPQUFTLEVBQUUsYUFBVyxNQUFRLEFBQU8sTUFBUCxNQUFTO0FBQUMsY0FBRSxJQUFFLEVBQUU7QUFBSyxhQUFFO0FBQUMsZ0JBQUcsQUFBSyxHQUFFLE1BQUksTUFBWCxHQUFjO0FBQUMsa0JBQUksSUFBRSxFQUFFO0FBQU8sZ0JBQUUsVUFBUTtBQUFBO0FBQUksZ0JBQUUsRUFBRTtBQUFBLG1CQUFXLE1BQUk7QUFBQTtBQUFnRCxZQUE3QyxJQUFFLEVBQUUsYUFBWSxJQUFFLEFBQU8sTUFBUCxPQUFTLEVBQUUsYUFBVyxNQUFRLEFBQU8sTUFBUCxNQUFTO0FBQUMsY0FBRSxJQUFFLEVBQUU7QUFBSyxhQUFFO0FBQUMsZ0JBQUksSUFBRTtBQUFFLGdCQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsS0FBSSxBQUFLLEtBQUUsTUFBUCxLQUFXLEFBQUssS0FBRSxNQUFQLEtBQVksSUFBRyxHQUFFLElBQUcsR0FBRyxHQUFFLEtBQUksSUFBRTtBQUFBLG1CQUFRLE1BQUk7QUFBQTtBQUFHO0FBQUEsV0FBWTtBQUFFLFlBQUUsRUFBRSxXQUFVLEVBQUUsUUFBTSxLQUFJLENBQU8sTUFBUCxPQUFTLEVBQUUsc0JBQXFCLEtBQUUsRUFBRSxnQkFBYyxFQUFFLE9BQUssRUFBRSxnQkFBYyxHQUFHLEVBQUUsTUFBSyxFQUFFLGdCQUFlLEVBQUUsbUJBQW1CLEdBQ3hnQixFQUFFLGVBQWMsRUFBRSx3Q0FBdUMsSUFBRSxFQUFFLGFBQVksQUFBTyxNQUFQLFFBQVUsR0FBRyxHQUFFLEdBQUU7QUFBRztBQUFBLFdBQVk7QUFBa0IsWUFBaEIsSUFBRSxFQUFFLGFBQWUsQUFBTyxNQUFQLE1BQVM7QUFBUSxjQUFQLElBQUUsTUFBUSxBQUFPLEVBQUUsVUFBVDtBQUFlLG9CQUFPLEVBQUUsTUFBTTtBQUFBLG1CQUFVO0FBQUUsb0JBQUUsRUFBRSxNQUFNO0FBQVU7QUFBQSxtQkFBVztBQUFFLG9CQUFFLEVBQUUsTUFBTTtBQUFBO0FBQVUsYUFBRyxHQUFFLEdBQUU7QUFBQTtBQUFHO0FBQUEsV0FBWTtBQUFFLFlBQUUsRUFBRSxXQUFVLEFBQU8sTUFBUCxRQUFVLEVBQUUsUUFBTSxLQUFHLEdBQUcsRUFBRSxNQUFLLEVBQUUsa0JBQWdCLEVBQUU7QUFBUTtBQUFBLFdBQVk7QUFBRTtBQUFBLFdBQVk7QUFBRTtBQUFBLFdBQVk7QUFBRztBQUFBLFdBQVk7QUFBRyxRQUFPLEVBQUUsa0JBQVQsUUFBeUIsS0FBRSxFQUFFLFdBQVUsQUFBTyxNQUFQLFFBQVcsS0FBRSxFQUFFLGVBQWMsQUFBTyxNQUFQLFFBQVcsS0FBRSxFQUFFLFlBQVcsQUFBTyxNQUFQLFFBQVUsR0FBRztBQUN2ZjtBQUFBLFdBQVk7QUFBQSxXQUFRO0FBQUEsV0FBUTtBQUFBLFdBQVE7QUFBQSxXQUFRO0FBQUEsV0FBUTtBQUFHO0FBQUE7QUFBTyxVQUFNLE1BQU0sRUFBRTtBQUFBO0FBQzVFLGNBQVksR0FBRSxHQUFFO0FBQUMsYUFBUSxJQUFFLE9BQUk7QUFBQyxVQUFHLEFBQUksRUFBRSxRQUFOLEdBQVU7QUFBQyxZQUFJLElBQUUsRUFBRTtBQUFVLFlBQUc7QUFBRSxjQUFFLEVBQUUsT0FBTSxBQUFhLE9BQU8sRUFBRSxlQUF0QixhQUFrQyxFQUFFLFlBQVksV0FBVSxRQUFPLGVBQWEsRUFBRSxVQUFRO0FBQUEsYUFBVztBQUFDLGNBQUUsRUFBRTtBQUFVLGNBQUksSUFBRSxFQUFFLGNBQWM7QUFBTSxjQUFFLEFBQW1CLEtBQVAsUUFBVSxFQUFFLGVBQWUsYUFBVyxFQUFFLFVBQVEsTUFBSyxFQUFFLE1BQU0sVUFBUSxHQUFHLFdBQVU7QUFBQTtBQUFBLGlCQUFZLEFBQUksRUFBRSxRQUFOO0FBQVUsVUFBRSxVQUFVLFlBQVUsSUFBRSxLQUFHLEVBQUU7QUFBQSxlQUF1QixDQUFLLEVBQUUsUUFBUCxNQUFZLEFBQUssRUFBRSxRQUFQLE1BQVksQUFBTyxFQUFFLGtCQUFULFFBQXdCLE1BQUksTUFBSSxBQUFPLEVBQUUsVUFBVCxNQUFlO0FBQUMsVUFBRSxNQUFNLFNBQU8sR0FBRSxJQUFFLEVBQUU7QUFBTTtBQUFBO0FBQVMsVUFBRyxNQUN0ZjtBQUFFO0FBQU0sYUFBSyxBQUFPLEVBQUUsWUFBVCxRQUFrQjtBQUFDLFlBQUcsQUFBTyxFQUFFLFdBQVQsUUFBaUIsRUFBRSxXQUFTO0FBQUU7QUFBTyxZQUFFLEVBQUU7QUFBQTtBQUFPLFFBQUUsUUFBUSxTQUFPLEVBQUUsUUFBTyxJQUFFLEVBQUU7QUFBQTtBQUFBO0FBQ2pILGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRyxNQUFJLEFBQWEsT0FBTyxHQUFHLHdCQUF2QjtBQUE0QyxVQUFHO0FBQUMsV0FBRyxxQkFBcUIsSUFBRztBQUFBLGVBQVMsR0FBTjtBQUFBO0FBQVUsWUFBTyxFQUFFO0FBQUEsV0FBVTtBQUFBLFdBQU87QUFBQSxXQUFRO0FBQUEsV0FBUTtBQUFBLFdBQVE7QUFBbUIsWUFBaEIsSUFBRSxFQUFFLGFBQWUsQUFBTyxNQUFQLFFBQVcsS0FBRSxFQUFFLFlBQVcsQUFBTyxNQUFQLE9BQVU7QUFBQyxjQUFJLElBQUUsSUFBRSxFQUFFO0FBQUssYUFBRTtBQUFDLGdCQUFJLElBQUUsR0FBRSxJQUFFLEVBQUU7QUFBZ0IsZ0JBQVIsSUFBRSxFQUFFLEtBQU8sQUFBUyxNQUFUO0FBQVcsa0JBQUcsQUFBSyxLQUFFLE1BQVA7QUFBVSxtQkFBRyxHQUFFO0FBQUEsbUJBQU87QUFBQyxvQkFBRTtBQUFFLG9CQUFHO0FBQUM7QUFBQSx5QkFBVSxHQUFOO0FBQVMscUJBQUcsR0FBRTtBQUFBO0FBQUE7QUFBSSxnQkFBRSxFQUFFO0FBQUEsbUJBQVcsTUFBSTtBQUFBO0FBQUc7QUFBQSxXQUFXO0FBQXNCLFlBQXBCLEdBQUcsSUFBRyxJQUFFLEVBQUUsV0FBYSxBQUFhLE9BQU8sRUFBRSx3QkFBdEI7QUFBMkMsY0FBRztBQUFDLGNBQUUsUUFBTSxFQUFFLGVBQWMsRUFBRSxRQUFNLEVBQUUsZUFBYyxFQUFFO0FBQUEsbUJBQTZCLEdBQU47QUFBUyxlQUFHLEdBQy9nQjtBQUFBO0FBQUc7QUFBQSxXQUFXO0FBQUUsV0FBRztBQUFHO0FBQUEsV0FBVztBQUFFLFdBQUcsR0FBRTtBQUFBO0FBQUE7QUFBSSxjQUFZLEdBQUU7QUFBQyxNQUFFLFlBQVUsTUFBSyxFQUFFLFFBQU0sTUFBSyxFQUFFLGVBQWEsTUFBSyxFQUFFLGNBQVksTUFBSyxFQUFFLGFBQVcsTUFBSyxFQUFFLGdCQUFjLE1BQUssRUFBRSxnQkFBYyxNQUFLLEVBQUUsZUFBYSxNQUFLLEVBQUUsU0FBTyxNQUFLLEVBQUUsY0FBWTtBQUFBO0FBQUssY0FBWSxHQUFFO0FBQUMsV0FBTyxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxFQUFFLFFBQU47QUFBQTtBQUM3UixjQUFZLEdBQUU7QUFBQyxPQUFFO0FBQUMsZUFBUSxJQUFFLEVBQUUsUUFBTyxBQUFPLE1BQVAsUUFBVTtBQUFDLFlBQUcsR0FBRztBQUFHO0FBQVEsWUFBRSxFQUFFO0FBQUE7QUFBTyxZQUFNLE1BQU0sRUFBRTtBQUFBO0FBQU8sUUFBSSxJQUFFO0FBQWdCLFlBQWQsSUFBRSxFQUFFLFdBQWlCLEVBQUU7QUFBQSxXQUFVO0FBQUUsWUFBSSxJQUFFO0FBQUc7QUFBQSxXQUFXO0FBQUUsWUFBRSxFQUFFLGVBQWMsSUFBRTtBQUFHO0FBQUEsV0FBVztBQUFFLFlBQUUsRUFBRSxlQUFjLElBQUU7QUFBRztBQUFBO0FBQWMsY0FBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLE1BQUUsUUFBTSxNQUFLLElBQUcsR0FBRSxLQUFJLEVBQUUsU0FBTztBQUFLO0FBQUU7QUFBRSxhQUFJLElBQUUsT0FBSTtBQUFDLGlCQUFLLEFBQU8sRUFBRSxZQUFULFFBQWtCO0FBQUMsZ0JBQUcsQUFBTyxFQUFFLFdBQVQsUUFBaUIsR0FBRyxFQUFFLFNBQVE7QUFBQyxrQkFBRTtBQUFLO0FBQUE7QUFBUSxnQkFBRSxFQUFFO0FBQUE7QUFBaUMsZUFBMUIsRUFBRSxRQUFRLFNBQU8sRUFBRSxRQUFXLElBQUUsRUFBRSxTQUFRLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxFQUFFLFFBQU4sS0FBVyxBQUFLLEVBQUUsUUFBUCxNQUFZO0FBQXlCLGdCQUFyQixFQUFFLFFBQU0sS0FBZ0IsQUFDL2UsRUFBRSxVQUQ2ZSxRQUN0ZSxBQUFJLEVBQUUsUUFBTjtBQUFVO0FBQWdCLGNBQUUsTUFBTSxTQUFPLEdBQUUsSUFBRSxFQUFFO0FBQUE7QUFBTSxjQUFHLENBQUUsR0FBRSxRQUFNLElBQUc7QUFBQyxnQkFBRSxFQUFFO0FBQVU7QUFBQTtBQUFBO0FBQVMsUUFBRSxHQUFHLEdBQUUsR0FBRSxLQUFHLEdBQUcsR0FBRSxHQUFFO0FBQUE7QUFDekgsY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFLEtBQUksSUFBRSxBQUFJLE1BQUosS0FBTyxBQUFJLE1BQUo7QUFBTSxRQUFHO0FBQUUsVUFBRSxJQUFFLEVBQUUsWUFBVSxFQUFFLFVBQVUsVUFBUyxJQUFFLEFBQUksRUFBRSxhQUFOLElBQWUsRUFBRSxXQUFXLGFBQWEsR0FBRSxLQUFHLEVBQUUsYUFBYSxHQUFFLEtBQUksQ0FBSSxFQUFFLGFBQU4sSUFBZ0IsS0FBRSxFQUFFLFlBQVcsRUFBRSxhQUFhLEdBQUUsTUFBSyxLQUFFLEdBQUUsRUFBRSxZQUFZLEtBQUksSUFBRSxFQUFFLHFCQUFvQixBQUFPLEtBQVAsUUFBc0IsQUFBTyxFQUFFLFlBQVQsUUFBbUIsR0FBRSxVQUFRO0FBQUEsYUFBYSxBQUFJLE1BQUosS0FBUSxLQUFFLEVBQUUsT0FBTSxBQUFPLE1BQVA7QUFBVSxXQUFJLEdBQUcsR0FBRSxHQUFFLElBQUcsSUFBRSxFQUFFLFNBQVEsQUFBTyxNQUFQO0FBQVUsV0FBRyxHQUFFLEdBQUUsSUFBRyxJQUFFLEVBQUU7QUFBQTtBQUM5WSxjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUUsS0FBSSxJQUFFLEFBQUksTUFBSixLQUFPLEFBQUksTUFBSjtBQUFNLFFBQUc7QUFBRSxVQUFFLElBQUUsRUFBRSxZQUFVLEVBQUUsVUFBVSxVQUFTLElBQUUsRUFBRSxhQUFhLEdBQUUsS0FBRyxFQUFFLFlBQVk7QUFBQSxhQUFXLEFBQUksTUFBSixLQUFRLEtBQUUsRUFBRSxPQUFNLEFBQU8sTUFBUDtBQUFVLFdBQUksR0FBRyxHQUFFLEdBQUUsSUFBRyxJQUFFLEVBQUUsU0FBUSxBQUFPLE1BQVA7QUFBVSxXQUFHLEdBQUUsR0FBRSxJQUFHLElBQUUsRUFBRTtBQUFBO0FBQ3JOLGNBQVksR0FBRSxHQUFFO0FBQUMsYUFBUSxJQUFFLEdBQUUsSUFBRSxJQUFHLEdBQUUsT0FBSTtBQUFDLFVBQUcsQ0FBQyxHQUFFO0FBQUMsWUFBRSxFQUFFO0FBQU87QUFBRSxxQkFBTztBQUFDLGdCQUFHLEFBQU8sTUFBUDtBQUFTLG9CQUFNLE1BQU0sRUFBRTtBQUFvQixvQkFBZCxJQUFFLEVBQUUsV0FBaUIsRUFBRTtBQUFBLG1CQUFVO0FBQUUsb0JBQUU7QUFBRztBQUFBLG1CQUFhO0FBQUUsb0JBQUUsRUFBRSxlQUFjLElBQUU7QUFBRztBQUFBLG1CQUFhO0FBQUUsb0JBQUUsRUFBRSxlQUFjLElBQUU7QUFBRztBQUFBO0FBQVEsZ0JBQUUsRUFBRTtBQUFBO0FBQU8sWUFBRTtBQUFBO0FBQUcsVUFBRyxBQUFJLEVBQUUsUUFBTixLQUFXLEFBQUksRUFBRSxRQUFOLEdBQVU7QUFBQztBQUFFLG1CQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsSUFBRTtBQUFJLGdCQUFHLEdBQUcsR0FBRSxJQUFHLEFBQU8sRUFBRSxVQUFULFFBQWdCLEFBQUksRUFBRSxRQUFOO0FBQVUsZ0JBQUUsTUFBTSxTQUFPLEdBQUUsSUFBRSxFQUFFO0FBQUEsaUJBQVU7QUFBQyxrQkFBRyxNQUFJO0FBQUU7QUFBUSxxQkFBSyxBQUFPLEVBQUUsWUFBVCxRQUFrQjtBQUFDLG9CQUFHLEFBQU8sRUFBRSxXQUFULFFBQWlCLEVBQUUsV0FBUztBQUFFO0FBQVEsb0JBQUUsRUFBRTtBQUFBO0FBQU8sZ0JBQUUsUUFBUSxTQUFPLEVBQUUsUUFBTyxJQUFFLEVBQUU7QUFBQTtBQUFRLFlBQUcsS0FBRSxHQUFFLElBQUUsRUFBRSxXQUNyZixBQUFJLEVBQUUsYUFBTixJQUFlLEVBQUUsV0FBVyxZQUFZLEtBQUcsRUFBRSxZQUFZLE1BQUksRUFBRSxZQUFZLEVBQUU7QUFBQSxpQkFBbUIsQUFBSSxFQUFFLFFBQU47QUFBVyxZQUFHLEFBQU8sRUFBRSxVQUFULE1BQWU7QUFBQyxjQUFFLEVBQUUsVUFBVSxlQUFjLElBQUUsSUFBRyxFQUFFLE1BQU0sU0FBTyxHQUFFLElBQUUsRUFBRTtBQUFNO0FBQUE7QUFBQSxpQkFBa0IsR0FBRyxHQUFFLElBQUcsQUFBTyxFQUFFLFVBQVQsTUFBZTtBQUFDLFVBQUUsTUFBTSxTQUFPLEdBQUUsSUFBRSxFQUFFO0FBQU07QUFBQTtBQUFTLFVBQUcsTUFBSTtBQUFFO0FBQU0sYUFBSyxBQUFPLEVBQUUsWUFBVCxRQUFrQjtBQUFDLFlBQUcsQUFBTyxFQUFFLFdBQVQsUUFBaUIsRUFBRSxXQUFTO0FBQUU7QUFBTyxZQUFFLEVBQUUsUUFBTyxBQUFJLEVBQUUsUUFBTixLQUFZLEtBQUU7QUFBQTtBQUFJLFFBQUUsUUFBUSxTQUFPLEVBQUUsUUFBTyxJQUFFLEVBQUU7QUFBQTtBQUFBO0FBQ2xaLGNBQVksR0FBRSxHQUFFO0FBQUMsWUFBTyxFQUFFO0FBQUEsV0FBVTtBQUFBLFdBQU87QUFBQSxXQUFRO0FBQUEsV0FBUTtBQUFBLFdBQVE7QUFBRyxZQUFJLElBQUUsRUFBRTtBQUF5QyxZQUE3QixJQUFFLEFBQU8sTUFBUCxPQUFTLEVBQUUsYUFBVyxNQUFRLEFBQU8sTUFBUCxNQUFTO0FBQUMsY0FBSSxJQUFFLElBQUUsRUFBRTtBQUFLO0FBQUcsWUFBSyxHQUFFLE1BQUksTUFBWCxLQUFnQixLQUFFLEVBQUUsU0FBUSxFQUFFLFVBQVEsUUFBTyxBQUFTLE1BQVQsVUFBWSxNQUFLLElBQUUsRUFBRTtBQUFBLGlCQUFXLE1BQUk7QUFBQTtBQUFHO0FBQUEsV0FBWTtBQUFFO0FBQUEsV0FBWTtBQUFnQixZQUFkLElBQUUsRUFBRSxXQUFhLEFBQU0sS0FBTixNQUFRO0FBQUMsY0FBRSxFQUFFO0FBQWMsY0FBSSxJQUFFLEFBQU8sTUFBUCxPQUFTLEVBQUUsZ0JBQWM7QUFBRSxjQUFFLEVBQUU7QUFBSyxjQUFJLElBQUUsRUFBRTtBQUErQixjQUFuQixFQUFFLGNBQVksTUFBUSxBQUFPLE1BQVAsTUFBUztBQUFnRixpQkFBL0UsRUFBRSxNQUFJLEdBQUUsQUFBVSxNQUFWLFdBQWEsQUFBVSxFQUFFLFNBQVosV0FBa0IsQUFBTSxFQUFFLFFBQVIsUUFBYyxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsSUFBRyxJQUFFLEdBQUcsR0FBRSxJQUFPLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUNsZixHQUFFO0FBQUMsa0JBQUksSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFLElBQUU7QUFBRyxjQUFVLE1BQVYsVUFBWSxHQUFHLEdBQUUsS0FBRyxBQUE0QixNQUE1Qiw0QkFBOEIsR0FBRyxHQUFFLEtBQUcsQUFBYSxNQUFiLGFBQWUsR0FBRyxHQUFFLEtBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFBO0FBQUcsb0JBQU87QUFBQSxtQkFBUTtBQUFRLG1CQUFHLEdBQUU7QUFBRztBQUFBLG1CQUFXO0FBQVcsbUJBQUcsR0FBRTtBQUFHO0FBQUEsbUJBQVc7QUFBUyxvQkFBRSxFQUFFLGNBQWMsYUFBWSxFQUFFLGNBQWMsY0FBWSxDQUFDLENBQUMsRUFBRSxVQUFTLElBQUUsRUFBRSxPQUFNLEFBQU0sS0FBTixPQUFRLEdBQUcsR0FBRSxDQUFDLENBQUMsRUFBRSxVQUFTLEdBQUUsTUFBSSxNQUFJLENBQUMsQ0FBQyxFQUFFLFlBQVcsQ0FBTSxFQUFFLGdCQUFSLE9BQXFCLEdBQUcsR0FBRSxDQUFDLENBQUMsRUFBRSxVQUFTLEVBQUUsY0FBYSxNQUFJLEdBQUcsR0FBRSxDQUFDLENBQUMsRUFBRSxVQUFTLEVBQUUsV0FBUyxLQUFHLElBQUc7QUFBQTtBQUFBO0FBQUE7QUFBTztBQUFBLFdBQVk7QUFBRSxZQUFHLEFBQU8sRUFBRSxjQUFUO0FBQW1CLGdCQUFNLE1BQU0sRUFBRTtBQUFNLFVBQUUsVUFBVSxZQUNqZixFQUFFO0FBQWM7QUFBQSxXQUFZO0FBQUUsWUFBRSxFQUFFLFdBQVUsRUFBRSxXQUFVLEdBQUUsVUFBUSxJQUFHLEdBQUcsRUFBRTtBQUFnQjtBQUFBLFdBQVk7QUFBRztBQUFBLFdBQVk7QUFBRyxRQUFPLEVBQUUsa0JBQVQsUUFBeUIsTUFBRyxLQUFJLEdBQUcsRUFBRSxPQUFNLE1BQUssR0FBRztBQUFHO0FBQUEsV0FBWTtBQUFHLFdBQUc7QUFBRztBQUFBLFdBQVk7QUFBRztBQUFBLFdBQVk7QUFBQSxXQUFRO0FBQUcsV0FBRyxHQUFFLEFBQU8sRUFBRSxrQkFBVDtBQUF3QjtBQUFBO0FBQU8sVUFBTSxNQUFNLEVBQUU7QUFBQTtBQUFPLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQVksUUFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLFFBQUUsY0FBWTtBQUFLLFVBQUksSUFBRSxFQUFFO0FBQVUsTUFBTyxNQUFQLFFBQVcsS0FBRSxFQUFFLFlBQVUsSUFBSSxPQUFJLEVBQUUsUUFBUSxTQUFTLElBQUU7QUFBQyxZQUFJLElBQUUsR0FBRyxLQUFLLE1BQUssR0FBRTtBQUFHLFVBQUUsSUFBSSxPQUFLLEdBQUUsSUFBSSxLQUFHLEdBQUUsS0FBSyxHQUFFO0FBQUE7QUFBQTtBQUFBO0FBQ25lLGNBQVksR0FBRSxHQUFFO0FBQUMsV0FBTyxBQUFPLE1BQVAsUUFBVyxLQUFFLEVBQUUsZUFBYyxBQUFPLE1BQVAsUUFBVSxBQUFPLEVBQUUsZUFBVCxRQUFzQixLQUFFLEVBQUUsZUFBYyxBQUFPLE1BQVAsUUFBVSxBQUFPLEVBQUUsZUFBVCxRQUFxQjtBQUFBO0FBQUcsTUFBSSxLQUFHLEtBQUssTUFBSyxLQUFHLEdBQUcsd0JBQXVCLEtBQUcsR0FBRyxtQkFBa0IsSUFBRSxHQUFFLElBQUUsTUFBSyxJQUFFLE1BQUssSUFBRSxHQUFFLEtBQUcsR0FBRSxLQUFHLEdBQUcsSUFBRyxJQUFFLEdBQUUsS0FBRyxNQUFLLEtBQUcsR0FBRSxLQUFHLEdBQUUsS0FBRyxHQUFFLEtBQUcsR0FBRSxLQUFHLE1BQUssS0FBRyxHQUFFLEtBQUc7QUFBUyxnQkFBYTtBQUFDLFNBQUcsTUFBSTtBQUFBO0FBQUksTUFBSSxJQUFFLE1BQUssS0FBRyxJQUFHLEtBQUcsTUFBSyxLQUFHLE1BQUssS0FBRyxJQUFHLEtBQUcsTUFBSyxLQUFHLElBQUcsS0FBRyxJQUFHLEtBQUcsSUFBRyxLQUFHLE1BQUssS0FBRyxHQUFFLEtBQUcsTUFBSyxLQUFHLElBQUcsS0FBRyxHQUFFLEtBQUcsR0FBRSxLQUFHLE1BQUssS0FBRztBQUFHLGdCQUFhO0FBQUMsV0FBTyxBQUFLLEtBQUUsT0FBUCxJQUFXLE1BQUksQUFBSyxPQUFMLEtBQVEsS0FBRyxLQUFHO0FBQUE7QUFDM2UsY0FBWSxHQUFFO0FBQVUsUUFBVCxJQUFFLEVBQUUsTUFBUSxBQUFLLEtBQUUsTUFBUDtBQUFVLGFBQU87QUFBRSxRQUFHLEFBQUssS0FBRSxNQUFQO0FBQVUsYUFBTyxBQUFLLFNBQUwsS0FBVSxJQUFFO0FBQWtCLFFBQWhCLEFBQUksT0FBSixLQUFTLE1BQUcsS0FBTyxBQUFJLEdBQUcsZUFBUCxHQUFrQjtBQUFDLE1BQUksT0FBSixLQUFTLE1BQUcsQUFBTyxPQUFQLE9BQVUsR0FBRyxlQUFhLElBQUcsSUFBRTtBQUFHLFVBQUksSUFBRSxVQUFRLENBQUM7QUFBRyxrQkFBRyxDQUFDLEdBQUUsQUFBSSxNQUFKLEtBQVEsS0FBRSxVQUFRLENBQUMsR0FBRSxJQUFFLElBQUUsQ0FBQyxHQUFFLEFBQUksTUFBSixLQUFRLEtBQUUsUUFBYztBQUFBO0FBQUUsZUFBRSxNQUFLLEFBQUssS0FBRSxNQUFQLEtBQVcsQUFBSyxNQUFMLEtBQU8sSUFBRSxHQUFHLElBQUcsTUFBSyxLQUFFLEdBQUcsSUFBRyxJQUFFLEdBQUcsR0FBRSxNQUFZO0FBQUE7QUFDblQsY0FBWSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUcsS0FBRztBQUFHLFlBQU0sS0FBRyxHQUFFLEtBQUcsTUFBSyxNQUFNLEVBQUU7QUFBZ0IsUUFBVixJQUFFLEdBQUcsR0FBRSxJQUFNLEFBQU8sTUFBUDtBQUFTLGFBQU87QUFBSyxPQUFHLEdBQUUsR0FBRSxJQUFHLE1BQUksS0FBSSxPQUFJLEdBQUUsQUFBSSxNQUFKLEtBQU8sR0FBRyxHQUFFO0FBQUksUUFBSSxJQUFFO0FBQUssSUFBSSxNQUFKLElBQU0sQUFBSyxLQUFFLE1BQVAsS0FBVyxBQUFLLEtBQUUsT0FBUCxJQUFXLEdBQUcsS0FBSSxJQUFHLEdBQUUsSUFBRyxBQUFJLE1BQUosS0FBUSxPQUFLLFNBQVEsQ0FBSyxLQUFFLE1BQVAsS0FBVyxBQUFLLE1BQUwsTUFBUSxBQUFLLE1BQUwsTUFBUyxDQUFPLE9BQVAsT0FBVSxLQUFHLElBQUksSUFBSSxDQUFDLE1BQUksR0FBRyxJQUFJLEtBQUksR0FBRyxHQUFFLEtBQUksS0FBRztBQUFBO0FBQUUsY0FBWSxHQUFFLEdBQUU7QUFBQyxNQUFFLFNBQU87QUFBRSxRQUFJLElBQUUsRUFBRTtBQUFxQyxTQUEzQixBQUFPLE1BQVAsUUFBVyxHQUFFLFNBQU8sSUFBRyxJQUFFLEdBQU0sSUFBRSxFQUFFLFFBQU8sQUFBTyxNQUFQO0FBQVUsUUFBRSxjQUFZLEdBQUUsSUFBRSxFQUFFLFdBQVUsQUFBTyxNQUFQLFFBQVcsR0FBRSxjQUFZLElBQUcsSUFBRSxHQUFFLElBQUUsRUFBRTtBQUFPLFdBQU8sQUFBSSxFQUFFLFFBQU4sSUFBVSxFQUFFLFlBQVU7QUFBQTtBQUN6ZSxjQUFZLEdBQUUsR0FBRTtBQUFDLGFBQVEsSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLGdCQUFlLElBQUUsRUFBRSxhQUFZLElBQUUsRUFBRSxpQkFBZ0IsSUFBRSxFQUFFLGNBQWEsSUFBRSxLQUFHO0FBQUMsVUFBSSxJQUFFLEtBQUcsR0FBRyxJQUFHLElBQUUsS0FBRyxHQUFFLElBQUUsRUFBRTtBQUFHLFVBQUcsQUFBSyxNQUFMO0FBQVEsWUFBRyxBQUFLLEtBQUUsTUFBUCxLQUFXLEFBQUssS0FBRSxNQUFQLEdBQVU7QUFBQyxjQUFFLEdBQUUsR0FBRztBQUFHLGNBQUksSUFBRTtBQUFFLFlBQUUsS0FBRyxNQUFJLElBQUUsSUFBRSxNQUFJLEtBQUcsSUFBRSxJQUFFLE1BQUk7QUFBQTtBQUFBO0FBQVMsYUFBRyxLQUFJLEdBQUUsZ0JBQWM7QUFBRyxXQUFHLENBQUM7QUFBQTtBQUF3QixRQUF0QixJQUFFLEdBQUcsR0FBRSxNQUFJLElBQUUsSUFBRSxJQUFHLElBQUUsR0FBSyxBQUFJLE1BQUo7QUFBTSxNQUFPLE1BQVAsUUFBVyxPQUFJLE1BQUksR0FBRyxJQUFHLEVBQUUsZUFBYSxNQUFLLEVBQUUsbUJBQWlCO0FBQUEsU0FBTztBQUFDLFVBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxZQUFHLEVBQUUscUJBQW1CO0FBQUU7QUFBTyxjQUFJLE1BQUksR0FBRztBQUFBO0FBQUcsTUFBSyxNQUFMLEtBQVEsS0FBRSxHQUFHLEtBQUssTUFBSyxJQUFHLEFBQU8sT0FBUCxPQUFXLE1BQUcsQ0FBQyxJQUFHLEtBQUcsR0FBRyxJQUFHLE9BQUssR0FBRyxLQUFLLElBQ3JmLElBQUUsTUFBSSxBQUFLLE1BQUwsS0FBTyxJQUFFLEdBQUcsSUFBRyxHQUFHLEtBQUssTUFBSyxNQUFLLEtBQUUsR0FBRyxJQUFHLElBQUUsR0FBRyxHQUFFLEdBQUcsS0FBSyxNQUFLLE1BQUssRUFBRSxtQkFBaUIsR0FBRSxFQUFFLGVBQWE7QUFBQTtBQUFBO0FBQzVHLGNBQVksR0FBRTtBQUFlLFFBQWQsS0FBRyxJQUFHLEtBQUcsS0FBRyxHQUFLLEFBQUssS0FBRSxPQUFQO0FBQVcsWUFBTSxNQUFNLEVBQUU7QUFBTSxRQUFJLElBQUUsRUFBRTtBQUFhLFFBQUcsUUFBTSxFQUFFLGlCQUFlO0FBQUUsYUFBTztBQUFLLFFBQUksSUFBRSxHQUFHLEdBQUUsTUFBSSxJQUFFLElBQUU7QUFBRyxRQUFHLEFBQUksTUFBSjtBQUFNLGFBQU87QUFBSyxRQUFJLElBQUUsR0FBTSxJQUFFO0FBQUUsU0FBRztBQUFHLFFBQUksSUFBRTtBQUFLLElBQUcsT0FBSSxLQUFHLE1BQUksTUFBRSxPQUFLLEdBQUcsR0FBRTtBQUFHO0FBQUcsVUFBRztBQUFDO0FBQUs7QUFBQSxlQUFZLEdBQU47QUFBUyxXQUFHLEdBQUU7QUFBQTtBQUFBLFdBQVM7QUFBdUQsUUFBcEQsTUFBSyxHQUFHLFVBQVEsR0FBRSxJQUFFLEdBQUUsQUFBTyxNQUFQLE9BQVMsSUFBRSxJQUFHLEtBQUUsTUFBSyxJQUFFLEdBQUUsSUFBRSxJQUFNLEFBQUssTUFBRyxPQUFSO0FBQVksU0FBRyxHQUFFO0FBQUEsYUFBVyxBQUFJLE1BQUosR0FBTTtBQUF5RixVQUF4RixBQUFJLE1BQUosS0FBUSxNQUFHLElBQUcsRUFBRSxXQUFVLEdBQUUsVUFBUSxJQUFHLEdBQUcsRUFBRSxpQkFBZ0IsSUFBRSxHQUFHLElBQUcsQUFBSSxNQUFKLEtBQVEsS0FBRSxHQUFHLEdBQUUsTUFBUSxBQUFJLE1BQUo7QUFBTSxjQUFNLElBQUUsSUFBRyxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsSUFBRyxHQUFHLEdBQUUsTUFBSztBQUMzYyxjQUQ2YyxFQUFFLGVBQ3JmLEVBQUUsUUFBUSxXQUFVLEVBQUUsZ0JBQWMsR0FBUztBQUFBLGFBQVE7QUFBQSxhQUFPO0FBQUUsZ0JBQU0sTUFBTSxFQUFFO0FBQUEsYUFBVztBQUFFLGFBQUc7QUFBRztBQUFBLGFBQVc7QUFBVSxjQUFSLEdBQUcsR0FBRSxJQUFPLEtBQUUsY0FBWSxLQUFJLEtBQUUsS0FBRyxNQUFJLEtBQUksS0FBRyxJQUFHO0FBQUMsZ0JBQUcsQUFBSSxHQUFHLEdBQUUsT0FBVDtBQUFZO0FBQXlCLGdCQUFuQixJQUFFLEVBQUUsZ0JBQW1CLEtBQUUsT0FBSyxHQUFFO0FBQUMsb0JBQUssRUFBRSxlQUFhLEVBQUUsaUJBQWU7QUFBRTtBQUFBO0FBQU0sY0FBRSxnQkFBYyxHQUFHLEdBQUcsS0FBSyxNQUFLLElBQUc7QUFBRztBQUFBO0FBQU0sYUFBRztBQUFHO0FBQUEsYUFBVztBQUFVLGNBQVIsR0FBRyxHQUFFLElBQU8sS0FBRSxhQUFXO0FBQUU7QUFBcUIsZUFBZixJQUFFLEVBQUUsWUFBZSxJQUFFLElBQUcsSUFBRSxLQUFHO0FBQUMsZ0JBQUksSUFBRSxLQUFHLEdBQUc7QUFBRyxnQkFBRSxLQUFHLEdBQUUsSUFBRSxFQUFFLElBQUcsSUFBRSxLQUFJLEtBQUUsSUFBRyxLQUFHLENBQUM7QUFBQTtBQUNqWixjQURtWixJQUFFLEdBQUUsSUFBRSxNQUFJLEdBQUUsSUFBRyxPQUFJLElBQUUsTUFBSSxNQUFJLElBQUUsTUFBSSxPQUFLLElBQUUsT0FBSyxPQUFLLElBQUUsT0FBSyxNQUFJLElBQUUsTUFBSSxPQUNsZixJQUFFLE9BQUssT0FBSyxHQUFHLElBQUUsU0FBTyxHQUFLLEtBQUcsR0FBRTtBQUFDLGNBQUUsZ0JBQWMsR0FBRyxHQUFHLEtBQUssTUFBSyxJQUFHO0FBQUc7QUFBQTtBQUFNLGFBQUc7QUFBRztBQUFBLGFBQVc7QUFBRSxhQUFHO0FBQUc7QUFBQTtBQUFjLGdCQUFNLE1BQU0sRUFBRTtBQUFBO0FBQUE7QUFBUSxjQUFHLEdBQUUsTUFBWSxFQUFFLGlCQUFlLElBQUUsR0FBRyxLQUFLLE1BQUssS0FBRztBQUFBO0FBQUssY0FBWSxHQUFFLEdBQUU7QUFBcUQsU0FBcEQsS0FBRyxDQUFDLElBQUcsS0FBRyxDQUFDLElBQUcsRUFBRSxrQkFBZ0IsR0FBRSxFQUFFLGVBQWEsQ0FBQyxHQUFNLElBQUUsRUFBRSxpQkFBZ0IsSUFBRSxLQUFHO0FBQUMsVUFBSSxJQUFFLEtBQUcsR0FBRyxJQUFHLElBQUUsS0FBRztBQUFFLFFBQUUsS0FBRyxJQUFHLEtBQUcsQ0FBQztBQUFBO0FBQUE7QUFDMVUsY0FBWSxHQUFFO0FBQUMsUUFBRyxBQUFLLEtBQUUsT0FBUDtBQUFXLFlBQU0sTUFBTSxFQUFFO0FBQVcsUUFBTCxNQUFRLE1BQUksS0FBRyxBQUFLLEdBQUUsZUFBYSxNQUFwQixHQUF1QjtBQUFDLFVBQUksSUFBRSxHQUFNLElBQUUsR0FBRyxHQUFFO0FBQUcsTUFBSyxNQUFHLE9BQVIsS0FBYyxLQUFFLEdBQUcsR0FBRSxJQUFHLElBQUUsR0FBRyxHQUFFO0FBQUE7QUFBUyxVQUFFLEdBQUcsR0FBRSxJQUFHLElBQUUsR0FBRyxHQUFFO0FBQXNHLFFBQW5HLEFBQUksRUFBRSxRQUFOLEtBQVcsQUFBSSxNQUFKLEtBQVEsTUFBRyxJQUFHLEVBQUUsV0FBVSxHQUFFLFVBQVEsSUFBRyxHQUFHLEVBQUUsaUJBQWdCLElBQUUsR0FBRyxJQUFHLEFBQUksTUFBSixLQUFRLEtBQUUsR0FBRyxHQUFFLE1BQVEsQUFBSSxNQUFKO0FBQU0sWUFBTSxJQUFFLElBQUcsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLE1BQUs7QUFBRSxhQUFFLGVBQWEsRUFBRSxRQUFRLFdBQVUsRUFBRSxnQkFBYyxHQUFFLEdBQUcsSUFBRyxHQUFHLEdBQUUsTUFBWTtBQUFBO0FBQ3pZLGdCQUFhO0FBQUMsUUFBRyxBQUFPLE9BQVAsTUFBVTtBQUFDLFVBQUksSUFBRTtBQUFHLFdBQUcsTUFBSyxFQUFFLFFBQVEsU0FBUyxJQUFFO0FBQUMsV0FBRSxnQkFBYyxLQUFHLEdBQUUsY0FBYSxHQUFHLElBQUU7QUFBQTtBQUFBO0FBQU87QUFBQTtBQUFLLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsU0FBRztBQUFFLFFBQUc7QUFBQyxhQUFPLEVBQUU7QUFBQSxjQUFHO0FBQVEsVUFBRSxHQUFFLEFBQUksTUFBSixLQUFRLE9BQUs7QUFBQTtBQUFBO0FBQU8sY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBRSxTQUFHLElBQUcsS0FBRztBQUFFLFFBQUc7QUFBQyxhQUFPLEVBQUU7QUFBQSxjQUFHO0FBQVEsVUFBRSxHQUFFLEFBQUksTUFBSixLQUFRLE9BQUs7QUFBQTtBQUFBO0FBQU8sY0FBWSxHQUFFLEdBQUU7QUFBQyxNQUFFLElBQUcsS0FBSSxNQUFJLEdBQUUsTUFBSTtBQUFBO0FBQUUsZ0JBQWE7QUFBQyxTQUFHLEdBQUcsU0FBUSxFQUFFO0FBQUE7QUFDNVYsY0FBWSxHQUFFLEdBQUU7QUFBQyxNQUFFLGVBQWEsTUFBSyxFQUFFLGdCQUFjO0FBQUUsUUFBSSxJQUFFLEVBQUU7QUFBaUQsUUFBbkMsQUFBSyxNQUFMLE1BQVMsR0FBRSxnQkFBYyxJQUFHLEdBQUcsS0FBTyxBQUFPLE1BQVA7QUFBUyxXQUFJLElBQUUsRUFBRSxRQUFPLEFBQU8sTUFBUCxRQUFVO0FBQUMsWUFBSSxJQUFFO0FBQUUsZ0JBQU8sRUFBRTtBQUFBLGVBQVU7QUFBRSxnQkFBRSxFQUFFLEtBQUssbUJBQWtCLEFBQU8sS0FBUCxRQUFzQjtBQUFLO0FBQUEsZUFBVztBQUFFLGtCQUFLLEVBQUUsSUFBRyxFQUFFLElBQUc7QUFBSztBQUFBLGVBQVc7QUFBRSxlQUFHO0FBQUc7QUFBQSxlQUFXO0FBQUU7QUFBSztBQUFBLGVBQVc7QUFBRyxjQUFFO0FBQUc7QUFBQSxlQUFXO0FBQUcsY0FBRTtBQUFHO0FBQUEsZUFBVztBQUFHLGVBQUc7QUFBRztBQUFBLGVBQVc7QUFBQSxlQUFRO0FBQUc7QUFBQTtBQUFLLFlBQUUsRUFBRTtBQUFBO0FBQU8sUUFBRSxHQUFFLElBQUUsR0FBRyxFQUFFLFNBQVEsT0FBTSxJQUFFLEtBQUcsS0FBRyxHQUFFLElBQUUsR0FBRSxLQUFHLE1BQUssS0FBRyxLQUFHLEtBQUc7QUFBQTtBQUN2YyxjQUFZLEdBQUUsR0FBRTtBQUFDLE9BQUU7QUFBQyxVQUFJLElBQUU7QUFBRSxVQUFHO0FBQW9CLFlBQW5CLE1BQUssR0FBRyxVQUFRLElBQU0sSUFBRztBQUFDLG1CQUFRLElBQUUsRUFBRSxlQUFjLEFBQU8sTUFBUCxRQUFVO0FBQUMsZ0JBQUksSUFBRSxFQUFFO0FBQU0sWUFBTyxNQUFQLFFBQVcsR0FBRSxVQUFRLE9BQU0sSUFBRSxFQUFFO0FBQUE7QUFBSyxlQUFHO0FBQUE7QUFBeUMsWUFBdEMsS0FBRyxHQUFFLElBQUUsSUFBRSxJQUFFLE1BQUssS0FBRyxJQUFHLEdBQUcsVUFBUSxNQUFRLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxXQUFULE1BQWdCO0FBQUMsY0FBRSxHQUFFLEtBQUcsR0FBRSxJQUFFO0FBQUs7QUFBQTtBQUFNLFdBQUU7QUFBQyxjQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxJQUFFLEdBQUUsSUFBRTtBQUFvRCxjQUFsRCxJQUFFLEdBQUUsRUFBRSxTQUFPLE1BQUssRUFBRSxjQUFZLEVBQUUsYUFBVyxNQUFRLEFBQU8sTUFBUCxRQUFVLEFBQVcsT0FBTyxLQUFsQixZQUFxQixBQUFhLE9BQU8sRUFBRSxRQUF0QixZQUEyQjtBQUFDLGdCQUFJLElBQUU7QUFBRSxnQkFBRyxBQUFLLEdBQUUsT0FBSyxNQUFaLEdBQWU7QUFBQyxrQkFBSSxJQUFFLEVBQUU7QUFBVSxrQkFBRyxHQUFFLGNBQVksRUFBRSxhQUFZLEVBQUUsZ0JBQWMsRUFBRSxlQUFjLEVBQUUsUUFBTSxFQUFFLFNBQ3BmLEdBQUUsY0FBWSxNQUFLLEVBQUUsZ0JBQWM7QUFBQTtBQUFNLGdCQUFJLElBQUUsQUFBSyxHQUFFLFVBQVEsTUFBZixHQUFrQixJQUFFO0FBQUUsZUFBRTtBQUFDLGtCQUFJO0FBQUUsa0JBQUcsSUFBRSxBQUFLLEVBQUUsUUFBUCxJQUFXO0FBQUMsb0JBQUksSUFBRSxFQUFFO0FBQWMsb0JBQUcsQUFBTyxNQUFQO0FBQVMsc0JBQUUsQUFBTyxFQUFFLGVBQVQ7QUFBQSxxQkFBOEI7QUFBQyxzQkFBSSxJQUFFLEVBQUU7QUFBYyxzQkFBRSxBQUFTLEVBQUUsYUFBWCxTQUFvQixLQUFHLEFBQUssRUFBRSwrQkFBUCxLQUFrQyxLQUFHO0FBQUE7QUFBQTtBQUFTLGtCQUFHLEdBQUU7QUFBQyxvQkFBSSxJQUFFLEVBQUU7QUFBWSxvQkFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLHNCQUFJLElBQUUsSUFBSTtBQUFJLG9CQUFFLElBQUksSUFBRyxFQUFFLGNBQVk7QUFBQTtBQUFPLG9CQUFFLElBQUk7QUFBRyxvQkFBRyxBQUFLLEdBQUUsT0FBSyxNQUFaLEdBQWU7QUFBMkMsc0JBQTFDLEVBQUUsU0FBTyxJQUFHLEVBQUUsU0FBTyxPQUFNLEVBQUUsU0FBTyxPQUFTLEFBQUksRUFBRSxRQUFOO0FBQVUsd0JBQUcsQUFBTyxFQUFFLGNBQVQ7QUFBbUIsd0JBQUUsTUFBSTtBQUFBLHlCQUFPO0FBQUMsMEJBQUksSUFBRSxHQUFHLElBQUc7QUFBRyx3QkFBRSxNQUFJLEdBQUUsR0FBRyxHQUFFO0FBQUE7QUFBRyxvQkFBRSxTQUFPO0FBQUU7QUFBQTtBQUFRLG9CQUM1ZixRQUFPLElBQUU7QUFBRSxvQkFBSSxJQUFFLEVBQUU7QUFBK0csb0JBQXJHLEFBQU8sTUFBUCxPQUFVLEtBQUUsRUFBRSxZQUFVLElBQUksTUFBRyxJQUFFLElBQUksT0FBSSxFQUFFLElBQUksR0FBRSxNQUFLLEtBQUUsRUFBRSxJQUFJLElBQUcsQUFBUyxNQUFULFVBQWEsS0FBRSxJQUFJLE9BQUksRUFBRSxJQUFJLEdBQUUsTUFBUSxDQUFDLEVBQUUsSUFBSSxJQUFHO0FBQUMsb0JBQUUsSUFBSTtBQUFHLHNCQUFJLElBQUUsR0FBRyxLQUFLLE1BQUssR0FBRSxHQUFFO0FBQUcsb0JBQUUsS0FBSyxHQUFFO0FBQUE7QUFBRyxrQkFBRSxTQUFPLE1BQUssRUFBRSxRQUFNO0FBQUU7QUFBQTtBQUFRLGtCQUFFLEVBQUU7QUFBQSxxQkFBYSxBQUFPLE1BQVA7QUFBVSxnQkFBRSxNQUFPLElBQUcsRUFBRSxTQUFPLHVCQUFxQjtBQUFBO0FBQUE7QUFBQTtBQUF5TCxVQUFJLE1BQUosS0FBUSxLQUFFLElBQUcsSUFBRSxHQUFHLEdBQUUsSUFBRyxJQUNwZjtBQUFFLGFBQUU7QUFBQyxvQkFBTyxFQUFFO0FBQUEsbUJBQVU7QUFBRSxvQkFBRSxHQUFFLEVBQUUsU0FBTyxNQUFLLEtBQUcsQ0FBQyxHQUFFLEVBQUUsU0FBTztBQUFFLG9CQUFJLElBQUUsR0FBRyxHQUFFLEdBQUU7QUFBRyxtQkFBRyxHQUFFO0FBQUc7QUFBQSxtQkFBYTtBQUFFLG9CQUFFO0FBQUUsb0JBQUksSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFO0FBQVUsb0JBQUcsQUFBSyxHQUFFLFFBQU0sT0FBYixLQUFtQixDQUFhLE9BQU8sRUFBRSw0QkFBdEIsY0FBZ0QsQUFBTyxNQUFQLFFBQVUsQUFBYSxPQUFPLEVBQUUscUJBQXRCLGNBQTBDLENBQU8sT0FBUCxRQUFXLENBQUMsR0FBRyxJQUFJLE1BQUs7QUFBQyxvQkFBRSxTQUFPLE1BQUssS0FBRyxDQUFDLEdBQUUsRUFBRSxTQUFPO0FBQUUsc0JBQUksSUFBRSxHQUFHLEdBQUUsR0FBRTtBQUFHLHFCQUFHLEdBQUU7QUFBRztBQUFBO0FBQUE7QUFBUyxnQkFBRSxFQUFFO0FBQUEsbUJBQWEsQUFBTyxNQUFQO0FBQUE7QUFBVSxXQUFHO0FBQUEsZUFBUyxJQUFOO0FBQVUsWUFBRSxJQUFHLE1BQUksS0FBRyxBQUFPLE1BQVAsUUFBVyxLQUFFLElBQUUsRUFBRTtBQUFRO0FBQUE7QUFBUztBQUFBLGFBQVk7QUFBQTtBQUMzYixnQkFBYTtBQUFDLFFBQUksSUFBRSxHQUFHO0FBQVEsY0FBRyxVQUFRLElBQVUsQUFBTyxNQUFQLE9BQVMsS0FBRztBQUFBO0FBQUUsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBRSxTQUFHO0FBQUcsUUFBSSxJQUFFO0FBQUssVUFBSSxLQUFHLE1BQUksS0FBRyxHQUFHLEdBQUU7QUFBRztBQUFHLFVBQUc7QUFBQztBQUFLO0FBQUEsZUFBWSxHQUFOO0FBQVMsV0FBRyxHQUFFO0FBQUE7QUFBQSxXQUFTO0FBQXlCLFFBQXRCLE1BQUssSUFBRSxHQUFFLEdBQUcsVUFBUSxHQUFLLEFBQU8sTUFBUDtBQUFTLFlBQU0sTUFBTSxFQUFFO0FBQU0sZUFBRSxNQUFLLElBQUUsR0FBUztBQUFBO0FBQUUsZ0JBQWE7QUFBQyxXQUFLLEFBQU8sTUFBUDtBQUFVLFNBQUc7QUFBQTtBQUFHLGdCQUFhO0FBQUMsV0FBSyxBQUFPLE1BQVAsUUFBVSxDQUFDO0FBQU0sU0FBRztBQUFBO0FBQUcsY0FBWSxHQUFFO0FBQUMsUUFBSSxJQUFFLEdBQUcsRUFBRSxXQUFVLEdBQUU7QUFBSSxNQUFFLGdCQUFjLEVBQUUsY0FBYSxBQUFPLE1BQVAsT0FBUyxHQUFHLEtBQUcsSUFBRSxHQUFFLEdBQUcsVUFBUTtBQUFBO0FBQzVhLGNBQVksR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFFLE9BQUU7QUFBQyxVQUFJLElBQUUsRUFBRTtBQUFxQixVQUFYLElBQUUsRUFBRSxRQUFVLEFBQUssR0FBRSxRQUFNLFNBQWIsR0FBbUI7QUFBYyxZQUFiLElBQUUsR0FBRyxHQUFFLEdBQUUsS0FBTyxBQUFPLE1BQVAsTUFBUztBQUFDLGNBQUU7QUFBRTtBQUFBO0FBQVcsWUFBSixJQUFFLEdBQUssQUFBSyxFQUFFLFFBQVAsTUFBWSxBQUFLLEVBQUUsUUFBUCxNQUFZLEFBQU8sRUFBRSxrQkFBVCxRQUF3QixBQUFLLE1BQUcsZUFBUixLQUFxQixBQUFLLEdBQUUsT0FBSyxNQUFaLEdBQWU7QUFBQyxtQkFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLE9BQU0sQUFBTyxNQUFQO0FBQVUsaUJBQUcsRUFBRSxRQUFNLEVBQUUsWUFBVyxJQUFFLEVBQUU7QUFBUSxZQUFFLGFBQVc7QUFBQTtBQUFFLFFBQU8sTUFBUCxRQUFVLEFBQUssR0FBRSxRQUFNLFNBQWIsS0FBcUIsQ0FBTyxFQUFFLGdCQUFULFFBQXVCLEdBQUUsY0FBWSxFQUFFLGNBQWEsQUFBTyxFQUFFLGVBQVQsUUFBc0IsQ0FBTyxFQUFFLGVBQVQsUUFBc0IsR0FBRSxXQUFXLGFBQVcsRUFBRSxjQUFhLEVBQUUsYUFBVyxFQUFFLGFBQVksSUFBRSxFQUFFLFNBQVEsQ0FDL2UsRUFBRSxlQUQ2ZSxPQUNsZSxFQUFFLFdBQVcsYUFBVyxJQUFFLEVBQUUsY0FBWSxHQUFFLEVBQUUsYUFBVztBQUFBLGFBQVE7QUFBUyxZQUFSLElBQUUsR0FBRyxJQUFNLEFBQU8sTUFBUCxNQUFTO0FBQUMsWUFBRSxTQUFPLE1BQUssSUFBRTtBQUFFO0FBQUE7QUFBTyxRQUFPLE1BQVAsUUFBVyxHQUFFLGNBQVksRUFBRSxhQUFXLE1BQUssRUFBRSxTQUFPO0FBQUE7QUFBa0IsVUFBWixJQUFFLEVBQUUsU0FBVyxBQUFPLE1BQVAsTUFBUztBQUFDLFlBQUU7QUFBRTtBQUFBO0FBQU8sVUFBRSxJQUFFO0FBQUEsYUFBUSxBQUFPLE1BQVA7QUFBVSxJQUFJLE1BQUosS0FBUSxLQUFFO0FBQUE7QUFBRyxjQUFZLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBSyxjQUFHLElBQUcsR0FBRyxLQUFLLE1BQUssR0FBRSxLQUFXO0FBQUE7QUFDdFQsY0FBWSxHQUFFLEdBQUU7QUFBQztBQUFHO0FBQUEsV0FBVyxBQUFPLE9BQVA7QUFBVyxRQUFHLEFBQUssS0FBRSxPQUFQO0FBQVcsWUFBTSxNQUFNLEVBQUU7QUFBTSxRQUFJLElBQUUsRUFBRTtBQUFhLFFBQUcsQUFBTyxNQUFQO0FBQVMsYUFBTztBQUEyQyxRQUF0QyxFQUFFLGVBQWEsTUFBSyxFQUFFLGdCQUFjLEdBQUssTUFBSSxFQUFFO0FBQVEsWUFBTSxNQUFNLEVBQUU7QUFBTSxNQUFFLGVBQWE7QUFBSyxRQUFJLElBQUUsRUFBRSxRQUFNLEVBQUUsWUFBVyxJQUFFLEdBQUUsSUFBRSxFQUFFLGVBQWEsQ0FBQztBQUFFLE1BQUUsZUFBYSxHQUFFLEVBQUUsaUJBQWUsR0FBRSxFQUFFLGNBQVksR0FBRSxFQUFFLGdCQUFjLEdBQUUsRUFBRSxvQkFBa0IsR0FBRSxFQUFFLGtCQUFnQixHQUFFLElBQUUsRUFBRTtBQUFjLGFBQVEsSUFBRSxFQUFFLFlBQVcsSUFBRSxFQUFFLGlCQUFnQixJQUFFLEtBQUc7QUFBQyxVQUFJLElBQUUsS0FBRyxHQUFHLElBQUcsSUFBRSxLQUFHO0FBQUUsUUFBRSxLQUFHLEdBQUUsRUFBRSxLQUFHLElBQUcsRUFBRSxLQUFHLElBQUcsS0FBRyxDQUFDO0FBQUE7QUFDblYsUUFEcVYsQUFDamYsT0FEaWYsUUFDN2UsQUFBSyxLQUFFLE9BQVAsS0FBWSxHQUFHLElBQUksTUFBSSxHQUFHLE9BQU8sSUFBRyxNQUFJLEtBQUksS0FBRSxJQUFFLE1BQUssSUFBRSxJQUFHLElBQUUsRUFBRSxRQUFNLEFBQU8sRUFBRSxlQUFULE9BQXFCLEdBQUUsV0FBVyxhQUFXLEdBQUUsSUFBRSxFQUFFLGVBQWEsSUFBRSxJQUFFLElBQUUsRUFBRSxhQUFlLEFBQU8sTUFBUCxNQUFTO0FBQXdDLFVBQXZDLElBQUUsR0FBRSxLQUFHLElBQUcsR0FBRyxVQUFRLE1BQUssS0FBRyxJQUFHLElBQUUsTUFBUSxHQUFHLElBQUc7QUFBQyxZQUFHLG9CQUFtQjtBQUFFLGNBQUUsQ0FBQyxPQUFNLEVBQUUsZ0JBQWUsS0FBSSxFQUFFO0FBQUE7QUFBbUI7QUFBRSxnQkFBRyxJQUFHLEtBQUUsRUFBRSxrQkFBZ0IsRUFBRSxlQUFhLFFBQVEsS0FBRSxFQUFFLGdCQUFjLEVBQUUsbUJBQWlCLEFBQUksRUFBRSxlQUFOLEdBQWlCO0FBQUMsa0JBQUUsRUFBRSxZQUFXLElBQUUsRUFBRSxjQUFhLElBQUUsRUFBRSxXQUFVLElBQUUsRUFBRTtBQUFZLGtCQUFHO0FBQUMsa0JBQUUsVUFBUyxFQUFFO0FBQUEsdUJBQWUsSUFBTjtBQUFVLG9CQUFFO0FBQ25mO0FBQUE7QUFBUSxrQkFBSSxJQUFFLEdBQUUsSUFBRSxJQUFHLElBQUUsSUFBRyxJQUFFLEdBQUUsSUFBRSxHQUFFLElBQUUsR0FBRSxJQUFFO0FBQUs7QUFBRSwyQkFBTztBQUFDLDJCQUFRLEdBQUssTUFBSSxLQUFHLEFBQUksTUFBSixLQUFPLEFBQUksRUFBRSxhQUFOLEtBQWlCLEtBQUUsSUFBRSxJQUFHLE1BQUksS0FBRyxBQUFJLE1BQUosS0FBTyxBQUFJLEVBQUUsYUFBTixLQUFpQixLQUFFLElBQUUsSUFBRyxBQUFJLEVBQUUsYUFBTixLQUFpQixNQUFHLEVBQUUsVUFBVSxTQUFXLEFBQVEsS0FBRSxFQUFFLGdCQUFaO0FBQThCLHdCQUFFLEdBQUUsSUFBRTtBQUFFLDZCQUFPO0FBQUMsd0JBQUcsTUFBSTtBQUFFO0FBQW9ELHdCQUE1QyxNQUFJLEtBQUcsRUFBRSxNQUFJLEtBQUksS0FBRSxJQUFHLE1BQUksS0FBRyxFQUFFLE1BQUksS0FBSSxLQUFFLElBQU0sQUFBUSxLQUFFLEVBQUUsaUJBQVo7QUFBeUI7QUFBTSx3QkFBRSxHQUFFLElBQUUsRUFBRTtBQUFBO0FBQVcsc0JBQUU7QUFBQTtBQUFFLGtCQUFFLEFBQUssTUFBTCxNQUFRLEFBQUssTUFBTCxLQUFPLE9BQUssQ0FBQyxPQUFNLEdBQUUsS0FBSTtBQUFBO0FBQVEsa0JBQUU7QUFBSyxZQUFFLEtBQUcsQ0FBQyxPQUFNLEdBQUUsS0FBSTtBQUFBO0FBQVEsWUFBRTtBQUFLLFdBQUcsQ0FBQyxhQUFZLEdBQUUsZ0JBQWUsSUFBRyxLQUFHLElBQUcsS0FBRyxNQUFLLEtBQUcsSUFBRyxJQUFFO0FBQUU7QUFBRyxZQUFHO0FBQUM7QUFBQSxpQkFBVyxJQUFOO0FBQVUsY0FBRyxBQUN2Z0IsTUFEdWdCO0FBQ3JnQixrQkFBTSxNQUFNLEVBQUU7QUFBTSxhQUFHLEdBQUUsS0FBSSxJQUFFLEVBQUU7QUFBQTtBQUFBLGFBQWlCLEFBQU8sTUFBUDtBQUFVLFdBQUcsTUFBSyxJQUFFO0FBQUU7QUFBRyxZQUFHO0FBQUMsZUFBSSxJQUFFLEdBQUUsQUFBTyxNQUFQLFFBQVU7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBK0IsZ0JBQXpCLElBQUUsTUFBSSxHQUFHLEVBQUUsV0FBVSxLQUFPLElBQUUsS0FBSTtBQUFDLGtCQUFJLElBQUUsRUFBRTtBQUFVLGtCQUFHLEFBQU8sTUFBUCxNQUFTO0FBQUMsb0JBQUksSUFBRSxFQUFFO0FBQUksZ0JBQU8sTUFBUCxRQUFXLENBQWEsT0FBTyxLQUFwQixhQUFzQixFQUFFLFFBQU0sRUFBRSxVQUFRO0FBQUE7QUFBQTtBQUFPLG9CQUFPLElBQUU7QUFBQSxtQkFBVztBQUFFLG1CQUFHLElBQUcsRUFBRSxTQUFPO0FBQUc7QUFBQSxtQkFBVztBQUFFLG1CQUFHLElBQUcsRUFBRSxTQUFPLElBQUcsR0FBRyxFQUFFLFdBQVU7QUFBRztBQUFBLG1CQUFXO0FBQUssa0JBQUUsU0FBTztBQUFNO0FBQUEsbUJBQVc7QUFBSyxrQkFBRSxTQUFPLE9BQU0sR0FBRyxFQUFFLFdBQVU7QUFBRztBQUFBLG1CQUFXO0FBQUUsbUJBQUcsRUFBRSxXQUFVO0FBQUc7QUFBQSxtQkFBVztBQUFFLG9CQUFFLEdBQUUsR0FBRyxHQUFFO0FBQUcsb0JBQUksSUFBRSxFQUFFO0FBQVUsbUJBQUcsSUFBRyxBQUNuZixNQURtZixRQUNoZixHQUFHO0FBQUE7QUFBRyxnQkFBRSxFQUFFO0FBQUE7QUFBQSxpQkFBa0IsSUFBTjtBQUFVLGNBQUcsQUFBTyxNQUFQO0FBQVMsa0JBQU0sTUFBTSxFQUFFO0FBQU0sYUFBRyxHQUFFLEtBQUksSUFBRSxFQUFFO0FBQUE7QUFBQSxhQUFpQixBQUFPLE1BQVA7QUFBeUQsVUFBL0MsSUFBRSxJQUFHLElBQUUsTUFBSyxJQUFFLEVBQUUsYUFBWSxJQUFFLEVBQUUsZ0JBQWtCLE1BQUksS0FBRyxLQUFHLEVBQUUsaUJBQWUsR0FBRyxFQUFFLGNBQWMsaUJBQWdCLElBQUc7QUFDOEksYUFEN0ksQUFBTyxNQUFQLFFBQVUsR0FBRyxNQUFLLEtBQUUsRUFBRSxPQUFNLElBQUUsRUFBRSxLQUFJLEFBQVMsTUFBVCxVQUFhLEtBQUUsSUFBRyxvQkFBbUIsSUFBRyxHQUFFLGlCQUFlLEdBQUUsRUFBRSxlQUFhLEtBQUssSUFBSSxHQUFFLEVBQUUsTUFBTSxXQUFVLEtBQUcsS0FBRSxFQUFFLGlCQUFlLGFBQVcsRUFBRSxlQUFhLFFBQU8sRUFBRSxnQkFBZSxLQUFFLEVBQUUsZ0JBQWUsSUFBRSxFQUFFLFlBQVksUUFBTyxJQUFFLEtBQUssSUFBSSxFQUFFLE9BQU0sSUFBRyxJQUFFLEFBQ3BmLEVBQUUsUUFEa2YsU0FDOWUsSUFBRSxLQUFLLElBQUksRUFBRSxLQUFJLElBQUcsQ0FBQyxFQUFFLFVBQVEsSUFBRSxLQUFJLEtBQUUsR0FBRSxJQUFFLEdBQUUsSUFBRSxJQUFHLElBQUUsR0FBRyxHQUFFLElBQUcsSUFBRSxHQUFHLEdBQUUsSUFBRyxLQUFHLEtBQUksQ0FBSSxFQUFFLGVBQU4sS0FBa0IsRUFBRSxlQUFhLEVBQUUsUUFBTSxFQUFFLGlCQUFlLEVBQUUsVUFBUSxFQUFFLGNBQVksRUFBRSxRQUFNLEVBQUUsZ0JBQWMsRUFBRSxXQUFVLEtBQUUsRUFBRSxlQUFjLEVBQUUsU0FBUyxFQUFFLE1BQUssRUFBRSxTQUFRLEVBQUUsbUJBQWtCLElBQUUsSUFBRyxHQUFFLFNBQVMsSUFBRyxFQUFFLE9BQU8sRUFBRSxNQUFLLEVBQUUsV0FBVSxHQUFFLE9BQU8sRUFBRSxNQUFLLEVBQUUsU0FBUSxFQUFFLFNBQVMsU0FBUSxJQUFFLElBQU8sSUFBRSxHQUFFLElBQUUsRUFBRTtBQUFZLFVBQUksRUFBRSxhQUFOLEtBQWdCLEVBQUUsS0FBSyxDQUFDLFNBQVEsR0FBRSxNQUFLLEVBQUUsWUFBVyxLQUFJLEVBQUU7QUFBbUQsYUFBdkMsQUFBYSxPQUFPLEVBQUUsU0FBdEIsY0FBNkIsRUFBRSxTQUFZLElBQ3JmLEdBQUUsSUFBRSxFQUFFLFFBQU87QUFBSSxjQUFFLEVBQUUsSUFBRyxFQUFFLFFBQVEsYUFBVyxFQUFFLE1BQUssRUFBRSxRQUFRLFlBQVUsRUFBRTtBQUFBO0FBQUksV0FBRyxDQUFDLENBQUMsSUFBRyxLQUFHLEtBQUcsTUFBSyxFQUFFLFVBQVEsR0FBRSxJQUFFO0FBQUU7QUFBRyxZQUFHO0FBQUMsZUFBSSxJQUFFLEdBQUUsQUFBTyxNQUFQLFFBQVU7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBZ0MsZ0JBQTFCLElBQUUsTUFBSSxHQUFHLEdBQUUsRUFBRSxXQUFVLElBQU0sSUFBRSxLQUFJO0FBQUMsa0JBQUU7QUFBTyxrQkFBSSxJQUFFLEVBQUU7QUFBSSxrQkFBRyxBQUFPLE1BQVAsTUFBUztBQUFDLG9CQUFJLElBQUUsRUFBRTtBQUFVLHdCQUFPLEVBQUU7QUFBQSx1QkFBVTtBQUFFLHdCQUFFO0FBQUU7QUFBQTtBQUFjLHdCQUFFO0FBQUE7QUFBRSxnQkFBYSxPQUFPLEtBQXBCLGFBQXNCLEVBQUUsS0FBRyxFQUFFLFVBQVE7QUFBQTtBQUFBO0FBQUcsZ0JBQUUsRUFBRTtBQUFBO0FBQUEsaUJBQWtCLElBQU47QUFBVSxjQUFHLEFBQU8sTUFBUDtBQUFTLGtCQUFNLE1BQU0sRUFBRTtBQUFNLGFBQUcsR0FBRSxLQUFJLElBQUUsRUFBRTtBQUFBO0FBQUEsYUFBaUIsQUFBTyxNQUFQO0FBQVUsVUFBRSxNQUFLLE1BQUssSUFBRTtBQUFBO0FBQU8sUUFBRSxVQUFRO0FBQUUsUUFBRztBQUFHLFdBQUcsSUFBRyxLQUFHLEdBQUUsS0FBRztBQUFBO0FBQU8sV0FBSSxJQUFFLEdBQUUsQUFBTyxNQUFQO0FBQVUsWUFDcGYsRUFBRSxZQUFXLEVBQUUsYUFBVyxNQUFLLEVBQUUsUUFBTSxLQUFJLEtBQUUsR0FBRSxFQUFFLFVBQVEsTUFBSyxFQUFFLFlBQVUsT0FBTSxJQUFFO0FBQXFGLFFBQW5GLElBQUUsRUFBRSxjQUFhLEFBQUksTUFBSixLQUFRLE1BQUcsT0FBTSxBQUFJLE1BQUosSUFBTSxNQUFJLEtBQUcsT0FBTSxNQUFHLEdBQUUsS0FBRyxLQUFHLEtBQUcsR0FBRSxJQUFFLEVBQUUsV0FBYSxNQUFJLEFBQWEsT0FBTyxHQUFHLHFCQUF2QjtBQUF5QyxVQUFHO0FBQUMsV0FBRyxrQkFBa0IsSUFBRyxHQUFFLFFBQU8sQUFBTSxHQUFFLFFBQVEsUUFBTSxPQUF0QjtBQUFBLGVBQWlDLElBQU47QUFBQTtBQUFxQixRQUFWLEdBQUcsR0FBRSxNQUFRO0FBQUcsWUFBTSxLQUFHLElBQUcsSUFBRSxJQUFHLEtBQUcsTUFBSztBQUFFLFdBQUcsQUFBSyxLQUFFLE1BQVAsS0FBc0IsTUFBWTtBQUFBO0FBQ2xYLGdCQUFhO0FBQUMsV0FBSyxBQUFPLE1BQVAsUUFBVTtBQUFDLFVBQUksSUFBRSxFQUFFO0FBQVUsWUFBSSxBQUFPLE9BQVAsUUFBWSxDQUFLLEdBQUUsUUFBTSxNQUFiLElBQWdCLEdBQUcsR0FBRSxPQUFNLE1BQUcsTUFBSSxBQUFLLEVBQUUsUUFBUCxNQUFZLEdBQUcsR0FBRSxNQUFJLEdBQUcsR0FBRSxPQUFNLE1BQUc7QUFBSyxVQUFJLElBQUUsRUFBRTtBQUFNLE1BQUssS0FBRSxRQUFQLEtBQWEsR0FBRyxHQUFFLElBQUcsQUFBSyxLQUFFLFFBQVAsS0FBYSxNQUFLLE1BQUcsSUFBRyxHQUFHLElBQUcsV0FBVTtBQUFDLHFCQUFZO0FBQUEsV0FBUSxJQUFFLEVBQUU7QUFBQTtBQUFBO0FBQVksZ0JBQWE7QUFBQyxRQUFHLEFBQUssT0FBTCxJQUFRO0FBQUMsVUFBSSxJQUFFLEtBQUcsS0FBRyxLQUFHO0FBQUcsa0JBQUcsSUFBVSxHQUFHLEdBQUU7QUFBQTtBQUFJLFdBQU07QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFO0FBQUMsT0FBRyxLQUFLLEdBQUUsSUFBRyxNQUFLLE1BQUcsSUFBRyxHQUFHLElBQUcsV0FBVTtBQUFDLG1CQUFZO0FBQUE7QUFBQTtBQUFRLGNBQVksR0FBRSxHQUFFO0FBQUMsT0FBRyxLQUFLLEdBQUUsSUFBRyxNQUFLLE1BQUcsSUFBRyxHQUFHLElBQUcsV0FBVTtBQUFDLG1CQUFZO0FBQUE7QUFBQTtBQUN6ZCxnQkFBYTtBQUFDLFFBQUcsQUFBTyxPQUFQO0FBQVUsYUFBTTtBQUFHLFFBQUksSUFBRTtBQUFXLFFBQVIsS0FBRyxNQUFRLEFBQUssS0FBRSxPQUFQO0FBQVcsWUFBTSxNQUFNLEVBQUU7QUFBTSxRQUFJLElBQUU7QUFBRSxTQUFHO0FBQUcsUUFBSSxJQUFFO0FBQUcsU0FBRztBQUFHLGFBQVEsSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEtBQUcsR0FBRTtBQUFDLFVBQUksSUFBRSxFQUFFLElBQUcsSUFBRSxFQUFFLElBQUUsSUFBRyxJQUFFLEVBQUU7QUFBeUIsVUFBakIsRUFBRSxVQUFRLFFBQVUsQUFBYSxPQUFPLEtBQXBCO0FBQXNCLFlBQUc7QUFBQztBQUFBLGlCQUFVLEdBQU47QUFBUyxjQUFHLEFBQU8sTUFBUDtBQUFTLGtCQUFNLE1BQU0sRUFBRTtBQUFNLGFBQUcsR0FBRTtBQUFBO0FBQUE7QUFBZSxTQUFYLElBQUUsSUFBRyxLQUFHLElBQU8sSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEtBQUcsR0FBRTtBQUFDLFVBQUUsRUFBRSxJQUFHLElBQUUsRUFBRSxJQUFFO0FBQUcsVUFBRztBQUFDLFlBQUksSUFBRSxFQUFFO0FBQU8sVUFBRSxVQUFRO0FBQUEsZUFBVSxHQUFOO0FBQVMsWUFBRyxBQUFPLE1BQVA7QUFBUyxnQkFBTSxNQUFNLEVBQUU7QUFBTSxXQUFHLEdBQUU7QUFBQTtBQUFBO0FBQUksU0FBSSxJQUFFLEVBQUUsUUFBUSxhQUFZLEFBQU8sTUFBUDtBQUFVLFVBQUUsRUFBRSxZQUFXLEVBQUUsYUFBVyxNQUFLLEVBQUUsUUFBTSxLQUFJLEdBQUUsVUFDamYsTUFBSyxFQUFFLFlBQVUsT0FBTSxJQUFFO0FBQUUsZUFBRSxHQUFFLE1BQVc7QUFBQTtBQUFHLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFFLEdBQUcsR0FBRSxJQUFHLElBQUUsR0FBRyxHQUFFLEdBQUUsSUFBRyxHQUFHLEdBQUUsSUFBRyxJQUFFLE1BQUssSUFBRSxHQUFHLEdBQUUsSUFBRyxBQUFPLE1BQVAsUUFBVyxJQUFHLEdBQUUsR0FBRSxJQUFHLEdBQUcsR0FBRTtBQUFBO0FBQ3pJLGNBQVksR0FBRSxHQUFFO0FBQUMsUUFBRyxBQUFJLEVBQUUsUUFBTjtBQUFVLFNBQUcsR0FBRSxHQUFFO0FBQUE7QUFBUSxlQUFRLElBQUUsRUFBRSxRQUFPLEFBQU8sTUFBUCxRQUFVO0FBQUMsWUFBRyxBQUFJLEVBQUUsUUFBTixHQUFVO0FBQUMsYUFBRyxHQUFFLEdBQUU7QUFBRztBQUFBLG1CQUFjLEFBQUksRUFBRSxRQUFOLEdBQVU7QUFBQyxjQUFJLElBQUUsRUFBRTtBQUFVLGNBQUcsQUFBYSxPQUFPLEVBQUUsS0FBSyw0QkFBM0IsY0FBcUQsQUFBYSxPQUFPLEVBQUUscUJBQXRCLGNBQTBDLENBQU8sT0FBUCxRQUFXLENBQUMsR0FBRyxJQUFJLEtBQUk7QUFBQyxnQkFBRSxHQUFHLEdBQUU7QUFBRyxnQkFBSSxJQUFFLEdBQUcsR0FBRSxHQUFFO0FBQTRCLGdCQUF6QixHQUFHLEdBQUUsSUFBRyxJQUFFLE1BQUssSUFBRSxHQUFHLEdBQUUsSUFBTSxBQUFPLE1BQVA7QUFBUyxpQkFBRyxHQUFFLEdBQUUsSUFBRyxHQUFHLEdBQUU7QUFBQSxxQkFBVyxBQUFhLE9BQU8sRUFBRSxxQkFBdEIsY0FBMEMsQ0FBTyxPQUFQLFFBQVcsQ0FBQyxHQUFHLElBQUk7QUFBSSxrQkFBRztBQUFDLGtCQUFFLGtCQUFrQixHQUFFO0FBQUEsdUJBQVMsR0FBTjtBQUFBO0FBQVU7QUFBQTtBQUFBO0FBQU8sWUFBRSxFQUFFO0FBQUE7QUFBQTtBQUNwZCxjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBVSxJQUFPLE1BQVAsUUFBVSxFQUFFLE9BQU8sSUFBRyxJQUFFLE1BQUssRUFBRSxlQUFhLEVBQUUsaUJBQWUsR0FBRSxNQUFJLEtBQUksS0FBRSxPQUFLLEtBQUksQ0FBSSxNQUFKLEtBQU8sQUFBSSxNQUFKLEtBQVEsS0FBRSxjQUFZLEtBQUcsTUFBSSxNQUFJLEtBQUcsR0FBRyxHQUFFLEtBQUcsTUFBSSxJQUFHLEdBQUcsR0FBRTtBQUFBO0FBQUcsY0FBWSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsRUFBRTtBQUFVLElBQU8sTUFBUCxRQUFVLEVBQUUsT0FBTyxJQUFHLElBQUUsR0FBRSxBQUFJLE1BQUosS0FBUSxLQUFFLEVBQUUsTUFBSyxBQUFLLEtBQUUsTUFBUCxJQUFVLElBQUUsSUFBRSxBQUFLLEtBQUUsTUFBUCxJQUFVLElBQUUsQUFBSyxTQUFMLEtBQVUsSUFBRSxJQUFHLENBQUksT0FBSixLQUFTLE1BQUcsS0FBSSxJQUFFLEdBQUcsV0FBUyxDQUFDLEtBQUksQUFBSSxNQUFKLEtBQVEsS0FBRSxZQUFXLElBQUUsTUFBSyxJQUFFLEdBQUcsR0FBRSxJQUFHLEFBQU8sTUFBUCxRQUFXLElBQUcsR0FBRSxHQUFFLElBQUcsR0FBRyxHQUFFO0FBQUE7QUFBSSxNQUFJO0FBQzNaLE9BQUcsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQU0sUUFBRyxBQUFPLE1BQVA7QUFBUyxVQUFHLEVBQUUsa0JBQWdCLEVBQUUsZ0JBQWMsRUFBRTtBQUFRLGFBQUc7QUFBQSxlQUFXLEFBQUssS0FBRSxNQUFQO0FBQVUsYUFBRyxBQUFLLEdBQUUsUUFBTSxVQUFiO0FBQUEsV0FBOEI7QUFBTyxnQkFBTixLQUFHLElBQVUsRUFBRTtBQUFBLGVBQVU7QUFBRSxlQUFHLElBQUc7QUFBSztBQUFBLGVBQVc7QUFBRSxlQUFHO0FBQUc7QUFBQSxlQUFXO0FBQUUsZUFBRyxFQUFFLFNBQU8sR0FBRztBQUFHO0FBQUEsZUFBVztBQUFFLGVBQUcsR0FBRSxFQUFFLFVBQVU7QUFBZTtBQUFBLGVBQVc7QUFBRyxnQkFBRSxFQUFFLGNBQWM7QUFBTSxnQkFBSSxJQUFFLEVBQUUsS0FBSztBQUFTLGNBQUUsSUFBRyxFQUFFLGdCQUFlLEVBQUUsZ0JBQWM7QUFBRTtBQUFBLGVBQVc7QUFBRyxnQkFBRyxBQUFPLEVBQUUsa0JBQVQ7QUFBd0IscUJBQUcsQUFBSyxLQUFFLEVBQUUsTUFBTSxlQUFmLElBQWtDLEdBQUcsR0FBRSxHQUFFLEtBQUcsR0FBRSxHQUFFLEVBQUUsVUFBUSxJQUFHLElBQUUsR0FBRyxHQUFFLEdBQUUsSUFBVSxBQUMzZixNQUQyZixPQUN6ZixFQUFFLFVBQVE7QUFBSyxjQUFFLEdBQUUsRUFBRSxVQUFRO0FBQUc7QUFBQSxlQUFXO0FBQTBCLGdCQUF2QixJQUFFLEFBQUssS0FBRSxFQUFFLGVBQVQsR0FBd0IsQUFBSyxHQUFFLFFBQU0sT0FBYixHQUFpQjtBQUFDLGtCQUFHO0FBQUUsdUJBQU8sR0FBRyxHQUFFLEdBQUU7QUFBRyxnQkFBRSxTQUFPO0FBQUE7QUFBK0YsZ0JBQTVGLElBQUUsRUFBRSxlQUFjLEFBQU8sTUFBUCxRQUFXLEdBQUUsWUFBVSxNQUFLLEVBQUUsT0FBSyxNQUFLLEVBQUUsYUFBVyxPQUFNLEVBQUUsR0FBRSxFQUFFLFVBQVk7QUFBRTtBQUFXLG1CQUFPO0FBQUEsZUFBVTtBQUFBLGVBQVE7QUFBRyxtQkFBTyxFQUFFLFFBQU0sR0FBRSxHQUFHLEdBQUUsR0FBRTtBQUFBO0FBQUcsZUFBTyxHQUFHLEdBQUUsR0FBRTtBQUFBO0FBQUE7QUFBUSxXQUFHO0FBQWEsWUFBVixFQUFFLFFBQU0sR0FBUyxFQUFFO0FBQUEsV0FBVTtBQUErSSxZQUE3SSxJQUFFLEVBQUUsTUFBSyxBQUFPLE1BQVAsUUFBVyxHQUFFLFlBQVUsTUFBSyxFQUFFLFlBQVUsTUFBSyxFQUFFLFNBQU8sSUFBRyxJQUFFLEVBQUUsY0FBYSxJQUFFLEdBQUcsR0FBRSxFQUFFLFVBQVMsR0FBRyxHQUFFLElBQUcsSUFBRSxHQUFHLE1BQUssR0FBRSxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsU0FBTyxHQUFLLEFBQzVlLE9BQU8sS0FEcWUsWUFDbGUsQUFBTyxNQUFQLFFBQVUsQUFBYSxPQUFPLEVBQUUsVUFBdEIsY0FBOEIsQUFBUyxFQUFFLGFBQVgsUUFBb0I7QUFBaUQsY0FBaEQsRUFBRSxNQUFJLEdBQUUsRUFBRSxnQkFBYyxNQUFLLEVBQUUsY0FBWSxNQUFRLEdBQUcsSUFBRztBQUFDLGdCQUFJLElBQUU7QUFBRyxlQUFHO0FBQUE7QUFBUSxnQkFBRTtBQUFHLFlBQUUsZ0JBQWMsQUFBTyxFQUFFLFVBQVQsUUFBZ0IsQUFBUyxFQUFFLFVBQVgsU0FBaUIsRUFBRSxRQUFNLE1BQUssR0FBRztBQUFHLGNBQUksSUFBRSxFQUFFO0FBQXlCLFVBQWEsT0FBTyxLQUFwQixjQUF1QixHQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsRUFBRSxVQUFRLElBQUcsRUFBRSxZQUFVLEdBQUUsRUFBRSxrQkFBZ0IsR0FBRSxHQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsSUFBRSxHQUFHLE1BQUssR0FBRSxHQUFFLElBQUcsR0FBRTtBQUFBO0FBQVEsWUFBRSxNQUFJLEdBQUUsR0FBRyxNQUFLLEdBQUUsR0FBRSxJQUFHLElBQUUsRUFBRTtBQUFNLGVBQU87QUFBQSxXQUFPO0FBQUcsWUFBRSxFQUFFO0FBQVksV0FBRTtBQUNoWCxrQkFEaVgsQUFBTyxNQUFQLFFBQVcsR0FBRSxZQUFVLE1BQUssRUFBRSxZQUFVLE1BQUssRUFBRSxTQUFPLElBQ25mLElBQUUsRUFBRSxjQUFhLElBQUUsRUFBRSxPQUFNLElBQUUsRUFBRSxFQUFFLFdBQVUsRUFBRSxPQUFLLEdBQUUsSUFBRSxFQUFFLE1BQUksR0FBRyxJQUFHLElBQUUsR0FBRyxHQUFFLElBQVU7QUFBQSxpQkFBUTtBQUFFLGtCQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRTtBQUFHO0FBQUEsaUJBQWE7QUFBRSxrQkFBRSxHQUFHLE1BQUssR0FBRSxHQUFFLEdBQUU7QUFBRztBQUFBLGlCQUFhO0FBQUcsa0JBQUUsR0FBRyxNQUFLLEdBQUUsR0FBRSxHQUFFO0FBQUc7QUFBQSxpQkFBYTtBQUFHLGtCQUFFLEdBQUcsTUFBSyxHQUFFLEdBQUUsR0FBRyxFQUFFLE1BQUssSUFBRyxHQUFFO0FBQUc7QUFBQTtBQUFRLGdCQUFNLE1BQU0sRUFBRSxLQUFJLEdBQUU7QUFBQTtBQUFNLGVBQU87QUFBQSxXQUFPO0FBQUUsZUFBTyxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsY0FBYSxJQUFFLEVBQUUsZ0JBQWMsSUFBRSxJQUFFLEdBQUcsR0FBRSxJQUFHLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFBLFdBQVE7QUFBRSxlQUFPLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxjQUFhLElBQUUsRUFBRSxnQkFBYyxJQUFFLElBQUUsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUEsV0FBUTtBQUF3QixZQUF0QixHQUFHLElBQUcsSUFBRSxFQUFFLGFBQWUsQUFBTyxNQUFQLFFBQVUsQUFBTyxNQUFQO0FBQVMsZ0JBQU0sTUFBTSxFQUFFO0FBQzNZLFlBQTlHLElBQUUsRUFBRSxjQUFhLElBQUUsRUFBRSxlQUFjLElBQUUsQUFBTyxNQUFQLE9BQVMsRUFBRSxVQUFRLE1BQUssR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLEdBQUUsTUFBSyxJQUFHLElBQUUsRUFBRSxjQUFjLFNBQVcsTUFBSTtBQUFFLGdCQUFLLElBQUUsR0FBRyxHQUFFLEdBQUU7QUFBQSxhQUFPO0FBQXVGLGNBQXRGLElBQUUsRUFBRSxXQUFhLEtBQUUsRUFBRSxZQUFRLE1BQUcsR0FBRyxFQUFFLFVBQVUsY0FBYyxhQUFZLEtBQUcsR0FBRSxJQUFFLEtBQUcsS0FBTSxHQUFFO0FBQXFDLGdCQUFwQyxJQUFFLEVBQUUsaUNBQW1DLEFBQU0sS0FBTjtBQUFRLG1CQUFJLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxLQUFHO0FBQUUsb0JBQUUsRUFBRSxJQUFHLEVBQUUsZ0NBQThCLEVBQUUsSUFBRSxJQUFHLEdBQUcsS0FBSztBQUFvQixpQkFBakIsSUFBRSxHQUFHLEdBQUUsTUFBSyxHQUFFLElBQU8sRUFBRSxRQUFNLEdBQUU7QUFBRyxnQkFBRSxRQUFNLEVBQUUsUUFBTSxLQUFHLE1BQUssSUFBRSxFQUFFO0FBQUE7QUFBYSxlQUFHLEdBQUUsR0FBRSxHQUFFLElBQUc7QUFBSyxjQUFFLEVBQUU7QUFBQTtBQUFNLGVBQU87QUFBQSxXQUFPO0FBQUUsZUFBTyxHQUFHLElBQUcsQUFBTyxNQUFQLFFBQzVlLEdBQUcsSUFBRyxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsY0FBYSxJQUFFLEFBQU8sTUFBUCxPQUFTLEVBQUUsZ0JBQWMsTUFBSyxJQUFFLEVBQUUsVUFBUyxHQUFHLEdBQUUsS0FBRyxJQUFFLE9BQUssQUFBTyxNQUFQLFFBQVUsR0FBRyxHQUFFLE1BQUssR0FBRSxTQUFPLEtBQUksR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUU7QUFBQSxXQUFXO0FBQUUsZUFBTyxBQUFPLE1BQVAsUUFBVSxHQUFHLElBQUc7QUFBQSxXQUFVO0FBQUcsZUFBTyxHQUFHLEdBQUUsR0FBRTtBQUFBLFdBQVE7QUFBRSxlQUFPLEdBQUcsR0FBRSxFQUFFLFVBQVUsZ0JBQWUsSUFBRSxFQUFFLGNBQWEsQUFBTyxNQUFQLE9BQVMsRUFBRSxRQUFNLEdBQUcsR0FBRSxNQUFLLEdBQUUsS0FBRyxHQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsRUFBRTtBQUFBLFdBQVc7QUFBRyxlQUFPLElBQUUsRUFBRSxNQUFLLElBQUUsRUFBRSxjQUFhLElBQUUsRUFBRSxnQkFBYyxJQUFFLElBQUUsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUEsV0FBUTtBQUFFLGVBQU8sR0FBRyxHQUFFLEdBQUUsRUFBRSxjQUFhLElBQUcsRUFBRTtBQUFBLFdBQVc7QUFBRSxlQUFPLEdBQUcsR0FBRSxHQUFFLEVBQUUsYUFBYSxVQUNoZixJQUFHLEVBQUU7QUFBQSxXQUFXO0FBQUcsZUFBTyxHQUFHLEdBQUUsR0FBRSxFQUFFLGFBQWEsVUFBUyxJQUFHLEVBQUU7QUFBQSxXQUFXO0FBQUcsV0FBRTtBQUFDLGNBQUUsRUFBRSxLQUFLLFVBQVMsSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLGVBQWMsSUFBRSxFQUFFO0FBQU0sY0FBSSxJQUFFLEVBQUUsS0FBSztBQUFpRCxjQUF4QyxFQUFFLElBQUcsRUFBRSxnQkFBZSxFQUFFLGdCQUFjLEdBQUssQUFBTyxNQUFQO0FBQVMsZ0JBQUcsSUFBRSxFQUFFLE9BQU0sSUFBRSxHQUFHLEdBQUUsS0FBRyxJQUFHLENBQWEsT0FBTyxFQUFFLHlCQUF0QixhQUE0QyxFQUFFLHNCQUFzQixHQUFFLEtBQUcsY0FBWSxHQUFFLEFBQUksTUFBSjtBQUFPLGtCQUFHLEVBQUUsYUFBVyxFQUFFLFlBQVUsQ0FBQyxFQUFFLFNBQVE7QUFBQyxvQkFBRSxHQUFHLEdBQUUsR0FBRTtBQUFHO0FBQUE7QUFBQTtBQUFjLG1CQUFJLElBQUUsRUFBRSxPQUFNLEFBQU8sTUFBUCxRQUFXLEdBQUUsU0FBTyxJQUFHLEFBQU8sTUFBUCxRQUFVO0FBQUMsb0JBQUksSUFBRSxFQUFFO0FBQWEsb0JBQUcsQUFBTyxNQUFQLE1BQVM7QUFBQyxzQkFBRSxFQUFFO0FBQU0sMkJBQVEsSUFDdGYsRUFBRSxjQUFhLEFBQU8sTUFBUCxRQUFVO0FBQUMsd0JBQUcsRUFBRSxZQUFVLEtBQUcsQUFBSyxHQUFFLGVBQWEsTUFBcEIsR0FBdUI7QUFBQyxzQkFBSSxFQUFFLFFBQU4sS0FBWSxLQUFFLEdBQUcsSUFBRyxJQUFFLENBQUMsSUFBRyxFQUFFLE1BQUksR0FBRSxHQUFHLEdBQUUsS0FBSSxFQUFFLFNBQU8sR0FBRSxJQUFFLEVBQUUsV0FBVSxBQUFPLE1BQVAsUUFBVyxHQUFFLFNBQU8sSUFBRyxHQUFHLEVBQUUsUUFBTyxJQUFHLEVBQUUsU0FBTztBQUFFO0FBQUE7QUFBTSx3QkFBRSxFQUFFO0FBQUE7QUFBQTtBQUFXLHNCQUFFLEFBQUssRUFBRSxRQUFQLE1BQVcsRUFBRSxTQUFPLEVBQUUsT0FBSyxPQUFhLEVBQUU7QUFBTSxvQkFBRyxBQUFPLE1BQVA7QUFBUyxvQkFBRSxTQUFPO0FBQUE7QUFBTyx1QkFBSSxJQUFFLEdBQUUsQUFBTyxNQUFQLFFBQVU7QUFBQyx3QkFBRyxNQUFJLEdBQUU7QUFBQywwQkFBRTtBQUFLO0FBQUE7QUFBa0Isd0JBQVosSUFBRSxFQUFFLFNBQVcsQUFBTyxNQUFQLE1BQVM7QUFBQyx3QkFBRSxTQUFPLEVBQUUsUUFBTyxJQUFFO0FBQUU7QUFBQTtBQUFNLHdCQUFFLEVBQUU7QUFBQTtBQUFPLG9CQUFFO0FBQUE7QUFBRSxhQUFHLEdBQUUsR0FBRSxFQUFFLFVBQVMsSUFBRyxJQUFFLEVBQUU7QUFBQTtBQUFNLGVBQU87QUFBQSxXQUFPO0FBQUUsZUFBTyxJQUFFLEVBQUUsTUFBSyxJQUFFLEVBQUUsY0FBYSxJQUFFLEVBQUUsVUFBUyxHQUFHLEdBQUUsSUFBRyxJQUFFLEdBQUcsR0FDcGYsRUFBRSx3QkFBdUIsSUFBRSxFQUFFLElBQUcsRUFBRSxTQUFPLEdBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUU7QUFBQSxXQUFXO0FBQUcsZUFBTyxJQUFFLEVBQUUsTUFBSyxJQUFFLEdBQUcsR0FBRSxFQUFFLGVBQWMsSUFBRSxHQUFHLEVBQUUsTUFBSyxJQUFHLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUEsV0FBUTtBQUFHLGVBQU8sR0FBRyxHQUFFLEdBQUUsRUFBRSxNQUFLLEVBQUUsY0FBYSxHQUFFO0FBQUEsV0FBUTtBQUFHLGVBQU8sSUFBRSxFQUFFLE1BQUssSUFBRSxFQUFFLGNBQWEsSUFBRSxFQUFFLGdCQUFjLElBQUUsSUFBRSxHQUFHLEdBQUUsSUFBRyxBQUFPLE1BQVAsUUFBVyxHQUFFLFlBQVUsTUFBSyxFQUFFLFlBQVUsTUFBSyxFQUFFLFNBQU8sSUFBRyxFQUFFLE1BQUksR0FBRSxHQUFHLEtBQUksS0FBRSxJQUFHLEdBQUcsTUFBSSxJQUFFLElBQUcsR0FBRyxHQUFFLElBQUcsR0FBRyxHQUFFLEdBQUUsSUFBRyxHQUFHLEdBQUUsR0FBRSxHQUFFLElBQUcsR0FBRyxNQUFLLEdBQUUsR0FBRSxJQUFHLEdBQUU7QUFBQSxXQUFRO0FBQUcsZUFBTyxHQUFHLEdBQUUsR0FBRTtBQUFBLFdBQVE7QUFBRyxlQUFPLEdBQUcsR0FBRSxHQUFFO0FBQUEsV0FBUTtBQUFHLGVBQU8sR0FBRyxHQUFFLEdBQUU7QUFBQTtBQUFHLFVBQU0sTUFBTSxFQUFFLEtBQUksRUFBRTtBQUFBO0FBQzdlLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFNBQUssTUFBSSxHQUFFLEtBQUssTUFBSSxHQUFFLEtBQUssVUFBUSxLQUFLLFFBQU0sS0FBSyxTQUFPLEtBQUssWUFBVSxLQUFLLE9BQUssS0FBSyxjQUFZLE1BQUssS0FBSyxRQUFNLEdBQUUsS0FBSyxNQUFJLE1BQUssS0FBSyxlQUFhLEdBQUUsS0FBSyxlQUFhLEtBQUssZ0JBQWMsS0FBSyxjQUFZLEtBQUssZ0JBQWMsTUFBSyxLQUFLLE9BQUssR0FBRSxLQUFLLFFBQU0sR0FBRSxLQUFLLGFBQVcsS0FBSyxjQUFZLEtBQUssYUFBVyxNQUFLLEtBQUssYUFBVyxLQUFLLFFBQU0sR0FBRSxLQUFLLFlBQVU7QUFBQTtBQUFLLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFdBQU8sSUFBSSxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUE7QUFBRyxjQUFZLEdBQUU7QUFBQyxlQUFFLEVBQUUsV0FBZ0IsQ0FBRSxFQUFDLEtBQUcsQ0FBQyxFQUFFO0FBQUE7QUFDcmQsY0FBWSxHQUFFO0FBQUMsUUFBRyxBQUFhLE9BQU8sS0FBcEI7QUFBc0IsYUFBTyxHQUFHLEtBQUcsSUFBRTtBQUFFLFFBQUcsQUFBbUIsS0FBUCxNQUFTO0FBQWMsVUFBYixJQUFFLEVBQUUsVUFBWSxNQUFJO0FBQUcsZUFBTztBQUFHLFVBQUcsTUFBSTtBQUFHLGVBQU87QUFBQTtBQUFHLFdBQU87QUFBQTtBQUM5SSxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFO0FBQVUsV0FBTyxNQUFQLE9BQVUsS0FBRSxHQUFHLEVBQUUsS0FBSSxHQUFFLEVBQUUsS0FBSSxFQUFFLE9BQU0sRUFBRSxjQUFZLEVBQUUsYUFBWSxFQUFFLE9BQUssRUFBRSxNQUFLLEVBQUUsWUFBVSxFQUFFLFdBQVUsRUFBRSxZQUFVLEdBQUUsRUFBRSxZQUFVLEtBQUksR0FBRSxlQUFhLEdBQUUsRUFBRSxPQUFLLEVBQUUsTUFBSyxFQUFFLFFBQU0sR0FBRSxFQUFFLGFBQVcsTUFBSyxFQUFFLGNBQVksTUFBSyxFQUFFLGFBQVcsT0FBTSxFQUFFLGFBQVcsRUFBRSxZQUFXLEVBQUUsUUFBTSxFQUFFLE9BQU0sRUFBRSxRQUFNLEVBQUUsT0FBTSxFQUFFLGdCQUFjLEVBQUUsZUFBYyxFQUFFLGdCQUFjLEVBQUUsZUFBYyxFQUFFLGNBQVksRUFBRSxhQUFZLElBQUUsRUFBRSxjQUFhLEVBQUUsZUFBYSxBQUFPLE1BQVAsT0FBUyxPQUFLLENBQUMsT0FBTSxFQUFFLE9BQU0sY0FBYSxFQUFFLGVBQzNlLEVBQUUsVUFBUSxFQUFFLFNBQVEsRUFBRSxRQUFNLEVBQUUsT0FBTSxFQUFFLE1BQUksRUFBRSxLQUFXO0FBQUE7QUFDdkQsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFNLFFBQUosSUFBRSxHQUFLLEFBQWEsT0FBTyxLQUFwQjtBQUFzQixTQUFHLE1BQUssS0FBRTtBQUFBLGFBQVcsQUFBVyxPQUFPLEtBQWxCO0FBQW9CLFVBQUU7QUFBQTtBQUFPO0FBQUUsZ0JBQU87QUFBQSxlQUFRO0FBQUcsbUJBQU8sR0FBRyxFQUFFLFVBQVMsR0FBRSxHQUFFO0FBQUEsZUFBUTtBQUFHLGdCQUFFLEdBQUUsS0FBRztBQUFHO0FBQUEsZUFBVztBQUFHLGdCQUFFLEdBQUUsS0FBRztBQUFFO0FBQUEsZUFBVztBQUFHLG1CQUFPLElBQUUsR0FBRyxJQUFHLEdBQUUsR0FBRSxJQUFFLElBQUcsRUFBRSxjQUFZLElBQUcsRUFBRSxPQUFLLElBQUcsRUFBRSxRQUFNLEdBQUU7QUFBQSxlQUFPO0FBQUcsbUJBQU8sSUFBRSxHQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsRUFBRSxPQUFLLElBQUcsRUFBRSxjQUFZLElBQUcsRUFBRSxRQUFNLEdBQUU7QUFBQSxlQUFPO0FBQUcsbUJBQU8sSUFBRSxHQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsRUFBRSxjQUFZLElBQUcsRUFBRSxRQUFNLEdBQUU7QUFBQSxlQUFPO0FBQUcsbUJBQU8sR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFBLGVBQVE7QUFBRyxtQkFBTyxJQUFFLEdBQUcsSUFBRyxHQUFFLEdBQUUsSUFBRyxFQUFFLGNBQVksSUFBRyxFQUFFLFFBQU0sR0FBRTtBQUFBO0FBQVUsZ0JBQUcsQUFDdmYsT0FBTyxLQURnZixZQUM3ZSxBQUFPLE1BQVA7QUFBUyxzQkFBTyxFQUFFO0FBQUEscUJBQWU7QUFBRyxzQkFBRTtBQUFHO0FBQUEscUJBQWE7QUFBRyxzQkFBRTtBQUFFO0FBQUEscUJBQWE7QUFBRyxzQkFBRTtBQUFHO0FBQUEscUJBQWE7QUFBRyxzQkFBRTtBQUFHO0FBQUEscUJBQWE7QUFBRyxzQkFBRSxJQUFHLElBQUU7QUFBSztBQUFBLHFCQUFhO0FBQUcsc0JBQUU7QUFBRztBQUFBO0FBQVEsa0JBQU0sTUFBTSxFQUFFLEtBQUksQUFBTSxLQUFOLE9BQVEsSUFBRSxPQUFPLEdBQUU7QUFBQTtBQUFNLGVBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxJQUFHLEVBQUUsY0FBWSxHQUFFLEVBQUUsT0FBSyxHQUFFLEVBQUUsUUFBTSxHQUFTO0FBQUE7QUFBRSxjQUFZLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxlQUFFLEdBQUcsR0FBRSxHQUFFLEdBQUUsSUFBRyxFQUFFLFFBQU0sR0FBUztBQUFBO0FBQUUsY0FBWSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsZUFBRSxHQUFHLElBQUcsR0FBRSxHQUFFLElBQUcsRUFBRSxjQUFZLElBQUcsRUFBRSxRQUFNLEdBQVM7QUFBQTtBQUFFLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxlQUFFLEdBQUcsR0FBRSxHQUFFLE1BQUssSUFBRyxFQUFFLFFBQU0sR0FBUztBQUFBO0FBQ2xjLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxlQUFFLEdBQUcsR0FBRSxBQUFPLEVBQUUsYUFBVCxPQUFrQixFQUFFLFdBQVMsSUFBRyxFQUFFLEtBQUksSUFBRyxFQUFFLFFBQU0sR0FBRSxFQUFFLFlBQVUsQ0FBQyxlQUFjLEVBQUUsZUFBYyxpQkFBZ0IsTUFBSyxnQkFBZSxFQUFFLGlCQUF1QjtBQUFBO0FBQ3JMLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxTQUFLLE1BQUksR0FBRSxLQUFLLGdCQUFjLEdBQUUsS0FBSyxlQUFhLEtBQUssWUFBVSxLQUFLLFVBQVEsS0FBSyxrQkFBZ0IsTUFBSyxLQUFLLGdCQUFjLElBQUcsS0FBSyxpQkFBZSxLQUFLLFVBQVEsTUFBSyxLQUFLLFVBQVEsR0FBRSxLQUFLLGVBQWEsTUFBSyxLQUFLLG1CQUFpQixHQUFFLEtBQUssYUFBVyxHQUFHLElBQUcsS0FBSyxrQkFBZ0IsR0FBRyxLQUFJLEtBQUssaUJBQWUsS0FBSyxnQkFBYyxLQUFLLG1CQUFpQixLQUFLLGVBQWEsS0FBSyxjQUFZLEtBQUssaUJBQWUsS0FBSyxlQUFhLEdBQUUsS0FBSyxnQkFBYyxHQUFHLElBQUcsS0FBSyxrQ0FBZ0M7QUFBQTtBQUM3ZSxjQUFZLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLElBQUUsVUFBVSxVQUFRLEFBQVMsVUFBVSxPQUFuQixTQUFzQixVQUFVLEtBQUc7QUFBSyxXQUFNLENBQUMsVUFBUyxJQUFHLEtBQUksQUFBTSxLQUFOLE9BQVEsT0FBSyxLQUFHLEdBQUUsVUFBUyxHQUFFLGVBQWMsR0FBRSxnQkFBZTtBQUFBO0FBQ3hLLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxFQUFFLFNBQVEsSUFBRSxNQUFLLElBQUUsR0FBRztBQUFHO0FBQUUsVUFBRyxHQUFFO0FBQUMsWUFBRSxFQUFFO0FBQWdCLFdBQUU7QUFBQyxjQUFHLEdBQUcsT0FBSyxLQUFHLEFBQUksRUFBRSxRQUFOO0FBQVUsa0JBQU0sTUFBTSxFQUFFO0FBQU0sY0FBSSxJQUFFO0FBQUUsYUFBRTtBQUFDLG9CQUFPLEVBQUU7QUFBQSxtQkFBVTtBQUFFLG9CQUFFLEVBQUUsVUFBVTtBQUFRO0FBQUEsbUJBQWE7QUFBRSxvQkFBRyxHQUFHLEVBQUUsT0FBTTtBQUFDLHNCQUFFLEVBQUUsVUFBVTtBQUEwQztBQUFBO0FBQUE7QUFBUyxnQkFBRSxFQUFFO0FBQUEsbUJBQWEsQUFBTyxNQUFQO0FBQVUsZ0JBQU0sTUFBTSxFQUFFO0FBQUE7QUFBTyxZQUFHLEFBQUksRUFBRSxRQUFOLEdBQVU7QUFBQyxjQUFJLElBQUUsRUFBRTtBQUFLLGNBQUcsR0FBRyxJQUFHO0FBQUMsZ0JBQUUsR0FBRyxHQUFFLEdBQUU7QUFBRztBQUFBO0FBQUE7QUFBUyxZQUFFO0FBQUE7QUFBTyxZQUFFO0FBQUcsV0FBTyxFQUFFLFlBQVQsT0FBaUIsRUFBRSxVQUFRLElBQUUsRUFBRSxpQkFBZSxHQUFFLElBQUUsR0FBRyxHQUFFLElBQUcsRUFBRSxVQUFRLENBQUMsU0FBUSxJQUFHLElBQUUsQUFBUyxNQUFULFNBQVcsT0FBSyxHQUFFLEFBQ2hmLE1BRGdmLFFBQzVlLEdBQUUsV0FBUyxJQUFHLEdBQUcsR0FBRSxJQUFHLEdBQUcsR0FBRSxHQUFFLElBQVU7QUFBQTtBQUFFLGNBQVksR0FBRTtBQUFhLFFBQVosSUFBRSxFQUFFLFNBQVcsQ0FBQyxFQUFFO0FBQU0sYUFBTztBQUFLLFlBQU8sRUFBRSxNQUFNO0FBQUEsV0FBVTtBQUFFLGVBQU8sRUFBRSxNQUFNO0FBQUE7QUFBa0IsZUFBTyxFQUFFLE1BQU07QUFBQTtBQUFBO0FBQVcsY0FBWSxHQUFFLEdBQUU7QUFBbUIsUUFBbEIsSUFBRSxFQUFFLGVBQWlCLEFBQU8sTUFBUCxRQUFVLEFBQU8sRUFBRSxlQUFULE1BQW9CO0FBQUMsVUFBSSxJQUFFLEVBQUU7QUFBVSxRQUFFLFlBQVUsQUFBSSxNQUFKLEtBQU8sSUFBRSxJQUFFLElBQUU7QUFBQTtBQUFBO0FBQUcsY0FBWSxHQUFFLEdBQUU7QUFBQyxPQUFHLEdBQUUsSUFBSSxLQUFFLEVBQUUsY0FBWSxHQUFHLEdBQUU7QUFBQTtBQUFHLGdCQUFhO0FBQUMsV0FBTztBQUFBO0FBQ2hYLGNBQVksR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUUsQUFBTSxLQUFOLFFBQVMsQUFBTSxFQUFFLG9CQUFSLFFBQTBCLEVBQUUsaUJBQWlCLGtCQUFnQjtBQUFpSyxRQUE1SixJQUFFLElBQUksR0FBRyxHQUFFLEdBQUUsQUFBTSxLQUFOLFFBQVMsQUFBSyxFQUFFLFlBQVAsS0FBZ0IsSUFBRSxHQUFHLEdBQUUsTUFBSyxNQUFLLEFBQUksTUFBSixJQUFNLElBQUUsQUFBSSxNQUFKLElBQU0sSUFBRSxJQUFHLEVBQUUsVUFBUSxHQUFFLEVBQUUsWUFBVSxHQUFFLEdBQUcsSUFBRyxFQUFFLE1BQUksRUFBRSxTQUFRLEdBQUcsQUFBSSxFQUFFLGFBQU4sSUFBZSxFQUFFLGFBQVcsSUFBTTtBQUFFLFdBQUksSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEtBQUk7QUFBQyxZQUFFLEVBQUU7QUFBRyxZQUFJLElBQUUsRUFBRTtBQUFZLFlBQUUsRUFBRSxFQUFFLFVBQVMsQUFBTSxFQUFFLG1DQUFSLE9BQXdDLEVBQUUsa0NBQWdDLENBQUMsR0FBRSxLQUFHLEVBQUUsZ0NBQWdDLEtBQUssR0FBRTtBQUFBO0FBQUcsU0FBSyxnQkFBYztBQUFBO0FBQ3RkLEtBQUcsVUFBVSxTQUFPLFNBQVMsR0FBRTtBQUFDLE9BQUcsR0FBRSxLQUFLLGVBQWMsTUFBSztBQUFBO0FBQU8sS0FBRyxVQUFVLFVBQVEsV0FBVTtBQUFDLFFBQUksSUFBRSxLQUFLLGVBQWMsSUFBRSxFQUFFO0FBQWMsT0FBRyxNQUFLLEdBQUUsTUFBSyxXQUFVO0FBQUMsUUFBRSxNQUFJO0FBQUE7QUFBQTtBQUFRLGNBQVksR0FBRTtBQUFDLFdBQU0sQ0FBRSxFQUFDLEtBQUcsQUFBSSxFQUFFLGFBQU4sS0FBZ0IsQUFBSSxFQUFFLGFBQU4sS0FBZ0IsQUFBSyxFQUFFLGFBQVAsTUFBa0IsQ0FBSSxFQUFFLGFBQU4sS0FBZ0IsQUFBaUMsRUFBRSxjQUFuQztBQUFBO0FBQ3BSLGNBQVksR0FBRSxHQUFFO0FBQXdILFFBQXZILEtBQUksS0FBRSxJQUFFLEFBQUksRUFBRSxhQUFOLElBQWUsRUFBRSxrQkFBZ0IsRUFBRSxhQUFXLE1BQUssSUFBRSxDQUFFLEVBQUMsS0FBRyxBQUFJLEVBQUUsYUFBTixLQUFnQixDQUFDLEVBQUUsYUFBYSxxQkFBdUIsQ0FBQztBQUFFLGVBQVEsR0FBRSxJQUFFLEVBQUU7QUFBVyxVQUFFLFlBQVk7QUFBRyxXQUFPLElBQUksR0FBRyxHQUFFLEdBQUUsSUFBRSxDQUFDLFNBQVEsTUFBSTtBQUFBO0FBQ3pOLGNBQVksR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFLEVBQUU7QUFBb0IsUUFBRyxHQUFFO0FBQUMsVUFBSSxJQUFFLEVBQUU7QUFBYyxVQUFHLEFBQWEsT0FBTyxLQUFwQixZQUFzQjtBQUFDLFlBQUksSUFBRTtBQUFFLFlBQUUsV0FBVTtBQUFDLGNBQUksS0FBRSxHQUFHO0FBQUcsWUFBRSxLQUFLO0FBQUE7QUFBQTtBQUFJLFNBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQSxXQUFPO0FBQW1ELFVBQWxELElBQUUsRUFBRSxzQkFBb0IsR0FBRyxHQUFFLElBQUcsSUFBRSxFQUFFLGVBQWlCLEFBQWEsT0FBTyxLQUFwQixZQUFzQjtBQUFDLFlBQUksSUFBRTtBQUFFLFlBQUUsV0FBVTtBQUFDLGNBQUksS0FBRSxHQUFHO0FBQUcsWUFBRSxLQUFLO0FBQUE7QUFBQTtBQUFJLFNBQUcsV0FBVTtBQUFDLFdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQTtBQUFBO0FBQUssV0FBTyxHQUFHO0FBQUE7QUFBRyxPQUFHLFNBQVMsR0FBRTtBQUFDLFFBQUcsQUFBSyxFQUFFLFFBQVAsSUFBVztBQUFDLFVBQUksSUFBRTtBQUFLLFNBQUcsR0FBRSxHQUFFLElBQUcsR0FBRyxHQUFFO0FBQUE7QUFBQTtBQUFLLE9BQUcsU0FBUyxHQUFFO0FBQUMsUUFBRyxBQUFLLEVBQUUsUUFBUCxJQUFXO0FBQUMsVUFBSSxJQUFFO0FBQUssU0FBRyxHQUFFLFVBQVMsSUFBRyxHQUFHLEdBQUU7QUFBQTtBQUFBO0FBQ25jLE9BQUcsU0FBUyxHQUFFO0FBQUMsUUFBRyxBQUFLLEVBQUUsUUFBUCxJQUFXO0FBQUMsVUFBSSxJQUFFLE1BQUssSUFBRSxHQUFHO0FBQUcsU0FBRyxHQUFFLEdBQUUsSUFBRyxHQUFHLEdBQUU7QUFBQTtBQUFBO0FBQUssT0FBRyxTQUFTLEdBQUUsR0FBRTtBQUFDLFdBQU87QUFBQTtBQUM3RixPQUFHLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxZQUFPO0FBQUEsV0FBUTtBQUF5QixZQUFqQixHQUFHLEdBQUUsSUFBRyxJQUFFLEVBQUUsTUFBUSxBQUFVLEVBQUUsU0FBWixXQUFrQixBQUFNLEtBQU4sTUFBUTtBQUFDLGVBQUksSUFBRSxHQUFFLEVBQUU7QUFBWSxnQkFBRSxFQUFFO0FBQXNGLGVBQTNFLElBQUUsRUFBRSxpQkFBaUIsZ0JBQWMsS0FBSyxVQUFVLEtBQUcsS0FBRyxvQkFBdUIsSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEtBQUk7QUFBQyxnQkFBSSxJQUFFLEVBQUU7QUFBRyxnQkFBRyxNQUFJLEtBQUcsRUFBRSxTQUFPLEVBQUUsTUFBSztBQUFDLGtCQUFJLElBQUUsR0FBRztBQUFHLGtCQUFHLENBQUM7QUFBRSxzQkFBTSxNQUFNLEVBQUU7QUFBSyxpQkFBRyxJQUFHLEdBQUcsR0FBRTtBQUFBO0FBQUE7QUFBQTtBQUFLO0FBQUEsV0FBVztBQUFXLFdBQUcsR0FBRTtBQUFHO0FBQUEsV0FBVztBQUFTLFlBQUUsRUFBRSxPQUFNLEFBQU0sS0FBTixRQUFTLEdBQUcsR0FBRSxDQUFDLENBQUMsRUFBRSxVQUFTLEdBQUU7QUFBQTtBQUFBO0FBQU0sT0FBRztBQUM5WixPQUFHLFNBQVMsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBSSxJQUFFO0FBQUUsU0FBRztBQUFFLFFBQUc7QUFBQyxhQUFPLEdBQUcsSUFBRyxFQUFFLEtBQUssTUFBSyxHQUFFLEdBQUUsR0FBRTtBQUFBLGNBQUk7QUFBUSxVQUFFLEdBQUUsQUFBSSxNQUFKLEtBQVEsT0FBSztBQUFBO0FBQUE7QUFBUSxPQUFHLFdBQVU7QUFBQyxJQUFLLEtBQUUsT0FBUCxLQUFhLE9BQUs7QUFBQTtBQUFPLE9BQUcsU0FBUyxHQUFFLEdBQUU7QUFBQyxRQUFJLElBQUU7QUFBRSxTQUFHO0FBQUUsUUFBRztBQUFDLGFBQU8sRUFBRTtBQUFBLGNBQUc7QUFBUSxVQUFFLEdBQUUsQUFBSSxNQUFKLEtBQVEsT0FBSztBQUFBO0FBQUE7QUFBUSxjQUFZLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRSxJQUFFLFVBQVUsVUFBUSxBQUFTLFVBQVUsT0FBbkIsU0FBc0IsVUFBVSxLQUFHO0FBQUssUUFBRyxDQUFDLEdBQUc7QUFBRyxZQUFNLE1BQU0sRUFBRTtBQUFNLFdBQU8sR0FBRyxHQUFFLEdBQUUsTUFBSztBQUFBO0FBQUcsTUFBSSxLQUFHLENBQUMsUUFBTyxDQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLENBQUMsU0FBUSxPQUFNLEtBQUcsQ0FBQyx5QkFBd0IsSUFBRyxZQUFXLEdBQUUsU0FBUSxVQUFTLHFCQUFvQixjQUN2ZSxLQUFHLENBQUMsWUFBVyxHQUFHLFlBQVcsU0FBUSxHQUFHLFNBQVEscUJBQW9CLEdBQUcscUJBQW9CLGdCQUFlLEdBQUcsZ0JBQWUsbUJBQWtCLE1BQUssNkJBQTRCLE1BQUssNkJBQTRCLE1BQUssZUFBYyxNQUFLLHlCQUF3QixNQUFLLHlCQUF3QixNQUFLLG9CQUFtQixNQUFLLGdCQUFlLE1BQUssc0JBQXFCLEdBQUcsd0JBQXVCLHlCQUF3QixTQUFTLEdBQUU7QUFBQyxlQUFFLEdBQUcsSUFBVSxBQUFPLE1BQVAsT0FBUyxPQUFLLEVBQUU7QUFBQSxLQUFXLHlCQUF3QixHQUFHLDJCQUMxZSxJQUFHLDZCQUE0QixNQUFLLGlCQUFnQixNQUFLLGNBQWEsTUFBSyxtQkFBa0IsTUFBSyxpQkFBZ0I7QUFBTSxNQUFHLEFBQWMsT0FBTyxrQ0FBckIsZUFBeUQsTUFBRyxnQ0FBa0MsQ0FBQyxHQUFHLGNBQVksR0FBRztBQUFjLFFBQUc7QUFBQyxXQUFHLEdBQUcsT0FBTyxLQUFJLEtBQUc7QUFBQSxhQUFTLEdBQU47QUFBQTtBQUFqRztBQUE0RyxVQUFRLHFEQUFtRDtBQUFHLFVBQVEsZUFBYTtBQUNuWCxVQUFRLGNBQVksU0FBUyxHQUFFO0FBQUMsUUFBRyxBQUFNLEtBQU47QUFBUSxhQUFPO0FBQUssUUFBRyxBQUFJLEVBQUUsYUFBTjtBQUFlLGFBQU87QUFBRSxRQUFJLElBQUUsRUFBRTtBQUFnQixRQUFHLEFBQVMsTUFBVDtBQUFZLFlBQUcsQUFBYSxPQUFPLEVBQUUsVUFBdEIsYUFBbUMsTUFBTSxFQUFFLFFBQVksTUFBTSxFQUFFLEtBQUksT0FBTyxLQUFLO0FBQU0sZUFBRSxHQUFHLElBQUcsSUFBRSxBQUFPLE1BQVAsT0FBUyxPQUFLLEVBQUUsV0FBaUI7QUFBQTtBQUFHLFVBQVEsWUFBVSxTQUFTLEdBQUUsR0FBRTtBQUFDLFFBQUksSUFBRTtBQUFFLFFBQUcsQUFBSyxLQUFFLE9BQVA7QUFBVyxhQUFPLEVBQUU7QUFBRyxTQUFHO0FBQUUsUUFBRztBQUFDLFVBQUc7QUFBRSxlQUFPLEdBQUcsSUFBRyxFQUFFLEtBQUssTUFBSztBQUFBLGNBQUk7QUFBUSxVQUFFLEdBQUU7QUFBQTtBQUFBO0FBQU8sVUFBUSxVQUFRLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxRQUFHLENBQUMsR0FBRztBQUFHLFlBQU0sTUFBTSxFQUFFO0FBQU0sV0FBTyxHQUFHLE1BQUssR0FBRSxHQUFFLElBQUc7QUFBQTtBQUNuZCxVQUFRLFNBQU8sU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLFFBQUcsQ0FBQyxHQUFHO0FBQUcsWUFBTSxNQUFNLEVBQUU7QUFBTSxXQUFPLEdBQUcsTUFBSyxHQUFFLEdBQUUsSUFBRztBQUFBO0FBQUksVUFBUSx5QkFBdUIsU0FBUyxHQUFFO0FBQUMsUUFBRyxDQUFDLEdBQUc7QUFBRyxZQUFNLE1BQU0sRUFBRTtBQUFLLFdBQU8sRUFBRSxzQkFBcUIsSUFBRyxXQUFVO0FBQUMsU0FBRyxNQUFLLE1BQUssR0FBRSxJQUFHLFdBQVU7QUFBQyxVQUFFLHNCQUFvQixNQUFLLEVBQUUsTUFBSTtBQUFBO0FBQUEsUUFBUyxNQUFJO0FBQUE7QUFBSSxVQUFRLDBCQUF3QjtBQUFHLFVBQVEsd0JBQXNCLFNBQVMsR0FBRSxHQUFFO0FBQUMsV0FBTyxHQUFHLEdBQUUsR0FBRSxJQUFFLFVBQVUsVUFBUSxBQUFTLFVBQVUsT0FBbkIsU0FBc0IsVUFBVSxLQUFHO0FBQUE7QUFDOWEsVUFBUSxzQ0FBb0MsU0FBUyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsUUFBRyxDQUFDLEdBQUc7QUFBRyxZQUFNLE1BQU0sRUFBRTtBQUFNLFFBQUcsQUFBTSxLQUFOLFFBQVMsQUFBUyxFQUFFLG9CQUFYO0FBQTJCLFlBQU0sTUFBTSxFQUFFO0FBQUssV0FBTyxHQUFHLEdBQUUsR0FBRSxHQUFFLElBQUc7QUFBQTtBQUFJLFVBQVEsVUFBUTtBQUFBOzs7QUN4UzdMO0FBQUE7QUFFQSxzQkFBb0I7QUFFbEIsUUFDRSxTQUFPLGtDQUFtQyxlQUMxQyxPQUFPLCtCQUErQixZQUFhO0FBY3JELFVBQUk7QUFFRix1Q0FBK0IsU0FBUztBQUFBLGVBQ2pDLEtBQVA7QUFHQSxnQkFBUSxNQUFNO0FBQUE7QUFBQTtBQU9oQixjQUNBLE9BQU8sVUFBa0I7QUFBQTs7O0FDbEMzQjtBQUFBO0FBTUEsbUJBQWdCO0FBQ2QsU0FBSyxTQUFTLE9BQU8sT0FBTyxPQUM1QixLQUFLLGNBQWMsT0FBTyxPQUFPO0FBRWpDLGFBQVMsSUFBSSxHQUFHLElBQUksVUFBVSxRQUFRO0FBQ3BDLFdBQUssT0FBTyxVQUFVO0FBR3hCLFNBQUssU0FBUyxLQUFLLE9BQU8sS0FBSyxPQUMvQixLQUFLLFVBQVUsS0FBSyxRQUFRLEtBQUssT0FDakMsS0FBSyxlQUFlLEtBQUssYUFBYSxLQUFLO0FBQUE7QUFzQjdDLFFBQUssVUFBVSxTQUFTLFNBQVMsU0FBUyxPQUFPO0FBQy9DLGFBQVMsUUFBUSxTQUFTO0FBQ3hCLFVBQUksYUFBYSxRQUFRLE1BQU0sSUFBSSxTQUFTLEdBQUc7QUFDN0MsZUFBTyxFQUFFO0FBQUE7QUFFWCxhQUFPLEtBQUs7QUFFWixlQUFTLElBQUksR0FBRyxJQUFJLFdBQVcsUUFBUSxLQUFLO0FBQzFDLFlBQU0sTUFBTSxXQUFXO0FBSXZCLFlBQUksSUFBSSxPQUFPLEtBSWY7QUFBQSxjQUFJLENBQUMsU0FBVSxPQUFPLEtBQUs7QUFDekIsa0JBQU0sSUFBSSxNQUNSLG9DQUFvQyxNQUNwQyx1QkFBdUIsS0FBSyxPQUFPLE9BQU8sV0FBVyxPQUNyRCwyREFBMkQsTUFDM0Qsd0NBQXdDLE9BQU87QUFJbkQsZUFBSyxPQUFPLE9BQU87QUFBQTtBQUFBO0FBSXJCLFVBQUksU0FBUyxDQUFDLEtBQUssWUFBWSxPQUFPO0FBQ3BDLFlBQU0sTUFBTSxXQUFXO0FBQ3ZCLGFBQUssWUFBWSxRQUFTLElBQUksT0FBTyxNQUFPLE1BQU0sSUFBSSxPQUFPO0FBQUE7QUFBQTtBQUFBO0FBUW5FLFFBQUssVUFBVSxVQUFVLFNBQVMsT0FBTTtBQUN0QyxZQUFPLE9BQU87QUFDZCxRQUFJLE9BQU8sTUFBSyxRQUFRLFlBQVksSUFBSSxlQUNwQyxNQUFNLEtBQUssUUFBUSxTQUFTLElBQUksZUFFaEMsVUFBVSxLQUFLLFNBQVMsTUFBSztBQUdqQyxXQUFRLENBRkssSUFBSSxTQUFTLEtBQUssU0FBUyxLQUV0QixDQUFDLFlBQVksS0FBSyxPQUFPLFFBQVE7QUFBQTtBQU1yRCxRQUFLLFVBQVUsZUFBZSxTQUFTLE1BQU07QUFDM0Msa0JBQU8sZ0JBQWdCLEtBQUssU0FBUyxPQUFPLElBQ3JDLFFBQVEsS0FBSyxZQUFZLEtBQUssa0JBQWtCO0FBQUE7QUFHekQsU0FBTyxVQUFVO0FBQUE7OztBQ2hHakI7QUFBQSxTQUFPLFVBQVUsQ0FBQyw0QkFBMkIsQ0FBQyxPQUFNLDBCQUF5QixDQUFDLE9BQU0sd0JBQXVCLENBQUMsU0FBUSwyQkFBMEIsQ0FBQyxZQUFXLCtCQUE4QixDQUFDLGdCQUFlLDJCQUEwQixDQUFDLFlBQVcsNEJBQTJCLENBQUMsUUFBTyw2QkFBNEIsQ0FBQyxTQUFRLDZCQUE0QixDQUFDLFNBQVEsb0JBQW1CLENBQUMsU0FBUSw0QkFBMkIsQ0FBQyxRQUFPLHlCQUF3QixDQUFDLFVBQVMsd0JBQXVCLENBQUMsU0FBUSwrQkFBOEIsQ0FBQyxVQUFTLDhCQUE2QixDQUFDLFVBQVMsMkJBQTBCLENBQUMsVUFBUywyQkFBMEIsQ0FBQyxVQUFTLDBCQUF5QixDQUFDLFVBQVMsd0JBQXVCLENBQUMsT0FBTSx3QkFBdUIsQ0FBQyxRQUFPLDRCQUEyQixDQUFDLGFBQVksMkJBQTBCLENBQUMsUUFBTyx3QkFBdUIsQ0FBQyxTQUFRLHdCQUF1QixDQUFDLFVBQVMsMEJBQXlCLENBQUMsUUFBTyxPQUFNLHdCQUF1QixDQUFDLFNBQVEsNkJBQTRCLENBQUMsY0FBYSx3QkFBdUIsQ0FBQyxTQUFRLG1CQUFrQixDQUFDLFFBQU8sdUJBQXNCLENBQUMsUUFBTywwQkFBeUIsQ0FBQyxRQUFPLHdCQUF1QixDQUFDLFlBQVcsdUJBQXNCLENBQUMsUUFBTyx1QkFBc0IsQ0FBQyxRQUFPLG1CQUFrQixDQUFDLFFBQU8sb0JBQW1CLENBQUMsT0FBTSxxQkFBb0IsQ0FBQyxVQUFTLDJCQUEwQixDQUFDLFFBQU8seUJBQXdCLENBQUMsT0FBTSxVQUFTLHFCQUFvQixDQUFDLFVBQVMsdUJBQXNCLENBQUMsUUFBTyw0QkFBMkIsQ0FBQyxPQUFNLE9BQU0sUUFBTyxzQ0FBcUMsQ0FBQyxRQUFPLHVCQUFzQixDQUFDLFVBQVMsMEJBQXlCLENBQUMsTUFBSyxRQUFPLG9CQUFtQixDQUFDLFFBQU8sUUFBTyxxQkFBb0IsQ0FBQyxVQUFTLDJCQUEwQixDQUFDLFdBQVUsdUJBQXNCLENBQUMsV0FBVSx1QkFBc0IsQ0FBQyxRQUFPLHdCQUF1QixDQUFDLFlBQVcsNEJBQTJCLENBQUMsUUFBTyw4QkFBNkIsQ0FBQyxRQUFPLHdCQUF1QixDQUFDLFNBQVEsNkJBQTRCLENBQUMsZ0JBQWUsb0JBQW1CLENBQUMsUUFBTywyQkFBMEIsQ0FBQyxTQUFRLDJCQUEwQixDQUFDLE1BQUssTUFBSyxPQUFNLDBCQUF5QixDQUFDLFdBQVUsb0JBQW1CLENBQUMsU0FBUSxzQ0FBcUMsQ0FBQyxVQUFTLDRCQUEyQixDQUFDLGFBQVksNkJBQTRCLENBQUMsVUFBUyx3QkFBdUIsQ0FBQyxTQUFRLDJCQUEwQixDQUFDLFNBQVEsMkJBQTBCLENBQUMsU0FBUSx3QkFBdUIsQ0FBQyxTQUFRLG9CQUFtQixDQUFDLE9BQU0sU0FBUSxtQkFBa0IsQ0FBQyxRQUFPLFFBQU8sZ0NBQStCLENBQUMsU0FBUSwrQkFBOEIsQ0FBQyxTQUFRLHNCQUFxQixDQUFDLE9BQU0sUUFBTyxtQkFBa0IsQ0FBQyxRQUFPLHVCQUFzQixDQUFDLE9BQU0seUJBQXdCLENBQUMsT0FBTSxvQkFBbUIsQ0FBQyxRQUFPLDRCQUEyQixDQUFDLE9BQU0sT0FBTSxPQUFNLE9BQU0sTUFBSyxRQUFPLFNBQVEsT0FBTSxPQUFNLFFBQU8sT0FBTSxVQUFTLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLE9BQU0sT0FBTSxPQUFNLFdBQVUsbUJBQWtCLENBQUMsUUFBTyxpQ0FBZ0MsQ0FBQyxRQUFPLG1CQUFrQixDQUFDLFFBQU8seUJBQXdCLENBQUMsVUFBUyx1QkFBc0IsQ0FBQyxVQUFTLFdBQVUsVUFBUyxXQUFVLG9CQUFtQixDQUFDLFNBQVEsK0JBQThCLENBQUMsU0FBUSxtQ0FBa0MsQ0FBQyxTQUFRLG1CQUFrQixDQUFDLFFBQU8sNkJBQTRCLENBQUMsUUFBTyw2QkFBNEIsQ0FBQyxPQUFNLFFBQU8sMEJBQXlCLENBQUMsUUFBTyxzQkFBcUIsQ0FBQyxRQUFPLDBCQUF5QixDQUFDLE9BQU0sUUFBTywrQkFBOEIsQ0FBQyxRQUFPLHFCQUFvQixDQUFDLE9BQU0sOEJBQTZCLENBQUMsT0FBTSx5QkFBd0IsQ0FBQyxRQUFPLHdCQUF1QixDQUFDLFFBQU8sNEJBQTJCLENBQUMsWUFBVyx1QkFBc0IsQ0FBQyxRQUFPLHVCQUFzQixDQUFDLFFBQU8sMEJBQXlCLENBQUMsTUFBSyxPQUFNLE9BQU0sOEJBQTZCLENBQUMsVUFBUyx3QkFBdUIsQ0FBQyxZQUFXLHlCQUF3QixDQUFDLFNBQVEsdUJBQXNCLENBQUMsT0FBTSxRQUFPLDJCQUEwQixDQUFDLFFBQU8sdUNBQXNDLENBQUMsUUFBTyxrQ0FBaUMsQ0FBQyxPQUFNLHVDQUFzQyxDQUFDLFFBQU8sZ0NBQStCLENBQUMsT0FBTSw2QkFBNEIsQ0FBQyxTQUFRLGdDQUErQixDQUFDLFFBQU8sNkJBQTRCLENBQUMsU0FBUSxpQ0FBZ0MsQ0FBQyxRQUFPLDZCQUE0QixDQUFDLFFBQU8sd0JBQXVCLENBQUMsUUFBTyx1QkFBc0IsQ0FBQyxRQUFPLHVCQUFzQixDQUFDLFFBQU8sbUJBQWtCLENBQUMsUUFBTyx3QkFBdUIsQ0FBQyxTQUFRLCtCQUE4QixDQUFDLFFBQU8sZ0NBQStCLENBQUMsUUFBTywrQkFBOEIsQ0FBQyxRQUFPLGdDQUErQixDQUFDLFFBQU8sbUJBQWtCLENBQUMsUUFBTyx5QkFBd0IsQ0FBQyxXQUFVLDBCQUF5QixDQUFDLFlBQVcsc0NBQXFDLENBQUMsV0FBVSwyQ0FBMEMsQ0FBQyxXQUFVLHVCQUFzQixDQUFDLFFBQU8scUJBQW9CLENBQUMsT0FBTSxVQUFTLHdCQUF1QixDQUFDLE9BQU0sU0FBUSw0QkFBMkIsQ0FBQyxPQUFNLGtDQUFpQyxDQUFDLFFBQU8sb0JBQW1CLENBQUMsU0FBUSx3QkFBdUIsQ0FBQyxVQUFTLHVCQUFzQixDQUFDLFFBQU8sd0JBQXVCLENBQUMsU0FBUSx3QkFBdUIsQ0FBQyxTQUFRLHdCQUF1QixDQUFDLFlBQVcsdUJBQXNCLENBQUMsT0FBTSxjQUFhLDBCQUF5QixDQUFDLFFBQU8sZ0NBQStCLENBQUMsUUFBTyxvQkFBbUIsQ0FBQyxTQUFRLHdCQUF1QixDQUFDLFNBQVEsc0JBQXFCLENBQUMsUUFBTyxnQ0FBK0IsQ0FBQyxXQUFVLGtDQUFpQyxDQUFDLE9BQU0sNEJBQTJCLENBQUMsU0FBUSxvQkFBbUIsQ0FBQyxTQUFRLHNCQUFxQixDQUFDLFFBQU8sc0JBQXFCLENBQUMsUUFBTyx3QkFBdUIsQ0FBQyxTQUFRLDRCQUEyQixDQUFDLGFBQVksd0JBQXVCLENBQUMsU0FBUSw0QkFBMkIsQ0FBQyxRQUFPLDZCQUE0QixDQUFDLFFBQU8sNkJBQTRCLENBQUMsUUFBTywyQkFBMEIsQ0FBQyxRQUFPLDhCQUE2QixDQUFDLFFBQU8sMkJBQTBCLENBQUMsUUFBTyx3QkFBdUIsQ0FBQyxTQUFRLHlCQUF3QixDQUFDLFNBQVEsUUFBTyx5QkFBd0IsQ0FBQyxRQUFPLG1CQUFrQixDQUFDLE9BQU0sT0FBTSxPQUFNLFFBQU8sdUJBQXNCLENBQUMsUUFBTyx1QkFBc0IsQ0FBQyxRQUFPLHlCQUF3QixDQUFDLFFBQU8sd0JBQXVCLENBQUMsUUFBTyxTQUFRLHdCQUF1QixDQUFDLFNBQVEsc0JBQXFCLENBQUMsUUFBTyxTQUFRLFFBQU8sUUFBTyxvQkFBbUIsQ0FBQyxTQUFRLHVCQUFzQixDQUFDLFFBQU8sbUJBQWtCLENBQUMsUUFBTyxjQUFhLENBQUMsVUFBUyxlQUFjLENBQUMsUUFBTyxhQUFZLENBQUMsUUFBTyxlQUFjLENBQUMsTUFBSyxRQUFPLGNBQWEsQ0FBQyxPQUFNLFFBQU8sT0FBTSxRQUFPLG9CQUFtQixDQUFDLFNBQVEsYUFBWSxDQUFDLFNBQVEsYUFBWSxDQUFDLE9BQU0sU0FBUSxjQUFhLENBQUMsUUFBTyxPQUFNLFFBQU8sT0FBTSxPQUFNLFFBQU8sYUFBWSxDQUFDLE9BQU0sT0FBTSxPQUFNLFNBQVEsYUFBWSxDQUFDLFFBQU8sY0FBYSxDQUFDLFFBQU8sYUFBWSxDQUFDLFFBQU8sY0FBYSxDQUFDLFNBQVEsY0FBYSxDQUFDLFNBQVEsWUFBVyxDQUFDLE9BQU0sbUJBQWtCLENBQUMsUUFBTyxZQUFXLENBQUMsUUFBTyxZQUFXLENBQUMsUUFBTyxhQUFZLENBQUMsU0FBUSxjQUFhLENBQUMsVUFBUyxjQUFhLENBQUMsUUFBTyxjQUFhLENBQUMsU0FBUSxjQUFhLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxhQUFZLENBQUMsUUFBTyxtQkFBa0IsQ0FBQyxTQUFRLGFBQVksQ0FBQyxRQUFPLGNBQWEsQ0FBQyxTQUFRLGVBQWMsQ0FBQyxPQUFNLGFBQVksQ0FBQyxRQUFPLGNBQWEsQ0FBQyxTQUFRLHVCQUFzQixDQUFDLFVBQVMsY0FBYSxDQUFDLFNBQVEsdUJBQXNCLENBQUMsVUFBUyxlQUFjLENBQUMsU0FBUSxjQUFhLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxhQUFZLENBQUMsUUFBTyxhQUFZLENBQUMsT0FBTSxTQUFRLGNBQWEsQ0FBQyxRQUFPLE9BQU0sUUFBTyxhQUFZLENBQUMsUUFBTyxjQUFhLENBQUMsUUFBTyxhQUFZLENBQUMsUUFBTyxhQUFZLENBQUMsT0FBTSxRQUFPLGFBQVksQ0FBQyxRQUFPLGNBQWEsQ0FBQyxTQUFRLGNBQWEsQ0FBQyxTQUFRLGFBQVksQ0FBQyxRQUFPLGNBQWEsQ0FBQyxTQUFRLGNBQWEsQ0FBQyxTQUFRLGNBQWEsQ0FBQyxTQUFRLGFBQVksQ0FBQyxRQUFPLGNBQWEsQ0FBQyxTQUFRLGFBQVksQ0FBQyxRQUFPLGFBQVksQ0FBQyxRQUFPLGlCQUFnQixDQUFDLE9BQU0sU0FBUSxhQUFZLENBQUMsUUFBTyxjQUFhLENBQUMsT0FBTSxTQUFRLGlCQUFnQixDQUFDLFFBQU8sY0FBYSxDQUFDLFNBQVEsYUFBWSxDQUFDLFFBQU8sb0NBQW1DLENBQUMsNkJBQTRCLGtCQUFpQixDQUFDLFVBQVMsa0NBQWlDLENBQUMsVUFBUywyQ0FBMEMsQ0FBQyxVQUFTLDBCQUF5QixDQUFDLFVBQVMsa0JBQWlCLENBQUMsT0FBTSxTQUFRLGFBQVksQ0FBQyxRQUFPLG1CQUFrQixDQUFDLFNBQVEscUJBQW9CLENBQUMsUUFBTyxjQUFhLENBQUMsT0FBTSxTQUFRLGNBQWEsQ0FBQyxPQUFNLFFBQU8sU0FBUSxhQUFZLENBQUMsUUFBTyxhQUFZLENBQUMsUUFBTyxhQUFZLENBQUMsUUFBTyxjQUFhLENBQUMsT0FBTSxTQUFRLG9CQUFtQixDQUFDLFNBQVEsVUFBUyx5QkFBd0IsQ0FBQyxTQUFRLGtCQUFpQixDQUFDLFNBQVEsVUFBUyxpQkFBZ0IsQ0FBQyxPQUFNLFNBQVEsa0JBQWlCLENBQUMsU0FBUSx1QkFBc0IsQ0FBQyxZQUFXLGFBQVksaUJBQWdCLENBQUMsT0FBTSxRQUFPLHFCQUFvQixDQUFDLFVBQVMsY0FBYSxZQUFXLENBQUMsUUFBTyxZQUFXLENBQUMsUUFBTyxhQUFZLENBQUMsUUFBTyxPQUFNLFVBQVMsYUFBWSxDQUFDLFNBQVEsWUFBVyxDQUFDLFFBQU8sYUFBWSxDQUFDLFNBQVEsaUJBQWdCLENBQUMsWUFBVyxPQUFNLGVBQWMsQ0FBQyxRQUFPLFlBQVcsQ0FBQyxRQUFPLFdBQVUsQ0FBQyxPQUFNLGNBQWEsQ0FBQyxPQUFNLFFBQU8sUUFBTyxPQUFNLFFBQU8sT0FBTSxNQUFLLFFBQU8saUJBQWdCLENBQUMsUUFBTyxZQUFXLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxRQUFPLGFBQVksQ0FBQyxTQUFRLGFBQVksQ0FBQyxRQUFPLFFBQU8sYUFBWSxDQUFDLFNBQVEsZUFBYyxDQUFDLFVBQVMsU0FBUSw2QkFBNEIsQ0FBQyxRQUFPLGNBQWEsQ0FBQyxLQUFJLE1BQUssUUFBTyxPQUFNLE1BQUssT0FBTSxlQUFjLENBQUMsUUFBTyxpQkFBZ0IsQ0FBQyxPQUFNLFFBQU8sU0FBUSxjQUFhLENBQUMsVUFBUyxZQUFXLENBQUMsUUFBTyxZQUFXLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxRQUFPLGNBQWEsQ0FBQyxPQUFNLFNBQVEsZUFBYyxDQUFDLFFBQU8sY0FBYSxDQUFDLFNBQVEsY0FBYSxDQUFDLFNBQVEsY0FBYSxDQUFDLFNBQVEscUJBQW9CLENBQUMsUUFBTyxjQUFhLENBQUMsU0FBUSxhQUFZLENBQUMsUUFBTyxTQUFRLGFBQVksQ0FBQyxPQUFNLFNBQVEsY0FBYSxDQUFDLE9BQU0sYUFBWSxDQUFDLE9BQU0sUUFBTyxTQUFRLGNBQWEsQ0FBQyxRQUFPLE9BQU0sT0FBTSxPQUFNLFFBQU8sYUFBWSxDQUFDLFFBQU8sbUJBQWtCLENBQUMsTUFBSyxRQUFPLGNBQWEsQ0FBQztBQUFBOzs7QUNBenhTO0FBQUE7QUFFQSxNQUFJLFFBQWU7QUFDbkIsU0FBTyxVQUFVLElBQUksTUFBYTtBQUFBOzs7QUNIbEM7QUF3QkE7QUFFQSxzQkFBb0IsT0FBTTtBQUN4QixRQUFJLE9BQU8sU0FBUztBQUNsQixZQUFNLElBQUksVUFBVSxxQ0FBcUMsS0FBSyxVQUFVO0FBQUE7QUFLNUUsZ0NBQThCLE9BQU0sZ0JBQWdCO0FBTWxELGFBTEksTUFBTSxJQUNOLG9CQUFvQixHQUNwQixZQUFZLElBQ1osT0FBTyxHQUNQLE1BQ0ssSUFBSSxHQUFHLEtBQUssTUFBSyxRQUFRLEVBQUUsR0FBRztBQUNyQyxVQUFJLElBQUksTUFBSztBQUNYLGVBQU8sTUFBSyxXQUFXO0FBQUEsV0FDcEI7QUFBQSxZQUFJLFNBQVM7QUFDaEI7QUFFQSxlQUFPO0FBQUE7QUFDVCxVQUFJLFNBQVMsSUFBVTtBQUNyQixZQUFJLGdCQUFjLElBQUksS0FBSyxTQUFTO0FBRTdCLGNBQUksY0FBYyxJQUFJLEtBQUssU0FBUyxHQUFHO0FBQzVDLGdCQUFJLElBQUksU0FBUyxLQUFLLHNCQUFzQixLQUFLLElBQUksV0FBVyxJQUFJLFNBQVMsT0FBTyxNQUFZLElBQUksV0FBVyxJQUFJLFNBQVMsT0FBTztBQUNqSSxrQkFBSSxJQUFJLFNBQVMsR0FBRztBQUNsQixvQkFBSSxpQkFBaUIsSUFBSSxZQUFZO0FBQ3JDLG9CQUFJLG1CQUFtQixJQUFJLFNBQVMsR0FBRztBQUNyQyxrQkFBSSxtQkFBbUIsS0FDckIsT0FBTSxJQUNOLG9CQUFvQixLQUVwQixPQUFNLElBQUksTUFBTSxHQUFHLGlCQUNuQixvQkFBb0IsSUFBSSxTQUFTLElBQUksSUFBSSxZQUFZLE9BRXZELFlBQVksR0FDWixPQUFPO0FBQ1A7QUFBQTtBQUFBLHlCQUVPLElBQUksV0FBVyxLQUFLLElBQUksV0FBVyxHQUFHO0FBQy9DLHNCQUFNLElBQ04sb0JBQW9CLEdBQ3BCLFlBQVksR0FDWixPQUFPO0FBQ1A7QUFBQTtBQUFBO0FBR0osWUFBSSxrQkFDRixDQUFJLElBQUksU0FBUyxJQUNmLE9BQU8sUUFFUCxNQUFNLE1BQ1Isb0JBQW9CO0FBQUE7QUFHdEIsWUFBSSxJQUFJLFNBQVMsSUFDZixPQUFPLE1BQU0sTUFBSyxNQUFNLFlBQVksR0FBRyxLQUV2QyxNQUFNLE1BQUssTUFBTSxZQUFZLEdBQUcsSUFDbEMsb0JBQW9CLElBQUksWUFBWTtBQUV0QyxvQkFBWSxHQUNaLE9BQU87QUFBQTtBQUNGLFFBQUksU0FBUyxNQUFZLFNBQVMsS0FDdkMsRUFBRSxPQUVGLE9BQU87QUFBQTtBQUdYLFdBQU87QUFBQTtBQUdULG1CQUFpQixLQUFLLFlBQVk7QUFDaEMsUUFBSSxNQUFNLFdBQVcsT0FBTyxXQUFXLE1BQ25DLE9BQU8sV0FBVyxRQUFTLFlBQVcsUUFBUSxNQUFPLFlBQVcsT0FBTztBQUMzRSxXQUFLLE1BR0QsUUFBUSxXQUFXLE9BQ2QsTUFBTSxPQUVSLE1BQU0sTUFBTSxPQUxWO0FBQUE7QUFRWCxNQUFJLFFBQVE7QUFBQSxJQUVWLFNBQVMsV0FBbUI7QUFLMUIsZUFKSSxlQUFlLElBQ2YsbUJBQW1CLElBQ25CLEtBRUssSUFBSSxVQUFVLFNBQVMsR0FBRyxLQUFLLE1BQU0sQ0FBQyxrQkFBa0IsS0FBSztBQUNwRSxZQUFJO0FBWUosUUFYQSxBQUFJLEtBQUssSUFDUCxRQUFPLFVBQVUsS0FFYixTQUFRLFVBQ1YsT0FBTSxRQUFRLFFBQ2hCLFFBQU8sTUFHVCxXQUFXLFFBR1AsTUFBSyxXQUFXLEtBSXBCLGdCQUFlLFFBQU8sTUFBTSxjQUM1QixtQkFBbUIsTUFBSyxXQUFXLE9BQU87QUFBQTtBQVM1QyxhQUZBLGVBQWUscUJBQXFCLGNBQWMsQ0FBQyxtQkFFL0MsbUJBQ0UsYUFBYSxTQUFTLElBQ2pCLE1BQU0sZUFFTixNQUNBLGFBQWEsU0FBUyxJQUN4QixlQUVBO0FBQUE7QUFBQSxJQUlYLFdBQVcsU0FBbUIsT0FBTTtBQUdsQyxVQUZBLFdBQVcsUUFFUCxNQUFLLFdBQVc7QUFBRyxlQUFPO0FBRTlCLFVBQUksY0FBYSxNQUFLLFdBQVcsT0FBTyxJQUNwQyxvQkFBb0IsTUFBSyxXQUFXLE1BQUssU0FBUyxPQUFPO0FBUTdELGFBTEEsUUFBTyxxQkFBcUIsT0FBTSxDQUFDLGNBRS9CLE1BQUssV0FBVyxLQUFLLENBQUMsZUFBWSxTQUFPLE1BQ3pDLE1BQUssU0FBUyxLQUFLLHFCQUFtQixVQUFRLE1BRTlDLGNBQW1CLE1BQU0sUUFDdEI7QUFBQTtBQUFBLElBR1QsWUFBWSxTQUFvQixPQUFNO0FBQ3BDLHdCQUFXLFFBQ0osTUFBSyxTQUFTLEtBQUssTUFBSyxXQUFXLE9BQU87QUFBQTtBQUFBLElBR25ELE1BQU0sV0FBZ0I7QUFDcEIsVUFBSSxVQUFVLFdBQVc7QUFDdkIsZUFBTztBQUVULGVBREksUUFDSyxJQUFJLEdBQUcsSUFBSSxVQUFVLFFBQVEsRUFBRSxHQUFHO0FBQ3pDLFlBQUksTUFBTSxVQUFVO0FBQ3BCLG1CQUFXLE1BQ1AsSUFBSSxTQUFTLEtBQ2YsQ0FBSSxXQUFXLFNBQ2IsU0FBUyxNQUVULFVBQVUsTUFBTTtBQUFBO0FBR3RCLGFBQUksV0FBVyxTQUNOLE1BQ0YsTUFBTSxVQUFVO0FBQUE7QUFBQSxJQUd6QixVQUFVLFNBQWtCLE1BQU0sSUFBSTtBQVNwQyxVQVJBLFdBQVcsT0FDWCxXQUFXLEtBRVAsU0FBUyxNQUViLFFBQU8sTUFBTSxRQUFRLE9BQ3JCLEtBQUssTUFBTSxRQUFRLEtBRWYsU0FBUztBQUFJLGVBQU87QUFJeEIsZUFESSxZQUFZLEdBQ1QsWUFBWSxLQUFLLFVBQ2xCLEtBQUssV0FBVyxlQUFlLElBREwsRUFBRTtBQUNoQztBQVFGLGVBTEksVUFBVSxLQUFLLFFBQ2YsVUFBVSxVQUFVLFdBR3BCLFVBQVUsR0FDUCxVQUFVLEdBQUcsVUFDZCxHQUFHLFdBQVcsYUFBYSxJQURMLEVBQUU7QUFDNUI7QUFVRixlQVBJLFFBQVEsR0FBRyxRQUNYLFFBQVEsUUFBUSxTQUdoQixTQUFTLFVBQVUsUUFBUSxVQUFVLE9BQ3JDLGdCQUFnQixJQUNoQixJQUFJLEdBQ0QsS0FBSyxRQUFRLEVBQUUsR0FBRztBQUN2QixZQUFJLE1BQU0sUUFBUTtBQUNoQixjQUFJLFFBQVEsUUFBUTtBQUNsQixnQkFBSSxHQUFHLFdBQVcsVUFBVSxPQUFPO0FBR2pDLHFCQUFPLEdBQUcsTUFBTSxVQUFVLElBQUk7QUFDekIsZ0JBQUksTUFBTTtBQUdmLHFCQUFPLEdBQUcsTUFBTSxVQUFVO0FBQUE7QUFFdkIsWUFBSSxVQUFVLFVBQ25CLENBQUksS0FBSyxXQUFXLFlBQVksT0FBTyxLQUdyQyxnQkFBZ0IsSUFDUCxNQUFNLEtBR2YsaUJBQWdCO0FBR3BCO0FBQUE7QUFFRixZQUFJLFdBQVcsS0FBSyxXQUFXLFlBQVksSUFDdkMsU0FBUyxHQUFHLFdBQVcsVUFBVTtBQUNyQyxZQUFJLGFBQWE7QUFDZjtBQUNHLFFBQUksYUFBYSxNQUNwQixpQkFBZ0I7QUFBQTtBQUdwQixVQUFJLE1BQU07QUFHVixXQUFLLElBQUksWUFBWSxnQkFBZ0IsR0FBRyxLQUFLLFNBQVMsRUFBRTtBQUN0RCxRQUFJLE9BQU0sV0FBVyxLQUFLLFdBQVcsT0FBTyxPQUMxQyxDQUFJLElBQUksV0FBVyxJQUNqQixPQUFPLE9BRVAsT0FBTztBQU1iLGFBQUksSUFBSSxTQUFTLElBQ1IsTUFBTSxHQUFHLE1BQU0sVUFBVSxpQkFFaEMsWUFBVyxlQUNQLEdBQUcsV0FBVyxhQUFhLE1BQzdCLEVBQUUsU0FDRyxHQUFHLE1BQU07QUFBQTtBQUFBLElBSXBCLFdBQVcsU0FBbUIsT0FBTTtBQUNsQyxhQUFPO0FBQUE7QUFBQSxJQUdULFNBQVMsU0FBaUIsT0FBTTtBQUU5QixVQURBLFdBQVcsUUFDUCxNQUFLLFdBQVc7QUFBRyxlQUFPO0FBSzlCLGVBSkksT0FBTyxNQUFLLFdBQVcsSUFDdkIsVUFBVSxTQUFTLElBQ25CLE1BQU0sSUFDTixlQUFlLElBQ1YsSUFBSSxNQUFLLFNBQVMsR0FBRyxLQUFLLEdBQUcsRUFBRTtBQUV0QyxZQURBLE9BQU8sTUFBSyxXQUFXLElBQ25CLFNBQVM7QUFDVCxjQUFJLENBQUMsY0FBYztBQUNqQixrQkFBTTtBQUNOO0FBQUE7QUFBQTtBQUlKLHlCQUFlO0FBSW5CLGFBQUksUUFBUSxLQUFXLFVBQVUsTUFBTSxNQUNuQyxXQUFXLFFBQVEsSUFBVSxPQUMxQixNQUFLLE1BQU0sR0FBRztBQUFBO0FBQUEsSUFHdkIsVUFBVSxTQUFrQixPQUFNLEtBQUs7QUFDckMsVUFBSSxRQUFRLFVBQWEsT0FBTyxPQUFRO0FBQVUsY0FBTSxJQUFJLFVBQVU7QUFDdEUsaUJBQVc7QUFFWCxVQUFJLFFBQVEsR0FDUixNQUFNLElBQ04sZUFBZSxJQUNmO0FBRUosVUFBSSxRQUFRLFVBQWEsSUFBSSxTQUFTLEtBQUssSUFBSSxVQUFVLE1BQUssUUFBUTtBQUNwRSxZQUFJLElBQUksV0FBVyxNQUFLLFVBQVUsUUFBUTtBQUFNLGlCQUFPO0FBQ3ZELFlBQUksU0FBUyxJQUFJLFNBQVMsR0FDdEIsbUJBQW1CO0FBQ3ZCLGFBQUssSUFBSSxNQUFLLFNBQVMsR0FBRyxLQUFLLEdBQUcsRUFBRSxHQUFHO0FBQ3JDLGNBQUksT0FBTyxNQUFLLFdBQVc7QUFDM0IsY0FBSSxTQUFTO0FBR1QsZ0JBQUksQ0FBQyxjQUFjO0FBQ2pCLHNCQUFRLElBQUk7QUFDWjtBQUFBO0FBQUE7QUFHSixZQUFJLHFCQUFxQixNQUd2QixnQkFBZSxJQUNmLG1CQUFtQixJQUFJLElBRXJCLFVBQVUsS0FFWixDQUFJLFNBQVMsSUFBSSxXQUFXLFVBQ3RCLEVBQUUsVUFBVyxNQUdmLE9BQU0sS0FLUixVQUFTLElBQ1QsTUFBTTtBQUFBO0FBTWQsZUFBSSxVQUFVLE1BQUssTUFBTSxtQkFBMEIsUUFBUSxNQUFJLE9BQU0sTUFBSyxTQUNuRSxNQUFLLE1BQU0sT0FBTztBQUFBLGFBQ3BCO0FBQ0wsYUFBSyxJQUFJLE1BQUssU0FBUyxHQUFHLEtBQUssR0FBRyxFQUFFO0FBQ2xDLGNBQUksTUFBSyxXQUFXLE9BQU87QUFHdkIsZ0JBQUksQ0FBQyxjQUFjO0FBQ2pCLHNCQUFRLElBQUk7QUFDWjtBQUFBO0FBQUE7QUFFRyxZQUFJLFFBQVEsTUFHbkIsZ0JBQWUsSUFDZixNQUFNLElBQUk7QUFJZCxlQUFJLFFBQVEsS0FBVyxLQUNoQixNQUFLLE1BQU0sT0FBTztBQUFBO0FBQUE7QUFBQSxJQUk3QixTQUFTLFNBQWlCLE9BQU07QUFDOUIsaUJBQVc7QUFRWCxlQVBJLFdBQVcsSUFDWCxZQUFZLEdBQ1osTUFBTSxJQUNOLGVBQWUsSUFHZixjQUFjLEdBQ1QsSUFBSSxNQUFLLFNBQVMsR0FBRyxLQUFLLEdBQUcsRUFBRSxHQUFHO0FBQ3pDLFlBQUksT0FBTyxNQUFLLFdBQVc7QUFDM0IsWUFBSSxTQUFTLElBQVU7QUFHbkIsY0FBSSxDQUFDLGNBQWM7QUFDakIsd0JBQVksSUFBSTtBQUNoQjtBQUFBO0FBRUY7QUFBQTtBQUVKLFFBQUksUUFBUSxNQUdWLGdCQUFlLElBQ2YsTUFBTSxJQUFJLElBRVosQUFBSSxTQUFTLEtBRVQsQUFBSSxhQUFhLEtBQ2YsV0FBVyxJQUNKLGdCQUFnQixLQUN2QixlQUFjLEtBQ1QsYUFBYSxNQUd0QixlQUFjO0FBQUE7QUFJbEIsYUFBSSxhQUFhLE1BQU0sUUFBUSxNQUUzQixnQkFBZ0IsS0FFaEIsZ0JBQWdCLEtBQUssYUFBYSxNQUFNLEtBQUssYUFBYSxZQUFZLElBQ2pFLEtBRUYsTUFBSyxNQUFNLFVBQVU7QUFBQTtBQUFBLElBRzlCLFFBQVEsU0FBZ0IsWUFBWTtBQUNsQyxVQUFJLGVBQWUsUUFBUSxPQUFPLGNBQWU7QUFDL0MsY0FBTSxJQUFJLFVBQVUscUVBQXFFLE9BQU87QUFFbEcsYUFBTyxRQUFRLEtBQUs7QUFBQTtBQUFBLElBR3RCLE9BQU8sU0FBZSxPQUFNO0FBQzFCLGlCQUFXO0FBRVgsVUFBSSxNQUFNLENBQUUsTUFBTSxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksS0FBSyxJQUFJLE1BQU07QUFDeEQsVUFBSSxNQUFLLFdBQVc7QUFBRyxlQUFPO0FBQzlCLFVBQUksT0FBTyxNQUFLLFdBQVcsSUFDdkIsY0FBYSxTQUFTLElBQ3RCO0FBQ0osTUFBSSxjQUNGLEtBQUksT0FBTyxLQUNYLFFBQVEsS0FFUixRQUFRO0FBYVYsZUFYSSxXQUFXLElBQ1gsWUFBWSxHQUNaLE1BQU0sSUFDTixlQUFlLElBQ2YsSUFBSSxNQUFLLFNBQVMsR0FJbEIsY0FBYyxHQUdYLEtBQUssT0FBTyxFQUFFLEdBQUc7QUFFdEIsWUFEQSxPQUFPLE1BQUssV0FBVyxJQUNuQixTQUFTLElBQVU7QUFHbkIsY0FBSSxDQUFDLGNBQWM7QUFDakIsd0JBQVksSUFBSTtBQUNoQjtBQUFBO0FBRUY7QUFBQTtBQUVKLFFBQUksUUFBUSxNQUdWLGdCQUFlLElBQ2YsTUFBTSxJQUFJLElBRVosQUFBSSxTQUFTLEtBRVQsQUFBSSxhQUFhLEtBQUksV0FBVyxJQUFXLGdCQUFnQixLQUFHLGVBQWMsS0FDbkUsYUFBYSxNQUd4QixlQUFjO0FBQUE7QUFJbEIsYUFBSSxhQUFhLE1BQU0sUUFBUSxNQUUvQixnQkFBZ0IsS0FFaEIsZ0JBQWdCLEtBQUssYUFBYSxNQUFNLEtBQUssYUFBYSxZQUFZLElBQ2hFLFFBQVEsTUFDVixDQUFJLGNBQWMsS0FBSyxjQUFZLElBQUksT0FBTyxJQUFJLE9BQU8sTUFBSyxNQUFNLEdBQUcsT0FBVSxJQUFJLE9BQU8sSUFBSSxPQUFPLE1BQUssTUFBTSxXQUFXLFFBRy9ILENBQUksY0FBYyxLQUFLLGNBQ3JCLEtBQUksT0FBTyxNQUFLLE1BQU0sR0FBRyxXQUN6QixJQUFJLE9BQU8sTUFBSyxNQUFNLEdBQUcsUUFFekIsS0FBSSxPQUFPLE1BQUssTUFBTSxXQUFXLFdBQ2pDLElBQUksT0FBTyxNQUFLLE1BQU0sV0FBVyxPQUVuQyxJQUFJLE1BQU0sTUFBSyxNQUFNLFVBQVUsT0FHakMsQUFBSSxZQUFZLElBQUcsSUFBSSxNQUFNLE1BQUssTUFBTSxHQUFHLFlBQVksS0FBWSxlQUFZLEtBQUksTUFBTSxNQUVsRjtBQUFBO0FBQUEsSUFHVCxLQUFLO0FBQUEsSUFDTCxXQUFXO0FBQUEsSUFDWCxPQUFPO0FBQUEsSUFDUCxPQUFPO0FBQUE7QUFHVCxRQUFNLFFBQVE7QUFFZCxTQUFPLFVBQVU7QUFBQTs7O0FDaGhCakI7QUFBQSxFQUFDLGVBQVM7QUFDVixRQUFJLGFBQVksT0FBTyxnQkFDbkIsa0JBQWlCLENBQUMsV0FBVyxXQUFVLFFBQVEsY0FBYyxDQUFDLE9BQU8sTUFDckUsWUFBVyxDQUFDLFFBQVEsUUFBUTtBQUM5QixlQUFTLFFBQVE7QUFDZixtQkFBVSxRQUFRLE1BQU0sQ0FBQyxLQUFLLElBQUksT0FBTyxZQUFZO0FBQUEsT0FFckQsVUFBVSxDQUFDLFFBQVEsYUFBYSxjQUMzQixJQUFJLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFDdEMsVUFBSSxZQUFZLENBQUMsVUFBVTtBQUN6QixZQUFJO0FBQ0YsZUFBSyxVQUFVLEtBQUs7QUFBQSxpQkFDYixHQUFQO0FBQ0EsaUJBQU87QUFBQTtBQUFBLFNBR1AsV0FBVyxDQUFDLFVBQVU7QUFDeEIsWUFBSTtBQUNGLGVBQUssVUFBVSxNQUFNO0FBQUEsaUJBQ2QsR0FBUDtBQUNBLGlCQUFPO0FBQUE7QUFBQSxTQUdQLE9BQU8sQ0FBQyxXQUNILE9BQU8sT0FBTyxRQUFRLE9BQU8sU0FBUyxRQUFRLFFBQVEsT0FBTyxPQUFPLEtBQUssV0FBVztBQUU3RixXQUFNLGFBQVksVUFBVSxNQUFNLFFBQVEsY0FBYztBQUFBO0FBSzVELG9CQUFlLFdBQ2YsVUFBUyxVQUFTO0FBQUEsTUFDaEIsT0FBTyxNQUFNO0FBQUEsTUFDYixXQUFXLE1BQU07QUFBQSxNQUNqQixZQUFZLE1BQU07QUFBQSxNQUNsQixPQUFPLE1BQU07QUFBQSxNQUNiLFdBQVcsTUFBTTtBQUFBLE1BQ2pCLGVBQWUsTUFBTTtBQUFBLE1BQ3JCLFNBQVMsTUFBTTtBQUFBO0FBSWpCLDBCQUFzQixRQUFRO0FBQzVCLFVBQUksUUFBUSxDQUFDLFVBQVU7QUFDckIsWUFBSSxVQUFVO0FBQ1osYUFBRyxPQUFPO0FBQUEsaUJBQ0QsT0FBTyxTQUFVO0FBQzFCLGFBQUcsT0FBTyxJQUNWLEdBQUcsT0FBTyxDQUFDO0FBQUEsaUJBQ0YsT0FBTyxTQUFVO0FBQzFCLGFBQUcsT0FBTyxJQUNWLEdBQUcsUUFBUSxRQUFRO0FBQUEsaUJBQ1YsT0FBTyxTQUFVO0FBQzFCLGFBQUcsT0FBTyxJQUNWLEdBQUcsTUFBTSxXQUFXO0FBQUEsaUJBQ1gsaUJBQWlCO0FBQzFCLGFBQUcsT0FBTyxJQUNWLEdBQUcsTUFBTTtBQUFBLGlCQUNBLGlCQUFpQixPQUFPO0FBQ2pDLGFBQUcsT0FBTyxJQUNWLEdBQUcsUUFBUSxNQUFNO0FBQ2pCLG1CQUFTLFFBQVE7QUFDZixrQkFBTTtBQUFBLGVBRUg7QUFDTCxjQUFJLFFBQU8sT0FBTyxLQUFLO0FBQ3ZCLGFBQUcsT0FBTyxJQUNWLEdBQUcsUUFBUSxNQUFLO0FBQ2hCLG1CQUFTLE9BQU87QUFDZCxlQUFHLE1BQU0sV0FBVyxPQUNwQixNQUFNLE1BQU07QUFBQTtBQUFBLFNBSWQsS0FBSyxJQUFJO0FBQ2IsZ0JBQUcsUUFBUSxJQUNYLEdBQUcsUUFBUSxPQUFPLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxZQUNyQyxNQUFNLE9BQU8sUUFDYixjQUFjLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxJQUMzQixHQUFHLElBQUksU0FBUyxHQUFHLEdBQUc7QUFBQTtBQUUvQiwwQkFBc0IsT0FBTztBQUMzQixVQUFJLFFBQVEsTUFBTTtBQUNoQixnQkFBUSxHQUFHO0FBQUEsZUFDSjtBQUNILG1CQUFPO0FBQUEsZUFDSjtBQUNILG1CQUFPLENBQUMsQ0FBQyxHQUFHO0FBQUEsZUFDVDtBQUNILG1CQUFPLEdBQUc7QUFBQSxlQUNQO0FBQ0gsbUJBQU8sV0FBVyxHQUFHO0FBQUEsZUFDbEI7QUFDSCxtQkFBTyxHQUFHO0FBQUEsZUFDUCxHQUFHO0FBQ04sZ0JBQUksUUFBUSxHQUFHLFVBQ1gsU0FBUztBQUNiLHFCQUFTLElBQUksR0FBRyxJQUFJLE9BQU87QUFDekIscUJBQU8sS0FBSztBQUVkLG1CQUFPO0FBQUE7QUFBQSxlQUVKLEdBQUc7QUFDTixnQkFBSSxRQUFRLEdBQUcsVUFDWCxTQUFTO0FBQ2IscUJBQVMsSUFBSSxHQUFHLElBQUksT0FBTztBQUN6QixxQkFBTyxXQUFXLEdBQUcsV0FBVztBQUVsQyxtQkFBTztBQUFBO0FBQUE7QUFHUCxrQkFBTSxJQUFJLE1BQU07QUFBQTtBQUFBLFNBR2xCLEtBQUssSUFBSSxXQUFXLFFBQ3BCLEtBQUssR0FBRyxVQUNSLFlBQWEsTUFBSyxNQUFPO0FBQzdCLGNBQVE7QUFDUixVQUFJLFFBQVE7QUFDWixVQUFJLEdBQUcsUUFBUSxNQUFNO0FBQ25CLGNBQU0sSUFBSSxNQUFNO0FBRWxCLGFBQU8sQ0FBQyxJQUFJLFdBQVc7QUFBQTtBQUV6QixRQUFJLGFBQWEsTUFBTTtBQUFBLE1BQ3JCLFlBQVksTUFBTSxJQUFJLFdBQVcsT0FBTztBQUN0QyxhQUFLLE1BQU0sS0FDWCxLQUFLLE1BQU0sR0FDWCxLQUFLLE1BQU07QUFBQTtBQUFBLE1BRWIsT0FBTyxPQUFPO0FBQ1osWUFBSSxLQUFLLE1BQU0sUUFBUSxLQUFLLElBQUksUUFBUTtBQUN0QyxjQUFJLFFBQVEsSUFBSSxXQUFZLE1BQUssTUFBTSxTQUFTO0FBQ2hELGdCQUFNLElBQUksS0FBSyxNQUNmLEtBQUssTUFBTTtBQUFBO0FBRWIsb0JBQUssT0FBTyxPQUNMLEtBQUssTUFBTTtBQUFBO0FBQUEsTUFFcEIsT0FBTyxPQUFPO0FBQ1osWUFBSSxTQUFTLEtBQUssT0FBTztBQUN6QixhQUFLLElBQUksVUFBVTtBQUFBO0FBQUEsTUFFckIsUUFBUSxPQUFPO0FBQ2IsWUFBSSxTQUFTLEtBQUssT0FBTztBQUN6QixzQkFBYyxLQUFLLEtBQUssT0FBTztBQUFBO0FBQUEsTUFFakMsTUFBTSxPQUFPO0FBQ1gsWUFBSSxTQUFTLEtBQUssT0FBTyxJQUFJLE1BQU07QUFDbkMsc0JBQWMsS0FBSyxLQUFLLE1BQU0sUUFBUSxTQUN0QyxLQUFLLElBQUksSUFBSSxPQUFPLFNBQVM7QUFBQTtBQUFBLE1BRS9CLE1BQU0sT0FBTztBQUNYLFlBQUksS0FBSyxNQUFNLFFBQVEsS0FBSyxJQUFJO0FBQzlCLGdCQUFNLElBQUksTUFBTTtBQUVsQixvQkFBSyxPQUFPLE9BQ0wsS0FBSyxNQUFNO0FBQUE7QUFBQSxNQUVwQixRQUFRO0FBQ04sZUFBTyxLQUFLLElBQUksS0FBSyxNQUFNO0FBQUE7QUFBQSxNQUU3QixTQUFTO0FBQ1AsZUFBTyxhQUFhLEtBQUssS0FBSyxLQUFLLE1BQU07QUFBQTtBQUFBLE1BRTNDLE9BQU87QUFDTCxZQUFJLFNBQVMsS0FBSyxVQUNkLFFBQVEsSUFBSSxXQUFXLFNBQ3ZCLE1BQU0sS0FBSyxNQUFNLE1BQU07QUFDM0IscUJBQU0sSUFBSSxLQUFLLElBQUksU0FBUyxLQUFLLE1BQU0sVUFDaEM7QUFBQTtBQUFBLE9BR1AsWUFDQTtBQUNKLFFBQUksT0FBTyxlQUFnQixlQUFlLE9BQU8sZUFBZ0IsYUFBYTtBQUM1RSxVQUFJLFVBQVUsSUFBSSxlQUNkLFVBQVUsSUFBSTtBQUNsQixtQkFBYSxDQUFDLFNBQVMsUUFBUSxPQUFPLE9BQ3RDLGFBQWEsQ0FBQyxVQUFVLFFBQVEsT0FBTztBQUFBLGVBQzlCLE9BQU8sVUFBVztBQUMzQixtQkFBYSxDQUFDLFNBQVM7QUFDckIsWUFBSSxTQUFTLE9BQU8sS0FBSztBQUN6QixlQUFNLGtCQUFrQixjQUN0QixVQUFTLElBQUksV0FBVyxVQUVuQjtBQUFBLFNBRVQsYUFBYSxDQUFDLFVBQVUsT0FBTyxLQUFLLE9BQU87QUFBQTtBQUUzQyxZQUFNLElBQUksTUFBTTtBQUVsQiwwQkFBc0IsUUFBUSxRQUFRO0FBQ3BDLGFBQU8sT0FBTyxZQUFZLE9BQU8sYUFBYSxJQUFJLE9BQU8sYUFBYSxLQUFLLE9BQU8sYUFBYTtBQUFBO0FBRWpHLDJCQUF1QixRQUFRLE9BQU8sUUFBUTtBQUM1QyxhQUFPLFlBQVksT0FDbkIsT0FBTyxZQUFZLFNBQVMsR0FDNUIsT0FBTyxZQUFZLFNBQVMsSUFDNUIsT0FBTyxZQUFZLFNBQVM7QUFBQTtBQUk5Qiw0QkFBd0IsUUFBUTtBQUU5QixVQURBLFVBQVUsSUFDTixPQUFPLFFBQVEsUUFBUTtBQUN6QixjQUFNLElBQUksTUFBTSxtQkFBbUI7QUFDckMsYUFBTztBQUFBO0FBRVQsUUFBSSxnQkFBZ0IsTUFBTSxNQUN0QixnQkFBZ0IsQ0FBQyxVQUFVLE9BQU8sU0FBVSxZQUFZLE9BQU8sYUFDL0Qsd0JBQXdCLENBQUMsVUFBVSxPQUFPLFNBQVUsYUFBYSxPQUFPLFNBQVUsWUFBWSxDQUFDLE1BQU0sUUFBUSxTQUFTLE9BQU8sMEJBQzdILGVBQWUsQ0FBQyxVQUFVLE9BQU8sU0FBVSxXQUFXLE9BQU8sWUFDN0QsZUFBZSxDQUFDLFVBQVUsaUJBQWlCLFNBQVMsT0FBTyxtQkFDM0QsZ0JBQWdCLENBQUMsVUFBVSxPQUFPLFNBQVUsWUFBWSxVQUFXLFNBQVEsS0FBSyxPQUFPLGNBQ3ZGLGlCQUFpQixDQUFDLFVBQVUsT0FBTyxTQUFVLGFBQWEsT0FBTyxjQUNqRSxjQUFjLENBQUMsVUFBVSxNQUFNLFFBQVEsU0FBUyxPQUFPLFlBQ3ZELGVBQWUsQ0FBQyxVQUFVLE9BQU8sU0FBVSxZQUFZLFVBQVUsUUFBUSxDQUFDLE1BQU0sUUFBUSxTQUFTLE9BQU8sYUFDeEcscUJBQXFCLENBQUMsVUFBVSxPQUFPLFNBQVUsWUFBWSxDQUFDLE1BQU0sUUFBUSxTQUFTLE9BQU8scUJBQzVGLHdCQUF3QixDQUFDLFVBQVUsT0FBTyxTQUFVLFlBQVksT0FBTyxTQUFVLFlBQVksT0FBTyx5QkFDcEcsdUJBQXVCLENBQUMsVUFBVSxPQUFPLFNBQVUsWUFBWSxPQUFPLFNBQVUsWUFBWSxVQUFVLFFBQVEsQ0FBQyxNQUFNLFFBQVEsU0FBUyxPQUFPLHlCQUM3SSxzQkFBc0IsQ0FBQyxVQUFVLE9BQU8sU0FBVSxZQUFZLE1BQU0sUUFBUSxTQUFTLE9BQU8sd0JBQzVGLDJCQUEyQixDQUFDLFVBQVUsT0FBTyxTQUFVLFlBQVksaUJBQWlCLGFBQWEsT0FBTztBQUM1RyxxQkFBaUIsUUFBUSxPQUFNLEtBQUssVUFBVTtBQUM1QyxVQUFJLFFBQVEsT0FBTztBQUVuQixVQURBLE1BQUssTUFBTSxNQUFNLElBQ2IsVUFBVTtBQUNaO0FBQ0YsVUFBSSxTQUFTLFNBQVM7QUFDdEIsVUFBSSxXQUFXO0FBQ2IsY0FBTSxJQUFJLE1BQU0sSUFBSSxnQkFBZ0I7QUFDdEMsYUFBTztBQUFBO0FBRVQsa0NBQThCLFFBQVEsT0FBTSxPQUFPO0FBQ2pELGVBQVMsT0FBTztBQUNkLFlBQUksQ0FBRSxRQUFPO0FBQ1gsZ0JBQU0sSUFBSSxNQUFNLGtCQUFrQixXQUFXO0FBQUE7QUFJbkQsdUNBQW1DLFNBQVM7QUFDMUMsVUFBSSxRQUFPLE9BQU8sT0FBTyxPQUNyQixVQUFVLFFBQVEsU0FBUyxPQUFNLFdBQVcsZUFDNUMsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVO0FBQzlDLGtDQUFxQixTQUFTLE9BQU0sMkJBQzdCO0FBQUEsUUFDTDtBQUFBLFFBQ0E7QUFBQTtBQUFBO0FBR0osMEJBQXNCLE9BQU8sU0FBUyxPQUFNLE9BQU8saUJBQWlCO0FBQ2xFLFVBQUksUUFBUSxRQUFRLFNBQVMsT0FBTSxTQUFTLGdCQUN4QyxXQUFXLFFBQVEsU0FBUyxPQUFNLFlBQVksZUFDOUMsV0FBVyxRQUFRLFNBQVMsT0FBTSxZQUFZO0FBQ2xELE1BQUksUUFDRixNQUFNLEtBQUssV0FBVyxXQUNmLFNBQ1AsTUFBTSxLQUFLLGlCQUNiLE1BQU0sS0FBSyxlQUFlLFlBQVksb0JBQ3RDLE1BQU0sS0FBSyxlQUFlLFlBQVk7QUFBQTtBQUV4Qyw2QkFBeUIsT0FBTyxTQUFTLE9BQU07QUFDN0MsVUFBSSxpQkFBaUIsUUFBUSxTQUFTLE9BQU0sa0JBQWtCLGdCQUMxRCxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsc0JBQzFDLFNBQVMsUUFBUSxTQUFTLE9BQU0sVUFBVSxlQUMxQyxhQUFhLFFBQVEsU0FBUyxPQUFNLGNBQWMsZUFDbEQsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGdCQUMxQyxlQUFlLFFBQVEsU0FBUyxPQUFNLGdCQUFnQixnQkFDdEQsbUJBQW1CLFFBQVEsU0FBUyxPQUFNLG9CQUFvQixnQkFDOUQsb0JBQW9CLFFBQVEsU0FBUyxPQUFNLHFCQUFxQixnQkFDaEUsVUFBVSxRQUFRLFNBQVMsT0FBTSxXQUFXLGVBQzVDLGNBQWMsUUFBUSxTQUFTLE9BQU0sZUFBZSx3QkFDcEQsYUFBYSxRQUFRLFNBQVMsT0FBTSxjQUFjLGVBQ2xELGNBQWMsUUFBUSxTQUFTLE9BQU0sZUFBZSxlQUNwRCxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsZUFDMUMsT0FBTyxRQUFRLFNBQVMsT0FBTSxRQUFRLGNBQ3RDLFlBQVksUUFBUSxTQUFTLE9BQU0sYUFBYTtBQTZCcEQsVUE1QkksbUJBQW1CLFVBQ3JCLE1BQU0sS0FBSyxxQkFBcUIsbUJBQzlCLFVBQ0YsQ0FBSSxNQUFNLFFBQVEsVUFDaEIsTUFBTSxLQUFLLFlBQVksTUFBTSxLQUFLLFFBQVEsSUFBSSxnQkFBZ0IsS0FBSyxVQUVuRSxNQUFNLEtBQUssWUFBWSxlQUFlLGFBRXRDLFVBQ0YsTUFBTSxLQUFLLFlBQVksV0FDckIsY0FDRixNQUFNLEtBQUssaUJBQWlCLGVBQzFCLFVBQ0YsTUFBTSxLQUFLLGFBQ1QsZ0JBQ0YsTUFBTSxLQUFLLG9CQUNULG9CQUNGLE1BQU0sS0FBSyx3QkFDVCxxQkFDRixNQUFNLEtBQUsseUJBQ1QsV0FDRixNQUFNLEtBQUssYUFBYSxZQUN0QixnQkFBZ0IsVUFBVSxnQkFBZ0IsTUFDNUMsTUFBTSxLQUFLLGtCQUFrQixnQkFDM0IsY0FDRixNQUFNLEtBQUssaUJBQWlCLGVBQzFCLGVBQ0YsTUFBTSxLQUFLLGtCQUFrQixnQkFDM0I7QUFDRixpQkFBUyxPQUFPLFFBQVE7QUFDdEIsY0FBSSxJQUFJLFFBQVEsUUFBUTtBQUN0QixrQkFBTSxJQUFJLE1BQU0sbUJBQW1CO0FBQ3JDLGdCQUFNLEtBQUssWUFBWSxPQUFPLE9BQU87QUFBQTtBQUd6QyxVQUFJO0FBQ0YsaUJBQVMsTUFBTTtBQUNiLGdCQUFNLEtBQUssVUFBVTtBQUN6QixNQUFJLGFBQ0YsTUFBTSxLQUFLO0FBQUE7QUFFZixrQ0FBOEIsVUFBVSxTQUFTLE9BQU8saUJBQWlCLGNBQWM7QUFDckYsVUFBSTtBQUNKLFVBQUksUUFBUSxJQUNSLFFBQU8sT0FBTyxPQUFPLE9BQ3JCLGdCQUFnQixNQUNoQixrQkFBa0IsTUFDbEIsWUFBWTtBQUNoQixtQkFBYSxPQUFPLFNBQVMsT0FBTSxPQUFPLGtCQUMxQyxnQkFBZ0IsT0FBTyxTQUFTO0FBQ2hDLFVBQUksWUFBWSxRQUFRLFNBQVMsT0FBTSxhQUFhLHdCQUNoRCxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsZ0JBQzFDLFFBQVEsUUFBUSxTQUFTLE9BQU0sU0FBUyx3QkFDeEMsWUFBWSxRQUFRLFNBQVMsT0FBTSxhQUFhLGdCQUNoRCxtQkFBbUIsUUFBUSxTQUFTLE9BQU0sb0JBQW9CLGdCQUM5RCxXQUFXLFFBQVEsU0FBUyxPQUFNLFlBQVksZ0JBQzlDLFVBQVUsUUFBUSxTQUFTLE9BQU0sV0FBVyxlQUM1QyxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsZUFDMUMsVUFBVSxRQUFRLFNBQVMsT0FBTSxXQUFXLGVBQzVDLFdBQVcsUUFBUSxTQUFTLE9BQU0sWUFBWSxlQUM5QyxXQUFXLFFBQVEsU0FBUyxPQUFNLFlBQVksZUFDOUMsb0JBQW9CLFFBQVEsU0FBUyxPQUFNLHFCQUFxQixjQUNoRSxpQkFBaUIsUUFBUSxTQUFTLE9BQU0sYUFBYSxjQUNyRCxhQUFhLFFBQVEsU0FBUyxPQUFNLGNBQWMsY0FDbEQsYUFBYSxRQUFRLFNBQVMsT0FBTSxjQUFjLGNBQ2xELFdBQVcsUUFBUSxTQUFTLE9BQU0sWUFBWSxjQUM5QyxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsZUFDMUMsZUFBZSxRQUFRLFNBQVMsT0FBTSxnQkFBZ0IsZUFDdEQsYUFBYSxRQUFRLFNBQVMsT0FBTSxjQUFjLGVBQ2xELGFBQWEsUUFBUSxTQUFTLE9BQU0sY0FBYyxlQUNsRCxhQUFhLFFBQVEsU0FBUyxPQUFNLGNBQWMsZUFDbEQsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGNBQzFDLFNBQVMsUUFBUSxTQUFTLE9BQU0sVUFBVSxlQUMxQyxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVUsZUFDMUMsY0FBYyxRQUFRLFNBQVMsT0FBTSxlQUFlLGNBQ3BELGdCQUFnQixRQUFRLFNBQVMsT0FBTSxpQkFBaUIsZUFDeEQsUUFBUSxRQUFRLFNBQVMsT0FBTSxTQUFTLGVBQ3hDLFFBQVMsTUFBSyxRQUFRLFNBQVMsT0FBTSxTQUFTLG1CQUFtQixPQUFPLEtBQUssY0FDN0UsY0FBYyxRQUFRLFNBQVMsT0FBTSxlQUFlLG1CQUFtQixJQUN2RSxVQUFVLFFBQVEsU0FBUyxPQUFNLFdBQVc7QUFNaEQsVUFMQSxxQkFBcUIsU0FBUyxPQUFNLE1BQU0sb0JBQ3RDLGFBQ0YsTUFBTSxLQUFLLGNBQWMsY0FBYyxLQUFPLEtBQUssSUFBSSxnQkFDckQsVUFDRixNQUFNLEtBQUssYUFDVDtBQUVGLFlBREEsTUFBTSxLQUFLLFlBQ1AsT0FBTyxTQUFVO0FBQ25CLHNCQUFZO0FBQUEsYUFDUDtBQUNMLGNBQUksWUFBWSxPQUFPLE9BQU8sT0FDMUIsWUFBWSxRQUFRLE9BQU8sV0FBVyxhQUFhO0FBQ3ZELCtCQUFxQixPQUFPLFdBQVcsaUJBQWlCLG9CQUN4RCxZQUFZLENBQUM7QUFBQTtBQW1CakIsVUFoQkksYUFDRixNQUFNLEtBQUssZ0JBQ1Qsb0JBQ0YsTUFBTSxLQUFLLHdCQUNULFlBQ0YsTUFBTSxLQUFLLGVBQ1QsV0FDRixNQUFNLEtBQUssYUFBYSxZQUN0QixVQUNGLE1BQU0sS0FBSyxZQUFZLFdBQ3JCLFdBQ0YsTUFBTSxLQUFLLGFBQWEsWUFDdEIsWUFDRixNQUFNLEtBQUssY0FBYyxhQUN2QixZQUNGLE1BQU0sS0FBSyxjQUFjLGFBQ3ZCLG1CQUFtQjtBQUNyQixZQUFJLFNBQVM7QUFDYixpQkFBUyxTQUFTLG1CQUFtQjtBQUVuQyxjQURBLFNBQVMsSUFDTCxNQUFNLFFBQVEsUUFBUTtBQUN4QixrQkFBTSxJQUFJLE1BQU0sOEJBQThCO0FBQ2hELGlCQUFPLEtBQUs7QUFBQTtBQUVkLGNBQU0sS0FBSyx3QkFBd0IsT0FBTyxLQUFLO0FBQUE7QUFRakQsVUFOSSxjQUNGLE1BQU0sS0FBSyxpQkFBaUIsZUFDMUIsY0FDRixNQUFNLEtBQUssaUJBQWlCLGVBQzFCLGNBQ0YsTUFBTSxLQUFLLGlCQUFpQixlQUMxQixZQUFZO0FBQ2QsWUFBSSxTQUFTO0FBQ2IsaUJBQVMsU0FBUyxZQUFZO0FBRTVCLGNBREEsU0FBUyxJQUNMLE1BQU0sUUFBUSxRQUFRO0FBQ3hCLGtCQUFNLElBQUksTUFBTSx1QkFBdUI7QUFDekMsaUJBQU8sS0FBSztBQUFBO0FBRWQsY0FBTSxLQUFLLGlCQUFpQixPQUFPLEtBQUs7QUFBQTtBQUUxQyxVQUFJLFlBQVk7QUFDZCxZQUFJLFNBQVM7QUFDYixpQkFBUyxTQUFTLFlBQVk7QUFFNUIsY0FEQSxTQUFTLElBQ0wsTUFBTSxRQUFRLFFBQVE7QUFDeEIsa0JBQU0sSUFBSSxNQUFNLHNCQUFzQjtBQUN4QyxpQkFBTyxLQUFLO0FBQUE7QUFFZCxjQUFNLEtBQUssZ0JBQWdCLE9BQU8sS0FBSztBQUFBO0FBRXpDLFVBQUk7QUFDRixpQkFBUyxRQUFRO0FBQ2YsZ0JBQU0sS0FBSyxjQUFjO0FBQzdCLFVBQUk7QUFDRixpQkFBUyxRQUFRLFFBQVE7QUFDdkIsY0FBSSxLQUFLLFFBQVEsUUFBUTtBQUN2QixrQkFBTSxJQUFJLE1BQU0sNkJBQTZCO0FBQy9DLGdCQUFNLEtBQUssWUFBWSxRQUFRLE9BQU87QUFBQTtBQUcxQyxVQUFJO0FBQ0YsaUJBQVMsUUFBUSxRQUFRO0FBQ3ZCLGNBQUksS0FBSyxRQUFRLFFBQVE7QUFDdkIsa0JBQU0sSUFBSSxNQUFNLDZCQUE2QjtBQUMvQyxnQkFBTSxLQUFLLFlBQVksUUFBUSxPQUFPO0FBQUE7QUFHMUMsVUFBSTtBQUNGLGlCQUFTLFNBQVE7QUFDZixnQkFBTSxLQUFLLFlBQVk7QUFDM0IsVUFBSTtBQUNGLGlCQUFTLE9BQU8sUUFBUTtBQUN0QixjQUFJLElBQUksUUFBUSxRQUFRO0FBQ3RCLGtCQUFNLElBQUksTUFBTSw2QkFBNkI7QUFDL0MsZ0JBQU0sS0FBSyxZQUFZLE9BQU8sT0FBTztBQUFBO0FBR3pDLFVBQUk7QUFDRixpQkFBUyxPQUFPLGNBQWM7QUFDNUIsY0FBSSxJQUFJLFFBQVEsUUFBUTtBQUN0QixrQkFBTSxJQUFJLE1BQU0sMEJBQTBCO0FBQzVDLGdCQUFNLEtBQUssbUJBQW1CLE9BQU8sYUFBYTtBQUFBO0FBR3RELFVBQUk7QUFDRixpQkFBUyxjQUFjLGFBQWE7QUFFbEMsY0FEQSxjQUFjLElBQ1YsV0FBVyxXQUFXO0FBQ3hCLGtCQUFNLElBQUksTUFBTSx3QkFBd0I7QUFDMUMsZ0JBQU0sS0FBSztBQUFBO0FBR2YsVUFBSSxPQUFPO0FBQ1QsWUFBSSxZQUFZLE9BQU8sT0FBTyxPQUMxQixXQUFXLFFBQVEsT0FBTyxXQUFXLFlBQVksZUFDakQsYUFBYSxRQUFRLE9BQU8sV0FBVyxjQUFjLGVBQ3JELGFBQWEsUUFBUSxPQUFPLFdBQVcsY0FBYyxlQUNyRCxVQUFVLFFBQVEsT0FBTyxXQUFXLFVBQVU7QUFDbEQsNkJBQXFCLE9BQU8sV0FBVyxzQkFDbkMsY0FDRixNQUFNLEtBQUssZ0JBQWdCLGVBQ3pCLFdBQ0YsTUFBTSxLQUFLLFlBQVksWUFDckIsY0FDRixtQkFBa0IsYUFBYSxLQUNqQyxnQkFBZ0IsV0FBVyxXQUFXLEtBQUs7QUFBQTtBQUU3QyxVQUFJLFlBQVk7QUFDaEIsVUFBSTtBQUNGLGlCQUFTLFNBQVM7QUFDaEIsbUJBQVMsSUFDVCxVQUFVLEtBQUs7QUFHbkIsYUFBTztBQUFBLFFBQ0w7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQSxPQUFPO0FBQUE7QUFBQTtBQUdYLHNDQUFrQyxVQUFVLFNBQVMsT0FBTyxpQkFBaUI7QUFDM0UsVUFBSSxRQUFRLElBQ1IsUUFBTyxPQUFPLE9BQU87QUFDekIsbUJBQWEsT0FBTyxTQUFTLE9BQU0sT0FBTyxrQkFDMUMsZ0JBQWdCLE9BQU8sU0FBUztBQUNoQyxVQUFJLFlBQVksUUFBUSxTQUFTLE9BQU0sYUFBYSx3QkFDaEQsY0FBYyxRQUFRLFNBQVMsT0FBTSxlQUFlLHVCQUNwRCxhQUFhLFFBQVEsU0FBUyxPQUFNLGNBQWMsZUFDbEQsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGVBQzFDLFNBQVMsUUFBUSxTQUFTLE9BQU0sVUFBVSxlQUMxQyxTQUFTLFFBQVEsU0FBUyxPQUFNLFVBQVU7QUFDOUMsa0NBQXFCLFNBQVMsT0FBTSxNQUFNLG9CQUN0QyxhQUNGLE1BQU0sS0FBSyxlQUFlLGNBQWMsS0FBTyxhQUFhLGNBQzFELGVBQ0YsTUFBTSxLQUFLLGtCQUFrQixPQUFPLGVBQWdCLFdBQVcsY0FBYyxLQUFLLFVBQVUsaUJBQzFGLGNBQ0YsTUFBTSxLQUFLLGdCQUFnQixlQUN6QixVQUNGLE1BQU0sS0FBSyxZQUFZLFdBQ3JCLFVBQ0YsTUFBTSxLQUFLLFlBQVksV0FDckIsVUFDRixNQUFNLEtBQUssWUFBWSxXQUNsQjtBQUFBO0FBRVQsMkJBQXVCLFVBQVU7QUFDL0IsVUFBSSxvQkFBb0IsSUFBSSxPQUN4QixrQkFBa0IsSUFBSSxPQUN0QixpQkFBaUIsSUFBSSxPQUNyQixpQkFBaUIsSUFBSSxPQUNyQixjQUFjLEdBQ2QsV0FBVyxJQUNYLGdCQUFnQixHQUNoQixlQUFlLEdBQ2YsU0FBUyxJQUFJLFdBQVcsS0FBSyxPQUM3QixhQUFhLEdBQ2IsaUJBQWlCLENBQUMsVUFBVTtBQUM5QixZQUFJLFFBQVEsYUFBYSxNQUFNO0FBQy9CLFlBQUksUUFBUSxPQUFPLFFBQVE7QUFDekIsY0FBSSxPQUFPLElBQUksV0FBVyxRQUFRO0FBQ2xDLGVBQUssSUFBSSxTQUNULFNBQVM7QUFBQTtBQUVYLGVBQU8sSUFBSSxPQUFPLGFBQ2xCLGNBQWMsTUFBTTtBQUNwQixZQUFJLFNBQVM7QUFDYixlQUFPLFNBQVMsS0FBSyxjQUFZO0FBQy9CLGNBQUksU0FBUyxhQUFhLFFBQVE7QUFDbEMsY0FBSSxTQUFTLElBQUksU0FBUztBQUN4QjtBQUVGLG9CQUFVLEdBQ1YscUJBQXFCLE9BQU8sTUFBTSxRQUFRLFNBQVMsVUFDbkQsVUFBVTtBQUFBO0FBRVosUUFBSSxTQUFTLEtBQ1gsUUFBTyxJQUFJLE9BQU8sTUFBTSxVQUN4QixjQUFjO0FBQUEsU0FHZCxhQUFhLE1BQU07QUFDckIsbUJBQVc7QUFDWCxpQkFBUyxZQUFZLGtCQUFrQjtBQUNyQyxtQkFBUywyQkFBMkI7QUFFdEMsMEJBQWtCO0FBQ2xCLGlCQUFTLGFBQWEsZUFBZTtBQUNuQyxvQkFBVSxPQUFPO0FBRW5CLHVCQUFlO0FBQ2YsaUJBQVMsWUFBWSxlQUFlO0FBQ2xDLGNBQUk7QUFDRixxQkFBUyxJQUFJLE1BQU0sNEJBQTRCO0FBQUEsbUJBQ3hDLEdBQVA7QUFDQSxvQkFBUSxNQUFNO0FBQUE7QUFHbEIsdUJBQWU7QUFBQSxTQUViLGNBQWMsQ0FBQyxNQUFNLE9BQU8sYUFBYTtBQUMzQyxZQUFJO0FBQ0YsaUJBQU8sU0FBUyxvQ0FBb0M7QUFDdEQsWUFBSSxLQUFLO0FBQ1QsMEJBQWtCLElBQUksSUFBSSxDQUFDLE9BQU8sYUFBYTtBQUM3QyxjQUFJO0FBQ0YscUJBQVMsT0FBTztBQUFBLG9CQUNoQjtBQUNBLFlBQUksUUFDRixLQUFLO0FBQUE7QUFBQSxZQUdQLFFBQ0YsS0FBSyxPQUNQLFNBQVMsYUFBYSxhQUFhLENBQUMsSUFBSSxXQUFXLElBQU07QUFBQSxTQUV2RCxlQUFlLENBQUMsSUFBSSxVQUFVO0FBQ2hDLFlBQUk7QUFDRixnQkFBTSxJQUFJLE1BQU07QUFDbEIsaUJBQVMsYUFBYSxhQUFhLENBQUMsSUFBSSxXQUFXLElBQU87QUFBQSxTQUV4RCxnQkFBZ0IsQ0FBQyxJQUFJLFlBQVksUUFBUSxNQUFNLE1BQU0sYUFBYTtBQUNwRSxZQUFJO0FBQ0Ysa0JBQVEsUUFBUTtBQUFBLGlCQUNULFFBQVE7QUFDWCwyQkFBYSxJQUFJO0FBQ2pCO0FBQUE7QUFBQSxpQkFFRyxXQUFXO0FBQ2Qsa0JBQUksV0FBVyxnQkFBZ0IsSUFBSSxRQUFRO0FBQzNDLGNBQUssV0FHSCxhQUFhLElBQUksTUFBTSxTQUFTLFlBRmhDLGFBQWEsSUFBSTtBQUduQjtBQUFBO0FBQUEsaUJBRUcsUUFBUTtBQUNYLGtCQUFJLFdBQVcsZ0JBQWdCLElBQUksUUFBUTtBQUMzQyxjQUFLLFdBR0gsYUFBYSxJQUFJLE1BQU0sU0FBUyxZQUZoQyxhQUFhLElBQUk7QUFHbkI7QUFBQTtBQUFBLGlCQUVHLGlCQUFpQjtBQUNwQixrQkFBSSxZQUFZLGVBQWUsSUFBSSxRQUFRO0FBQzNDLGNBQUksYUFBYSxVQUFVLGFBQ3pCLFVBQVUsVUFBVSxRQUFRLE9BQzlCLGFBQWEsSUFBSTtBQUNqQjtBQUFBO0FBQUEsaUJBRUcsY0FBYztBQUNqQixrQkFBSSxZQUFZLGVBQWUsSUFBSSxRQUFRO0FBQzNDLGNBQUksYUFDRixVQUFVLE9BQU8sUUFBUSxRQUMzQixhQUFhLElBQUk7QUFDakI7QUFBQTtBQUFBLGlCQUVHLGlCQUFpQjtBQUNwQixrQkFBSSxXQUFXLGVBQWUsSUFBSSxRQUFRO0FBQzFDLGtCQUFJO0FBQ0YsZ0JBQUksWUFDRixTQUFTLE1BQU0sUUFBUTtBQUFBLHVCQUNsQixLQUFQO0FBQ0Esd0JBQVEsTUFBTTtBQUFBO0FBRWhCLDJCQUFhLElBQUk7QUFDakI7QUFBQTtBQUFBO0FBR0Esb0JBQU0sSUFBSSxNQUFNLHNCQUFzQixRQUFRO0FBQUE7QUFBQSxpQkFFM0MsR0FBUDtBQUNBLHVCQUFhLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEdBQUcsVUFBVSxNQUFNO0FBQUE7QUFBQSxVQUdwRSxnQkFBZ0IsSUFDaEIsdUJBQXVCLENBQUMsVUFBVTtBQUNwQyxZQUFJLGVBQWU7QUFDakIsMEJBQWdCO0FBQ2hCLGNBQUksZ0JBQWdCLE9BQU8sYUFBYSxHQUFHO0FBQzNDLGNBQUksa0JBQWtCO0FBQ3BCLGtCQUFNLElBQUksTUFBTSw0RUFBaUYsS0FBSyxVQUFVO0FBRWxIO0FBQUE7QUFFRixZQUFJLFNBQVMsYUFBYTtBQUMxQixZQUFJLE9BQU87QUFDVCx3QkFBYyxPQUFPLElBQUksT0FBTztBQUFBLGFBQzNCO0FBQ0wsY0FBSSxXQUFXLGtCQUFrQixJQUFJLE9BQU87QUFDNUMsNEJBQWtCLE9BQU8sT0FBTyxLQUNoQyxBQUFJLE9BQU8sTUFBTSxRQUNmLFNBQVMsT0FBTyxNQUFNLE9BQU8sTUFFN0IsU0FBUyxNQUFNLE9BQU87QUFBQTtBQUFBLFNBR3hCLGdCQUFnQixDQUFDLFNBQVMsU0FBUyxVQUFVLFVBQVU7QUFDekQsWUFBSSxTQUFTO0FBQ1gsZ0JBQU0sSUFBSSxNQUFNO0FBQ2xCLFlBQUkscUJBQXFCLElBQ3JCLGtCQUFrQixJQUNsQixpQkFBaUIsR0FDakIsSUFBSTtBQUNSLGdCQUFRLFVBQVU7QUFDbEIsaUJBQVMsUUFBUSxTQUFTO0FBQ3hCLGNBQUksUUFBTztBQUNYLGNBQUksT0FBTyxRQUFTO0FBQ2xCLGtCQUFNLElBQUksTUFBTSxtQkFBbUI7QUFDckMsY0FBSSxPQUFPLFFBQVEsTUFBTSxPQUFNLFFBQVEsZUFDbkMsUUFBUSxRQUFRLE1BQU0sT0FBTSxTQUFTO0FBQ3pDLGNBQUksT0FBTyxRQUFTLFlBQVksU0FBUztBQUN2QyxrQkFBTSxJQUFJLE1BQU0sbUJBQW1CO0FBQ3JDLGNBQUksT0FBTyxTQUFVO0FBQ25CLGtCQUFNLElBQUksTUFBTSxJQUFJO0FBQ3RCLCtCQUFxQixNQUFNLE9BQU0sYUFBYSxLQUFLLFVBQVU7QUFDN0QsY0FBSSxTQUFTO0FBQUEsWUFDWDtBQUFBLFlBQ0EsV0FBVztBQUFBLFlBQ1gsUUFBUTtBQUFBO0FBRVYsZUFDQSxNQUFNO0FBQUEsWUFDSixVQUFVLFNBQVMsV0FBVztBQUM1QixrQkFBSSxpQkFBaUIsaUVBQ2pCLGlCQUFpQixnQkFBZ0IsSUFBSSxNQUFNLGlCQUFpQixVQUFVLGNBQ3RFLFNBQVEsSUFDUixTQUFTLFFBQVEsU0FBUyxRQUFPLFVBQVUsZUFDM0MsWUFBWSxRQUFRLFNBQVMsUUFBTyxhQUFhO0FBRXJELGtCQURBLHFCQUFxQixTQUFTLFFBQU8sa0NBQWtDLEtBQUssVUFBVSxVQUNsRixVQUFVO0FBQ1osc0JBQU0sSUFBSSxNQUFNLElBQUksT0FBTztBQUM3QixrQkFBSSxLQUFLO0FBQ1QsaUNBQW1CLE1BQU0sQ0FBQyxNQUFNLFVBQVUsV0FBVyxNQUFNLGlCQUMzRCxPQUFPLFVBQVUsS0FBSyxDQUFDLElBQUksUUFBUSxPQUFPLFFBQVEsV0FBVyxhQUFhO0FBQUE7QUFBQSxZQUU1RSxPQUFPLFNBQVMsV0FBVztBQUN6QixrQkFBSSxpQkFBaUIsOERBQ2pCLGlCQUFpQixnQkFBZ0IsSUFBSSxNQUFNLGlCQUFpQixVQUFVLFdBQ3RFLFNBQVEsSUFDUixTQUFTLFFBQVEsU0FBUyxRQUFPLFVBQVUsZUFDM0MsWUFBWSxRQUFRLFNBQVMsUUFBTyxhQUFhO0FBRXJELGtCQURBLHFCQUFxQixTQUFTLFFBQU8sK0JBQStCLEtBQUssVUFBVSxVQUMvRSxVQUFVO0FBQ1osc0JBQU0sSUFBSSxNQUFNLElBQUksT0FBTztBQUM3QixrQkFBSSxLQUFLO0FBQ1QsOEJBQWdCLE1BQU0sQ0FBQyxNQUFNLFVBQVUsV0FBVyxNQUFNLGlCQUN4RCxPQUFPLE9BQU8sS0FBSyxDQUFDLElBQUksUUFBUSxPQUFPLFFBQVEsV0FBVyxhQUFhO0FBQUE7QUFBQSxjQUczRSxRQUFRLFFBQVEsS0FBSztBQUFBO0FBRXZCLFlBQU0sV0FBVyxDQUFDLGFBQWEsUUFBUSxNQUFNLE1BQU0sYUFBYTtBQUM5RCxrQkFBUSxTQUFTO0FBQUEsaUJBQ1YsV0FBVztBQUNkLGtCQUFJLFdBQVcsSUFBSSxNQUFNLFdBQVc7QUFDcEMsdUJBQVMsTUFBTSxTQUFTO0FBQ3RCLG9CQUFJO0FBQ0Ysa0JBQUMsRUFBQyxNQUFNLFVBQVUsV0FBVyxRQUFRLG1CQUFtQjtBQUN4RCxzQkFBSSxTQUFTLE1BQU0sVUFBVTtBQUFBLG9CQUMzQixNQUFNLFNBQVM7QUFBQSxvQkFDZixVQUFVLFNBQVM7QUFBQSxvQkFDbkIsV0FBVyxTQUFTO0FBQUEsb0JBQ3BCLFlBQVksU0FBUztBQUFBLG9CQUNyQixNQUFNLFNBQVM7QUFBQSxvQkFDZixZQUFZLE1BQU0sS0FBSyxTQUFTO0FBQUE7QUFFbEMsc0JBQUksVUFBVSxNQUFNO0FBQ2xCLHdCQUFJLE9BQU8sVUFBVztBQUNwQiw0QkFBTSxJQUFJLE1BQU0sMkNBQTJDLEtBQUssVUFBVTtBQUM1RSx3QkFBSSxRQUFPLElBQ1AsYUFBYSxRQUFRLFFBQVEsT0FBTSxjQUFjLGVBQ2pELFFBQU8sUUFBUSxRQUFRLE9BQU0sUUFBUSxlQUNyQyxZQUFZLFFBQVEsUUFBUSxPQUFNLGFBQWEsZUFDL0MsV0FBVyxRQUFRLFFBQVEsT0FBTSxZQUFZLGdCQUM3QyxhQUFhLFFBQVEsUUFBUSxPQUFNLGNBQWMsZ0JBQ2pELFNBQVMsUUFBUSxRQUFRLE9BQU0sVUFBVSxjQUN6QyxXQUFXLFFBQVEsUUFBUSxPQUFNLFlBQVk7QUFDakQseUNBQXFCLFFBQVEsT0FBTSx1Q0FBdUMsS0FBSyxVQUFVLFVBQ3pGLFNBQVMsS0FBSyxJQUNWLGNBQWMsUUFDaEIsVUFBUyxhQUFhLGFBQ3BCLFNBQVEsUUFDVixVQUFTLE9BQU8sUUFDZCxhQUFhLFFBQ2YsVUFBUyxZQUFZLFlBQ25CLFlBQVksUUFDZCxVQUFTLFdBQVcsV0FDbEIsY0FBYyxRQUNoQixVQUFTLGFBQWEsTUFBTSxNQUFNLGNBQ2hDLFVBQVUsUUFDWixVQUFTLFNBQVMsaUJBQWlCLFFBQVEsVUFBVSxTQUNuRCxZQUFZLFFBQ2QsVUFBUyxXQUFXLGlCQUFpQixVQUFVLFlBQVk7QUFDN0Q7QUFBQTtBQUFBLHlCQUVLLEdBQVA7QUFDQSx5QkFBTyxDQUFDLElBQUksUUFBUSxDQUFDLHNCQUFzQixHQUFHLFVBQVUsT0FBTztBQUFBO0FBR25FLHFCQUFPO0FBQUE7QUFBQSxpQkFFSixRQUFRO0FBQ1gsa0JBQUksV0FBVyxJQUFJLE1BQU0sV0FBVztBQUNwQyx1QkFBUyxNQUFNLFNBQVM7QUFDdEIsb0JBQUk7QUFDRixrQkFBQyxFQUFDLE1BQU0sVUFBVSxXQUFXLFFBQVEsZ0JBQWdCO0FBQ3JELHNCQUFJLFNBQVMsTUFBTSxVQUFVO0FBQUEsb0JBQzNCLE1BQU0sU0FBUztBQUFBLG9CQUNmLFdBQVcsU0FBUztBQUFBLG9CQUNwQixZQUFZLE1BQU0sS0FBSyxTQUFTO0FBQUE7QUFFbEMsc0JBQUksVUFBVSxNQUFNO0FBQ2xCLHdCQUFJLE9BQU8sVUFBVztBQUNwQiw0QkFBTSxJQUFJLE1BQU0sd0NBQXdDLEtBQUssVUFBVTtBQUN6RSx3QkFBSSxRQUFPLElBQ1AsYUFBYSxRQUFRLFFBQVEsT0FBTSxjQUFjLGVBQ2pELFdBQVcsUUFBUSxRQUFRLE9BQU0sWUFBWSwyQkFDN0MsYUFBYSxRQUFRLFFBQVEsT0FBTSxjQUFjLGVBQ2pELGFBQWEsUUFBUSxRQUFRLE9BQU0sY0FBYyxnQkFDakQsU0FBUyxRQUFRLFFBQVEsT0FBTSxVQUFVLGVBQ3pDLFNBQVMsUUFBUSxRQUFRLE9BQU0sVUFBVSxjQUN6QyxXQUFXLFFBQVEsUUFBUSxPQUFNLFlBQVk7QUFDakQseUNBQXFCLFFBQVEsT0FBTSxvQ0FBb0MsS0FBSyxVQUFVLFVBQ3RGLFNBQVMsS0FBSyxJQUNWLGNBQWMsUUFDaEIsVUFBUyxhQUFhLGFBQ3hCLEFBQUksb0JBQW9CLGFBQ3RCLFNBQVMsV0FBVyxXQUNiLFlBQVksUUFDbkIsVUFBUyxXQUFXLFdBQVcsWUFDN0IsY0FBYyxRQUNoQixVQUFTLGFBQWEsYUFDcEIsY0FBYyxRQUNoQixVQUFTLGFBQWEsTUFBTSxNQUFNLGNBQ2hDLFVBQVUsUUFDWixVQUFTLFNBQVMsU0FDaEIsVUFBVSxRQUNaLFVBQVMsU0FBUyxpQkFBaUIsUUFBUSxVQUFVLFNBQ25ELFlBQVksUUFDZCxVQUFTLFdBQVcsaUJBQWlCLFVBQVUsWUFBWTtBQUM3RDtBQUFBO0FBQUEseUJBRUssR0FBUDtBQUNBLHlCQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsc0JBQXNCLEdBQUcsVUFBVSxPQUFPO0FBQUE7QUFHbkUscUJBQU87QUFBQTtBQUFBO0FBR1Asb0JBQU0sSUFBSSxNQUFNLHNCQUFzQixTQUFTO0FBQUE7QUFBQSxZQUdqRCxXQUFXO0FBQ2YsZUFBTztBQUFBLFVBQ0wsTUFBTTtBQUNKLFlBQUksRUFBRSxZQUFhLEtBQ2pCLGdCQUFnQixJQUFJLFVBQVU7QUFBQTtBQUFBLFVBRWxDLFFBQVE7QUFDTixZQUFJLEVBQUUsWUFBYSxLQUNqQixnQkFBZ0IsT0FBTztBQUFBO0FBQUE7QUFBQSxTQUkzQixpQkFBaUIsQ0FBQyxNQUFNLFNBQVMsWUFBWTtBQUMvQyxZQUFJLFFBQU8sSUFDUCxPQUFPLFFBQVEsU0FBUyxPQUFNLFFBQVEsZ0JBQ3RDLE9BQU8sUUFBUSxTQUFTLE9BQU0sUUFBUSxlQUN0QyxXQUFXLFFBQVEsU0FBUyxPQUFNLFlBQVksZUFDOUMsWUFBWSxRQUFRLFNBQVMsT0FBTSxhQUFhLGlCQUNoRCxVQUFVLGVBQ1YsUUFDQSxPQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsV0FBVztBQUMxQyxtQkFBUyxDQUFDLFVBQVU7QUFDbEIsMkJBQWUsT0FBTyxVQUN0QixBQUFJLFVBQVUsT0FDWixPQUFPLElBQUksTUFBTSxVQUVqQjtBQUFBO0FBQUE7QUFHTix1QkFBUSxRQUFRLENBQUMsVUFDakIscUJBQXFCLFNBQVMsT0FBTSxvQkFDaEMsU0FBUyxVQUNYLFNBQVEsTUFBTSxPQUFPLE9BQ25CLFNBQVMsVUFDWCxTQUFRLE1BQU0sT0FBTyxPQUNuQixhQUFhLFVBQ2YsU0FBUSxNQUFNLFdBQVcsV0FDM0IsZUFBZSxJQUFJLFNBQVM7QUFBQSxVQUMxQjtBQUFBLFVBQ0E7QUFBQSxZQUVLO0FBQUEsVUFDTDtBQUFBLFVBQ0EsT0FBTztBQUNMLHdCQUFZLE1BQU0sQ0FBQyxTQUFTLGNBQWMsVUFBVSxNQUFNO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFLaEUsYUFBTztBQUFBLFFBQ0w7QUFBQSxRQUNBO0FBQUEsUUFDQSxTQUFTO0FBQUEsVUFDUCxhQUFhLFVBQVUsWUFBWSxjQUFjLFNBQVMsT0FBTyxXQUFXLFVBQVU7QUFDcEYsZ0JBQUksWUFDRSxVQUFVLHFCQUNWLGtCQUFrQixXQUNsQixPQUFPO0FBQUEsY0FDWCxNQUFNO0FBQ0osZ0JBQUksY0FDRixXQUFXLE9BQ1QsY0FDRixXQUFXO0FBQUE7QUFBQSxjQUVmLFFBQVE7QUFDTixnQkFBSSxjQUNGLFdBQVcsU0FDVCxjQUNGLFdBQVc7QUFBQTtBQUFBO0FBR2pCLGdCQUFJO0FBQ0Ysa0JBQUksTUFBTSxnQkFDTixlQUFlLENBQUMsU0FBUyxXQUN6QjtBQUFBLGdCQUNGO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQTtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQTtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQTtBQUFBLGtCQUNFLHFCQUFxQixVQUFVLFNBQVMsT0FBTyxpQkFBaUIsZUFDaEUsVUFBVTtBQUFBLGdCQUNaLFNBQVM7QUFBQSxnQkFDVDtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0E7QUFBQSxnQkFDQTtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0EsZUFBZSxpQkFBaUI7QUFBQSxnQkFDaEM7QUFBQSxnQkFDQTtBQUFBLGdCQUNBLGNBQWMsQ0FBQyxDQUFFLFVBQVMsTUFBTTtBQUFBLGlCQUU5QixTQUFTLGdCQUFnQixlQUFlLE1BQU0sY0FBYztBQUNoRSxjQUFJLFdBQVcsUUFBUSxTQUFTLEtBQzlCLGNBQWEsY0FBYyxTQUFTLFNBQVMsS0FBSztBQUNwRCxrQkFBSSxTQUNBLE1BQ0Esd0JBQXdCLENBQUMsVUFBVSxjQUFjO0FBQ25ELG9CQUFJLFNBQVMseUJBQXlCLFNBQVMsUUFBUSxVQUNuRCxXQUFXLHlCQUF5QixTQUFTLFVBQVU7QUFDM0Qsb0JBQUksT0FBTyxTQUFTO0FBQ2xCLHlCQUFPLFVBQVUsb0JBQW9CLGdCQUFnQixRQUFRLFdBQVc7QUFDMUUsb0JBQUksU0FBUyxDQUFDO0FBT2Qsb0JBTkksU0FBUyxlQUNYLFFBQU8sY0FBYyxTQUFTLFlBQVksSUFBSSxzQkFDNUMsU0FBUyxZQUNYLFFBQU8sV0FBVyxLQUFLLE1BQU0sU0FBUyxZQUNwQyxTQUFTLGtCQUFrQixVQUM3QixRQUFRLElBQUksV0FBVyxTQUFTLGVBQWUsUUFBUSxPQUFPLE1BQzVELFNBQVMsY0FBYyxRQUFRO0FBQ2pDLHNCQUFJLENBQUMsU0FBUztBQUNaLHdCQUFJLGFBQWE7QUFDakIsOEJBQVUsTUFBTSxJQUFJLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFDL0MsMEJBQUksY0FBYztBQUNoQiw4QkFBTSxJQUFJLE1BQU07QUFDbEIsa0NBQVksTUFBTSxDQUFDLFNBQVMsV0FBVyxXQUFXLFNBQVMsWUFBWSxDQUFDLFFBQVEsY0FBYztBQUM1Riw0QkFBSTtBQUNGLGlDQUFPLFVBQVUsSUFBSSxNQUFNLFNBQVM7QUFDdEMsOENBQXNCLFdBQVcsQ0FBQyxRQUFRLFlBQVk7QUFDcEQsMEJBQUksU0FDRixPQUFPLFVBRVAsUUFBUTtBQUFBO0FBQUE7QUFBQSx3QkFJaEIsS0FBSyxPQUNMLFFBQVEsVUFBVSxNQUFNO0FBQ3RCLHNCQUFJLGNBRUosY0FBYSxJQUNiLFlBQVksTUFBTSxDQUFDLFNBQVMsbUJBQW1CLFdBQVcsU0FBUyxZQUFZLE1BQU07QUFBQSwwQkFFckYsS0FBSztBQUFBO0FBQUE7QUFHVCx5QkFBTyxVQUFVO0FBQUE7QUFFbkIsb0JBQUksU0FBUyxZQUFZLFFBQVE7QUFDL0Isc0JBQUksQ0FBQyxNQUFNO0FBQ1Qsd0JBQUksWUFBWTtBQUNoQix5QkFBSyxPQUNMLE9BQU8sTUFBTTtBQUNYLHNCQUFJLGFBRUosYUFBWSxJQUNaLGVBQWUsT0FBTyxTQUFTLFVBQy9CLFlBQVksTUFBTSxDQUFDLFNBQVMsY0FBYyxTQUFTLFNBQVMsVUFBVSxNQUFNO0FBQUEsMEJBRTVFLEtBQUs7QUFBQSx1QkFFSCxTQUFTLE1BQU0sYUFDakIsZUFBZSxJQUFJLFNBQVMsU0FBUyxDQUFDLGtCQUFrQixrQkFBa0I7QUFDeEUsMEJBQUk7QUFDRiwrQkFBTyxNQUFNLFVBQVUsa0JBQWtCO0FBQzNDLDBCQUFJLFVBQVUseUJBQXlCLGNBQWMsUUFBUSxVQUN6RCxZQUFZLHlCQUF5QixjQUFjLFVBQVU7QUFDakUsMEJBQUksUUFBUSxTQUFTO0FBQ25CLCtCQUFPLE1BQU0sVUFBVSxvQkFBb0IsZ0JBQWdCLFNBQVMsWUFBWTtBQUNsRiwwQkFBSSxVQUFVLENBQUMsVUFBVTtBQUN6QixzQkFBSSxjQUFjLGVBQ2hCLFNBQVEsY0FBYyxjQUFjLFlBQVksSUFBSSxzQkFDbEQsY0FBYyxjQUFjLFVBQzlCLFNBQVEsVUFBVSxVQUNwQixRQUFRLE9BQU8sTUFDZixNQUFNLFVBQVUsTUFBTTtBQUFBO0FBQUE7QUFJNUIseUJBQU8sT0FBTztBQUFBO0FBRWhCLHVCQUFPLFVBQVUsTUFBTTtBQUFBO0FBRXpCLGtCQUFJLFNBQVMsU0FBUztBQUNwQixzQkFBTSxJQUFJLE1BQU07QUFDbEIsa0JBQUksZUFBZSxTQUFTO0FBQzFCLHNCQUFNLElBQUksTUFBTTtBQUNsQiwwQkFBWSxNQUFNLFNBQVMsQ0FBQyxPQUFPLGFBQWE7QUFDOUMsb0JBQUk7QUFDRix5QkFBTyxTQUFTLElBQUksTUFBTSxRQUFRO0FBQ3BDLG9CQUFJLFFBQVE7QUFDVixzQkFBSSxnQkFBZ0IsVUFDaEIsWUFBWTtBQUNoQix1QkFBSztBQUNMLHNCQUFJLFNBQVM7QUFBQSxvQkFDWCxNQUFNLGNBQWM7QUFBQSxvQkFDcEIsTUFBTSxjQUFjO0FBQUEsb0JBQ3BCLE1BQU0sT0FBTztBQUFBLG9CQUNiLE9BQU87QUFDTCxzQkFBSSxhQUVKLGFBQVksSUFDWixPQUFPLFFBQ1AsS0FBSztBQUFBO0FBQUE7QUFHVCw4QkFBSyxPQUNMLE9BQU8sS0FBSyxLQUFLLEtBQUssT0FBTyxLQUFLLFFBQzNCLFNBQVMsTUFBTTtBQUFBO0FBRXhCLHVCQUFPLHNCQUFzQixVQUFVO0FBQUE7QUFBQSxxQkFFbEMsR0FBUDtBQUNBLGtCQUFJLFFBQVE7QUFDWixrQkFBSTtBQUNGLDZCQUFhLE9BQU8sU0FBUyxJQUFJLE9BQU87QUFBQSx1QkFDakMsSUFBUDtBQUFBO0FBRUYsa0JBQU0sUUFBUSxzQkFBc0IsR0FBRyxVQUFVLFNBQVM7QUFDMUQsMEJBQVksTUFBTSxDQUFDLFNBQVMsU0FBUyxPQUFPLFFBQVEsTUFBTTtBQUN4RCxzQkFBTSxTQUFTLFFBQVEsS0FBSyxNQUFNLFNBQ2xDLFNBQVMsb0JBQW9CLGdCQUFnQixDQUFDLFFBQVEsS0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBLFVBSWpFLFVBQVUsVUFBVSxNQUFNLE9BQU8sU0FBUyxPQUFPLElBQUksVUFBVTtBQUM3RCxnQkFBTSxVQUFVLHFCQUNWLGtCQUFrQixVQUNwQixRQUFRLENBQUMsY0FBYztBQUN6QixrQkFBSTtBQUNGLG9CQUFJLE9BQU8sU0FBVTtBQUNuQix3QkFBTSxJQUFJLE1BQU07QUFDbEIsb0JBQUksUUFBUSx5QkFBeUIsVUFBVSxTQUFTLE9BQU87QUFPL0QsNEJBQVksTUFORTtBQUFBLGtCQUNaLFNBQVM7QUFBQSxrQkFDVDtBQUFBLGtCQUNBLFNBQVMsY0FBYztBQUFBLGtCQUN2QixPQUFPLGNBQWMsT0FBTyxZQUFZO0FBQUEsbUJBRWYsQ0FBQyxPQUFPLGFBQWE7QUFDOUMsc0JBQUk7QUFDRiwyQkFBTyxTQUFTLElBQUksTUFBTSxRQUFRO0FBQ3BDLHNCQUFJLFNBQVMseUJBQXlCLFNBQVMsUUFBUSxVQUNuRCxXQUFXLHlCQUF5QixTQUFTLFVBQVUsVUFDdkQsY0FBYyxHQUNkLE9BQU8sTUFBTSxFQUFFLGVBQWdCLEtBQUssU0FBUyxNQUFNLENBQUMsVUFBVSxNQUFNLFNBQVMsTUFBTSxLQUFLLFNBQVM7QUFDckcsc0JBQUksT0FBTyxTQUFTO0FBQ2xCLDJCQUFPLFNBQVMsb0JBQW9CLG9CQUFvQixRQUFRLFdBQVc7QUFDN0Usa0JBQUksU0FBUyxVQUNYLGdCQUNBLEdBQUcsU0FBUyxTQUFTLE1BQU0sQ0FBQyxLQUFLLGFBQWE7QUFDNUMsb0JBQUksUUFBUSxPQUNWLFNBQVMsS0FBSyxRQUVkLFVBQVMsT0FBTyxVQUNoQjtBQUFBLHVCQUlGLFNBQVMsU0FDWCxnQkFDQSxHQUFHLFNBQVMsU0FBUyxLQUFLLENBQUMsS0FBSyxhQUFhO0FBQzNDLG9CQUFJLFFBQVEsT0FDVixTQUFTLEtBQUssUUFFZCxVQUFTLE1BQU0sVUFDZjtBQUFBLHVCQUlOO0FBQUE7QUFBQSx1QkFFSyxHQUFQO0FBQ0Esb0JBQUksUUFBUTtBQUNaLG9CQUFJO0FBQ0YsK0JBQWEsT0FBTyxTQUFTLElBQUksT0FBTztBQUFBLHlCQUNqQyxJQUFQO0FBQUE7QUFFRixvQkFBTSxRQUFRLHNCQUFzQixHQUFHLFVBQVUsU0FBUztBQUMxRCw0QkFBWSxNQUFNLENBQUMsU0FBUyxTQUFTLE9BQU8sUUFBUSxNQUFNO0FBQ3hELHdCQUFNLFNBQVMsUUFBUSxLQUFLLE1BQU0sU0FDbEMsU0FBUyxvQkFBb0Isb0JBQW9CLENBQUMsUUFBUSxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBSXJFLGdCQUFJLE9BQU8sU0FBVSxZQUFZLE1BQU0sU0FBUyxPQUFPLE1BQU07QUFDM0Qsa0JBQUksT0FBTztBQUNYLHNCQUFRLE1BQU0sR0FBRyxVQUFVLE9BQU87QUFBQTtBQUVwQyxrQkFBTTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS2QsaUNBQTZCO0FBQzNCLFVBQU0sTUFBTSxJQUFJLE9BQ1osU0FBUztBQUNiLGFBQU87QUFBQSxRQUNMLEtBQUssSUFBSTtBQUNQLGlCQUFPLElBQUksSUFBSTtBQUFBO0FBQUEsUUFFakIsTUFBTSxPQUFPO0FBQ1gsY0FBSSxVQUFVO0FBQ1osbUJBQU87QUFDVCxjQUFNLEtBQUs7QUFDWCxxQkFBSSxJQUFJLElBQUksUUFDTDtBQUFBO0FBQUE7QUFBQTtBQUliLDZCQUF5QixHQUFHLFVBQVUsT0FBTztBQUMzQyxVQUFJO0FBQ0YsWUFBSSxRQUFTLEdBQUUsUUFBUSxJQUFJLE1BQU07QUFBQTtBQUNqQyxjQUFNLE9BQU8sR0FBRztBQUNoQixZQUFJLFlBQVcsa0JBQWtCLFVBQVUsT0FBTztBQUNsRCxZQUFJO0FBQ0YsaUJBQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUztBQUFBLGVBRXBCLElBQVA7QUFBQTtBQUFBO0FBR0osbUNBQStCLEdBQUcsVUFBVSxPQUFPLE1BQU07QUFDdkQsVUFBSSxPQUFPLGtCQUNQLFlBQVc7QUFDZixVQUFJO0FBQ0YsZUFBUSxNQUFLLEVBQUUsV0FBVyxLQUFLO0FBQUEsZUFDeEIsSUFBUDtBQUFBO0FBRUYsVUFBSTtBQUNGLG9CQUFXLGtCQUFrQixVQUFXLEdBQUUsUUFBUSxJQUFJLE1BQU07QUFBQSxJQUFPO0FBQUEsZUFDNUQsSUFBUDtBQUFBO0FBRUYsYUFBTyxDQUFDLE1BQU0scUJBQVUsT0FBTyxPQUFPLENBQUMsUUFBUSxJQUFJLFFBQVEsUUFBUSxNQUFNLE1BQU0sS0FBSztBQUFBO0FBRXRGLCtCQUEyQixVQUFVLE9BQU8sT0FBTztBQUNqRCxVQUFJLEtBQUs7QUFDVCxVQUFJLFNBQVMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLFdBQVcsT0FBTyxNQUFNLEdBQUcsV0FBVztBQUMzRSxpQkFBUyxJQUFJLEdBQUcsSUFBSSxNQUFNLFFBQVEsS0FBSztBQUNyQyxjQUFJLE9BQU8sTUFBTTtBQUNqQixjQUFJLEVBQUMsS0FBSyxXQUFXO0FBR3JCLGlCQURBLE9BQU8sS0FBSyxNQUFNLEdBQUcsYUFDUjtBQUNYLGtCQUFJLFFBQVEsaUNBQWlDLEtBQUs7QUFDbEQsa0JBQUksT0FBTztBQUNULHVCQUFPLE1BQU07QUFDYjtBQUFBO0FBR0Ysa0JBREEsUUFBUSwyQ0FBMkMsS0FBSyxPQUNwRCxPQUFPO0FBQ1QsdUJBQU8sTUFBTTtBQUNiO0FBQUE7QUFHRixrQkFEQSxRQUFRLHNCQUFzQixLQUFLLE9BQy9CLE9BQU87QUFFVCxvQkFBSSxXQUFXLEFBREEsU0FBUyxhQUFhLE1BQU0sSUFBSSxRQUN2QixNQUFNLDRCQUE0QixDQUFDLE1BQU0sS0FBSyxNQUFNLElBQ3hFLFNBQVMsQ0FBQyxNQUFNLEtBQUssR0FDckIsU0FBUyxTQUFTLE1BQU0sUUFBUSxTQUFTLE1BQU0sWUFBWSxRQUFRLE1BQU0sU0FBUztBQUN0Rix1QkFBTztBQUFBLGtCQUNMLE1BQU0sTUFBTTtBQUFBLGtCQUNaLFdBQVc7QUFBQSxrQkFDWCxNQUFNLENBQUMsTUFBTTtBQUFBLGtCQUNiLFFBQVEsV0FBVyxTQUFTLE1BQU0sR0FBRyxTQUFTO0FBQUEsa0JBQzlDLFFBQVEsV0FBVyxTQUFTLE1BQU0sUUFBUSxTQUFTLFNBQVM7QUFBQSxrQkFDNUQsVUFBVSxXQUFXO0FBQUEsSUFBTyxNQUFNLE1BQU0sR0FBRyxLQUFLO0FBQUE7QUFBQTtBQUFBO0FBR3BEO0FBQUE7QUFBQTtBQUlOLGFBQU87QUFBQTtBQUVULGlDQUE2QixNQUFNLFFBQVEsVUFBVTtBQUNuRCxVQUFJLFFBQVEsR0FDUixVQUFVLE9BQU8sU0FBUyxJQUFJLEtBQUssU0FBUyxPQUFPLGVBQWUsT0FBTyxTQUFTLElBQUksS0FBSyxTQUFTLE9BQU8sTUFBTSxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxNQUFNO0FBQy9JLFlBQUksTUFBTTtBQUNSLGlCQUFPO0FBQUE7QUFDVCxZQUFJLENBQUMsRUFBRTtBQUNMLGlCQUFPO0FBQUEsU0FDSixFQUFFO0FBQ1AsWUFBSSxDQUFDLE1BQU0sTUFBTSxVQUFVLEVBQUU7QUFDN0IsZUFBTztBQUFBLEVBQ1QsUUFBUSxRQUFRLGtCQUFrQixFQUFFO0FBQUEsU0FDakMsS0FBSyxLQUNKLFFBQVEsSUFBSSxNQUFNLEdBQUcsT0FBTztBQUNoQyxtQkFBTSxTQUFTLFFBQ2YsTUFBTSxXQUFXLFVBQ1Y7QUFBQTtBQUVULHNDQUFrQyxVQUFVLE9BQU87QUFDakQsZUFBVyxXQUFXO0FBQ3BCLGdCQUFRLFNBQVMsTUFBTSxLQUFLLFFBQVE7QUFFdEMsYUFBTztBQUFBO0FBRVQsOEJBQTBCLFdBQVUsT0FBTztBQUN6QyxVQUFJLGFBQVk7QUFDZCxlQUFPO0FBQ1QsVUFBSSxRQUFPLElBQ1AsT0FBTyxRQUFRLFdBQVUsT0FBTSxRQUFRLGVBQ3ZDLFlBQVksUUFBUSxXQUFVLE9BQU0sYUFBYSxlQUNqRCxPQUFPLFFBQVEsV0FBVSxPQUFNLFFBQVEsZ0JBQ3ZDLFNBQVMsUUFBUSxXQUFVLE9BQU0sVUFBVSxnQkFDM0MsU0FBUyxRQUFRLFdBQVUsT0FBTSxVQUFVLGdCQUMzQyxXQUFXLFFBQVEsV0FBVSxPQUFNLFlBQVk7QUFDbkQsa0NBQXFCLFdBQVUsT0FBTSxRQUM5QjtBQUFBLFFBQ0wsTUFBTSxRQUFRO0FBQUEsUUFDZCxXQUFXLGFBQWE7QUFBQSxRQUN4QixNQUFNLFFBQVE7QUFBQSxRQUNkLFFBQVEsVUFBVTtBQUFBLFFBQ2xCLFFBQVEsVUFBVTtBQUFBLFFBQ2xCLFVBQVUsWUFBWTtBQUFBO0FBQUE7QUFHMUIsOEJBQTBCLFVBQVUsVUFBVSxPQUFPO0FBQ25ELFVBQUksZ0JBQWdCLElBQ2hCLFFBQVE7QUFDWixlQUFXLFdBQVcsVUFBVTtBQUM5QixZQUFJLFFBQU8sSUFDUCxPQUFPLFFBQVEsU0FBUyxPQUFNLFFBQVEsZUFDdEMsWUFBVyxRQUFRLFNBQVMsT0FBTSxZQUFZLHFCQUM5QyxRQUFRLFFBQVEsU0FBUyxPQUFNLFNBQVMsY0FDeEMsU0FBUyxRQUFRLFNBQVMsT0FBTSxVQUFVLGdCQUMxQyxRQUFRLGNBQWMsYUFBYTtBQUN2Qyw2QkFBcUIsU0FBUyxPQUFNO0FBQ3BDLFlBQUksYUFBYTtBQUNqQixZQUFJO0FBQ0YsbUJBQVcsUUFBUSxPQUFPO0FBQ3hCLGdCQUFJLFdBQVcsSUFDWCxXQUFXLFFBQVEsTUFBTSxVQUFVLFFBQVEsZUFDM0MsZUFBZSxRQUFRLE1BQU0sVUFBVSxZQUFZO0FBQ3ZELGlDQUFxQixNQUFNLFVBQVUsUUFDckMsV0FBVyxLQUFLO0FBQUEsY0FDZCxNQUFNLFlBQVk7QUFBQSxjQUNsQixVQUFVLGlCQUFpQixjQUFjO0FBQUE7QUFBQTtBQUkvQyxzQkFBYyxLQUFLO0FBQUEsVUFDakIsTUFBTSxRQUFRO0FBQUEsVUFDZCxVQUFVLGlCQUFpQixXQUFVO0FBQUEsVUFDckMsT0FBTztBQUFBLFVBQ1AsUUFBUSxNQUFNLE1BQU07QUFBQSxZQUV0QjtBQUFBO0FBRUYsYUFBTztBQUFBO0FBRVQsZ0NBQTRCLENBQUMsYUFBTSxXQUFXO0FBQzVDLFVBQUksT0FBTztBQUNYLGFBQU87QUFBQSxRQUNMO0FBQUEsUUFDQTtBQUFBLFlBQ0ksT0FBTztBQUNULGlCQUFJLFNBQVMsUUFDWCxRQUFPLFdBQVcsWUFDYjtBQUFBO0FBQUE7QUFBQTtBQU1iLFFBQUksVUFBVSxTQUNWLFNBQVEsQ0FBQyxZQUFZLHlCQUF5QixNQUFNLFVBQ3BELFFBQVEsTUFBTTtBQUNoQixZQUFNLElBQUksTUFBTTtBQUFBLE9BRWQsWUFBWSxDQUFDLE9BQU8sWUFBWSx5QkFBeUIsVUFBVSxPQUFPLFVBQzFFLFlBQVksTUFBTTtBQUNwQixZQUFNLElBQUksTUFBTTtBQUFBLE9BRWQsZ0JBQWdCLE1BQU07QUFDeEIsWUFBTSxJQUFJLE1BQU07QUFBQSxPQUVkLG1CQUNBLGtCQUNBLHlCQUF5QixNQUFNO0FBQ2pDLFVBQUk7QUFDRixlQUFPO0FBQ1QsWUFBSSxvQkFDSSxJQUFJLE1BQU0sb0dBQ1osSUFBSSxNQUFNO0FBQUEsT0FFZCxhQUFhLENBQUMsWUFBWTtBQUM1QixnQkFBVSwwQkFBMEIsV0FBVztBQUMvQyxVQUFJLFVBQVUsUUFBUSxTQUNsQixZQUFZLFFBQVEsV0FBVztBQUNuQyxVQUFJLENBQUM7QUFDSCxjQUFNLElBQUksTUFBTTtBQUVsQixVQURBLFdBQVcsSUFDUDtBQUNGLGNBQU0sSUFBSSxNQUFNO0FBQ2xCLGlDQUFvQixvQkFBb0IsU0FBUyxZQUNqRCxrQkFBa0IsTUFBTSxNQUFNO0FBQzVCLDRCQUFvQjtBQUFBLFVBRWY7QUFBQSxPQUVMLHNCQUFzQixDQUFDLFNBQVMsY0FBYyxRQUFRLFFBQVEsTUFBTSxhQUFhO0FBQ25GLFVBQUksTUFBTSxNQUFNLE1BQU07QUFDdEIsVUFBSSxDQUFDLElBQUk7QUFDUCxjQUFNLElBQUksTUFBTSxzQkFBc0IsS0FBSyxVQUFVO0FBQ3ZELFVBQUksT0FBTyxNQUFNLElBQUksZUFDakIsT0FBTztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFB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
